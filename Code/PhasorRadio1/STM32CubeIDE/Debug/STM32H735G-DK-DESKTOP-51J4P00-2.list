
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000238f0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023e4  08023bc0  08023bc0  00024bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000ff2  08025fa4  08025fa4  00026fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000038  08026f98  08026f98  00027f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000003e  08026fd0  08026fd0  00027fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 IntFlashSection 00072780  08027010  08027010  00028010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08099790  08099790  0009b140  2**0
                  CONTENTS
  8 .ARM          00000008  08099790  08099790  0009a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08099798  08099798  0009b140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08099798  08099798  0009a798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080997b0  080997b0  0009a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000140  24000000  080997b8  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0002e584  24000140  080998f8  0009b140  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2402e6c4  080998f8  0009b6c4  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0009b140  2**0
                  CONTENTS, READONLY
 16 ExtFlashSection 00000000  90000000  90000000  0009b16e  2**0
                  CONTENTS
 17 BufferSection 0011ee00  70000000  70000000  0009c000  2**2
                  ALLOC
 18 .debug_info   000da0cc  00000000  00000000  0009b16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00015ccc  00000000  00000000  0017523a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003790  00000000  00000000  0018af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00005141  00000000  00000000  0018e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00043e2c  00000000  00000000  001937d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005ea00  00000000  00000000  001d7605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00189e95  00000000  00000000  00236005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  003bfe9a  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00009a20  00000000  00000000  003bff5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loclists 00023822  00000000  00000000  003c997c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 0000007a  00000000  00000000  003ed19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000140 	.word	0x24000140
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08023ba8 	.word	0x08023ba8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000144 	.word	0x24000144
 800030c:	08023ba8 	.word	0x08023ba8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	@ (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f00c bfcc 	b.w	800d6c8 <vTaskSetApplicationTaskTag>
 8000730:	08002301 	.word	0x08002301

08000734 <myTimerCallbackB>:

/* myTimerCallbackB function */
void myTimerCallbackB(void *argument)
{
	/* USER CODE BEGIN myTimerCallbackB */
	readyToSendI2C = FALSE;
 8000734:	2200      	movs	r2, #0
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <myTimerCallbackB+0x10>)
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000738:	2120      	movs	r1, #32
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <myTimerCallbackB+0x14>)
	readyToSendI2C = FALSE;
 800073c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 800073e:	f008 b8bb 	b.w	80088b8 <HAL_GPIO_WritePin>
 8000742:	bf00      	nop
 8000744:	2400015d 	.word	0x2400015d
 8000748:	58021800 	.word	0x58021800

0800074c <StartDefaultTask>:
{
 800074c:	b508      	push	{r3, lr}
		osDelay(100);
 800074e:	2064      	movs	r0, #100	@ 0x64
 8000750:	f00b fa95 	bl	800bc7e <osDelay>
	for (;;)
 8000754:	e7fb      	b.n	800074e <StartDefaultTask+0x2>

08000756 <StartTaskFromGui>:
{
 8000756:	b508      	push	{r3, lr}
		osDelay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f00b fa90 	bl	800bc7e <osDelay>
	for (;;)
 800075e:	e7fb      	b.n	8000758 <StartTaskFromGui+0x2>

08000760 <myTimerCallbackA>:
{
 8000760:	b508      	push	{r3, lr}
	readyToSendI2C = TRUE;
 8000762:	2201      	movs	r2, #1
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <myTimerCallbackA+0x20>)
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000766:	2120      	movs	r1, #32
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <myTimerCallbackA+0x24>)
	readyToSendI2C = TRUE;
 800076a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 800076c:	f008 f8a4 	bl	80088b8 <HAL_GPIO_WritePin>
	osTimerStart(myTimerI2CWindowBHandle, 25);
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <myTimerCallbackA+0x28>)
 8000772:	2119      	movs	r1, #25
 8000774:	6818      	ldr	r0, [r3, #0]
}
 8000776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osTimerStart(myTimerI2CWindowBHandle, 25);
 800077a:	f00b bac7 	b.w	800bd0c <osTimerStart>
 800077e:	bf00      	nop
 8000780:	2400015d 	.word	0x2400015d
 8000784:	58021800 	.word	0x58021800
 8000788:	2400018c 	.word	0x2400018c

0800078c <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == GPIO_PIN_8)
 800078c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000790:	d138      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x78>
		if (stepSize == 1000)
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800079a:	d119      	bne.n	80007d0 <HAL_GPIO_EXTI_Callback+0x44>
			stepSize = 100;
 800079c:	2264      	movs	r2, #100	@ 0x64
			stepSize = 1000;
 800079e:	601a      	str	r2, [r3, #0]
			switch (currentBand)
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <HAL_GPIO_EXTI_Callback+0xa0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b28      	cmp	r3, #40	@ 0x28
 80007a6:	d02e      	beq.n	8000806 <HAL_GPIO_EXTI_Callback+0x7a>
 80007a8:	2b50      	cmp	r3, #80	@ 0x50
 80007aa:	d01a      	beq.n	80007e2 <HAL_GPIO_EXTI_Callback+0x56>
 80007ac:	2b14      	cmp	r3, #20
 80007ae:	d129      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x78>
				vfo_20m_5351 = (vfo_20m_5351 / 1000) * 1000;
 80007b0:	491f      	ldr	r1, [pc, #124]	@ (8000830 <HAL_GPIO_EXTI_Callback+0xa4>)
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 80007b2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000834 <HAL_GPIO_EXTI_Callback+0xa8>
				vfo_20m_5351 = (vfo_20m_5351 / 1000) * 1000;
 80007b6:	680b      	ldr	r3, [r1, #0]
 80007b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80007bc:	4353      	muls	r3, r2
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 80007be:	ee07 3a90 	vmov	s15, r3
				vfo_20m_5351 = (vfo_20m_5351 / 1000) * 1000;
 80007c2:	600b      	str	r3, [r1, #0]
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_GPIO_EXTI_Callback+0xac>)
 80007c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80007ce:	e017      	b.n	8000800 <HAL_GPIO_EXTI_Callback+0x74>
		else if (stepSize == 100)
 80007d0:	2a64      	cmp	r2, #100	@ 0x64
 80007d2:	d101      	bne.n	80007d8 <HAL_GPIO_EXTI_Callback+0x4c>
			stepSize = 10;
 80007d4:	220a      	movs	r2, #10
 80007d6:	e7e2      	b.n	800079e <HAL_GPIO_EXTI_Callback+0x12>
		else if (stepSize == 10)
 80007d8:	2a0a      	cmp	r2, #10
 80007da:	d113      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x78>
			stepSize = 1000;
 80007dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e0:	e7dd      	b.n	800079e <HAL_GPIO_EXTI_Callback+0x12>
				vfo_80m_5351 = (vfo_80m_5351 / 1000) * 1000;
 80007e2:	4916      	ldr	r1, [pc, #88]	@ (800083c <HAL_GPIO_EXTI_Callback+0xb0>)
				vfo_80m = (float) (vfo_80m_5351) / 1000.0;
 80007e4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000834 <HAL_GPIO_EXTI_Callback+0xa8>
				vfo_80m_5351 = (vfo_80m_5351 / 1000) * 1000;
 80007e8:	680b      	ldr	r3, [r1, #0]
 80007ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80007ee:	4353      	muls	r3, r2
				vfo_80m = (float) (vfo_80m_5351) / 1000.0;
 80007f0:	ee07 3a90 	vmov	s15, r3
				vfo_80m_5351 = (vfo_80m_5351 / 1000) * 1000;
 80007f4:	600b      	str	r3, [r1, #0]
				vfo_80m = (float) (vfo_80m_5351) / 1000.0;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_GPIO_EXTI_Callback+0xb4>)
 80007f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 8000800:	ed83 7a00 	vstr	s14, [r3]
}
 8000804:	4770      	bx	lr
				vfo_40m_5351 = (vfo_40m_5351 / 1000) * 1000;
 8000806:	490f      	ldr	r1, [pc, #60]	@ (8000844 <HAL_GPIO_EXTI_Callback+0xb8>)
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 8000808:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000834 <HAL_GPIO_EXTI_Callback+0xa8>
				vfo_40m_5351 = (vfo_40m_5351 / 1000) * 1000;
 800080c:	680b      	ldr	r3, [r1, #0]
 800080e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000812:	4353      	muls	r3, r2
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 8000814:	ee07 3a90 	vmov	s15, r3
				vfo_40m_5351 = (vfo_40m_5351 / 1000) * 1000;
 8000818:	600b      	str	r3, [r1, #0]
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_GPIO_EXTI_Callback+0xbc>)
 800081c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000820:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000824:	e7ec      	b.n	8000800 <HAL_GPIO_EXTI_Callback+0x74>
 8000826:	bf00      	nop
 8000828:	24000004 	.word	0x24000004
 800082c:	24000008 	.word	0x24000008
 8000830:	2400000c 	.word	0x2400000c
 8000834:	447a0000 	.word	0x447a0000
 8000838:	24000018 	.word	0x24000018
 800083c:	24000014 	.word	0x24000014
 8000840:	24000020 	.word	0x24000020
 8000844:	24000010 	.word	0x24000010
 8000848:	2400001c 	.word	0x2400001c

0800084c <HAL_TIM_IC_CaptureCallback>:
{
 800084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((htim == &htim23) && (VFOhasChangedforSI5351 == FALSE))
 8000850:	4f3f      	ldr	r7, [pc, #252]	@ (8000950 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000852:	4287      	cmp	r7, r0
 8000854:	d151      	bne.n	80008fa <HAL_TIM_IC_CaptureCallback+0xae>
 8000856:	4d3f      	ldr	r5, [pc, #252]	@ (8000954 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000858:	f895 8000 	ldrb.w	r8, [r5]
 800085c:	f1b8 0f00 	cmp.w	r8, #0
 8000860:	d14b      	bne.n	80008fa <HAL_TIM_IC_CaptureCallback+0xae>
		sMeterTestData++;
 8000862:	4e3d      	ldr	r6, [pc, #244]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0x10c>)
		rotaryEncoderCounter++;
 8000864:	4c3d      	ldr	r4, [pc, #244]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x110>)
		sMeterTestData++;
 8000866:	7831      	ldrb	r1, [r6, #0]
		rotaryEncoderCounter++;
 8000868:	7823      	ldrb	r3, [r4, #0]
		sMeterTestData++;
 800086a:	3101      	adds	r1, #1
		printf("The S Meter Data: %d \n", sMeterTestData);
 800086c:	483c      	ldr	r0, [pc, #240]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x114>)
		rotaryEncoderCounter++;
 800086e:	3301      	adds	r3, #1
		sMeterTestData++;
 8000870:	b2c9      	uxtb	r1, r1
		rotaryEncoderCounter++;
 8000872:	7023      	strb	r3, [r4, #0]
		sMeterTestData++;
 8000874:	7031      	strb	r1, [r6, #0]
		printf("The S Meter Data: %d \n", sMeterTestData);
 8000876:	f022 fad3 	bl	8022e20 <iprintf>
		if (sMeterTestData >= 11)
 800087a:	7833      	ldrb	r3, [r6, #0]
 800087c:	2b0a      	cmp	r3, #10
		if (rotaryEncoderCounter == 2)
 800087e:	7823      	ldrb	r3, [r4, #0]
			sMeterTestData = 0;
 8000880:	bf88      	it	hi
 8000882:	f886 8000 	strbhi.w	r8, [r6]
		if (rotaryEncoderCounter == 2)
 8000886:	2b02      	cmp	r3, #2
 8000888:	d137      	bne.n	80008fa <HAL_TIM_IC_CaptureCallback+0xae>
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
				switch (currentBand)
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x118>)
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(
 8000890:	06d2      	lsls	r2, r2, #27
				switch (currentBand)
 8000892:	781b      	ldrb	r3, [r3, #0]
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(
 8000894:	d544      	bpl.n	8000920 <HAL_TIM_IC_CaptureCallback+0xd4>
					&htim23) && VFOhasChangedforSI5351 == FALSE)
 8000896:	782a      	ldrb	r2, [r5, #0]
 8000898:	2a00      	cmp	r2, #0
 800089a:	d141      	bne.n	8000920 <HAL_TIM_IC_CaptureCallback+0xd4>
				switch (currentBand)
 800089c:	2b28      	cmp	r3, #40	@ 0x28
 800089e:	d02e      	beq.n	80008fe <HAL_TIM_IC_CaptureCallback+0xb2>
 80008a0:	2b50      	cmp	r3, #80	@ 0x50
 80008a2:	d012      	beq.n	80008ca <HAL_TIM_IC_CaptureCallback+0x7e>
 80008a4:	2b14      	cmp	r3, #20
 80008a6:	d122      	bne.n	80008ee <HAL_TIM_IC_CaptureCallback+0xa2>
					vfo_20m_5351 = vfo_20m_5351 - stepSize;
 80008a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80008aa:	4a30      	ldr	r2, [pc, #192]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x120>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	1a9b      	subs	r3, r3, r2
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 80008b2:	ee07 3a90 	vmov	s15, r3
					vfo_20m_5351 = vfo_20m_5351 - stepSize;
 80008b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x11c>)
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 80008b8:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000970 <HAL_TIM_IC_CaptureCallback+0x124>
 80008bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
					vfo_20m_5351 = vfo_20m_5351 - stepSize;
 80008c0:	6013      	str	r3, [r2, #0]
				vfo_20m = (float) (vfo_20m_5351) / 1000.0;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008c8:	e00f      	b.n	80008ea <HAL_TIM_IC_CaptureCallback+0x9e>
					vfo_80m_5351 = vfo_80m_5351 - stepSize;
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80008cc:	4a27      	ldr	r2, [pc, #156]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x120>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	1a9b      	subs	r3, r3, r2
				vfo_80m = (float) (vfo_80m_5351) / 1000.0;
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8000970 <HAL_TIM_IC_CaptureCallback+0x124>
					vfo_80m_5351 = vfo_80m_5351 + stepSize;
 80008dc:	4a26      	ldr	r2, [pc, #152]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x12c>)
				vfo_80m = (float) (vfo_80m_5351) / 1000.0;
 80008de:	eef8 7a67 	vcvt.f32.u32	s15, s15
					vfo_80m_5351 = vfo_80m_5351 + stepSize;
 80008e2:	6013      	str	r3, [r2, #0]
				vfo_80m = (float) (vfo_80m_5351) / 1000.0;
 80008e4:	4b25      	ldr	r3, [pc, #148]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x130>)
 80008e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 80008ea:	ed83 7a00 	vstr	s14, [r3]
			VFOhasChangedforSI5351 = TRUE;
 80008ee:	2301      	movs	r3, #1
			VFOhasChangedforDisplay = TRUE;
 80008f0:	4a23      	ldr	r2, [pc, #140]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x134>)
			VFOhasChangedforSI5351 = TRUE;
 80008f2:	702b      	strb	r3, [r5, #0]
			VFOhasChangedforDisplay = TRUE;
 80008f4:	7013      	strb	r3, [r2, #0]
			rotaryEncoderCounter = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	7023      	strb	r3, [r4, #0]
}
 80008fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vfo_40m_5351 = vfo_40m_5351 - stepSize;
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000900:	4a1a      	ldr	r2, [pc, #104]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	1a9b      	subs	r3, r3, r2
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 8000908:	ee07 3a90 	vmov	s15, r3
					vfo_40m_5351 = vfo_40m_5351 + stepSize;
 800090c:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x138>)
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 800090e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000970 <HAL_TIM_IC_CaptureCallback+0x124>
 8000912:	eef8 7a67 	vcvt.f32.u32	s15, s15
					vfo_40m_5351 = vfo_40m_5351 + stepSize;
 8000916:	6013      	str	r3, [r2, #0]
				vfo_40m = (float) (vfo_40m_5351) / 1000.0;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800091a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800091e:	e7e4      	b.n	80008ea <HAL_TIM_IC_CaptureCallback+0x9e>
				switch (currentBand)
 8000920:	2b28      	cmp	r3, #40	@ 0x28
 8000922:	d00f      	beq.n	8000944 <HAL_TIM_IC_CaptureCallback+0xf8>
 8000924:	2b50      	cmp	r3, #80	@ 0x50
 8000926:	d007      	beq.n	8000938 <HAL_TIM_IC_CaptureCallback+0xec>
 8000928:	2b14      	cmp	r3, #20
 800092a:	d1e0      	bne.n	80008ee <HAL_TIM_IC_CaptureCallback+0xa2>
					vfo_20m_5351 = vfo_20m_5351 + stepSize;
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	4413      	add	r3, r2
					break;
 8000936:	e7bc      	b.n	80008b2 <HAL_TIM_IC_CaptureCallback+0x66>
					vfo_80m_5351 = vfo_80m_5351 + stepSize;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800093a:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x120>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	4413      	add	r3, r2
					break;
 8000942:	e7c7      	b.n	80008d4 <HAL_TIM_IC_CaptureCallback+0x88>
					vfo_40m_5351 = vfo_40m_5351 + stepSize;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000946:	4a09      	ldr	r2, [pc, #36]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	4413      	add	r3, r2
					break;
 800094e:	e7db      	b.n	8000908 <HAL_TIM_IC_CaptureCallback+0xbc>
 8000950:	240001a4 	.word	0x240001a4
 8000954:	24000160 	.word	0x24000160
 8000958:	2400015f 	.word	0x2400015f
 800095c:	2400015e 	.word	0x2400015e
 8000960:	08023c00 	.word	0x08023c00
 8000964:	24000008 	.word	0x24000008
 8000968:	2400000c 	.word	0x2400000c
 800096c:	24000004 	.word	0x24000004
 8000970:	447a0000 	.word	0x447a0000
 8000974:	24000018 	.word	0x24000018
 8000978:	24000014 	.word	0x24000014
 800097c:	24000020 	.word	0x24000020
 8000980:	24000161 	.word	0x24000161
 8000984:	24000010 	.word	0x24000010
 8000988:	2400001c 	.word	0x2400001c

0800098c <sendDatatoSI5351>:
{
 800098c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((VFOhasChangedforSI5351 == TRUE) && (readyToSendI2C == TRUE))
 800098e:	4e1e      	ldr	r6, [pc, #120]	@ (8000a08 <sendDatatoSI5351+0x7c>)
 8000990:	7833      	ldrb	r3, [r6, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d131      	bne.n	80009fa <sendDatatoSI5351+0x6e>
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <sendDatatoSI5351+0x80>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d12d      	bne.n	80009fa <sendDatatoSI5351+0x6e>
		switch (currentBand)
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <sendDatatoSI5351+0x84>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b28      	cmp	r3, #40	@ 0x28
 80009a4:	d02b      	beq.n	80009fe <sendDatatoSI5351+0x72>
 80009a6:	2b50      	cmp	r3, #80	@ 0x50
 80009a8:	d005      	beq.n	80009b6 <sendDatatoSI5351+0x2a>
 80009aa:	2b14      	cmp	r3, #20
 80009ac:	d109      	bne.n	80009c2 <sendDatatoSI5351+0x36>
			si5351_CalcIQ(vfo_20m_5351, &pllConf, &outConf);
 80009ae:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <sendDatatoSI5351+0x88>)
 80009b0:	4919      	ldr	r1, [pc, #100]	@ (8000a18 <sendDatatoSI5351+0x8c>)
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <sendDatatoSI5351+0x90>)
 80009b4:	e002      	b.n	80009bc <sendDatatoSI5351+0x30>
			si5351_CalcIQ(vfo_80m_5351, &pllConf, &outConf);
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <sendDatatoSI5351+0x88>)
 80009b8:	4917      	ldr	r1, [pc, #92]	@ (8000a18 <sendDatatoSI5351+0x8c>)
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <sendDatatoSI5351+0x94>)
			si5351_CalcIQ(vfo_20m_5351, &pllConf, &outConf);
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	f000 fc55 	bl	800126c <si5351_CalcIQ>
		phaseOffset = (uint8_t) outConf.div;
 80009c2:	4d14      	ldr	r5, [pc, #80]	@ (8000a14 <sendDatatoSI5351+0x88>)
		si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, 0);
 80009c4:	2400      	movs	r4, #0
		phaseOffset = (uint8_t) outConf.div;
 80009c6:	4f17      	ldr	r7, [pc, #92]	@ (8000a24 <sendDatatoSI5351+0x98>)
		si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, 0);
 80009c8:	2201      	movs	r2, #1
		phaseOffset = (uint8_t) outConf.div;
 80009ca:	686b      	ldr	r3, [r5, #4]
		si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, 0);
 80009cc:	4621      	mov	r1, r4
 80009ce:	4620      	mov	r0, r4
		phaseOffset = (uint8_t) outConf.div;
 80009d0:	703b      	strb	r3, [r7, #0]
		si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, 0);
 80009d2:	462b      	mov	r3, r5
 80009d4:	9400      	str	r4, [sp, #0]
 80009d6:	f000 fd32 	bl	800143e <si5351_SetupOutput>
		si5351_SetupOutput(2, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, phaseOffset);
 80009da:	783b      	ldrb	r3, [r7, #0]
 80009dc:	2201      	movs	r2, #1
 80009de:	4621      	mov	r1, r4
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2002      	movs	r0, #2
 80009e4:	462b      	mov	r3, r5
 80009e6:	f000 fd2a 	bl	800143e <si5351_SetupOutput>
		si5351_SetupPLL(SI5351_PLL_A, &pllConf);
 80009ea:	490b      	ldr	r1, [pc, #44]	@ (8000a18 <sendDatatoSI5351+0x8c>)
 80009ec:	4620      	mov	r0, r4
 80009ee:	f000 fd0d 	bl	800140c <si5351_SetupPLL>
		si5351_EnableOutputs((1 << 0) | (1 << 2));
 80009f2:	2005      	movs	r0, #5
 80009f4:	f000 fcd2 	bl	800139c <si5351_EnableOutputs>
		VFOhasChangedforSI5351 = FALSE;
 80009f8:	7034      	strb	r4, [r6, #0]
}
 80009fa:	b003      	add	sp, #12
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			si5351_CalcIQ(vfo_40m_5351, &pllConf, &outConf);
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <sendDatatoSI5351+0x88>)
 8000a00:	4905      	ldr	r1, [pc, #20]	@ (8000a18 <sendDatatoSI5351+0x8c>)
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <sendDatatoSI5351+0x9c>)
 8000a04:	e7da      	b.n	80009bc <sendDatatoSI5351+0x30>
 8000a06:	bf00      	nop
 8000a08:	24000160 	.word	0x24000160
 8000a0c:	2400015d 	.word	0x2400015d
 8000a10:	24000008 	.word	0x24000008
 8000a14:	24000164 	.word	0x24000164
 8000a18:	24000178 	.word	0x24000178
 8000a1c:	2400000c 	.word	0x2400000c
 8000a20:	24000014 	.word	0x24000014
 8000a24:	24000184 	.word	0x24000184
 8000a28:	24000010 	.word	0x24000010

08000a2c <StartTaskToGui>:
		if (startTimerA == TRUE)
 8000a2c:	4c08      	ldr	r4, [pc, #32]	@ (8000a50 <StartTaskToGui+0x24>)
			osTimerStart(myTimerI2CWindowAHandle, 3);
 8000a2e:	4d09      	ldr	r5, [pc, #36]	@ (8000a54 <StartTaskToGui+0x28>)
{
 8000a30:	b508      	push	{r3, lr}
		if (startTimerA == TRUE)
 8000a32:	7823      	ldrb	r3, [r4, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <StartTaskToGui+0x18>
			osTimerStart(myTimerI2CWindowAHandle, 3);
 8000a38:	2103      	movs	r1, #3
 8000a3a:	6828      	ldr	r0, [r5, #0]
 8000a3c:	f00b f966 	bl	800bd0c <osTimerStart>
			startTimerA = FALSE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	7023      	strb	r3, [r4, #0]
		sendDatatoSI5351();
 8000a44:	f7ff ffa2 	bl	800098c <sendDatatoSI5351>
		osDelay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f00b f918 	bl	800bc7e <osDelay>
		if (startTimerA == TRUE)
 8000a4e:	e7f0      	b.n	8000a32 <StartTaskToGui+0x6>
 8000a50:	2400015c 	.word	0x2400015c
 8000a54:	24000190 	.word	0x24000190

08000a58 <SystemClock_Config>:
{
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	b09c      	sub	sp, #112	@ 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000a5c:	224c      	movs	r2, #76	@ 0x4c
 8000a5e:	2100      	movs	r1, #0
 8000a60:	a809      	add	r0, sp, #36	@ 0x24
 8000a62:	f022 fa32 	bl	8022eca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	a801      	add	r0, sp, #4
 8000a6c:	f022 fa2d 	bl	8022eca <memset>
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a70:	2004      	movs	r0, #4
 8000a72:	f009 fb3d 	bl	800a0f0 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a76:	2300      	movs	r3, #0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <SystemClock_Config+0x90>)
 8000a7c:	699a      	ldr	r2, [r3, #24]
 8000a7e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	699a      	ldr	r2, [r3, #24]
 8000a86:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a8a:	9200      	str	r2, [sp, #0]
 8000a8c:	9a00      	ldr	r2, [sp, #0]
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	0491      	lsls	r1, r2, #18
 8000a92:	d5fc      	bpl.n	8000a8e <SystemClock_Config+0x36>
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2400      	movs	r4, #0
	RCC_OscInitStruct.PLL.PLLN = 44;
 8000a9c:	212c      	movs	r1, #44	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	a809      	add	r0, sp, #36	@ 0x24
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa0:	941b      	str	r4, [sp, #108]	@ 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa2:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000aac:	9314      	str	r3, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000aae:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab2:	230c      	movs	r3, #12
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000ab4:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab8:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f009 fb56 	bl	800a16c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	233f      	movs	r3, #63	@ 0x3f
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac4:	2208      	movs	r2, #8
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac6:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	e9cd 3101 	strd	r3, r1, [sp, #4]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad8:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ada:	e9cd 2307 	strd	r2, r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ade:	f009 fe61 	bl	800a7a4 <HAL_RCC_ClockConfig>
}
 8000ae2:	b01c      	add	sp, #112	@ 0x70
 8000ae4:	bd10      	pop	{r4, pc}
 8000ae6:	bf00      	nop
 8000ae8:	58024800 	.word	0x58024800

08000aec <PeriphCommonClock_Config>:
{
 8000aec:	b500      	push	{lr}
 8000aee:	b0af      	sub	sp, #188	@ 0xbc
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000af0:	2100      	movs	r1, #0
 8000af2:	2298      	movs	r2, #152	@ 0x98
 8000af4:	a808      	add	r0, sp, #32
 8000af6:	f022 f9e8 	bl	8022eca <memset>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000afa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000afe:	2300      	movs	r3, #0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b00:	4668      	mov	r0, sp
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000b02:	e9cd 2300 	strd	r2, r3, [sp]
	PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000b06:	2205      	movs	r2, #5
 8000b08:	2350      	movs	r3, #80	@ 0x50
 8000b0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b0e:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b10:	e9cd 3304 	strd	r3, r3, [sp, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b14:	9306      	str	r3, [sp, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	9307      	str	r3, [sp, #28]
	PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f00a f8c7 	bl	800acb0 <HAL_RCCEx_PeriphCLKConfig>
}
 8000b22:	b02f      	add	sp, #188	@ 0xbc
 8000b24:	f85d fb04 	ldr.w	pc, [sp], #4

08000b28 <main>:
{
 8000b28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000b2c:	b0a3      	sub	sp, #140	@ 0x8c

/* MPU Configuration */

void MPU_Config(void)
{
	MPU_Region_InitTypeDef MPU_InitStruct =
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2210      	movs	r2, #16
	/* Disables the MPU */
	HAL_MPU_Disable();

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b32:	2501      	movs	r5, #1
	MPU_Region_InitTypeDef MPU_InitStruct =
 8000b34:	a815      	add	r0, sp, #84	@ 0x54
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
	MPU_InitStruct.BaseAddress = 0x70000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b36:	2400      	movs	r4, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 8000b38:	f022 f9c7 	bl	8022eca <memset>
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000b3c:	271c      	movs	r7, #28
	HAL_MPU_Disable();
 8000b3e:	f007 fbc9 	bl	80082d4 <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b42:	f04f 5210 	mov.w	r2, #603979776	@ 0x24000000
 8000b46:	4bd4      	ldr	r3, [pc, #848]	@ (8000e98 <main+0x370>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b48:	a815      	add	r0, sp, #84	@ 0x54
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4a:	f8ad 5054 	strh.w	r5, [sp, #84]	@ 0x54

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b4e:	2603      	movs	r6, #3
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b50:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b54:	4bd1      	ldr	r3, [pc, #836]	@ (8000e9c <main+0x374>)
 8000b56:	9318      	str	r3, [sp, #96]	@ 0x60
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b58:	f007 fbda 	bl	8008310 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.BaseAddress = 0x70000000;
 8000b5c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b60:	a815      	add	r0, sp, #84	@ 0x54
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b62:	f88d 405f 	strb.w	r4, [sp, #95]	@ 0x5f
	MPU_InitStruct.BaseAddress = 0x70000000;
 8000b66:	9316      	str	r3, [sp, #88]	@ 0x58
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b68:	f8ad 4062 	strh.w	r4, [sp, #98]	@ 0x62
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b6c:	f88d 5055 	strb.w	r5, [sp, #85]	@ 0x55
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000b70:	f88d 705c 	strb.w	r7, [sp, #92]	@ 0x5c
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b74:	f007 fbcc 	bl	8008310 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b78:	2302      	movs	r3, #2
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b7a:	a815      	add	r0, sp, #84	@ 0x54
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b7c:	f88d 605f 	strb.w	r6, [sp, #95]	@ 0x5f
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b80:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000b84:	2316      	movs	r3, #22
 8000b86:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b8a:	f240 1301 	movw	r3, #257	@ 0x101
 8000b8e:	f8ad 3062 	strh.w	r3, [sp, #98]	@ 0x62
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b92:	f007 fbbd 	bl	8008310 <HAL_MPU_ConfigRegion>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
	MPU_InitStruct.BaseAddress = 0x90000000;
 8000b96:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b9a:	a815      	add	r0, sp, #84	@ 0x54
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b9c:	f88d 405f 	strb.w	r4, [sp, #95]	@ 0x5f
	MPU_InitStruct.BaseAddress = 0x90000000;
 8000ba0:	9316      	str	r3, [sp, #88]	@ 0x58
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ba2:	f8ad 4062 	strh.w	r4, [sp, #98]	@ 0x62

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ba6:	2404      	movs	r4, #4
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000ba8:	f88d 6055 	strb.w	r6, [sp, #85]	@ 0x55
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000bac:	f88d 705c 	strb.w	r7, [sp, #92]	@ 0x5c
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb0:	f007 fbae 	bl	8008310 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000bb4:	2319      	movs	r3, #25
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb6:	a815      	add	r0, sp, #84	@ 0x54
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000bb8:	f88d 4055 	strb.w	r4, [sp, #85]	@ 0x55
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000bbc:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bc0:	f88d 605f 	strb.w	r6, [sp, #95]	@ 0x5f
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bc4:	f88d 5062 	strb.w	r5, [sp, #98]	@ 0x62
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc8:	f007 fba2 	bl	8008310 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f007 fb8f 	bl	80082f0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bd2:	4bb3      	ldr	r3, [pc, #716]	@ (8000ea0 <main+0x378>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000bda:	d111      	bne.n	8000c00 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000be0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000be4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000bf6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bfc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c00:	4aa7      	ldr	r2, [pc, #668]	@ (8000ea0 <main+0x378>)
 8000c02:	6953      	ldr	r3, [r2, #20]
 8000c04:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000c08:	d123      	bne.n	8000c52 <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c12:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c16:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c1a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c1e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c22:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c24:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c28:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c2a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c2e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c30:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000c34:	d2f9      	bcs.n	8000c2a <main+0x102>
    } while(sets-- != 0U);
 8000c36:	3b20      	subs	r3, #32
 8000c38:	f113 0f20 	cmn.w	r3, #32
 8000c3c:	d1f2      	bne.n	8000c24 <main+0xfc>
 8000c3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c42:	6953      	ldr	r3, [r2, #20]
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c4e:	f3bf 8f6f 	isb	sy
	HAL_Init();
 8000c52:	f007 fa9b 	bl	800818c <HAL_Init>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2400      	movs	r4, #0
	SystemClock_Config();
 8000c58:	f7ff fefe 	bl	8000a58 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2501      	movs	r5, #1
	PeriphCommonClock_Config();
 8000c5e:	f7ff ff45 	bl	8000aec <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8000c62:	2214      	movs	r2, #20
 8000c64:	2100      	movs	r1, #0
 8000c66:	a815      	add	r0, sp, #84	@ 0x54
 8000c68:	f022 f92f 	bl	8022eca <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8000ea4 <main+0x37c>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000c6e:	f244 0108 	movw	r1, #16392	@ 0x4008
 8000c72:	488d      	ldr	r0, [pc, #564]	@ (8000ea8 <main+0x380>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2702      	movs	r7, #2
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStruct.Pin = RENDER_TIME_Pin;
 8000c7e:	f04f 0b08 	mov.w	fp, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	f042 0202 	orr.w	r2, r2, #2
	OSPIM_CfgTypeDef sOspiManagerCfg =
 8000c86:	f04f 0a18 	mov.w	sl, #24
	hospi1.Instance = OCTOSPI1;
 8000c8a:	4e88      	ldr	r6, [pc, #544]	@ (8000eac <main+0x384>)
	hospi1.Init.FifoThreshold = 4;
 8000c8c:	f04f 0904 	mov.w	r9, #4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c98:	f002 0202 	and.w	r2, r2, #2
 8000c9c:	9202      	str	r2, [sp, #8]
 8000c9e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ca8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cb0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000cb4:	9203      	str	r2, [sp, #12]
 8000cb6:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cbc:	f042 0208 	orr.w	r2, r2, #8
 8000cc0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cc8:	f002 0208 	and.w	r2, r2, #8
 8000ccc:	9204      	str	r2, [sp, #16]
 8000cce:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cd4:	f042 0210 	orr.w	r2, r2, #16
 8000cd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ce0:	f002 0210 	and.w	r2, r2, #16
 8000ce4:	9205      	str	r2, [sp, #20]
 8000ce6:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cec:	f042 0201 	orr.w	r2, r2, #1
 8000cf0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cf8:	f002 0201 	and.w	r2, r2, #1
 8000cfc:	9206      	str	r2, [sp, #24]
 8000cfe:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d10:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d14:	9207      	str	r2, [sp, #28]
 8000d16:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d1c:	f042 0204 	orr.w	r2, r2, #4
 8000d20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d28:	f002 0204 	and.w	r2, r2, #4
 8000d2c:	9208      	str	r2, [sp, #32]
 8000d2e:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d34:	f042 0220 	orr.w	r2, r2, #32
 8000d38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000d4a:	f007 fdb5 	bl	80088b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin | GPIO_PIN_5 | GPIO_PIN_4 | RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f248 0138 	movw	r1, #32824	@ 0x8038
 8000d54:	4856      	ldr	r0, [pc, #344]	@ (8000eb0 <main+0x388>)
 8000d56:	f007 fdaf 	bl	80088b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15 | LCD_DISP_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8000d60:	4854      	ldr	r0, [pc, #336]	@ (8000eb4 <main+0x38c>)
 8000d62:	f007 fda9 	bl	80088b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, MCU_ACTIVE_Pin | FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000d6c:	4852      	ldr	r0, [pc, #328]	@ (8000eb8 <main+0x390>)
 8000d6e:	f007 fda3 	bl	80088b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	4851      	ldr	r0, [pc, #324]	@ (8000ebc <main+0x394>)
 8000d78:	f007 fd9e 	bl	80088b8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	f244 0308 	movw	r3, #16392	@ 0x4008
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d80:	a915      	add	r1, sp, #84	@ 0x54
 8000d82:	4849      	ldr	r0, [pc, #292]	@ (8000ea8 <main+0x380>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	e9cd 3515 	strd	r3, r5, [sp, #84]	@ 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8c:	f007 fc16 	bl	80085bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin | GPIO_PIN_4;
 8000d90:	f248 0310 	movw	r3, #32784	@ 0x8010
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d94:	a915      	add	r1, sp, #84	@ 0x54
 8000d96:	4846      	ldr	r0, [pc, #280]	@ (8000eb0 <main+0x388>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	e9cd 3515 	strd	r3, r5, [sp, #84]	@ 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da0:	f007 fc0c 	bl	80085bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da4:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da6:	a915      	add	r1, sp, #84	@ 0x54
 8000da8:	4841      	ldr	r0, [pc, #260]	@ (8000eb0 <main+0x388>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	9417      	str	r4, [sp, #92]	@ 0x5c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	9718      	str	r7, [sp, #96]	@ 0x60
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	e9cd 3515 	strd	r3, r5, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db2:	f007 fc03 	bl	80085bc <HAL_GPIO_Init>
	HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000db6:	a915      	add	r1, sp, #84	@ 0x54
 8000db8:	483d      	ldr	r0, [pc, #244]	@ (8000eb0 <main+0x388>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	9417      	str	r4, [sp, #92]	@ 0x5c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
	HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f007 fbfa 	bl	80085bc <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dcc:	f44f 1204 	mov.w	r2, #2162688	@ 0x210000
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd0:	a915      	add	r1, sp, #84	@ 0x54
 8000dd2:	483b      	ldr	r0, [pc, #236]	@ (8000ec0 <main+0x398>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	9517      	str	r5, [sp, #92]	@ 0x5c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd6:	e9cd 3215 	strd	r3, r2, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dda:	f007 fbef 	bl	80085bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15 | LCD_DISP_Pin;
 8000dde:	f44f 4204 	mov.w	r2, #33792	@ 0x8400
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de2:	a915      	add	r1, sp, #84	@ 0x54
 8000de4:	4833      	ldr	r0, [pc, #204]	@ (8000eb4 <main+0x38c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	e9cd 2515 	strd	r2, r5, [sp, #84]	@ 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f007 fbe5 	bl	80085bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MCU_ACTIVE_Pin | FRAME_RATE_Pin;
 8000df2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	a915      	add	r1, sp, #84	@ 0x54
 8000df8:	482f      	ldr	r0, [pc, #188]	@ (8000eb8 <main+0x390>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	e9cd 2515 	strd	r2, r5, [sp, #84]	@ 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	e9cd 4817 	strd	r4, r8, [sp, #92]	@ 0x5c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f007 fbdb 	bl	80085bc <HAL_GPIO_Init>
	HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000e06:	a915      	add	r1, sp, #84	@ 0x54
 8000e08:	482c      	ldr	r0, [pc, #176]	@ (8000ebc <main+0x394>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	e9cd 4817 	strd	r4, r8, [sp, #92]	@ 0x5c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	e9cd 5515 	strd	r5, r5, [sp, #84]	@ 0x54
	HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f007 fbd3 	bl	80085bc <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e16:	2106      	movs	r1, #6
 8000e18:	4622      	mov	r2, r4
 8000e1a:	2017      	movs	r0, #23
 8000e1c:	f007 fa1a 	bl	8008254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e20:	2017      	movs	r0, #23
 8000e22:	f007 fa49 	bl	80082b8 <HAL_NVIC_EnableIRQ>
	hcrc.Instance = CRC;
 8000e26:	4827      	ldr	r0, [pc, #156]	@ (8000ec4 <main+0x39c>)
 8000e28:	4a27      	ldr	r2, [pc, #156]	@ (8000ec8 <main+0x3a0>)
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e2a:	8084      	strh	r4, [r0, #4]
	hcrc.Instance = CRC;
 8000e2c:	6002      	str	r2, [r0, #0]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e2e:	6205      	str	r5, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e30:	e9c0 4405 	strd	r4, r4, [r0, #20]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e34:	f007 fa98 	bl	8008368 <HAL_CRC_Init>
	hdma2d.Instance = DMA2D;
 8000e38:	4824      	ldr	r0, [pc, #144]	@ (8000ecc <main+0x3a4>)
	hdma2d.Init.Mode = DMA2D_R2M;
 8000e3a:	4925      	ldr	r1, [pc, #148]	@ (8000ed0 <main+0x3a8>)
 8000e3c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
	hdma2d.Init.OutputOffset = 0;
 8000e40:	e9c0 5402 	strd	r5, r4, [r0, #8]
	hdma2d.Init.Mode = DMA2D_R2M;
 8000e44:	e9c0 1200 	strd	r1, r2, [r0]
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e48:	f007 faef 	bl	800842a <HAL_DMA2D_Init>
	OSPIM_CfgTypeDef sOspiManagerCfg =
 8000e4c:	4652      	mov	r2, sl
 8000e4e:	4621      	mov	r1, r4
 8000e50:	a815      	add	r0, sp, #84	@ 0x54
 8000e52:	f022 f83a 	bl	8022eca <memset>
	hospi1.Init.FifoThreshold = 4;
 8000e56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed4 <main+0x3ac>)
	hospi1.Init.DeviceSize = 32;
 8000e58:	2320      	movs	r3, #32
	if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000e5a:	4630      	mov	r0, r6
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e5c:	60b4      	str	r4, [r6, #8]
	hospi1.Init.Refresh = 0;
 8000e5e:	63f4      	str	r4, [r6, #60]	@ 0x3c
	hospi1.Init.FifoThreshold = 4;
 8000e60:	e9c6 2900 	strd	r2, r9, [r6]
	hospi1.Init.DeviceSize = 32;
 8000e64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
	hospi1.Init.MaxTran = 0;
 8000e68:	e9c6 b40d 	strd	fp, r4, [r6, #52]	@ 0x34
	hospi1.Init.DeviceSize = 32;
 8000e6c:	e9c6 2303 	strd	r2, r3, [r6, #12]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e70:	e9c6 7405 	strd	r7, r4, [r6, #20]
	hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000e74:	e9c6 4407 	strd	r4, r4, [r6, #28]
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e78:	e9c6 7409 	strd	r7, r4, [r6, #36]	@ 0x24
	hospi1.Init.ChipSelectBoundary = 0;
 8000e7c:	e9c6 440b 	strd	r4, r4, [r6, #44]	@ 0x2c
	if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000e80:	f008 fc3a 	bl	80096f8 <HAL_OSPI_Init>
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000e84:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e8c:	a915      	add	r1, sp, #84	@ 0x54
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000e8e:	9318      	str	r3, [sp, #96]	@ 0x60
	sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000e90:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e94:	4630      	mov	r0, r6
 8000e96:	e01f      	b.n	8000ed8 <main+0x3b0>
 8000e98:	03000012 	.word	0x03000012
 8000e9c:	01010001 	.word	0x01010001
 8000ea0:	e000ed00 	.word	0xe000ed00
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58021000 	.word	0x58021000
 8000eac:	2400024c 	.word	0x2400024c
 8000eb0:	58021800 	.word	0x58021800
 8000eb4:	58020c00 	.word	0x58020c00
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	58021400 	.word	0x58021400
 8000ec4:	2400040c 	.word	0x2400040c
 8000ec8:	58024c00 	.word	0x58024c00
 8000ecc:	240003a4 	.word	0x240003a4
 8000ed0:	52001000 	.word	0x52001000
 8000ed4:	52005000 	.word	0x52005000
	sOspiManagerCfg.NCSPort = 1;
 8000ed8:	9517      	str	r5, [sp, #92]	@ 0x5c
	sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000eda:	9319      	str	r3, [sp, #100]	@ 0x64
	hltdc.Init.TotalHeigh = 487;
 8000edc:	f44f 7b25 	mov.w	fp, #660	@ 0x294
	sOspiManagerCfg.DQSPort = 1;
 8000ee0:	e9cd 5515 	strd	r5, r5, [sp, #84]	@ 0x54
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ee4:	f008 fe94 	bl	8009c10 <HAL_OSPIM_Config>
	HAL_OSPI_DeInit(&hospi1);
 8000ee8:	4630      	mov	r0, r6
 8000eea:	f008 fc79 	bl	80097e0 <HAL_OSPI_DeInit>
	ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000eee:	f240 1301 	movw	r3, #257	@ 0x101
	BSP_OSPI_NOR_DeInit(0);
 8000ef2:	4620      	mov	r0, r4
	hospi2.Instance = OCTOSPI2;
 8000ef4:	4ea7      	ldr	r6, [pc, #668]	@ (8001194 <main+0x66c>)
	ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000ef6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
	BSP_OSPI_NOR_DeInit(0);
 8000efa:	f006 fda3 	bl	8007a44 <BSP_OSPI_NOR_DeInit>
	if (BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000efe:	a910      	add	r1, sp, #64	@ 0x40
 8000f00:	4620      	mov	r0, r4
 8000f02:	f006 fe91 	bl	8007c28 <BSP_OSPI_NOR_Init>
	if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000f06:	4620      	mov	r0, r4
 8000f08:	f006 fd64 	bl	80079d4 <BSP_OSPI_NOR_EnableMemoryMappedMode>
	OSPIM_CfgTypeDef sOspiManagerCfg =
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	4621      	mov	r1, r4
 8000f10:	a815      	add	r0, sp, #84	@ 0x54
 8000f12:	f021 ffda 	bl	8022eca <memset>
	OSPI_HyperbusCfgTypeDef sHyperBusCfg =
 8000f16:	2210      	movs	r2, #16
 8000f18:	4621      	mov	r1, r4
 8000f1a:	a80c      	add	r0, sp, #48	@ 0x30
 8000f1c:	f021 ffd5 	bl	8022eca <memset>
	OSPI_HyperbusCmdTypeDef sCommand =
 8000f20:	2214      	movs	r2, #20
 8000f22:	4621      	mov	r1, r4
 8000f24:	a810      	add	r0, sp, #64	@ 0x40
 8000f26:	f021 ffd0 	bl	8022eca <memset>
	hospi2.Instance = OCTOSPI2;
 8000f2a:	4b9b      	ldr	r3, [pc, #620]	@ (8001198 <main+0x670>)
	hospi2.Init.ChipSelectBoundary = 23;
 8000f2c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
	hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000f30:	60b4      	str	r4, [r6, #8]
	hospi2.Init.FifoThreshold = 4;
 8000f32:	e9c6 3900 	strd	r3, r9, [r6]
	hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000f36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
	hospi2.Init.DeviceSize = 24;
 8000f3a:	e9c6 3a03 	strd	r3, sl, [r6, #12]
	hospi2.Init.ChipSelectBoundary = 23;
 8000f3e:	2317      	movs	r3, #23
	hltdc.Init.AccumulatedActiveH = 485;
 8000f40:	f240 2a8e 	movw	sl, #654	@ 0x28e
	hospi2.Init.ChipSelectBoundary = 23;
 8000f44:	e9c6 030b 	strd	r0, r3, [r6, #44]	@ 0x2c
	hospi2.Init.Refresh = 400;
 8000f48:	f44f 73c8 	mov.w	r3, #400	@ 0x190
	if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000f4c:	4630      	mov	r0, r6
	hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000f4e:	e9c6 9405 	strd	r9, r4, [r6, #20]
	hospi2.Init.Refresh = 400;
 8000f52:	63f3      	str	r3, [r6, #60]	@ 0x3c
	htim23.Instance = TIM23;
 8000f54:	f8df 92bc 	ldr.w	r9, [pc, #700]	@ 8001214 <main+0x6ec>
	hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f58:	e9c6 4407 	strd	r4, r4, [r6, #28]
	hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f5c:	e9c6 7409 	strd	r7, r4, [r6, #36]	@ 0x24
	hospi2.Init.MaxTran = 0;
 8000f60:	e9c6 440d 	strd	r4, r4, [r6, #52]	@ 0x34
	OSPI_MemoryMappedTypeDef sMemMappedCfg =
 8000f64:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
	if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000f68:	f008 fbc6 	bl	80096f8 <HAL_OSPI_Init>
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800119c <main+0x674>)
	if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f72:	a915      	add	r1, sp, #84	@ 0x54
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000f74:	9318      	str	r3, [sp, #96]	@ 0x60
	sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000f76:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
	if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f7a:	4630      	mov	r0, r6
	sOspiManagerCfg.NCSPort = 2;
 8000f7c:	9717      	str	r7, [sp, #92]	@ 0x5c
	sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000f7e:	9319      	str	r3, [sp, #100]	@ 0x64
	sOspiManagerCfg.DQSPort = 2;
 8000f80:	e9cd 7715 	strd	r7, r7, [sp, #84]	@ 0x54
	if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f84:	f008 fe44 	bl	8009c10 <HAL_OSPIM_Config>
	sHyperBusCfg.AccessTime = 6;
 8000f88:	2306      	movs	r3, #6
	if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f8e:	a90c      	add	r1, sp, #48	@ 0x30
 8000f90:	4630      	mov	r0, r6
	sHyperBusCfg.RWRecoveryTime = 3;
 8000f92:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
	sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000f96:	950f      	str	r5, [sp, #60]	@ 0x3c
	sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000f98:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
	if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f9c:	f008 fc82 	bl	80098a4 <HAL_OSPI_HyperbusCfg>
	sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS;
 8000fa0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
	if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fa8:	a910      	add	r1, sp, #64	@ 0x40
	sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS;
 8000faa:	9312      	str	r3, [sp, #72]	@ 0x48
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 8000fac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
	if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fb0:	4630      	mov	r0, r6
	sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000fb2:	9410      	str	r4, [sp, #64]	@ 0x40
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 8000fb4:	9314      	str	r3, [sp, #80]	@ 0x50
	sCommand.Address = 0;
 8000fb6:	9411      	str	r4, [sp, #68]	@ 0x44
	sCommand.NbData = 1;
 8000fb8:	9513      	str	r5, [sp, #76]	@ 0x4c
	if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fba:	f008 fc99 	bl	80098f0 <HAL_OSPI_HyperbusCmd>
	if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000fbe:	a90a      	add	r1, sp, #40	@ 0x28
 8000fc0:	4630      	mov	r0, r6
	sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000fc2:	940a      	str	r4, [sp, #40]	@ 0x28
	if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000fc4:	f008 fdb4 	bl	8009b30 <HAL_OSPI_MemoryMapped>
	TIM_Encoder_InitTypeDef sConfig =
 8000fc8:	2214      	movs	r2, #20
 8000fca:	4621      	mov	r1, r4
 8000fcc:	a818      	add	r0, sp, #96	@ 0x60
	hi2c4.Instance = I2C4;
 8000fce:	4e74      	ldr	r6, [pc, #464]	@ (80011a0 <main+0x678>)
	TIM_Encoder_InitTypeDef sConfig =
 8000fd0:	f021 ff7b 	bl	8022eca <memset>
	htim23.Instance = TIM23;
 8000fd4:	4b73      	ldr	r3, [pc, #460]	@ (80011a4 <main+0x67c>)
	if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000fd6:	a915      	add	r1, sp, #84	@ 0x54
 8000fd8:	4648      	mov	r0, r9
	htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	f8c9 4008 	str.w	r4, [r9, #8]
	htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	f8c9 4018 	str.w	r4, [r9, #24]
	TIM_MasterConfigTypeDef sMasterConfig =
 8000fe2:	9412      	str	r4, [sp, #72]	@ 0x48
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe4:	9517      	str	r5, [sp, #92]	@ 0x5c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe6:	951b      	str	r5, [sp, #108]	@ 0x6c
	htim23.Init.Prescaler = 0;
 8000fe8:	e9c9 3400 	strd	r3, r4, [r9]
	htim23.Init.Period = 400000;
 8000fec:	4b6e      	ldr	r3, [pc, #440]	@ (80011a8 <main+0x680>)
	htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	e9c9 3403 	strd	r3, r4, [r9, #12]
	sConfig.IC1Filter = 10;
 8000ff2:	230a      	movs	r3, #10
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ff4:	e9cd 8715 	strd	r8, r7, [sp, #84]	@ 0x54
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000ff8:	e9cd 3719 	strd	r3, r7, [sp, #100]	@ 0x64
	sConfig.IC2Filter = 10;
 8000ffc:	931d      	str	r3, [sp, #116]	@ 0x74
	TIM_MasterConfigTypeDef sMasterConfig =
 8000ffe:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
	if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001002:	f00a fd09 	bl	800ba18 <HAL_TIM_Encoder_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001006:	a910      	add	r1, sp, #64	@ 0x40
 8001008:	4648      	mov	r0, r9
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	9410      	str	r4, [sp, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	9412      	str	r4, [sp, #72]	@ 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800100e:	f00a fd57 	bl	800bac0 <HAL_TIMEx_MasterConfigSynchronization>
	hi2c4.Init.Timing = 0x20B0C8FF;
 8001012:	f8df e204 	ldr.w	lr, [pc, #516]	@ 8001218 <main+0x6f0>
	if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001016:	4630      	mov	r0, r6
	hi2c4.Init.Timing = 0x20B0C8FF;
 8001018:	4b64      	ldr	r3, [pc, #400]	@ (80011ac <main+0x684>)
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101a:	6234      	str	r4, [r6, #32]
	hi2c4.Init.Timing = 0x20B0C8FF;
 800101c:	e9c6 e300 	strd	lr, r3, [r6]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001020:	e9c6 4502 	strd	r4, r5, [r6, #8]
	hi2c4.Init.OwnAddress2 = 0;
 8001024:	e9c6 4404 	strd	r4, r4, [r6, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	e9c6 4406 	strd	r4, r4, [r6, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800102c:	f007 fd89 	bl	8008b42 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001034:	4630      	mov	r0, r6
 8001036:	f008 f836 	bl	80090a6 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800103a:	4621      	mov	r1, r4
 800103c:	4630      	mov	r0, r6
	hltdc.Instance = LTDC;
 800103e:	4e5c      	ldr	r6, [pc, #368]	@ (80011b0 <main+0x688>)
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001040:	f008 f857 	bl	80090f2 <HAL_I2CEx_ConfigDigitalFilter>
	LTDC_LayerCfgTypeDef pLayerCfg =
 8001044:	2234      	movs	r2, #52	@ 0x34
 8001046:	4621      	mov	r1, r4
 8001048:	a815      	add	r0, sp, #84	@ 0x54
 800104a:	f021 ff3e 	bl	8022eca <memset>
	hltdc.Instance = LTDC;
 800104e:	4b59      	ldr	r3, [pc, #356]	@ (80011b4 <main+0x68c>)
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001050:	4630      	mov	r0, r6
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001052:	6134      	str	r4, [r6, #16]
	hltdc.Init.Backcolor.Blue = 0;
 8001054:	86b4      	strh	r4, [r6, #52]	@ 0x34
	hltdc.Init.Backcolor.Red = 0;
 8001056:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105a:	e9c6 3400 	strd	r3, r4, [r6]
	hltdc.Init.HorizontalSync = 7;
 800105e:	2307      	movs	r3, #7
	hltdc.Init.VerticalSync = 3;
 8001060:	e9c6 3805 	strd	r3, r8, [r6, #20]
	hltdc.Init.AccumulatedVBP = 5;
 8001064:	f04f 0805 	mov.w	r8, #5
 8001068:	230e      	movs	r3, #14
 800106a:	e9c6 3807 	strd	r3, r8, [r6, #28]
	hltdc.Init.AccumulatedActiveH = 485;
 800106e:	f240 13e5 	movw	r3, #485	@ 0x1e5
 8001072:	e9c6 a309 	strd	sl, r3, [r6, #36]	@ 0x24
	hltdc.Init.TotalHeigh = 487;
 8001076:	f240 13e7 	movw	r3, #487	@ 0x1e7
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800107a:	e9c6 4402 	strd	r4, r4, [r6, #8]
	hltdc.Init.TotalHeigh = 487;
 800107e:	e9c6 b30b 	strd	fp, r3, [r6, #44]	@ 0x2c
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001082:	f008 f8e1 	bl	8009248 <HAL_LTDC_Init>
	pLayerCfg.Alpha = 255;
 8001086:	21ff      	movs	r1, #255	@ 0xff
	pLayerCfg.WindowX1 = 480;
 8001088:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
	pLayerCfg.WindowY1 = 272;
 800108c:	f44f 7388 	mov.w	r3, #272	@ 0x110
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001090:	4630      	mov	r0, r6
	pLayerCfg.WindowX0 = 0;
 8001092:	9415      	str	r4, [sp, #84]	@ 0x54
	pLayerCfg.ImageHeight = 272;
 8001094:	9320      	str	r3, [sp, #128]	@ 0x80
	pLayerCfg.Backcolor.Blue = 0;
 8001096:	f8ad 4084 	strh.w	r4, [sp, #132]	@ 0x84
	pLayerCfg.Backcolor.Red = 0;
 800109a:	f88d 4086 	strb.w	r4, [sp, #134]	@ 0x86
	si5351_CalcIQ(vfo_40m_5351, &pllConf, &outConf);
 800109e:	4e46      	ldr	r6, [pc, #280]	@ (80011b8 <main+0x690>)
	pLayerCfg.Alpha0 = 0;
 80010a0:	e9cd 141a 	strd	r1, r4, [sp, #104]	@ 0x68
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80010a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010a8:	e9cd 181c 	strd	r1, r8, [sp, #112]	@ 0x70
	pLayerCfg.FBStartAdress = 0x70000000;
 80010ac:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
	pLayerCfg.WindowY0 = 0;
 80010b0:	e9cd 2416 	strd	r2, r4, [sp, #88]	@ 0x58
	pLayerCfg.ImageWidth = 480;
 80010b4:	e9cd 121e 	strd	r1, r2, [sp, #120]	@ 0x78
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010b8:	4622      	mov	r2, r4
 80010ba:	a915      	add	r1, sp, #84	@ 0x54
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80010bc:	e9cd 3518 	strd	r3, r5, [sp, #96]	@ 0x60
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010c0:	f008 f98d 	bl	80093de <HAL_LTDC_ConfigLayer>
	MX_TouchGFX_Init();
 80010c4:	f000 fec8 	bl	8001e58 <MX_TouchGFX_Init>
	MX_TouchGFX_PreOSInit();
 80010c8:	f000 fec5 	bl	8001e56 <MX_TouchGFX_PreOSInit>
	HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 80010cc:	213c      	movs	r1, #60	@ 0x3c
 80010ce:	4648      	mov	r0, r9
	vfo_40m_5351 = 7074000;
 80010d0:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 800121c <main+0x6f4>
	HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 80010d4:	f00a fae2 	bl	800b69c <HAL_TIM_Encoder_Start_IT>
	vfo_40m_5351 = 7074000;
 80010d8:	4b38      	ldr	r3, [pc, #224]	@ (80011bc <main+0x694>)
	si5351_Init(correction);
 80010da:	20c8      	movs	r0, #200	@ 0xc8
	vfo_40m_5351 = 7074000;
 80010dc:	f8c9 3000 	str.w	r3, [r9]
	si5351_Init(correction);
 80010e0:	f000 f92c 	bl	800133c <si5351_Init>
	si5351_CalcIQ(vfo_40m_5351, &pllConf, &outConf);
 80010e4:	f8d9 0000 	ldr.w	r0, [r9]
 80010e8:	4632      	mov	r2, r6
 80010ea:	4935      	ldr	r1, [pc, #212]	@ (80011c0 <main+0x698>)
 80010ec:	f000 f8be 	bl	800126c <si5351_CalcIQ>
	phaseOffset = (uint8_t) outConf.div;
 80010f0:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8001220 <main+0x6f8>
 80010f4:	6873      	ldr	r3, [r6, #4]
	si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, 0);
 80010f6:	462a      	mov	r2, r5
 80010f8:	4621      	mov	r1, r4
 80010fa:	4620      	mov	r0, r4
	phaseOffset = (uint8_t) outConf.div;
 80010fc:	f889 3000 	strb.w	r3, [r9]
	si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, 0);
 8001100:	4633      	mov	r3, r6
 8001102:	9400      	str	r4, [sp, #0]
 8001104:	f000 f99b 	bl	800143e <si5351_SetupOutput>
	si5351_SetupOutput(2, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &outConf, phaseOffset);
 8001108:	f899 3000 	ldrb.w	r3, [r9]
 800110c:	462a      	mov	r2, r5
 800110e:	4621      	mov	r1, r4
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4638      	mov	r0, r7
 8001114:	4633      	mov	r3, r6
 8001116:	f000 f992 	bl	800143e <si5351_SetupOutput>
	si5351_SetupPLL(SI5351_PLL_A, &pllConf);
 800111a:	4929      	ldr	r1, [pc, #164]	@ (80011c0 <main+0x698>)
 800111c:	4620      	mov	r0, r4
 800111e:	f000 f975 	bl	800140c <si5351_SetupPLL>
	si5351_EnableOutputs((1 << 0) | (1 << 2));
 8001122:	4640      	mov	r0, r8
 8001124:	f000 f93a 	bl	800139c <si5351_EnableOutputs>
	osKernelInitialize();
 8001128:	f00a fd36 	bl	800bb98 <osKernelInitialize>
	i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 800112c:	4825      	ldr	r0, [pc, #148]	@ (80011c4 <main+0x69c>)
 800112e:	f00a fe04 	bl	800bd3a <osMutexNew>
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <main+0x6a0>)
	myTimerI2CWindowAHandle = osTimerNew(myTimerCallbackA, osTimerOnce, NULL, &myTimerI2CWindowA_attributes);
 8001134:	4622      	mov	r2, r4
 8001136:	4621      	mov	r1, r4
	i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 8001138:	6018      	str	r0, [r3, #0]
	myTimerI2CWindowAHandle = osTimerNew(myTimerCallbackA, osTimerOnce, NULL, &myTimerI2CWindowA_attributes);
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <main+0x6a4>)
 800113c:	4824      	ldr	r0, [pc, #144]	@ (80011d0 <main+0x6a8>)
 800113e:	f00a fdab 	bl	800bc98 <osTimerNew>
 8001142:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <main+0x6ac>)
	myTimerI2CWindowBHandle = osTimerNew(myTimerCallbackB, osTimerOnce, NULL, &myTimerI2CWindowB_attributes);
 8001144:	4622      	mov	r2, r4
 8001146:	4621      	mov	r1, r4
	myTimerI2CWindowAHandle = osTimerNew(myTimerCallbackA, osTimerOnce, NULL, &myTimerI2CWindowA_attributes);
 8001148:	6018      	str	r0, [r3, #0]
	myTimerI2CWindowBHandle = osTimerNew(myTimerCallbackB, osTimerOnce, NULL, &myTimerI2CWindowB_attributes);
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <main+0x6b0>)
 800114c:	4823      	ldr	r0, [pc, #140]	@ (80011dc <main+0x6b4>)
 800114e:	f00a fda3 	bl	800bc98 <osTimerNew>
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <main+0x6b8>)
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001154:	4a23      	ldr	r2, [pc, #140]	@ (80011e4 <main+0x6bc>)
 8001156:	4621      	mov	r1, r4
	myTimerI2CWindowBHandle = osTimerNew(myTimerCallbackB, osTimerOnce, NULL, &myTimerI2CWindowB_attributes);
 8001158:	6018      	str	r0, [r3, #0]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800115a:	4823      	ldr	r0, [pc, #140]	@ (80011e8 <main+0x6c0>)
 800115c:	f00a fd48 	bl	800bbf0 <osThreadNew>
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <main+0x6c4>)
	TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001162:	4a23      	ldr	r2, [pc, #140]	@ (80011f0 <main+0x6c8>)
 8001164:	4621      	mov	r1, r4
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001166:	6018      	str	r0, [r3, #0]
	TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001168:	4822      	ldr	r0, [pc, #136]	@ (80011f4 <main+0x6cc>)
 800116a:	f00a fd41 	bl	800bbf0 <osThreadNew>
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <main+0x6d0>)
	myTaskToGUIHandle = osThreadNew(StartTaskToGui, NULL, &myTaskToGUI_attributes);
 8001170:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <main+0x6d4>)
 8001172:	4621      	mov	r1, r4
	TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001174:	6018      	str	r0, [r3, #0]
	myTaskToGUIHandle = osThreadNew(StartTaskToGui, NULL, &myTaskToGUI_attributes);
 8001176:	4822      	ldr	r0, [pc, #136]	@ (8001200 <main+0x6d8>)
 8001178:	f00a fd3a 	bl	800bbf0 <osThreadNew>
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <main+0x6dc>)
	myTaskFromGuiHandle = osThreadNew(StartTaskFromGui, NULL, &myTaskFromGui_attributes);
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <main+0x6e0>)
 8001180:	4621      	mov	r1, r4
	myTaskToGUIHandle = osThreadNew(StartTaskToGui, NULL, &myTaskToGUI_attributes);
 8001182:	6018      	str	r0, [r3, #0]
	myTaskFromGuiHandle = osThreadNew(StartTaskFromGui, NULL, &myTaskFromGui_attributes);
 8001184:	4821      	ldr	r0, [pc, #132]	@ (800120c <main+0x6e4>)
 8001186:	f00a fd33 	bl	800bbf0 <osThreadNew>
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <main+0x6e8>)
 800118c:	6018      	str	r0, [r3, #0]
	osKernelStart();
 800118e:	f00a fd15 	bl	800bbbc <osKernelStart>
	while (1)
 8001192:	e7fe      	b.n	8001192 <main+0x66a>
 8001194:	240001f0 	.word	0x240001f0
 8001198:	5200a000 	.word	0x5200a000
 800119c:	00010002 	.word	0x00010002
 80011a0:	24000350 	.word	0x24000350
 80011a4:	4000e000 	.word	0x4000e000
 80011a8:	00061a80 	.word	0x00061a80
 80011ac:	20b0c8ff 	.word	0x20b0c8ff
 80011b0:	240002a8 	.word	0x240002a8
 80011b4:	50001000 	.word	0x50001000
 80011b8:	24000164 	.word	0x24000164
 80011bc:	006bf0d0 	.word	0x006bf0d0
 80011c0:	24000178 	.word	0x24000178
 80011c4:	08023c78 	.word	0x08023c78
 80011c8:	24000188 	.word	0x24000188
 80011cc:	08023c98 	.word	0x08023c98
 80011d0:	08000761 	.word	0x08000761
 80011d4:	24000190 	.word	0x24000190
 80011d8:	08023c88 	.word	0x08023c88
 80011dc:	08000735 	.word	0x08000735
 80011e0:	2400018c 	.word	0x2400018c
 80011e4:	08023d14 	.word	0x08023d14
 80011e8:	0800074d 	.word	0x0800074d
 80011ec:	240001a0 	.word	0x240001a0
 80011f0:	08023cf0 	.word	0x08023cf0
 80011f4:	08001e67 	.word	0x08001e67
 80011f8:	2400019c 	.word	0x2400019c
 80011fc:	08023ccc 	.word	0x08023ccc
 8001200:	08000a2d 	.word	0x08000a2d
 8001204:	24000198 	.word	0x24000198
 8001208:	08023ca8 	.word	0x08023ca8
 800120c:	08000757 	.word	0x08000757
 8001210:	24000194 	.word	0x24000194
 8001214:	240001a4 	.word	0x240001a4
 8001218:	58001c00 	.word	0x58001c00
 800121c:	24000010 	.word	0x24000010
 8001220:	24000184 	.word	0x24000184

08001224 <_write>:
{
 8001224:	4610      	mov	r0, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001228:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
{
 800122c:	b530      	push	{r4, r5, lr}
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	4283      	cmp	r3, r0
 8001230:	db00      	blt.n	8001234 <_write+0x10>
}
 8001232:	bd30      	pop	{r4, r5, pc}
 8001234:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	@ 0xe80
 8001238:	07e5      	lsls	r5, r4, #31
 800123a:	d507      	bpl.n	800124c <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800123c:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001240:	07e4      	lsls	r4, r4, #31
 8001242:	d503      	bpl.n	800124c <_write+0x28>
		ITM_SendChar(*ptr++);
 8001244:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001246:	6815      	ldr	r5, [r2, #0]
 8001248:	b115      	cbz	r5, 8001250 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800124a:	7014      	strb	r4, [r2, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	3301      	adds	r3, #1
 800124e:	e7ee      	b.n	800122e <_write+0xa>
      __NOP();
 8001250:	bf00      	nop
 8001252:	e7f8      	b.n	8001246 <_write+0x22>

08001254 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM6)
	{
		//readyToSendI2C = FALSE;
	}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001254:	6802      	ldr	r2, [r0, #0]
 8001256:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001258:	429a      	cmp	r2, r3
 800125a:	d101      	bne.n	8001260 <HAL_TIM_PeriodElapsedCallback+0xc>
	{
		HAL_IncTick();
 800125c:	f006 bfc4 	b.w	80081e8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40001000 	.word	0x40001000

08001268 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001268:	4770      	bx	lr
	...

0800126c <si5351_CalcIQ>:
	const int32_t Fxtal = 25000000;
	int32_t Fpll;

	if (Fclk < 1400000)
		Fclk = 1400000;
	else if (Fclk > 100000000)
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <si5351_CalcIQ+0x6c>)
 800126e:	4298      	cmp	r0, r3
 8001270:	bfa8      	it	ge
 8001272:	4618      	movge	r0, r3
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <si5351_CalcIQ+0x70>)
 8001276:	4298      	cmp	r0, r3
 8001278:	bfb8      	it	lt
 800127a:	4618      	movlt	r0, r3
		Fclk = 100000000;

	// apply correction
	Fclk = Fclk - ((Fclk / 1000000) * si5351Correction) / 100;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <si5351_CalcIQ+0x74>)
{
 800127e:	b510      	push	{r4, lr}
	Fclk = Fclk - ((Fclk / 1000000) * si5351Correction) / 100;
 8001280:	fbb0 f3f3 	udiv	r3, r0, r3
 8001284:	4c17      	ldr	r4, [pc, #92]	@ (80012e4 <si5351_CalcIQ+0x78>)
 8001286:	6824      	ldr	r4, [r4, #0]
 8001288:	4363      	muls	r3, r4
 800128a:	f06f 0463 	mvn.w	r4, #99	@ 0x63
 800128e:	fb93 f3f4 	sdiv	r3, r3, r4
 8001292:	4418      	add	r0, r3

	// Using RDivider's changes the phase shift and AN619 doesn't give any
	// guarantees regarding this change.
	out_conf->rdiv = 0;

	if (Fclk < 4900000)
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <si5351_CalcIQ+0x7c>)
 8001296:	4298      	cmp	r0, r3
 8001298:	dd1b      	ble.n	80012d2 <si5351_CalcIQ+0x66>
		// AN619 doesn't literally say that PLL can't run below 600 MHz.
		// Experiments showed that PLL gets unstable when you run it below 177 MHz,
		// which limits Fclk to 177 / 127 = 1.4 MHz.
		out_conf->div = 127;
	}
	else if (Fclk < 8000000)
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <si5351_CalcIQ+0x80>)
 800129c:	4298      	cmp	r0, r3
	{
		out_conf->div = 625000000 / Fclk;
 800129e:	bfb4      	ite	lt
 80012a0:	4b13      	ldrlt	r3, [pc, #76]	@ (80012f0 <si5351_CalcIQ+0x84>)
	}
	else
	{
		out_conf->div = 900000000 / Fclk;
 80012a2:	4b14      	ldrge	r3, [pc, #80]	@ (80012f4 <si5351_CalcIQ+0x88>)
 80012a4:	fb93 f3f0 	sdiv	r3, r3, r0
	out_conf->allowIntegerMode = 0;
 80012a8:	2400      	movs	r4, #0
	}
	out_conf->num = 0;
	out_conf->denom = 1;

	Fpll = Fclk * out_conf->div;
 80012aa:	4358      	muls	r0, r3
	out_conf->num = 0;
 80012ac:	e9c2 3401 	strd	r3, r4, [r2, #4]
	out_conf->allowIntegerMode = 0;
 80012b0:	7014      	strb	r4, [r2, #0]
	out_conf->rdiv = 0;
 80012b2:	7414      	strb	r4, [r2, #16]
	out_conf->denom = 1;
 80012b4:	2401      	movs	r4, #1
 80012b6:	60d4      	str	r4, [r2, #12]
	pll_conf->mult = Fpll / Fxtal;
 80012b8:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <si5351_CalcIQ+0x8c>)
 80012ba:	fb90 f3f2 	sdiv	r3, r0, r2
	pll_conf->num = (Fpll % Fxtal) / 24;
 80012be:	fb02 0013 	mls	r0, r2, r3, r0
	pll_conf->mult = Fpll / Fxtal;
 80012c2:	600b      	str	r3, [r1, #0]
	pll_conf->num = (Fpll % Fxtal) / 24;
 80012c4:	2318      	movs	r3, #24
 80012c6:	fb90 f0f3 	sdiv	r0, r0, r3
	pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <si5351_CalcIQ+0x90>)
	pll_conf->num = (Fpll % Fxtal) / 24;
 80012cc:	6048      	str	r0, [r1, #4]
	pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
 80012ce:	608b      	str	r3, [r1, #8]
}
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	237f      	movs	r3, #127	@ 0x7f
 80012d4:	e7e8      	b.n	80012a8 <si5351_CalcIQ+0x3c>
 80012d6:	bf00      	nop
 80012d8:	05f5e100 	.word	0x05f5e100
 80012dc:	00155cc0 	.word	0x00155cc0
 80012e0:	000f4240 	.word	0x000f4240
 80012e4:	24000430 	.word	0x24000430
 80012e8:	004ac49f 	.word	0x004ac49f
 80012ec:	007a1200 	.word	0x007a1200
 80012f0:	2540be40 	.word	0x2540be40
 80012f4:	35a4e900 	.word	0x35a4e900
 80012f8:	017d7840 	.word	0x017d7840
 80012fc:	000fe502 	.word	0x000fe502

08001300 <si5351_write>:
	si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
}

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value)
{
 8001300:	b510      	push	{r4, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	b086      	sub	sp, #24
 8001306:	f88d 1017 	strb.w	r1, [sp, #23]
	while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t) (SI5351_ADDRESS << 1),
 800130a:	2325      	movs	r3, #37	@ 0x25
 800130c:	2203      	movs	r2, #3
 800130e:	21c0      	movs	r1, #192	@ 0xc0
 8001310:	4809      	ldr	r0, [pc, #36]	@ (8001338 <si5351_write+0x38>)
 8001312:	f007 fe39 	bl	8008f88 <HAL_I2C_IsDeviceReady>
			3, 0x25U) != HAL_OK) //used to be 3 trials, HAL_MAX_DELAY
 8001316:	2800      	cmp	r0, #0
 8001318:	d1f7      	bne.n	800130a <si5351_write+0xa>
	{
	}

	HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800131a:	2301      	movs	r3, #1
 800131c:	2225      	movs	r2, #37	@ 0x25
 800131e:	21c0      	movs	r1, #192	@ 0xc0
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <si5351_write+0x38>)
 8001322:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001326:	f10d 0217 	add.w	r2, sp, #23
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	4622      	mov	r2, r4
 800132e:	f007 fc73 	bl	8008c18 <HAL_I2C_Mem_Write>
			(uint8_t) reg,                 // register address
			I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
			(uint8_t*) (&value),         // write returned data to this variable
			1,
			0x25U); // how many bytes to expect returned               // timeout
}
 8001332:	b006      	add	sp, #24
 8001334:	bd10      	pop	{r4, pc}
 8001336:	bf00      	nop
 8001338:	24000350 	.word	0x24000350

0800133c <si5351_Init>:
{
 800133c:	b508      	push	{r3, lr}
	si5351Correction = correction;
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <si5351_Init+0x5c>)
	si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8001340:	21ff      	movs	r1, #255	@ 0xff
	si5351Correction = correction;
 8001342:	6018      	str	r0, [r3, #0]
	si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8001344:	2003      	movs	r0, #3
 8001346:	f7ff ffdb 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800134a:	2180      	movs	r1, #128	@ 0x80
 800134c:	2010      	movs	r0, #16
 800134e:	f7ff ffd7 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8001352:	2180      	movs	r1, #128	@ 0x80
 8001354:	2011      	movs	r0, #17
 8001356:	f7ff ffd3 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	2012      	movs	r0, #18
 800135e:	f7ff ffcf 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	2013      	movs	r0, #19
 8001366:	f7ff ffcb 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	2014      	movs	r0, #20
 800136e:	f7ff ffc7 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 8001372:	2180      	movs	r1, #128	@ 0x80
 8001374:	2015      	movs	r0, #21
 8001376:	f7ff ffc3 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	2016      	movs	r0, #22
 800137e:	f7ff ffbf 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8001382:	2180      	movs	r1, #128	@ 0x80
 8001384:	2017      	movs	r0, #23
 8001386:	f7ff ffbb 	bl	8001300 <si5351_write>
	si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 800138a:	2140      	movs	r1, #64	@ 0x40
 800138c:	20b7      	movs	r0, #183	@ 0xb7
}
 800138e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 8001392:	f7ff bfb5 	b.w	8001300 <si5351_write>
 8001396:	bf00      	nop
 8001398:	24000430 	.word	0x24000430

0800139c <si5351_EnableOutputs>:
	si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800139c:	43c1      	mvns	r1, r0
 800139e:	2003      	movs	r0, #3
 80013a0:	b2c9      	uxtb	r1, r1
 80013a2:	f7ff bfad 	b.w	8001300 <si5351_write>
	...

080013a8 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3,
		uint8_t divBy4, si5351RDiv_t rdiv)
{
 80013a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
//	si5351_write(baseaddr + 6, (P2 >> 8) & 0xFF);
//	si5351_write(baseaddr + 7, P2 & 0xFF);

	i2cDataBulk[0] = ((P3 >> 8) & 0xFF);
	i2cDataBulk[1] = ( P3 & 0xFF);
	i2cDataBulk[2] = (((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 80013aa:	f89d 6020 	ldrb.w	r6, [sp, #32]
	i2cDataBulk[0] = ((P3 >> 8) & 0xFF);
 80013ae:	121d      	asrs	r5, r3, #8
 80013b0:	4c14      	ldr	r4, [pc, #80]	@ (8001404 <si5351_writeBulk+0x5c>)
	i2cDataBulk[2] = (((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 80013b2:	00b6      	lsls	r6, r6, #2
	i2cDataBulk[0] = ((P3 >> 8) & 0xFF);
 80013b4:	7025      	strb	r5, [r4, #0]
	i2cDataBulk[2] = (((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 80013b6:	f3c1 4501 	ubfx	r5, r1, #16, #2
 80013ba:	f006 060c 	and.w	r6, r6, #12
	i2cDataBulk[1] = ( P3 & 0xFF);
 80013be:	7063      	strb	r3, [r4, #1]
	i2cDataBulk[3] = ((P1 >> 8) & 0xFF);
	i2cDataBulk[4] = (P1 & 0xFF);
	i2cDataBulk[5] = (((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80013c0:	131b      	asrs	r3, r3, #12
	i2cDataBulk[4] = (P1 & 0xFF);
 80013c2:	7121      	strb	r1, [r4, #4]
	i2cDataBulk[2] = (((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 80013c4:	4335      	orrs	r5, r6
 80013c6:	f89d 6024 	ldrb.w	r6, [sp, #36]	@ 0x24
	i2cDataBulk[5] = (((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80013ca:	f023 030f 	bic.w	r3, r3, #15
	i2cDataBulk[6] = ((P2 >> 8) & 0xFF);
	i2cDataBulk[7] = (P2 & 0xFF);
 80013ce:	71e2      	strb	r2, [r4, #7]
	i2cDataBulk[2] = (((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 80013d0:	0136      	lsls	r6, r6, #4
 80013d2:	f006 0670 	and.w	r6, r6, #112	@ 0x70
 80013d6:	4335      	orrs	r5, r6
 80013d8:	70a5      	strb	r5, [r4, #2]
	i2cDataBulk[3] = ((P1 >> 8) & 0xFF);
 80013da:	120d      	asrs	r5, r1, #8
	i2cDataBulk[5] = (((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80013dc:	f3c2 4103 	ubfx	r1, r2, #16, #4
	i2cDataBulk[3] = ((P1 >> 8) & 0xFF);
 80013e0:	70e5      	strb	r5, [r4, #3]
	i2cDataBulk[5] = (((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80013e2:	430b      	orrs	r3, r1

	HAL_I2C_Mem_Write(&hi2c4, (SI5351_ADDRESS << 1), baseaddr, I2C_MEMADD_SIZE_8BIT, i2cDataBulk, 8, 0x25U);
 80013e4:	21c0      	movs	r1, #192	@ 0xc0
	i2cDataBulk[5] = (((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80013e6:	7163      	strb	r3, [r4, #5]
	i2cDataBulk[6] = ((P2 >> 8) & 0xFF);
 80013e8:	1213      	asrs	r3, r2, #8
	HAL_I2C_Mem_Write(&hi2c4, (SI5351_ADDRESS << 1), baseaddr, I2C_MEMADD_SIZE_8BIT, i2cDataBulk, 8, 0x25U);
 80013ea:	2225      	movs	r2, #37	@ 0x25
	i2cDataBulk[6] = ((P2 >> 8) & 0xFF);
 80013ec:	71a3      	strb	r3, [r4, #6]
	HAL_I2C_Mem_Write(&hi2c4, (SI5351_ADDRESS << 1), baseaddr, I2C_MEMADD_SIZE_8BIT, i2cDataBulk, 8, 0x25U);
 80013ee:	2308      	movs	r3, #8
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80013f6:	4602      	mov	r2, r0
 80013f8:	2301      	movs	r3, #1
 80013fa:	4803      	ldr	r0, [pc, #12]	@ (8001408 <si5351_writeBulk+0x60>)
 80013fc:	f007 fc0c 	bl	8008c18 <HAL_I2C_Mem_Write>
}
 8001400:	b004      	add	sp, #16
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	24000434 	.word	0x24000434
 8001408:	24000350 	.word	0x24000350

0800140c <si5351_SetupPLL>:
	P1 = 128 * mult + (128 * num) / denom - 512;
 800140c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
{
 8001410:	b513      	push	{r0, r1, r4, lr}
	P1 = 128 * mult + (128 * num) / denom - 512;
 8001412:	01d2      	lsls	r2, r2, #7
 8001414:	6809      	ldr	r1, [r1, #0]
	uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001416:	2800      	cmp	r0, #0
	si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8001418:	f04f 0000 	mov.w	r0, #0
	P1 = 128 * mult + (128 * num) / denom - 512;
 800141c:	fb92 f4f3 	sdiv	r4, r2, r3
 8001420:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
	si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8001424:	fb03 2214 	mls	r2, r3, r4, r2
 8001428:	e9cd 0000 	strd	r0, r0, [sp]
 800142c:	f5a1 7100 	sub.w	r1, r1, #512	@ 0x200
 8001430:	bf14      	ite	ne
 8001432:	2022      	movne	r0, #34	@ 0x22
 8001434:	201a      	moveq	r0, #26
 8001436:	f7ff ffb7 	bl	80013a8 <si5351_writeBulk>
}
 800143a:	b002      	add	sp, #8
 800143c:	bd10      	pop	{r4, pc}

0800143e <si5351_SetupOutput>:
	if (output > 2)
 800143e:	2802      	cmp	r0, #2
{
 8001440:	468c      	mov	ip, r1
 8001442:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001446:	4611      	mov	r1, r2
 8001448:	461c      	mov	r4, r3
	if (output > 2)
 800144a:	d85a      	bhi.n	8001502 <si5351_SetupOutput+0xc4>
	if ((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0))))
 800144c:	f894 e000 	ldrb.w	lr, [r4]
	int32_t denom = conf->denom;
 8001450:	f8d4 900c 	ldr.w	r9, [r4, #12]
	int32_t num = conf->num;
 8001454:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
	if ((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0))))
 8001458:	f1be 0f00 	cmp.w	lr, #0
 800145c:	d106      	bne.n	800146c <si5351_SetupOutput+0x2e>
 800145e:	2a07      	cmp	r2, #7
 8001460:	dd02      	ble.n	8001468 <si5351_SetupOutput+0x2a>
 8001462:	2a08      	cmp	r2, #8
 8001464:	d104      	bne.n	8001470 <si5351_SetupOutput+0x32>
 8001466:	b91b      	cbnz	r3, 8001470 <si5351_SetupOutput+0x32>
		return 2;
 8001468:	2002      	movs	r0, #2
 800146a:	e03b      	b.n	80014e4 <si5351_SetupOutput+0xa6>
	if (div == 4)
 800146c:	2a04      	cmp	r2, #4
 800146e:	d03c      	beq.n	80014ea <si5351_SetupOutput+0xac>
		P1 = 128 * div + ((128 * num) / denom) - 512;
 8001470:	01dd      	lsls	r5, r3, #7
	uint8_t divBy4 = 0;
 8001472:	f04f 0a00 	mov.w	sl, #0
		P1 = 128 * div + ((128 * num) / denom) - 512;
 8001476:	fb95 f7f9 	sdiv	r7, r5, r9
 800147a:	eb07 16c2 	add.w	r6, r7, r2, lsl #7
		P2 = (128 * num) % denom;
 800147e:	fb09 5517 	mls	r5, r9, r7, r5
		P1 = 128 * div + ((128 * num) / denom) - 512;
 8001482:	f5a6 7600 	sub.w	r6, r6, #512	@ 0x200
	switch (output)
 8001486:	2801      	cmp	r0, #1
 8001488:	d036      	beq.n	80014f8 <si5351_SetupOutput+0xba>
		clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800148a:	2802      	cmp	r0, #2
 800148c:	bf0b      	itete	eq
 800148e:	2012      	moveq	r0, #18
 8001490:	2010      	movne	r0, #16
 8001492:	27a7      	moveq	r7, #167	@ 0xa7
 8001494:	27a5      	movne	r7, #165	@ 0xa5
 8001496:	bf0c      	ite	eq
 8001498:	f04f 083a 	moveq.w	r8, #58	@ 0x3a
 800149c:	f04f 082a 	movne.w	r8, #42	@ 0x2a
	if (pllSource == SI5351_PLL_B)
 80014a0:	f1bc 0f01 	cmp.w	ip, #1
	uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 80014a4:	bf14      	ite	ne
 80014a6:	f041 010c 	orrne.w	r1, r1, #12
		clkControl |= (1 << 5); // Uses PLLB
 80014aa:	f041 012c 	orreq.w	r1, r1, #44	@ 0x2c
	if ((conf->allowIntegerMode) && ((num == 0) || (div == 4)))
 80014ae:	f1be 0f00 	cmp.w	lr, #0
 80014b2:	d004      	beq.n	80014be <si5351_SetupOutput+0x80>
 80014b4:	b10b      	cbz	r3, 80014ba <si5351_SetupOutput+0x7c>
 80014b6:	2a04      	cmp	r2, #4
 80014b8:	d101      	bne.n	80014be <si5351_SetupOutput+0x80>
		clkControl |= (1 << 6);
 80014ba:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	si5351_write(clkControlRegister, clkControl);
 80014be:	f7ff ff1f 	bl	8001300 <si5351_write>
	si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 80014c2:	7c23      	ldrb	r3, [r4, #16]
 80014c4:	462a      	mov	r2, r5
 80014c6:	4631      	mov	r1, r6
 80014c8:	4640      	mov	r0, r8
 80014ca:	e9cd a300 	strd	sl, r3, [sp]
 80014ce:	464b      	mov	r3, r9
 80014d0:	f7ff ff6a 	bl	80013a8 <si5351_writeBulk>
	si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 80014d4:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 80014d8:	4638      	mov	r0, r7
 80014da:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80014de:	f7ff ff0f 	bl	8001300 <si5351_write>
	return 0;
 80014e2:	2000      	movs	r0, #0
}
 80014e4:	b002      	add	sp, #8
 80014e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		P2 = 0;
 80014ea:	2500      	movs	r5, #0
		P3 = 1;
 80014ec:	f04f 0901 	mov.w	r9, #1
		divBy4 = 0x3;
 80014f0:	f04f 0a03 	mov.w	sl, #3
		P1 = 0;
 80014f4:	462e      	mov	r6, r5
 80014f6:	e7c6      	b.n	8001486 <si5351_SetupOutput+0x48>
	switch (output)
 80014f8:	2011      	movs	r0, #17
 80014fa:	27a6      	movs	r7, #166	@ 0xa6
 80014fc:	f04f 0832 	mov.w	r8, #50	@ 0x32
 8001500:	e7ce      	b.n	80014a0 <si5351_SetupOutput+0x62>
		return 1;
 8001502:	2001      	movs	r0, #1
 8001504:	e7ee      	b.n	80014e4 <si5351_SetupOutput+0xa6>
	...

08001508 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_MspInit+0x2c>)
{
 800150a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150c:	210f      	movs	r1, #15
 800150e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001516:	f042 0202 	orr.w	r2, r2, #2
 800151a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152e:	f006 be91 	b.w	8008254 <HAL_NVIC_SetPriority>
 8001532:	bf00      	nop
 8001534:	58024400 	.word	0x58024400

08001538 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001538:	6802      	ldr	r2, [r0, #0]
{
 800153a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_CRC_MspInit+0x2c>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d10d      	bne.n	800155e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001542:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001546:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800154a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800154e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800155e:	b002      	add	sp, #8
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	58024c00 	.word	0x58024c00

08001568 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_DMA2D_MspInit+0x40>)
{
 800156a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d117      	bne.n	80015a2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001574:	2105      	movs	r1, #5
 8001576:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001578:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800157c:	f042 0210 	orr.w	r2, r2, #16
 8001580:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001584:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001592:	f006 fe5f 	bl	8008254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001596:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001598:	b003      	add	sp, #12
 800159a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800159e:	f006 be8b 	b.w	80082b8 <HAL_NVIC_EnableIRQ>
}
 80015a2:	b003      	add	sp, #12
 80015a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a8:	52001000 	.word	0x52001000
 80015ac:	58024400 	.word	0x58024400

080015b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b0:	b510      	push	{r4, lr}
 80015b2:	b0b6      	sub	sp, #216	@ 0xd8
 80015b4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	2214      	movs	r2, #20
 80015b8:	2100      	movs	r1, #0
 80015ba:	a803      	add	r0, sp, #12
 80015bc:	f021 fc85 	bl	8022eca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	22b8      	movs	r2, #184	@ 0xb8
 80015c2:	2100      	movs	r1, #0
 80015c4:	a808      	add	r0, sp, #32
 80015c6:	f021 fc80 	bl	8022eca <memset>
  if(hi2c->Instance==I2C4)
 80015ca:	6822      	ldr	r2, [r4, #0]
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_I2C_MspInit+0x88>)
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d130      	bne.n	8001634 <HAL_I2C_MspInit+0x84>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015d2:	2210      	movs	r2, #16
 80015d4:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f009 fb68 	bl	800acb0 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	b108      	cbz	r0, 80015e6 <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 80015e2:	f7ff fe41 	bl	8001268 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e6:	4c15      	ldr	r4, [pc, #84]	@ (800163c <HAL_I2C_MspInit+0x8c>)
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ec:	a903      	add	r1, sp, #12
 80015ee:	4814      	ldr	r0, [pc, #80]	@ (8001640 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80015fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001614:	2304      	movs	r3, #4
 8001616:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001618:	f006 ffd0 	bl	80085bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800161c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8001620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001624:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 8001628:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800162c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001634:	b036      	add	sp, #216	@ 0xd8
 8001636:	bd10      	pop	{r4, pc}
 8001638:	58001c00 	.word	0x58001c00
 800163c:	58024400 	.word	0x58024400
 8001640:	58021400 	.word	0x58021400

08001644 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8001644:	6802      	ldr	r2, [r0, #0]
{
 8001646:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_I2C_MspDeInit+0x34>)
 800164a:	429a      	cmp	r2, r3
 800164c:	d112      	bne.n	8001674 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800164e:	4a0b      	ldr	r2, [pc, #44]	@ (800167c <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 8001650:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001654:	480a      	ldr	r0, [pc, #40]	@ (8001680 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001656:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800165a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800165e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 8001662:	f007 f88d 	bl	8008780 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8001666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <HAL_I2C_MspDeInit+0x3c>)
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800166c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8001670:	f007 b886 	b.w	8008780 <HAL_GPIO_DeInit>
}
 8001674:	bd08      	pop	{r3, pc}
 8001676:	bf00      	nop
 8001678:	58001c00 	.word	0x58001c00
 800167c:	58024400 	.word	0x58024400
 8001680:	58021400 	.word	0x58021400

08001684 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001688:	b0bd      	sub	sp, #244	@ 0xf4
 800168a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	2214      	movs	r2, #20
 800168e:	2100      	movs	r1, #0
 8001690:	a809      	add	r0, sp, #36	@ 0x24
 8001692:	f021 fc1a 	bl	8022eca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001696:	22b8      	movs	r2, #184	@ 0xb8
 8001698:	2100      	movs	r1, #0
 800169a:	a80e      	add	r0, sp, #56	@ 0x38
 800169c:	f021 fc15 	bl	8022eca <memset>
  if(hltdc->Instance==LTDC)
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	4b8b      	ldr	r3, [pc, #556]	@ (80018d0 <HAL_LTDC_MspInit+0x24c>)
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8110 	bne.w	80018ca <HAL_LTDC_MspInit+0x246>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016aa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80016ae:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b0:	a80e      	add	r0, sp, #56	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016b2:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80016b6:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80016ba:	2219      	movs	r2, #25
 80016bc:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80016c0:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80016c2:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 80016c6:	231e      	movs	r3, #30
 80016c8:	931c      	str	r3, [sp, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80016ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ce:	931e      	str	r3, [sp, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d0:	f009 faee 	bl	800acb0 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	b108      	cbz	r0, 80016da <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80016d6:	f7ff fdc7 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016da:	4b7e      	ldr	r3, [pc, #504]	@ (80018d4 <HAL_LTDC_MspInit+0x250>)
    PB0     ------> LTDC_G1
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e0:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016e2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	f44f 7880 	mov.w	r8, #256	@ 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	a909      	add	r1, sp, #36	@ 0x24
 80016ec:	487a      	ldr	r0, [pc, #488]	@ (80018d8 <HAL_LTDC_MspInit+0x254>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016ee:	f042 0208 	orr.w	r2, r2, #8

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 80016f2:	f04f 0909 	mov.w	r9, #9
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2703      	movs	r7, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016f8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80016fc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001700:	f002 0208 	and.w	r2, r2, #8
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800170c:	f042 0202 	orr.w	r2, r2, #2
 8001710:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001714:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001718:	f002 0202 	and.w	r2, r2, #2
 800171c:	9202      	str	r2, [sp, #8]
 800171e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001720:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001724:	f042 0208 	orr.w	r2, r2, #8
 8001728:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800172c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001730:	f002 0208 	and.w	r2, r2, #8
 8001734:	9203      	str	r2, [sp, #12]
 8001736:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001744:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001748:	f002 0201 	and.w	r2, r2, #1
 800174c:	9204      	str	r2, [sp, #16]
 800174e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001750:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001754:	f042 0210 	orr.w	r2, r2, #16
 8001758:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800175c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001760:	f002 0210 	and.w	r2, r2, #16
 8001764:	9205      	str	r2, [sp, #20]
 8001766:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001768:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800176c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001770:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001774:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001778:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800177c:	9206      	str	r2, [sp, #24]
 800177e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001780:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001784:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001788:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800178c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001790:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001794:	9207      	str	r2, [sp, #28]
 8001796:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800179c:	f042 0204 	orr.w	r2, r2, #4
 80017a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017a8:	960d      	str	r6, [sp, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	9308      	str	r3, [sp, #32]
 80017b0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	e9cd 8509 	strd	r8, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f006 feff 	bl	80085bc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017be:	a909      	add	r1, sp, #36	@ 0x24
 80017c0:	4846      	ldr	r0, [pc, #280]	@ (80018dc <HAL_LTDC_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c2:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	e9cd 9509 	strd	r9, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	f006 fef6 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
 80017d0:	f240 2303 	movw	r3, #515	@ 0x203
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	a909      	add	r1, sp, #36	@ 0x24
 80017d6:	4840      	ldr	r0, [pc, #256]	@ (80018d8 <HAL_LTDC_MspInit+0x254>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	940b      	str	r4, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017de:	e9cd 760c 	strd	r7, r6, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f006 feeb 	bl	80085bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80017e6:	230d      	movs	r3, #13
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	a909      	add	r1, sp, #36	@ 0x24
 80017ea:	483d      	ldr	r0, [pc, #244]	@ (80018e0 <HAL_LTDC_MspInit+0x25c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80017ec:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	e9cd 8509 	strd	r8, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f006 fee1 	bl	80085bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
 80017fa:	f64b 0302 	movw	r3, #47106	@ 0xb802
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fe:	a909      	add	r1, sp, #36	@ 0x24
 8001800:	4838      	ldr	r0, [pc, #224]	@ (80018e4 <HAL_LTDC_MspInit+0x260>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001802:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001804:	f04f 0858 	mov.w	r8, #88	@ 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001810:	f006 fed4 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001814:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001818:	a909      	add	r1, sp, #36	@ 0x24
 800181a:	4833      	ldr	r0, [pc, #204]	@ (80018e8 <HAL_LTDC_MspInit+0x264>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800181c:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001826:	f006 fec9 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800182a:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182c:	a909      	add	r1, sp, #36	@ 0x24
 800182e:	482b      	ldr	r0, [pc, #172]	@ (80018dc <HAL_LTDC_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001830:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183a:	f006 febf 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 800183e:	f248 0304 	movw	r3, #32772	@ 0x8004
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001842:	a909      	add	r1, sp, #36	@ 0x24
 8001844:	4829      	ldr	r0, [pc, #164]	@ (80018ec <HAL_LTDC_MspInit+0x268>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001846:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001850:	f006 feb4 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001854:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	a909      	add	r1, sp, #36	@ 0x24
 8001858:	4825      	ldr	r0, [pc, #148]	@ (80018f0 <HAL_LTDC_MspInit+0x26c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800185a:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f006 feaa 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001868:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186a:	a909      	add	r1, sp, #36	@ 0x24
 800186c:	481e      	ldr	r0, [pc, #120]	@ (80018e8 <HAL_LTDC_MspInit+0x264>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800186e:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001878:	f006 fea0 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_10
 800187c:	f640 7308 	movw	r3, #3848	@ 0xf08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001880:	a909      	add	r1, sp, #36	@ 0x24
 8001882:	481a      	ldr	r0, [pc, #104]	@ (80018ec <HAL_LTDC_MspInit+0x268>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001884:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800188e:	f006 fe95 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	a909      	add	r1, sp, #36	@ 0x24
 8001894:	4812      	ldr	r0, [pc, #72]	@ (80018e0 <HAL_LTDC_MspInit+0x25c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001896:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	e9cd 8509 	strd	r8, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f006 fe8c 	bl	80085bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a4:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018a6:	a909      	add	r1, sp, #36	@ 0x24
 80018a8:	4810      	ldr	r0, [pc, #64]	@ (80018ec <HAL_LTDC_MspInit+0x268>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018aa:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	e9cd 470b 	strd	r4, r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018b6:	f006 fe81 	bl	80085bc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80018ba:	4640      	mov	r0, r8
 80018bc:	4622      	mov	r2, r4
 80018be:	2105      	movs	r1, #5
 80018c0:	f006 fcc8 	bl	8008254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80018c4:	4640      	mov	r0, r8
 80018c6:	f006 fcf7 	bl	80082b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018ca:	b03d      	add	sp, #244	@ 0xf4
 80018cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018d0:	50001000 	.word	0x50001000
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58020400 	.word	0x58020400
 80018dc:	58020c00 	.word	0x58020c00
 80018e0:	58020000 	.word	0x58020000
 80018e4:	58021000 	.word	0x58021000
 80018e8:	58021800 	.word	0x58021800
 80018ec:	58021c00 	.word	0x58021c00
 80018f0:	58020800 	.word	0x58020800

080018f4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80018f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018f8:	b091      	sub	sp, #68	@ 0x44
 80018fa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	2214      	movs	r2, #20
 80018fe:	2100      	movs	r1, #0
 8001900:	a80b      	add	r0, sp, #44	@ 0x2c
 8001902:	f021 fae2 	bl	8022eca <memset>
  if(hospi->Instance==OCTOSPI1)
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	4a88      	ldr	r2, [pc, #544]	@ (8001b2c <HAL_OSPI_MspInit+0x238>)
 800190a:	4293      	cmp	r3, r2
 800190c:	f040 80b0 	bne.w	8001a70 <HAL_OSPI_MspInit+0x17c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001910:	4a87      	ldr	r2, [pc, #540]	@ (8001b30 <HAL_OSPI_MspInit+0x23c>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001916:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001918:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800191a:	d10c      	bne.n	8001936 <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800191c:	4b85      	ldr	r3, [pc, #532]	@ (8001b34 <HAL_OSPI_MspInit+0x240>)
 800191e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001922:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001926:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800192a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800192e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001936:	4b7f      	ldr	r3, [pc, #508]	@ (8001b34 <HAL_OSPI_MspInit+0x240>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800193a:	2403      	movs	r4, #3
 800193c:	2709      	movs	r7, #9
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800193e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001942:	a90b      	add	r1, sp, #44	@ 0x2c
 8001944:	487c      	ldr	r0, [pc, #496]	@ (8001b38 <HAL_OSPI_MspInit+0x244>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2600      	movs	r6, #0
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001948:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800194c:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001950:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001954:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001958:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800195c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800196c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001974:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001978:	9202      	str	r2, [sp, #8]
 800197a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001980:	f042 0208 	orr.w	r2, r2, #8
 8001984:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800198c:	f002 0208 	and.w	r2, r2, #8
 8001990:	9203      	str	r2, [sp, #12]
 8001992:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001994:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001998:	f042 0210 	orr.w	r2, r2, #16
 800199c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80019a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80019a4:	f002 0210 	and.w	r2, r2, #16
 80019a8:	9204      	str	r2, [sp, #16]
 80019aa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80019b0:	f042 0220 	orr.w	r2, r2, #32
 80019b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80019b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80019bc:	f002 0220 	and.w	r2, r2, #32
 80019c0:	9205      	str	r2, [sp, #20]
 80019c2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80019c8:	f042 0202 	orr.w	r2, r2, #2
 80019cc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	9306      	str	r3, [sp, #24]
 80019da:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e0:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019e4:	e9cd 470e 	strd	r4, r7, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e8:	f006 fde8 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 80019ec:	23b0      	movs	r3, #176	@ 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ee:	a90b      	add	r1, sp, #44	@ 0x2c
 80019f0:	4852      	ldr	r0, [pc, #328]	@ (8001b3c <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80019f2:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fe:	f006 fddd 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a02:	a90b      	add	r1, sp, #44	@ 0x2c
 8001a04:	484e      	ldr	r0, [pc, #312]	@ (8001b40 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a06:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a10:	f006 fdd4 	bl	80085bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a14:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a16:	a90b      	add	r1, sp, #44	@ 0x2c
 8001a18:	4847      	ldr	r0, [pc, #284]	@ (8001b38 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a1a:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a26:	f006 fdc9 	bl	80085bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8001a2a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	a90b      	add	r1, sp, #44	@ 0x2c
 8001a30:	4842      	ldr	r0, [pc, #264]	@ (8001b3c <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a32:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3c:	f006 fdbe 	bl	80085bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a44:	a90b      	add	r1, sp, #44	@ 0x2c
 8001a46:	483f      	ldr	r0, [pc, #252]	@ (8001b44 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a48:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a52:	f006 fdb3 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	a90b      	add	r1, sp, #44	@ 0x2c
 8001a58:	483b      	ldr	r0, [pc, #236]	@ (8001b48 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a5a:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a66:	f006 fda9 	bl	80085bc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001a6a:	b011      	add	sp, #68	@ 0x44
 8001a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 8001a70:	4a36      	ldr	r2, [pc, #216]	@ (8001b4c <HAL_OSPI_MspInit+0x258>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d1f9      	bne.n	8001a6a <HAL_OSPI_MspInit+0x176>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001a76:	4a2e      	ldr	r2, [pc, #184]	@ (8001b30 <HAL_OSPI_MspInit+0x23c>)
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001a7c:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001a7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001a80:	d10c      	bne.n	8001a9c <HAL_OSPI_MspInit+0x1a8>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001a82:	4b2c      	ldr	r3, [pc, #176]	@ (8001b34 <HAL_OSPI_MspInit+0x240>)
 8001a84:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001a88:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001a8c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001a90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	9307      	str	r3, [sp, #28]
 8001a9a:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001a9c:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <HAL_OSPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001a9e:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001aa2:	2609      	movs	r6, #9
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001aa4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa8:	a90b      	add	r1, sp, #44	@ 0x2c
 8001aaa:	4823      	ldr	r0, [pc, #140]	@ (8001b38 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2700      	movs	r7, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001aae:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ab2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001ab6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001aba:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8001abe:	9208      	str	r2, [sp, #32]
 8001ac0:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001ace:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001ad2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001ad6:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ada:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8001af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	f640 0303 	movw	r3, #2051	@ 0x803
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001af6:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001afe:	f006 fd5d 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001b02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b06:	a90b      	add	r1, sp, #44	@ 0x2c
 8001b08:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001b0a:	940f      	str	r4, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b14:	f006 fd52 	bl	80085bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001b18:	f241 031f 	movw	r3, #4127	@ 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b1c:	a90b      	add	r1, sp, #44	@ 0x2c
 8001b1e:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001b20:	960f      	str	r6, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b2a:	e79c      	b.n	8001a66 <HAL_OSPI_MspInit+0x172>
 8001b2c:	52005000 	.word	0x52005000
 8001b30:	2400043c 	.word	0x2400043c
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58021800 	.word	0x58021800
 8001b3c:	58020c00 	.word	0x58020c00
 8001b40:	58021000 	.word	0x58021000
 8001b44:	58021400 	.word	0x58021400
 8001b48:	58020400 	.word	0x58020400
 8001b4c:	5200a000 	.word	0x5200a000

08001b50 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8001b50:	4a27      	ldr	r2, [pc, #156]	@ (8001bf0 <HAL_OSPI_MspDeInit+0xa0>)
{
 8001b52:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8001b54:	6803      	ldr	r3, [r0, #0]
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12a      	bne.n	8001bb0 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <HAL_OSPI_MspDeInit+0xa4>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	3a01      	subs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001b62:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_OSPI_MspDeInit+0xa8>)
 8001b64:	b92a      	cbnz	r2, 8001b72 <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001b66:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001b6a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001b6e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001b72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001b76:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001b7a:	4820      	ldr	r0, [pc, #128]	@ (8001bfc <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001b7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b80:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001b84:	f006 fdfc 	bl	8008780 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8001b88:	f643 01b0 	movw	r1, #14512	@ 0x38b0
 8001b8c:	481c      	ldr	r0, [pc, #112]	@ (8001c00 <HAL_OSPI_MspDeInit+0xb0>)
 8001b8e:	f006 fdf7 	bl	8008780 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001b92:	2104      	movs	r1, #4
 8001b94:	481b      	ldr	r0, [pc, #108]	@ (8001c04 <HAL_OSPI_MspDeInit+0xb4>)
 8001b96:	f006 fdf3 	bl	8008780 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8001b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b9e:	481a      	ldr	r0, [pc, #104]	@ (8001c08 <HAL_OSPI_MspDeInit+0xb8>)
 8001ba0:	f006 fdee 	bl	8008780 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4819      	ldr	r0, [pc, #100]	@ (8001c0c <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8001ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001bac:	f006 bde8 	b.w	8008780 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8001bb0:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_OSPI_MspDeInit+0xc0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d11a      	bne.n	8001bec <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_OSPI_MspDeInit+0xa4>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_OSPI_MspDeInit+0xa8>)
 8001bc0:	b92a      	cbnz	r2, 8001bce <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001bc2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001bc6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001bca:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001bce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001bd2:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8001bd6:	4809      	ldr	r0, [pc, #36]	@ (8001bfc <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001bd8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001bdc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001be0:	f006 fdce 	bl	8008780 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001be4:	f241 011f 	movw	r1, #4127	@ 0x101f
 8001be8:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <HAL_OSPI_MspDeInit+0xb8>)
 8001bea:	e7dd      	b.n	8001ba8 <HAL_OSPI_MspDeInit+0x58>
}
 8001bec:	bd08      	pop	{r3, pc}
 8001bee:	bf00      	nop
 8001bf0:	52005000 	.word	0x52005000
 8001bf4:	2400043c 	.word	0x2400043c
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	58021800 	.word	0x58021800
 8001c00:	58020c00 	.word	0x58020c00
 8001c04:	58021000 	.word	0x58021000
 8001c08:	58021400 	.word	0x58021400
 8001c0c:	58020400 	.word	0x58020400
 8001c10:	5200a000 	.word	0x5200a000

08001c14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c14:	b510      	push	{r4, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	2214      	movs	r2, #20
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	a803      	add	r0, sp, #12
 8001c20:	f021 f953 	bl	8022eca <memset>
  if(htim_encoder->Instance==TIM23)
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d12a      	bne.n	8001c82 <HAL_TIM_Encoder_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c2e:	a903      	add	r1, sp, #12
 8001c30:	4817      	ldr	r0, [pc, #92]	@ (8001c90 <HAL_TIM_Encoder_MspInit+0x7c>)
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001c32:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8001c36:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001c3a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8001c3e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8001c42:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8001c46:	9201      	str	r2, [sp, #4]
 8001c48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001c6a:	230d      	movs	r3, #13
 8001c6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c6e:	f006 fca5 	bl	80085bc <HAL_GPIO_Init>

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 7, 0);
 8001c72:	20a1      	movs	r0, #161	@ 0xa1
 8001c74:	2200      	movs	r2, #0
 8001c76:	2107      	movs	r1, #7
 8001c78:	f006 faec 	bl	8008254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001c7c:	20a1      	movs	r0, #161	@ 0xa1
 8001c7e:	f006 fb1b 	bl	80082b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001c82:	b008      	add	sp, #32
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	bf00      	nop
 8001c88:	4000e000 	.word	0x4000e000
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58021400 	.word	0x58021400

08001c94 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c94:	280f      	cmp	r0, #15
{
 8001c96:	b510      	push	{r4, lr}
 8001c98:	4604      	mov	r4, r0
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9c:	d902      	bls.n	8001ca4 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001ca0:	b00a      	add	sp, #40	@ 0x28
 8001ca2:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2036      	movs	r0, #54	@ 0x36
 8001caa:	f006 fad3 	bl	8008254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cae:	2036      	movs	r0, #54	@ 0x36
 8001cb0:	f006 fb02 	bl	80082b8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cb6:	4669      	mov	r1, sp
 8001cb8:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001cba:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cbc:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_InitTick+0x88>)
 8001cbe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001cc2:	f042 0210 	orr.w	r2, r2, #16
 8001cc6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd6:	f008 fed1 	bl	800aa7c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cda:	9b07      	ldr	r3, [sp, #28]
 8001cdc:	b9c3      	cbnz	r3, 8001d10 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cde:	f008 fea9 	bl	800aa34 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001ce2:	4c0f      	ldr	r4, [pc, #60]	@ (8001d20 <HAL_InitTick+0x8c>)
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_InitTick+0x90>)
 8001ce6:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ce8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001cec:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_InitTick+0x94>)
 8001cf0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cf4:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001cf6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cf8:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001cfa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001cfc:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d00:	f009 fe5a 	bl	800b9b8 <HAL_TIM_Base_Init>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d1ca      	bne.n	8001c9e <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f009 fc81 	bl	800b610 <HAL_TIM_Base_Start_IT>
 8001d0e:	e7c7      	b.n	8001ca0 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d10:	f008 fe90 	bl	800aa34 <HAL_RCC_GetPCLK1Freq>
 8001d14:	0040      	lsls	r0, r0, #1
 8001d16:	e7e4      	b.n	8001ce2 <HAL_InitTick+0x4e>
 8001d18:	24000078 	.word	0x24000078
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	24000440 	.word	0x24000440
 8001d24:	40001000 	.word	0x40001000
 8001d28:	000f4240 	.word	0x000f4240

08001d2c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d2c:	4770      	bx	lr

08001d2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler>

08001d30 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler>

08001d32 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler>

08001d34 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler>

08001d36 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001d36:	4770      	bx	lr

08001d38 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d38:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d3c:	f006 bdca 	b.w	80088d4 <HAL_GPIO_EXTI_IRQHandler>

08001d40 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d40:	4801      	ldr	r0, [pc, #4]	@ (8001d48 <TIM6_DAC_IRQHandler+0x8>)
 8001d42:	f009 bd1b 	b.w	800b77c <HAL_TIM_IRQHandler>
 8001d46:	bf00      	nop
 8001d48:	24000440 	.word	0x24000440

08001d4c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d4c:	4801      	ldr	r0, [pc, #4]	@ (8001d54 <LTDC_IRQHandler+0x8>)
 8001d4e:	f007 bae9 	b.w	8009324 <HAL_LTDC_IRQHandler>
 8001d52:	bf00      	nop
 8001d54:	240002a8 	.word	0x240002a8

08001d58 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d58:	4801      	ldr	r0, [pc, #4]	@ (8001d60 <DMA2D_IRQHandler+0x8>)
 8001d5a:	f006 bba5 	b.w	80084a8 <HAL_DMA2D_IRQHandler>
 8001d5e:	bf00      	nop
 8001d60:	240003a4 	.word	0x240003a4

08001d64 <TIM23_IRQHandler>:
void TIM23_IRQHandler(void)
{
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001d64:	4801      	ldr	r0, [pc, #4]	@ (8001d6c <TIM23_IRQHandler+0x8>)
 8001d66:	f009 bd09 	b.w	800b77c <HAL_TIM_IRQHandler>
 8001d6a:	bf00      	nop
 8001d6c:	240001a4 	.word	0x240001a4

08001d70 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001d70:	2001      	movs	r0, #1
 8001d72:	4770      	bx	lr

08001d74 <_kill>:

int _kill(int pid, int sig)
{
 8001d74:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d76:	f021 f9a1 	bl	80230bc <__errno>
 8001d7a:	2316      	movs	r3, #22
 8001d7c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d82:	bd08      	pop	{r3, pc}

08001d84 <_exit>:

void _exit (int status)
{
 8001d84:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d86:	f021 f999 	bl	80230bc <__errno>
 8001d8a:	2316      	movs	r3, #22
 8001d8c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001d8e:	e7fe      	b.n	8001d8e <_exit+0xa>

08001d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	460d      	mov	r5, r1
 8001d94:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	460e      	mov	r6, r1
 8001d98:	1b73      	subs	r3, r6, r5
 8001d9a:	429c      	cmp	r4, r3
 8001d9c:	dc01      	bgt.n	8001da2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001da2:	f3af 8000 	nop.w
 8001da6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	e7f5      	b.n	8001d98 <_read+0x8>

08001dac <_close>:
}

int _close(int file)
{
	return -1;
}
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	4770      	bx	lr

08001db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001db6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001db8:	604b      	str	r3, [r1, #4]
}
 8001dba:	4770      	bx	lr

08001dbc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	4770      	bx	lr

08001dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	4770      	bx	lr

08001dc4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <_sbrk+0x30>)
{
 8001dc6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001dc8:	6811      	ldr	r1, [r2, #0]
{
 8001dca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001dcc:	b909      	cbnz	r1, 8001dd2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001dce:	490a      	ldr	r1, [pc, #40]	@ (8001df8 <_sbrk+0x34>)
 8001dd0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	6810      	ldr	r0, [r2, #0]
 8001dd4:	4909      	ldr	r1, [pc, #36]	@ (8001dfc <_sbrk+0x38>)
 8001dd6:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <_sbrk+0x3c>)
 8001dd8:	4403      	add	r3, r0
 8001dda:	1b09      	subs	r1, r1, r4
 8001ddc:	428b      	cmp	r3, r1
 8001dde:	d906      	bls.n	8001dee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001de0:	f021 f96c 	bl	80230bc <__errno>
 8001de4:	230c      	movs	r3, #12
 8001de6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001dec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001dee:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001df0:	e7fc      	b.n	8001dec <_sbrk+0x28>
 8001df2:	bf00      	nop
 8001df4:	2400048c 	.word	0x2400048c
 8001df8:	2402e6c8 	.word	0x2402e6c8
 8001dfc:	24050000 	.word	0x24050000
 8001e00:	00001000 	.word	0x00001000

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e3c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e08:	f006 f96a 	bl	80080e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e0e:	e003      	b.n	8001e18 <LoopCopyDataInit>

08001e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e16:	3104      	adds	r1, #4

08001e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e18:	480a      	ldr	r0, [pc, #40]	@ (8001e44 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e20:	d3f6      	bcc.n	8001e10 <CopyDataInit>
  ldr  r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001e24:	e002      	b.n	8001e2c <LoopFillZerobss>

08001e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e28:	f842 3b04 	str.w	r3, [r2], #4

08001e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e30:	d3f9      	bcc.n	8001e26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f021 f949 	bl	80230c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7fe fe77 	bl	8000b28 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001e40:	080997b8 	.word	0x080997b8
  ldr  r0, =_sdata
 8001e44:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e48:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
 8001e4c:	24000140 	.word	0x24000140
  ldr  r3, = _ebss
 8001e50:	2402e6c4 	.word	0x2402e6c4

08001e54 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC3_IRQHandler>

08001e56 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001e56:	4770      	bx	lr

08001e58 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001e58:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001e5a:	f000 fd95 	bl	8002988 <touchgfx_components_init>
    touchgfx_init();
}
 8001e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001e62:	f000 bd17 	b.w	8002894 <touchgfx_init>

08001e66 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001e66:	f000 bd91 	b.w	800298c <touchgfx_taskEntry>

08001e6a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001e6a:	6840      	ldr	r0, [r0, #4]
    }
 8001e6c:	4770      	bx	lr

08001e6e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001e6e:	6041      	str	r1, [r0, #4]
    }
 8001e70:	4770      	bx	lr
	...

08001e74 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001e74:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001e78:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8001e7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e80:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001e86:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001e88:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	4770      	bx	lr
 8001e9c:	e0001000 	.word	0xe0001000
 8001ea0:	c5acce55 	.word	0xc5acce55

08001ea4 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001ea4:	1a52      	subs	r2, r2, r1
 8001ea6:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001eaa:	fbb2 f0f3 	udiv	r0, r2, r3
 8001eae:	4770      	bx	lr

08001eb0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001eb0:	4b01      	ldr	r3, [pc, #4]	@ (8001eb8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001eb2:	6858      	ldr	r0, [r3, #4]
}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e0001000 	.word	0xe0001000

08001ebc <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001ebc:	4770      	bx	lr

08001ebe <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001ebe:	b510      	push	{r4, lr}
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	210c      	movs	r1, #12
 8001ec4:	f020 fa72 	bl	80223ac <_ZdlPvj>
 8001ec8:	4620      	mov	r0, r4
 8001eca:	bd10      	pop	{r4, pc}

08001ecc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ecc:	6803      	ldr	r3, [r0, #0]
{
 8001ece:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ed0:	691b      	ldr	r3, [r3, #16]
{
 8001ed2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001ed4:	b131      	cbz	r1, 8001ee4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ed6:	4798      	blx	r3
 8001ed8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	4403      	add	r3, r0
 8001ee0:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001ee2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001ee4:	4798      	blx	r3
 8001ee6:	60a0      	str	r0, [r4, #8]
}
 8001ee8:	e7fb      	b.n	8001ee2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001eea <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001eea:	4770      	bx	lr

08001eec <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 8001ef2:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001ef4:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <_ZN20STM32TouchController4initEv+0x24>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <_ZN20STM32TouchController4initEv+0x28>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001f04:	f006 f80a 	bl	8007f1c <BSP_TS_Init>
}
 8001f08:	b005      	add	sp, #20
 8001f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f0e:	bf00      	nop
 8001f10:	2402daa6 	.word	0x2402daa6
 8001f14:	2402daa8 	.word	0x2402daa8

08001f18 <_ZN20STM32TouchControllerD0Ev>:
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	f020 fa45 	bl	80223ac <_ZdlPvj>
 8001f22:	4620      	mov	r0, r4
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001f26:	b530      	push	{r4, r5, lr}
 8001f28:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001f2a:	2000      	movs	r0, #0
{
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001f30:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001f32:	9003      	str	r0, [sp, #12]
 8001f34:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001f38:	f006 f872 	bl	8008020 <BSP_TS_GetState>
 8001f3c:	b140      	cbz	r0, 8001f50 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001f4e:	e7fe      	b.n	8001f4e <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001f50:	9801      	ldr	r0, [sp, #4]
 8001f52:	b120      	cbz	r0, 8001f5e <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001f54:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001f56:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001f58:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001f5a:	9b03      	ldr	r3, [sp, #12]
 8001f5c:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001f5e:	b005      	add	sp, #20
 8001f60:	bd30      	pop	{r4, r5, pc}
	...

08001f64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001f64:	2803      	cmp	r0, #3
 8001f66:	d825      	bhi.n	8001fb4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001f68:	e8df f000 	tbb	[pc, r0]
 8001f6c:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001f70:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	4811      	ldr	r0, [pc, #68]	@ (8001fbc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001f7e:	f006 bc9b 	b.w	80088b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001f84:	2108      	movs	r1, #8
 8001f86:	480e      	ldr	r0, [pc, #56]	@ (8001fc0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	0952      	lsrs	r2, r2, #5
 8001f90:	e7f5      	b.n	8001f7e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001f94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	fab2 f282 	clz	r2, r2
 8001f9e:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001fa0:	4808      	ldr	r0, [pc, #32]	@ (8001fc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 8001fa2:	e7ec      	b.n	8001f7e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001fa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	0952      	lsrs	r2, r2, #5
 8001fb2:	e7f5      	b.n	8001fa0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	24000490 	.word	0x24000490
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58021800 	.word	0x58021800
 8001fc4:	58020400 	.word	0x58020400

08001fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001fc8:	2803      	cmp	r0, #3
 8001fca:	d825      	bhi.n	8002018 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001fcc:	e8df f000 	tbb	[pc, r0]
 8001fd0:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4811      	ldr	r0, [pc, #68]	@ (8002020 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	3a00      	subs	r2, #0
 8001fde:	bf18      	it	ne
 8001fe0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001fe2:	f006 bc69 	b.w	80088b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001fe8:	2108      	movs	r1, #8
 8001fea:	480e      	ldr	r0, [pc, #56]	@ (8002024 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	3a00      	subs	r2, #0
 8001ff0:	bf18      	it	ne
 8001ff2:	2201      	movne	r2, #1
 8001ff4:	e7f5      	b.n	8001fe2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	3a00      	subs	r2, #0
 8002000:	bf18      	it	ne
 8002002:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8002004:	4808      	ldr	r0, [pc, #32]	@ (8002028 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 8002006:	e7ec      	b.n	8001fe2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800200a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	3a00      	subs	r2, #0
 8002012:	bf18      	it	ne
 8002014:	2201      	movne	r2, #1
 8002016:	e7f5      	b.n	8002004 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	24000490 	.word	0x24000490
 8002020:	58020000 	.word	0x58020000
 8002024:	58021800 	.word	0x58021800
 8002028:	58020400 	.word	0x58020400

0800202c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800202c:	2803      	cmp	r0, #3
 800202e:	d811      	bhi.n	8002054 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8002030:	e8df f000 	tbb	[pc, r0]
 8002034:	0d090602 	.word	0x0d090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002038:	2101      	movs	r1, #1
 800203a:	4807      	ldr	r0, [pc, #28]	@ (8002058 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800203c:	f006 bc41 	b.w	80088c2 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002040:	2108      	movs	r1, #8
 8002042:	4806      	ldr	r0, [pc, #24]	@ (800205c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8002044:	e7fa      	b.n	800203c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
 800204c:	e7f6      	b.n	800203c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800204e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002052:	e7fa      	b.n	800204a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	58020000 	.word	0x58020000
 800205c:	58021800 	.word	0x58021800
 8002060:	58020400 	.word	0x58020400

08002064 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8002064:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8002066:	2803      	cmp	r0, #3
 8002068:	d815      	bhi.n	8002096 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 800206a:	e8df f000 	tbb	[pc, r0]
 800206e:	0a02      	.short	0x0a02
 8002070:	110d      	.short	0x110d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002072:	2101      	movs	r1, #1
 8002074:	4809      	ldr	r0, [pc, #36]	@ (800209c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002076:	f006 fc19 	bl	80088ac <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800207a:	1e43      	subs	r3, r0, #1
 800207c:	4258      	negs	r0, r3
 800207e:	4158      	adcs	r0, r3
 8002080:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002082:	2108      	movs	r1, #8
 8002084:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8002086:	e7f6      	b.n	8002076 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002088:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x40>)
 800208e:	e7f2      	b.n	8002076 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8002090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002094:	e7fa      	b.n	800208c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x28>
    switch (id)
 8002096:	2000      	movs	r0, #0
 8002098:	e7ef      	b.n	800207a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 800209a:	bf00      	nop
 800209c:	58020000 	.word	0x58020000
 80020a0:	58021800 	.word	0x58021800
 80020a4:	58020400 	.word	0x58020400

080020a8 <_ZN8touchgfx4GPIO4initEv>:
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4d08      	ldr	r5, [pc, #32]	@ (80020cc <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80020ac:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80020ae:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80020b0:	b2e0      	uxtb	r0, r4
 80020b2:	f7ff ffd7 	bl	8002064 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80020b6:	b118      	cbz	r0, 80020c0 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80020bc:	bf18      	it	ne
 80020be:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80020c0:	3401      	adds	r4, #1
 80020c2:	3504      	adds	r5, #4
 80020c4:	2c05      	cmp	r4, #5
 80020c6:	d1f3      	bne.n	80020b0 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	bf00      	nop
 80020cc:	24000490 	.word	0x24000490

080020d0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80020d0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80020d2:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80020d6:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80020da:	4770      	bx	lr

080020dc <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80020dc:	2000      	movs	r0, #0
 80020de:	4770      	bx	lr

080020e0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80020e0:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80020e2:	3900      	subs	r1, #0
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80020e6:	bf18      	it	ne
 80020e8:	2101      	movne	r1, #1
 80020ea:	7019      	strb	r1, [r3, #0]
    }
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2402daab 	.word	0x2402daab

080020f4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80020f4:	2000      	movs	r0, #0
 80020f6:	4770      	bx	lr

080020f8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80020f8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80020fa:	b10b      	cbz	r3, 8002100 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80020fc:	4608      	mov	r0, r1
 80020fe:	4718      	bx	r3
        }
    }
 8002100:	4770      	bx	lr

08002102 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8002102:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002106:	4770      	bx	lr

08002108 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8002108:	6840      	ldr	r0, [r0, #4]
 800210a:	6803      	ldr	r3, [r0, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4718      	bx	r3

08002110 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002110:	4770      	bx	lr
	...

08002114 <_ZN11TouchGFXHAL10initializeEv>:
uint32_t animationBuffer[(480 * 272 * 3 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}


void TouchGFXHAL::initialize()
{
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8002118:	f000 fd4e 	bl	8002bb8 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setAnimationStorage((void*)animationBuffer);
 800211c:	4907      	ldr	r1, [pc, #28]	@ (800213c <_ZN11TouchGFXHAL10initializeEv+0x28>)
 800211e:	6823      	ldr	r3, [r4, #0]

    instrumentation.init();
 8002120:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
    setAnimationStorage((void*)animationBuffer);
 8002124:	4620      	mov	r0, r4
 8002126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800212a:	4798      	blx	r3
    instrumentation.init();
 800212c:	4628      	mov	r0, r5
 800212e:	f7ff fea1 	bl	8001e74 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8002132:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8002134:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8002136:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	70000000 	.word	0x70000000

08002140 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002140:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8002142:	6803      	ldr	r3, [r0, #0]
{
 8002144:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8002146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214a:	4798      	blx	r3
    enableInterrupts();
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	4620      	mov	r0, r4
 8002150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002152:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8002154:	f000 f92c 	bl	80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	4620      	mov	r0, r4
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002166:	4808      	ldr	r0, [pc, #32]	@ (8002188 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 8002168:	f006 fba6 	bl	80088b8 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800216c:	2201      	movs	r2, #1
 800216e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002172:	4806      	ldr	r0, [pc, #24]	@ (800218c <_ZN11TouchGFXHAL9taskEntryEv+0x4c>)
 8002174:	f006 fba0 	bl	80088b8 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8002178:	f000 f91a 	bl	80023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	4620      	mov	r0, r4
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4798      	blx	r3
    for (;;)
 8002184:	e7f8      	b.n	8002178 <_ZN11TouchGFXHAL9taskEntryEv+0x38>
 8002186:	bf00      	nop
 8002188:	58020c00 	.word	0x58020c00
 800218c:	58021800 	.word	0x58021800

08002190 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002190:	b510      	push	{r4, lr}
 8002192:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002194:	f00c ffca 	bl	800f12c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	4620      	mov	r0, r4
 800219c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 80021a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80021a4:	4718      	bx	r3

080021a6 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80021a6:	f000 bce9 	b.w	8002b7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

080021aa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80021aa:	f000 bced 	b.w	8002b88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

080021b0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80021b2:	f000 fd1f 	bl	8002bf4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80021b6:	4910      	ldr	r1, [pc, #64]	@ (80021f8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80021be:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80021c2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80021c6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80021ca:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80021ce:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80021d2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80021d4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80021d8:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80021da:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 80021de:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80021e0:	f8c1 5274 	str.w	r5, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80021e4:	d2f9      	bcs.n	80021da <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 80021e6:	3b20      	subs	r3, #32
 80021e8:	f113 0f20 	cmn.w	r3, #32
 80021ec:	d1f2      	bne.n	80021d4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 80021ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021f2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80021fc:	f000 bc9a 	b.w	8002b34 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08002200 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002200:	f000 bd34 	b.w	8002c6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08002204 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002204:	f000 bd3c 	b.w	8002c80 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08002208 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002208:	f000 bc9e 	b.w	8002b48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

0800220c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800220c:	f00c b9fa 	b.w	800e604 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08002210 <_ZN11TouchGFXHALD0Ev>:
 8002210:	b510      	push	{r4, lr}
 8002212:	4604      	mov	r4, r0
 8002214:	2188      	movs	r1, #136	@ 0x88
 8002216:	f020 f8c9 	bl	80223ac <_ZdlPvj>
 800221a:	4620      	mov	r0, r4
 800221c:	bd10      	pop	{r4, pc}
	...

08002220 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8002220:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8002226:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002228:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 800222c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800222e:	428c      	cmp	r4, r1
 8002230:	d009      	beq.n	8002246 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8002232:	b93a      	cbnz	r2, 8002244 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002234:	490a      	ldr	r1, [pc, #40]	@ (8002260 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002236:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002238:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800223a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800223c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800223e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002240:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8002242:	701a      	strb	r2, [r3, #0]
        }
    }
 8002244:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002246:	2a00      	cmp	r2, #0
 8002248:	d0fc      	beq.n	8002244 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800224a:	4a06      	ldr	r2, [pc, #24]	@ (8002264 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800224c:	4904      	ldr	r1, [pc, #16]	@ (8002260 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800224e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002250:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002252:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002254:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002256:	2200      	movs	r2, #0
 8002258:	e7f3      	b.n	8002242 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800225a:	bf00      	nop
 800225c:	2402daa4 	.word	0x2402daa4
 8002260:	2402daa2 	.word	0x2402daa2
 8002264:	2402daa0 	.word	0x2402daa0

08002268 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	460d      	mov	r5, r1
 800226c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800226e:	b935      	cbnz	r5, 800227e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8002272:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8002276:	4a09      	ldr	r2, [pc, #36]	@ (800229c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8002278:	4809      	ldr	r0, [pc, #36]	@ (80022a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 800227a:	f020 fc0d 	bl	8022a98 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800227e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002282:	3a00      	subs	r2, #0
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002286:	bf18      	it	ne
 8002288:	2201      	movne	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800228c:	6803      	ldr	r3, [r0, #0]
    }
 800228e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8002292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002296:	4718      	bx	r3
 8002298:	08023d78 	.word	0x08023d78
 800229c:	08023db0 	.word	0x08023db0
 80022a0:	08023dfe 	.word	0x08023dfe
 80022a4:	2402daaa 	.word	0x2402daaa

080022a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80022a8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	428b      	cmp	r3, r1
 80022b0:	d803      	bhi.n	80022ba <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80022b2:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d905      	bls.n	80022c6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80022ba:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80022bc:	219e      	movs	r1, #158	@ 0x9e
 80022be:	4a07      	ldr	r2, [pc, #28]	@ (80022dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80022c0:	4807      	ldr	r0, [pc, #28]	@ (80022e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80022c2:	f020 fbe9 	bl	8022a98 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80022c8:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80022cc:	801a      	strh	r2, [r3, #0]
    }
 80022ce:	bd08      	pop	{r3, pc}
 80022d0:	2402daa0 	.word	0x2402daa0
 80022d4:	2402daa2 	.word	0x2402daa2
 80022d8:	08023e43 	.word	0x08023e43
 80022dc:	08023ea6 	.word	0x08023ea6
 80022e0:	08023dfe 	.word	0x08023dfe
 80022e4:	2402daa6 	.word	0x2402daa6
 80022e8:	2402daa8 	.word	0x2402daa8

080022ec <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80022ec:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 80022ee:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 80022f2:	b118      	cbz	r0, 80022fc <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 80022f4:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 80022f6:	6803      	ldr	r3, [r0, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4718      	bx	r3
    }
 80022fc:	4770      	bx	lr
	...

08002300 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002300:	4601      	mov	r1, r0
 8002302:	b508      	push	{r3, lr}
        return instance;
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <IdleTaskHook+0x14>)
 8002306:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002308:	b101      	cbz	r1, 800230c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800230a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800230c:	f00c ff28 	bl	800f160 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002310:	2001      	movs	r0, #1
 8002312:	bd08      	pop	{r3, pc}
 8002314:	2402daac 	.word	0x2402daac

08002318 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002318:	2101      	movs	r1, #1
 800231a:	2200      	movs	r2, #0
{
 800231c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800231e:	4608      	mov	r0, r1
 8002320:	f009 fd40 	bl	800bda4 <osSemaphoreNew>
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002326:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002328:	b928      	cbnz	r0, 8002336 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800232c:	2128      	movs	r1, #40	@ 0x28
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002330:	480a      	ldr	r0, [pc, #40]	@ (800235c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002332:	f020 fbb1 	bl	8022a98 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002336:	2200      	movs	r2, #0
 8002338:	2104      	movs	r1, #4
 800233a:	2001      	movs	r0, #1
 800233c:	f009 fdda 	bl	800bef4 <osMessageQueueNew>
 8002340:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002342:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002344:	b918      	cbnz	r0, 800234e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002348:	212c      	movs	r1, #44	@ 0x2c
 800234a:	4a03      	ldr	r2, [pc, #12]	@ (8002358 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800234c:	e7f0      	b.n	8002330 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 800234e:	bd08      	pop	{r3, pc}
 8002350:	240004a4 	.word	0x240004a4
 8002354:	08023fc4 	.word	0x08023fc4
 8002358:	0802400d 	.word	0x0802400d
 800235c:	0802403c 	.word	0x0802403c
 8002360:	240004a0 	.word	0x240004a0
 8002364:	08024098 	.word	0x08024098

08002368 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002368:	4b02      	ldr	r3, [pc, #8]	@ (8002374 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 800236a:	f04f 31ff 	mov.w	r1, #4294967295
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	f009 bd62 	b.w	800be38 <osSemaphoreAcquire>
 8002374:	240004a4 	.word	0x240004a4

08002378 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002378:	4b01      	ldr	r3, [pc, #4]	@ (8002380 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	f009 bd88 	b.w	800be90 <osSemaphoreRelease>
 8002380:	240004a4 	.word	0x240004a4

08002384 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002384:	4b02      	ldr	r3, [pc, #8]	@ (8002390 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002386:	2100      	movs	r1, #0
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	f009 bd55 	b.w	800be38 <osSemaphoreAcquire>
 800238e:	bf00      	nop
 8002390:	240004a4 	.word	0x240004a4

08002394 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002394:	f7ff bff0 	b.w	8002378 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002398 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002398:	2300      	movs	r3, #0
 800239a:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 800239c:	4903      	ldr	r1, [pc, #12]	@ (80023ac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800239e:	461a      	mov	r2, r3
 80023a0:	6800      	ldr	r0, [r0, #0]
 80023a2:	f009 bde2 	b.w	800bf6a <osMessageQueuePut>
 80023a6:	bf00      	nop
 80023a8:	240004a0 	.word	0x240004a0
 80023ac:	24000024 	.word	0x24000024

080023b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80023b0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80023b2:	2300      	movs	r3, #0
 80023b4:	4c07      	ldr	r4, [pc, #28]	@ (80023d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80023b6:	a901      	add	r1, sp, #4
 80023b8:	461a      	mov	r2, r3
 80023ba:	6820      	ldr	r0, [r4, #0]
 80023bc:	f009 fe06 	bl	800bfcc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	2200      	movs	r2, #0
 80023c6:	a901      	add	r1, sp, #4
 80023c8:	6820      	ldr	r0, [r4, #0]
 80023ca:	f009 fdff 	bl	800bfcc <osMessageQueueGet>
}
 80023ce:	b002      	add	sp, #8
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	bf00      	nop
 80023d4:	240004a0 	.word	0x240004a0

080023d8 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023dc:	4718      	bx	r3

080023de <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80023de:	2001      	movs	r0, #1
 80023e0:	4770      	bx	lr

080023e2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 80023e2:	6803      	ldr	r3, [r0, #0]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	4718      	bx	r3

080023e8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80023e8:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 80023ec:	4770      	bx	lr
	...

080023f0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023f6:	6003      	str	r3, [r0, #0]
 80023f8:	4b04      	ldr	r3, [pc, #16]	@ (800240c <_ZN8STM32DMAD1Ev+0x1c>)
 80023fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80023fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002402:	f3bf 8f6f 	isb	sy
}
 8002406:	4770      	bx	lr
 8002408:	08024244 	.word	0x08024244
 800240c:	e000e100 	.word	0xe000e100

08002410 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002410:	b510      	push	{r4, lr}
 8002412:	4604      	mov	r4, r0
}
 8002414:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8002418:	f7ff ffea 	bl	80023f0 <_ZN8STM32DMAD1Ev>
 800241c:	4620      	mov	r0, r4
 800241e:	f01f ffc5 	bl	80223ac <_ZdlPvj>
 8002422:	4620      	mov	r0, r4
 8002424:	bd10      	pop	{r4, pc}
	...

08002428 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <_ZN8STM32DMA10initializeEv+0x40>)
{
 800242a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800242c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002430:	f042 0210 	orr.w	r2, r2, #16
 8002434:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002438:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800243c:	f002 0210 	and.w	r2, r2, #16
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002444:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002446:	f042 0210 	orr.w	r2, r2, #16
 800244a:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800244c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <_ZN8STM32DMA10initializeEv+0x44>)
 8002456:	4a06      	ldr	r2, [pc, #24]	@ (8002470 <_ZN8STM32DMA10initializeEv+0x48>)
 8002458:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <_ZN8STM32DMA10initializeEv+0x4c>)
 800245c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002460:	609a      	str	r2, [r3, #8]
}
 8002462:	b002      	add	sp, #8
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	58024400 	.word	0x58024400
 800246c:	240003a4 	.word	0x240003a4
 8002470:	080026bd 	.word	0x080026bd
 8002474:	e000e100 	.word	0xe000e100

08002478 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002478:	b508      	push	{r3, lr}
    switch (format)
 800247a:	280a      	cmp	r0, #10
 800247c:	d809      	bhi.n	8002492 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 800247e:	e8df f000 	tbb	[pc, r0]
 8002482:	1006      	.short	0x1006
 8002484:	0808080e 	.word	0x0808080e
 8002488:	10101008 	.word	0x10101008
 800248c:	10          	.byte	0x10
 800248d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800248e:	2002      	movs	r0, #2
}
 8002490:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002492:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002494:	2186      	movs	r1, #134	@ 0x86
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002498:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800249a:	f020 fafd 	bl	8022a98 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800249e:	2000      	movs	r0, #0
 80024a0:	e7f6      	b.n	8002490 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80024a2:	2001      	movs	r0, #1
    return dma2dColorMode;
 80024a4:	e7f4      	b.n	8002490 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80024a6:	bf00      	nop
 80024a8:	080240da 	.word	0x080240da
 80024ac:	080240f5 	.word	0x080240f5
 80024b0:	08024140 	.word	0x08024140

080024b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024b8:	7f88      	ldrb	r0, [r1, #30]
 80024ba:	f7ff ffdd 	bl	8002478 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024c0:	8aa5      	ldrh	r5, [r4, #20]
 80024c2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024c4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024c6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024ca:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024ce:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024d0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024d2:	1b52      	subs	r2, r2, r5
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80024d6:	6825      	ldr	r5, [r4, #0]
 80024d8:	2d08      	cmp	r5, #8
 80024da:	d10e      	bne.n	80024fa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024dc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024de:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024e0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80024e4:	7f20      	ldrb	r0, [r4, #28]
 80024e6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80024ea:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80024ec:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024ee:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80024f0:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024f2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024f4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024f6:	601a      	str	r2, [r3, #0]
    }
}
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80024fa:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80024fc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002504:	4a03      	ldr	r2, [pc, #12]	@ (8002514 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002506:	e7f6      	b.n	80024f6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002508:	52001000 	.word	0x52001000
 800250c:	00010009 	.word	0x00010009
 8002510:	00020201 	.word	0x00020201
 8002514:	00030201 	.word	0x00030201

08002518 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002518:	b508      	push	{r3, lr}
    switch (format)
 800251a:	280b      	cmp	r0, #11
 800251c:	d80b      	bhi.n	8002536 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800251e:	e8df f000 	tbb	[pc, r0]
 8002522:	1206      	.short	0x1206
 8002524:	0a0a0a10 	.word	0x0a0a0a10
 8002528:	0808080a 	.word	0x0808080a
 800252c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800252e:	2002      	movs	r0, #2
}
 8002530:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002532:	2005      	movs	r0, #5
        break;
 8002534:	e7fc      	b.n	8002530 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002536:	4b05      	ldr	r3, [pc, #20]	@ (800254c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002538:	2165      	movs	r1, #101	@ 0x65
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800253c:	4805      	ldr	r0, [pc, #20]	@ (8002554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800253e:	f020 faab 	bl	8022a98 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002542:	2000      	movs	r0, #0
 8002544:	e7f4      	b.n	8002530 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002546:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002548:	e7f2      	b.n	8002530 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800254a:	bf00      	nop
 800254c:	080240da 	.word	0x080240da
 8002550:	0802419a 	.word	0x0802419a
 8002554:	08024140 	.word	0x08024140

08002558 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800255c:	7f4f      	ldrb	r7, [r1, #29]
{
 800255e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002560:	4638      	mov	r0, r7
 8002562:	f7ff ffd9 	bl	8002518 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002566:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800256a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800256c:	4628      	mov	r0, r5
 800256e:	f7ff ffd3 	bl	8002518 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002572:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002574:	4628      	mov	r0, r5
 8002576:	f7ff ff7f 	bl	8002478 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800257a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 800257e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002582:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002586:	4b45      	ldr	r3, [pc, #276]	@ (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002588:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800258a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800258c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800258e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002590:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002592:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002596:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800259c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80025a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025a6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80025a8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80025aa:	f8d9 4000 	ldr.w	r4, [r9]
 80025ae:	f899 201c 	ldrb.w	r2, [r9, #28]
 80025b2:	2c80      	cmp	r4, #128	@ 0x80
 80025b4:	d022      	beq.n	80025fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80025b6:	d80f      	bhi.n	80025d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80025b8:	2c20      	cmp	r4, #32
 80025ba:	d066      	beq.n	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80025bc:	2c40      	cmp	r4, #64	@ 0x40
 80025be:	d064      	beq.n	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80025c0:	2c04      	cmp	r4, #4
 80025c2:	d05c      	beq.n	800267e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025c4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80025c8:	4b34      	ldr	r3, [pc, #208]	@ (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80025ca:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025cc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80025d0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80025d2:	d060      	beq.n	8002696 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80025d4:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80025d6:	e03f      	b.n	8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80025d8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80025dc:	d004      	beq.n	80025e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80025de:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80025e2:	d1ef      	bne.n	80025c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025e4:	482f      	ldr	r0, [pc, #188]	@ (80026a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80025e6:	e000      	b.n	80025ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025e8:	482f      	ldr	r0, [pc, #188]	@ (80026a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025ea:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 80025ee:	61da      	str	r2, [r3, #28]
 80025f0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80025f4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025f6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025f8:	6159      	str	r1, [r3, #20]
 80025fa:	e02c      	b.n	8002656 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025fc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002600:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002604:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002608:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800260a:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800260c:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800260e:	1d21      	adds	r1, r4, #4
 8002610:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002612:	7821      	ldrb	r1, [r4, #0]
 8002614:	b141      	cbz	r1, 8002628 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002616:	2901      	cmp	r1, #1
 8002618:	d021      	beq.n	800265e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800261c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002620:	4a23      	ldr	r2, [pc, #140]	@ (80026b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002622:	4824      	ldr	r0, [pc, #144]	@ (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002624:	f020 fa38 	bl	8022a98 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	8861      	ldrh	r1, [r4, #2]
 800262c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002630:	3901      	subs	r1, #1
 8002632:	f022 0210 	bic.w	r2, r2, #16
 8002636:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800263a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800263c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800263e:	4b17      	ldr	r3, [pc, #92]	@ (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002640:	69d9      	ldr	r1, [r3, #28]
 8002642:	f041 0120 	orr.w	r1, r1, #32
 8002646:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002648:	69d9      	ldr	r1, [r3, #28]
 800264a:	0689      	lsls	r1, r1, #26
 800264c:	d4fc      	bmi.n	8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800264e:	2110      	movs	r1, #16
 8002650:	6099      	str	r1, [r3, #8]
            if (blend)
 8002652:	2a00      	cmp	r2, #0
 8002654:	d0be      	beq.n	80025d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002656:	4a18      	ldr	r2, [pc, #96]	@ (80026b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002658:	601a      	str	r2, [r3, #0]
}
 800265a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800265e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002660:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002662:	8860      	ldrh	r0, [r4, #2]
 8002664:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002668:	bf18      	it	ne
 800266a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800266c:	3801      	subs	r0, #1
 800266e:	f021 0110 	bic.w	r1, r1, #16
 8002672:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002676:	f041 0110 	orr.w	r1, r1, #16
 800267a:	61d9      	str	r1, [r3, #28]
                break;
 800267c:	e7df      	b.n	800263e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800267e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002682:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002686:	61da      	str	r2, [r3, #28]
 8002688:	e7b5      	b.n	80025f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 800268a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800268e:	4b03      	ldr	r3, [pc, #12]	@ (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002690:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002694:	e7f7      	b.n	8002686 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002696:	f240 2201 	movw	r2, #513	@ 0x201
 800269a:	e7dd      	b.n	8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 800269c:	52001000 	.word	0x52001000
 80026a0:	00010201 	.word	0x00010201
 80026a4:	00020009 	.word	0x00020009
 80026a8:	0002000a 	.word	0x0002000a
 80026ac:	080241e4 	.word	0x080241e4
 80026b0:	080241fe 	.word	0x080241fe
 80026b4:	08024140 	.word	0x08024140
 80026b8:	00020201 	.word	0x00020201

080026bc <DMA2D_XferCpltCallback>:
 80026bc:	4b02      	ldr	r3, [pc, #8]	@ (80026c8 <DMA2D_XferCpltCallback+0xc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80026c2:	6803      	ldr	r3, [r0, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4718      	bx	r3
 80026c8:	2402daac 	.word	0x2402daac

080026cc <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <_ZN8STM32DMAC1Ev+0x30>)
 80026d2:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80026d4:	2600      	movs	r6, #0
 80026d6:	4625      	mov	r5, r4
 80026d8:	2260      	movs	r2, #96	@ 0x60
 80026da:	6060      	str	r0, [r4, #4]
 80026dc:	7226      	strb	r6, [r4, #8]
 80026de:	7266      	strb	r6, [r4, #9]
 80026e0:	f845 3b20 	str.w	r3, [r5], #32
 80026e4:	4629      	mov	r1, r5
 80026e6:	f00c fe91 	bl	800f40c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80026ea:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80026ee:	60ee      	str	r6, [r5, #12]
 80026f0:	3524      	adds	r5, #36	@ 0x24
 80026f2:	429d      	cmp	r5, r3
 80026f4:	d1fb      	bne.n	80026ee <_ZN8STM32DMAC1Ev+0x22>
}
 80026f6:	4620      	mov	r0, r4
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	bf00      	nop
 80026fc:	08024244 	.word	0x08024244

08002700 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	07d2      	lsls	r2, r2, #31
 8002706:	d4fc      	bmi.n	8002702 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002708:	2223      	movs	r2, #35	@ 0x23
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	52001000 	.word	0x52001000

08002714 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002714:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002716:	4c10      	ldr	r4, [pc, #64]	@ (8002758 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002718:	6825      	ldr	r5, [r4, #0]
 800271a:	07ed      	lsls	r5, r5, #31
 800271c:	d4fc      	bmi.n	8002718 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800271e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002720:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002722:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002724:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002726:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800272a:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800272e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002730:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002732:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002734:	d00c      	beq.n	8002750 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002736:	4909      	ldr	r1, [pc, #36]	@ (800275c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002738:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800273c:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800273e:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002742:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002746:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002748:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800274a:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800274c:	6023      	str	r3, [r4, #0]
    }
}
 800274e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002750:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002754:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002756:	e7f9      	b.n	800274c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002758:	52001000 	.word	0x52001000
 800275c:	00010009 	.word	0x00010009
 8002760:	00020001 	.word	0x00020001
 8002764:	00030001 	.word	0x00030001

08002768 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002768:	2001      	movs	r0, #1
 800276a:	4770      	bx	lr

0800276c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800276c:	200c      	movs	r0, #12
 800276e:	4770      	bx	lr

08002770 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002770:	230c      	movs	r3, #12
 8002772:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002776:	3008      	adds	r0, #8
 8002778:	4770      	bx	lr

0800277a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800277a:	230c      	movs	r3, #12
 800277c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002780:	3008      	adds	r0, #8
 8002782:	4770      	bx	lr

08002784 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002784:	2001      	movs	r0, #1
 8002786:	4770      	bx	lr

08002788 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002788:	f242 1068 	movw	r0, #8552	@ 0x2168
 800278c:	4770      	bx	lr

0800278e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800278e:	f242 1368 	movw	r3, #8552	@ 0x2168
 8002792:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002796:	3008      	adds	r0, #8
 8002798:	4770      	bx	lr

0800279a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800279a:	f242 1368 	movw	r3, #8552	@ 0x2168
 800279e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80027a2:	3008      	adds	r0, #8
 80027a4:	4770      	bx	lr

080027a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80027a6:	2001      	movs	r0, #1
 80027a8:	4770      	bx	lr

080027aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80027aa:	2010      	movs	r0, #16
 80027ac:	4770      	bx	lr

080027ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80027ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80027b2:	3008      	adds	r0, #8
 80027b4:	4770      	bx	lr

080027b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80027b6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80027ba:	3008      	adds	r0, #8
 80027bc:	4770      	bx	lr

080027be <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80027be:	4608      	mov	r0, r1
 80027c0:	f000 bcd8 	b.w	8003174 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080027c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80027c6:	b510      	push	{r4, lr}
 80027c8:	4604      	mov	r4, r0
 80027ca:	6003      	str	r3, [r0, #0]
 80027cc:	f00b fc72 	bl	800e0b4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80027d0:	4620      	mov	r0, r4
 80027d2:	bd10      	pop	{r4, pc}
 80027d4:	080242fc 	.word	0x080242fc

080027d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	4604      	mov	r4, r0
 80027dc:	f7ff fff2 	bl	80027c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80027e0:	2114      	movs	r1, #20
 80027e2:	4620      	mov	r0, r4
 80027e4:	f01f fde2 	bl	80223ac <_ZdlPvj>
 80027e8:	4620      	mov	r0, r4
 80027ea:	bd10      	pop	{r4, pc}

080027ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80027ee:	b510      	push	{r4, lr}
 80027f0:	4604      	mov	r4, r0
 80027f2:	6003      	str	r3, [r0, #0]
 80027f4:	f00b fc5e 	bl	800e0b4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80027f8:	4620      	mov	r0, r4
 80027fa:	bd10      	pop	{r4, pc}
 80027fc:	080242c8 	.word	0x080242c8

08002800 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002800:	b510      	push	{r4, lr}
 8002802:	4604      	mov	r4, r0
 8002804:	f7ff fff2 	bl	80027ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002808:	f242 1170 	movw	r1, #8560	@ 0x2170
 800280c:	4620      	mov	r0, r4
 800280e:	f01f fdcd 	bl	80223ac <_ZdlPvj>
 8002812:	4620      	mov	r0, r4
 8002814:	bd10      	pop	{r4, pc}
	...

08002818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002818:	4b03      	ldr	r3, [pc, #12]	@ (8002828 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800281a:	b510      	push	{r4, lr}
 800281c:	4604      	mov	r4, r0
 800281e:	6003      	str	r3, [r0, #0]
 8002820:	f00b fc48 	bl	800e0b4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002824:	4620      	mov	r0, r4
 8002826:	bd10      	pop	{r4, pc}
 8002828:	08024294 	.word	0x08024294

0800282c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	f7ff fff2 	bl	8002818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002834:	2118      	movs	r1, #24
 8002836:	4620      	mov	r0, r4
 8002838:	f01f fdb8 	bl	80223ac <_ZdlPvj>
 800283c:	4620      	mov	r0, r4
 800283e:	bd10      	pop	{r4, pc}

08002840 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <_ZN12FrontendHeapD1Ev+0x28>)
 8002842:	b510      	push	{r4, lr}
 8002844:	4604      	mov	r4, r0
 8002846:	6003      	str	r3, [r0, #0]
 8002848:	f500 5006 	add.w	r0, r0, #8576	@ 0x2180
 800284c:	301c      	adds	r0, #28
 800284e:	f7ff ffb9 	bl	80027c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002852:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002856:	f7ff ffc9 	bl	80027ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800285a:	f104 0014 	add.w	r0, r4, #20
 800285e:	f7ff ffdb 	bl	8002818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002862:	4620      	mov	r0, r4
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	08024330 	.word	0x08024330

0800286c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800286c:	b508      	push	{r3, lr}
 800286e:	4802      	ldr	r0, [pc, #8]	@ (8002878 <__tcf_0+0xc>)
 8002870:	f7ff ffe6 	bl	8002840 <_ZN12FrontendHeapD1Ev>
 8002874:	bd08      	pop	{r3, pc}
 8002876:	bf00      	nop
 8002878:	24001360 	.word	0x24001360

0800287c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800287c:	b510      	push	{r4, lr}
 800287e:	4604      	mov	r4, r0
 8002880:	f7ff ffde 	bl	8002840 <_ZN12FrontendHeapD1Ev>
 8002884:	f242 71dc 	movw	r1, #10204	@ 0x27dc
 8002888:	4620      	mov	r0, r4
 800288a:	f01f fd8f 	bl	80223ac <_ZdlPvj>
 800288e:	4620      	mov	r0, r4
 8002890:	bd10      	pop	{r4, pc}
	...

08002894 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002898:	f000 fae6 	bl	8002e68 <_ZN14BitmapDatabase11getInstanceEv>
 800289c:	2400      	movs	r4, #0
 800289e:	4605      	mov	r5, r0
 80028a0:	f000 fae6 	bl	8002e70 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80028a4:	4623      	mov	r3, r4
 80028a6:	4601      	mov	r1, r0
 80028a8:	4622      	mov	r2, r4
 80028aa:	4628      	mov	r0, r5
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	f015 fda1 	bl	80183f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <touchgfx_init+0xbc>)
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80028b6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80028b8:	4d27      	ldr	r5, [pc, #156]	@ (8002958 <touchgfx_init+0xc4>)
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f003 ffa4 	bl	8006808 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80028c0:	4b26      	ldr	r3, [pc, #152]	@ (800295c <touchgfx_init+0xc8>)
 80028c2:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80028c4:	4827      	ldr	r0, [pc, #156]	@ (8002964 <touchgfx_init+0xd0>)
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	f015 fc4c 	bl	8018164 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	f3bf 8f5b 	dmb	ish
 80028d2:	07db      	lsls	r3, r3, #31
 80028d4:	d436      	bmi.n	8002944 <touchgfx_init+0xb0>
 80028d6:	4628      	mov	r0, r5
 80028d8:	f01f fd6a 	bl	80223b0 <__cxa_guard_acquire>
 80028dc:	b390      	cbz	r0, 8002944 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80028de:	4c22      	ldr	r4, [pc, #136]	@ (8002968 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80028e2:	f504 561a 	add.w	r6, r4, #9856	@ 0x2680
        : presenterStorage(pres),
 80028e6:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 80028ea:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 80028ee:	4f20      	ldr	r7, [pc, #128]	@ (8002970 <touchgfx_init+0xdc>)
 80028f0:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 80028f2:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80028f4:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80028f8:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 80028fa:	6126      	str	r6, [r4, #16]
 80028fc:	f00b fbdc 	bl	800e0b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002900:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <touchgfx_init+0xe0>)
 8002902:	4640      	mov	r0, r8
 8002904:	6163      	str	r3, [r4, #20]
 8002906:	f00b fbd7 	bl	800e0b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800290a:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <touchgfx_init+0xe4>)
 800290c:	4638      	mov	r0, r7
 800290e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002910:	f00b fbd2 	bl	800e0b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002914:	f504 5300 	add.w	r3, r4, #8192	@ 0x2000
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <touchgfx_init+0xe8>)
 800291a:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 800291e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 8002922:	f003 fff9 	bl	8006918 <_ZN5ModelC1Ev>
 8002926:	4622      	mov	r2, r4
 8002928:	f5a6 619a 	sub.w	r1, r6, #1232	@ 0x4d0
 800292c:	4630      	mov	r0, r6
 800292e:	f003 ffe9 	bl	8006904 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002932:	4630      	mov	r0, r6
 8002934:	f000 fc1e 	bl	8003174 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002938:	4811      	ldr	r0, [pc, #68]	@ (8002980 <touchgfx_init+0xec>)
 800293a:	f020 f8cb 	bl	8022ad4 <atexit>
 800293e:	4628      	mov	r0, r5
 8002940:	f01f fd42 	bl	80223c8 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002944:	480f      	ldr	r0, [pc, #60]	@ (8002984 <touchgfx_init+0xf0>)
}
 8002946:	b002      	add	sp, #8
 8002948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800294c:	f7ff bbe2 	b.w	8002114 <_ZN11TouchGFXHAL10initializeEv>
 8002950:	2402db10 	.word	0x2402db10
 8002954:	24000530 	.word	0x24000530
 8002958:	2400135c 	.word	0x2400135c
 800295c:	24000550 	.word	0x24000550
 8002960:	24000534 	.word	0x24000534
 8002964:	24000028 	.word	0x24000028
 8002968:	24001360 	.word	0x24001360
 800296c:	08024330 	.word	0x08024330
 8002970:	240034fc 	.word	0x240034fc
 8002974:	08024294 	.word	0x08024294
 8002978:	080242c8 	.word	0x080242c8
 800297c:	080242fc 	.word	0x080242fc
 8002980:	0800286d 	.word	0x0800286d
 8002984:	240004a8 	.word	0x240004a8

08002988 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002988:	4770      	bx	lr
	...

0800298c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800298c:	4801      	ldr	r0, [pc, #4]	@ (8002994 <touchgfx_taskEntry+0x8>)
 800298e:	f7ff bbd7 	b.w	8002140 <_ZN11TouchGFXHAL9taskEntryEv>
 8002992:	bf00      	nop
 8002994:	240004a8 	.word	0x240004a8

08002998 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002998:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800299a:	4e27      	ldr	r6, [pc, #156]	@ (8002a38 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 800299e:	4c28      	ldr	r4, [pc, #160]	@ (8002a40 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 80029a0:	4630      	mov	r0, r6
static LCD24bpp display;
 80029a2:	4d28      	ldr	r5, [pc, #160]	@ (8002a44 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 80029a4:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 80029a6:	f7ff fe91 	bl	80026cc <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80029aa:	4628      	mov	r0, r5
 80029ac:	f018 fdd0 	bl	801b550 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80029b0:	4825      	ldr	r0, [pc, #148]	@ (8002a48 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 80029b2:	f012 ff73 	bl	801589c <_ZN8touchgfx22VectorFontRendererImplC1Ev>
        : dma(dmaInterface),
 80029b6:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          mcuInstrumentation(0),
 80029b8:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80029ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80029be:	4824      	ldr	r0, [pc, #144]	@ (8002a50 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80029c0:	861a      	strh	r2, [r3, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80029c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          lastY(0),
 80029c6:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 80029c8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          touchController(touchCtrl),
 80029cc:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 80029ce:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 80029d2:	4920      	ldr	r1, [pc, #128]	@ (8002a54 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          vSyncCompensationEnabled(false),
 80029d4:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
        instance = this;
 80029d8:	491f      	ldr	r1, [pc, #124]	@ (8002a58 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80029da:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80029dc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80029e0:	8001      	strh	r1, [r0, #0]
 80029e2:	481e      	ldr	r0, [pc, #120]	@ (8002a5c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 80029e4:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80029e6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80029ea:	481d      	ldr	r0, [pc, #116]	@ (8002a60 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 80029ec:	8001      	strh	r1, [r0, #0]
 80029ee:	481d      	ldr	r0, [pc, #116]	@ (8002a64 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 80029f0:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80029f2:	491d      	ldr	r1, [pc, #116]	@ (8002a68 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
          buttonController(0),
 80029f4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80029f8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80029fc:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002a00:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8002a04:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8002a08:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002a0c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8002a10:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lcdRef(display),
 8002a14:	e9c3 6501 	strd	r6, r5, [r3, #4]
        DISPLAY_ROTATION = rotate0;
 8002a18:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002a1a:	4914      	ldr	r1, [pc, #80]	@ (8002a6c <_GLOBAL__sub_I_touchgfx_init+0xd4>)
        : cc_consumed(0),
 8002a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002a24:	6019      	str	r1, [r3, #0]
          cc_begin(0),
 8002a26:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002a28:	4911      	ldr	r1, [pc, #68]	@ (8002a70 <_GLOBAL__sub_I_touchgfx_init+0xd8>)
          cc_in(0)
 8002a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002a2e:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <_GLOBAL__sub_I_touchgfx_init+0xdc>)
 8002a30:	6799      	str	r1, [r3, #120]	@ 0x78
 8002a32:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
 8002a36:	bf00      	nop
 8002a38:	240005b8 	.word	0x240005b8
 8002a3c:	08023d68 	.word	0x08023d68
 8002a40:	24001358 	.word	0x24001358
 8002a44:	24000550 	.word	0x24000550
 8002a48:	24000534 	.word	0x24000534
 8002a4c:	240004a8 	.word	0x240004a8
 8002a50:	2402daa0 	.word	0x2402daa0
 8002a54:	01000001 	.word	0x01000001
 8002a58:	2402daac 	.word	0x2402daac
 8002a5c:	2402daa6 	.word	0x2402daa6
 8002a60:	2402daa2 	.word	0x2402daa2
 8002a64:	2402daa8 	.word	0x2402daa8
 8002a68:	2402daa4 	.word	0x2402daa4
 8002a6c:	08023ef4 	.word	0x08023ef4
 8002a70:	01010000 	.word	0x01010000
 8002a74:	08023d40 	.word	0x08023d40

08002a78 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002a78:	4801      	ldr	r0, [pc, #4]	@ (8002a80 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002a7a:	f7ff bcb9 	b.w	80023f0 <_ZN8STM32DMAD1Ev>
 8002a7e:	bf00      	nop
 8002a80:	240005b8 	.word	0x240005b8

08002a84 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002a84:	2000      	movs	r0, #0
 8002a86:	4770      	bx	lr

08002a88 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002a88:	8081      	strh	r1, [r0, #4]
    }
 8002a8a:	4770      	bx	lr

08002a8c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002a8c:	80c1      	strh	r1, [r0, #6]
    }
 8002a8e:	4770      	bx	lr

08002a90 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002a90:	8101      	strh	r1, [r0, #8]
    }
 8002a92:	4770      	bx	lr

08002a94 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002a94:	8141      	strh	r1, [r0, #10]
    }
 8002a96:	4770      	bx	lr

08002a98 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002a98:	4770      	bx	lr

08002a9a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002a9a:	4770      	bx	lr

08002a9c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002a9c:	4770      	bx	lr

08002a9e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002aa2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002aa4:	88c4      	ldrh	r4, [r0, #6]
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	1b12      	subs	r2, r2, r4
 8002aaa:	8884      	ldrh	r4, [r0, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	1b09      	subs	r1, r1, r4
 8002ab0:	b212      	sxth	r2, r2
    }
 8002ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002ab6:	b209      	sxth	r1, r1
 8002ab8:	4718      	bx	r3

08002aba <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002aba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002abe:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002aca:	6010      	str	r0, [r2, #0]
    }
 8002acc:	4770      	bx	lr

08002ace <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002ace:	2000      	movs	r0, #0
 8002ad0:	4770      	bx	lr

08002ad2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002ad2:	888b      	ldrh	r3, [r1, #4]
 8002ad4:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	4770      	bx	lr

08002ada <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002ada:	4770      	bx	lr

08002adc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002adc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8002ae0:	4770      	bx	lr

08002ae2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002ae2:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002ae8:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002aea:	b510      	push	{r4, lr}
        return rect.width;
 8002aec:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002af0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002af4:	8002      	strh	r2, [r0, #0]
 8002af6:	8042      	strh	r2, [r0, #2]
 8002af8:	8084      	strh	r4, [r0, #4]
 8002afa:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002afc:	bd10      	pop	{r4, pc}

08002afe <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002afe:	2200      	movs	r2, #0
 8002b00:	8002      	strh	r2, [r0, #0]
 8002b02:	8042      	strh	r2, [r0, #2]
 8002b04:	8082      	strh	r2, [r0, #4]
 8002b06:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002b08:	4770      	bx	lr

08002b0a <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8002b0a:	7701      	strb	r1, [r0, #28]
    }
 8002b0c:	4770      	bx	lr

08002b0e <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8002b0e:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8002b12:	4770      	bx	lr

08002b14 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8002b14:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8002b18:	4770      	bx	lr

08002b1a <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 8002b1a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8002b1e:	4770      	bx	lr

08002b20 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8002b20:	2001      	movs	r0, #1
 8002b22:	4770      	bx	lr

08002b24 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8002b24:	3098      	adds	r0, #152	@ 0x98
 8002b26:	4770      	bx	lr

08002b28 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8002b28:	308c      	adds	r0, #140	@ 0x8c
 8002b2a:	4770      	bx	lr

08002b2c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8002b2c:	3084      	adds	r0, #132	@ 0x84
 8002b2e:	4770      	bx	lr

08002b30 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8002b30:	4770      	bx	lr
	...

08002b34 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002b36:	2290      	movs	r2, #144	@ 0x90
 8002b38:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8002b3c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002b48:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002b4a:	490a      	ldr	r1, [pc, #40]	@ (8002b74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002b4c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002b4e:	480a      	ldr	r0, [pc, #40]	@ (8002b78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002b5a:	6911      	ldr	r1, [r2, #16]
 8002b5c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002b60:	3901      	subs	r1, #1
 8002b62:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002b64:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002b66:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002b6e:	4770      	bx	lr
 8002b70:	50001000 	.word	0x50001000
 8002b74:	24003b3e 	.word	0x24003b3e
 8002b78:	24003b3c 	.word	0x24003b3c

08002b7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002b7c:	4b01      	ldr	r3, [pc, #4]	@ (8002b84 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002b7e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8002b82:	4770      	bx	lr
 8002b84:	50001000 	.word	0x50001000

08002b88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002b88:	4b02      	ldr	r3, [pc, #8]	@ (8002b94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002b8a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002b8c:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002b92:	4770      	bx	lr
 8002b94:	50001000 	.word	0x50001000

08002b98 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002b98:	4770      	bx	lr

08002b9a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8002b9a:	4770      	bx	lr

08002b9c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	212c      	movs	r1, #44	@ 0x2c
 8002ba2:	f01f fc03 	bl	80223ac <_ZdlPvj>
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	bd10      	pop	{r4, pc}

08002baa <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002baa:	b510      	push	{r4, lr}
 8002bac:	4604      	mov	r4, r0
 8002bae:	21bc      	movs	r1, #188	@ 0xbc
 8002bb0:	f01f fbfc 	bl	80223ac <_ZdlPvj>
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	bd10      	pop	{r4, pc}

08002bb8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4604      	mov	r4, r0
    HAL::initialize();
 8002bbc:	f00b fd77 	bl	800e6ae <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8002bc4:	f011 fd3c 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>
 8002bc8:	4601      	mov	r1, r0
 8002bca:	4620      	mov	r0, r4
 8002bcc:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8002bd4:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8002bd8:	2300      	movs	r3, #0
 8002bda:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002bdc:	46ac      	mov	ip, r5
}
 8002bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002be2:	4760      	bx	ip
 8002be4:	700bf400 	.word	0x700bf400
 8002be8:	7005fa00 	.word	0x7005fa00

08002bec <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002bec:	f00b bd46 	b.w	800e67c <_ZN8touchgfx3HAL10beginFrameEv>

08002bf0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002bf0:	f00b bd50 	b.w	800e694 <_ZN8touchgfx3HAL8endFrameEv>

08002bf4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8002bf4:	f00b bd0c 	b.w	800e610 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002bf8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002bf8:	f00b be6d 	b.w	800e8d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002bfc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002bfc:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002c00:	b112      	cbz	r2, 8002c08 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002c02:	6803      	ldr	r3, [r0, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4718      	bx	r3
    }
 8002c08:	4770      	bx	lr
	...

08002c0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002c0c:	4a12      	ldr	r2, [pc, #72]	@ (8002c58 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002c0e:	6953      	ldr	r3, [r2, #20]
 8002c10:	03db      	lsls	r3, r3, #15
{
 8002c12:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002c14:	d51e      	bpl.n	8002c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c1c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c20:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c24:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c28:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c2c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002c30:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c32:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c36:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c38:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002c3c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c3e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8002c42:	d2f9      	bcs.n	8002c38 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002c44:	3b20      	subs	r3, #32
 8002c46:	f113 0f20 	cmn.w	r3, #32
 8002c4a:	d1f2      	bne.n	8002c32 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c50:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002c5c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002c60:	b11a      	cbz	r2, 8002c6a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002c62:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002c66:	b102      	cbz	r2, 8002c6a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002c68:	6018      	str	r0, [r3, #0]
        }
    }
 8002c6a:	4770      	bx	lr

08002c6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002c6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002c82:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002c8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002c9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c9e:	f3bf 8f6f 	isb	sy
}
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002ca8:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002caa:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002cac:	4e12      	ldr	r6, [pc, #72]	@ (8002cf8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8002cae:	4604      	mov	r4, r0
 8002cb0:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002cb4:	6003      	str	r3, [r0, #0]
 8002cb6:	6833      	ldr	r3, [r6, #0]
 8002cb8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002cbc:	b10a      	cbz	r2, 8002cc2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8002cbe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002cc0:	b900      	cbnz	r0, 8002cc4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8002cc2:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002cc4:	6803      	ldr	r3, [r0, #0]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	4798      	blx	r3
 8002cca:	1e43      	subs	r3, r0, #1
 8002ccc:	425d      	negs	r5, r3
 8002cce:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8002cd0:	6833      	ldr	r3, [r6, #0]
 8002cd2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002cd4:	b130      	cbz	r0, 8002ce4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	4798      	blx	r3
 8002cdc:	2801      	cmp	r0, #1
 8002cde:	bf08      	it	eq
 8002ce0:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8002ce4:	b92d      	cbnz	r5, 8002cf2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8002ce8:	2127      	movs	r1, #39	@ 0x27
 8002cea:	4a06      	ldr	r2, [pc, #24]	@ (8002d04 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8002cec:	4806      	ldr	r0, [pc, #24]	@ (8002d08 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8002cee:	f01f fed3 	bl	8022a98 <__assert_func>
    }
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2402daac 	.word	0x2402daac
 8002cfc:	08024440 	.word	0x08024440
 8002d00:	0802433c 	.word	0x0802433c
 8002d04:	0802439a 	.word	0x0802439a
 8002d08:	080243d3 	.word	0x080243d3

08002d0c <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8002d0c:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8002d0e:	4e24      	ldr	r6, [pc, #144]	@ (8002da0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8002d10:	6835      	ldr	r5, [r6, #0]
 8002d12:	f3bf 8f5b 	dmb	ish
 8002d16:	f015 0501 	ands.w	r5, r5, #1
 8002d1a:	d13f      	bne.n	8002d9c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f01f fb47 	bl	80223b0 <__cxa_guard_acquire>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d03a      	beq.n	8002d9c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8002d26:	4c1f      	ldr	r4, [pc, #124]	@ (8002da4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002d28:	4b1f      	ldr	r3, [pc, #124]	@ (8002da8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8002d2a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8002d2e:	6125      	str	r5, [r4, #16]
 8002d30:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8002d32:	62a5      	str	r5, [r4, #40]	@ 0x28
 8002d34:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8002d36:	e9c4 3500 	strd	r3, r5, [r4]
 8002d3a:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8002d3e:	f013 f80c 	bl	8015d5a <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8002d42:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d46:	f00d fee7 	bl	8010b18 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8002d4a:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002d4c:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8002d4e:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8002d52:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8002d56:	f7ff ffa7 	bl	8002ca8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8002d5c:	4816      	ldr	r0, [pc, #88]	@ (8002db8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8002d5e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8002d62:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8002d64:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8002d68:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8002d6c:	2364      	movs	r3, #100	@ 0x64
 8002d6e:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8002d72:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8002d76:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8002d80:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8002d84:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8002d88:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8002d8e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8002d92:	f01f fe9f 	bl	8022ad4 <atexit>
 8002d96:	4630      	mov	r0, r6
 8002d98:	f01f fb16 	bl	80223c8 <__cxa_guard_release>
}
 8002d9c:	4801      	ldr	r0, [pc, #4]	@ (8002da4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
 8002da0:	24003b40 	.word	0x24003b40
 8002da4:	24003b44 	.word	0x24003b44
 8002da8:	08025418 	.word	0x08025418
 8002dac:	08024460 	.word	0x08024460
 8002db0:	080244d8 	.word	0x080244d8
 8002db4:	08025464 	.word	0x08025464
 8002db8:	08002b31 	.word	0x08002b31
 8002dbc:	0802549c 	.word	0x0802549c

08002dc0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002dc0:	b510      	push	{r4, lr}
        return instance;
 8002dc2:	4c14      	ldr	r4, [pc, #80]	@ (8002e14 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	b323      	cbz	r3, 8002e12 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_LTDC_LineEventCallback+0x58>)
 8002dca:	4a14      	ldr	r2, [pc, #80]	@ (8002e1c <HAL_LTDC_LineEventCallback+0x5c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	8811      	ldrh	r1, [r2, #0]
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d113      	bne.n	8002dfc <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002dd4:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_LTDC_LineEventCallback+0x60>)
 8002dd6:	8819      	ldrh	r1, [r3, #0]
 8002dd8:	f006 fb2e 	bl	8009438 <HAL_LTDC_ProgramLineEvent>
 8002ddc:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002dde:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002de2:	3301      	adds	r3, #1
 8002de4:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002de8:	f7ff fad6 	bl	8002398 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	f00c f99d 	bl	800f12c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002df2:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002df8:	f7ff b8b4 	b.w	8001f64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002dfc:	f006 fb1c 	bl	8009438 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002e00:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002e02:	6803      	ldr	r3, [r0, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002e08:	2000      	movs	r0, #0
    }
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002e0e:	f7ff b8db 	b.w	8001fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002e12:	bd10      	pop	{r4, pc}
 8002e14:	2402daac 	.word	0x2402daac
 8002e18:	50001000 	.word	0x50001000
 8002e1c:	24003b3e 	.word	0x24003b3e
 8002e20:	24003b3c 	.word	0x24003b3c

08002e24 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_34_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002e24:	4770      	bx	lr

08002e26 <_ZN23ApplicationFontProviderD0Ev>:
 8002e26:	b510      	push	{r4, lr}
 8002e28:	4604      	mov	r4, r0
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	f01f fabe 	bl	80223ac <_ZdlPvj>
 8002e30:	4620      	mov	r0, r4
 8002e32:	bd10      	pop	{r4, pc}

08002e34 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002e34:	b508      	push	{r3, lr}
    switch (typography)
 8002e36:	2903      	cmp	r1, #3
 8002e38:	d813      	bhi.n	8002e62 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002e3a:	e8df f001 	tbb	[pc, r1]
 8002e3e:	0602      	.short	0x0602
 8002e40:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002e42:	f003 fd2d 	bl	80068a0 <_ZN17TypedTextDatabase8getFontsEv>
 8002e46:	6800      	ldr	r0, [r0, #0]
        // verdana_34_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002e48:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002e4a:	f003 fd29 	bl	80068a0 <_ZN17TypedTextDatabase8getFontsEv>
 8002e4e:	6840      	ldr	r0, [r0, #4]
 8002e50:	e7fa      	b.n	8002e48 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002e52:	f003 fd25 	bl	80068a0 <_ZN17TypedTextDatabase8getFontsEv>
 8002e56:	6880      	ldr	r0, [r0, #8]
 8002e58:	e7f6      	b.n	8002e48 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002e5a:	f003 fd21 	bl	80068a0 <_ZN17TypedTextDatabase8getFontsEv>
 8002e5e:	68c0      	ldr	r0, [r0, #12]
 8002e60:	e7f2      	b.n	8002e48 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8002e62:	2000      	movs	r0, #0
 8002e64:	e7f0      	b.n	8002e48 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002e68 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002e68:	4800      	ldr	r0, [pc, #0]	@ (8002e6c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002e6a:	4770      	bx	lr
 8002e6c:	08024530 	.word	0x08024530

08002e70 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002e70:	2014      	movs	r0, #20
 8002e72:	4770      	bx	lr

08002e74 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002e74:	b513      	push	{r0, r1, r4, lr}
 8002e76:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002e78:	b151      	cbz	r1, 8002e90 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002e7a:	6803      	ldr	r3, [r0, #0]
 8002e7c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002e7e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002e80:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002e84:	689c      	ldr	r4, [r3, #8]
 8002e86:	f10d 0303 	add.w	r3, sp, #3
 8002e8a:	47a0      	blx	r4
        return glyph;
    }
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd10      	pop	{r4, pc}
            return 0;
 8002e90:	4608      	mov	r0, r1
 8002e92:	e7fb      	b.n	8002e8c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002e94 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002e94:	89c0      	ldrh	r0, [r0, #14]
 8002e96:	4770      	bx	lr

08002e98 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002e98:	8a00      	ldrh	r0, [r0, #16]
 8002e9a:	4770      	bx	lr

08002e9c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002e9c:	88c0      	ldrh	r0, [r0, #6]
 8002e9e:	4770      	bx	lr

08002ea0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002ea0:	8880      	ldrh	r0, [r0, #4]
 8002ea2:	4770      	bx	lr

08002ea4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002ea4:	7a80      	ldrb	r0, [r0, #10]
    }
 8002ea6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002eaa:	4770      	bx	lr

08002eac <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002eac:	7a80      	ldrb	r0, [r0, #10]
    }
 8002eae:	09c0      	lsrs	r0, r0, #7
 8002eb0:	4770      	bx	lr

08002eb2 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	4770      	bx	lr
	...

08002eb8 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8002eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002ec0 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	00000000 	.word	0x00000000

08002ec4 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002ec4:	4770      	bx	lr

08002ec6 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002ec6:	b510      	push	{r4, lr}
 8002ec8:	4604      	mov	r4, r0
    }
 8002eca:	2108      	movs	r1, #8
 8002ecc:	f01f fa6e 	bl	80223ac <_ZdlPvj>
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	bd10      	pop	{r4, pc}

08002ed4 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002ed4:	4770      	bx	lr

08002ed6 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002ed6:	4770      	bx	lr

08002ed8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002ed8:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8002edc:	6808      	ldr	r0, [r1, #0]
 8002ede:	6849      	ldr	r1, [r1, #4]
 8002ee0:	c303      	stmia	r3!, {r0, r1}
    }
 8002ee2:	4770      	bx	lr

08002ee4 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002ee4:	4770      	bx	lr

08002ee6 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002ee6:	4770      	bx	lr

08002ee8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002ee8:	6041      	str	r1, [r0, #4]
    }
 8002eea:	4770      	bx	lr

08002eec <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002eec:	4770      	bx	lr
	...

08002ef0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002ef2:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002ef6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002f00:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002f04:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	08002fb1 	.word	0x08002fb1

08002f10 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002f10:	2301      	movs	r3, #1
 8002f12:	7203      	strb	r3, [r0, #8]
    }
 8002f14:	4770      	bx	lr

08002f16 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002f16:	4770      	bx	lr

08002f18 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8002f18:	4770      	bx	lr

08002f1a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002f1a:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002f1c:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8002f1e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002f20:	68c2      	ldr	r2, [r0, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	1054      	asrs	r4, r2, #1
 8002f26:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002f2a:	07d2      	lsls	r2, r2, #31
 8002f2c:	bf48      	it	mi
 8002f2e:	590a      	ldrmi	r2, [r1, r4]
    }
 8002f30:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002f34:	bf48      	it	mi
 8002f36:	58d3      	ldrmi	r3, [r2, r3]
 8002f38:	4718      	bx	r3

08002f3a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8002f3a:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8002f3c:	6840      	ldr	r0, [r0, #4]
 8002f3e:	b130      	cbz	r0, 8002f4e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	b91a      	cbnz	r2, 8002f4c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8002f44:	68d8      	ldr	r0, [r3, #12]
 8002f46:	f000 0001 	and.w	r0, r0, #1
 8002f4a:	4770      	bx	lr
 8002f4c:	2001      	movs	r0, #1
    }
 8002f4e:	4770      	bx	lr

08002f50 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	210c      	movs	r1, #12
 8002f56:	f01f fa29 	bl	80223ac <_ZdlPvj>
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	bd10      	pop	{r4, pc}

08002f5e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002f5e:	b510      	push	{r4, lr}
 8002f60:	4604      	mov	r4, r0
 8002f62:	2110      	movs	r1, #16
 8002f64:	f01f fa22 	bl	80223ac <_ZdlPvj>
 8002f68:	4620      	mov	r0, r4
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4604      	mov	r4, r0
 8002f70:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8002f74:	f01f fa1a 	bl	80223ac <_ZdlPvj>
 8002f78:	4620      	mov	r0, r4
 8002f7a:	bd10      	pop	{r4, pc}

08002f7c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002f7c:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8002f7e:	f011 fb5f 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>
 8002f82:	6803      	ldr	r3, [r0, #0]
    }
 8002f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	4718      	bx	r3

08002f8c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002f90:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002f94:	b158      	cbz	r0, 8002fae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002f96:	6803      	ldr	r3, [r0, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4798      	blx	r3
 8002f9c:	b138      	cbz	r0, 8002fae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002f9e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8002fa2:	6803      	ldr	r3, [r0, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8002fae:	bd10      	pop	{r4, pc}

08002fb0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002fb0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002fb4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002fb8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002fba:	68b0      	ldr	r0, [r6, #8]
 8002fbc:	6803      	ldr	r3, [r0, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4798      	blx	r3
 8002fc2:	f242 1367 	movw	r3, #8551	@ 0x2167
 8002fc6:	4298      	cmp	r0, r3
 8002fc8:	d805      	bhi.n	8002fd6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002fca:	4b44      	ldr	r3, [pc, #272]	@ (80030dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002fcc:	21a3      	movs	r1, #163	@ 0xa3
 8002fce:	4a44      	ldr	r2, [pc, #272]	@ (80030e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002fd0:	4844      	ldr	r0, [pc, #272]	@ (80030e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002fd2:	f01f fd61 	bl	8022a98 <__assert_func>
 8002fd6:	6870      	ldr	r0, [r6, #4]
 8002fd8:	6803      	ldr	r3, [r0, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4798      	blx	r3
 8002fde:	280f      	cmp	r0, #15
 8002fe0:	d803      	bhi.n	8002fea <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002fe2:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002fe4:	21a4      	movs	r1, #164	@ 0xa4
 8002fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80030e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002fe8:	e7f2      	b.n	8002fd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002fea:	68f0      	ldr	r0, [r6, #12]
 8002fec:	6803      	ldr	r3, [r0, #0]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4798      	blx	r3
 8002ff2:	280b      	cmp	r0, #11
 8002ff4:	d803      	bhi.n	8002ffe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002ff8:	21a5      	movs	r1, #165	@ 0xa5
 8002ffa:	4a39      	ldr	r2, [pc, #228]	@ (80030e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002ffc:	e7e8      	b.n	8002fd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8002ffe:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80030f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003002:	f011 fb1d 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003006:	3004      	adds	r0, #4
 8003008:	f011 fb3f 	bl	801468a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800300c:	f8d9 0000 	ldr.w	r0, [r9]
 8003010:	b110      	cbz	r0, 8003018 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4798      	blx	r3
    if (*currentTrans)
 8003018:	f8d9 0000 	ldr.w	r0, [r9]
 800301c:	b110      	cbz	r0, 8003024 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4798      	blx	r3
    if (*currentScreen)
 8003024:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80030f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003028:	f8d8 0000 	ldr.w	r0, [r8]
 800302c:	b110      	cbz	r0, 8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 800302e:	6803      	ldr	r3, [r0, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4798      	blx	r3
    if (*currentPresenter)
 8003034:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003038:	b110      	cbz	r0, 8003040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 800303a:	6803      	ldr	r3, [r0, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4798      	blx	r3
    if (*currentScreen)
 8003040:	f8d8 0000 	ldr.w	r0, [r8]
 8003044:	b110      	cbz	r0, 800304c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4798      	blx	r3
    if (*currentPresenter)
 800304c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003050:	b110      	cbz	r0, 8003058 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003058:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800305a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800305c:	f04f 0b00 	mov.w	fp, #0
 8003060:	6803      	ldr	r3, [r0, #0]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	4798      	blx	r3
 8003066:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003068:	4604      	mov	r4, r0
 800306a:	f8c0 b004 	str.w	fp, [r0, #4]
 800306e:	f880 b008 	strb.w	fp, [r0, #8]
 8003072:	4659      	mov	r1, fp
 8003074:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003076:	68b0      	ldr	r0, [r6, #8]
 8003078:	6803      	ldr	r3, [r0, #0]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	4798      	blx	r3
 800307e:	4605      	mov	r5, r0
 8003080:	f003 fcec 	bl	8006a5c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003084:	6870      	ldr	r0, [r6, #4]
 8003086:	4659      	mov	r1, fp
 8003088:	6803      	ldr	r3, [r0, #0]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	4798      	blx	r3
 800308e:	4606      	mov	r6, r0
 8003090:	4629      	mov	r1, r5
 8003092:	f003 fca3 	bl	80069dc <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003096:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003098:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800309c:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800309e:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80030a2:	f8c8 5000 	str.w	r5, [r8]
public:
	Model();

	void bind(ModelListener *listener)
	{
		modelListener = listener;
 80030a6:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80030aa:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80030ac:	f8c6 a008 	str.w	sl, [r6, #8]
 80030b0:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80030b2:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80030b4:	4798      	blx	r3
    newPresenter->activate();
 80030b6:	6833      	ldr	r3, [r6, #0]
 80030b8:	4630      	mov	r0, r6
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80030be:	4621      	mov	r1, r4
 80030c0:	4628      	mov	r0, r5
 80030c2:	f013 fb7b 	bl	80167bc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	4620      	mov	r0, r4
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4798      	blx	r3
    newTransition->invalidate();
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	4620      	mov	r0, r4
 80030d2:	695b      	ldr	r3, [r3, #20]
}
 80030d4:	b001      	add	sp, #4
 80030d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030da:	4718      	bx	r3
 80030dc:	080246d0 	.word	0x080246d0
 80030e0:	0802475e 	.word	0x0802475e
 80030e4:	08024830 	.word	0x08024830
 80030e8:	08024877 	.word	0x08024877
 80030ec:	0802491a 	.word	0x0802491a
 80030f0:	08024a34 	.word	0x08024a34
 80030f4:	2402daf4 	.word	0x2402daf4
 80030f8:	2402daf0 	.word	0x2402daf0

080030fc <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80030fc:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003104:	b10a      	cbz	r2, 800310a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003106:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003108:	b900      	cbnz	r0, 800310c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800310a:	6898      	ldr	r0, [r3, #8]
    }
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2402daac 	.word	0x2402daac

08003114 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	4617      	mov	r7, r2
 800311a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800311c:	f011 fb56 	bl	80147cc <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003120:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003122:	2500      	movs	r5, #0
        instance = this;
 8003124:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003126:	4629      	mov	r1, r5
      model(m)
 8003128:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800312a:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 800312e:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800313a:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800313c:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003140:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003142:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003146:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003148:	4628      	mov	r0, r5
 800314a:	f003 fb5d 	bl	8006808 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800314e:	f7ff ffd5 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 8003152:	f019 fae4 	bl	801c71e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003156:	f7ff ffd1 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800315a:	f019 fb57 	bl	801c80c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 800315e:	4620      	mov	r0, r4
 8003160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003162:	bf00      	nop
 8003164:	2402db00 	.word	0x2402db00
 8003168:	080249e0 	.word	0x080249e0
 800316c:	080249c8 	.word	0x080249c8
 8003170:	2402daac 	.word	0x2402daac

08003174 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003176:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800317a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800317e:	2300      	movs	r3, #0
 8003180:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003184:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003188:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	08002fb1 	.word	0x08002fb1

08003194 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003194:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003196:	4770      	bx	lr

08003198 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003198:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800319a:	4770      	bx	lr

0800319c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800319c:	4770      	bx	lr

0800319e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800319e:	888b      	ldrh	r3, [r1, #4]
 80031a0:	69c0      	ldr	r0, [r0, #28]
 80031a2:	0adb      	lsrs	r3, r3, #11
 80031a4:	680a      	ldr	r2, [r1, #0]
 80031a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80031aa:	4410      	add	r0, r2
 80031ac:	4770      	bx	lr

080031ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80031ae:	b510      	push	{r4, lr}
 80031b0:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80031b2:	b1ba      	cbz	r2, 80031e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80031b4:	7b10      	ldrb	r0, [r2, #12]
 80031b6:	b168      	cbz	r0, 80031d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80031b8:	7b53      	ldrb	r3, [r2, #13]
 80031ba:	7ad2      	ldrb	r2, [r2, #11]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80031c2:	431a      	orrs	r2, r3
 80031c4:	6a23      	ldr	r3, [r4, #32]
 80031c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	428a      	cmp	r2, r1
 80031ce:	d102      	bne.n	80031d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80031d0:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80031d4:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80031d6:	d805      	bhi.n	80031e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80031d8:	3801      	subs	r0, #1
 80031da:	3304      	adds	r3, #4
 80031dc:	b280      	uxth	r0, r0
 80031de:	2800      	cmp	r0, #0
 80031e0:	d1f3      	bne.n	80031ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80031e2:	e7f7      	b.n	80031d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80031e4:	2000      	movs	r0, #0
 80031e6:	e7f5      	b.n	80031d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080031e8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
 80031ec:	212c      	movs	r1, #44	@ 0x2c
 80031ee:	f01f f8dd 	bl	80223ac <_ZdlPvj>
 80031f2:	4620      	mov	r0, r4
 80031f4:	bd10      	pop	{r4, pc}
	...

080031f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80031f8:	b530      	push	{r4, r5, lr}
 80031fa:	b08b      	sub	sp, #44	@ 0x2c
 80031fc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80031fe:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003202:	9508      	str	r5, [sp, #32]
 8003204:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003208:	9507      	str	r5, [sp, #28]
 800320a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800320e:	9506      	str	r5, [sp, #24]
 8003210:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003214:	9505      	str	r5, [sp, #20]
 8003216:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800321a:	9504      	str	r5, [sp, #16]
 800321c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003220:	9503      	str	r5, [sp, #12]
 8003222:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003226:	9502      	str	r5, [sp, #8]
 8003228:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800322c:	9501      	str	r5, [sp, #4]
 800322e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003232:	9500      	str	r5, [sp, #0]
 8003234:	f012 fe4e 	bl	8015ed4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800323a:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800323c:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800323e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003240:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003242:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003244:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003248:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800324a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800324c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800324e:	b00b      	add	sp, #44	@ 0x2c
 8003250:	bd30      	pop	{r4, r5, pc}
 8003252:	bf00      	nop
 8003254:	08024a58 	.word	0x08024a58

08003258 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8003258:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800325a:	4770      	bx	lr

0800325c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800325c:	4770      	bx	lr

0800325e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800325e:	4770      	bx	lr

08003260 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003260:	4770      	bx	lr

08003262 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003262:	4770      	bx	lr

08003264 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003264:	4770      	bx	lr

08003266 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8003266:	b530      	push	{r4, r5, lr}
 8003268:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800326a:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 800326c:	4604      	mov	r4, r0
        rect.width = width;
 800326e:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003270:	466d      	mov	r5, sp
 8003272:	4601      	mov	r1, r0
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003278:	343c      	adds	r4, #60	@ 0x3c
 800327a:	4628      	mov	r0, r5
 800327c:	4798      	blx	r3
 800327e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003286:	b005      	add	sp, #20
 8003288:	bd30      	pop	{r4, r5, pc}

0800328a <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800328a:	b530      	push	{r4, r5, lr}
 800328c:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 800328e:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003290:	4604      	mov	r4, r0
        rect.height = height;
 8003292:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003294:	466d      	mov	r5, sp
 8003296:	4601      	mov	r1, r0
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329c:	343c      	adds	r4, #60	@ 0x3c
 800329e:	4628      	mov	r0, r5
 80032a0:	4798      	blx	r3
 80032a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80032aa:	b005      	add	sp, #20
 80032ac:	bd30      	pop	{r4, r5, pc}

080032ae <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80032ae:	2200      	movs	r2, #0
 80032b0:	8002      	strh	r2, [r0, #0]
 80032b2:	8042      	strh	r2, [r0, #2]
 80032b4:	8082      	strh	r2, [r0, #4]
 80032b6:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80032b8:	4770      	bx	lr

080032ba <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80032ba:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 80032be:	4770      	bx	lr

080032c0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 80032c0:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80032c2:	b570      	push	{r4, r5, r6, lr}
 80032c4:	4604      	mov	r4, r0
        setX(x);
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80032c8:	4615      	mov	r5, r2
        setX(x);
 80032ca:	4798      	blx	r3
        setBaselineY(baselineY);
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	4620      	mov	r0, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 80032d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80032d8:	4718      	bx	r3

080032da <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80032da:	2000      	movs	r0, #0
 80032dc:	4770      	bx	lr

080032de <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80032de:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80032e0:	4770      	bx	lr

080032e2 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80032e2:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 80032e6:	4770      	bx	lr

080032e8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 80032e8:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80032ea:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 80032ec:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80032ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032f2:	4362      	muls	r2, r4
 80032f4:	4361      	muls	r1, r4
    }
 80032f6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80032fa:	4718      	bx	r3

080032fc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 80032fc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003300:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8003306:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8003308:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800330c:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 8003310:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	db1a      	blt.n	8003350 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 800331a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800331e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003322:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003326:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 800332a:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800332e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	db1e      	blt.n	8003376 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8003338:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800333c:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8003340:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003344:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003348:	4623      	mov	r3, r4
    }
 800334a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800334e:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003350:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003354:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003358:	ee17 3a10 	vmov	r3, s14
 800335c:	3b01      	subs	r3, #1
 800335e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003362:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8003366:	ee30 0a26 	vadd.f32	s0, s0, s13
 800336a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800336e:	ee10 1a10 	vmov	r1, s0
 8003372:	4419      	add	r1, r3
 8003374:	e7d9      	b.n	800332a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8003376:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800337a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337e:	ee17 3a90 	vmov	r3, s15
 8003382:	3b01      	subs	r3, #1
 8003384:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8003388:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800338c:	ee70 0a87 	vadd.f32	s1, s1, s14
 8003390:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8003394:	ee10 2a90 	vmov	r2, s1
 8003398:	441a      	add	r2, r3
 800339a:	e7d5      	b.n	8003348 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

0800339c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800339c:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800339e:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80033a0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80033a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033a6:	4362      	muls	r2, r4
    }
 80033a8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80033ac:	4718      	bx	r3

080033ae <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 80033ae:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80033b2:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80033b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 80033b8:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80033ba:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80033be:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 80033c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	db0b      	blt.n	80033e4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80033cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80033d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80033d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80033d8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80033dc:	4623      	mov	r3, r4
    }
 80033de:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80033e2:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80033e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80033e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ec:	ee17 3a90 	vmov	r3, s15
 80033f0:	3b01      	subs	r3, #1
 80033f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80033f6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80033fa:	ee30 0a07 	vadd.f32	s0, s0, s14
 80033fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003402:	ee10 2a10 	vmov	r2, s0
 8003406:	441a      	add	r2, r3
 8003408:	e7e8      	b.n	80033dc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

0800340a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800340a:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800340c:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 800340e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8003410:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003414:	4362      	muls	r2, r4
 8003416:	4361      	muls	r1, r4
    }
 8003418:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800341c:	4718      	bx	r3

0800341e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 800341e:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8003422:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8003428:	b410      	push	{r4}
        const float fs = f * (float)scale;
 800342a:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800342e:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8003432:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	db1a      	blt.n	8003472 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 800343c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003440:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003444:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003448:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 800344c:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8003450:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	db1e      	blt.n	8003498 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 800345a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800345e:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8003462:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003466:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800346a:	4623      	mov	r3, r4
    }
 800346c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8003470:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003472:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003476:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800347a:	ee17 3a10 	vmov	r3, s14
 800347e:	3b01      	subs	r3, #1
 8003480:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003484:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8003488:	ee30 0a26 	vadd.f32	s0, s0, s13
 800348c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003490:	ee10 1a10 	vmov	r1, s0
 8003494:	4419      	add	r1, r3
 8003496:	e7d9      	b.n	800344c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8003498:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800349c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034a0:	ee17 3a90 	vmov	r3, s15
 80034a4:	3b01      	subs	r3, #1
 80034a6:	ee70 0ac7 	vsub.f32	s1, s1, s14
 80034aa:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80034ae:	ee70 0a87 	vadd.f32	s1, s1, s14
 80034b2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80034b6:	ee10 2a90 	vmov	r2, s1
 80034ba:	441a      	add	r2, r3
 80034bc:	e7d5      	b.n	800346a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

080034be <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 80034be:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80034c0:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80034c2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80034c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034c8:	4362      	muls	r2, r4
    }
 80034ca:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80034ce:	4718      	bx	r3

080034d0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 80034d0:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80034d4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80034d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 80034da:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80034dc:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80034e0:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 80034e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80034e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ec:	db0b      	blt.n	8003506 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80034ee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80034f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80034f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80034fa:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80034fe:	4623      	mov	r3, r4
    }
 8003500:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8003504:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003506:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800350a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800350e:	ee17 3a90 	vmov	r3, s15
 8003512:	3b01      	subs	r3, #1
 8003514:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003518:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800351c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003520:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003524:	ee10 2a10 	vmov	r2, s0
 8003528:	441a      	add	r2, r3
 800352a:	e7e8      	b.n	80034fe <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

0800352c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 800352c:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8003530:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8003532:	2b00      	cmp	r3, #0
 8003534:	db07      	blt.n	8003546 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003536:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 800353a:	fb90 f0f2 	sdiv	r0, r0, r2
 800353e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003542:	1040      	asrs	r0, r0, #1
 8003544:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003546:	f06f 0101 	mvn.w	r1, #1
 800354a:	fb01 2003 	mla	r0, r1, r3, r2
 800354e:	3801      	subs	r0, #1
 8003550:	fb90 f0f2 	sdiv	r0, r0, r2
 8003554:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003558:	1040      	asrs	r0, r0, #1
 800355a:	4240      	negs	r0, r0
    }
 800355c:	4770      	bx	lr

0800355e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 800355e:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8003562:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8003566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800356e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003572:	4770      	bx	lr

08003574 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8003574:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8003578:	4770      	bx	lr

0800357a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 800357a:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 800357e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8003580:	2b00      	cmp	r3, #0
 8003582:	db07      	blt.n	8003594 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003584:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8003588:	fb90 f0f2 	sdiv	r0, r0, r2
 800358c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003590:	1040      	asrs	r0, r0, #1
 8003592:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003594:	f06f 0101 	mvn.w	r1, #1
 8003598:	fb01 2003 	mla	r0, r1, r3, r2
 800359c:	3801      	subs	r0, #1
 800359e:	fb90 f0f2 	sdiv	r0, r0, r2
 80035a2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80035a6:	1040      	asrs	r0, r0, #1
 80035a8:	4240      	negs	r0, r0
    }
 80035aa:	4770      	bx	lr

080035ac <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 80035ac:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 80035b0:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 80035b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80035bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80035c0:	4770      	bx	lr

080035c2 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80035c2:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 80035c6:	4770      	bx	lr

080035c8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80035c8:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 80035cc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	db07      	blt.n	80035e2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80035d2:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80035d6:	fb90 f0f2 	sdiv	r0, r0, r2
 80035da:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80035de:	1040      	asrs	r0, r0, #1
 80035e0:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80035e2:	f06f 0101 	mvn.w	r1, #1
 80035e6:	fb01 2003 	mla	r0, r1, r3, r2
 80035ea:	3801      	subs	r0, #1
 80035ec:	fb90 f0f2 	sdiv	r0, r0, r2
 80035f0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80035f4:	1040      	asrs	r0, r0, #1
 80035f6:	4240      	negs	r0, r0
    }
 80035f8:	4770      	bx	lr

080035fa <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 80035fa:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 80035fe:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8003602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003606:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800360a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800360e:	4770      	bx	lr

08003610 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8003610:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8003614:	4770      	bx	lr

08003616 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8003616:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 800361a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 800361c:	2b00      	cmp	r3, #0
 800361e:	db07      	blt.n	8003630 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003620:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8003624:	fb90 f0f2 	sdiv	r0, r0, r2
 8003628:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800362c:	1040      	asrs	r0, r0, #1
 800362e:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003630:	f06f 0101 	mvn.w	r1, #1
 8003634:	fb01 2003 	mla	r0, r1, r3, r2
 8003638:	3801      	subs	r0, #1
 800363a:	fb90 f0f2 	sdiv	r0, r0, r2
 800363e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003642:	1040      	asrs	r0, r0, #1
 8003644:	4240      	negs	r0, r0
    }
 8003646:	4770      	bx	lr

08003648 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8003648:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 800364c:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8003650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003654:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8003658:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800365c:	4770      	bx	lr

0800365e <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 800365e:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 8003662:	4770      	bx	lr

08003664 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8003664:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8003666:	b570      	push	{r4, r5, r6, lr}
 8003668:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 800366e:	460d      	mov	r5, r1
 8003670:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8003672:	4798      	blx	r3
        setScaleY(scale, updateData);
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	4632      	mov	r2, r6
 8003678:	4629      	mov	r1, r5
 800367a:	4620      	mov	r0, r4
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8003680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8003684:	4718      	bx	r3

08003686 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8003686:	6803      	ldr	r3, [r0, #0]
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368c:	4718      	bx	r3

0800368e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 800368e:	6803      	ldr	r3, [r0, #0]
 8003690:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003694:	4718      	bx	r3

08003696 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8003696:	6803      	ldr	r3, [r0, #0]
 8003698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800369c:	4718      	bx	r3

0800369e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800369e:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 80036a0:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 80036a2:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80036a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 80036a8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 80036aa:	db0e      	blt.n	80036ca <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 80036ac:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80036b0:	fb92 f1f4 	sdiv	r1, r2, r4
 80036b4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80036b8:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80036ba:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 80036be:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80036c2:	3a01      	subs	r2, #1
 80036c4:	440a      	add	r2, r1
 80036c6:	4249      	negs	r1, r1
 80036c8:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80036ca:	f06f 0101 	mvn.w	r1, #1
 80036ce:	fb01 4102 	mla	r1, r1, r2, r4
 80036d2:	3901      	subs	r1, #1
 80036d4:	fb91 f1f4 	sdiv	r1, r1, r4
 80036d8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80036dc:	1049      	asrs	r1, r1, #1
 80036de:	4249      	negs	r1, r1
 80036e0:	e7eb      	b.n	80036ba <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

080036e2 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 80036e2:	6803      	ldr	r3, [r0, #0]
 80036e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80036e8:	4718      	bx	r3

080036ea <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 80036ea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 80036ec:	6803      	ldr	r3, [r0, #0]
 80036ee:	4351      	muls	r1, r2
 80036f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80036f4:	4718      	bx	r3

080036f6 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 80036f6:	6803      	ldr	r3, [r0, #0]
 80036f8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80036fc:	4718      	bx	r3

080036fe <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 80036fe:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8003702:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8003708:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 800370c:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8003710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	db08      	blt.n	800372c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 800371a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800371e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003722:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003726:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800372a:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800372c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003734:	ee17 3a90 	vmov	r3, s15
 8003738:	3b01      	subs	r3, #1
 800373a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800373e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003742:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003746:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800374a:	ee10 1a10 	vmov	r1, s0
 800374e:	4419      	add	r1, r3
 8003750:	e7eb      	b.n	800372a <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08003752 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8003752:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 8003756:	4770      	bx	lr

08003758 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8003758:	6803      	ldr	r3, [r0, #0]
 800375a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800375e:	4718      	bx	r3

08003760 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8003760:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8003762:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8003764:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8003768:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 800376a:	4798      	blx	r3
        if (i >= 0)
 800376c:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800376e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8003770:	db07      	blt.n	8003782 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8003772:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003776:	fb90 f0f3 	sdiv	r0, r0, r3
 800377a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800377e:	1040      	asrs	r0, r0, #1
    }
 8003780:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003782:	f06f 0201 	mvn.w	r2, #1
 8003786:	fb02 3000 	mla	r0, r2, r0, r3
 800378a:	3801      	subs	r0, #1
 800378c:	fb90 f0f3 	sdiv	r0, r0, r3
 8003790:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003794:	1040      	asrs	r0, r0, #1
 8003796:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8003798:	e7f2      	b.n	8003780 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

0800379a <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 800379a:	6803      	ldr	r3, [r0, #0]
 800379c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80037a0:	4718      	bx	r3

080037a2 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 80037a2:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 80037a4:	b510      	push	{r4, lr}
 80037a6:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 80037a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80037ac:	4798      	blx	r3
 80037ae:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 80037b2:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80037be:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80037c2:	bd10      	pop	{r4, pc}

080037c4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 80037c4:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 80037c8:	4770      	bx	lr

080037ca <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 80037ca:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 80037cc:	6803      	ldr	r3, [r0, #0]
 80037ce:	4351      	muls	r1, r2
 80037d0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80037d4:	4718      	bx	r3

080037d6 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 80037d6:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 80037da:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80037dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80037e0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 80037e4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80037e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	db08      	blt.n	8003804 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 80037f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80037f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80037fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80037fe:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8003802:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003804:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	ee17 3a90 	vmov	r3, s15
 8003810:	3b01      	subs	r3, #1
 8003812:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003816:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800381a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800381e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003822:	ee10 1a10 	vmov	r1, s0
 8003826:	4419      	add	r1, r3
 8003828:	e7eb      	b.n	8003802 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

0800382a <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 800382a:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 800382e:	4770      	bx	lr

08003830 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8003830:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8003832:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8003834:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 8003838:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 800383a:	4798      	blx	r3
        if (i >= 0)
 800383c:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800383e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8003840:	db07      	blt.n	8003852 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8003842:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003846:	fb90 f0f3 	sdiv	r0, r0, r3
 800384a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800384e:	1040      	asrs	r0, r0, #1
    }
 8003850:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003852:	f06f 0201 	mvn.w	r2, #1
 8003856:	fb02 3000 	mla	r0, r2, r0, r3
 800385a:	3801      	subs	r0, #1
 800385c:	fb90 f0f3 	sdiv	r0, r0, r3
 8003860:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003864:	1040      	asrs	r0, r0, #1
 8003866:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003868:	e7f2      	b.n	8003850 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

0800386a <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800386a:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 800386c:	b510      	push	{r4, lr}
 800386e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8003870:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003874:	4798      	blx	r3
 8003876:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 800387a:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800387e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003882:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8003886:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800388a:	bd10      	pop	{r4, pc}

0800388c <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 800388c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003890:	4770      	bx	lr

08003892 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 8003892:	4608      	mov	r0, r1
 8003894:	4770      	bx	lr

08003896 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8003896:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8003898:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 800389a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800389c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4604      	mov	r4, r0
        if (i >= 0)
 80038a4:	db0e      	blt.n	80038c4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 80038a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80038aa:	fb91 f1f2 	sdiv	r1, r1, r2
 80038ae:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80038b2:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80038b4:	b209      	sxth	r1, r1
 80038b6:	4620      	mov	r0, r4
 80038b8:	4798      	blx	r3
 80038ba:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 80038be:	fb02 3000 	mla	r0, r2, r0, r3
 80038c2:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80038c4:	f06f 0001 	mvn.w	r0, #1
 80038c8:	fb00 2101 	mla	r1, r0, r1, r2
 80038cc:	3901      	subs	r1, #1
 80038ce:	fb91 f1f2 	sdiv	r1, r1, r2
 80038d2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80038d6:	1049      	asrs	r1, r1, #1
 80038d8:	4249      	negs	r1, r1
 80038da:	e7eb      	b.n	80038b4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080038dc <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80038dc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80038de:	4770      	bx	lr

080038e0 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80038e0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80038e2:	4770      	bx	lr

080038e4 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80038e4:	6803      	ldr	r3, [r0, #0]
 80038e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038ea:	4718      	bx	r3

080038ec <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80038ec:	6803      	ldr	r3, [r0, #0]
 80038ee:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80038f2:	4718      	bx	r3

080038f4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80038f4:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80038f6:	6803      	ldr	r3, [r0, #0]
 80038f8:	4351      	muls	r1, r2
 80038fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80038fe:	4718      	bx	r3

08003900 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003900:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8003902:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003904:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8003908:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800390a:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 800390e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003912:	4798      	blx	r3
 8003914:	462b      	mov	r3, r5
 8003916:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 800391a:	4620      	mov	r0, r4
    }
 800391c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003920:	4718      	bx	r3

08003922 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 8003922:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
 8003926:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 800392a:	4419      	add	r1, r3
    }
 800392c:	1a08      	subs	r0, r1, r0
 800392e:	4770      	bx	lr

08003930 <_ZN15Screen1ViewBase12toggleLSBUSBEv>:
     * Virtual Action Handlers
     */
    virtual void toggleLSBUSB()
    {
        // Override and implement this function in Screen1
    }
 8003930:	4770      	bx	lr

08003932 <_ZN15Screen1ViewBase10selectBandEv>:
    virtual void selectBand()
    {
        // Override and implement this function in Screen1
    }
 8003932:	4770      	bx	lr

08003934 <_ZN15Screen1ViewBase10toggleRXTXEv>:
    virtual void toggleRXTX()
    {
        // Override and implement this function in Screen1
    }
 8003934:	4770      	bx	lr

08003936 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8003936:	4770      	bx	lr

08003938 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003938:	4770      	bx	lr

0800393a <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 800393a:	4770      	bx	lr

0800393c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800393c:	4770      	bx	lr

0800393e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800393e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003940:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003942:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003944:	68c2      	ldr	r2, [r0, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	1055      	asrs	r5, r2, #1
 800394a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800394e:	07d2      	lsls	r2, r2, #31
 8003950:	bf48      	it	mi
 8003952:	5962      	ldrmi	r2, [r4, r5]
    }
 8003954:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003956:	bf48      	it	mi
 8003958:	58d3      	ldrmi	r3, [r2, r3]
 800395a:	4718      	bx	r3

0800395c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800395c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800395e:	6840      	ldr	r0, [r0, #4]
 8003960:	b130      	cbz	r0, 8003970 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	b91a      	cbnz	r2, 800396e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003966:	68d8      	ldr	r0, [r3, #12]
 8003968:	f000 0001 	and.w	r0, r0, #1
 800396c:	4770      	bx	lr
 800396e:	2001      	movs	r0, #1
    }
 8003970:	4770      	bx	lr

08003972 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003972:	b510      	push	{r4, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	214c      	movs	r1, #76	@ 0x4c
 8003978:	f01e fd18 	bl	80223ac <_ZdlPvj>
 800397c:	4620      	mov	r0, r4
 800397e:	bd10      	pop	{r4, pc}

08003980 <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8003988:	f01e fd10 	bl	80223ac <_ZdlPvj>
 800398c:	4620      	mov	r0, r4
 800398e:	bd10      	pop	{r4, pc}

08003990 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003990:	b510      	push	{r4, lr}
 8003992:	4604      	mov	r4, r0
 8003994:	2110      	movs	r1, #16
 8003996:	f01e fd09 	bl	80223ac <_ZdlPvj>
 800399a:	4620      	mov	r0, r4
 800399c:	bd10      	pop	{r4, pc}
	...

080039a0 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 80039a2:	b510      	push	{r4, lr}
 80039a4:	4604      	mov	r4, r0
 80039a6:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80039a8:	f00f f998 	bl	8012cdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd10      	pop	{r4, pc}
 80039b0:	08024fd8 	.word	0x08024fd8

080039b4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80039b4:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <_ZN15Screen1ViewBaseD0Ev+0x1c>)
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80039bc:	f00f f98e 	bl	8012cdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80039c0:	f242 1168 	movw	r1, #8552	@ 0x2168
 80039c4:	4620      	mov	r0, r4
 80039c6:	f01e fcf1 	bl	80223ac <_ZdlPvj>
 80039ca:	4620      	mov	r0, r4
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	bf00      	nop
 80039d0:	08024fd8 	.word	0x08024fd8

080039d4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80039d4:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80039d6:	f7ff f911 	bl	8002bfc <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80039da:	bd08      	pop	{r3, pc}

080039dc <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80039dc:	b508      	push	{r3, lr}
        if (alpha > 0)
 80039de:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80039e2:	b10b      	cbz	r3, 80039e8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80039e4:	f7ff f90a 	bl	8002bfc <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80039e8:	bd08      	pop	{r3, pc}

080039ea <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonLSBUSB)
 80039ea:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80039ee:	4299      	cmp	r1, r3
{
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4604      	mov	r4, r0
 80039f4:	460d      	mov	r5, r1
    if (&src == &buttonLSBUSB)
 80039f6:	d102      	bne.n	80039fe <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    {
        //Interaction1
        //When buttonLSBUSB clicked call virtual function
        //Call toggleLSBUSB
        toggleLSBUSB();
 80039f8:	6803      	ldr	r3, [r0, #0]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4798      	blx	r3
    }
    if (&src == &buttonToggleBand)
 80039fe:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 8003a02:	429d      	cmp	r5, r3
 8003a04:	d103      	bne.n	8003a0e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction2
        //When buttonToggleBand clicked call virtual function
        //Call selectBand
        selectBand();
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	4620      	mov	r0, r4
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	4798      	blx	r3
    }
    if (&src == &buttonPTT)
 8003a0e:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8003a12:	429d      	cmp	r5, r3
 8003a14:	d105      	bne.n	8003a22 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x38>
    {
        //Interaction3
        //When buttonPTT clicked call virtual function
        //Call toggleRXTX
        toggleRXTX();
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	4620      	mov	r0, r4
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
}
 8003a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        toggleRXTX();
 8003a20:	4718      	bx	r3
}
 8003a22:	bd70      	pop	{r4, r5, r6, pc}

08003a24 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003a24:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8003a26:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8003a28:	db03      	blt.n	8003a32 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8003a2a:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 8003a2e:	4294      	cmp	r4, r2
 8003a30:	dc06      	bgt.n	8003a40 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 8003a32:	4b08      	ldr	r3, [pc, #32]	@ (8003a54 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8003a34:	f240 6139 	movw	r1, #1593	@ 0x639
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 8003a3a:	4808      	ldr	r0, [pc, #32]	@ (8003a5c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 8003a3c:	f01f f82c 	bl	8022a98 <__assert_func>
        return yValues[dataIndex(index)];
 8003a40:	6803      	ldr	r3, [r0, #0]
 8003a42:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 8003a46:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003a4a:	4798      	blx	r3
    }
 8003a4c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003a50:	bd10      	pop	{r4, pc}
 8003a52:	bf00      	nop
 8003a54:	08024ab8 	.word	0x08024ab8
 8003a58:	08024adb 	.word	0x08024adb
 8003a5c:	08024b2a 	.word	0x08024b2a

08003a60 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003a60:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8003a62:	b510      	push	{r4, lr}
 8003a64:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8003a66:	db03      	blt.n	8003a70 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8003a68:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	dc06      	bgt.n	8003a7e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8003a72:	f240 6133 	movw	r1, #1587	@ 0x633
 8003a76:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8003a78:	4807      	ldr	r0, [pc, #28]	@ (8003a98 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8003a7a:	f01f f80d 	bl	8022a98 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8003a7e:	6803      	ldr	r3, [r0, #0]
 8003a80:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8003a84:	4798      	blx	r3
 8003a86:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8003a8a:	fb02 3000 	mla	r0, r2, r0, r3
 8003a8e:	bd10      	pop	{r4, pc}
 8003a90:	08024ab8 	.word	0x08024ab8
 8003a94:	08024b87 	.word	0x08024b87
 8003a98:	08024b2a 	.word	0x08024b2a

08003a9c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003a9c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003a9e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003aa0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003aa2:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003aa6:	b28d      	uxth	r5, r1
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	b92b      	cbnz	r3, 8003ab8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003aac:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003aae:	216c      	movs	r1, #108	@ 0x6c
 8003ab0:	4a10      	ldr	r2, [pc, #64]	@ (8003af4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003ab2:	4811      	ldr	r0, [pc, #68]	@ (8003af8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003ab4:	f01e fff0 	bl	8022a98 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003ab8:	4910      	ldr	r1, [pc, #64]	@ (8003afc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003aba:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003abc:	8809      	ldrh	r1, [r1, #0]
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	d803      	bhi.n	8003aca <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003ac4:	216d      	movs	r1, #109	@ 0x6d
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8003af4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003ac8:	e7f3      	b.n	8003ab2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003aca:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003ace:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ad6:	6803      	ldr	r3, [r0, #0]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	4798      	blx	r3
 8003adc:	1a29      	subs	r1, r5, r0
 8003ade:	4633      	mov	r3, r6
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	b209      	sxth	r1, r1
    }
 8003ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003ae8:	4718      	bx	r3
 8003aea:	bf00      	nop
 8003aec:	2402db04 	.word	0x2402db04
 8003af0:	08024bd6 	.word	0x08024bd6
 8003af4:	08024c18 	.word	0x08024c18
 8003af8:	08024c53 	.word	0x08024c53
 8003afc:	2402db08 	.word	0x2402db08
 8003b00:	08024c9a 	.word	0x08024c9a
 8003b04:	2402db0c 	.word	0x2402db0c

08003b08 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003b0e:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003b10:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8003b14:	4770      	bx	lr

08003b16 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003b16:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	4604      	mov	r4, r0
        setX(x);
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003b1e:	4615      	mov	r5, r2
        setX(x);
 8003b20:	4798      	blx	r3
        setY(y);
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	4620      	mov	r0, r4
 8003b26:	4629      	mov	r1, r5
 8003b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003b2e:	4718      	bx	r3

08003b30 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4604      	mov	r4, r0
 8003b34:	461d      	mov	r5, r3
 8003b36:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003b3a:	f7ff ffec 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	4629      	mov	r1, r5
 8003b42:	4620      	mov	r0, r4
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	4798      	blx	r3
        setHeight(height);
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003b54:	4718      	bx	r3
	...

08003b58 <_ZN8touchgfx6WidgetC1Ev>:
 8003b58:	2200      	movs	r2, #0
 8003b5a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003b5e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003b62:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003b66:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b6e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8003b70:	4a01      	ldr	r2, [pc, #4]	@ (8003b78 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003b72:	6002      	str	r2, [r0, #0]
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	08024d30 	.word	0x08024d30

08003b7c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8003b80:	2226      	movs	r2, #38	@ 0x26
 8003b82:	2100      	movs	r1, #0
 8003b84:	f01f f9a1 	bl	8022eca <memset>
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7ff ffe5 	bl	8003b58 <_ZN8touchgfx6WidgetC1Ev>
 8003b8e:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8003b90:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	23ff      	movs	r3, #255	@ 0xff
 8003b96:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
 8003b9e:	bd10      	pop	{r4, pc}
 8003ba0:	08025878 	.word	0x08025878

08003ba4 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003ba8:	2226      	movs	r2, #38	@ 0x26
 8003baa:	2100      	movs	r1, #0
 8003bac:	f01f f98d 	bl	8022eca <memset>
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff ffd1 	bl	8003b58 <_ZN8touchgfx6WidgetC1Ev>
 8003bb6:	2300      	movs	r3, #0
        : AbstractButton(), up(), down(), alpha(255)
    {
    }
 8003bb8:	4620      	mov	r0, r4
 8003bba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bbc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 8003bc6:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 8003bc8:	6023      	str	r3, [r4, #0]
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003bca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bce:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8003bd0:	8623      	strh	r3, [r4, #48]	@ 0x30
 8003bd2:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 8003bd6:	bd10      	pop	{r4, pc}
 8003bd8:	080258e0 	.word	0x080258e0

08003bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003be2:	2226      	movs	r2, #38	@ 0x26
 8003be4:	2100      	movs	r1, #0
 8003be6:	f01f f970 	bl	8022eca <memset>
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff ffb4 	bl	8003b58 <_ZN8touchgfx6WidgetC1Ev>
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	882b      	ldrh	r3, [r5, #0]
 8003bfa:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8003bfc:	23ff      	movs	r3, #255	@ 0xff
 8003bfe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8003c02:	f00e f910 	bl	8011e26 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003c06:	4620      	mov	r0, r4
 8003c08:	bd38      	pop	{r3, r4, r5, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08025954 	.word	0x08025954

08003c10 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003c12:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003c14:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003c16:	f012 fa5b 	bl	80160d0 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8003c1a:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	9901      	ldr	r1, [sp, #4]
 8003c20:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8003c24:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8003c28:	db04      	blt.n	8003c34 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003c2a:	f012 fa70 	bl	801610e <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8003c2e:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8003c30:	b003      	add	sp, #12
 8003c32:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003c34:	f012 fa6b 	bl	801610e <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8003c38:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 8003c3a:	e7f9      	b.n	8003c30 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08003c3c <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003c3c:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003c3e:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003c42:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003c44:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8003c48:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8003c4c:	4423      	add	r3, r4
 8003c4e:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8003c50:	b22d      	sxth	r5, r5
 8003c52:	442c      	add	r4, r5
 8003c54:	1e69      	subs	r1, r5, #1
 8003c56:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 8003c5a:	3c01      	subs	r4, #1
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	1af0      	subs	r0, r6, r3
 8003c60:	f7ff ffd6 	bl	8003c10 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8003c64:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8003c68:	bd70      	pop	{r4, r5, r6, pc}

08003c6a <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8003c6a:	b538      	push	{r3, r4, r5, lr}
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003c70:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 8003c74:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 8003c78:	440b      	add	r3, r1
 8003c7a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8003c7e:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8003c80:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 8003c84:	b209      	sxth	r1, r1
 8003c86:	1a12      	subs	r2, r2, r0
 8003c88:	1a28      	subs	r0, r5, r0
 8003c8a:	3901      	subs	r1, #1
 8003c8c:	f7ff ffc0 	bl	8003c10 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003c90:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 8003c94:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
	...

08003c9c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	b093      	sub	sp, #76	@ 0x4c
        : presenter(0)
 8003ca4:	2600      	movs	r6, #0
 8003ca6:	f012 fbdd 	bl	8016464 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003caa:	46a0      	mov	r8, r4
 8003cac:	4b8c      	ldr	r3, [pc, #560]	@ (8003ee0 <_ZN15Screen1ViewBaseC1Ev+0x244>)
 8003cae:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8003cb0:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8003cb4:	f848 3b40 	str.w	r3, [r8], #64
 8003cb8:	4640      	mov	r0, r8
 8003cba:	f7ff ff5f 	bl	8003b7c <_ZN8touchgfx3BoxC1Ev>
 8003cbe:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8003cc2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8003cc6:	f104 0bf8 	add.w	fp, r4, #248	@ 0xf8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	9307      	str	r3, [sp, #28]
 8003cce:	f7ff ff55 	bl	8003b7c <_ZN8touchgfx3BoxC1Ev>
 8003cd2:	4648      	mov	r0, r9
 8003cd4:	f7ff ff66 	bl	8003ba4 <_ZN8touchgfx6ButtonC1Ev>
 8003cd8:	f104 03cc 	add.w	r3, r4, #204	@ 0xcc
 8003cdc:	a910      	add	r1, sp, #64	@ 0x40
 8003cde:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	9302      	str	r3, [sp, #8]
 8003ce6:	f7ff ff79 	bl	8003bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003cea:	2226      	movs	r2, #38	@ 0x26
 8003cec:	4631      	mov	r1, r6
 8003cee:	4658      	mov	r0, fp
 8003cf0:	f01f f8eb 	bl	8022eca <memset>
 8003cf4:	4658      	mov	r0, fp
 8003cf6:	f7ff ff2f 	bl	8003b58 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 8003cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ee4 <_ZN15Screen1ViewBaseC1Ev+0x248>)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8003d00:	f8a4 5124 	strh.w	r5, [r4, #292]	@ 0x124
 8003d04:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
 8003d08:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
        : color(col)
 8003d0c:	f8c4 6128 	str.w	r6, [r4, #296]	@ 0x128
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003d10:	f04f 0a01 	mov.w	sl, #1
 8003d14:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
        : TextAreaWithWildcardBase(), wc1(0)
 8003d18:	4b73      	ldr	r3, [pc, #460]	@ (8003ee8 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8003d1a:	f8a4 6130 	strh.w	r6, [r4, #304]	@ 0x130
 8003d1e:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 8003d22:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003d26:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f8c4 6140 	str.w	r6, [r4, #320]	@ 0x140
 8003d30:	9303      	str	r3, [sp, #12]
              text(0)
 8003d32:	e9c4 764e 	strd	r7, r6, [r4, #312]	@ 0x138
 8003d36:	f7ff ff35 	bl	8003ba4 <_ZN8touchgfx6ButtonC1Ev>
 8003d3a:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 8003d3e:	a910      	add	r1, sp, #64	@ 0x40
 8003d40:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8003d44:	4618      	mov	r0, r3
 8003d46:	9304      	str	r3, [sp, #16]
 8003d48:	f7ff ff48 	bl	8003bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003d4c:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003d50:	1d27      	adds	r7, r4, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	9305      	str	r3, [sp, #20]
 8003d56:	f7ff ff25 	bl	8003ba4 <_ZN8touchgfx6ButtonC1Ev>
 8003d5a:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 8003d5e:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8003d62:	f504 7501 	add.w	r5, r4, #516	@ 0x204
 8003d66:	4618      	mov	r0, r3
 8003d68:	a910      	add	r1, sp, #64	@ 0x40
 8003d6a:	9306      	str	r3, [sp, #24]
 8003d6c:	f7ff ff36 	bl	8003bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003d70:	2164      	movs	r1, #100	@ 0x64
 8003d72:	4628      	mov	r0, r5
 8003d74:	f00d fa70 	bl	8011258 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8003d78:	4b5c      	ldr	r3, [pc, #368]	@ (8003eec <_ZN15Screen1ViewBaseC1Ev+0x250>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003d7a:	2263      	movs	r2, #99	@ 0x63
 8003d7c:	4631      	mov	r1, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003d7e:	f8c4 3204 	str.w	r3, [r4, #516]	@ 0x204
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, y)
 8003d82:	f504 7354 	add.w	r3, r4, #848	@ 0x350
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003d86:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003d88:	e9c4 36d2 	strd	r3, r6, [r4, #840]	@ 0x348
 8003d8c:	e9c4 a6d0 	strd	sl, r6, [r4, #832]	@ 0x340
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003d90:	f7ff faaa 	bl	80032e8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8003d94:	4b56      	ldr	r3, [pc, #344]	@ (8003ef0 <_ZN15Screen1ViewBaseC1Ev+0x254>)
 8003d96:	f8c4 3204 	str.w	r3, [r4, #516]	@ 0x204
 8003d9a:	f504 639c 	add.w	r3, r4, #1248	@ 0x4e0
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
 8003d9e:	4618      	mov	r0, r3
 8003da0:	9308      	str	r3, [sp, #32]
 8003da2:	f00c feb9 	bl	8010b18 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003da6:	4b53      	ldr	r3, [pc, #332]	@ (8003ef4 <_ZN15Screen1ViewBaseC1Ev+0x258>)
 8003da8:	f8c4 34e0 	str.w	r3, [r4, #1248]	@ 0x4e0
 8003dac:	f04f 0302 	mov.w	r3, #2
 8003db0:	f884 350c 	strb.w	r3, [r4, #1292]	@ 0x50c
 8003db4:	f504 63a2 	add.w	r3, r4, #1296	@ 0x510
 8003db8:	4618      	mov	r0, r3
 8003dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dbc:	f7fe ff74 	bl	8002ca8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef8 <_ZN15Screen1ViewBaseC1Ev+0x25c>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8003dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8003efc <_ZN15Screen1ViewBaseC1Ev+0x260>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003dc4:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8003dc8:	f8c4 3510 	str.w	r3, [r4, #1296]	@ 0x510
 8003dcc:	3324      	adds	r3, #36	@ 0x24
 8003dce:	f8c4 651c 	str.w	r6, [r4, #1308]	@ 0x51c
 8003dd2:	f504 60a7 	add.w	r0, r4, #1336	@ 0x538
 8003dd6:	f8c4 3518 	str.w	r3, [r4, #1304]	@ 0x518
 8003dda:	f504 5300 	add.w	r3, r4, #8192	@ 0x2000
 8003dde:	e9c3 2456 	strd	r2, r4, [r3, #344]	@ 0x158
 8003de2:	4a47      	ldr	r2, [pc, #284]	@ (8003f00 <_ZN15Screen1ViewBaseC1Ev+0x264>)
 8003de4:	e9c3 2658 	strd	r2, r6, [r3, #352]	@ 0x160
 8003de8:	f00e ff6e 	bl	8012cc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 480, 272);
 8003dec:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003df0:	4632      	mov	r2, r6
 8003df2:	4640      	mov	r0, r8
 8003df4:	4631      	mov	r1, r6
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003dfc:	f7ff fe98 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003e00:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003e04:	4641      	mov	r1, r8
 8003e06:	4638      	mov	r0, r7
 8003e08:	66a3      	str	r3, [r4, #104]	@ 0x68
    buttonPTT.setAction(buttonCallback);
 8003e0a:	f504 5805 	add.w	r8, r4, #8512	@ 0x2140
 8003e0e:	f00a f965 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 480, 272);
 8003e12:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003e16:	4632      	mov	r2, r6
 8003e18:	4631      	mov	r1, r6
 8003e1a:	9807      	ldr	r0, [sp, #28]
    buttonPTT.setAction(buttonCallback);
 8003e1c:	f108 0818 	add.w	r8, r8, #24
    box1.setPosition(0, 0, 480, 272);
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003e26:	f7ff fe83 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <_ZN15Screen1ViewBaseC1Ev+0x268>)
 8003e2c:	9907      	ldr	r1, [sp, #28]
 8003e2e:	4638      	mov	r0, r7
 8003e30:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003e34:	f00a f952 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonPTT.setXY(360, 7);
 8003e38:	4648      	mov	r0, r9
 8003e3a:	2207      	movs	r2, #7
 8003e3c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8003e40:	f7ff fe69 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 8003e44:	2306      	movs	r3, #6
    buttonPTT.setBitmaps(touchgfx::Bitmap(BITMAP_PTT_OFF_ID), touchgfx::Bitmap(BITMAP_PTT_ID));
 8003e46:	aa10      	add	r2, sp, #64	@ 0x40
 8003e48:	4648      	mov	r0, r9
 8003e4a:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8003e4e:	2305      	movs	r3, #5
 8003e50:	a90f      	add	r1, sp, #60	@ 0x3c
 8003e52:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003e56:	f00d fead 	bl	8011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003e5e:	f8c4 80c0 	str.w	r8, [r4, #192]	@ 0xc0
        boundingArea = calculateBoundingArea();
 8003e62:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8003e66:	f00a f939 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(179, 8);
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	21b3      	movs	r1, #179	@ 0xb3
 8003e6e:	9802      	ldr	r0, [sp, #8]
 8003e70:	f7ff fe51 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 8003e74:	2312      	movs	r3, #18
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TUNE_ID));
 8003e76:	a910      	add	r1, sp, #64	@ 0x40
 8003e78:	9802      	ldr	r0, [sp, #8]
 8003e7a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003e7e:	f00d ffd2 	bl	8011e26 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003e82:	9902      	ldr	r1, [sp, #8]
 8003e84:	4638      	mov	r0, r7
 8003e86:	f00a f929 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(194, 28);
 8003e8a:	221c      	movs	r2, #28
 8003e8c:	21c2      	movs	r1, #194	@ 0xc2
 8003e8e:	4658      	mov	r0, fp
 8003e90:	f7ff fe41 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003e94:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8003e98:	4648      	mov	r0, r9
 8003e9a:	4659      	mov	r1, fp
        color = newColor;
 8003e9c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
        boundingArea = calculateBoundingArea();
 8003ea0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
        linespace = space;
 8003ea4:	f8a4 612c 	strh.w	r6, [r4, #300]	@ 0x12c
        boundingArea = calculateBoundingArea();
 8003ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eac:	4798      	blx	r3
 8003eae:	f504 739a 	add.w	r3, r4, #308	@ 0x134
 8003eb2:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003eba:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_SQCM).getText());
 8003ebc:	f204 5924 	addw	r9, r4, #1316	@ 0x524
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b92b      	cbnz	r3, 8003ed0 <_ZN15Screen1ViewBaseC1Ev+0x234>
 8003ec4:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8003ec6:	2160      	movs	r1, #96	@ 0x60
 8003ec8:	4a11      	ldr	r2, [pc, #68]	@ (8003f10 <_ZN15Screen1ViewBaseC1Ev+0x274>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003eca:	4812      	ldr	r0, [pc, #72]	@ (8003f14 <_ZN15Screen1ViewBaseC1Ev+0x278>)
 8003ecc:	f01e fde4 	bl	8022a98 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	@ (8003f18 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d823      	bhi.n	8003f20 <_ZN15Screen1ViewBaseC1Ev+0x284>
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8003eda:	2161      	movs	r1, #97	@ 0x61
 8003edc:	4a0c      	ldr	r2, [pc, #48]	@ (8003f10 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8003ede:	e7f4      	b.n	8003eca <_ZN15Screen1ViewBaseC1Ev+0x22e>
 8003ee0:	08024fd8 	.word	0x08024fd8
 8003ee4:	080246c8 	.word	0x080246c8
 8003ee8:	08024d98 	.word	0x08024d98
 8003eec:	08025534 	.word	0x08025534
 8003ef0:	08024e28 	.word	0x08024e28
 8003ef4:	080257fc 	.word	0x080257fc
 8003ef8:	08025464 	.word	0x08025464
 8003efc:	08024fc0 	.word	0x08024fc0
 8003f00:	080039eb 	.word	0x080039eb
 8003f04:	ff071e85 	.word	0xff071e85
 8003f08:	2402db04 	.word	0x2402db04
 8003f0c:	08024bd6 	.word	0x08024bd6
 8003f10:	08024cd8 	.word	0x08024cd8
 8003f14:	08024c53 	.word	0x08024c53
 8003f18:	2402db08 	.word	0x2402db08
 8003f1c:	08024c9a 	.word	0x08024c9a
        return texts->getText(typedTextId);
 8003f20:	4be8      	ldr	r3, [pc, #928]	@ (80042c4 <_ZN15Screen1ViewBaseC1Ev+0x628>)
 8003f22:	4651      	mov	r1, sl
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	f002 fcab 	bl	8006880 <_ZNK8touchgfx5Texts7getTextEt>
 8003f2a:	4ae7      	ldr	r2, [pc, #924]	@ (80042c8 <_ZN15Screen1ViewBaseC1Ev+0x62c>)
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	210a      	movs	r1, #10
 8003f30:	4648      	mov	r0, r9
 8003f32:	f013 ff0f 	bl	8017d54 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.resizeToCurrentText();
 8003f36:	4658      	mov	r0, fp
        wc1 = value;
 8003f38:	f8c4 9140 	str.w	r9, [r4, #320]	@ 0x140
 8003f3c:	f00d fdbc 	bl	8011ab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003f40:	4be2      	ldr	r3, [pc, #904]	@ (80042cc <_ZN15Screen1ViewBaseC1Ev+0x630>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_20KO));
 8003f42:	a910      	add	r1, sp, #64	@ 0x40
 8003f44:	4658      	mov	r0, fp
 8003f46:	9310      	str	r3, [sp, #64]	@ 0x40
 8003f48:	f04f 0302 	mov.w	r3, #2
 8003f4c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8003f50:	f00d fdd2 	bl	8011af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003f54:	4659      	mov	r1, fp
 8003f56:	4638      	mov	r0, r7
 8003f58:	f00a f8c0 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonLSBUSB.setXY(94, 8);
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	215e      	movs	r1, #94	@ 0x5e
 8003f60:	9803      	ldr	r0, [sp, #12]
 8003f62:	f7ff fdd8 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 8003f66:	2313      	movs	r3, #19
    buttonLSBUSB.setBitmaps(touchgfx::Bitmap(BITMAP_LSB_ID), touchgfx::Bitmap(BITMAP_USB_ID));
 8003f68:	aa10      	add	r2, sp, #64	@ 0x40
 8003f6a:	a90f      	add	r1, sp, #60	@ 0x3c
 8003f6c:	9803      	ldr	r0, [sp, #12]
 8003f6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003f72:	f8ad a03c 	strh.w	sl, [sp, #60]	@ 0x3c
 8003f76:	f00d fe1d 	bl	8011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003f7a:	9903      	ldr	r1, [sp, #12]
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	f8c4 816c 	str.w	r8, [r4, #364]	@ 0x16c
 8003f82:	f00a f8ab 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(14, 48);
 8003f86:	2230      	movs	r2, #48	@ 0x30
 8003f88:	210e      	movs	r1, #14
 8003f8a:	9804      	ldr	r0, [sp, #16]
 8003f8c:	f7ff fdc3 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 8003f90:	2310      	movs	r3, #16
    image2.setBitmap(touchgfx::Bitmap(BITMAP_S910_ID));
 8003f92:	a910      	add	r1, sp, #64	@ 0x40
 8003f94:	9804      	ldr	r0, [sp, #16]
 8003f96:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003f9a:	f00d ff44 	bl	8011e26 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003f9e:	9904      	ldr	r1, [sp, #16]
 8003fa0:	4638      	mov	r0, r7
 8003fa2:	f00a f89b 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonToggleBand.setXY(17, 8);
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	2111      	movs	r1, #17
 8003faa:	9805      	ldr	r0, [sp, #20]
 8003fac:	f7ff fdb3 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 8003fb0:	2303      	movs	r3, #3
    buttonToggleBand.setBitmaps(touchgfx::Bitmap(BITMAP_M40M_ID), touchgfx::Bitmap(BITMAP_M40M_ID));
 8003fb2:	aa10      	add	r2, sp, #64	@ 0x40
 8003fb4:	a90f      	add	r1, sp, #60	@ 0x3c
 8003fb6:	9805      	ldr	r0, [sp, #20]
 8003fb8:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8003fbc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003fc0:	f00d fdf8 	bl	8011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003fc4:	9905      	ldr	r1, [sp, #20]
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f8c4 81cc 	str.w	r8, [r4, #460]	@ 0x1cc
 8003fcc:	f00a f886 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image3.setXY(70, 116);
 8003fd0:	2274      	movs	r2, #116	@ 0x74
 8003fd2:	2146      	movs	r1, #70	@ 0x46
 8003fd4:	9806      	ldr	r0, [sp, #24]
 8003fd6:	f7ff fd9e 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
    image3.setBitmap(touchgfx::Bitmap(BITMAP_DYNGRAPHBACKGROUND_ID));
 8003fda:	a910      	add	r1, sp, #64	@ 0x40
 8003fdc:	9806      	ldr	r0, [sp, #24]
 8003fde:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003fe2:	f00d ff20 	bl	8011e26 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003fe6:	9906      	ldr	r1, [sp, #24]
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f00a f877 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(70, 116, 300, 49);
 8003fee:	2331      	movs	r3, #49	@ 0x31
 8003ff0:	2274      	movs	r2, #116	@ 0x74
 8003ff2:	2146      	movs	r1, #70	@ 0x46
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003ffc:	f7ff fd98 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8004000:	4632      	mov	r2, r6
 8004002:	4651      	mov	r1, sl
 8004004:	4628      	mov	r0, r5
 8004006:	f7ff fb2d 	bl	8003664 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 800400a:	4633      	mov	r3, r6
 800400c:	4632      	mov	r2, r6
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	9600      	str	r6, [sp, #0]
 8004014:	f00d f8d1 	bl	80111ba <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8004018:	4633      	mov	r3, r6
 800401a:	4632      	mov	r2, r6
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	9600      	str	r6, [sp, #0]
 8004022:	f00c fff1 	bl	8011008 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8004026:	2264      	movs	r2, #100	@ 0x64
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	f7ff f9ed 	bl	800340a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8004030:	4ba7      	ldr	r3, [pc, #668]	@ (80042d0 <_ZN15Screen1ViewBaseC1Ev+0x634>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8004032:	9908      	ldr	r1, [sp, #32]
 8004034:	4628      	mov	r0, r5
 8004036:	f8c4 351c 	str.w	r3, [r4, #1308]	@ 0x51c
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 800403a:	f24f 034a 	movw	r3, #61514	@ 0xf04a
 800403e:	f8a4 3520 	strh.w	r3, [r4, #1312]	@ 0x520
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8004042:	2318      	movs	r3, #24
 8004044:	f884 3522 	strb.w	r3, [r4, #1314]	@ 0x522
        canvasPainter = &painter;
 8004048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800404a:	f8c4 3508 	str.w	r3, [r4, #1288]	@ 0x508
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 800404e:	f04f 0302 	mov.w	r3, #2
 8004052:	f884 350c 	strb.w	r3, [r4, #1292]	@ 0x50c
 8004056:	f00c ffe2 	bl	801101e <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 800405a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800405e:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80042d4 <_ZN15Screen1ViewBaseC1Ev+0x638>
 8004062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004066:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800406a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004072:	f2c1 8291 	blt.w	8005598 <_ZN15Screen1ViewBaseC1Ev+0x18fc>
            return (int)(fs + 0.5f);
 8004076:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800407a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800407e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004082:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004086:	4628      	mov	r0, r5
 8004088:	f00d f9a3 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800408c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004090:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80042d8 <_ZN15Screen1ViewBaseC1Ev+0x63c>
 8004094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004098:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800409c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a4:	f2c1 828c 	blt.w	80055c0 <_ZN15Screen1ViewBaseC1Ev+0x1924>
            return (int)(fs + 0.5f);
 80040a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80040b8:	4628      	mov	r0, r5
 80040ba:	f00d f98a 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040be:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80040c2:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80042dc <_ZN15Screen1ViewBaseC1Ev+0x640>
 80040c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	f2c1 8287 	blt.w	80055e8 <_ZN15Screen1ViewBaseC1Ev+0x194c>
            return (int)(fs + 0.5f);
 80040da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80040ea:	4628      	mov	r0, r5
 80040ec:	f00d f971 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040f0:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80040f4:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80042e0 <_ZN15Screen1ViewBaseC1Ev+0x644>
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	f2c1 8282 	blt.w	8005610 <_ZN15Screen1ViewBaseC1Ev+0x1974>
            return (int)(fs + 0.5f);
 800410c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004118:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800411c:	4628      	mov	r0, r5
 800411e:	f00d f958 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004122:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004126:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80042e4 <_ZN15Screen1ViewBaseC1Ev+0x648>
 800412a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800412e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	f2c1 827d 	blt.w	8005638 <_ZN15Screen1ViewBaseC1Ev+0x199c>
            return (int)(fs + 0.5f);
 800413e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800414e:	4628      	mov	r0, r5
 8004150:	f00d f93f 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004154:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004158:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80042e8 <_ZN15Screen1ViewBaseC1Ev+0x64c>
 800415c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004160:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416c:	f2c1 8278 	blt.w	8005660 <_ZN15Screen1ViewBaseC1Ev+0x19c4>
            return (int)(fs + 0.5f);
 8004170:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004174:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800417c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004180:	4628      	mov	r0, r5
 8004182:	f00d f926 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004186:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800418a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80042ec <_ZN15Screen1ViewBaseC1Ev+0x650>
 800418e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004192:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	f2c1 8273 	blt.w	8005688 <_ZN15Screen1ViewBaseC1Ev+0x19ec>
            return (int)(fs + 0.5f);
 80041a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041b2:	4628      	mov	r0, r5
 80041b4:	f00d f90d 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041b8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80041bc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80042f0 <_ZN15Screen1ViewBaseC1Ev+0x654>
 80041c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d0:	f2c1 826e 	blt.w	80056b0 <_ZN15Screen1ViewBaseC1Ev+0x1a14>
            return (int)(fs + 0.5f);
 80041d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041e4:	4628      	mov	r0, r5
 80041e6:	f00d f8f4 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041ea:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80041ee:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80042f4 <_ZN15Screen1ViewBaseC1Ev+0x658>
 80041f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004202:	f2c1 8269 	blt.w	80056d8 <_ZN15Screen1ViewBaseC1Ev+0x1a3c>
            return (int)(fs + 0.5f);
 8004206:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800420a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800420e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004212:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004216:	4628      	mov	r0, r5
 8004218:	f00d f8db 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800421c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004220:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80042f8 <_ZN15Screen1ViewBaseC1Ev+0x65c>
 8004224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004228:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800422c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	f2c1 8264 	blt.w	8005700 <_ZN15Screen1ViewBaseC1Ev+0x1a64>
            return (int)(fs + 0.5f);
 8004238:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800423c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004244:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004248:	4628      	mov	r0, r5
 800424a:	f00d f8c2 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800424e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004252:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80042fc <_ZN15Screen1ViewBaseC1Ev+0x660>
 8004256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800425e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	f2c1 825f 	blt.w	8005728 <_ZN15Screen1ViewBaseC1Ev+0x1a8c>
            return (int)(fs + 0.5f);
 800426a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800426e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004276:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800427a:	4628      	mov	r0, r5
 800427c:	f00d f8a9 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004280:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004284:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004300 <_ZN15Screen1ViewBaseC1Ev+0x664>
 8004288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800428c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004298:	f2c1 825a 	blt.w	8005750 <_ZN15Screen1ViewBaseC1Ev+0x1ab4>
            return (int)(fs + 0.5f);
 800429c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80042a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042ac:	4628      	mov	r0, r5
 80042ae:	f00d f890 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042b2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80042b6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004304 <_ZN15Screen1ViewBaseC1Ev+0x668>
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c2:	e047      	b.n	8004354 <_ZN15Screen1ViewBaseC1Ev+0x6b8>
 80042c4:	2402db10 	.word	0x2402db10
 80042c8:	08024d23 	.word	0x08024d23
 80042cc:	080246c8 	.word	0x080246c8
 80042d0:	ff4af018 	.word	0xff4af018
 80042d4:	40674491 	.word	0x40674491
 80042d8:	4145a0ba 	.word	0x4145a0ba
 80042dc:	41c9ab8a 	.word	0x41c9ab8a
 80042e0:	421cf574 	.word	0x421cf574
 80042e4:	424da133 	.word	0x424da133
 80042e8:	426d3db5 	.word	0x426d3db5
 80042ec:	4276fcf8 	.word	0x4276fcf8
 80042f0:	426bed7a 	.word	0x426bed7a
 80042f4:	425294d7 	.word	0x425294d7
 80042f8:	42353016 	.word	0x42353016
 80042fc:	421f08c9 	.word	0x421f08c9
 8004300:	421987d8 	.word	0x421987d8
 8004304:	4229bf04 	.word	0x4229bf04
 8004308:	424f0536 	.word	0x424f0536
 800430c:	42817f0c 	.word	0x42817f0c
 8004310:	429d8647 	.word	0x429d8647
 8004314:	42b56b30 	.word	0x42b56b30
 8004318:	42c39e3e 	.word	0x42c39e3e
 800431c:	42c4870e 	.word	0x42c4870e
 8004320:	42b766eb 	.word	0x42b766eb
 8004324:	429e8cdb 	.word	0x429e8cdb
 8004328:	427d9c4e 	.word	0x427d9c4e
 800432c:	423cc851 	.word	0x423cc851
 8004330:	4206ec13 	.word	0x4206ec13
 8004334:	41caa517 	.word	0x41caa517
 8004338:	41b84942 	.word	0x41b84942
 800433c:	41d31bfa 	.word	0x41d31bfa
 8004340:	42065940 	.word	0x42065940
 8004344:	4227dbed 	.word	0x4227dbed
 8004348:	4242b7d4 	.word	0x4242b7d4
 800434c:	424dc3da 	.word	0x424dc3da
 8004350:	42446489 	.word	0x42446489
        if (fs >= 0)
 8004354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	f2c1 820c 	blt.w	8005778 <_ZN15Screen1ViewBaseC1Ev+0x1adc>
            return (int)(fs + 0.5f);
 8004360:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800436c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004370:	4628      	mov	r0, r5
 8004372:	f00d f82e 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004376:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800437a:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8004308 <_ZN15Screen1ViewBaseC1Ev+0x66c>
 800437e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004382:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	f2c1 8207 	blt.w	80057a0 <_ZN15Screen1ViewBaseC1Ev+0x1b04>
            return (int)(fs + 0.5f);
 8004392:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800439a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800439e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043a2:	4628      	mov	r0, r5
 80043a4:	f00d f815 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043a8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80043ac:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 800430c <_ZN15Screen1ViewBaseC1Ev+0x670>
 80043b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	f2c1 8202 	blt.w	80057c8 <_ZN15Screen1ViewBaseC1Ev+0x1b2c>
            return (int)(fs + 0.5f);
 80043c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043d4:	4628      	mov	r0, r5
 80043d6:	f00c fffc 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043da:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80043de:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 8004310 <_ZN15Screen1ViewBaseC1Ev+0x674>
 80043e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f2:	f2c1 81fd 	blt.w	80057f0 <_ZN15Screen1ViewBaseC1Ev+0x1b54>
            return (int)(fs + 0.5f);
 80043f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004402:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004406:	4628      	mov	r0, r5
 8004408:	f00c ffe3 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800440c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004410:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 8004314 <_ZN15Screen1ViewBaseC1Ev+0x678>
 8004414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004418:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800441c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	f2c1 81f8 	blt.w	8005818 <_ZN15Screen1ViewBaseC1Ev+0x1b7c>
            return (int)(fs + 0.5f);
 8004428:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800442c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004434:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004438:	4628      	mov	r0, r5
 800443a:	f00c ffca 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800443e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004442:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 8004318 <_ZN15Screen1ViewBaseC1Ev+0x67c>
 8004446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800444e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	f2c1 81f3 	blt.w	8005840 <_ZN15Screen1ViewBaseC1Ev+0x1ba4>
            return (int)(fs + 0.5f);
 800445a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800445e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004466:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800446a:	4628      	mov	r0, r5
 800446c:	f00c ffb1 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004470:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004474:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 800431c <_ZN15Screen1ViewBaseC1Ev+0x680>
 8004478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800447c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004488:	f2c1 81ee 	blt.w	8005868 <_ZN15Screen1ViewBaseC1Ev+0x1bcc>
            return (int)(fs + 0.5f);
 800448c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004498:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800449c:	4628      	mov	r0, r5
 800449e:	f00c ff98 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044a2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80044a6:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 8004320 <_ZN15Screen1ViewBaseC1Ev+0x684>
 80044aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	f2c1 81e9 	blt.w	8005890 <_ZN15Screen1ViewBaseC1Ev+0x1bf4>
            return (int)(fs + 0.5f);
 80044be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044ce:	4628      	mov	r0, r5
 80044d0:	f00c ff7f 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044d4:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80044d8:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8004324 <_ZN15Screen1ViewBaseC1Ev+0x688>
 80044dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	f2c1 81e4 	blt.w	80058b8 <_ZN15Screen1ViewBaseC1Ev+0x1c1c>
            return (int)(fs + 0.5f);
 80044f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004500:	4628      	mov	r0, r5
 8004502:	f00c ff66 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004506:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800450a:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 8004328 <_ZN15Screen1ViewBaseC1Ev+0x68c>
 800450e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004512:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	f2c1 81df 	blt.w	80058e0 <_ZN15Screen1ViewBaseC1Ev+0x1c44>
            return (int)(fs + 0.5f);
 8004522:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800452a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800452e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004532:	4628      	mov	r0, r5
 8004534:	f00c ff4d 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004538:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800453c:	ed1f 7a85 	vldr	s14, [pc, #-532]	@ 800432c <_ZN15Screen1ViewBaseC1Ev+0x690>
 8004540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004544:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	f2c1 81da 	blt.w	8005908 <_ZN15Screen1ViewBaseC1Ev+0x1c6c>
            return (int)(fs + 0.5f);
 8004554:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800455c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004560:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004564:	4628      	mov	r0, r5
 8004566:	f00c ff34 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800456a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800456e:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 8004330 <_ZN15Screen1ViewBaseC1Ev+0x694>
 8004572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004576:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800457a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004582:	f2c1 81d5 	blt.w	8005930 <_ZN15Screen1ViewBaseC1Ev+0x1c94>
            return (int)(fs + 0.5f);
 8004586:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800458a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800458e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004592:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004596:	4628      	mov	r0, r5
 8004598:	f00c ff1b 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800459c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80045a0:	ed1f 7a9c 	vldr	s14, [pc, #-624]	@ 8004334 <_ZN15Screen1ViewBaseC1Ev+0x698>
 80045a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b4:	f2c1 81d0 	blt.w	8005958 <_ZN15Screen1ViewBaseC1Ev+0x1cbc>
            return (int)(fs + 0.5f);
 80045b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045c8:	4628      	mov	r0, r5
 80045ca:	f00c ff02 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045ce:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80045d2:	ed1f 7aa7 	vldr	s14, [pc, #-668]	@ 8004338 <_ZN15Screen1ViewBaseC1Ev+0x69c>
 80045d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	f2c1 81cb 	blt.w	8005980 <_ZN15Screen1ViewBaseC1Ev+0x1ce4>
            return (int)(fs + 0.5f);
 80045ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045fa:	4628      	mov	r0, r5
 80045fc:	f00c fee9 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004600:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004604:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 800433c <_ZN15Screen1ViewBaseC1Ev+0x6a0>
 8004608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800460c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	f2c1 81c6 	blt.w	80059a8 <_ZN15Screen1ViewBaseC1Ev+0x1d0c>
            return (int)(fs + 0.5f);
 800461c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004628:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800462c:	4628      	mov	r0, r5
 800462e:	f00c fed0 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004632:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004636:	ed1f 7abe 	vldr	s14, [pc, #-760]	@ 8004340 <_ZN15Screen1ViewBaseC1Ev+0x6a4>
 800463a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	f2c1 81c1 	blt.w	80059d0 <_ZN15Screen1ViewBaseC1Ev+0x1d34>
            return (int)(fs + 0.5f);
 800464e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800465a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800465e:	4628      	mov	r0, r5
 8004660:	f00c feb7 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004664:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004668:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 8004344 <_ZN15Screen1ViewBaseC1Ev+0x6a8>
 800466c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004670:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467c:	f2c1 81bc 	blt.w	80059f8 <_ZN15Screen1ViewBaseC1Ev+0x1d5c>
            return (int)(fs + 0.5f);
 8004680:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004690:	4628      	mov	r0, r5
 8004692:	f00c fe9e 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004696:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800469a:	ed1f 7ad5 	vldr	s14, [pc, #-852]	@ 8004348 <_ZN15Screen1ViewBaseC1Ev+0x6ac>
 800469e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	f2c1 81b7 	blt.w	8005a20 <_ZN15Screen1ViewBaseC1Ev+0x1d84>
            return (int)(fs + 0.5f);
 80046b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046c2:	4628      	mov	r0, r5
 80046c4:	f00c fe85 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046c8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80046cc:	ed1f 7ae1 	vldr	s14, [pc, #-900]	@ 800434c <_ZN15Screen1ViewBaseC1Ev+0x6b0>
 80046d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	f2c1 81b2 	blt.w	8005a48 <_ZN15Screen1ViewBaseC1Ev+0x1dac>
            return (int)(fs + 0.5f);
 80046e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046f4:	4628      	mov	r0, r5
 80046f6:	f00c fe6c 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046fa:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80046fe:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 8004350 <_ZN15Screen1ViewBaseC1Ev+0x6b4>
 8004702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004706:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800470a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	f2c1 81ad 	blt.w	8005a70 <_ZN15Screen1ViewBaseC1Ev+0x1dd4>
            return (int)(fs + 0.5f);
 8004716:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800471a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800471e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004722:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004726:	4628      	mov	r0, r5
 8004728:	f00c fe53 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800472c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004730:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8004b00 <_ZN15Screen1ViewBaseC1Ev+0xe64>
 8004734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004738:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800473c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004744:	f2c1 81a8 	blt.w	8005a98 <_ZN15Screen1ViewBaseC1Ev+0x1dfc>
            return (int)(fs + 0.5f);
 8004748:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800474c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004754:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004758:	4628      	mov	r0, r5
 800475a:	f00c fe3a 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800475e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004762:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8004b04 <_ZN15Screen1ViewBaseC1Ev+0xe68>
 8004766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800476e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004776:	f2c1 81a3 	blt.w	8005ac0 <_ZN15Screen1ViewBaseC1Ev+0x1e24>
            return (int)(fs + 0.5f);
 800477a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800477e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004786:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800478a:	4628      	mov	r0, r5
 800478c:	f00c fe21 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004790:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004794:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8004b08 <_ZN15Screen1ViewBaseC1Ev+0xe6c>
 8004798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800479c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a8:	f2c1 819e 	blt.w	8005ae8 <_ZN15Screen1ViewBaseC1Ev+0x1e4c>
            return (int)(fs + 0.5f);
 80047ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80047b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047bc:	4628      	mov	r0, r5
 80047be:	f00c fe08 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047c2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80047c6:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8004b0c <_ZN15Screen1ViewBaseC1Ev+0xe70>
 80047ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	f2c1 8199 	blt.w	8005b10 <_ZN15Screen1ViewBaseC1Ev+0x1e74>
            return (int)(fs + 0.5f);
 80047de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80047e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047ee:	4628      	mov	r0, r5
 80047f0:	f00c fdef 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047f4:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80047f8:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8004b10 <_ZN15Screen1ViewBaseC1Ev+0xe74>
 80047fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004800:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480c:	f2c1 8194 	blt.w	8005b38 <_ZN15Screen1ViewBaseC1Ev+0x1e9c>
            return (int)(fs + 0.5f);
 8004810:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800481c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004820:	4628      	mov	r0, r5
 8004822:	f00c fdd6 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004826:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800482a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8004b14 <_ZN15Screen1ViewBaseC1Ev+0xe78>
 800482e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004832:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	f2c1 818f 	blt.w	8005b60 <_ZN15Screen1ViewBaseC1Ev+0x1ec4>
            return (int)(fs + 0.5f);
 8004842:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800484a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800484e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004852:	4628      	mov	r0, r5
 8004854:	f00c fdbd 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004858:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800485c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8004b18 <_ZN15Screen1ViewBaseC1Ev+0xe7c>
 8004860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004864:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	f2c1 818a 	blt.w	8005b88 <_ZN15Screen1ViewBaseC1Ev+0x1eec>
            return (int)(fs + 0.5f);
 8004874:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800487c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004880:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004884:	4628      	mov	r0, r5
 8004886:	f00c fda4 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800488a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800488e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8004b1c <_ZN15Screen1ViewBaseC1Ev+0xe80>
 8004892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004896:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800489a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	f2c1 8185 	blt.w	8005bb0 <_ZN15Screen1ViewBaseC1Ev+0x1f14>
            return (int)(fs + 0.5f);
 80048a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80048aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048b6:	4628      	mov	r0, r5
 80048b8:	f00c fd8b 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048bc:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80048c0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004b20 <_ZN15Screen1ViewBaseC1Ev+0xe84>
 80048c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	f2c1 8180 	blt.w	8005bd8 <_ZN15Screen1ViewBaseC1Ev+0x1f3c>
            return (int)(fs + 0.5f);
 80048d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80048dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048e8:	4628      	mov	r0, r5
 80048ea:	f00c fd72 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048ee:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80048f2:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8004b24 <_ZN15Screen1ViewBaseC1Ev+0xe88>
 80048f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	f2c1 817b 	blt.w	8005c00 <_ZN15Screen1ViewBaseC1Ev+0x1f64>
            return (int)(fs + 0.5f);
 800490a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800490e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004916:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800491a:	4628      	mov	r0, r5
 800491c:	f00c fd59 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004920:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004924:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004b28 <_ZN15Screen1ViewBaseC1Ev+0xe8c>
 8004928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	f2c1 8176 	blt.w	8005c28 <_ZN15Screen1ViewBaseC1Ev+0x1f8c>
            return (int)(fs + 0.5f);
 800493c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004948:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800494c:	4628      	mov	r0, r5
 800494e:	f00c fd40 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004952:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004956:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004b2c <_ZN15Screen1ViewBaseC1Ev+0xe90>
 800495a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800495e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	f2c1 8171 	blt.w	8005c50 <_ZN15Screen1ViewBaseC1Ev+0x1fb4>
            return (int)(fs + 0.5f);
 800496e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800497a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800497e:	4628      	mov	r0, r5
 8004980:	f00c fd27 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004984:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004988:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8004b30 <_ZN15Screen1ViewBaseC1Ev+0xe94>
 800498c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004990:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	f2c1 816c 	blt.w	8005c78 <_ZN15Screen1ViewBaseC1Ev+0x1fdc>
            return (int)(fs + 0.5f);
 80049a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049b0:	4628      	mov	r0, r5
 80049b2:	f00c fd0e 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049b6:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80049ba:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004b34 <_ZN15Screen1ViewBaseC1Ev+0xe98>
 80049be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ce:	f2c1 8167 	blt.w	8005ca0 <_ZN15Screen1ViewBaseC1Ev+0x2004>
            return (int)(fs + 0.5f);
 80049d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049de:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049e2:	4628      	mov	r0, r5
 80049e4:	f00c fcf5 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049e8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80049ec:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8004b38 <_ZN15Screen1ViewBaseC1Ev+0xe9c>
 80049f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	f2c1 8162 	blt.w	8005cc8 <_ZN15Screen1ViewBaseC1Ev+0x202c>
            return (int)(fs + 0.5f);
 8004a04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a10:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a14:	4628      	mov	r0, r5
 8004a16:	f00c fcdc 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a1a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004a1e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004b3c <_ZN15Screen1ViewBaseC1Ev+0xea0>
 8004a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a26:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	f2c1 815d 	blt.w	8005cf0 <_ZN15Screen1ViewBaseC1Ev+0x2054>
            return (int)(fs + 0.5f);
 8004a36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a42:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a46:	4628      	mov	r0, r5
 8004a48:	f00c fcc3 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a4c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004a50:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004b40 <_ZN15Screen1ViewBaseC1Ev+0xea4>
 8004a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a58:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	f2c1 8158 	blt.w	8005d18 <_ZN15Screen1ViewBaseC1Ev+0x207c>
            return (int)(fs + 0.5f);
 8004a68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a74:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f00c fcaa 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a7e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004a82:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004b44 <_ZN15Screen1ViewBaseC1Ev+0xea8>
 8004a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	f2c1 8153 	blt.w	8005d40 <_ZN15Screen1ViewBaseC1Ev+0x20a4>
            return (int)(fs + 0.5f);
 8004a9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f00c fc91 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ab0:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004ab4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004b48 <_ZN15Screen1ViewBaseC1Ev+0xeac>
 8004ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	f2c1 814e 	blt.w	8005d68 <_ZN15Screen1ViewBaseC1Ev+0x20cc>
            return (int)(fs + 0.5f);
 8004acc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004adc:	4628      	mov	r0, r5
 8004ade:	f00c fc78 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ae2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004ae6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004b4c <_ZN15Screen1ViewBaseC1Ev+0xeb0>
 8004aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	f2c1 8149 	blt.w	8005d90 <_ZN15Screen1ViewBaseC1Ev+0x20f4>
 8004afe:	e04d      	b.n	8004b9c <_ZN15Screen1ViewBaseC1Ev+0xf00>
 8004b00:	4227c03f 	.word	0x4227c03f
 8004b04:	41fd0592 	.word	0x41fd0592
 8004b08:	41a67d80 	.word	0x41a67d80
 8004b0c:	41474802 	.word	0x41474802
 8004b10:	4111c3b5 	.word	0x4111c3b5
 8004b14:	41444895 	.word	0x41444895
 8004b18:	41afbab7 	.word	0x41afbab7
 8004b1c:	42130079 	.word	0x42130079
 8004b20:	4257f6e8 	.word	0x4257f6e8
 8004b24:	428cfa2f 	.word	0x428cfa2f
 8004b28:	42a66ead 	.word	0x42a66ead
 8004b2c:	42b40a50 	.word	0x42b40a50
 8004b30:	42b437f2 	.word	0x42b437f2
 8004b34:	42a86d3c 	.word	0x42a86d3c
 8004b38:	4294bfce 	.word	0x4294bfce
 8004b3c:	427db215 	.word	0x427db215
 8004b40:	42591535 	.word	0x42591535
 8004b44:	4244ba17 	.word	0x4244ba17
 8004b48:	4244e64c 	.word	0x4244e64c
 8004b4c:	42580f5f 	.word	0x42580f5f
 8004b50:	42774ab3 	.word	0x42774ab3
 8004b54:	428c0ae0 	.word	0x428c0ae0
 8004b58:	42978301 	.word	0x42978301
 8004b5c:	42995b8d 	.word	0x42995b8d
 8004b60:	428f1efc 	.word	0x428f1efc
 8004b64:	4272862d 	.word	0x4272862d
 8004b68:	423641e2 	.word	0x423641e2
 8004b6c:	41e8de64 	.word	0x41e8de64
 8004b70:	416735f2 	.word	0x416735f2
 8004b74:	408f064f 	.word	0x408f064f
 8004b78:	3f87a14d 	.word	0x3f87a14d
 8004b7c:	40960c20 	.word	0x40960c20
 8004b80:	4164c9cf 	.word	0x4164c9cf
 8004b84:	41dc929e 	.word	0x41dc929e
 8004b88:	4225f8cb 	.word	0x4225f8cb
 8004b8c:	4254568f 	.word	0x4254568f
 8004b90:	42707480 	.word	0x42707480
 8004b94:	427677c2 	.word	0x427677c2
 8004b98:	42686b6e 	.word	0x42686b6e
            return (int)(fs + 0.5f);
 8004b9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ba8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004bac:	4628      	mov	r0, r5
 8004bae:	f00c fc10 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004bb2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004bb6:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8004b50 <_ZN15Screen1ViewBaseC1Ev+0xeb4>
 8004bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bca:	f2c1 80f5 	blt.w	8005db8 <_ZN15Screen1ViewBaseC1Ev+0x211c>
            return (int)(fs + 0.5f);
 8004bce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bda:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004bde:	4628      	mov	r0, r5
 8004be0:	f00c fbf7 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004be4:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004be8:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8004b54 <_ZN15Screen1ViewBaseC1Ev+0xeb8>
 8004bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	f2c1 80f0 	blt.w	8005de0 <_ZN15Screen1ViewBaseC1Ev+0x2144>
            return (int)(fs + 0.5f);
 8004c00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c0c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c10:	4628      	mov	r0, r5
 8004c12:	f00c fbde 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c16:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004c1a:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 8004b58 <_ZN15Screen1ViewBaseC1Ev+0xebc>
 8004c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2e:	f2c1 80eb 	blt.w	8005e08 <_ZN15Screen1ViewBaseC1Ev+0x216c>
            return (int)(fs + 0.5f);
 8004c32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c42:	4628      	mov	r0, r5
 8004c44:	f00c fbc5 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c48:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004c4c:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8004b5c <_ZN15Screen1ViewBaseC1Ev+0xec0>
 8004c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c60:	f2c1 80e6 	blt.w	8005e30 <_ZN15Screen1ViewBaseC1Ev+0x2194>
            return (int)(fs + 0.5f);
 8004c64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c74:	4628      	mov	r0, r5
 8004c76:	f00c fbac 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c7a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004c7e:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8004b60 <_ZN15Screen1ViewBaseC1Ev+0xec4>
 8004c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c86:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	f2c1 80e1 	blt.w	8005e58 <_ZN15Screen1ViewBaseC1Ev+0x21bc>
            return (int)(fs + 0.5f);
 8004c96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f00c fb93 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cac:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004cb0:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8004b64 <_ZN15Screen1ViewBaseC1Ev+0xec8>
 8004cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	f2c1 80dc 	blt.w	8005e80 <_ZN15Screen1ViewBaseC1Ev+0x21e4>
            return (int)(fs + 0.5f);
 8004cc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cd4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f00c fb7a 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cde:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004ce2:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8004b68 <_ZN15Screen1ViewBaseC1Ev+0xecc>
 8004ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	f2c1 80d7 	blt.w	8005ea8 <_ZN15Screen1ViewBaseC1Ev+0x220c>
            return (int)(fs + 0.5f);
 8004cfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d06:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f00c fb61 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d10:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004d14:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 8004b6c <_ZN15Screen1ViewBaseC1Ev+0xed0>
 8004d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	f2c1 80d2 	blt.w	8005ed0 <_ZN15Screen1ViewBaseC1Ev+0x2234>
            return (int)(fs + 0.5f);
 8004d2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d38:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f00c fb48 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d42:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004d46:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8004b70 <_ZN15Screen1ViewBaseC1Ev+0xed4>
 8004d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	f2c1 80cd 	blt.w	8005ef8 <_ZN15Screen1ViewBaseC1Ev+0x225c>
            return (int)(fs + 0.5f);
 8004d5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d6a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f00c fb2f 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d74:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004d78:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8004b74 <_ZN15Screen1ViewBaseC1Ev+0xed8>
 8004d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d80:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	f2c1 80c8 	blt.w	8005f20 <_ZN15Screen1ViewBaseC1Ev+0x2284>
            return (int)(fs + 0.5f);
 8004d90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d9c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004da0:	4628      	mov	r0, r5
 8004da2:	f00c fb16 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004da6:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004daa:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8004b78 <_ZN15Screen1ViewBaseC1Ev+0xedc>
 8004dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004db6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	f2c1 80c3 	blt.w	8005f48 <_ZN15Screen1ViewBaseC1Ev+0x22ac>
            return (int)(fs + 0.5f);
 8004dc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f00c fafd 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004dd8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004ddc:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 8004b7c <_ZN15Screen1ViewBaseC1Ev+0xee0>
 8004de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	f2c1 80be 	blt.w	8005f70 <_ZN15Screen1ViewBaseC1Ev+0x22d4>
            return (int)(fs + 0.5f);
 8004df4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e00:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e04:	4628      	mov	r0, r5
 8004e06:	f00c fae4 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e0a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004e0e:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8004b80 <_ZN15Screen1ViewBaseC1Ev+0xee4>
 8004e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e16:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	f2c1 80b9 	blt.w	8005f98 <_ZN15Screen1ViewBaseC1Ev+0x22fc>
            return (int)(fs + 0.5f);
 8004e26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e32:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e36:	4628      	mov	r0, r5
 8004e38:	f00c facb 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e3c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004e40:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8004b84 <_ZN15Screen1ViewBaseC1Ev+0xee8>
 8004e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e48:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	f2c1 80b4 	blt.w	8005fc0 <_ZN15Screen1ViewBaseC1Ev+0x2324>
            return (int)(fs + 0.5f);
 8004e58:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e64:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f00c fab2 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e6e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004e72:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8004b88 <_ZN15Screen1ViewBaseC1Ev+0xeec>
 8004e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	f2c1 80af 	blt.w	8005fe8 <_ZN15Screen1ViewBaseC1Ev+0x234c>
            return (int)(fs + 0.5f);
 8004e8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e96:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f00c fa99 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ea0:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004ea4:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8004b8c <_ZN15Screen1ViewBaseC1Ev+0xef0>
 8004ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004eb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb8:	f2c1 80aa 	blt.w	8006010 <_ZN15Screen1ViewBaseC1Ev+0x2374>
            return (int)(fs + 0.5f);
 8004ebc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ec8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f00c fa80 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ed2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004ed6:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8004b90 <_ZN15Screen1ViewBaseC1Ev+0xef4>
 8004eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ede:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	f2c1 80a5 	blt.w	8006038 <_ZN15Screen1ViewBaseC1Ev+0x239c>
            return (int)(fs + 0.5f);
 8004eee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004efa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004efe:	4628      	mov	r0, r5
 8004f00:	f00c fa67 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f04:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004f08:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8004b94 <_ZN15Screen1ViewBaseC1Ev+0xef8>
 8004f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f10:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	f2c1 80a0 	blt.w	8006060 <_ZN15Screen1ViewBaseC1Ev+0x23c4>
            return (int)(fs + 0.5f);
 8004f20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f2c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f30:	4628      	mov	r0, r5
 8004f32:	f00c fa4e 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f36:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004f3a:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8004b98 <_ZN15Screen1ViewBaseC1Ev+0xefc>
 8004f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f42:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	f2c1 809b 	blt.w	8006088 <_ZN15Screen1ViewBaseC1Ev+0x23ec>
            return (int)(fs + 0.5f);
 8004f52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f5e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f62:	4628      	mov	r0, r5
 8004f64:	f00c fa35 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f68:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004f6c:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 800533c <_ZN15Screen1ViewBaseC1Ev+0x16a0>
 8004f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f74:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	f2c1 8096 	blt.w	80060b0 <_ZN15Screen1ViewBaseC1Ev+0x2414>
            return (int)(fs + 0.5f);
 8004f84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f94:	4628      	mov	r0, r5
 8004f96:	f00c fa1c 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f9a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004f9e:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8005340 <_ZN15Screen1ViewBaseC1Ev+0x16a4>
 8004fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	f2c1 8091 	blt.w	80060d8 <_ZN15Screen1ViewBaseC1Ev+0x243c>
            return (int)(fs + 0.5f);
 8004fb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f00c fa03 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fcc:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8004fd0:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8005344 <_ZN15Screen1ViewBaseC1Ev+0x16a8>
 8004fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	f2c1 808c 	blt.w	8006100 <_ZN15Screen1ViewBaseC1Ev+0x2464>
            return (int)(fs + 0.5f);
 8004fe8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ff4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f00c f9ea 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ffe:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005002:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8005348 <_ZN15Screen1ViewBaseC1Ev+0x16ac>
 8005006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800500a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800500e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	f2c1 8087 	blt.w	8006128 <_ZN15Screen1ViewBaseC1Ev+0x248c>
            return (int)(fs + 0.5f);
 800501a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800501e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005026:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800502a:	4628      	mov	r0, r5
 800502c:	f00c f9d1 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005030:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005034:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 800534c <_ZN15Screen1ViewBaseC1Ev+0x16b0>
 8005038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800503c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	f2c1 8082 	blt.w	8006150 <_ZN15Screen1ViewBaseC1Ev+0x24b4>
            return (int)(fs + 0.5f);
 800504c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005058:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800505c:	4628      	mov	r0, r5
 800505e:	f00c f9b8 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005062:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005066:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005350 <_ZN15Screen1ViewBaseC1Ev+0x16b4>
 800506a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800506e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	f2c1 807d 	blt.w	8006178 <_ZN15Screen1ViewBaseC1Ev+0x24dc>
            return (int)(fs + 0.5f);
 800507e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005082:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800508a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800508e:	4628      	mov	r0, r5
 8005090:	f00c f99f 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005094:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005098:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8005354 <_ZN15Screen1ViewBaseC1Ev+0x16b8>
 800509c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	f2c1 8078 	blt.w	80061a0 <_ZN15Screen1ViewBaseC1Ev+0x2504>
            return (int)(fs + 0.5f);
 80050b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80050b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050bc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050c0:	4628      	mov	r0, r5
 80050c2:	f00c f986 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050c6:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80050ca:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8005358 <_ZN15Screen1ViewBaseC1Ev+0x16bc>
 80050ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	f2c1 8073 	blt.w	80061c8 <_ZN15Screen1ViewBaseC1Ev+0x252c>
            return (int)(fs + 0.5f);
 80050e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80050e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050f2:	4628      	mov	r0, r5
 80050f4:	f00c f96d 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050f8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80050fc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800535c <_ZN15Screen1ViewBaseC1Ev+0x16c0>
 8005100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005104:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005110:	f2c1 806e 	blt.w	80061f0 <_ZN15Screen1ViewBaseC1Ev+0x2554>
            return (int)(fs + 0.5f);
 8005114:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800511c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005120:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005124:	4628      	mov	r0, r5
 8005126:	f00c f954 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800512a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800512e:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8005360 <_ZN15Screen1ViewBaseC1Ev+0x16c4>
 8005132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005136:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800513a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	f2c1 8069 	blt.w	8006218 <_ZN15Screen1ViewBaseC1Ev+0x257c>
            return (int)(fs + 0.5f);
 8005146:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800514a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800514e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005152:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005156:	4628      	mov	r0, r5
 8005158:	f00c f93b 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800515c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005160:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005364 <_ZN15Screen1ViewBaseC1Ev+0x16c8>
 8005164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005168:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800516c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	f2c1 8064 	blt.w	8006240 <_ZN15Screen1ViewBaseC1Ev+0x25a4>
            return (int)(fs + 0.5f);
 8005178:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800517c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005184:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005188:	4628      	mov	r0, r5
 800518a:	f00c f922 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800518e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005192:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8005368 <_ZN15Screen1ViewBaseC1Ev+0x16cc>
 8005196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800519a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800519e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	f2c1 805f 	blt.w	8006268 <_ZN15Screen1ViewBaseC1Ev+0x25cc>
            return (int)(fs + 0.5f);
 80051aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051ba:	4628      	mov	r0, r5
 80051bc:	f00c f909 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051c0:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80051c4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800536c <_ZN15Screen1ViewBaseC1Ev+0x16d0>
 80051c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	f2c1 805a 	blt.w	8006290 <_ZN15Screen1ViewBaseC1Ev+0x25f4>
            return (int)(fs + 0.5f);
 80051dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051ec:	4628      	mov	r0, r5
 80051ee:	f00c f8f0 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051f2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80051f6:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8005370 <_ZN15Screen1ViewBaseC1Ev+0x16d4>
 80051fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	f2c1 8055 	blt.w	80062b8 <_ZN15Screen1ViewBaseC1Ev+0x261c>
            return (int)(fs + 0.5f);
 800520e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800521a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800521e:	4628      	mov	r0, r5
 8005220:	f00c f8d7 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005224:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005228:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005374 <_ZN15Screen1ViewBaseC1Ev+0x16d8>
 800522c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005230:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	f2c1 8050 	blt.w	80062e0 <_ZN15Screen1ViewBaseC1Ev+0x2644>
            return (int)(fs + 0.5f);
 8005240:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800524c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005250:	4628      	mov	r0, r5
 8005252:	f00c f8be 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005256:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800525a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005378 <_ZN15Screen1ViewBaseC1Ev+0x16dc>
 800525e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005262:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	f2c1 804b 	blt.w	8006308 <_ZN15Screen1ViewBaseC1Ev+0x266c>
            return (int)(fs + 0.5f);
 8005272:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800527a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800527e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005282:	4628      	mov	r0, r5
 8005284:	f00c f8a5 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005288:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800528c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800537c <_ZN15Screen1ViewBaseC1Ev+0x16e0>
 8005290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005294:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a0:	f2c1 8046 	blt.w	8006330 <_ZN15Screen1ViewBaseC1Ev+0x2694>
            return (int)(fs + 0.5f);
 80052a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80052a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052b4:	4628      	mov	r0, r5
 80052b6:	f00c f88c 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052ba:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80052be:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005380 <_ZN15Screen1ViewBaseC1Ev+0x16e4>
 80052c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	f2c1 8041 	blt.w	8006358 <_ZN15Screen1ViewBaseC1Ev+0x26bc>
            return (int)(fs + 0.5f);
 80052d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80052da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052e6:	4628      	mov	r0, r5
 80052e8:	f00c f873 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052ec:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80052f0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005384 <_ZN15Screen1ViewBaseC1Ev+0x16e8>
 80052f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005304:	f2c1 803c 	blt.w	8006380 <_ZN15Screen1ViewBaseC1Ev+0x26e4>
            return (int)(fs + 0.5f);
 8005308:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800530c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005314:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005318:	4628      	mov	r0, r5
 800531a:	f00c f85a 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800531e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005322:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005388 <_ZN15Screen1ViewBaseC1Ev+0x16ec>
 8005326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800532e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	f2c1 8037 	blt.w	80063a8 <_ZN15Screen1ViewBaseC1Ev+0x270c>
 800533a:	e039      	b.n	80053b0 <_ZN15Screen1ViewBaseC1Ev+0x1714>
 800533c:	424d9c9a 	.word	0x424d9c9a
 8005340:	4230a957 	.word	0x4230a957
 8005344:	421cbdcf 	.word	0x421cbdcf
 8005348:	421aae5e 	.word	0x421aae5e
 800534c:	422ea5c1 	.word	0x422ea5c1
 8005350:	4256fa95 	.word	0x4256fa95
 8005354:	42863b46 	.word	0x42863b46
 8005358:	42a1ffa0 	.word	0x42a1ffa0
 800535c:	42b89cf0 	.word	0x42b89cf0
 8005360:	42c4c265 	.word	0x42c4c265
 8005364:	42c346b9 	.word	0x42c346b9
 8005368:	42b3f03b 	.word	0x42b3f03b
 800536c:	429988ef 	.word	0x429988ef
 8005370:	42727338 	.word	0x42727338
 8005374:	4232a77c 	.word	0x4232a77c
 8005378:	41ff5700 	.word	0x41ff5700
 800537c:	41c41769 	.word	0x41c41769
 8005380:	41b9e8eb 	.word	0x41b9e8eb
 8005384:	41db299e 	.word	0x41db299e
 8005388:	420bf871 	.word	0x420bf871
 800538c:	422d21e8 	.word	0x422d21e8
 8005390:	4245dfa7 	.word	0x4245dfa7
 8005394:	424da903 	.word	0x424da903
 8005398:	4240ce59 	.word	0x4240ce59
 800539c:	4221723a 	.word	0x4221723a
 80053a0:	41ee1bf5 	.word	0x41ee1bf5
 80053a4:	41993e96 	.word	0x41993e96
 80053a8:	4137c45d 	.word	0x4137c45d
 80053ac:	4112a858 	.word	0x4112a858
            return (int)(fs + 0.5f);
 80053b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053bc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053c0:	4628      	mov	r0, r5
 80053c2:	f00c f806 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053c6:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80053ca:	ed1f 7a10 	vldr	s14, [pc, #-64]	@ 800538c <_ZN15Screen1ViewBaseC1Ev+0x16f0>
 80053ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	f2c0 87f7 	blt.w	80063d0 <_ZN15Screen1ViewBaseC1Ev+0x2734>
            return (int)(fs + 0.5f);
 80053e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053f2:	4628      	mov	r0, r5
 80053f4:	f00b ffed 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053f8:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80053fc:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 8005390 <_ZN15Screen1ViewBaseC1Ev+0x16f4>
 8005400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005404:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	f2c0 87f2 	blt.w	80063f8 <_ZN15Screen1ViewBaseC1Ev+0x275c>
            return (int)(fs + 0.5f);
 8005414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800541c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005420:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005424:	4628      	mov	r0, r5
 8005426:	f00b ffd4 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800542a:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800542e:	ed1f 7a27 	vldr	s14, [pc, #-156]	@ 8005394 <_ZN15Screen1ViewBaseC1Ev+0x16f8>
 8005432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005436:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800543a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	f2c0 87ed 	blt.w	8006420 <_ZN15Screen1ViewBaseC1Ev+0x2784>
            return (int)(fs + 0.5f);
 8005446:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800544a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800544e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005452:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005456:	4628      	mov	r0, r5
 8005458:	f00b ffbb 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800545c:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005460:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 8005398 <_ZN15Screen1ViewBaseC1Ev+0x16fc>
 8005464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005468:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800546c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005474:	f2c0 87e8 	blt.w	8006448 <_ZN15Screen1ViewBaseC1Ev+0x27ac>
            return (int)(fs + 0.5f);
 8005478:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800547c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005484:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005488:	4628      	mov	r0, r5
 800548a:	f00b ffa2 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800548e:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005492:	ed1f 7a3e 	vldr	s14, [pc, #-248]	@ 800539c <_ZN15Screen1ViewBaseC1Ev+0x1700>
 8005496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800549e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	f2c0 87e3 	blt.w	8006470 <_ZN15Screen1ViewBaseC1Ev+0x27d4>
            return (int)(fs + 0.5f);
 80054aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054ba:	4628      	mov	r0, r5
 80054bc:	f00b ff89 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054c0:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80054c4:	ed1f 7a4a 	vldr	s14, [pc, #-296]	@ 80053a0 <_ZN15Screen1ViewBaseC1Ev+0x1704>
 80054c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	f2c0 87de 	blt.w	8006498 <_ZN15Screen1ViewBaseC1Ev+0x27fc>
            return (int)(fs + 0.5f);
 80054dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054ec:	4628      	mov	r0, r5
 80054ee:	f00b ff70 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054f2:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 80054f6:	ed1f 7a55 	vldr	s14, [pc, #-340]	@ 80053a4 <_ZN15Screen1ViewBaseC1Ev+0x1708>
 80054fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	f2c0 87d9 	blt.w	80064c0 <_ZN15Screen1ViewBaseC1Ev+0x2824>
            return (int)(fs + 0.5f);
 800550e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800551a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800551e:	4628      	mov	r0, r5
 8005520:	f00b ff57 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005524:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 8005528:	ed1f 7a61 	vldr	s14, [pc, #-388]	@ 80053a8 <_ZN15Screen1ViewBaseC1Ev+0x170c>
 800552c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005530:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553c:	f2c0 87d4 	blt.w	80064e8 <_ZN15Screen1ViewBaseC1Ev+0x284c>
            return (int)(fs + 0.5f);
 8005540:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005544:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800554c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005550:	4628      	mov	r0, r5
 8005552:	f00b ff3e 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005556:	edd4 7a8e 	vldr	s15, [r4, #568]	@ 0x238
 800555a:	ed1f 7a6c 	vldr	s14, [pc, #-432]	@ 80053ac <_ZN15Screen1ViewBaseC1Ev+0x1710>
 800555e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005562:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556e:	f2c0 87cf 	blt.w	8006510 <_ZN15Screen1ViewBaseC1Ev+0x2874>
            return (int)(fs + 0.5f);
 8005572:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800557a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800557e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005582:	4628      	mov	r0, r5
 8005584:	f00b ff25 	bl	80113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8005588:	4638      	mov	r0, r7
 800558a:	4629      	mov	r1, r5
 800558c:	f008 fda6 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005590:	4620      	mov	r0, r4
 8005592:	b013      	add	sp, #76	@ 0x4c
 8005594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005598:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800559c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055a0:	ee17 3a10 	vmov	r3, s14
 80055a4:	3b01      	subs	r3, #1
 80055a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055aa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055b6:	ee17 1a90 	vmov	r1, s15
 80055ba:	4419      	add	r1, r3
 80055bc:	f7fe bd63 	b.w	8004086 <_ZN15Screen1ViewBaseC1Ev+0x3ea>
 80055c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055c4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055c8:	ee17 3a10 	vmov	r3, s14
 80055cc:	3b01      	subs	r3, #1
 80055ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055d2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055de:	ee17 1a90 	vmov	r1, s15
 80055e2:	4419      	add	r1, r3
 80055e4:	f7fe bd68 	b.w	80040b8 <_ZN15Screen1ViewBaseC1Ev+0x41c>
 80055e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055f0:	ee17 3a10 	vmov	r3, s14
 80055f4:	3b01      	subs	r3, #1
 80055f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055fa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005606:	ee17 1a90 	vmov	r1, s15
 800560a:	4419      	add	r1, r3
 800560c:	f7fe bd6d 	b.w	80040ea <_ZN15Screen1ViewBaseC1Ev+0x44e>
 8005610:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005614:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005618:	ee17 3a10 	vmov	r3, s14
 800561c:	3b01      	subs	r3, #1
 800561e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005622:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800562a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800562e:	ee17 1a90 	vmov	r1, s15
 8005632:	4419      	add	r1, r3
 8005634:	f7fe bd72 	b.w	800411c <_ZN15Screen1ViewBaseC1Ev+0x480>
 8005638:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800563c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005640:	ee17 3a10 	vmov	r3, s14
 8005644:	3b01      	subs	r3, #1
 8005646:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800564a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005656:	ee17 1a90 	vmov	r1, s15
 800565a:	4419      	add	r1, r3
 800565c:	f7fe bd77 	b.w	800414e <_ZN15Screen1ViewBaseC1Ev+0x4b2>
 8005660:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005664:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005668:	ee17 3a10 	vmov	r3, s14
 800566c:	3b01      	subs	r3, #1
 800566e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005672:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800567e:	ee17 1a90 	vmov	r1, s15
 8005682:	4419      	add	r1, r3
 8005684:	f7fe bd7c 	b.w	8004180 <_ZN15Screen1ViewBaseC1Ev+0x4e4>
 8005688:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800568c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005690:	ee17 3a10 	vmov	r3, s14
 8005694:	3b01      	subs	r3, #1
 8005696:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800569a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a6:	ee17 1a90 	vmov	r1, s15
 80056aa:	4419      	add	r1, r3
 80056ac:	f7fe bd81 	b.w	80041b2 <_ZN15Screen1ViewBaseC1Ev+0x516>
 80056b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80056b8:	ee17 3a10 	vmov	r3, s14
 80056bc:	3b01      	subs	r3, #1
 80056be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056c2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80056c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ce:	ee17 1a90 	vmov	r1, s15
 80056d2:	4419      	add	r1, r3
 80056d4:	f7fe bd86 	b.w	80041e4 <_ZN15Screen1ViewBaseC1Ev+0x548>
 80056d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80056e0:	ee17 3a10 	vmov	r3, s14
 80056e4:	3b01      	subs	r3, #1
 80056e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056ea:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80056ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056f6:	ee17 1a90 	vmov	r1, s15
 80056fa:	4419      	add	r1, r3
 80056fc:	f7fe bd8b 	b.w	8004216 <_ZN15Screen1ViewBaseC1Ev+0x57a>
 8005700:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005704:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005708:	ee17 3a10 	vmov	r3, s14
 800570c:	3b01      	subs	r3, #1
 800570e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005712:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800571e:	ee17 1a90 	vmov	r1, s15
 8005722:	4419      	add	r1, r3
 8005724:	f7fe bd90 	b.w	8004248 <_ZN15Screen1ViewBaseC1Ev+0x5ac>
 8005728:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800572c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005730:	ee17 3a10 	vmov	r3, s14
 8005734:	3b01      	subs	r3, #1
 8005736:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800573a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005746:	ee17 1a90 	vmov	r1, s15
 800574a:	4419      	add	r1, r3
 800574c:	f7fe bd95 	b.w	800427a <_ZN15Screen1ViewBaseC1Ev+0x5de>
 8005750:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005754:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005758:	ee17 3a10 	vmov	r3, s14
 800575c:	3b01      	subs	r3, #1
 800575e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005762:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800576e:	ee17 1a90 	vmov	r1, s15
 8005772:	4419      	add	r1, r3
 8005774:	f7fe bd9a 	b.w	80042ac <_ZN15Screen1ViewBaseC1Ev+0x610>
 8005778:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800577c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005780:	ee17 3a10 	vmov	r3, s14
 8005784:	3b01      	subs	r3, #1
 8005786:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800578a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800578e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005796:	ee17 1a90 	vmov	r1, s15
 800579a:	4419      	add	r1, r3
 800579c:	f7fe bde8 	b.w	8004370 <_ZN15Screen1ViewBaseC1Ev+0x6d4>
 80057a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057a8:	ee17 3a10 	vmov	r3, s14
 80057ac:	3b01      	subs	r3, #1
 80057ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057b2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80057b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057be:	ee17 1a90 	vmov	r1, s15
 80057c2:	4419      	add	r1, r3
 80057c4:	f7fe bded 	b.w	80043a2 <_ZN15Screen1ViewBaseC1Ev+0x706>
 80057c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057d0:	ee17 3a10 	vmov	r3, s14
 80057d4:	3b01      	subs	r3, #1
 80057d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057da:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e6:	ee17 1a90 	vmov	r1, s15
 80057ea:	4419      	add	r1, r3
 80057ec:	f7fe bdf2 	b.w	80043d4 <_ZN15Screen1ViewBaseC1Ev+0x738>
 80057f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057f8:	ee17 3a10 	vmov	r3, s14
 80057fc:	3b01      	subs	r3, #1
 80057fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005802:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800580e:	ee17 1a90 	vmov	r1, s15
 8005812:	4419      	add	r1, r3
 8005814:	f7fe bdf7 	b.w	8004406 <_ZN15Screen1ViewBaseC1Ev+0x76a>
 8005818:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800581c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005820:	ee17 3a10 	vmov	r3, s14
 8005824:	3b01      	subs	r3, #1
 8005826:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800582a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005836:	ee17 1a90 	vmov	r1, s15
 800583a:	4419      	add	r1, r3
 800583c:	f7fe bdfc 	b.w	8004438 <_ZN15Screen1ViewBaseC1Ev+0x79c>
 8005840:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005844:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005848:	ee17 3a10 	vmov	r3, s14
 800584c:	3b01      	subs	r3, #1
 800584e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005852:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800585e:	ee17 1a90 	vmov	r1, s15
 8005862:	4419      	add	r1, r3
 8005864:	f7fe be01 	b.w	800446a <_ZN15Screen1ViewBaseC1Ev+0x7ce>
 8005868:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800586c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005870:	ee17 3a10 	vmov	r3, s14
 8005874:	3b01      	subs	r3, #1
 8005876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800587a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005886:	ee17 1a90 	vmov	r1, s15
 800588a:	4419      	add	r1, r3
 800588c:	f7fe be06 	b.w	800449c <_ZN15Screen1ViewBaseC1Ev+0x800>
 8005890:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005894:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005898:	ee17 3a10 	vmov	r3, s14
 800589c:	3b01      	subs	r3, #1
 800589e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058a2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80058a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ae:	ee17 1a90 	vmov	r1, s15
 80058b2:	4419      	add	r1, r3
 80058b4:	f7fe be0b 	b.w	80044ce <_ZN15Screen1ViewBaseC1Ev+0x832>
 80058b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058bc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058c0:	ee17 3a10 	vmov	r3, s14
 80058c4:	3b01      	subs	r3, #1
 80058c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058ca:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d6:	ee17 1a90 	vmov	r1, s15
 80058da:	4419      	add	r1, r3
 80058dc:	f7fe be10 	b.w	8004500 <_ZN15Screen1ViewBaseC1Ev+0x864>
 80058e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058e8:	ee17 3a10 	vmov	r3, s14
 80058ec:	3b01      	subs	r3, #1
 80058ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058f2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058fe:	ee17 1a90 	vmov	r1, s15
 8005902:	4419      	add	r1, r3
 8005904:	f7fe be15 	b.w	8004532 <_ZN15Screen1ViewBaseC1Ev+0x896>
 8005908:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800590c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005910:	ee17 3a10 	vmov	r3, s14
 8005914:	3b01      	subs	r3, #1
 8005916:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800591a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005926:	ee17 1a90 	vmov	r1, s15
 800592a:	4419      	add	r1, r3
 800592c:	f7fe be1a 	b.w	8004564 <_ZN15Screen1ViewBaseC1Ev+0x8c8>
 8005930:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005934:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005938:	ee17 3a10 	vmov	r3, s14
 800593c:	3b01      	subs	r3, #1
 800593e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005942:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800594e:	ee17 1a90 	vmov	r1, s15
 8005952:	4419      	add	r1, r3
 8005954:	f7fe be1f 	b.w	8004596 <_ZN15Screen1ViewBaseC1Ev+0x8fa>
 8005958:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800595c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005960:	ee17 3a10 	vmov	r3, s14
 8005964:	3b01      	subs	r3, #1
 8005966:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800596a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800596e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005976:	ee17 1a90 	vmov	r1, s15
 800597a:	4419      	add	r1, r3
 800597c:	f7fe be24 	b.w	80045c8 <_ZN15Screen1ViewBaseC1Ev+0x92c>
 8005980:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005984:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005988:	ee17 3a10 	vmov	r3, s14
 800598c:	3b01      	subs	r3, #1
 800598e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005992:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800599e:	ee17 1a90 	vmov	r1, s15
 80059a2:	4419      	add	r1, r3
 80059a4:	f7fe be29 	b.w	80045fa <_ZN15Screen1ViewBaseC1Ev+0x95e>
 80059a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059b0:	ee17 3a10 	vmov	r3, s14
 80059b4:	3b01      	subs	r3, #1
 80059b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059ba:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059c6:	ee17 1a90 	vmov	r1, s15
 80059ca:	4419      	add	r1, r3
 80059cc:	f7fe be2e 	b.w	800462c <_ZN15Screen1ViewBaseC1Ev+0x990>
 80059d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059d8:	ee17 3a10 	vmov	r3, s14
 80059dc:	3b01      	subs	r3, #1
 80059de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059e2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059ee:	ee17 1a90 	vmov	r1, s15
 80059f2:	4419      	add	r1, r3
 80059f4:	f7fe be33 	b.w	800465e <_ZN15Screen1ViewBaseC1Ev+0x9c2>
 80059f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a00:	ee17 3a10 	vmov	r3, s14
 8005a04:	3b01      	subs	r3, #1
 8005a06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a0a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a16:	ee17 1a90 	vmov	r1, s15
 8005a1a:	4419      	add	r1, r3
 8005a1c:	f7fe be38 	b.w	8004690 <_ZN15Screen1ViewBaseC1Ev+0x9f4>
 8005a20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a24:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a28:	ee17 3a10 	vmov	r3, s14
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a32:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a3e:	ee17 1a90 	vmov	r1, s15
 8005a42:	4419      	add	r1, r3
 8005a44:	f7fe be3d 	b.w	80046c2 <_ZN15Screen1ViewBaseC1Ev+0xa26>
 8005a48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a4c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a50:	ee17 3a10 	vmov	r3, s14
 8005a54:	3b01      	subs	r3, #1
 8005a56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a5a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a66:	ee17 1a90 	vmov	r1, s15
 8005a6a:	4419      	add	r1, r3
 8005a6c:	f7fe be42 	b.w	80046f4 <_ZN15Screen1ViewBaseC1Ev+0xa58>
 8005a70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a78:	ee17 3a10 	vmov	r3, s14
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a82:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a8e:	ee17 1a90 	vmov	r1, s15
 8005a92:	4419      	add	r1, r3
 8005a94:	f7fe be47 	b.w	8004726 <_ZN15Screen1ViewBaseC1Ev+0xa8a>
 8005a98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a9c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005aa0:	ee17 3a10 	vmov	r3, s14
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005aaa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab6:	ee17 1a90 	vmov	r1, s15
 8005aba:	4419      	add	r1, r3
 8005abc:	f7fe be4c 	b.w	8004758 <_ZN15Screen1ViewBaseC1Ev+0xabc>
 8005ac0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ac4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ac8:	ee17 3a10 	vmov	r3, s14
 8005acc:	3b01      	subs	r3, #1
 8005ace:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ad2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ade:	ee17 1a90 	vmov	r1, s15
 8005ae2:	4419      	add	r1, r3
 8005ae4:	f7fe be51 	b.w	800478a <_ZN15Screen1ViewBaseC1Ev+0xaee>
 8005ae8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005aec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005af0:	ee17 3a10 	vmov	r3, s14
 8005af4:	3b01      	subs	r3, #1
 8005af6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005afa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b06:	ee17 1a90 	vmov	r1, s15
 8005b0a:	4419      	add	r1, r3
 8005b0c:	f7fe be56 	b.w	80047bc <_ZN15Screen1ViewBaseC1Ev+0xb20>
 8005b10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b14:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b18:	ee17 3a10 	vmov	r3, s14
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b22:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b2e:	ee17 1a90 	vmov	r1, s15
 8005b32:	4419      	add	r1, r3
 8005b34:	f7fe be5b 	b.w	80047ee <_ZN15Screen1ViewBaseC1Ev+0xb52>
 8005b38:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b3c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b40:	ee17 3a10 	vmov	r3, s14
 8005b44:	3b01      	subs	r3, #1
 8005b46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b4a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b56:	ee17 1a90 	vmov	r1, s15
 8005b5a:	4419      	add	r1, r3
 8005b5c:	f7fe be60 	b.w	8004820 <_ZN15Screen1ViewBaseC1Ev+0xb84>
 8005b60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b64:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b68:	ee17 3a10 	vmov	r3, s14
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b72:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b7e:	ee17 1a90 	vmov	r1, s15
 8005b82:	4419      	add	r1, r3
 8005b84:	f7fe be65 	b.w	8004852 <_ZN15Screen1ViewBaseC1Ev+0xbb6>
 8005b88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b8c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b90:	ee17 3a10 	vmov	r3, s14
 8005b94:	3b01      	subs	r3, #1
 8005b96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b9a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ba6:	ee17 1a90 	vmov	r1, s15
 8005baa:	4419      	add	r1, r3
 8005bac:	f7fe be6a 	b.w	8004884 <_ZN15Screen1ViewBaseC1Ev+0xbe8>
 8005bb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005bb4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005bb8:	ee17 3a10 	vmov	r3, s14
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bc2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bce:	ee17 1a90 	vmov	r1, s15
 8005bd2:	4419      	add	r1, r3
 8005bd4:	f7fe be6f 	b.w	80048b6 <_ZN15Screen1ViewBaseC1Ev+0xc1a>
 8005bd8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005bdc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005be0:	ee17 3a10 	vmov	r3, s14
 8005be4:	3b01      	subs	r3, #1
 8005be6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bea:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bf6:	ee17 1a90 	vmov	r1, s15
 8005bfa:	4419      	add	r1, r3
 8005bfc:	f7fe be74 	b.w	80048e8 <_ZN15Screen1ViewBaseC1Ev+0xc4c>
 8005c00:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c04:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c08:	ee17 3a10 	vmov	r3, s14
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c12:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c1e:	ee17 1a90 	vmov	r1, s15
 8005c22:	4419      	add	r1, r3
 8005c24:	f7fe be79 	b.w	800491a <_ZN15Screen1ViewBaseC1Ev+0xc7e>
 8005c28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c2c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c30:	ee17 3a10 	vmov	r3, s14
 8005c34:	3b01      	subs	r3, #1
 8005c36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c3a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c46:	ee17 1a90 	vmov	r1, s15
 8005c4a:	4419      	add	r1, r3
 8005c4c:	f7fe be7e 	b.w	800494c <_ZN15Screen1ViewBaseC1Ev+0xcb0>
 8005c50:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c54:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c58:	ee17 3a10 	vmov	r3, s14
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c62:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c6e:	ee17 1a90 	vmov	r1, s15
 8005c72:	4419      	add	r1, r3
 8005c74:	f7fe be83 	b.w	800497e <_ZN15Screen1ViewBaseC1Ev+0xce2>
 8005c78:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c7c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c80:	ee17 3a10 	vmov	r3, s14
 8005c84:	3b01      	subs	r3, #1
 8005c86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c8a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c96:	ee17 1a90 	vmov	r1, s15
 8005c9a:	4419      	add	r1, r3
 8005c9c:	f7fe be88 	b.w	80049b0 <_ZN15Screen1ViewBaseC1Ev+0xd14>
 8005ca0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ca4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ca8:	ee17 3a10 	vmov	r3, s14
 8005cac:	3b01      	subs	r3, #1
 8005cae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cb2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cbe:	ee17 1a90 	vmov	r1, s15
 8005cc2:	4419      	add	r1, r3
 8005cc4:	f7fe be8d 	b.w	80049e2 <_ZN15Screen1ViewBaseC1Ev+0xd46>
 8005cc8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ccc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005cd0:	ee17 3a10 	vmov	r3, s14
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cda:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ce6:	ee17 1a90 	vmov	r1, s15
 8005cea:	4419      	add	r1, r3
 8005cec:	f7fe be92 	b.w	8004a14 <_ZN15Screen1ViewBaseC1Ev+0xd78>
 8005cf0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005cf4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005cf8:	ee17 3a10 	vmov	r3, s14
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d02:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d0e:	ee17 1a90 	vmov	r1, s15
 8005d12:	4419      	add	r1, r3
 8005d14:	f7fe be97 	b.w	8004a46 <_ZN15Screen1ViewBaseC1Ev+0xdaa>
 8005d18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d1c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d20:	ee17 3a10 	vmov	r3, s14
 8005d24:	3b01      	subs	r3, #1
 8005d26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d2a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d36:	ee17 1a90 	vmov	r1, s15
 8005d3a:	4419      	add	r1, r3
 8005d3c:	f7fe be9c 	b.w	8004a78 <_ZN15Screen1ViewBaseC1Ev+0xddc>
 8005d40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d48:	ee17 3a10 	vmov	r3, s14
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d52:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d5e:	ee17 1a90 	vmov	r1, s15
 8005d62:	4419      	add	r1, r3
 8005d64:	f7fe bea1 	b.w	8004aaa <_ZN15Screen1ViewBaseC1Ev+0xe0e>
 8005d68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d70:	ee17 3a10 	vmov	r3, s14
 8005d74:	3b01      	subs	r3, #1
 8005d76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d7a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d86:	ee17 1a90 	vmov	r1, s15
 8005d8a:	4419      	add	r1, r3
 8005d8c:	f7fe bea6 	b.w	8004adc <_ZN15Screen1ViewBaseC1Ev+0xe40>
 8005d90:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d98:	ee17 3a10 	vmov	r3, s14
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005da2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dae:	ee17 1a90 	vmov	r1, s15
 8005db2:	4419      	add	r1, r3
 8005db4:	f7fe befa 	b.w	8004bac <_ZN15Screen1ViewBaseC1Ev+0xf10>
 8005db8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005dbc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005dc0:	ee17 3a10 	vmov	r3, s14
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005dca:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dd6:	ee17 1a90 	vmov	r1, s15
 8005dda:	4419      	add	r1, r3
 8005ddc:	f7fe beff 	b.w	8004bde <_ZN15Screen1ViewBaseC1Ev+0xf42>
 8005de0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005de4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005de8:	ee17 3a10 	vmov	r3, s14
 8005dec:	3b01      	subs	r3, #1
 8005dee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005df2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dfe:	ee17 1a90 	vmov	r1, s15
 8005e02:	4419      	add	r1, r3
 8005e04:	f7fe bf04 	b.w	8004c10 <_ZN15Screen1ViewBaseC1Ev+0xf74>
 8005e08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e0c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e10:	ee17 3a10 	vmov	r3, s14
 8005e14:	3b01      	subs	r3, #1
 8005e16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e1a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e26:	ee17 1a90 	vmov	r1, s15
 8005e2a:	4419      	add	r1, r3
 8005e2c:	f7fe bf09 	b.w	8004c42 <_ZN15Screen1ViewBaseC1Ev+0xfa6>
 8005e30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e34:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e38:	ee17 3a10 	vmov	r3, s14
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e42:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e4e:	ee17 1a90 	vmov	r1, s15
 8005e52:	4419      	add	r1, r3
 8005e54:	f7fe bf0e 	b.w	8004c74 <_ZN15Screen1ViewBaseC1Ev+0xfd8>
 8005e58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e5c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e60:	ee17 3a10 	vmov	r3, s14
 8005e64:	3b01      	subs	r3, #1
 8005e66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e6a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e76:	ee17 1a90 	vmov	r1, s15
 8005e7a:	4419      	add	r1, r3
 8005e7c:	f7fe bf13 	b.w	8004ca6 <_ZN15Screen1ViewBaseC1Ev+0x100a>
 8005e80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e88:	ee17 3a10 	vmov	r3, s14
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e92:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e9e:	ee17 1a90 	vmov	r1, s15
 8005ea2:	4419      	add	r1, r3
 8005ea4:	f7fe bf18 	b.w	8004cd8 <_ZN15Screen1ViewBaseC1Ev+0x103c>
 8005ea8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005eac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005eb0:	ee17 3a10 	vmov	r3, s14
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005eba:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ec6:	ee17 1a90 	vmov	r1, s15
 8005eca:	4419      	add	r1, r3
 8005ecc:	f7fe bf1d 	b.w	8004d0a <_ZN15Screen1ViewBaseC1Ev+0x106e>
 8005ed0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ed4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ed8:	ee17 3a10 	vmov	r3, s14
 8005edc:	3b01      	subs	r3, #1
 8005ede:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ee2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eee:	ee17 1a90 	vmov	r1, s15
 8005ef2:	4419      	add	r1, r3
 8005ef4:	f7fe bf22 	b.w	8004d3c <_ZN15Screen1ViewBaseC1Ev+0x10a0>
 8005ef8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005efc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f00:	ee17 3a10 	vmov	r3, s14
 8005f04:	3b01      	subs	r3, #1
 8005f06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f0a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f16:	ee17 1a90 	vmov	r1, s15
 8005f1a:	4419      	add	r1, r3
 8005f1c:	f7fe bf27 	b.w	8004d6e <_ZN15Screen1ViewBaseC1Ev+0x10d2>
 8005f20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f24:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f28:	ee17 3a10 	vmov	r3, s14
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f32:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f3e:	ee17 1a90 	vmov	r1, s15
 8005f42:	4419      	add	r1, r3
 8005f44:	f7fe bf2c 	b.w	8004da0 <_ZN15Screen1ViewBaseC1Ev+0x1104>
 8005f48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f4c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f50:	ee17 3a10 	vmov	r3, s14
 8005f54:	3b01      	subs	r3, #1
 8005f56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f5a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f66:	ee17 1a90 	vmov	r1, s15
 8005f6a:	4419      	add	r1, r3
 8005f6c:	f7fe bf31 	b.w	8004dd2 <_ZN15Screen1ViewBaseC1Ev+0x1136>
 8005f70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f78:	ee17 3a10 	vmov	r3, s14
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f82:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f8e:	ee17 1a90 	vmov	r1, s15
 8005f92:	4419      	add	r1, r3
 8005f94:	f7fe bf36 	b.w	8004e04 <_ZN15Screen1ViewBaseC1Ev+0x1168>
 8005f98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f9c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005fa0:	ee17 3a10 	vmov	r3, s14
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005faa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fb6:	ee17 1a90 	vmov	r1, s15
 8005fba:	4419      	add	r1, r3
 8005fbc:	f7fe bf3b 	b.w	8004e36 <_ZN15Screen1ViewBaseC1Ev+0x119a>
 8005fc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005fc4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005fc8:	ee17 3a10 	vmov	r3, s14
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fd2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fde:	ee17 1a90 	vmov	r1, s15
 8005fe2:	4419      	add	r1, r3
 8005fe4:	f7fe bf40 	b.w	8004e68 <_ZN15Screen1ViewBaseC1Ev+0x11cc>
 8005fe8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005fec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ff0:	ee17 3a10 	vmov	r3, s14
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ffa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006006:	ee17 1a90 	vmov	r1, s15
 800600a:	4419      	add	r1, r3
 800600c:	f7fe bf45 	b.w	8004e9a <_ZN15Screen1ViewBaseC1Ev+0x11fe>
 8006010:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006014:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006018:	ee17 3a10 	vmov	r3, s14
 800601c:	3b01      	subs	r3, #1
 800601e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006022:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800602e:	ee17 1a90 	vmov	r1, s15
 8006032:	4419      	add	r1, r3
 8006034:	f7fe bf4a 	b.w	8004ecc <_ZN15Screen1ViewBaseC1Ev+0x1230>
 8006038:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800603c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006040:	ee17 3a10 	vmov	r3, s14
 8006044:	3b01      	subs	r3, #1
 8006046:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800604a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006056:	ee17 1a90 	vmov	r1, s15
 800605a:	4419      	add	r1, r3
 800605c:	f7fe bf4f 	b.w	8004efe <_ZN15Screen1ViewBaseC1Ev+0x1262>
 8006060:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006064:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006068:	ee17 3a10 	vmov	r3, s14
 800606c:	3b01      	subs	r3, #1
 800606e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006072:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800607e:	ee17 1a90 	vmov	r1, s15
 8006082:	4419      	add	r1, r3
 8006084:	f7fe bf54 	b.w	8004f30 <_ZN15Screen1ViewBaseC1Ev+0x1294>
 8006088:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800608c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006090:	ee17 3a10 	vmov	r3, s14
 8006094:	3b01      	subs	r3, #1
 8006096:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800609a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060a6:	ee17 1a90 	vmov	r1, s15
 80060aa:	4419      	add	r1, r3
 80060ac:	f7fe bf59 	b.w	8004f62 <_ZN15Screen1ViewBaseC1Ev+0x12c6>
 80060b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80060b8:	ee17 3a10 	vmov	r3, s14
 80060bc:	3b01      	subs	r3, #1
 80060be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060c2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ce:	ee17 1a90 	vmov	r1, s15
 80060d2:	4419      	add	r1, r3
 80060d4:	f7fe bf5e 	b.w	8004f94 <_ZN15Screen1ViewBaseC1Ev+0x12f8>
 80060d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80060e0:	ee17 3a10 	vmov	r3, s14
 80060e4:	3b01      	subs	r3, #1
 80060e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060ea:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80060ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060f6:	ee17 1a90 	vmov	r1, s15
 80060fa:	4419      	add	r1, r3
 80060fc:	f7fe bf63 	b.w	8004fc6 <_ZN15Screen1ViewBaseC1Ev+0x132a>
 8006100:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006104:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006108:	ee17 3a10 	vmov	r3, s14
 800610c:	3b01      	subs	r3, #1
 800610e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006112:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800611e:	ee17 1a90 	vmov	r1, s15
 8006122:	4419      	add	r1, r3
 8006124:	f7fe bf68 	b.w	8004ff8 <_ZN15Screen1ViewBaseC1Ev+0x135c>
 8006128:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800612c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006130:	ee17 3a10 	vmov	r3, s14
 8006134:	3b01      	subs	r3, #1
 8006136:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800613a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006146:	ee17 1a90 	vmov	r1, s15
 800614a:	4419      	add	r1, r3
 800614c:	f7fe bf6d 	b.w	800502a <_ZN15Screen1ViewBaseC1Ev+0x138e>
 8006150:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006154:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006158:	ee17 3a10 	vmov	r3, s14
 800615c:	3b01      	subs	r3, #1
 800615e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006162:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800616e:	ee17 1a90 	vmov	r1, s15
 8006172:	4419      	add	r1, r3
 8006174:	f7fe bf72 	b.w	800505c <_ZN15Screen1ViewBaseC1Ev+0x13c0>
 8006178:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800617c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006180:	ee17 3a10 	vmov	r3, s14
 8006184:	3b01      	subs	r3, #1
 8006186:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800618a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006196:	ee17 1a90 	vmov	r1, s15
 800619a:	4419      	add	r1, r3
 800619c:	f7fe bf77 	b.w	800508e <_ZN15Screen1ViewBaseC1Ev+0x13f2>
 80061a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061a8:	ee17 3a10 	vmov	r3, s14
 80061ac:	3b01      	subs	r3, #1
 80061ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061b2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80061b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061be:	ee17 1a90 	vmov	r1, s15
 80061c2:	4419      	add	r1, r3
 80061c4:	f7fe bf7c 	b.w	80050c0 <_ZN15Screen1ViewBaseC1Ev+0x1424>
 80061c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061d0:	ee17 3a10 	vmov	r3, s14
 80061d4:	3b01      	subs	r3, #1
 80061d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061da:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061e6:	ee17 1a90 	vmov	r1, s15
 80061ea:	4419      	add	r1, r3
 80061ec:	f7fe bf81 	b.w	80050f2 <_ZN15Screen1ViewBaseC1Ev+0x1456>
 80061f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061f8:	ee17 3a10 	vmov	r3, s14
 80061fc:	3b01      	subs	r3, #1
 80061fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006202:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800620e:	ee17 1a90 	vmov	r1, s15
 8006212:	4419      	add	r1, r3
 8006214:	f7fe bf86 	b.w	8005124 <_ZN15Screen1ViewBaseC1Ev+0x1488>
 8006218:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800621c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006220:	ee17 3a10 	vmov	r3, s14
 8006224:	3b01      	subs	r3, #1
 8006226:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800622a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006236:	ee17 1a90 	vmov	r1, s15
 800623a:	4419      	add	r1, r3
 800623c:	f7fe bf8b 	b.w	8005156 <_ZN15Screen1ViewBaseC1Ev+0x14ba>
 8006240:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006244:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006248:	ee17 3a10 	vmov	r3, s14
 800624c:	3b01      	subs	r3, #1
 800624e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006252:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800625e:	ee17 1a90 	vmov	r1, s15
 8006262:	4419      	add	r1, r3
 8006264:	f7fe bf90 	b.w	8005188 <_ZN15Screen1ViewBaseC1Ev+0x14ec>
 8006268:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800626c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006270:	ee17 3a10 	vmov	r3, s14
 8006274:	3b01      	subs	r3, #1
 8006276:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800627a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800627e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006286:	ee17 1a90 	vmov	r1, s15
 800628a:	4419      	add	r1, r3
 800628c:	f7fe bf95 	b.w	80051ba <_ZN15Screen1ViewBaseC1Ev+0x151e>
 8006290:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006294:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006298:	ee17 3a10 	vmov	r3, s14
 800629c:	3b01      	subs	r3, #1
 800629e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062a2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80062a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ae:	ee17 1a90 	vmov	r1, s15
 80062b2:	4419      	add	r1, r3
 80062b4:	f7fe bf9a 	b.w	80051ec <_ZN15Screen1ViewBaseC1Ev+0x1550>
 80062b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062bc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062c0:	ee17 3a10 	vmov	r3, s14
 80062c4:	3b01      	subs	r3, #1
 80062c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062ca:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062d6:	ee17 1a90 	vmov	r1, s15
 80062da:	4419      	add	r1, r3
 80062dc:	f7fe bf9f 	b.w	800521e <_ZN15Screen1ViewBaseC1Ev+0x1582>
 80062e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062e8:	ee17 3a10 	vmov	r3, s14
 80062ec:	3b01      	subs	r3, #1
 80062ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062f2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062fe:	ee17 1a90 	vmov	r1, s15
 8006302:	4419      	add	r1, r3
 8006304:	f7fe bfa4 	b.w	8005250 <_ZN15Screen1ViewBaseC1Ev+0x15b4>
 8006308:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800630c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006310:	ee17 3a10 	vmov	r3, s14
 8006314:	3b01      	subs	r3, #1
 8006316:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800631a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006326:	ee17 1a90 	vmov	r1, s15
 800632a:	4419      	add	r1, r3
 800632c:	f7fe bfa9 	b.w	8005282 <_ZN15Screen1ViewBaseC1Ev+0x15e6>
 8006330:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006334:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006338:	ee17 3a10 	vmov	r3, s14
 800633c:	3b01      	subs	r3, #1
 800633e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006342:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800634e:	ee17 1a90 	vmov	r1, s15
 8006352:	4419      	add	r1, r3
 8006354:	f7fe bfae 	b.w	80052b4 <_ZN15Screen1ViewBaseC1Ev+0x1618>
 8006358:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800635c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006360:	ee17 3a10 	vmov	r3, s14
 8006364:	3b01      	subs	r3, #1
 8006366:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800636a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006376:	ee17 1a90 	vmov	r1, s15
 800637a:	4419      	add	r1, r3
 800637c:	f7fe bfb3 	b.w	80052e6 <_ZN15Screen1ViewBaseC1Ev+0x164a>
 8006380:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006384:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006388:	ee17 3a10 	vmov	r3, s14
 800638c:	3b01      	subs	r3, #1
 800638e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006392:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800639e:	ee17 1a90 	vmov	r1, s15
 80063a2:	4419      	add	r1, r3
 80063a4:	f7fe bfb8 	b.w	8005318 <_ZN15Screen1ViewBaseC1Ev+0x167c>
 80063a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063b0:	ee17 3a10 	vmov	r3, s14
 80063b4:	3b01      	subs	r3, #1
 80063b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063ba:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80063be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063c6:	ee17 1a90 	vmov	r1, s15
 80063ca:	4419      	add	r1, r3
 80063cc:	f7fe bff8 	b.w	80053c0 <_ZN15Screen1ViewBaseC1Ev+0x1724>
 80063d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063d8:	ee17 3a10 	vmov	r3, s14
 80063dc:	3b01      	subs	r3, #1
 80063de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063e2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ee:	ee17 1a90 	vmov	r1, s15
 80063f2:	4419      	add	r1, r3
 80063f4:	f7fe bffd 	b.w	80053f2 <_ZN15Screen1ViewBaseC1Ev+0x1756>
 80063f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006400:	ee17 3a10 	vmov	r3, s14
 8006404:	3b01      	subs	r3, #1
 8006406:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800640a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006416:	ee17 1a90 	vmov	r1, s15
 800641a:	4419      	add	r1, r3
 800641c:	f7ff b802 	b.w	8005424 <_ZN15Screen1ViewBaseC1Ev+0x1788>
 8006420:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006424:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006428:	ee17 3a10 	vmov	r3, s14
 800642c:	3b01      	subs	r3, #1
 800642e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006432:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800643e:	ee17 1a90 	vmov	r1, s15
 8006442:	4419      	add	r1, r3
 8006444:	f7ff b807 	b.w	8005456 <_ZN15Screen1ViewBaseC1Ev+0x17ba>
 8006448:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800644c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006450:	ee17 3a10 	vmov	r3, s14
 8006454:	3b01      	subs	r3, #1
 8006456:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800645a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006466:	ee17 1a90 	vmov	r1, s15
 800646a:	4419      	add	r1, r3
 800646c:	f7ff b80c 	b.w	8005488 <_ZN15Screen1ViewBaseC1Ev+0x17ec>
 8006470:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006474:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006478:	ee17 3a10 	vmov	r3, s14
 800647c:	3b01      	subs	r3, #1
 800647e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006482:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800648e:	ee17 1a90 	vmov	r1, s15
 8006492:	4419      	add	r1, r3
 8006494:	f7ff b811 	b.w	80054ba <_ZN15Screen1ViewBaseC1Ev+0x181e>
 8006498:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800649c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064a0:	ee17 3a10 	vmov	r3, s14
 80064a4:	3b01      	subs	r3, #1
 80064a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064aa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b6:	ee17 1a90 	vmov	r1, s15
 80064ba:	4419      	add	r1, r3
 80064bc:	f7ff b816 	b.w	80054ec <_ZN15Screen1ViewBaseC1Ev+0x1850>
 80064c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064c4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064c8:	ee17 3a10 	vmov	r3, s14
 80064cc:	3b01      	subs	r3, #1
 80064ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064d2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064de:	ee17 1a90 	vmov	r1, s15
 80064e2:	4419      	add	r1, r3
 80064e4:	f7ff b81b 	b.w	800551e <_ZN15Screen1ViewBaseC1Ev+0x1882>
 80064e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064f0:	ee17 3a10 	vmov	r3, s14
 80064f4:	3b01      	subs	r3, #1
 80064f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064fa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006506:	ee17 1a90 	vmov	r1, s15
 800650a:	4419      	add	r1, r3
 800650c:	f7ff b820 	b.w	8005550 <_ZN15Screen1ViewBaseC1Ev+0x18b4>
 8006510:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006514:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006518:	ee17 3a10 	vmov	r3, s14
 800651c:	3b01      	subs	r3, #1
 800651e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006522:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800652e:	ee17 1a90 	vmov	r1, s15
 8006532:	4419      	add	r1, r3
 8006534:	f7ff b825 	b.w	8005582 <_ZN15Screen1ViewBaseC1Ev+0x18e6>

08006538 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006538:	4770      	bx	lr
	...

0800653c <_Z23getFont_verdana_10_4bppv>:
{
 800653c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800653e:	4d16      	ldr	r5, [pc, #88]	@ (8006598 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8006540:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006542:	682c      	ldr	r4, [r5, #0]
 8006544:	f3bf 8f5b 	dmb	ish
 8006548:	f014 0401 	ands.w	r4, r4, #1
 800654c:	d120      	bne.n	8006590 <_Z23getFont_verdana_10_4bppv+0x54>
 800654e:	4628      	mov	r0, r5
 8006550:	f01b ff2e 	bl	80223b0 <__cxa_guard_acquire>
 8006554:	b1e0      	cbz	r0, 8006590 <_Z23getFont_verdana_10_4bppv+0x54>
 8006556:	233f      	movs	r3, #63	@ 0x3f
 8006558:	2201      	movs	r2, #1
 800655a:	4910      	ldr	r1, [pc, #64]	@ (800659c <_Z23getFont_verdana_10_4bppv+0x60>)
 800655c:	9309      	str	r3, [sp, #36]	@ 0x24
 800655e:	4b10      	ldr	r3, [pc, #64]	@ (80065a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8006560:	4810      	ldr	r0, [pc, #64]	@ (80065a4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8006566:	940a      	str	r4, [sp, #40]	@ 0x28
 8006568:	9405      	str	r4, [sp, #20]
 800656a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800656e:	2304      	movs	r3, #4
 8006570:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006574:	230a      	movs	r3, #10
 8006576:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006580:	f7fc fe3a 	bl	80031f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006584:	4809      	ldr	r0, [pc, #36]	@ (80065ac <_Z23getFont_verdana_10_4bppv+0x70>)
 8006586:	f01c faa5 	bl	8022ad4 <atexit>
 800658a:	4628      	mov	r0, r5
 800658c:	f01b ff1c 	bl	80223c8 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8006590:	4804      	ldr	r0, [pc, #16]	@ (80065a4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8006592:	b00f      	add	sp, #60	@ 0x3c
 8006594:	bd30      	pop	{r4, r5, pc}
 8006596:	bf00      	nop
 8006598:	24003c00 	.word	0x24003c00
 800659c:	08026e0c 	.word	0x08026e0c
 80065a0:	08026f98 	.word	0x08026f98
 80065a4:	24003c04 	.word	0x24003c04
 80065a8:	08026fc0 	.word	0x08026fc0
 80065ac:	08006539 	.word	0x08006539

080065b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80065b0:	4770      	bx	lr
	...

080065b4 <_Z23getFont_verdana_20_4bppv>:
{
 80065b4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80065b6:	4d16      	ldr	r5, [pc, #88]	@ (8006610 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80065b8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80065ba:	682c      	ldr	r4, [r5, #0]
 80065bc:	f3bf 8f5b 	dmb	ish
 80065c0:	f014 0401 	ands.w	r4, r4, #1
 80065c4:	d121      	bne.n	800660a <_Z23getFont_verdana_20_4bppv+0x56>
 80065c6:	4628      	mov	r0, r5
 80065c8:	f01b fef2 	bl	80223b0 <__cxa_guard_acquire>
 80065cc:	b1e8      	cbz	r0, 800660a <_Z23getFont_verdana_20_4bppv+0x56>
 80065ce:	233f      	movs	r3, #63	@ 0x3f
 80065d0:	220c      	movs	r2, #12
 80065d2:	4910      	ldr	r1, [pc, #64]	@ (8006614 <_Z23getFont_verdana_20_4bppv+0x60>)
 80065d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d6:	4b10      	ldr	r3, [pc, #64]	@ (8006618 <_Z23getFont_verdana_20_4bppv+0x64>)
 80065d8:	4810      	ldr	r0, [pc, #64]	@ (800661c <_Z23getFont_verdana_20_4bppv+0x68>)
 80065da:	9308      	str	r3, [sp, #32]
 80065dc:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80065de:	940a      	str	r4, [sp, #40]	@ 0x28
 80065e0:	9307      	str	r3, [sp, #28]
 80065e2:	2301      	movs	r3, #1
 80065e4:	9401      	str	r4, [sp, #4]
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80065ec:	2304      	movs	r3, #4
 80065ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80065f2:	2314      	movs	r3, #20
 80065f4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	f7fc fdfd 	bl	80031f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80065fe:	4809      	ldr	r0, [pc, #36]	@ (8006624 <_Z23getFont_verdana_20_4bppv+0x70>)
 8006600:	f01c fa68 	bl	8022ad4 <atexit>
 8006604:	4628      	mov	r0, r5
 8006606:	f01b fedf 	bl	80223c8 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800660a:	4804      	ldr	r0, [pc, #16]	@ (800661c <_Z23getFont_verdana_20_4bppv+0x68>)
 800660c:	b00f      	add	sp, #60	@ 0x3c
 800660e:	bd30      	pop	{r4, r5, pc}
 8006610:	24003c30 	.word	0x24003c30
 8006614:	08026e1c 	.word	0x08026e1c
 8006618:	08026f9c 	.word	0x08026f9c
 800661c:	24003c34 	.word	0x24003c34
 8006620:	08026fc4 	.word	0x08026fc4
 8006624:	080065b1 	.word	0x080065b1

08006628 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_34_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_34_4bpp();

touchgfx::GeneratedFont& getFont_verdana_34_4bpp()
{
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 14, 40, 34, 0, 0, 4, 1, 0, 0, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 8006628:	4770      	bx	lr
	...

0800662c <_Z23getFont_verdana_34_4bppv>:
{
 800662c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 14, 40, 34, 0, 0, 4, 1, 0, 0, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 800662e:	4d17      	ldr	r5, [pc, #92]	@ (800668c <_Z23getFont_verdana_34_4bppv+0x60>)
{
 8006630:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 14, 40, 34, 0, 0, 4, 1, 0, 0, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 8006632:	682c      	ldr	r4, [r5, #0]
 8006634:	f3bf 8f5b 	dmb	ish
 8006638:	f014 0401 	ands.w	r4, r4, #1
 800663c:	d122      	bne.n	8006684 <_Z23getFont_verdana_34_4bppv+0x58>
 800663e:	4628      	mov	r0, r5
 8006640:	f01b feb6 	bl	80223b0 <__cxa_guard_acquire>
 8006644:	b1f0      	cbz	r0, 8006684 <_Z23getFont_verdana_34_4bppv+0x58>
 8006646:	233f      	movs	r3, #63	@ 0x3f
 8006648:	2201      	movs	r2, #1
 800664a:	4911      	ldr	r1, [pc, #68]	@ (8006690 <_Z23getFont_verdana_34_4bppv+0x64>)
 800664c:	9309      	str	r3, [sp, #36]	@ 0x24
 800664e:	4b11      	ldr	r3, [pc, #68]	@ (8006694 <_Z23getFont_verdana_34_4bppv+0x68>)
 8006650:	4811      	ldr	r0, [pc, #68]	@ (8006698 <_Z23getFont_verdana_34_4bppv+0x6c>)
 8006652:	9308      	str	r3, [sp, #32]
 8006654:	4b11      	ldr	r3, [pc, #68]	@ (800669c <_Z23getFont_verdana_34_4bppv+0x70>)
 8006656:	940a      	str	r4, [sp, #40]	@ 0x28
 8006658:	9405      	str	r4, [sp, #20]
 800665a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800665e:	2304      	movs	r3, #4
 8006660:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006664:	2322      	movs	r3, #34	@ 0x22
 8006666:	220e      	movs	r2, #14
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	2328      	movs	r3, #40	@ 0x28
 800666c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8006670:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006674:	f7fc fdc0 	bl	80031f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006678:	4809      	ldr	r0, [pc, #36]	@ (80066a0 <_Z23getFont_verdana_34_4bppv+0x74>)
 800667a:	f01c fa2b 	bl	8022ad4 <atexit>
 800667e:	4628      	mov	r0, r5
 8006680:	f01b fea2 	bl	80223c8 <__cxa_guard_release>
    return verdana_34_4bpp;
}
 8006684:	4804      	ldr	r0, [pc, #16]	@ (8006698 <_Z23getFont_verdana_34_4bppv+0x6c>)
 8006686:	b00f      	add	sp, #60	@ 0x3c
 8006688:	bd30      	pop	{r4, r5, pc}
 800668a:	bf00      	nop
 800668c:	24003c60 	.word	0x24003c60
 8006690:	08026ec4 	.word	0x08026ec4
 8006694:	08026fb4 	.word	0x08026fb4
 8006698:	24003c64 	.word	0x24003c64
 800669c:	08026fc8 	.word	0x08026fc8
 80066a0:	08006629 	.word	0x08006629

080066a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80066a4:	4770      	bx	lr
	...

080066a8 <_Z23getFont_verdana_40_4bppv>:
{
 80066a8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80066aa:	4d16      	ldr	r5, [pc, #88]	@ (8006704 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80066ac:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80066ae:	682c      	ldr	r4, [r5, #0]
 80066b0:	f3bf 8f5b 	dmb	ish
 80066b4:	f014 0401 	ands.w	r4, r4, #1
 80066b8:	d120      	bne.n	80066fc <_Z23getFont_verdana_40_4bppv+0x54>
 80066ba:	4628      	mov	r0, r5
 80066bc:	f01b fe78 	bl	80223b0 <__cxa_guard_acquire>
 80066c0:	b1e0      	cbz	r0, 80066fc <_Z23getFont_verdana_40_4bppv+0x54>
 80066c2:	233f      	movs	r3, #63	@ 0x3f
 80066c4:	2201      	movs	r2, #1
 80066c6:	4910      	ldr	r1, [pc, #64]	@ (8006708 <_Z23getFont_verdana_40_4bppv+0x60>)
 80066c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ca:	4b10      	ldr	r3, [pc, #64]	@ (800670c <_Z23getFont_verdana_40_4bppv+0x64>)
 80066cc:	4810      	ldr	r0, [pc, #64]	@ (8006710 <_Z23getFont_verdana_40_4bppv+0x68>)
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80066d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80066d4:	9405      	str	r4, [sp, #20]
 80066d6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80066da:	2304      	movs	r3, #4
 80066dc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80066e0:	2328      	movs	r3, #40	@ 0x28
 80066e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80066ec:	f7fc fd84 	bl	80031f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80066f0:	4809      	ldr	r0, [pc, #36]	@ (8006718 <_Z23getFont_verdana_40_4bppv+0x70>)
 80066f2:	f01c f9ef 	bl	8022ad4 <atexit>
 80066f6:	4628      	mov	r0, r5
 80066f8:	f01b fe66 	bl	80223c8 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80066fc:	4804      	ldr	r0, [pc, #16]	@ (8006710 <_Z23getFont_verdana_40_4bppv+0x68>)
 80066fe:	b00f      	add	sp, #60	@ 0x3c
 8006700:	bd30      	pop	{r4, r5, pc}
 8006702:	bf00      	nop
 8006704:	24003c90 	.word	0x24003c90
 8006708:	08026f88 	.word	0x08026f88
 800670c:	08026fbc 	.word	0x08026fbc
 8006710:	24003c94 	.word	0x24003c94
 8006714:	08026fcc 	.word	0x08026fcc
 8006718:	080066a5 	.word	0x080066a5

0800671c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800671c:	2000      	movs	r0, #0
 800671e:	4770      	bx	lr

08006720 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8006720:	2000      	movs	r0, #0
 8006722:	4770      	bx	lr

08006724 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006724:	b40e      	push	{r1, r2, r3}
 8006726:	b503      	push	{r0, r1, lr}
 8006728:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800672a:	2100      	movs	r1, #0
{
 800672c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8006730:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006732:	f00e fed3 	bl	80154dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006736:	b002      	add	sp, #8
 8006738:	f85d eb04 	ldr.w	lr, [sp], #4
 800673c:	b003      	add	sp, #12
 800673e:	4770      	bx	lr

08006740 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006740:	b40c      	push	{r2, r3}
 8006742:	b507      	push	{r0, r1, r2, lr}
 8006744:	ab04      	add	r3, sp, #16
 8006746:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800674a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800674c:	f00e fec6 	bl	80154dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006750:	b003      	add	sp, #12
 8006752:	f85d eb04 	ldr.w	lr, [sp], #4
 8006756:	b002      	add	sp, #8
 8006758:	4770      	bx	lr
	...

0800675c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800675c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800675e:	b510      	push	{r4, lr}
 8006760:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8006762:	b373      	cbz	r3, 80067c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006764:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8006766:	b92b      	cbnz	r3, 8006774 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006768:	4b18      	ldr	r3, [pc, #96]	@ (80067cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800676a:	21c5      	movs	r1, #197	@ 0xc5
 800676c:	4a18      	ldr	r2, [pc, #96]	@ (80067d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800676e:	4819      	ldr	r0, [pc, #100]	@ (80067d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8006770:	f01c f992 	bl	8022a98 <__assert_func>
            return buffer[pos];
 8006774:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8006776:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800677a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800677c:	b30b      	cbz	r3, 80067c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800677e:	f010 fd35 	bl	80171ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8006782:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8006784:	2b01      	cmp	r3, #1
 8006786:	d803      	bhi.n	8006790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8006788:	4b13      	ldr	r3, [pc, #76]	@ (80067d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800678a:	21cb      	movs	r1, #203	@ 0xcb
 800678c:	4a13      	ldr	r2, [pc, #76]	@ (80067dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800678e:	e7ee      	b.n	800676e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8006790:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006792:	f640 103f 	movw	r0, #2367	@ 0x93f
 8006796:	1c53      	adds	r3, r2, #1
 8006798:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800679a:	2b09      	cmp	r3, #9
 800679c:	4619      	mov	r1, r3
 800679e:	bf88      	it	hi
 80067a0:	f1a3 010a 	subhi.w	r1, r3, #10
 80067a4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80067a8:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80067aa:	4281      	cmp	r1, r0
 80067ac:	d109      	bne.n	80067c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80067b4:	bf28      	it	cs
 80067b6:	2300      	movcs	r3, #0
            return buffer[pos];
 80067b8:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80067ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80067be:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80067c0:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80067c2:	4620      	mov	r0, r4
}
 80067c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80067c8:	f010 bc12 	b.w	8016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80067cc:	08025010 	.word	0x08025010
 80067d0:	08025019 	.word	0x08025019
 80067d4:	080250c4 	.word	0x080250c4
 80067d8:	0802510e 	.word	0x0802510e
 80067dc:	0802511c 	.word	0x0802511c

080067e0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80067e0:	f010 bbcf 	b.w	8016f82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080067e4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80067e4:	b510      	push	{r4, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	ac02      	add	r4, sp, #8
 80067ea:	e884 0006 	stmia.w	r4, {r1, r2}
 80067ee:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80067f0:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80067f2:	4621      	mov	r1, r4
    va_start(pArg, format);
 80067f4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	9b08      	ldr	r3, [sp, #32]
 80067fe:	f00d fb03 	bl	8013e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006802:	b006      	add	sp, #24
 8006804:	bd10      	pop	{r4, pc}
	...

08006808 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006808:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800680a:	bb18      	cbnz	r0, 8006854 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800680c:	4b12      	ldr	r3, [pc, #72]	@ (8006858 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800680e:	4813      	ldr	r0, [pc, #76]	@ (800685c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8006810:	681c      	ldr	r4, [r3, #0]
 8006812:	4913      	ldr	r1, [pc, #76]	@ (8006860 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8006814:	b1b4      	cbz	r4, 8006844 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	4422      	add	r2, r4
 800681a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800681c:	6862      	ldr	r2, [r4, #4]
 800681e:	4422      	add	r2, r4
 8006820:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006822:	68a2      	ldr	r2, [r4, #8]
 8006824:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8006826:	4b0f      	ldr	r3, [pc, #60]	@ (8006864 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006828:	2200      	movs	r2, #0
 800682a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800682c:	f000 f838 	bl	80068a0 <_ZN17TypedTextDatabase8getFontsEv>
 8006830:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006832:	f000 f833 	bl	800689c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8006836:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006838:	601c      	str	r4, [r3, #0]
        fonts = f;
 800683a:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800683c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800683e:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006840:	8018      	strh	r0, [r3, #0]
    }
}
 8006842:	e007      	b.n	8006854 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8006844:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8006846:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006848:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800684a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800684c:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800684e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006850:	2c00      	cmp	r4, #0
 8006852:	d1e8      	bne.n	8006826 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8006854:	bd38      	pop	{r3, r4, r5, pc}
 8006856:	bf00      	nop
 8006858:	24003ccc 	.word	0x24003ccc
 800685c:	24003cc4 	.word	0x24003cc4
 8006860:	24003cc0 	.word	0x24003cc0
 8006864:	24003cc8 	.word	0x24003cc8
 8006868:	2402db04 	.word	0x2402db04
 800686c:	2402db0c 	.word	0x2402db0c
 8006870:	2402db08 	.word	0x2402db08
 8006874:	08026fdc 	.word	0x08026fdc
 8006878:	08026fd0 	.word	0x08026fd0
 800687c:	08027004 	.word	0x08027004

08006880 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006880:	4b04      	ldr	r3, [pc, #16]	@ (8006894 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006888:	4b03      	ldr	r3, [pc, #12]	@ (8006898 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800688a:	681b      	ldr	r3, [r3, #0]
}
 800688c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	24003cc0 	.word	0x24003cc0
 8006898:	24003cc4 	.word	0x24003cc4

0800689c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800689c:	2003      	movs	r0, #3
 800689e:	4770      	bx	lr

080068a0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80068a0:	4800      	ldr	r0, [pc, #0]	@ (80068a4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80068a2:	4770      	bx	lr
 80068a4:	24003cd0 	.word	0x24003cd0

080068a8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_34_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80068a8:	b510      	push	{r4, lr}
};
 80068aa:	4c07      	ldr	r4, [pc, #28]	@ (80068c8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
 80068ac:	f7ff fe82 	bl	80065b4 <_Z23getFont_verdana_20_4bppv>
};
 80068b0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80068b2:	f7ff fef9 	bl	80066a8 <_Z23getFont_verdana_40_4bppv>
};
 80068b6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80068b8:	f7ff fe40 	bl	800653c <_Z23getFont_verdana_10_4bppv>
};
 80068bc:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_34_4bpp())
 80068be:	f7ff feb5 	bl	800662c <_Z23getFont_verdana_34_4bppv>
};
 80068c2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	bf00      	nop
 80068c8:	24003cd0 	.word	0x24003cd0

080068cc <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 80068cc:	b510      	push	{r4, lr}
    pointArray = 0;
 80068ce:	2400      	movs	r4, #0
 80068d0:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 80068d2:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 80068d4:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 80068d6:	601c      	str	r4, [r3, #0]
}
 80068d8:	bd10      	pop	{r4, pc}

080068da <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80068da:	4770      	bx	lr

080068dc <_ZN19FrontendApplicationD0Ev>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4604      	mov	r4, r0
 80068e0:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80068e4:	f01b fd62 	bl	80223ac <_ZdlPvj>
 80068e8:	4620      	mov	r0, r4
 80068ea:	bd10      	pop	{r4, pc}

080068ec <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4604      	mov	r4, r0
    {
        model.tick();
 80068f0:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80068f4:	f000 f820 	bl	8006938 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80068f8:	4620      	mov	r0, r4
    }
 80068fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80068fe:	f00d bf21 	b.w	8014744 <_ZN8touchgfx11Application15handleTickEventEv>
	...

08006904 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006904:	b510      	push	{r4, lr}
 8006906:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8006908:	f7fc fc04 	bl	8003114 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800690c:	4b01      	ldr	r3, [pc, #4]	@ (8006914 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800690e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8006910:	6023      	str	r3, [r4, #0]
}
 8006912:	bd10      	pop	{r4, pc}
 8006914:	080251f8 	.word	0x080251f8

08006918 <_ZN5ModelC1Ev>:
#ifndef TRUE
#define TRUE  1
#endif

Model::Model() :
		modelListener(0), refreshText(FALSE), refreshSmeter(FALSE), getSelection(FALSE)
 8006918:	2200      	movs	r2, #0
 800691a:	6002      	str	r2, [r0, #0]
 800691c:	8082      	strh	r2, [r0, #4]
 800691e:	7182      	strb	r2, [r0, #6]
{

}
 8006920:	4770      	bx	lr
	...

08006924 <_ZN5Model19getSelectionFromGUIEb>:

}

void Model::getSelectionFromGUI(bool getSelection)
{
	osMessageQueueGetMsgSize(myTaskToGUIHandle);
 8006924:	4b01      	ldr	r3, [pc, #4]	@ (800692c <_ZN5Model19getSelectionFromGUIEb+0x8>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	f005 bb80 	b.w	800c02c <osMessageQueueGetMsgSize>
 800692c:	24000198 	.word	0x24000198

08006930 <_ZN5Model13viewDataReadyEv>:

void Model::viewDataReady()
{


	modelListener->viewDataReady();
 8006930:	6800      	ldr	r0, [r0, #0]
 8006932:	6803      	ldr	r3, [r0, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	4718      	bx	r3

08006938 <_ZN5Model4tickEv>:
{
 8006938:	b538      	push	{r3, r4, r5, lr}
	if (VFOhasChangedforDisplay == TRUE)
 800693a:	4d10      	ldr	r5, [pc, #64]	@ (800697c <_ZN5Model4tickEv+0x44>)
	startTimerA = TRUE;
 800693c:	2201      	movs	r2, #1
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <_ZN5Model4tickEv+0x48>)
{
 8006940:	4604      	mov	r4, r0
	if (VFOhasChangedforDisplay == TRUE)
 8006942:	7829      	ldrb	r1, [r5, #0]
	startTimerA = TRUE;
 8006944:	701a      	strb	r2, [r3, #0]
	if (VFOhasChangedforDisplay == TRUE)
 8006946:	4291      	cmp	r1, r2
 8006948:	d106      	bne.n	8006958 <_ZN5Model4tickEv+0x20>
		modelListener->showNewVFO(refreshText);
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	6803      	ldr	r3, [r0, #0]
		refreshText = TRUE;
 800694e:	7121      	strb	r1, [r4, #4]
		modelListener->showNewVFO(refreshText);
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4798      	blx	r3
		VFOhasChangedforDisplay = FALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	702b      	strb	r3, [r5, #0]
	modelListener->showNewSmeter(refreshSmeter);
 8006958:	6820      	ldr	r0, [r4, #0]
	refreshSmeter = TRUE;
 800695a:	2101      	movs	r1, #1
	modelListener->showNewSmeter(refreshSmeter);
 800695c:	6803      	ldr	r3, [r0, #0]
	refreshSmeter = TRUE;
 800695e:	7161      	strb	r1, [r4, #5]
	modelListener->showNewSmeter(refreshSmeter);
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	4798      	blx	r3
	if (osMessageQueueGetCount(myTaskToGUIHandle) > 0)
 8006964:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <_ZN5Model4tickEv+0x4c>)
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	f005 fb63 	bl	800c032 <osMessageQueueGetCount>
 800696c:	b120      	cbz	r0, 8006978 <_ZN5Model4tickEv+0x40>
		viewDataReady();
 800696e:	4620      	mov	r0, r4
}
 8006970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		viewDataReady();
 8006974:	f7ff bfdc 	b.w	8006930 <_ZN5Model13viewDataReadyEv>
}
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	24000161 	.word	0x24000161
 8006980:	2400015c 	.word	0x2400015c
 8006984:	24000198 	.word	0x24000198

08006988 <_ZN13ModelListener19getSelectionFromGUIEb>:
    }

    virtual void showNewVFO(bool refreshText){};
    virtual void showNewSmeter(bool refreshSmeter){};
	virtual void getSelectionFromGUI(bool getSelection){};
 8006988:	4770      	bx	lr

0800698a <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800698a:	4770      	bx	lr

0800698c <_ZThn4_N16Screen1PresenterD1Ev>:
 800698c:	3804      	subs	r0, #4
 800698e:	4770      	bx	lr

08006990 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8006990:	4770      	bx	lr

08006992 <_ZN16Screen1Presenter10showNewVFOEb>:

}

void Screen1Presenter::showNewVFO(bool refreshText)
{
	view.showNewVFO(refreshText);
 8006992:	68c0      	ldr	r0, [r0, #12]
 8006994:	6803      	ldr	r3, [r0, #0]
 8006996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006998:	4718      	bx	r3

0800699a <_ZThn4_N16Screen1Presenter10showNewVFOEb>:

    virtual void showNewSmeter(bool refreshSmeter);
    virtual void showNewVFO(bool refreshText);
 800699a:	f1a0 0004 	sub.w	r0, r0, #4
 800699e:	f7ff bff8 	b.w	8006992 <_ZN16Screen1Presenter10showNewVFOEb>

080069a2 <_ZN16Screen1Presenter13showNewSmeterEb>:
}

void Screen1Presenter::showNewSmeter(bool refreshSmeter)
{
	view.showNewSmeter(refreshSmeter);
 80069a2:	68c0      	ldr	r0, [r0, #12]
 80069a4:	6803      	ldr	r3, [r0, #0]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a8:	4718      	bx	r3

080069aa <_ZThn4_N16Screen1Presenter13showNewSmeterEb>:
    virtual void showNewSmeter(bool refreshSmeter);
 80069aa:	f1a0 0004 	sub.w	r0, r0, #4
 80069ae:	f7ff bff8 	b.w	80069a2 <_ZN16Screen1Presenter13showNewSmeterEb>

080069b2 <_ZN16Screen1Presenter13viewDataReadyEv>:
	model->getSelectionFromGUI(getSelection);
}

void Screen1Presenter::viewDataReady()
{
	view.viewDataReady();
 80069b2:	68c0      	ldr	r0, [r0, #12]
 80069b4:	6803      	ldr	r3, [r0, #0]
 80069b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b8:	4718      	bx	r3

080069ba <_ZThn4_N16Screen1Presenter13viewDataReadyEv>:
    virtual void askUserSelection(bool getSelection);
    virtual void viewDataReady();
 80069ba:	f1a0 0004 	sub.w	r0, r0, #4
 80069be:	f7ff bff8 	b.w	80069b2 <_ZN16Screen1Presenter13viewDataReadyEv>

080069c2 <_ZN16Screen1PresenterD0Ev>:
    virtual ~Screen1Presenter() {}
 80069c2:	b510      	push	{r4, lr}
 80069c4:	4604      	mov	r4, r0
 80069c6:	2110      	movs	r1, #16
 80069c8:	f01b fcf0 	bl	80223ac <_ZdlPvj>
 80069cc:	4620      	mov	r0, r4
 80069ce:	bd10      	pop	{r4, pc}

080069d0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80069d0:	f1a0 0004 	sub.w	r0, r0, #4
 80069d4:	e7f5      	b.n	80069c2 <_ZN16Screen1PresenterD0Ev>

080069d6 <_ZN16Screen1Presenter16askUserSelectionEb>:
	model->getSelectionFromGUI(getSelection);
 80069d6:	6880      	ldr	r0, [r0, #8]
 80069d8:	f7ff bfa4 	b.w	8006924 <_ZN5Model19getSelectionFromGUIEb>

080069dc <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80069dc:	2200      	movs	r2, #0
    : view(v)
 80069de:	60c1      	str	r1, [r0, #12]
 80069e0:	6082      	str	r2, [r0, #8]
 80069e2:	4a02      	ldr	r2, [pc, #8]	@ (80069ec <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80069e4:	6002      	str	r2, [r0, #0]
 80069e6:	3228      	adds	r2, #40	@ 0x28
 80069e8:	6042      	str	r2, [r0, #4]
}
 80069ea:	4770      	bx	lr
 80069ec:	0802524c 	.word	0x0802524c

080069f0 <_ZN11Screen1View13viewDataReadyEv>:
}

void Screen1View::tearDownScreen()
{
	Screen1ViewBase::tearDownScreen();
}
 80069f0:	4770      	bx	lr

080069f2 <_ZN11Screen1View16provideViewStateEb>:
	buttonToggleBand.invalidate();
}

void Screen1View::provideViewState(bool getSelection)
{
	presenter->getSelectionFromGUI(getSelection);
 80069f2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80069f4:	6843      	ldr	r3, [r0, #4]
 80069f6:	3004      	adds	r0, #4
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	4718      	bx	r3

080069fc <_ZN11Screen1ViewD1Ev>:
class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();

    virtual ~Screen1View() {}
 80069fc:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <_ZN11Screen1ViewD1Ev+0x10>)
 80069fe:	b510      	push	{r4, lr}
 8006a00:	4604      	mov	r4, r0
 8006a02:	6003      	str	r3, [r0, #0]
 8006a04:	f7fc ffcc 	bl	80039a0 <_ZN15Screen1ViewBaseD1Ev>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	0802529c 	.word	0x0802529c

08006a10 <_ZN11Screen1ViewD0Ev>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4604      	mov	r4, r0
 8006a14:	f7ff fff2 	bl	80069fc <_ZN11Screen1ViewD1Ev>
 8006a18:	f242 1168 	movw	r1, #8552	@ 0x2168
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f01b fcc5 	bl	80223ac <_ZdlPvj>
 8006a22:	4620      	mov	r0, r4
 8006a24:	bd10      	pop	{r4, pc}
	...

08006a28 <_ZN11Screen1View10showNewVFOEb>:
	Unicode::snprintfFloat(textArea1Buffer, TEXTAREA1_SIZE, "%07.2f", vfo_40m);
 8006a28:	4b0a      	ldr	r3, [pc, #40]	@ (8006a54 <_ZN11Screen1View10showNewVFOEb+0x2c>)
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8006a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006a58 <_ZN11Screen1View10showNewVFOEb+0x30>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
{
 8006a2e:	b513      	push	{r0, r1, r4, lr}
 8006a30:	4604      	mov	r4, r0
 8006a32:	210a      	movs	r1, #10
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f200 5024 	addw	r0, r0, #1316	@ 0x524
	textArea1.resizeToCurrentText();
 8006a3a:	34f8      	adds	r4, #248	@ 0xf8
 8006a3c:	ab01      	add	r3, sp, #4
 8006a3e:	f011 fb87 	bl	8018150 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8006a42:	4620      	mov	r0, r4
 8006a44:	f00b f838 	bl	8011ab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	textArea1.invalidate();
 8006a48:	4620      	mov	r0, r4
}
 8006a4a:	b002      	add	sp, #8
 8006a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
 8006a50:	f00e be6f 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8006a54:	2400001c 	.word	0x2400001c
 8006a58:	0802528c 	.word	0x0802528c

08006a5c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	4604      	mov	r4, r0
 8006a60:	f7fd f91c 	bl	8003c9c <_ZN15Screen1ViewBaseC1Ev>
 8006a64:	4b01      	ldr	r3, [pc, #4]	@ (8006a6c <_ZN11Screen1ViewC1Ev+0x10>)
}
 8006a66:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8006a68:	6023      	str	r3, [r4, #0]
}
 8006a6a:	bd10      	pop	{r4, pc}
 8006a6c:	0802529c 	.word	0x0802529c

08006a70 <_GLOBAL__sub_I_currentViewState>:
 */
class PixelDataWidget : public Widget
{
public:
    PixelDataWidget()
        : Widget(),
 8006a70:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <_GLOBAL__sub_I_currentViewState+0x28>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	f44f 7180 	mov.w	r1, #256	@ 0x100
          buffer(0),
 8006a78:	629a      	str	r2, [r3, #40]	@ 0x28
        : Widget(),
 8006a7a:	6259      	str	r1, [r3, #36]	@ 0x24
          format(Bitmap::RGB888),
          alpha(255)
 8006a7c:	4907      	ldr	r1, [pc, #28]	@ (8006a9c <_GLOBAL__sub_I_currentViewState+0x2c>)
        : Widget(),
 8006a7e:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8006a82:	e9c3 2203 	strd	r2, r2, [r3, #12]
          nextSibling(0),
 8006a86:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8006a8a:	e9c3 2207 	strd	r2, r2, [r3, #28]
          format(Bitmap::RGB888),
 8006a8e:	f64f 7201 	movw	r2, #65281	@ 0xff01
          alpha(255)
 8006a92:	6019      	str	r1, [r3, #0]
          format(Bitmap::RGB888),
 8006a94:	859a      	strh	r2, [r3, #44]	@ 0x2c
}

void Screen1View::viewDataReady()
{

}
 8006a96:	4770      	bx	lr
 8006a98:	24003ce0 	.word	0x24003ce0
 8006a9c:	080259c0 	.word	0x080259c0

08006aa0 <_ZN11Screen1View11setupScreenEv>:
{
 8006aa0:	b538      	push	{r3, r4, r5, lr}
        rect.x = x;
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad4 <_ZN11Screen1View11setupScreenEv+0x34>)
 8006aa4:	4605      	mov	r5, r0
	Screen1ViewBase::setupScreen();
 8006aa6:	f7fc ff46 	bl	8003936 <_ZN15Screen1ViewBase11setupScreenEv>
        rect.width = width;
 8006aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad8 <_ZN11Screen1View11setupScreenEv+0x38>)
 8006aac:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <_ZN11Screen1View11setupScreenEv+0x3c>)
 8006aae:	1d28      	adds	r0, r5, #4
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	e9c4 2301 	strd	r2, r3, [r4, #4]
     *
     * @see getPixelData, setBitmapFormat
     */
    void setPixelData(uint8_t* const data)
    {
        buffer = data;
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <_ZN11Screen1View11setupScreenEv+0x40>)
 8006ab8:	62a3      	str	r3, [r4, #40]	@ 0x28
     *
     * @see getBitmapFormat
     */
    void setBitmapFormat(Bitmap::BitmapFormat bitmapFormat)
    {
        format = bitmapFormat;
 8006aba:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8006abe:	85a3      	strh	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8006ac6:	f007 fb09 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
	pixelDataWidget.invalidate();
 8006aca:	4620      	mov	r0, r4
}
 8006acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	pixelDataWidget.invalidate();
 8006ad0:	f00e be2f 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8006ad4:	24003ce0 	.word	0x24003ce0
 8006ad8:	00a50046 	.word	0x00a50046
 8006adc:	0064012c 	.word	0x0064012c
 8006ae0:	24003d10 	.word	0x24003d10

08006ae4 <_ZN11Screen1View13showNewSmeterEb>:
	if (sMeterTestData == 0)
 8006ae4:	4b18      	ldr	r3, [pc, #96]	@ (8006b48 <_ZN11Screen1View13showNewSmeterEb+0x64>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
{
 8006ae8:	b513      	push	{r0, r1, r4, lr}
		image2.setBitmap(touchgfx::Bitmap(BITMAP_S1_ID));
 8006aea:	f500 74bc 	add.w	r4, r0, #376	@ 0x178
	if (sMeterTestData == 0)
 8006aee:	b963      	cbnz	r3, 8006b0a <_ZN11Screen1View13showNewSmeterEb+0x26>
 8006af0:	2307      	movs	r3, #7
		image2.setBitmap(touchgfx::Bitmap(BITMAP_S920_ID));
 8006af2:	a901      	add	r1, sp, #4
 8006af4:	4620      	mov	r0, r4
 8006af6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006afa:	f00b f994 	bl	8011e26 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	image2.invalidate();
 8006afe:	4620      	mov	r0, r4
}
 8006b00:	b002      	add	sp, #8
 8006b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	image2.invalidate();
 8006b06:	f00e be14 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
	else if (sMeterTestData == 1)
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d8f6      	bhi.n	8006afe <_ZN11Screen1View13showNewSmeterEb+0x1a>
 8006b10:	e8df f003 	tbb	[pc, r3]
 8006b14:	0b090705 	.word	0x0b090705
 8006b18:	13110f0d 	.word	0x13110f0d
 8006b1c:	1715      	.short	0x1715
 8006b1e:	2308      	movs	r3, #8
 8006b20:	e7e7      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b22:	2309      	movs	r3, #9
 8006b24:	e7e5      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b26:	230a      	movs	r3, #10
 8006b28:	e7e3      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b2a:	230b      	movs	r3, #11
 8006b2c:	e7e1      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	e7df      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b32:	230d      	movs	r3, #13
 8006b34:	e7dd      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b36:	230e      	movs	r3, #14
 8006b38:	e7db      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b3a:	230f      	movs	r3, #15
 8006b3c:	e7d9      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b3e:	2310      	movs	r3, #16
 8006b40:	e7d7      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b42:	2311      	movs	r3, #17
 8006b44:	e7d5      	b.n	8006af2 <_ZN11Screen1View13showNewSmeterEb+0xe>
 8006b46:	bf00      	nop
 8006b48:	2400015f 	.word	0x2400015f

08006b4c <_ZN11Screen1View10toggleRXTXEv>:
	if (currentViewState.stateView_rxtx == 0)
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <_ZN11Screen1View10toggleRXTXEv+0x38>)
 8006b4e:	685a      	ldr	r2, [r3, #4]
{
 8006b50:	b513      	push	{r0, r1, r4, lr}
		buttonPTT.setBitmaps(touchgfx::Bitmap(BITMAP_PTT_ID), touchgfx::Bitmap(BITMAP_PTT_ID));
 8006b52:	f100 0498 	add.w	r4, r0, #152	@ 0x98
	if (currentViewState.stateView_rxtx == 0)
 8006b56:	b98a      	cbnz	r2, 8006b7c <_ZN11Screen1View10toggleRXTXEv+0x30>
		currentViewState.stateView_rxtx = 1; //Tx now
 8006b58:	2201      	movs	r2, #1
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	2305      	movs	r3, #5
		buttonPTT.setBitmaps(touchgfx::Bitmap(BITMAP_PTT_OFF_ID), touchgfx::Bitmap(BITMAP_PTT_OFF_ID));
 8006b5e:	4620      	mov	r0, r4
 8006b60:	aa01      	add	r2, sp, #4
 8006b62:	4669      	mov	r1, sp
 8006b64:	f8ad 3000 	strh.w	r3, [sp]
 8006b68:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006b6c:	f00b f822 	bl	8011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
	buttonPTT.invalidate();
 8006b70:	4620      	mov	r0, r4
}
 8006b72:	b002      	add	sp, #8
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	buttonPTT.invalidate();
 8006b78:	f00e bddb 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
		currentViewState.stateView_rxtx = 0; //Rx now
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	2306      	movs	r3, #6
 8006b82:	e7ec      	b.n	8006b5e <_ZN11Screen1View10toggleRXTXEv+0x12>
 8006b84:	2400002c 	.word	0x2400002c

08006b88 <_ZN11Screen1View12toggleLSBUSBEv>:
	if (currentViewState.stateView_lsbusb == 0)
 8006b88:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc0 <_ZN11Screen1View12toggleLSBUSBEv+0x38>)
 8006b8a:	2301      	movs	r3, #1
{
 8006b8c:	b513      	push	{r0, r1, r4, lr}
	if (currentViewState.stateView_lsbusb == 0)
 8006b8e:	68d1      	ldr	r1, [r2, #12]
		buttonLSBUSB.setBitmaps(touchgfx::Bitmap(BITMAP_USB_ID), touchgfx::Bitmap(BITMAP_USB_ID));
 8006b90:	f500 74a2 	add.w	r4, r0, #324	@ 0x144
	if (currentViewState.stateView_lsbusb == 0)
 8006b94:	b981      	cbnz	r1, 8006bb8 <_ZN11Screen1View12toggleLSBUSBEv+0x30>
		currentViewState.stateView_lsbusb = 1; //USB now
 8006b96:	60d3      	str	r3, [r2, #12]
 8006b98:	2313      	movs	r3, #19
		buttonLSBUSB.setBitmaps(touchgfx::Bitmap(BITMAP_LSB_ID), touchgfx::Bitmap(BITMAP_LSB_ID));
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	aa01      	add	r2, sp, #4
 8006b9e:	4669      	mov	r1, sp
 8006ba0:	f8ad 3000 	strh.w	r3, [sp]
 8006ba4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006ba8:	f00b f804 	bl	8011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
	buttonLSBUSB.invalidate();
 8006bac:	4620      	mov	r0, r4
}
 8006bae:	b002      	add	sp, #8
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	buttonLSBUSB.invalidate();
 8006bb4:	f00e bdbd 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
		currentViewState.stateView_lsbusb = 0; //LSB now
 8006bb8:	2100      	movs	r1, #0
 8006bba:	60d1      	str	r1, [r2, #12]
 8006bbc:	e7ed      	b.n	8006b9a <_ZN11Screen1View12toggleLSBUSBEv+0x12>
 8006bbe:	bf00      	nop
 8006bc0:	2400002c 	.word	0x2400002c

08006bc4 <_ZN11Screen1View10selectBandEv>:
	if (currentViewState.stateView_band == 20)
 8006bc4:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <_ZN11Screen1View10selectBandEv+0x58>)
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	2a14      	cmp	r2, #20
{
 8006bca:	b513      	push	{r0, r1, r4, lr}
		buttonToggleBand.setBitmaps(touchgfx::Bitmap(BITMAP_M40M_ID), touchgfx::Bitmap(BITMAP_M40M_ID));
 8006bcc:	f500 74d2 	add.w	r4, r0, #420	@ 0x1a4
	if (currentViewState.stateView_band == 20)
 8006bd0:	d108      	bne.n	8006be4 <_ZN11Screen1View10selectBandEv+0x20>
		currentViewState.stateView_band = 40; //40m now
 8006bd2:	2228      	movs	r2, #40	@ 0x28
 8006bd4:	609a      	str	r2, [r3, #8]
 8006bd6:	2303      	movs	r3, #3
		buttonToggleBand.setBitmaps(touchgfx::Bitmap(BITMAP_M20M_ID), touchgfx::Bitmap(BITMAP_M20M_ID));
 8006bd8:	aa01      	add	r2, sp, #4
 8006bda:	f8ad 3000 	strh.w	r3, [sp]
 8006bde:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006be2:	e00a      	b.n	8006bfa <_ZN11Screen1View10selectBandEv+0x36>
	else if (currentViewState.stateView_band == 40)
 8006be4:	2a28      	cmp	r2, #40	@ 0x28
 8006be6:	d112      	bne.n	8006c0e <_ZN11Screen1View10selectBandEv+0x4a>
		currentViewState.stateView_band = 80; //80m now
 8006be8:	2250      	movs	r2, #80	@ 0x50
 8006bea:	609a      	str	r2, [r3, #8]
 8006bec:	2304      	movs	r3, #4
		buttonToggleBand.setBitmaps(touchgfx::Bitmap(BITMAP_M80M_ID), touchgfx::Bitmap(BITMAP_M80M_ID));
 8006bee:	eb0d 0203 	add.w	r2, sp, r3
 8006bf2:	f8ad 3000 	strh.w	r3, [sp]
 8006bf6:	f8ad 3004 	strh.w	r3, [sp, #4]
		buttonToggleBand.setBitmaps(touchgfx::Bitmap(BITMAP_M20M_ID), touchgfx::Bitmap(BITMAP_M20M_ID));
 8006bfa:	4669      	mov	r1, sp
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f00a ffd9 	bl	8011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
	buttonToggleBand.invalidate();
 8006c02:	4620      	mov	r0, r4
}
 8006c04:	b002      	add	sp, #8
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	buttonToggleBand.invalidate();
 8006c0a:	f00e bd92 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
	else if (currentViewState.stateView_band == 80)
 8006c0e:	2a50      	cmp	r2, #80	@ 0x50
 8006c10:	d1f7      	bne.n	8006c02 <_ZN11Screen1View10selectBandEv+0x3e>
		currentViewState.stateView_band = 20; //20m now
 8006c12:	2214      	movs	r2, #20
 8006c14:	609a      	str	r2, [r3, #8]
 8006c16:	2302      	movs	r3, #2
 8006c18:	e7de      	b.n	8006bd8 <_ZN11Screen1View10selectBandEv+0x14>
 8006c1a:	bf00      	nop
 8006c1c:	2400002c 	.word	0x2400002c

08006c20 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8006c20:	f240 1301 	movw	r3, #257	@ 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8006c24:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0

  return FT5336_OK;
}
 8006c28:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8006c2a:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8006c2c:	2305      	movs	r3, #5
 8006c2e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8006c30:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006c34:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8006c38:	4770      	bx	lr

08006c3a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8006c3a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8006c3e:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8006c40:	bf04      	itt	eq
 8006c42:	2300      	moveq	r3, #0
 8006c44:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }

  return ret;
}
 8006c48:	2000      	movs	r0, #0
 8006c4a:	4770      	bx	lr

08006c4c <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	4770      	bx	lr

08006c50 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006c50:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006c52:	6904      	ldr	r4, [r0, #16]
 8006c54:	8900      	ldrh	r0, [r0, #8]
 8006c56:	46a4      	mov	ip, r4
}
 8006c58:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006c5c:	4760      	bx	ip

08006c5e <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006c5e:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006c60:	68c4      	ldr	r4, [r0, #12]
 8006c62:	8900      	ldrh	r0, [r0, #8]
 8006c64:	46a4      	mov	ip, r4
}
 8006c66:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006c6a:	4760      	bx	ip

08006c6c <FT5336_GestureConfig>:
{
 8006c6c:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006c6e:	f100 0518 	add.w	r5, r0, #24
{
 8006c72:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006c74:	7809      	ldrb	r1, [r1, #0]
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f8f4 	bl	8006e64 <ft5336_radian_value>
 8006c7c:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8006c7e:	7931      	ldrb	r1, [r6, #4]
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f8fb 	bl	8006e7c <ft5336_offset_left_right>
 8006c86:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8006c88:	7a31      	ldrb	r1, [r6, #8]
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 f902 	bl	8006e94 <ft5336_offset_up_down>
 8006c90:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8006c92:	7b31      	ldrb	r1, [r6, #12]
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f909 	bl	8006eac <ft5336_disatnce_left_right>
 8006c9a:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8006c9c:	7c31      	ldrb	r1, [r6, #16]
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f910 	bl	8006ec4 <ft5336_distance_up_down>
 8006ca4:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8006ca6:	7d31      	ldrb	r1, [r6, #20]
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f917 	bl	8006edc <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8006cae:	42c4      	cmn	r4, r0
}
 8006cb0:	bf14      	ite	ne
 8006cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8006cb6:	2000      	moveq	r0, #0
 8006cb8:	bd70      	pop	{r4, r5, r6, pc}

08006cba <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8006cba:	3018      	adds	r0, #24
 8006cbc:	f000 b926 	b.w	8006f0c <ft5336_chip_id>

08006cc0 <FT5336_GetState>:
{
 8006cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8006cc2:	f100 0518 	add.w	r5, r0, #24
{
 8006cc6:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8006cc8:	a901      	add	r1, sp, #4
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f000 f8bd 	bl	8006e4a <ft5336_td_status>
 8006cd0:	bb08      	cbnz	r0, 8006d16 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8006cd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8006cd6:	2b05      	cmp	r3, #5
 8006cd8:	bf98      	it	ls
 8006cda:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8006cdc:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8006cde:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	eb0d 0203 	add.w	r2, sp, r3
 8006ce8:	f000 f89c 	bl	8006e24 <ft5336_read_reg>
 8006cec:	b9b0      	cbnz	r0, 8006d1c <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8006cee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cf2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006cfc:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8006cfe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8006d02:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8006d04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60a3      	str	r3, [r4, #8]
}
 8006d12:	b003      	add	sp, #12
 8006d14:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8006d16:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1a:	e7df      	b.n	8006cdc <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006d20:	e7f7      	b.n	8006d12 <FT5336_GetState+0x52>

08006d22 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8006d22:	3018      	adds	r0, #24
 8006d24:	f000 b88c 	b.w	8006e40 <ft5336_gest_id>

08006d28 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8006d28:	2101      	movs	r1, #1
 8006d2a:	3018      	adds	r0, #24
 8006d2c:	f000 b8e2 	b.w	8006ef4 <ft5336_g_mode>

08006d30 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8006d30:	2100      	movs	r1, #0
 8006d32:	3018      	adds	r0, #24
 8006d34:	f000 b8de 	b.w	8006ef4 <ft5336_g_mode>

08006d38 <FT5336_Init>:
{
 8006d38:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8006d3a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8006d3e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8006d40:	b96b      	cbnz	r3, 8006d5e <FT5336_Init+0x26>
    pObj->IO.Init();
 8006d42:	6803      	ldr	r3, [r0, #0]
 8006d44:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8006d46:	4620      	mov	r0, r4
 8006d48:	f7ff fff2 	bl	8006d30 <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8006d4c:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8006d4e:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8006d52:	bf18      	it	ne
 8006d54:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8006d56:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT5336_OK)
 8006d5a:	4240      	negs	r0, r0
}
 8006d5c:	bd10      	pop	{r4, pc}
    ret += FT5336_DisableIT(pObj);
 8006d5e:	2000      	movs	r0, #0
  return ret;
 8006d60:	e7fc      	b.n	8006d5c <FT5336_Init+0x24>

08006d62 <FT5336_ClearIT>:
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
 8006d62:	2000      	movs	r0, #0
 8006d64:	4770      	bx	lr

08006d66 <FT5336_GetMultiTouchState>:
{
 8006d66:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8006d68:	f100 0518 	add.w	r5, r0, #24
{
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8006d70:	4628      	mov	r0, r5
 8006d72:	4669      	mov	r1, sp
 8006d74:	f000 f869 	bl	8006e4a <ft5336_td_status>
 8006d78:	bb90      	cbnz	r0, 8006de0 <FT5336_GetMultiTouchState+0x7a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8006d7a:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	bf98      	it	ls
 8006d82:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8006d84:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8006d86:	231e      	movs	r3, #30
 8006d88:	466a      	mov	r2, sp
 8006d8a:	2103      	movs	r1, #3
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f849 	bl	8006e24 <ft5336_read_reg>
 8006d92:	bb40      	cbnz	r0, 8006de6 <FT5336_GetMultiTouchState+0x80>
 8006d94:	4621      	mov	r1, r4
 8006d96:	466d      	mov	r5, sp
 8006d98:	3414      	adds	r4, #20
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8006d9a:	782a      	ldrb	r2, [r5, #0]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8006d9c:	3506      	adds	r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8006d9e:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8006da2:	0213      	lsls	r3, r2, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8006da4:	0992      	lsrs	r2, r2, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8006da6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006daa:	4333      	orrs	r3, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8006dac:	f815 6c03 	ldrb.w	r6, [r5, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8006db0:	f841 3f04 	str.w	r3, [r1, #4]!
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8006db4:	428c      	cmp	r4, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8006db6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8006dba:	63ca      	str	r2, [r1, #60]	@ 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8006dbc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006dc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006dc4:	ea43 0306 	orr.w	r3, r3, r6
 8006dc8:	614b      	str	r3, [r1, #20]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8006dca:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8006dce:	628b      	str	r3, [r1, #40]	@ 0x28
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8006dd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dd4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8006dd8:	650b      	str	r3, [r1, #80]	@ 0x50
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8006dda:	d1de      	bne.n	8006d9a <FT5336_GetMultiTouchState+0x34>
}
 8006ddc:	b008      	add	sp, #32
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e7ce      	b.n	8006d84 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8006de6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006dea:	e7f7      	b.n	8006ddc <FT5336_GetMultiTouchState+0x76>

08006dec <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8006dec:	b190      	cbz	r0, 8006e14 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8006dee:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8006df0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006df2:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8006df4:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8006df6:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8006df8:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006dfa:	68ca      	ldr	r2, [r1, #12]
 8006dfc:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006dfe:	690a      	ldr	r2, [r1, #16]
 8006e00:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8006e02:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8006e04:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8006e06:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8006e08:	4a04      	ldr	r2, [pc, #16]	@ (8006e1c <FT5336_RegisterBusIO+0x30>)
 8006e0a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8006e0c:	4a04      	ldr	r2, [pc, #16]	@ (8006e20 <FT5336_RegisterBusIO+0x34>)
 8006e0e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8006e10:	b103      	cbz	r3, 8006e14 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8006e12:	4718      	bx	r3
}
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	08006c51 	.word	0x08006c51
 8006e20:	08006c5f 	.word	0x08006c5f

08006e24 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8006e24:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006e26:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006e2a:	46a4      	mov	ip, r4
}
 8006e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006e30:	4760      	bx	ip

08006e32 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8006e32:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8006e34:	6804      	ldr	r4, [r0, #0]
 8006e36:	6880      	ldr	r0, [r0, #8]
 8006e38:	46a4      	mov	ip, r4
}
 8006e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8006e3e:	4760      	bx	ip

08006e40 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8006e40:	2301      	movs	r3, #1
{
 8006e42:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7ff bfed 	b.w	8006e24 <ft5336_read_reg>

08006e4a <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006e4a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8006e4c:	460a      	mov	r2, r1
{
 8006e4e:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8006e50:	2301      	movs	r3, #1
 8006e52:	2102      	movs	r1, #2
 8006e54:	f7ff ffe6 	bl	8006e24 <ft5336_read_reg>
  
  if(ret == 0)
 8006e58:	b918      	cbnz	r0, 8006e62 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8006e5a:	7823      	ldrb	r3, [r4, #0]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8006e62:	bd10      	pop	{r4, pc}

08006e64 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8006e64:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8006e66:	2301      	movs	r3, #1
{
 8006e68:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8006e6c:	f10d 0207 	add.w	r2, sp, #7
 8006e70:	2191      	movs	r1, #145	@ 0x91
 8006e72:	f7ff ffde 	bl	8006e32 <ft5336_write_reg>
}
 8006e76:	b003      	add	sp, #12
 8006e78:	f85d fb04 	ldr.w	pc, [sp], #4

08006e7c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006e7c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8006e7e:	2301      	movs	r3, #1
{
 8006e80:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8006e84:	f10d 0207 	add.w	r2, sp, #7
 8006e88:	2192      	movs	r1, #146	@ 0x92
 8006e8a:	f7ff ffd2 	bl	8006e32 <ft5336_write_reg>
}
 8006e8e:	b003      	add	sp, #12
 8006e90:	f85d fb04 	ldr.w	pc, [sp], #4

08006e94 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8006e94:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8006e96:	2301      	movs	r3, #1
{
 8006e98:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8006e9c:	f10d 0207 	add.w	r2, sp, #7
 8006ea0:	2193      	movs	r1, #147	@ 0x93
 8006ea2:	f7ff ffc6 	bl	8006e32 <ft5336_write_reg>
}
 8006ea6:	b003      	add	sp, #12
 8006ea8:	f85d fb04 	ldr.w	pc, [sp], #4

08006eac <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006eac:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8006eae:	2301      	movs	r3, #1
{
 8006eb0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8006eb4:	f10d 0207 	add.w	r2, sp, #7
 8006eb8:	2194      	movs	r1, #148	@ 0x94
 8006eba:	f7ff ffba 	bl	8006e32 <ft5336_write_reg>
}
 8006ebe:	b003      	add	sp, #12
 8006ec0:	f85d fb04 	ldr.w	pc, [sp], #4

08006ec4 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8006ec4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8006ec6:	2301      	movs	r3, #1
{
 8006ec8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8006ecc:	f10d 0207 	add.w	r2, sp, #7
 8006ed0:	2195      	movs	r1, #149	@ 0x95
 8006ed2:	f7ff ffae 	bl	8006e32 <ft5336_write_reg>
}
 8006ed6:	b003      	add	sp, #12
 8006ed8:	f85d fb04 	ldr.w	pc, [sp], #4

08006edc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8006edc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8006ede:	2301      	movs	r3, #1
{
 8006ee0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8006ee4:	f10d 0207 	add.w	r2, sp, #7
 8006ee8:	2196      	movs	r1, #150	@ 0x96
 8006eea:	f7ff ffa2 	bl	8006e32 <ft5336_write_reg>
}
 8006eee:	b003      	add	sp, #12
 8006ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08006ef4 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8006ef4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8006ef6:	2301      	movs	r3, #1
{
 8006ef8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8006efc:	f10d 0207 	add.w	r2, sp, #7
 8006f00:	21a4      	movs	r1, #164	@ 0xa4
 8006f02:	f7ff ff96 	bl	8006e32 <ft5336_write_reg>
}
 8006f06:	b003      	add	sp, #12
 8006f08:	f85d fb04 	ldr.w	pc, [sp], #4

08006f0c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006f0c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8006f0e:	2301      	movs	r3, #1
 8006f10:	21a8      	movs	r1, #168	@ 0xa8
 8006f12:	f7ff bf87 	b.w	8006e24 <ft5336_read_reg>

08006f16 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8006f16:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006f1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8006f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8006f22:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8006f26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f2e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006f32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8006f36:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006f3a:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8006f3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006f40:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8006f44:	2000      	movs	r0, #0
 8006f46:	4770      	bx	lr

08006f48 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	b09a      	sub	sp, #104	@ 0x68
 8006f4c:	460e      	mov	r6, r1
 8006f4e:	4605      	mov	r5, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8006f50:	2100      	movs	r1, #0
{
 8006f52:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8006f54:	a806      	add	r0, sp, #24
 8006f56:	2250      	movs	r2, #80	@ 0x50
 8006f58:	f01b ffb7 	bl	8022eca <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8006f5c:	2214      	movs	r2, #20
 8006f5e:	2100      	movs	r1, #0
 8006f60:	a801      	add	r0, sp, #4
 8006f62:	f01b ffb2 	bl	8022eca <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006f66:	b92e      	cbnz	r6, 8006f74 <MX25LM51245G_AutoPollingMemReady+0x2c>
 8006f68:	2c01      	cmp	r4, #1
 8006f6a:	d150      	bne.n	800700e <MX25LM51245G_AutoPollingMemReady+0xc6>
  {
    return MX25LM51245G_ERROR;
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8006f70:	b01a      	add	sp, #104	@ 0x68
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006f74:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006f76:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006f78:	9309      	str	r3, [sp, #36]	@ 0x24
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006f7a:	2010      	movs	r0, #16
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006f7c:	4253      	negs	r3, r2
 8006f7e:	4153      	adcs	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006f80:	2e00      	cmp	r6, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006f82:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8006f86:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006f88:	bf14      	ite	ne
 8006f8a:	2201      	movne	r2, #1
 8006f8c:	2200      	moveq	r2, #0
 8006f8e:	ea4f 1102 	mov.w	r1, r2, lsl #4
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8006f92:	ea4f 2282 	mov.w	r2, r2, lsl #10
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006f96:	910a      	str	r1, [sp, #40]	@ 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8006f98:	f240 51fa 	movw	r1, #1530	@ 0x5fa
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8006f9c:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006f9e:	ea4f 22c3 	mov.w	r2, r3, lsl #11
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8006fa2:	bf08      	it	eq
 8006fa4:	2105      	moveq	r1, #5
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006fa6:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006fa8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8006fac:	9108      	str	r1, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fae:	a906      	add	r1, sp, #24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006fb0:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006fb2:	bf0c      	ite	eq
 8006fb4:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
 8006fb8:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 8006fbc:	9214      	str	r2, [sp, #80]	@ 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006fbe:	ea4f 62c3 	mov.w	r2, r3, lsl #27
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006fc2:	ea4f 7343 	mov.w	r3, r3, lsl #29
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006fc6:	9216      	str	r2, [sp, #88]	@ 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006fc8:	bf14      	ite	ne
 8006fca:	2205      	movne	r2, #5
 8006fcc:	2200      	moveq	r2, #0
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006fce:	9318      	str	r3, [sp, #96]	@ 0x60
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006fd0:	2c01      	cmp	r4, #1
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8006fd2:	f04f 0301 	mov.w	r3, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006fd6:	9217      	str	r2, [sp, #92]	@ 0x5c
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8006fd8:	9302      	str	r3, [sp, #8]
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006fda:	bf0c      	ite	eq
 8006fdc:	2202      	moveq	r2, #2
 8006fde:	2201      	movne	r2, #1
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006fe0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006fe4:	9215      	str	r2, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006fea:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f002 fc09 	bl	8009806 <HAL_OSPI_Command>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1b9      	bne.n	8006f6c <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffc:	a901      	add	r1, sp, #4
 8006ffe:	4628      	mov	r0, r5
 8007000:	f002 fd46 	bl	8009a90 <HAL_OSPI_AutoPolling>
 8007004:	3800      	subs	r0, #0
 8007006:	bf18      	it	ne
 8007008:	2001      	movne	r0, #1
 800700a:	4240      	negs	r0, r0
 800700c:	e7b0      	b.n	8006f70 <MX25LM51245G_AutoPollingMemReady+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800700e:	2301      	movs	r3, #1
 8007010:	e7b1      	b.n	8006f76 <MX25LM51245G_AutoPollingMemReady+0x2e>

08007012 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8007012:	b570      	push	{r4, r5, r6, lr}
 8007014:	b096      	sub	sp, #88	@ 0x58
 8007016:	460c      	mov	r4, r1
 8007018:	4606      	mov	r6, r0
 800701a:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800701c:	2100      	movs	r1, #0
 800701e:	2250      	movs	r2, #80	@ 0x50
 8007020:	a802      	add	r0, sp, #8
 8007022:	f01b ff52 	bl	8022eca <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8007026:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8007028:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800702a:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800702e:	d105      	bne.n	800703c <MX25LM51245G_EnableSTRMemoryMappedMode+0x2a>
 8007030:	2d00      	cmp	r5, #0
 8007032:	d153      	bne.n	80070dc <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
  {
    return MX25LM51245G_ERROR;
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007038:	b016      	add	sp, #88	@ 0x58
 800703a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800703c:	2c00      	cmp	r4, #0
 800703e:	bf14      	ite	ne
 8007040:	2304      	movne	r3, #4
 8007042:	2301      	moveq	r3, #1
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007044:	2201      	movs	r2, #1
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007046:	2c00      	cmp	r4, #0
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007048:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800704a:	bf14      	ite	ne
 800704c:	4613      	movne	r3, r2
 800704e:	2300      	moveq	r3, #0
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007050:	9202      	str	r2, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007052:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007056:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007058:	d142      	bne.n	80070e0 <MX25LM51245G_EnableSTRMemoryMappedMode+0xce>
 800705a:	2d00      	cmp	r5, #0
 800705c:	bf0c      	ite	eq
 800705e:	230b      	moveq	r3, #11
 8007060:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007062:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8007064:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706a:	a902      	add	r1, sp, #8
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800706c:	bf0c      	ite	eq
 800706e:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8007072:	f44f 6380 	movne.w	r3, #1024	@ 0x400
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8007076:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007078:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800707a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800707c:	bf0c      	ite	eq
 800707e:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
 8007082:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007086:	2c00      	cmp	r4, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8007088:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800708a:	bf0c      	ite	eq
 800708c:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8007090:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8007094:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8007096:	bf0c      	ite	eq
 8007098:	2308      	moveq	r3, #8
 800709a:	2306      	movne	r3, #6
 800709c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800709e:	f002 fbb2 	bl	8009806 <HAL_OSPI_Command>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d1c6      	bne.n	8007034 <MX25LM51245G_EnableSTRMemoryMappedMode+0x22>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80070a6:	2302      	movs	r3, #2
 80070a8:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80070aa:	b9e4      	cbnz	r4, 80070e6 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd4>
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	bf18      	it	ne
 80070b0:	2312      	movne	r3, #18
 80070b2:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80070b4:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ba:	a902      	add	r1, sp, #8
 80070bc:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 80070be:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070c0:	f002 fba1 	bl	8009806 <HAL_OSPI_Command>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d1b5      	bne.n	8007034 <MX25LM51245G_EnableSTRMemoryMappedMode+0x22>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80070c8:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80070ca:	4669      	mov	r1, sp
 80070cc:	4630      	mov	r0, r6
 80070ce:	f002 fd2f 	bl	8009b30 <HAL_OSPI_MemoryMapped>
 80070d2:	3800      	subs	r0, #0
 80070d4:	bf18      	it	ne
 80070d6:	2001      	movne	r0, #1
 80070d8:	4240      	negs	r0, r0
 80070da:	e7ad      	b.n	8007038 <MX25LM51245G_EnableSTRMemoryMappedMode+0x26>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80070dc:	2304      	movs	r3, #4
 80070de:	e7b1      	b.n	8007044 <MX25LM51245G_EnableSTRMemoryMappedMode+0x32>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80070e0:	f64e 4313 	movw	r3, #60435	@ 0xec13
 80070e4:	e7bd      	b.n	8007062 <MX25LM51245G_EnableSTRMemoryMappedMode+0x50>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80070e6:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 80070ea:	e7e2      	b.n	80070b2 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa0>

080070ec <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80070ec:	b510      	push	{r4, lr}
 80070ee:	b096      	sub	sp, #88	@ 0x58
 80070f0:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80070f2:	224c      	movs	r2, #76	@ 0x4c
 80070f4:	2100      	movs	r1, #0
 80070f6:	a803      	add	r0, sp, #12
 80070f8:	f01b fee7 	bl	8022eca <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80070fc:	2300      	movs	r3, #0
  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80070fe:	f04f 0c08 	mov.w	ip, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007102:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800710a:	4620      	mov	r0, r4
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800710c:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8007110:	2301      	movs	r3, #1
 8007112:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8007114:	2304      	movs	r3, #4
 8007116:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8007118:	2310      	movs	r3, #16
 800711a:	e9cd 3c06 	strd	r3, ip, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800711e:	f64e 6311 	movw	r3, #60945	@ 0xee11
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8007122:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8007126:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8007128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800712c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800712e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007132:	e9cd 310a 	strd	r3, r1, [sp, #40]	@ 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8007136:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800713a:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800713c:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800713e:	2306      	movs	r3, #6
 8007140:	e9cd c312 	strd	ip, r3, [sp, #72]	@ 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8007144:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007148:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800714a:	f002 fb5c 	bl	8009806 <HAL_OSPI_Command>
 800714e:	b118      	cbz	r0, 8007158 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6c>
  {
    return MX25LM51245G_ERROR;
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007154:	b016      	add	sp, #88	@ 0x58
 8007156:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8007158:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800715a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800715e:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8007160:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8007162:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8007166:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800716a:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800716c:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800716e:	f002 fb4a 	bl	8009806 <HAL_OSPI_Command>
 8007172:	2800      	cmp	r0, #0
 8007174:	d1ec      	bne.n	8007150 <MX25LM51245G_EnableDTRMemoryMappedMode+0x64>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8007176:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8007178:	4669      	mov	r1, sp
 800717a:	4620      	mov	r0, r4
 800717c:	f002 fcd8 	bl	8009b30 <HAL_OSPI_MemoryMapped>
 8007180:	3800      	subs	r0, #0
 8007182:	bf18      	it	ne
 8007184:	2001      	movne	r0, #1
 8007186:	4240      	negs	r0, r0
 8007188:	e7e4      	b.n	8007154 <MX25LM51245G_EnableDTRMemoryMappedMode+0x68>

0800718a <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800718a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718e:	b09a      	sub	sp, #104	@ 0x68
 8007190:	460f      	mov	r7, r1
 8007192:	4605      	mov	r5, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 8007194:	2100      	movs	r1, #0
{
 8007196:	4616      	mov	r6, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8007198:	a806      	add	r0, sp, #24
 800719a:	2250      	movs	r2, #80	@ 0x50
 800719c:	f01b fe95 	bl	8022eca <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80071a0:	2214      	movs	r2, #20
 80071a2:	2100      	movs	r1, #0
 80071a4:	a801      	add	r0, sp, #4
 80071a6:	f01b fe90 	bl	8022eca <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80071aa:	b937      	cbnz	r7, 80071ba <MX25LM51245G_WriteEnable+0x30>
 80071ac:	2e01      	cmp	r6, #1
 80071ae:	d163      	bne.n	8007278 <MX25LM51245G_WriteEnable+0xee>
  {
    return MX25LM51245G_ERROR;
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80071b4:	b01a      	add	sp, #104	@ 0x68
 80071b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80071ba:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80071bc:	1e71      	subs	r1, r6, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80071be:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c4:	4628      	mov	r0, r5
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80071c6:	424c      	negs	r4, r1
 80071c8:	414c      	adcs	r4, r1
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80071ca:	2f00      	cmp	r7, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071cc:	a906      	add	r1, sp, #24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80071ce:	ea4f 03c4 	mov.w	r3, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80071d2:	bf14      	ite	ne
 80071d4:	f04f 0801 	movne.w	r8, #1
 80071d8:	f04f 0800 	moveq.w	r8, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80071dc:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80071de:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80071e2:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80071e4:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 80071e8:	bf08      	it	eq
 80071ea:	2306      	moveq	r3, #6
 80071ec:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071ee:	f002 fb0a 	bl	8009806 <HAL_OSPI_Command>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d1dc      	bne.n	80071b0 <MX25LM51245G_WriteEnable+0x26>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80071f6:	2f00      	cmp	r7, #0
 80071f8:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Address        = 0U;
 80071fc:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071fe:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8007202:	bf08      	it	eq
 8007204:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007206:	a906      	add	r1, sp, #24
 8007208:	4628      	mov	r0, r5
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800720a:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800720c:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8007210:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007212:	ea4f 23c4 	mov.w	r3, r4, lsl #11
 8007216:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8007218:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800721c:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800721e:	bf0c      	ite	eq
 8007220:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8007224:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8007228:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800722a:	ea4f 63c4 	mov.w	r3, r4, lsl #27
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800722e:	ea4f 7444 	mov.w	r4, r4, lsl #29
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007232:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007234:	bf14      	ite	ne
 8007236:	2305      	movne	r3, #5
 8007238:	2300      	moveq	r3, #0
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800723a:	2e01      	cmp	r6, #1
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800723c:	9418      	str	r4, [sp, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800723e:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007240:	bf0c      	ite	eq
 8007242:	2302      	moveq	r3, #2
 8007244:	2301      	movne	r3, #1
 8007246:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007248:	f002 fadd 	bl	8009806 <HAL_OSPI_Command>
 800724c:	2800      	cmp	r0, #0
 800724e:	d1af      	bne.n	80071b0 <MX25LM51245G_WriteEnable+0x26>
  s_config.Match           = 2U;
 8007250:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007252:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8007254:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007256:	a901      	add	r1, sp, #4
 8007258:	4628      	mov	r0, r5
  s_config.Mask            = 2U;
 800725a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800725e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007262:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726a:	f002 fc11 	bl	8009a90 <HAL_OSPI_AutoPolling>
 800726e:	3800      	subs	r0, #0
 8007270:	bf18      	it	ne
 8007272:	2001      	movne	r0, #1
 8007274:	4240      	negs	r0, r0
 8007276:	e79d      	b.n	80071b4 <MX25LM51245G_WriteEnable+0x2a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007278:	2301      	movs	r3, #1
 800727a:	e79f      	b.n	80071bc <MX25LM51245G_WriteEnable+0x32>

0800727c <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800727c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727e:	b095      	sub	sp, #84	@ 0x54
 8007280:	460e      	mov	r6, r1
 8007282:	4605      	mov	r5, r0
 8007284:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8007286:	2100      	movs	r1, #0
 8007288:	2250      	movs	r2, #80	@ 0x50
 800728a:	4668      	mov	r0, sp
{
 800728c:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800728e:	f01b fe1c 	bl	8022eca <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007292:	b92e      	cbnz	r6, 80072a0 <MX25LM51245G_WriteCfg2Register+0x24>
 8007294:	2c01      	cmp	r4, #1
 8007296:	d146      	bne.n	8007326 <MX25LM51245G_WriteCfg2Register+0xaa>
  {
    return MX25LM51245G_ERROR;
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800729c:	b015      	add	sp, #84	@ 0x54
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80072a0:	2304      	movs	r3, #4
 80072a2:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80072a4:	1e63      	subs	r3, r4, #1
  s_command.Address            = WriteAddr;
 80072a6:	9706      	str	r7, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80072a8:	425a      	negs	r2, r3
 80072aa:	415a      	adcs	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80072ac:	2e00      	cmp	r6, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80072ae:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 80072b2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80072be:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80072c0:	f247 238d 	movw	r3, #29325	@ 0x728d
 80072c4:	bf08      	it	eq
 80072c6:	2372      	moveq	r3, #114	@ 0x72
 80072c8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80072ca:	bf0c      	ite	eq
 80072cc:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 80072d0:	f44f 6380 	movne.w	r3, #1024	@ 0x400
 80072d4:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80072d6:	ea4f 23c2 	mov.w	r3, r2, lsl #11
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80072da:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80072de:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80072e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80072e4:	9210      	str	r2, [sp, #64]	@ 0x40
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80072e6:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80072e8:	bf0c      	ite	eq
 80072ea:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 80072ee:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80072f2:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80072f4:	d019      	beq.n	800732a <MX25LM51245G_WriteCfg2Register+0xae>
 80072f6:	2c01      	cmp	r4, #1
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2302      	moveq	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007302:	4669      	mov	r1, sp
 8007304:	4628      	mov	r0, r5
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8007306:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007308:	f002 fa7d 	bl	8009806 <HAL_OSPI_Command>
 800730c:	2800      	cmp	r0, #0
 800730e:	d1c3      	bne.n	8007298 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007314:	a91a      	add	r1, sp, #104	@ 0x68
 8007316:	4628      	mov	r0, r5
 8007318:	f002 fb20 	bl	800995c <HAL_OSPI_Transmit>
 800731c:	3800      	subs	r0, #0
 800731e:	bf18      	it	ne
 8007320:	2001      	movne	r0, #1
 8007322:	4240      	negs	r0, r0
 8007324:	e7ba      	b.n	800729c <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007326:	2301      	movs	r3, #1
 8007328:	e7bb      	b.n	80072a2 <MX25LM51245G_WriteCfg2Register+0x26>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800732a:	2301      	movs	r3, #1
 800732c:	e7e7      	b.n	80072fe <MX25LM51245G_WriteCfg2Register+0x82>

0800732e <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800732e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007332:	b094      	sub	sp, #80	@ 0x50
 8007334:	460f      	mov	r7, r1
 8007336:	4606      	mov	r6, r0
 8007338:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800733a:	2100      	movs	r1, #0
 800733c:	2250      	movs	r2, #80	@ 0x50
 800733e:	4668      	mov	r0, sp
{
 8007340:	4698      	mov	r8, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8007342:	f01b fdc2 	bl	8022eca <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007346:	b937      	cbnz	r7, 8007356 <MX25LM51245G_ReadCfg2Register+0x28>
 8007348:	2d01      	cmp	r5, #1
 800734a:	d14e      	bne.n	80073ea <MX25LM51245G_ReadCfg2Register+0xbc>
  {
    return MX25LM51245G_ERROR;
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007350:	b014      	add	sp, #80	@ 0x50
 8007352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007356:	2304      	movs	r3, #4
 8007358:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800735a:	1e6b      	subs	r3, r5, #1
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800735c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007360:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007362:	425c      	negs	r4, r3
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007364:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8007366:	f8cd 8018 	str.w	r8, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800736a:	415c      	adcs	r4, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800736c:	2f00      	cmp	r7, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800736e:	ea4f 03c4 	mov.w	r3, r4, lsl #3
 8007372:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800737e:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8007380:	f247 138e 	movw	r3, #29070	@ 0x718e
 8007384:	bf08      	it	eq
 8007386:	2371      	moveq	r3, #113	@ 0x71
 8007388:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800738a:	bf0c      	ite	eq
 800738c:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8007390:	f44f 6380 	movne.w	r3, #1024	@ 0x400
 8007394:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007396:	ea4f 23c4 	mov.w	r3, r4, lsl #11
 800739a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800739c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80073a0:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80073a2:	bf0c      	ite	eq
 80073a4:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 80073a8:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80073ac:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80073ae:	ea4f 63c4 	mov.w	r3, r4, lsl #27
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80073b2:	ea4f 7444 	mov.w	r4, r4, lsl #29
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80073b6:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80073b8:	bf14      	ite	ne
 80073ba:	2305      	movne	r3, #5
 80073bc:	2300      	moveq	r3, #0
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80073be:	2d01      	cmp	r5, #1
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80073c0:	9412      	str	r4, [sp, #72]	@ 0x48
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80073c2:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80073c4:	bf0c      	ite	eq
 80073c6:	2302      	moveq	r3, #2
 80073c8:	2301      	movne	r3, #1
 80073ca:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80073cc:	f002 fa1b 	bl	8009806 <HAL_OSPI_Command>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d1bb      	bne.n	800734c <MX25LM51245G_ReadCfg2Register+0x1e>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80073d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073da:	4630      	mov	r0, r6
 80073dc:	f002 fb02 	bl	80099e4 <HAL_OSPI_Receive>
 80073e0:	3800      	subs	r0, #0
 80073e2:	bf18      	it	ne
 80073e4:	2001      	movne	r0, #1
 80073e6:	4240      	negs	r0, r0
 80073e8:	e7b2      	b.n	8007350 <MX25LM51245G_ReadCfg2Register+0x22>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7b4      	b.n	8007358 <MX25LM51245G_ReadCfg2Register+0x2a>

080073ee <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80073ee:	b570      	push	{r4, r5, r6, lr}
 80073f0:	b094      	sub	sp, #80	@ 0x50
 80073f2:	460d      	mov	r5, r1
 80073f4:	4606      	mov	r6, r0
 80073f6:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80073f8:	2100      	movs	r1, #0
 80073fa:	2250      	movs	r2, #80	@ 0x50
 80073fc:	4668      	mov	r0, sp
 80073fe:	f01b fd64 	bl	8022eca <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007402:	bb0d      	cbnz	r5, 8007448 <MX25LM51245G_ResetEnable+0x5a>
 8007404:	2c01      	cmp	r4, #1
 8007406:	d021      	beq.n	800744c <MX25LM51245G_ResetEnable+0x5e>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007408:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800740a:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800740c:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800740e:	4669      	mov	r1, sp
 8007410:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007412:	4254      	negs	r4, r2
 8007414:	4154      	adcs	r4, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007416:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007418:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800741c:	bf14      	ite	ne
 800741e:	2301      	movne	r3, #1
 8007420:	2300      	moveq	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007422:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007426:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800742a:	9405      	str	r4, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800742c:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800742e:	f246 6399 	movw	r3, #26265	@ 0x6699
 8007432:	bf08      	it	eq
 8007434:	2366      	moveq	r3, #102	@ 0x66
 8007436:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007438:	f002 f9e5 	bl	8009806 <HAL_OSPI_Command>
 800743c:	3800      	subs	r0, #0
 800743e:	bf18      	it	ne
 8007440:	2001      	movne	r0, #1
 8007442:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8007444:	b014      	add	sp, #80	@ 0x50
 8007446:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007448:	2304      	movs	r3, #4
 800744a:	e7de      	b.n	800740a <MX25LM51245G_ResetEnable+0x1c>
    return MX25LM51245G_ERROR;
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	e7f8      	b.n	8007444 <MX25LM51245G_ResetEnable+0x56>

08007452 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8007452:	b570      	push	{r4, r5, r6, lr}
 8007454:	b094      	sub	sp, #80	@ 0x50
 8007456:	460d      	mov	r5, r1
 8007458:	4606      	mov	r6, r0
 800745a:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800745c:	2100      	movs	r1, #0
 800745e:	2250      	movs	r2, #80	@ 0x50
 8007460:	4668      	mov	r0, sp
 8007462:	f01b fd32 	bl	8022eca <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007466:	bb0d      	cbnz	r5, 80074ac <MX25LM51245G_ResetMemory+0x5a>
 8007468:	2c01      	cmp	r4, #1
 800746a:	d021      	beq.n	80074b0 <MX25LM51245G_ResetMemory+0x5e>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800746c:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800746e:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007470:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007472:	4669      	mov	r1, sp
 8007474:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007476:	4254      	negs	r4, r2
 8007478:	4154      	adcs	r4, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800747a:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800747c:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007480:	bf14      	ite	ne
 8007482:	2301      	movne	r3, #1
 8007484:	2300      	moveq	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007486:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800748a:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800748e:	9405      	str	r4, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007490:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8007492:	f649 1366 	movw	r3, #39270	@ 0x9966
 8007496:	bf08      	it	eq
 8007498:	2399      	moveq	r3, #153	@ 0x99
 800749a:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800749c:	f002 f9b3 	bl	8009806 <HAL_OSPI_Command>
 80074a0:	3800      	subs	r0, #0
 80074a2:	bf18      	it	ne
 80074a4:	2001      	movne	r0, #1
 80074a6:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80074a8:	b014      	add	sp, #80	@ 0x50
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80074ac:	2304      	movs	r3, #4
 80074ae:	e7de      	b.n	800746e <MX25LM51245G_ResetMemory+0x1c>
    return MX25LM51245G_ERROR;
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e7f8      	b.n	80074a8 <MX25LM51245G_ResetMemory+0x56>
	...

080074b8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 80074b8:	4a11      	ldr	r2, [pc, #68]	@ (8007500 <BSP_I2C4_DeInit+0x48>)
{
 80074ba:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 80074bc:	6813      	ldr	r3, [r2, #0]
 80074be:	b90b      	cbnz	r3, 80074c4 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80074c0:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80074c2:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 80074c4:	3b01      	subs	r3, #1
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f9      	bne.n	80074c0 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80074cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80074d0:	480c      	ldr	r0, [pc, #48]	@ (8007504 <BSP_I2C4_DeInit+0x4c>)
 80074d2:	f001 f955 	bl	8008780 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80074d6:	480b      	ldr	r0, [pc, #44]	@ (8007504 <BSP_I2C4_DeInit+0x4c>)
 80074d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074dc:	f001 f950 	bl	8008780 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80074e0:	4a09      	ldr	r2, [pc, #36]	@ (8007508 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80074e2:	480a      	ldr	r0, [pc, #40]	@ (800750c <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 80074e4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80074e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80074f0:	f001 fb78 	bl	8008be4 <HAL_I2C_DeInit>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d0e3      	beq.n	80074c0 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 80074f8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80074fc:	e7e1      	b.n	80074c2 <BSP_I2C4_DeInit+0xa>
 80074fe:	bf00      	nop
 8007500:	2401a6a4 	.word	0x2401a6a4
 8007504:	58021400 	.word	0x58021400
 8007508:	58024400 	.word	0x58024400
 800750c:	2401a6a8 	.word	0x2401a6a8

08007510 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007510:	2300      	movs	r3, #0
 8007512:	2201      	movs	r2, #1
{
 8007514:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8007516:	6041      	str	r1, [r0, #4]
{
 8007518:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800751a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800751c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8007520:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007524:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007528:	f001 fb0b 	bl	8008b42 <HAL_I2C_Init>
 800752c:	4601      	mov	r1, r0
 800752e:	b108      	cbz	r0, 8007534 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8007530:	2001      	movs	r0, #1
}
 8007532:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007534:	4620      	mov	r0, r4
 8007536:	f001 fdb6 	bl	80090a6 <HAL_I2CEx_ConfigAnalogFilter>
 800753a:	4601      	mov	r1, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d1f7      	bne.n	8007530 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007540:	4620      	mov	r0, r4
 8007542:	f001 fdd6 	bl	80090f2 <HAL_I2CEx_ConfigDigitalFilter>
 8007546:	3800      	subs	r0, #0
 8007548:	bf18      	it	ne
 800754a:	2001      	movne	r0, #1
 800754c:	e7f1      	b.n	8007532 <MX_I2C4_Init+0x22>
	...

08007550 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8007550:	4b9f      	ldr	r3, [pc, #636]	@ (80077d0 <BSP_I2C4_Init+0x280>)
 8007552:	48a0      	ldr	r0, [pc, #640]	@ (80077d4 <BSP_I2C4_Init+0x284>)
{
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8007558:	6003      	str	r3, [r0, #0]
{
 800755a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter++ == 0U)
 800755c:	4b9e      	ldr	r3, [pc, #632]	@ (80077d8 <BSP_I2C4_Init+0x288>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	9200      	str	r2, [sp, #0]
 8007562:	3201      	adds	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	b11b      	cbz	r3, 8007572 <BSP_I2C4_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 800756a:	2000      	movs	r0, #0
}
 800756c:	b013      	add	sp, #76	@ 0x4c
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8007572:	f001 fd93 	bl	800909c <HAL_I2C_GetState>
 8007576:	2800      	cmp	r0, #0
 8007578:	d1f7      	bne.n	800756a <BSP_I2C4_Init+0x1a>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800757a:	4d98      	ldr	r5, [pc, #608]	@ (80077dc <BSP_I2C4_Init+0x28c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800757c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8007580:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007582:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007584:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007588:	4895      	ldr	r0, [pc, #596]	@ (80077e0 <BSP_I2C4_Init+0x290>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800758a:	f043 0320 	orr.w	r3, r3, #32
 800758e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007592:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	930a      	str	r3, [sp, #40]	@ 0x28
 800759c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800759e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80075a2:	f043 0320 	orr.w	r3, r3, #32
 80075a6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80075aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80075ae:	9611      	str	r6, [sp, #68]	@ 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80075b8:	2312      	movs	r3, #18
 80075ba:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80075be:	2302      	movs	r3, #2
 80075c0:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80075c4:	a90d      	add	r1, sp, #52	@ 0x34
 80075c6:	f000 fff9 	bl	80085bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80075ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80075ce:	a90d      	add	r1, sp, #52	@ 0x34
 80075d0:	4883      	ldr	r0, [pc, #524]	@ (80077e0 <BSP_I2C4_Init+0x290>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80075d2:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80075d4:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80075d6:	f000 fff1 	bl	80085bc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80075da:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80075de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e2:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80075e6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80075ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80075f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80075f2:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80075f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fa:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80075fe:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8007602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007606:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800760a:	f003 fa25 	bl	800aa58 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800760e:	2800      	cmp	r0, #0
 8007610:	d06a      	beq.n	80076e8 <BSP_I2C4_Init+0x198>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007612:	4b74      	ldr	r3, [pc, #464]	@ (80077e4 <BSP_I2C4_Init+0x294>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8007614:	f04f 0910 	mov.w	r9, #16
  if (tsdadel_max <= 0)
 8007618:	9a00      	ldr	r2, [sp, #0]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800761a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800761e:	f8df b1cc 	ldr.w	fp, [pc, #460]	@ 80077ec <BSP_I2C4_Init+0x29c>
  if (tsdadel_max <= 0)
 8007622:	4692      	mov	sl, r2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007624:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8007628:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800762c:	4b6e      	ldr	r3, [pc, #440]	@ (80077e8 <BSP_I2C4_Init+0x298>)
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800762e:	0086      	lsls	r6, r0, #2
  if (tsdadel_max <= 0)
 8007630:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007632:	f1c5 0532 	rsb	r5, r5, #50	@ 0x32
 8007636:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007638:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800763c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  if (tsdadel_max <= 0)
 8007640:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
{
 8007644:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007646:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800764a:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800764e:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8007652:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8007656:	d35a      	bcc.n	800770e <BSP_I2C4_Init+0x1be>
 8007658:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800765a:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800765c:	42bd      	cmp	r5, r7
 800765e:	d850      	bhi.n	8007702 <BSP_I2C4_Init+0x1b2>
 8007660:	42be      	cmp	r6, r7
 8007662:	d34e      	bcc.n	8007702 <BSP_I2C4_Init+0x1b2>
            if(presc != prev_presc)
 8007664:	4591      	cmp	r9, r2
 8007666:	d04c      	beq.n	8007702 <BSP_I2C4_Init+0x1b2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007668:	2414      	movs	r4, #20
 800766a:	fb04 fa03 	mul.w	sl, r4, r3
              I2c_valid_timing_nbr ++;
 800766e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007670:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007672:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007676:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007678:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800767c:	e9c9 4e01 	strd	r4, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007680:	d93c      	bls.n	80076fc <BSP_I2C4_Init+0x1ac>
 8007682:	4a59      	ldr	r2, [pc, #356]	@ (80077e8 <BSP_I2C4_Init+0x298>)
 8007684:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007686:	4b58      	ldr	r3, [pc, #352]	@ (80077e8 <BSP_I2C4_Init+0x298>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007688:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800768c:	4957      	ldr	r1, [pc, #348]	@ (80077ec <BSP_I2C4_Init+0x29c>)
 800768e:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007690:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007692:	9202      	str	r2, [sp, #8]
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007698:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800769a:	0043      	lsls	r3, r0, #1
 800769c:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80076a0:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80076a4:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80076a8:	f10b 0b01 	add.w	fp, fp, #1
 80076ac:	9408      	str	r4, [sp, #32]
 80076ae:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80076b0:	9b05      	ldr	r3, [sp, #20]
 80076b2:	429f      	cmp	r7, r3
 80076b4:	d137      	bne.n	8007726 <BSP_I2C4_Init+0x1d6>
        if (idx < I2C_VALID_TIMING_NBR)
 80076b6:	2a7f      	cmp	r2, #127	@ 0x7f
 80076b8:	d816      	bhi.n	80076e8 <BSP_I2C4_Init+0x198>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80076ba:	2114      	movs	r1, #20
 80076bc:	4b4b      	ldr	r3, [pc, #300]	@ (80077ec <BSP_I2C4_Init+0x29c>)
 80076be:	434a      	muls	r2, r1
 80076c0:	1899      	adds	r1, r3, r2
 80076c2:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80076c4:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80076c6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80076ca:	684b      	ldr	r3, [r1, #4]
 80076cc:	051b      	lsls	r3, r3, #20
 80076ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80076d2:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80076d4:	688b      	ldr	r3, [r1, #8]
 80076d6:	041b      	lsls	r3, r3, #16
 80076d8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80076dc:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80076de:	68cb      	ldr	r3, [r1, #12]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80076e4:	4323      	orrs	r3, r4
 80076e6:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80076e8:	9900      	ldr	r1, [sp, #0]
 80076ea:	483a      	ldr	r0, [pc, #232]	@ (80077d4 <BSP_I2C4_Init+0x284>)
 80076ec:	f7ff ff10 	bl	8007510 <MX_I2C4_Init>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	f43f af3a 	beq.w	800756a <BSP_I2C4_Init+0x1a>
          ret = BSP_ERROR_BUS_FAILURE;
 80076f6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80076fa:	e737      	b.n	800756c <BSP_I2C4_Init+0x1c>
 80076fc:	4691      	mov	r9, r2
 80076fe:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007702:	f10e 0e01 	add.w	lr, lr, #1
 8007706:	440f      	add	r7, r1
 8007708:	f1be 0f10 	cmp.w	lr, #16
 800770c:	d1a6      	bne.n	800765c <BSP_I2C4_Init+0x10c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800770e:	f1bc 0f10 	cmp.w	ip, #16
 8007712:	4488      	add	r8, r1
 8007714:	d199      	bne.n	800764a <BSP_I2C4_Init+0xfa>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007716:	3201      	adds	r2, #1
 8007718:	4401      	add	r1, r0
 800771a:	2a10      	cmp	r2, #16
 800771c:	d192      	bne.n	8007644 <BSP_I2C4_Init+0xf4>
 800771e:	f1ba 0f00 	cmp.w	sl, #0
 8007722:	d1ae      	bne.n	8007682 <BSP_I2C4_Init+0x132>
 8007724:	e7af      	b.n	8007686 <BSP_I2C4_Init+0x136>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007726:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007728:	f04f 0c00 	mov.w	ip, #0
 800772c:	9c08      	ldr	r4, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800772e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007732:	441c      	add	r4, r3
 8007734:	ebab 0503 	sub.w	r5, fp, r3
 8007738:	9403      	str	r4, [sp, #12]
 800773a:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800773c:	9d03      	ldr	r5, [sp, #12]
 800773e:	9401      	str	r4, [sp, #4]
 8007740:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007742:	441c      	add	r4, r3
 8007744:	9407      	str	r4, [sp, #28]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007746:	f240 5414 	movw	r4, #1300	@ 0x514
 800774a:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800774e:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007752:	42a5      	cmp	r5, r4
 8007754:	d930      	bls.n	80077b8 <BSP_I2C4_Init+0x268>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007756:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800775a:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800775e:	d22b      	bcs.n	80077b8 <BSP_I2C4_Init+0x268>
 8007760:	9c07      	ldr	r4, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007762:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007766:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800776a:	1966      	adds	r6, r4, r5
 800776c:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007770:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8007774:	f240 4412 	movw	r4, #1042	@ 0x412
 8007778:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800777c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007780:	45a2      	cmp	sl, r4
 8007782:	d812      	bhi.n	80077aa <BSP_I2C4_Init+0x25a>
 8007784:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8007788:	d30f      	bcc.n	80077aa <BSP_I2C4_Init+0x25a>
 800778a:	4580      	cmp	r8, r0
 800778c:	d90d      	bls.n	80077aa <BSP_I2C4_Init+0x25a>
              error = -error;
 800778e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8007792:	bf28      	it	cs
 8007794:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8007796:	9c02      	ldr	r4, [sp, #8]
 8007798:	45a2      	cmp	sl, r4
 800779a:	d206      	bcs.n	80077aa <BSP_I2C4_Init+0x25a>
              I2c_valid_timing[count].scll = scll;
 800779c:	9a04      	ldr	r2, [sp, #16]
              I2c_valid_timing[count].sclh = sclh;
 800779e:	f8cd a008 	str.w	sl, [sp, #8]
              I2c_valid_timing[count].scll = scll;
 80077a2:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80077a4:	9a06      	ldr	r2, [sp, #24]
 80077a6:	60ca      	str	r2, [r1, #12]
 80077a8:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80077aa:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80077ae:	4498      	add	r8, r3
 80077b0:	441e      	add	r6, r3
 80077b2:	eba9 0903 	sub.w	r9, r9, r3
 80077b6:	d1db      	bne.n	8007770 <BSP_I2C4_Init+0x220>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80077b8:	9c01      	ldr	r4, [sp, #4]
 80077ba:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80077be:	441d      	add	r5, r3
 80077c0:	eba4 0403 	sub.w	r4, r4, r3
 80077c4:	9401      	str	r4, [sp, #4]
 80077c6:	d1be      	bne.n	8007746 <BSP_I2C4_Init+0x1f6>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80077c8:	3701      	adds	r7, #1
 80077ca:	3114      	adds	r1, #20
 80077cc:	e770      	b.n	80076b0 <BSP_I2C4_Init+0x160>
 80077ce:	bf00      	nop
 80077d0:	58001c00 	.word	0x58001c00
 80077d4:	2401a6a8 	.word	0x2401a6a8
 80077d8:	2401a6a4 	.word	0x2401a6a4
 80077dc:	58024400 	.word	0x58024400
 80077e0:	58021400 	.word	0x58021400
 80077e4:	3b9aca00 	.word	0x3b9aca00
 80077e8:	24019ca0 	.word	0x24019ca0
 80077ec:	24019ca4 	.word	0x24019ca4

080077f0 <BSP_I2C4_WriteReg>:
{
 80077f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80077f2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80077f6:	9200      	str	r2, [sp, #0]
 80077f8:	460a      	mov	r2, r1
 80077fa:	4601      	mov	r1, r0
 80077fc:	4808      	ldr	r0, [pc, #32]	@ (8007820 <BSP_I2C4_WriteReg+0x30>)
 80077fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007802:	2301      	movs	r3, #1
 8007804:	f001 fa08 	bl	8008c18 <HAL_I2C_Mem_Write>
 8007808:	b140      	cbz	r0, 800781c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800780a:	4805      	ldr	r0, [pc, #20]	@ (8007820 <BSP_I2C4_WriteReg+0x30>)
 800780c:	f001 fc49 	bl	80090a2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007810:	2804      	cmp	r0, #4
 8007812:	bf14      	ite	ne
 8007814:	f06f 0003 	mvnne.w	r0, #3
 8007818:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800781c:	b004      	add	sp, #16
 800781e:	bd10      	pop	{r4, pc}
 8007820:	2401a6a8 	.word	0x2401a6a8

08007824 <BSP_I2C4_ReadReg>:
{
 8007824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007826:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800782a:	9200      	str	r2, [sp, #0]
 800782c:	460a      	mov	r2, r1
 800782e:	4601      	mov	r1, r0
 8007830:	4808      	ldr	r0, [pc, #32]	@ (8007854 <BSP_I2C4_ReadReg+0x30>)
 8007832:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007836:	2301      	movs	r3, #1
 8007838:	f001 fac8 	bl	8008dcc <HAL_I2C_Mem_Read>
 800783c:	b140      	cbz	r0, 8007850 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800783e:	4805      	ldr	r0, [pc, #20]	@ (8007854 <BSP_I2C4_ReadReg+0x30>)
 8007840:	f001 fc2f 	bl	80090a2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007844:	2804      	cmp	r0, #4
 8007846:	bf14      	ite	ne
 8007848:	f06f 0003 	mvnne.w	r0, #3
 800784c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8007850:	b004      	add	sp, #16
 8007852:	bd10      	pop	{r4, pc}
 8007854:	2401a6a8 	.word	0x2401a6a8

08007858 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8007858:	f000 bcd2 	b.w	8008200 <HAL_GetTick>

0800785c <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 800785c:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800785e:	4c21      	ldr	r4, [pc, #132]	@ (80078e4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8007860:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007862:	4821      	ldr	r0, [pc, #132]	@ (80078e8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8007864:	78a2      	ldrb	r2, [r4, #2]
 8007866:	7861      	ldrb	r1, [r4, #1]
 8007868:	f7ff fc8f 	bl	800718a <MX25LM51245G_WriteEnable>
 800786c:	b118      	cbz	r0, 8007876 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800786e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8007872:	b005      	add	sp, #20
 8007874:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8007876:	2303      	movs	r3, #3
 8007878:	481b      	ldr	r0, [pc, #108]	@ (80078e8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007880:	78a2      	ldrb	r2, [r4, #2]
 8007882:	7861      	ldrb	r1, [r4, #1]
 8007884:	f7ff fcfa 	bl	800727c <MX25LM51245G_WriteCfg2Register>
 8007888:	2800      	cmp	r0, #0
 800788a:	d1f0      	bne.n	800786e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800788c:	78a2      	ldrb	r2, [r4, #2]
 800788e:	7861      	ldrb	r1, [r4, #1]
 8007890:	4815      	ldr	r0, [pc, #84]	@ (80078e8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8007892:	f7ff fc7a 	bl	800718a <MX25LM51245G_WriteEnable>
 8007896:	4603      	mov	r3, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	d1e8      	bne.n	800786e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800789c:	2501      	movs	r5, #1
 800789e:	4812      	ldr	r0, [pc, #72]	@ (80078e8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80078a0:	9500      	str	r5, [sp, #0]
 80078a2:	78a2      	ldrb	r2, [r4, #2]
 80078a4:	7861      	ldrb	r1, [r4, #1]
 80078a6:	f7ff fce9 	bl	800727c <MX25LM51245G_WriteCfg2Register>
 80078aa:	4604      	mov	r4, r0
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d1de      	bne.n	800786e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80078b0:	2028      	movs	r0, #40	@ 0x28
 80078b2:	f000 fcab 	bl	800820c <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80078b6:	4622      	mov	r2, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	480b      	ldr	r0, [pc, #44]	@ (80078e8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80078bc:	f7ff fb44 	bl	8006f48 <MX25LM51245G_AutoPollingMemReady>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1d3      	bne.n	800786e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80078c6:	aa03      	add	r2, sp, #12
 80078c8:	4629      	mov	r1, r5
 80078ca:	9200      	str	r2, [sp, #0]
 80078cc:	4602      	mov	r2, r0
 80078ce:	4806      	ldr	r0, [pc, #24]	@ (80078e8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80078d0:	f7ff fd2d 	bl	800732e <MX25LM51245G_ReadCfg2Register>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d1ca      	bne.n	800786e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 80078d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80078dc:	42ab      	cmp	r3, r5
 80078de:	d0c8      	beq.n	8007872 <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 80078e0:	e7c5      	b.n	800786e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 80078e2:	bf00      	nop
 80078e4:	2401a6fc 	.word	0x2401a6fc
 80078e8:	2401a704 	.word	0x2401a704

080078ec <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 80078ec:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80078ee:	4d27      	ldr	r5, [pc, #156]	@ (800798c <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 80078f0:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80078f2:	4c27      	ldr	r4, [pc, #156]	@ (8007990 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 80078f4:	78aa      	ldrb	r2, [r5, #2]
 80078f6:	7869      	ldrb	r1, [r5, #1]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f7ff fc46 	bl	800718a <MX25LM51245G_WriteEnable>
 80078fe:	b118      	cbz	r0, 8007908 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007900:	f06f 0004 	mvn.w	r0, #4
}
 8007904:	b005      	add	sp, #20
 8007906:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8007908:	2303      	movs	r3, #3
 800790a:	4620      	mov	r0, r4
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007912:	78aa      	ldrb	r2, [r5, #2]
 8007914:	7869      	ldrb	r1, [r5, #1]
 8007916:	f7ff fcb1 	bl	800727c <MX25LM51245G_WriteCfg2Register>
 800791a:	2800      	cmp	r0, #0
 800791c:	d1f0      	bne.n	8007900 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800791e:	78aa      	ldrb	r2, [r5, #2]
 8007920:	4620      	mov	r0, r4
 8007922:	7869      	ldrb	r1, [r5, #1]
 8007924:	f7ff fc31 	bl	800718a <MX25LM51245G_WriteEnable>
 8007928:	4603      	mov	r3, r0
 800792a:	2800      	cmp	r0, #0
 800792c:	d1e8      	bne.n	8007900 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800792e:	2202      	movs	r2, #2
 8007930:	4620      	mov	r0, r4
 8007932:	9200      	str	r2, [sp, #0]
 8007934:	78aa      	ldrb	r2, [r5, #2]
 8007936:	7869      	ldrb	r1, [r5, #1]
 8007938:	f7ff fca0 	bl	800727c <MX25LM51245G_WriteCfg2Register>
 800793c:	2800      	cmp	r0, #0
 800793e:	d1df      	bne.n	8007900 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007940:	2028      	movs	r0, #40	@ 0x28
 8007942:	f000 fc63 	bl	800820c <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8007946:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800794a:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800794c:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800794e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007952:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007954:	f001 fed0 	bl	80096f8 <HAL_OSPI_Init>
 8007958:	b9a8      	cbnz	r0, 8007986 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800795a:	2201      	movs	r2, #1
 800795c:	4620      	mov	r0, r4
 800795e:	4611      	mov	r1, r2
 8007960:	f7ff faf2 	bl	8006f48 <MX25LM51245G_AutoPollingMemReady>
 8007964:	4603      	mov	r3, r0
 8007966:	2800      	cmp	r0, #0
 8007968:	d1ca      	bne.n	8007900 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800796a:	aa03      	add	r2, sp, #12
 800796c:	4620      	mov	r0, r4
 800796e:	9200      	str	r2, [sp, #0]
 8007970:	2201      	movs	r2, #1
 8007972:	4611      	mov	r1, r2
 8007974:	f7ff fcdb 	bl	800732e <MX25LM51245G_ReadCfg2Register>
 8007978:	2800      	cmp	r0, #0
 800797a:	d1c1      	bne.n	8007900 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 800797c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d0bf      	beq.n	8007904 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8007984:	e7bc      	b.n	8007900 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007986:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800798a:	e7bb      	b.n	8007904 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 800798c:	2401a6fc 	.word	0x2401a6fc
 8007990:	2401a704 	.word	0x2401a704

08007994 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8007994:	4a0e      	ldr	r2, [pc, #56]	@ (80079d0 <MX_OSPI_NOR_Init+0x3c>)
 8007996:	2304      	movs	r3, #4
 8007998:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800799c:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800799e:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 80079a0:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 80079a2:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 80079a4:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 80079a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80079aa:	684a      	ldr	r2, [r1, #4]
 80079ac:	6242      	str	r2, [r0, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 80079ae:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 80079b0:	6303      	str	r3, [r0, #48]	@ 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 80079b2:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80079b4:	68ca      	ldr	r2, [r1, #12]
 80079b6:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80079b8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80079bc:	bf12      	itee	ne
 80079be:	461a      	movne	r2, r3
 80079c0:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 80079c4:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80079c8:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80079ca:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_OSPI_Init(hospi);
 80079cc:	f001 be94 	b.w	80096f8 <HAL_OSPI_Init>
 80079d0:	52005000 	.word	0x52005000

080079d4 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 80079d4:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80079d6:	b998      	cbnz	r0, 8007a00 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80079d8:	4c0b      	ldr	r4, [pc, #44]	@ (8007a08 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80079da:	78a3      	ldrb	r3, [r4, #2]
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80079dc:	7861      	ldrb	r1, [r4, #1]
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80079de:	b95b      	cbnz	r3, 80079f8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80079e0:	2201      	movs	r2, #1
 80079e2:	480a      	ldr	r0, [pc, #40]	@ (8007a0c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 80079e4:	f7ff fb15 	bl	8007012 <MX25LM51245G_EnableSTRMemoryMappedMode>
 80079e8:	b110      	cbz	r0, 80079f0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80079ea:	f06f 0004 	mvn.w	r0, #4
}
 80079ee:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80079f0:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80079f2:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80079f4:	7023      	strb	r3, [r4, #0]
 80079f6:	e7fa      	b.n	80079ee <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80079f8:	4804      	ldr	r0, [pc, #16]	@ (8007a0c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 80079fa:	f7ff fb77 	bl	80070ec <MX25LM51245G_EnableDTRMemoryMappedMode>
 80079fe:	e7f3      	b.n	80079e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8007a00:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007a04:	e7f3      	b.n	80079ee <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8007a06:	bf00      	nop
 8007a08:	2401a6fc 	.word	0x2401a6fc
 8007a0c:	2401a704 	.word	0x2401a704

08007a10 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8007a10:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007a12:	b950      	cbnz	r0, 8007a2a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8007a14:	4c09      	ldr	r4, [pc, #36]	@ (8007a3c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8007a16:	7823      	ldrb	r3, [r4, #0]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d109      	bne.n	8007a30 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8007a1c:	4808      	ldr	r0, [pc, #32]	@ (8007a40 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8007a1e:	f002 f8b6 	bl	8009b8e <HAL_OSPI_Abort>
 8007a22:	b940      	cbnz	r0, 8007a36 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007a24:	2301      	movs	r3, #1
 8007a26:	7023      	strb	r3, [r4, #0]
}
 8007a28:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007a2a:	f06f 0001 	mvn.w	r0, #1
 8007a2e:	e7fb      	b.n	8007a28 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8007a30:	f06f 001a 	mvn.w	r0, #26
 8007a34:	e7f8      	b.n	8007a28 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007a36:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007a3a:	e7f5      	b.n	8007a28 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8007a3c:	2401a6fc 	.word	0x2401a6fc
 8007a40:	2401a704 	.word	0x2401a704

08007a44 <BSP_OSPI_NOR_DeInit>:
{
 8007a44:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d156      	bne.n	8007af8 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007a4a:	4c2d      	ldr	r4, [pc, #180]	@ (8007b00 <BSP_OSPI_NOR_DeInit+0xbc>)
 8007a4c:	7823      	ldrb	r3, [r4, #0]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d04b      	beq.n	8007aea <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8007a52:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8007a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a58:	482a      	ldr	r0, [pc, #168]	@ (8007b04 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8007a5a:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8007a5c:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8007a5e:	f000 fe8f 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8007a62:	2104      	movs	r1, #4
 8007a64:	4828      	ldr	r0, [pc, #160]	@ (8007b08 <BSP_OSPI_NOR_DeInit+0xc4>)
 8007a66:	f000 fe8b 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8007a6a:	2140      	movs	r1, #64	@ 0x40
 8007a6c:	4827      	ldr	r0, [pc, #156]	@ (8007b0c <BSP_OSPI_NOR_DeInit+0xc8>)
 8007a6e:	f000 fe87 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8007a72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007a76:	4826      	ldr	r0, [pc, #152]	@ (8007b10 <BSP_OSPI_NOR_DeInit+0xcc>)
 8007a78:	f000 fe82 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8007a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a80:	4823      	ldr	r0, [pc, #140]	@ (8007b10 <BSP_OSPI_NOR_DeInit+0xcc>)
 8007a82:	f000 fe7d 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8007a86:	2104      	movs	r1, #4
 8007a88:	4822      	ldr	r0, [pc, #136]	@ (8007b14 <BSP_OSPI_NOR_DeInit+0xd0>)
 8007a8a:	f000 fe79 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8007a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007a92:	481f      	ldr	r0, [pc, #124]	@ (8007b10 <BSP_OSPI_NOR_DeInit+0xcc>)
 8007a94:	f000 fe74 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8007a98:	2110      	movs	r1, #16
 8007a9a:	481d      	ldr	r0, [pc, #116]	@ (8007b10 <BSP_OSPI_NOR_DeInit+0xcc>)
 8007a9c:	f000 fe70 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8007aa0:	2120      	movs	r1, #32
 8007aa2:	481b      	ldr	r0, [pc, #108]	@ (8007b10 <BSP_OSPI_NOR_DeInit+0xcc>)
 8007aa4:	f000 fe6c 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8007aa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007aac:	4817      	ldr	r0, [pc, #92]	@ (8007b0c <BSP_OSPI_NOR_DeInit+0xc8>)
 8007aae:	f000 fe67 	bl	8008780 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8007ab2:	2180      	movs	r1, #128	@ 0x80
 8007ab4:	4816      	ldr	r0, [pc, #88]	@ (8007b10 <BSP_OSPI_NOR_DeInit+0xcc>)
 8007ab6:	f000 fe63 	bl	8008780 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8007aba:	4b17      	ldr	r3, [pc, #92]	@ (8007b18 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8007abc:	4817      	ldr	r0, [pc, #92]	@ (8007b1c <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8007abe:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007ac0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ac4:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8007ac6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007ac8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007acc:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_CLK_DISABLE();
 8007ace:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007ad2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ad6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8007ada:	f001 fe81 	bl	80097e0 <HAL_OSPI_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	bf14      	ite	ne
 8007ae2:	f06f 0003 	mvnne.w	r0, #3
 8007ae6:	2000      	moveq	r0, #0
}
 8007ae8:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8007aea:	f7ff ff91 	bl	8007a10 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d0af      	beq.n	8007a52 <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8007af2:	f06f 0004 	mvn.w	r0, #4
 8007af6:	e7f7      	b.n	8007ae8 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8007af8:	f06f 0001 	mvn.w	r0, #1
 8007afc:	e7f4      	b.n	8007ae8 <BSP_OSPI_NOR_DeInit+0xa4>
 8007afe:	bf00      	nop
 8007b00:	2401a6fc 	.word	0x2401a6fc
 8007b04:	58021400 	.word	0x58021400
 8007b08:	58020400 	.word	0x58020400
 8007b0c:	58021800 	.word	0x58021800
 8007b10:	58020c00 	.word	0x58020c00
 8007b14:	58021000 	.word	0x58021000
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	2401a704 	.word	0x2401a704

08007b20 <BSP_OSPI_NOR_ConfigFlash>:
{
 8007b20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007b24:	460d      	mov	r5, r1
 8007b26:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d156      	bne.n	8007bda <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007b2c:	4c2e      	ldr	r4, [pc, #184]	@ (8007be8 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8007b2e:	7823      	ldrb	r3, [r4, #0]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d055      	beq.n	8007be0 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8007b34:	7863      	ldrb	r3, [r4, #1]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d146      	bne.n	8007bc8 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8007b3a:	2901      	cmp	r1, #1
 8007b3c:	78a2      	ldrb	r2, [r4, #2]
 8007b3e:	d109      	bne.n	8007b54 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8007b40:	4296      	cmp	r6, r2
 8007b42:	d107      	bne.n	8007b54 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007b44:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8007b46:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8007b48:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007b4a:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8007b4c:	70a6      	strb	r6, [r4, #2]
}
 8007b4e:	b004      	add	sp, #16
 8007b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007b54:	4f25      	ldr	r7, [pc, #148]	@ (8007bec <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8007b56:	2101      	movs	r1, #1
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff fb16 	bl	800718a <MX25LM51245G_WriteEnable>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	bb78      	cbnz	r0, 8007bc2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8007b62:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
 8007b64:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8007b68:	4638      	mov	r0, r7
 8007b6a:	78a2      	ldrb	r2, [r4, #2]
 8007b6c:	7861      	ldrb	r1, [r4, #1]
 8007b6e:	f7ff fb85 	bl	800727c <MX25LM51245G_WriteCfg2Register>
 8007b72:	4680      	mov	r8, r0
 8007b74:	bb28      	cbnz	r0, 8007bc2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007b76:	2028      	movs	r0, #40	@ 0x28
 8007b78:	f000 fb48 	bl	800820c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8007b7c:	78a3      	ldrb	r3, [r4, #2]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d106      	bne.n	8007b90 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007b82:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8007b84:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007b88:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007b8c:	f001 fdb4 	bl	80096f8 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007b90:	2200      	movs	r2, #0
 8007b92:	4816      	ldr	r0, [pc, #88]	@ (8007bec <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8007b94:	4611      	mov	r1, r2
 8007b96:	f7ff f9d7 	bl	8006f48 <MX25LM51245G_AutoPollingMemReady>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	b988      	cbnz	r0, 8007bc2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8007b9e:	aa03      	add	r2, sp, #12
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	9200      	str	r2, [sp, #0]
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4811      	ldr	r0, [pc, #68]	@ (8007bec <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8007ba8:	f7ff fbc1 	bl	800732e <MX25LM51245G_ReadCfg2Register>
 8007bac:	b948      	cbnz	r0, 8007bc2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8007bae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007bb2:	b933      	cbnz	r3, 8007bc2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8007bb4:	2d01      	cmp	r5, #1
 8007bb6:	d1c5      	bne.n	8007b44 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8007bb8:	78a3      	ldrb	r3, [r4, #2]
 8007bba:	b94b      	cbnz	r3, 8007bd0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8007bbc:	f7ff fe96 	bl	80078ec <OSPI_NOR_EnterDOPIMode.constprop.0>
 8007bc0:	e008      	b.n	8007bd4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007bc2:	f06f 0004 	mvn.w	r0, #4
 8007bc6:	e7c2      	b.n	8007b4e <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8007bc8:	2901      	cmp	r1, #1
 8007bca:	d1bb      	bne.n	8007b44 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8007bcc:	2a00      	cmp	r2, #0
 8007bce:	d1f5      	bne.n	8007bbc <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8007bd0:	f7ff fe44 	bl	800785c <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d1ba      	bne.n	8007b4e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8007bd8:	e7b4      	b.n	8007b44 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8007bda:	f06f 0001 	mvn.w	r0, #1
 8007bde:	e7b6      	b.n	8007b4e <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8007be0:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8007be4:	e7b3      	b.n	8007b4e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8007be6:	bf00      	nop
 8007be8:	2401a6fc 	.word	0x2401a6fc
 8007bec:	2401a704 	.word	0x2401a704

08007bf0 <MX_OSPI_ClockConfig>:
{
 8007bf0:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8007bf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
{
 8007bf6:	b0af      	sub	sp, #188	@ 0xbc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8007bf8:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8007bfa:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8007bfc:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8007c00:	2320      	movs	r3, #32
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8007c02:	2250      	movs	r2, #80	@ 0x50
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8007c04:	9313      	str	r3, [sp, #76]	@ 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8007c06:	2305      	movs	r3, #5
 8007c08:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8007c0c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8007c0e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007c10:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007c14:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8007c16:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8007c1a:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8007c1c:	f003 f848 	bl	800acb0 <HAL_RCCEx_PeriphCLKConfig>
}
 8007c20:	b02f      	add	sp, #188	@ 0xbc
 8007c22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007c28 <BSP_OSPI_NOR_Init>:
{
 8007c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	b09b      	sub	sp, #108	@ 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f040 8160 	bne.w	8007ef6 <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8007c36:	4eb1      	ldr	r6, [pc, #708]	@ (8007efc <BSP_OSPI_NOR_Init+0x2d4>)
 8007c38:	7834      	ldrb	r4, [r6, #0]
 8007c3a:	b11c      	cbz	r4, 8007c44 <BSP_OSPI_NOR_Init+0x1c>
      ret = BSP_ERROR_NONE;
 8007c3c:	2000      	movs	r0, #0
}
 8007c3e:	b01b      	add	sp, #108	@ 0x6c
 8007c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OSPI_NOR_CLK_ENABLE();
 8007c44:	4bae      	ldr	r3, [pc, #696]	@ (8007f00 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007c46:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8007c4a:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8007c4e:	a911      	add	r1, sp, #68	@ 0x44
  OSPI_NOR_CLK_ENABLE();
 8007c50:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8007c54:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8007c56:	48ab      	ldr	r0, [pc, #684]	@ (8007f04 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8007c58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c5c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007c60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007c64:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8007c6c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007c6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c72:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8007c74:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007c76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c7a:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8007c7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007c80:	f042 0220 	orr.w	r2, r2, #32
 8007c84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007c8c:	f002 0220 	and.w	r2, r2, #32
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8007c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007c98:	f042 0202 	orr.w	r2, r2, #2
 8007c9c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007ca4:	f002 0202 	and.w	r2, r2, #2
 8007ca8:	9203      	str	r2, [sp, #12]
 8007caa:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8007cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cb4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007cb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007cbc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007cc0:	9204      	str	r2, [sp, #16]
 8007cc2:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8007cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007cc8:	f042 0208 	orr.w	r2, r2, #8
 8007ccc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007cd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007cd4:	f002 0208 	and.w	r2, r2, #8
 8007cd8:	9205      	str	r2, [sp, #20]
 8007cda:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8007cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007ce0:	f042 0208 	orr.w	r2, r2, #8
 8007ce4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007cec:	f002 0208 	and.w	r2, r2, #8
 8007cf0:	9206      	str	r2, [sp, #24]
 8007cf2:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8007cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007cf8:	f042 0210 	orr.w	r2, r2, #16
 8007cfc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d04:	f002 0210 	and.w	r2, r2, #16
 8007d08:	9207      	str	r2, [sp, #28]
 8007d0a:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8007d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d10:	f042 0208 	orr.w	r2, r2, #8
 8007d14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d1c:	f002 0208 	and.w	r2, r2, #8
 8007d20:	9208      	str	r2, [sp, #32]
 8007d22:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8007d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d28:	f042 0208 	orr.w	r2, r2, #8
 8007d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d34:	f002 0208 	and.w	r2, r2, #8
 8007d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8007d3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d40:	f042 0208 	orr.w	r2, r2, #8
 8007d44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007d48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d4c:	f002 0208 	and.w	r2, r2, #8
 8007d50:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8007d54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007d60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d64:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007d68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007d6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8007d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007d70:	f042 0208 	orr.w	r2, r2, #8
 8007d74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d78:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8007d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007d86:	2340      	movs	r3, #64	@ 0x40
 8007d88:	e9cd 3911 	strd	r3, r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d8c:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8007d8e:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d92:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8007d96:	f000 fc11 	bl	80085bc <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8007d9a:	a911      	add	r1, sp, #68	@ 0x44
 8007d9c:	485a      	ldr	r0, [pc, #360]	@ (8007f08 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8007d9e:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007da0:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8007da2:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8007da6:	f000 fc09 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8007daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007dae:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8007db0:	2409      	movs	r4, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8007db2:	a911      	add	r1, sp, #68	@ 0x44
 8007db4:	4855      	ldr	r0, [pc, #340]	@ (8007f0c <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8007db6:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8007db8:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8007dba:	f000 fbff 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8007dbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8007dc2:	a911      	add	r1, sp, #68	@ 0x44
 8007dc4:	4852      	ldr	r0, [pc, #328]	@ (8007f10 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8007dc6:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8007dc8:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8007dca:	f000 fbf7 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8007dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8007dd2:	a911      	add	r1, sp, #68	@ 0x44
 8007dd4:	484e      	ldr	r0, [pc, #312]	@ (8007f10 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8007dd6:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8007dd8:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8007dda:	f000 fbef 	bl	80085bc <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8007dde:	a911      	add	r1, sp, #68	@ 0x44
 8007de0:	484c      	ldr	r0, [pc, #304]	@ (8007f14 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8007de2:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8007de4:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8007de6:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8007de8:	f000 fbe8 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8007dec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8007df0:	a911      	add	r1, sp, #68	@ 0x44
 8007df2:	4847      	ldr	r0, [pc, #284]	@ (8007f10 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8007df4:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8007df6:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8007df8:	f000 fbe0 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8007dfc:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8007dfe:	a911      	add	r1, sp, #68	@ 0x44
 8007e00:	4843      	ldr	r0, [pc, #268]	@ (8007f10 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8007e02:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8007e04:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8007e08:	f000 fbd8 	bl	80085bc <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8007e0c:	a911      	add	r1, sp, #68	@ 0x44
 8007e0e:	4840      	ldr	r0, [pc, #256]	@ (8007f10 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8007e10:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8007e12:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8007e16:	f000 fbd1 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8007e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8007e1e:	a911      	add	r1, sp, #68	@ 0x44
 8007e20:	4838      	ldr	r0, [pc, #224]	@ (8007f04 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8007e22:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8007e24:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8007e26:	f000 fbc9 	bl	80085bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8007e2a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8007e2c:	a911      	add	r1, sp, #68	@ 0x44
 8007e2e:	4838      	ldr	r0, [pc, #224]	@ (8007f10 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8007e30:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8007e32:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8007e36:	f000 fbc1 	bl	80085bc <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8007e3a:	a811      	add	r0, sp, #68	@ 0x44
 8007e3c:	f7ff f86b 	bl	8006f16 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
      ospi_config.ClockPrescaler = 2U;
 8007e42:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8007e46:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e4a:	b10b      	cbz	r3, 8007e50 <BSP_OSPI_NOR_Init+0x228>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8007e4c:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007e50:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8007e52:	4831      	ldr	r0, [pc, #196]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8007e54:	970d      	str	r7, [sp, #52]	@ 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007e56:	930f      	str	r3, [sp, #60]	@ 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8007e58:	786b      	ldrb	r3, [r5, #1]
 8007e5a:	9310      	str	r3, [sp, #64]	@ 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8007e5c:	f7ff fec8 	bl	8007bf0 <MX_OSPI_ClockConfig>
 8007e60:	b110      	cbz	r0, 8007e68 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007e62:	f06f 0003 	mvn.w	r0, #3
 8007e66:	e6ea      	b.n	8007c3e <BSP_OSPI_NOR_Init+0x16>
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8007e68:	a90d      	add	r1, sp, #52	@ 0x34
 8007e6a:	482b      	ldr	r0, [pc, #172]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007e6c:	f7ff fd92 	bl	8007994 <MX_OSPI_NOR_Init>
 8007e70:	4602      	mov	r2, r0
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d1f5      	bne.n	8007e62 <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007e76:	4601      	mov	r1, r0
 8007e78:	4827      	ldr	r0, [pc, #156]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007e7a:	f7ff fab8 	bl	80073ee <MX25LM51245G_ResetEnable>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	b110      	cbz	r0, 8007e88 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e82:	f06f 0004 	mvn.w	r0, #4
 8007e86:	e6da      	b.n	8007c3e <BSP_OSPI_NOR_Init+0x16>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007e88:	4601      	mov	r1, r0
 8007e8a:	4823      	ldr	r0, [pc, #140]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007e8c:	f7ff fae1 	bl	8007452 <MX25LM51245G_ResetMemory>
 8007e90:	4602      	mov	r2, r0
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d1f5      	bne.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007e96:	2101      	movs	r1, #1
 8007e98:	481f      	ldr	r0, [pc, #124]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007e9a:	f7ff faa8 	bl	80073ee <MX25LM51245G_ResetEnable>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d1ee      	bne.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	481c      	ldr	r0, [pc, #112]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007ea8:	f7ff fad3 	bl	8007452 <MX25LM51245G_ResetMemory>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d1e8      	bne.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	4819      	ldr	r0, [pc, #100]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	f7ff fa9a 	bl	80073ee <MX25LM51245G_ResetEnable>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d1e1      	bne.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4815      	ldr	r0, [pc, #84]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	f7ff fac5 	bl	8007452 <MX25LM51245G_ResetMemory>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1da      	bne.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8007ecc:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8007ece:	70b0      	strb	r0, [r6, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8007ed0:	2064      	movs	r0, #100	@ 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8007ed2:	8033      	strh	r3, [r6, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8007ed4:	f000 f99a 	bl	800820c <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007ed8:	78b2      	ldrb	r2, [r6, #2]
 8007eda:	7871      	ldrb	r1, [r6, #1]
 8007edc:	480e      	ldr	r0, [pc, #56]	@ (8007f18 <BSP_OSPI_NOR_Init+0x2f0>)
 8007ede:	f7ff f833 	bl	8006f48 <MX25LM51245G_AutoPollingMemReady>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1cd      	bne.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8007ee6:	786a      	ldrb	r2, [r5, #1]
 8007ee8:	7829      	ldrb	r1, [r5, #0]
 8007eea:	f7ff fe19 	bl	8007b20 <BSP_OSPI_NOR_ConfigFlash>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f43f aea4 	beq.w	8007c3c <BSP_OSPI_NOR_Init+0x14>
 8007ef4:	e7c5      	b.n	8007e82 <BSP_OSPI_NOR_Init+0x25a>
    ret = BSP_ERROR_WRONG_PARAM;
 8007ef6:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007efa:	e6a0      	b.n	8007c3e <BSP_OSPI_NOR_Init+0x16>
 8007efc:	2401a6fc 	.word	0x2401a6fc
 8007f00:	58024400 	.word	0x58024400
 8007f04:	58021800 	.word	0x58021800
 8007f08:	58020400 	.word	0x58020400
 8007f0c:	58021400 	.word	0x58021400
 8007f10:	58020c00 	.word	0x58020c00
 8007f14:	58021000 	.word	0x58021000
 8007f18:	2401a704 	.word	0x2401a704

08007f1c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	460c      	mov	r4, r1
 8007f22:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d163      	bne.n	8007ff0 <BSP_TS_Init+0xd4>
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	1e5a      	subs	r2, r3, #1
 8007f2c:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8007f30:	d25e      	bcs.n	8007ff0 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007f32:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007f34:	1e51      	subs	r1, r2, #1
 8007f36:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8007f3a:	d259      	bcs.n	8007ff0 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	bf28      	it	cs
 8007f40:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007f42:	68e2      	ldr	r2, [r4, #12]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d853      	bhi.n	8007ff0 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8007f48:	2370      	movs	r3, #112	@ 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8007f4a:	4d2b      	ldr	r5, [pc, #172]	@ (8007ff8 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8007f4c:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8007f4e:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8007f50:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8007f54:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8007f56:	4b29      	ldr	r3, [pc, #164]	@ (8007ffc <BSP_TS_Init+0xe0>)
 8007f58:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007f5a:	4b29      	ldr	r3, [pc, #164]	@ (8008000 <BSP_TS_Init+0xe4>)
 8007f5c:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007f5e:	4b29      	ldr	r3, [pc, #164]	@ (8008004 <BSP_TS_Init+0xe8>)
 8007f60:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007f62:	4b29      	ldr	r3, [pc, #164]	@ (8008008 <BSP_TS_Init+0xec>)
 8007f64:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8007f66:	4b29      	ldr	r3, [pc, #164]	@ (800800c <BSP_TS_Init+0xf0>)
 8007f68:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8007f6a:	f7fe ff3f 	bl	8006dec <FT5336_RegisterBusIO>
 8007f6e:	b128      	cbz	r0, 8007f7c <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 8007f70:	f04f 35ff 	mov.w	r5, #4294967295
}
 8007f74:	4628      	mov	r0, r5
 8007f76:	b008      	add	sp, #32
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8007f7c:	a901      	add	r1, sp, #4
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f7fe fe9b 	bl	8006cba <FT5336_ReadID>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1f3      	bne.n	8007f70 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8007f88:	9b01      	ldr	r3, [sp, #4]
 8007f8a:	2b51      	cmp	r3, #81	@ 0x51
 8007f8c:	d1f0      	bne.n	8007f70 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8007f8e:	4b20      	ldr	r3, [pc, #128]	@ (8008010 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8007f90:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 8007f92:	4f20      	ldr	r7, [pc, #128]	@ (8008014 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8007f94:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800801c <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 8007f98:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8007f9a:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4798      	blx	r3
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d1e3      	bne.n	8007f70 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007fa8:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007faa:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007fac:	4e1a      	ldr	r6, [pc, #104]	@ (8008018 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007fae:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007fb0:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8007fb2:	6863      	ldr	r3, [r4, #4]
 8007fb4:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	4798      	blx	r3
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	db0f      	blt.n	8007fea <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007fca:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007fcc:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007fce:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007fd0:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007fd2:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007fd4:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007fda:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007fdc:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007fde:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007fe0:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007fe2:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007fe4:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8007fe8:	e7c4      	b.n	8007f74 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fea:	f06f 0504 	mvn.w	r5, #4
 8007fee:	e7c1      	b.n	8007f74 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8007ff0:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8007ff4:	e7be      	b.n	8007f74 <BSP_TS_Init+0x58>
 8007ff6:	bf00      	nop
 8007ff8:	2401a760 	.word	0x2401a760
 8007ffc:	08007551 	.word	0x08007551
 8008000:	080074b9 	.word	0x080074b9
 8008004:	08007825 	.word	0x08007825
 8008008:	080077f1 	.word	0x080077f1
 800800c:	08007859 	.word	0x08007859
 8008010:	2400003c 	.word	0x2400003c
 8008014:	2401a7b0 	.word	0x2401a7b0
 8008018:	2401a788 	.word	0x2401a788
 800801c:	2401a7b4 	.word	0x2401a7b4

08008020 <BSP_TS_GetState>:
{
 8008020:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008024:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8008026:	2800      	cmp	r0, #0
 8008028:	d150      	bne.n	80080cc <BSP_TS_GetState+0xac>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800802a:	4b2a      	ldr	r3, [pc, #168]	@ (80080d4 <BSP_TS_GetState+0xb4>)
 800802c:	a901      	add	r1, sp, #4
 800802e:	4a2a      	ldr	r2, [pc, #168]	@ (80080d8 <BSP_TS_GetState+0xb8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6810      	ldr	r0, [r2, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	4798      	blx	r3
 8008038:	2800      	cmp	r0, #0
 800803a:	db44      	blt.n	80080c6 <BSP_TS_GetState+0xa6>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800803c:	4927      	ldr	r1, [pc, #156]	@ (80080dc <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800803e:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008040:	698d      	ldr	r5, [r1, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008042:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8008044:	2e00      	cmp	r6, #0
 8008046:	d03a      	beq.n	80080be <BSP_TS_GetState+0x9e>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008048:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800804c:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008050:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 8008054:	e9dd c702 	ldrd	ip, r7, [sp, #8]
        x_oriented = state.TouchY;
 8008058:	bf19      	ittee	ne
 800805a:	463b      	movne	r3, r7
        y_oriented = state.TouchX;
 800805c:	4662      	movne	r2, ip
      y_oriented = state.TouchY;
 800805e:	463a      	moveq	r2, r7
      x_oriented = state.TouchX;
 8008060:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8008062:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8008066:	bf1c      	itt	ne
 8008068:	f108 33ff 	addne.w	r3, r8, #4294967295
 800806c:	eba3 030c 	subne.w	r3, r3, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8008070:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8008074:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8008078:	bf18      	it	ne
 800807a:	ebac 0207 	subne.w	r2, ip, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800807e:	680f      	ldr	r7, [r1, #0]
 8008080:	437b      	muls	r3, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008082:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8008084:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008086:	437a      	muls	r2, r7
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008088:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800808a:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800808e:	fbb2 f2fc 	udiv	r2, r2, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008092:	42ab      	cmp	r3, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008094:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008096:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008098:	bf8c      	ite	hi
 800809a:	eba3 0c05 	subhi.w	ip, r3, r5
 800809e:	eba5 0c03 	subls.w	ip, r5, r3
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80080a2:	4282      	cmp	r2, r0
 80080a4:	bf8c      	ite	hi
 80080a6:	1a16      	subhi	r6, r2, r0
 80080a8:	1a86      	subls	r6, r0, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80080aa:	4567      	cmp	r7, ip
 80080ac:	d301      	bcc.n	80080b2 <BSP_TS_GetState+0x92>
 80080ae:	42b7      	cmp	r7, r6
 80080b0:	d206      	bcs.n	80080c0 <BSP_TS_GetState+0xa0>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80080b2:	618b      	str	r3, [r1, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80080b4:	620a      	str	r2, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80080b6:	2000      	movs	r0, #0
}
 80080b8:	b004      	add	sp, #16
 80080ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TS_State->TouchDetected = 0U;
 80080be:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80080c0:	e9c4 5001 	strd	r5, r0, [r4, #4]
 80080c4:	e7f7      	b.n	80080b6 <BSP_TS_GetState+0x96>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080c6:	f06f 0004 	mvn.w	r0, #4
 80080ca:	e7f5      	b.n	80080b8 <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 80080cc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80080d0:	e7f2      	b.n	80080b8 <BSP_TS_GetState+0x98>
 80080d2:	bf00      	nop
 80080d4:	2401a7b4 	.word	0x2401a7b4
 80080d8:	2401a7b0 	.word	0x2401a7b0
 80080dc:	2401a788 	.word	0x2401a788

080080e0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80080e0:	4a22      	ldr	r2, [pc, #136]	@ (800816c <SystemInit+0x8c>)
 80080e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80080e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80080ee:	4a20      	ldr	r2, [pc, #128]	@ (8008170 <SystemInit+0x90>)
 80080f0:	6813      	ldr	r3, [r2, #0]
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	2b06      	cmp	r3, #6
 80080f8:	d805      	bhi.n	8008106 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	f023 030f 	bic.w	r3, r3, #15
 8008100:	f043 0307 	orr.w	r3, r3, #7
 8008104:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008106:	4b1b      	ldr	r3, [pc, #108]	@ (8008174 <SystemInit+0x94>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008110:	2200      	movs	r2, #0
 8008112:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008114:	4a18      	ldr	r2, [pc, #96]	@ (8008178 <SystemInit+0x98>)
 8008116:	6819      	ldr	r1, [r3, #0]
 8008118:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800811a:	4915      	ldr	r1, [pc, #84]	@ (8008170 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 800811c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800811e:	680a      	ldr	r2, [r1, #0]
 8008120:	0712      	lsls	r2, r2, #28
 8008122:	d505      	bpl.n	8008130 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008124:	680a      	ldr	r2, [r1, #0]
 8008126:	f022 020f 	bic.w	r2, r2, #15
 800812a:	f042 0207 	orr.w	r2, r2, #7
 800812e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008130:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008132:	4912      	ldr	r1, [pc, #72]	@ (800817c <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8008134:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008136:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008138:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800813a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800813c:	4910      	ldr	r1, [pc, #64]	@ (8008180 <SystemInit+0xa0>)
 800813e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008140:	4910      	ldr	r1, [pc, #64]	@ (8008184 <SystemInit+0xa4>)
 8008142:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008144:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008146:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008148:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800814a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800814c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8008154:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008156:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008158:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800815c:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <SystemInit+0xa8>)
 800815e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008160:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008164:	4b01      	ldr	r3, [pc, #4]	@ (800816c <SystemInit+0x8c>)
 8008166:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	e000ed00 	.word	0xe000ed00
 8008170:	52002000 	.word	0x52002000
 8008174:	58024400 	.word	0x58024400
 8008178:	eaf6ed7f 	.word	0xeaf6ed7f
 800817c:	02020200 	.word	0x02020200
 8008180:	01ff0000 	.word	0x01ff0000
 8008184:	01010280 	.word	0x01010280
 8008188:	52004000 	.word	0x52004000

0800818c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800818c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800818e:	2003      	movs	r0, #3
 8008190:	f000 f84e 	bl	8008230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008194:	f002 fa64 	bl	800a660 <HAL_RCC_GetSysClockFreq>
 8008198:	490f      	ldr	r1, [pc, #60]	@ (80081d8 <HAL_Init+0x4c>)
 800819a:	4a10      	ldr	r2, [pc, #64]	@ (80081dc <HAL_Init+0x50>)
 800819c:	698b      	ldr	r3, [r1, #24]
 800819e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80081a2:	5cd3      	ldrb	r3, [r2, r3]
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081aa:	698b      	ldr	r3, [r1, #24]
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	5cd3      	ldrb	r3, [r2, r3]
 80081b2:	4a0b      	ldr	r2, [pc, #44]	@ (80081e0 <HAL_Init+0x54>)
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	fa20 f303 	lsr.w	r3, r0, r3
 80081bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081be:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <HAL_Init+0x58>)
 80081c0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80081c2:	2000      	movs	r0, #0
 80081c4:	f7f9 fd66 	bl	8001c94 <HAL_InitTick>
 80081c8:	4604      	mov	r4, r0
 80081ca:	b918      	cbnz	r0, 80081d4 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80081cc:	f7f9 f99c 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80081d0:	4620      	mov	r0, r4
 80081d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80081d4:	2401      	movs	r4, #1
 80081d6:	e7fb      	b.n	80081d0 <HAL_Init+0x44>
 80081d8:	58024400 	.word	0x58024400
 80081dc:	080252e4 	.word	0x080252e4
 80081e0:	2400006c 	.word	0x2400006c
 80081e4:	24000070 	.word	0x24000070

080081e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80081e8:	4a03      	ldr	r2, [pc, #12]	@ (80081f8 <HAL_IncTick+0x10>)
 80081ea:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <HAL_IncTick+0x14>)
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	440b      	add	r3, r1
 80081f2:	6013      	str	r3, [r2, #0]
}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	2401a7b8 	.word	0x2401a7b8
 80081fc:	24000074 	.word	0x24000074

08008200 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008200:	4b01      	ldr	r3, [pc, #4]	@ (8008208 <HAL_GetTick+0x8>)
 8008202:	6818      	ldr	r0, [r3, #0]
}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	2401a7b8 	.word	0x2401a7b8

0800820c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008210:	f7ff fff6 	bl	8008200 <HAL_GetTick>
 8008214:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008216:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008218:	bf1e      	ittt	ne
 800821a:	4b04      	ldrne	r3, [pc, #16]	@ (800822c <HAL_Delay+0x20>)
 800821c:	781b      	ldrbne	r3, [r3, #0]
 800821e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008220:	f7ff ffee 	bl	8008200 <HAL_GetTick>
 8008224:	1b43      	subs	r3, r0, r5
 8008226:	42a3      	cmp	r3, r4
 8008228:	d3fa      	bcc.n	8008220 <HAL_Delay+0x14>
  {
  }
}
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	24000074 	.word	0x24000074

08008230 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008230:	4907      	ldr	r1, [pc, #28]	@ (8008250 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008232:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008234:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008236:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800823a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800823e:	0412      	lsls	r2, r2, #16
 8008240:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800824c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800824e:	4770      	bx	lr
 8008250:	e000ed00 	.word	0xe000ed00

08008254 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008254:	4b16      	ldr	r3, [pc, #88]	@ (80082b0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008256:	b530      	push	{r4, r5, lr}
 8008258:	68dc      	ldr	r4, [r3, #12]
 800825a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800825e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008264:	2b04      	cmp	r3, #4
 8008266:	bf28      	it	cs
 8008268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800826a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800826c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008270:	bf8c      	ite	hi
 8008272:	3c03      	subhi	r4, #3
 8008274:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008276:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800827a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800827c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008280:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008284:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008288:	fa03 f304 	lsl.w	r3, r3, r4
 800828c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008290:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008294:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8008296:	db06      	blt.n	80082a6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008298:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800829c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80082a0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80082a4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a6:	f000 000f 	and.w	r0, r0, #15
 80082aa:	4a02      	ldr	r2, [pc, #8]	@ (80082b4 <HAL_NVIC_SetPriority+0x60>)
 80082ac:	5413      	strb	r3, [r2, r0]
 80082ae:	e7f9      	b.n	80082a4 <HAL_NVIC_SetPriority+0x50>
 80082b0:	e000ed00 	.word	0xe000ed00
 80082b4:	e000ed14 	.word	0xe000ed14

080082b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80082b8:	2800      	cmp	r0, #0
 80082ba:	db07      	blt.n	80082cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082bc:	2301      	movs	r3, #1
 80082be:	0941      	lsrs	r1, r0, #5
 80082c0:	f000 001f 	and.w	r0, r0, #31
 80082c4:	4a02      	ldr	r2, [pc, #8]	@ (80082d0 <HAL_NVIC_EnableIRQ+0x18>)
 80082c6:	4083      	lsls	r3, r0
 80082c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	e000e100 	.word	0xe000e100

080082d4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80082d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80082d8:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <HAL_MPU_Disable+0x18>)
 80082da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082dc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80082e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	e000ed00 	.word	0xe000ed00

080082f0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80082f0:	4b06      	ldr	r3, [pc, #24]	@ (800830c <HAL_MPU_Enable+0x1c>)
 80082f2:	f040 0001 	orr.w	r0, r0, #1
 80082f6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80082fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008300:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008306:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800830a:	4770      	bx	lr
 800830c:	e000ed00 	.word	0xe000ed00

08008310 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008310:	7843      	ldrb	r3, [r0, #1]
 8008312:	4a14      	ldr	r2, [pc, #80]	@ (8008364 <HAL_MPU_ConfigRegion+0x54>)
{
 8008314:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8008316:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 800831a:	7801      	ldrb	r1, [r0, #0]
 800831c:	b1e9      	cbz	r1, 800835a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800831e:	6843      	ldr	r3, [r0, #4]
 8008320:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008324:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008326:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008328:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800832a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800832e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008330:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008332:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008336:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008338:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800833c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800833e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008342:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008348:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800834a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800834e:	7a01      	ldrb	r1, [r0, #8]
 8008350:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008354:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8008358:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800835a:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 800835e:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 8008362:	e7f9      	b.n	8008358 <HAL_MPU_ConfigRegion+0x48>
 8008364:	e000ed00 	.word	0xe000ed00

08008368 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008368:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800836a:	4604      	mov	r4, r0
 800836c:	b908      	cbnz	r0, 8008372 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800836e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008370:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008372:	7f43      	ldrb	r3, [r0, #29]
 8008374:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008378:	b913      	cbnz	r3, 8008380 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800837a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800837c:	f7f9 f8dc 	bl	8001538 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008380:	2302      	movs	r3, #2
 8008382:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008384:	7923      	ldrb	r3, [r4, #4]
 8008386:	b9e3      	cbnz	r3, 80083c2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	4a13      	ldr	r2, [pc, #76]	@ (80083d8 <HAL_CRC_Init+0x70>)
 800838c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	f022 0218 	bic.w	r2, r2, #24
 8008394:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008396:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008398:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800839a:	b9d2      	cbnz	r2, 80083d2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80083a0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80083a2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	6961      	ldr	r1, [r4, #20]
 80083a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80083ac:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80083ae:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80083b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083b8:	430a      	orrs	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80083bc:	2301      	movs	r3, #1
 80083be:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80083c0:	e7d6      	b.n	8008370 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80083c2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f808 	bl	80083dc <HAL_CRCEx_Polynomial_Set>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d0e2      	beq.n	8008396 <HAL_CRC_Init+0x2e>
 80083d0:	e7cd      	b.n	800836e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80083d2:	6922      	ldr	r2, [r4, #16]
 80083d4:	e7e4      	b.n	80083a0 <HAL_CRC_Init+0x38>
 80083d6:	bf00      	nop
 80083d8:	04c11db7 	.word	0x04c11db7

080083dc <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80083dc:	07cb      	lsls	r3, r1, #31
{
 80083de:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80083e0:	d50d      	bpl.n	80083fe <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80083e2:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80083e4:	3b01      	subs	r3, #1
 80083e6:	d31d      	bcc.n	8008424 <HAL_CRCEx_Polynomial_Set+0x48>
 80083e8:	fa21 f403 	lsr.w	r4, r1, r3
 80083ec:	07e4      	lsls	r4, r4, #31
 80083ee:	d5f9      	bpl.n	80083e4 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80083f0:	2a10      	cmp	r2, #16
 80083f2:	d013      	beq.n	800841c <HAL_CRCEx_Polynomial_Set+0x40>
 80083f4:	2a10      	cmp	r2, #16
 80083f6:	d804      	bhi.n	8008402 <HAL_CRCEx_Polynomial_Set+0x26>
 80083f8:	b13a      	cbz	r2, 800840a <HAL_CRCEx_Polynomial_Set+0x2e>
 80083fa:	2a08      	cmp	r2, #8
 80083fc:	d010      	beq.n	8008420 <HAL_CRCEx_Polynomial_Set+0x44>
 80083fe:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8008400:	e00b      	b.n	800841a <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8008402:	2a18      	cmp	r2, #24
 8008404:	d1fb      	bne.n	80083fe <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8008406:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8008408:	d8f9      	bhi.n	80083fe <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800840e:	6883      	ldr	r3, [r0, #8]
 8008410:	f023 0318 	bic.w	r3, r3, #24
 8008414:	4313      	orrs	r3, r2
 8008416:	6083      	str	r3, [r0, #8]
 8008418:	2000      	movs	r0, #0
}
 800841a:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800841c:	2b07      	cmp	r3, #7
 800841e:	e7f3      	b.n	8008408 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8008420:	2b0f      	cmp	r3, #15
 8008422:	e7f1      	b.n	8008408 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8008424:	2a10      	cmp	r2, #16
 8008426:	d1e5      	bne.n	80083f4 <HAL_CRCEx_Polynomial_Set+0x18>
 8008428:	e7e9      	b.n	80083fe <HAL_CRCEx_Polynomial_Set+0x22>

0800842a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800842a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800842c:	4604      	mov	r4, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	d036      	beq.n	80084a0 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008432:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8008436:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800843a:	b91b      	cbnz	r3, 8008444 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800843c:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008440:	f7f9 f892 	bl	8001568 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008444:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008446:	69e0      	ldr	r0, [r4, #28]
 8008448:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800844a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008452:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008454:	6819      	ldr	r1, [r3, #0]
 8008456:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800845a:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800845e:	430a      	orrs	r2, r1
 8008460:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008462:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008464:	68a2      	ldr	r2, [r4, #8]
 8008466:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800846a:	4302      	orrs	r2, r0
 800846c:	f021 0101 	bic.w	r1, r1, #1
 8008470:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008472:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008474:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008478:	0c12      	lsrs	r2, r2, #16
 800847a:	0412      	lsls	r2, r2, #16
 800847c:	430a      	orrs	r2, r1
 800847e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008482:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8008486:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800848a:	0552      	lsls	r2, r2, #21
 800848c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008490:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008492:	430a      	orrs	r2, r1
 8008494:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008496:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008498:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800849a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800849e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80084a0:	2001      	movs	r0, #1
 80084a2:	e7fc      	b.n	800849e <HAL_DMA2D_Init+0x74>

080084a4 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80084a4:	4770      	bx	lr

080084a6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80084a6:	4770      	bx	lr

080084a8 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80084a8:	6803      	ldr	r3, [r0, #0]
{
 80084aa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80084ac:	685e      	ldr	r6, [r3, #4]
{
 80084ae:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80084b0:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80084b2:	07f2      	lsls	r2, r6, #31
 80084b4:	d514      	bpl.n	80084e0 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80084b6:	05e9      	lsls	r1, r5, #23
 80084b8:	d512      	bpl.n	80084e0 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084c0:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80084c2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80084c4:	f042 0201 	orr.w	r2, r2, #1
 80084c8:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80084ca:	2201      	movs	r2, #1
 80084cc:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80084ce:	2304      	movs	r3, #4
 80084d0:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80084d4:	2300      	movs	r3, #0
 80084d6:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80084da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80084dc:	b103      	cbz	r3, 80084e0 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80084de:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80084e0:	06b2      	lsls	r2, r6, #26
 80084e2:	d516      	bpl.n	8008512 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80084e4:	04ab      	lsls	r3, r5, #18
 80084e6:	d514      	bpl.n	8008512 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80084f2:	2220      	movs	r2, #32
 80084f4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80084f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084f8:	f043 0302 	orr.w	r3, r3, #2
 80084fc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80084fe:	2304      	movs	r3, #4
 8008500:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008504:	2300      	movs	r3, #0
 8008506:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800850a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800850c:	b10b      	cbz	r3, 8008512 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800850e:	4620      	mov	r0, r4
 8008510:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008512:	0730      	lsls	r0, r6, #28
 8008514:	d516      	bpl.n	8008544 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008516:	0529      	lsls	r1, r5, #20
 8008518:	d514      	bpl.n	8008544 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008522:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008524:	2208      	movs	r2, #8
 8008526:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008528:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800852a:	f043 0304 	orr.w	r3, r3, #4
 800852e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008530:	2304      	movs	r3, #4
 8008532:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008536:	2300      	movs	r3, #0
 8008538:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800853c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800853e:	b10b      	cbz	r3, 8008544 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8008540:	4620      	mov	r0, r4
 8008542:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008544:	0772      	lsls	r2, r6, #29
 8008546:	d50b      	bpl.n	8008560 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008548:	056b      	lsls	r3, r5, #21
 800854a:	d509      	bpl.n	8008560 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800854c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800854e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008556:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008558:	2204      	movs	r2, #4
 800855a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800855c:	f7ff ffa2 	bl	80084a4 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008560:	07b0      	lsls	r0, r6, #30
 8008562:	d514      	bpl.n	800858e <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008564:	05a9      	lsls	r1, r5, #22
 8008566:	d512      	bpl.n	800858e <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008570:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008572:	2202      	movs	r2, #2
 8008574:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008578:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800857a:	2301      	movs	r3, #1
 800857c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008580:	2300      	movs	r3, #0
 8008582:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8008586:	6a23      	ldr	r3, [r4, #32]
 8008588:	b10b      	cbz	r3, 800858e <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800858a:	4620      	mov	r0, r4
 800858c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800858e:	06f2      	lsls	r2, r6, #27
 8008590:	d513      	bpl.n	80085ba <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008592:	04eb      	lsls	r3, r5, #19
 8008594:	d511      	bpl.n	80085ba <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008596:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008598:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80085a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80085a2:	2210      	movs	r2, #16
 80085a4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80085a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085a8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80085b0:	2300      	movs	r3, #0
 80085b2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80085b6:	f7ff ff76 	bl	80084a6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80085ba:	bd70      	pop	{r4, r5, r6, pc}

080085bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80085c0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c2:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 800877c <HAL_GPIO_Init+0x1c0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085c6:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085ca:	680a      	ldr	r2, [r1, #0]
 80085cc:	fa32 f503 	lsrs.w	r5, r2, r3
 80085d0:	d102      	bne.n	80085d8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80085d2:	b003      	add	sp, #12
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085d8:	2501      	movs	r5, #1
 80085da:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80085de:	ea18 0202 	ands.w	r2, r8, r2
 80085e2:	f000 80b7 	beq.w	8008754 <HAL_GPIO_Init+0x198>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085e6:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085e8:	2703      	movs	r7, #3
 80085ea:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085ee:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085f2:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085f6:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085f8:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085fc:	2f01      	cmp	r7, #1
 80085fe:	d834      	bhi.n	800866a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8008600:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008602:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008606:	68cf      	ldr	r7, [r1, #12]
 8008608:	fa07 f70e 	lsl.w	r7, r7, lr
 800860c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8008610:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008612:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008614:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008618:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800861c:	409f      	lsls	r7, r3
 800861e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8008622:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008624:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008626:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008628:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800862c:	688f      	ldr	r7, [r1, #8]
 800862e:	fa07 f70e 	lsl.w	r7, r7, lr
 8008632:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8008636:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008638:	d119      	bne.n	800866e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800863a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800863e:	f003 0a07 	and.w	sl, r3, #7
 8008642:	f04f 0b0f 	mov.w	fp, #15
 8008646:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800864a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800864e:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008652:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008656:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800865a:	690f      	ldr	r7, [r1, #16]
 800865c:	fa07 f70a 	lsl.w	r7, r7, sl
 8008660:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8008664:	f8c8 7020 	str.w	r7, [r8, #32]
 8008668:	e001      	b.n	800866e <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800866a:	2d03      	cmp	r5, #3
 800866c:	d1da      	bne.n	8008624 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800866e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008670:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008674:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008678:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800867c:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8008680:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008682:	d067      	beq.n	8008754 <HAL_GPIO_Init+0x198>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008684:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8008688:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800868c:	f003 0c03 	and.w	ip, r3, #3
 8008690:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008694:	f045 0502 	orr.w	r5, r5, #2
 8008698:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800869c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086a0:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 80086a4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80086a8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80086ac:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086b0:	f005 0502 	and.w	r5, r5, #2
 80086b4:	9501      	str	r5, [sp, #4]
 80086b6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80086b8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80086ba:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80086be:	4d2e      	ldr	r5, [pc, #184]	@ (8008778 <HAL_GPIO_Init+0x1bc>)
 80086c0:	42a8      	cmp	r0, r5
 80086c2:	d049      	beq.n	8008758 <HAL_GPIO_Init+0x19c>
 80086c4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086c8:	42a8      	cmp	r0, r5
 80086ca:	d047      	beq.n	800875c <HAL_GPIO_Init+0x1a0>
 80086cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086d0:	42a8      	cmp	r0, r5
 80086d2:	d045      	beq.n	8008760 <HAL_GPIO_Init+0x1a4>
 80086d4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086d8:	42a8      	cmp	r0, r5
 80086da:	d043      	beq.n	8008764 <HAL_GPIO_Init+0x1a8>
 80086dc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086e0:	42a8      	cmp	r0, r5
 80086e2:	d041      	beq.n	8008768 <HAL_GPIO_Init+0x1ac>
 80086e4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086e8:	42a8      	cmp	r0, r5
 80086ea:	d03f      	beq.n	800876c <HAL_GPIO_Init+0x1b0>
 80086ec:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086f0:	42a8      	cmp	r0, r5
 80086f2:	d03d      	beq.n	8008770 <HAL_GPIO_Init+0x1b4>
 80086f4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086f8:	42a8      	cmp	r0, r5
 80086fa:	d03b      	beq.n	8008774 <HAL_GPIO_Init+0x1b8>
 80086fc:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008700:	42a8      	cmp	r0, r5
 8008702:	bf14      	ite	ne
 8008704:	250a      	movne	r5, #10
 8008706:	2509      	moveq	r5, #9
 8008708:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800870c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008710:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008714:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8008716:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800871a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800871c:	bf0c      	ite	eq
 800871e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008720:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008722:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8008726:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8008728:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800872a:	bf0c      	ite	eq
 800872c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800872e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008730:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8008734:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8008736:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800873a:	bf0c      	ite	eq
 800873c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800873e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008740:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8008742:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8008746:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800874a:	bf54      	ite	pl
 800874c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800874e:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008750:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8008754:	3301      	adds	r3, #1
 8008756:	e738      	b.n	80085ca <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008758:	2500      	movs	r5, #0
 800875a:	e7d5      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 800875c:	2501      	movs	r5, #1
 800875e:	e7d3      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 8008760:	2502      	movs	r5, #2
 8008762:	e7d1      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 8008764:	2503      	movs	r5, #3
 8008766:	e7cf      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 8008768:	2504      	movs	r5, #4
 800876a:	e7cd      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 800876c:	2505      	movs	r5, #5
 800876e:	e7cb      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 8008770:	2506      	movs	r5, #6
 8008772:	e7c9      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 8008774:	2507      	movs	r5, #7
 8008776:	e7c7      	b.n	8008708 <HAL_GPIO_Init+0x14c>
 8008778:	58020000 	.word	0x58020000
 800877c:	58024400 	.word	0x58024400

08008780 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008784:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008786:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800878a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800878e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008792:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8008796:	fa31 f302 	lsrs.w	r3, r1, r2
 800879a:	d101      	bne.n	80087a0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80087a0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 80087a4:	ea1c 0601 	ands.w	r6, ip, r1
 80087a8:	d06c      	beq.n	8008884 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80087aa:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80087ae:	f002 0703 	and.w	r7, r2, #3
 80087b2:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 80087b6:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80087b8:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80087bc:	fa08 f907 	lsl.w	r9, r8, r7
 80087c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80087c4:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80087c8:	4b37      	ldr	r3, [pc, #220]	@ (80088a8 <HAL_GPIO_DeInit+0x128>)
 80087ca:	4298      	cmp	r0, r3
 80087cc:	d05c      	beq.n	8008888 <HAL_GPIO_DeInit+0x108>
 80087ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087d2:	4298      	cmp	r0, r3
 80087d4:	d05a      	beq.n	800888c <HAL_GPIO_DeInit+0x10c>
 80087d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087da:	4298      	cmp	r0, r3
 80087dc:	d058      	beq.n	8008890 <HAL_GPIO_DeInit+0x110>
 80087de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087e2:	4298      	cmp	r0, r3
 80087e4:	d056      	beq.n	8008894 <HAL_GPIO_DeInit+0x114>
 80087e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ea:	4298      	cmp	r0, r3
 80087ec:	d054      	beq.n	8008898 <HAL_GPIO_DeInit+0x118>
 80087ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087f2:	4298      	cmp	r0, r3
 80087f4:	d052      	beq.n	800889c <HAL_GPIO_DeInit+0x11c>
 80087f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087fa:	4298      	cmp	r0, r3
 80087fc:	d050      	beq.n	80088a0 <HAL_GPIO_DeInit+0x120>
 80087fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008802:	4298      	cmp	r0, r3
 8008804:	d04e      	beq.n	80088a4 <HAL_GPIO_DeInit+0x124>
 8008806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880a:	4298      	cmp	r0, r3
 800880c:	bf0c      	ite	eq
 800880e:	2309      	moveq	r3, #9
 8008810:	230a      	movne	r3, #10
 8008812:	40bb      	lsls	r3, r7
 8008814:	4573      	cmp	r3, lr
 8008816:	d117      	bne.n	8008848 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008818:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800881c:	ea23 0306 	bic.w	r3, r3, r6
 8008820:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008824:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8008828:	ea23 0306 	bic.w	r3, r3, r6
 800882c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	ea23 0306 	bic.w	r3, r3, r6
 8008836:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	ea23 0306 	bic.w	r3, r3, r6
 800883e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008840:	68ab      	ldr	r3, [r5, #8]
 8008842:	ea23 0309 	bic.w	r3, r3, r9
 8008846:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008848:	0053      	lsls	r3, r2, #1
 800884a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800884c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800884e:	fa0b f303 	lsl.w	r3, fp, r3
 8008852:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008856:	431d      	orrs	r5, r3
 8008858:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800885a:	f002 0507 	and.w	r5, r2, #7
 800885e:	6a37      	ldr	r7, [r6, #32]
 8008860:	00ad      	lsls	r5, r5, #2
 8008862:	fa08 f505 	lsl.w	r5, r8, r5
 8008866:	ea27 0705 	bic.w	r7, r7, r5
 800886a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800886c:	68c5      	ldr	r5, [r0, #12]
 800886e:	ea25 0503 	bic.w	r5, r5, r3
 8008872:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008874:	6845      	ldr	r5, [r0, #4]
 8008876:	ea25 050c 	bic.w	r5, r5, ip
 800887a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800887c:	6885      	ldr	r5, [r0, #8]
 800887e:	ea25 0303 	bic.w	r3, r5, r3
 8008882:	6083      	str	r3, [r0, #8]
    position++;
 8008884:	3201      	adds	r2, #1
 8008886:	e786      	b.n	8008796 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008888:	2300      	movs	r3, #0
 800888a:	e7c2      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 800888c:	2301      	movs	r3, #1
 800888e:	e7c0      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 8008890:	2302      	movs	r3, #2
 8008892:	e7be      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 8008894:	2303      	movs	r3, #3
 8008896:	e7bc      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 8008898:	2304      	movs	r3, #4
 800889a:	e7ba      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 800889c:	2305      	movs	r3, #5
 800889e:	e7b8      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 80088a0:	2306      	movs	r3, #6
 80088a2:	e7b6      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 80088a4:	2307      	movs	r3, #7
 80088a6:	e7b4      	b.n	8008812 <HAL_GPIO_DeInit+0x92>
 80088a8:	58020000 	.word	0x58020000

080088ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80088ac:	6903      	ldr	r3, [r0, #16]
 80088ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80088b0:	bf14      	ite	ne
 80088b2:	2001      	movne	r0, #1
 80088b4:	2000      	moveq	r0, #0
 80088b6:	4770      	bx	lr

080088b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088b8:	b10a      	cbz	r2, 80088be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80088ba:	6181      	str	r1, [r0, #24]
  }
}
 80088bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80088be:	0409      	lsls	r1, r1, #16
 80088c0:	e7fb      	b.n	80088ba <HAL_GPIO_WritePin+0x2>

080088c2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80088c2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80088c4:	ea01 0203 	and.w	r2, r1, r3
 80088c8:	ea21 0103 	bic.w	r1, r1, r3
 80088cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088d0:	6181      	str	r1, [r0, #24]
}
 80088d2:	4770      	bx	lr

080088d4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80088d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088d8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 80088dc:	4201      	tst	r1, r0
{
 80088de:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80088e0:	d003      	beq.n	80088ea <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088e2:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088e6:	f7f7 ff51 	bl	800078c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80088ea:	bd08      	pop	{r3, pc}

080088ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088ec:	6803      	ldr	r3, [r0, #0]
 80088ee:	699a      	ldr	r2, [r3, #24]
 80088f0:	0791      	lsls	r1, r2, #30
 80088f2:	d501      	bpl.n	80088f8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088f4:	2200      	movs	r2, #0
 80088f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	07d2      	lsls	r2, r2, #31
 80088fc:	d403      	bmi.n	8008906 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	619a      	str	r2, [r3, #24]
  }
}
 8008906:	4770      	bx	lr

08008908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008908:	b530      	push	{r4, r5, lr}
 800890a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800890c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008910:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008912:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8008914:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800891a:	4a05      	ldr	r2, [pc, #20]	@ (8008930 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800891c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800891e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008922:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8008926:	ea20 0002 	bic.w	r0, r0, r2
 800892a:	4303      	orrs	r3, r0
 800892c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800892e:	bd30      	pop	{r4, r5, pc}
 8008930:	03ff63ff 	.word	0x03ff63ff

08008934 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8008934:	6803      	ldr	r3, [r0, #0]
{
 8008936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800893a:	699c      	ldr	r4, [r3, #24]
{
 800893c:	4605      	mov	r5, r0
 800893e:	460f      	mov	r7, r1
 8008940:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008942:	f014 0410 	ands.w	r4, r4, #16
 8008946:	d06f      	beq.n	8008a28 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8008948:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800894a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800894c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800894e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	0690      	lsls	r0, r2, #26
 8008956:	d461      	bmi.n	8008a1c <I2C_IsErrorOccurred+0xe8>
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	d035      	beq.n	80089ca <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800895e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8008962:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008964:	682e      	ldr	r6, [r5, #0]
 8008966:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008968:	05d9      	lsls	r1, r3, #23
 800896a:	d505      	bpl.n	8008978 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800896c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008970:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008974:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008976:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008978:	055a      	lsls	r2, r3, #21
 800897a:	d505      	bpl.n	8008988 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800897c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008980:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008984:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008986:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008988:	059b      	lsls	r3, r3, #22
 800898a:	d54f      	bpl.n	8008a2c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800898c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008990:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008994:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8008996:	4628      	mov	r0, r5
 8008998:	f7ff ffa8 	bl	80088ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800899c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800899e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80089a0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80089a4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80089a8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80089ac:	f023 0301 	bic.w	r3, r3, #1
 80089b0:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80089b2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80089b4:	4323      	orrs	r3, r4
 80089b6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80089b8:	2320      	movs	r3, #32
 80089ba:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089be:	2300      	movs	r3, #0
 80089c0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80089c4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80089c8:	e032      	b.n	8008a30 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80089ca:	1c7a      	adds	r2, r7, #1
 80089cc:	d0c1      	beq.n	8008952 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089ce:	f7ff fc17 	bl	8008200 <HAL_GetTick>
 80089d2:	1b80      	subs	r0, r0, r6
 80089d4:	42b8      	cmp	r0, r7
 80089d6:	d801      	bhi.n	80089dc <I2C_IsErrorOccurred+0xa8>
 80089d8:	2f00      	cmp	r7, #0
 80089da:	d1b9      	bne.n	8008950 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80089e0:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089e4:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80089e6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089e8:	0400      	lsls	r0, r0, #16
 80089ea:	d50a      	bpl.n	8008a02 <I2C_IsErrorOccurred+0xce>
 80089ec:	0449      	lsls	r1, r1, #17
 80089ee:	d408      	bmi.n	8008a02 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80089f0:	2a20      	cmp	r2, #32
 80089f2:	d006      	beq.n	8008a02 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089fa:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80089fc:	f7ff fc00 	bl	8008200 <HAL_GetTick>
 8008a00:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	069b      	lsls	r3, r3, #26
 8008a08:	d4a2      	bmi.n	8008950 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a0a:	f7ff fbf9 	bl	8008200 <HAL_GetTick>
 8008a0e:	1b80      	subs	r0, r0, r6
 8008a10:	2819      	cmp	r0, #25
 8008a12:	d9f6      	bls.n	8008a02 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008a14:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8008a16:	f04f 0801 	mov.w	r8, #1
 8008a1a:	e799      	b.n	8008950 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8008a1c:	f1b8 0f00 	cmp.w	r8, #0
 8008a20:	d19d      	bne.n	800895e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a22:	2220      	movs	r2, #32
 8008a24:	61da      	str	r2, [r3, #28]
 8008a26:	e79a      	b.n	800895e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8008a28:	4620      	mov	r0, r4
 8008a2a:	e79b      	b.n	8008964 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d1b2      	bne.n	8008996 <I2C_IsErrorOccurred+0x62>
}
 8008a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a34 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4604      	mov	r4, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	079b      	lsls	r3, r3, #30
 8008a42:	d501      	bpl.n	8008a48 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008a44:	2000      	movs	r0, #0
 8008a46:	e01f      	b.n	8008a88 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a48:	4632      	mov	r2, r6
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7ff ff71 	bl	8008934 <I2C_IsErrorOccurred>
 8008a52:	b9c0      	cbnz	r0, 8008a86 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8008a54:	1c6a      	adds	r2, r5, #1
 8008a56:	d0f1      	beq.n	8008a3c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a58:	f7ff fbd2 	bl	8008200 <HAL_GetTick>
 8008a5c:	1b80      	subs	r0, r0, r6
 8008a5e:	42a8      	cmp	r0, r5
 8008a60:	d801      	bhi.n	8008a66 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d1ea      	bne.n	8008a3c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f013 0302 	ands.w	r3, r3, #2
 8008a6e:	d1e5      	bne.n	8008a3c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a70:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8008a72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a76:	f042 0220 	orr.w	r2, r2, #32
 8008a7a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a82:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008a86:	2001      	movs	r0, #1
}
 8008a88:	bd70      	pop	{r4, r5, r6, pc}

08008a8a <I2C_WaitOnFlagUntilTimeout>:
{
 8008a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	9f06      	ldr	r7, [sp, #24]
 8008a90:	4604      	mov	r4, r0
 8008a92:	4688      	mov	r8, r1
 8008a94:	4616      	mov	r6, r2
 8008a96:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a98:	6822      	ldr	r2, [r4, #0]
 8008a9a:	6993      	ldr	r3, [r2, #24]
 8008a9c:	ea38 0303 	bics.w	r3, r8, r3
 8008aa0:	bf0c      	ite	eq
 8008aa2:	2301      	moveq	r3, #1
 8008aa4:	2300      	movne	r3, #0
 8008aa6:	42b3      	cmp	r3, r6
 8008aa8:	d001      	beq.n	8008aae <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e01e      	b.n	8008aec <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8008aae:	1c6b      	adds	r3, r5, #1
 8008ab0:	d0f3      	beq.n	8008a9a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f7ff fba5 	bl	8008200 <HAL_GetTick>
 8008ab6:	1bc0      	subs	r0, r0, r7
 8008ab8:	42a8      	cmp	r0, r5
 8008aba:	d801      	bhi.n	8008ac0 <I2C_WaitOnFlagUntilTimeout+0x36>
 8008abc:	2d00      	cmp	r5, #0
 8008abe:	d1eb      	bne.n	8008a98 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	ea38 0303 	bics.w	r3, r8, r3
 8008ac8:	bf0c      	ite	eq
 8008aca:	2301      	moveq	r3, #1
 8008acc:	2300      	movne	r3, #0
 8008ace:	42b3      	cmp	r3, r6
 8008ad0:	d1e2      	bne.n	8008a98 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ad2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          return HAL_ERROR;
 8008ad4:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ad6:	f043 0320 	orr.w	r3, r3, #32
 8008ada:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008adc:	2320      	movs	r3, #32
 8008ade:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8008ae8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4604      	mov	r4, r0
 8008af4:	460d      	mov	r5, r1
 8008af6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	069b      	lsls	r3, r3, #26
 8008afe:	d501      	bpl.n	8008b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8008b00:	2000      	movs	r0, #0
 8008b02:	e01d      	b.n	8008b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b04:	4632      	mov	r2, r6
 8008b06:	4629      	mov	r1, r5
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7ff ff13 	bl	8008934 <I2C_IsErrorOccurred>
 8008b0e:	b9b0      	cbnz	r0, 8008b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b10:	f7ff fb76 	bl	8008200 <HAL_GetTick>
 8008b14:	1b80      	subs	r0, r0, r6
 8008b16:	42a8      	cmp	r0, r5
 8008b18:	d801      	bhi.n	8008b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	d1ec      	bne.n	8008af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f013 0320 	ands.w	r3, r3, #32
 8008b26:	d1e7      	bne.n	8008af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b28:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008b2a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b2e:	f042 0220 	orr.w	r2, r2, #32
 8008b32:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b34:	2220      	movs	r2, #32
 8008b36:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008b3e:	2001      	movs	r0, #1
}
 8008b40:	bd70      	pop	{r4, r5, r6, pc}

08008b42 <HAL_I2C_Init>:
{
 8008b42:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008b44:	4604      	mov	r4, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d04a      	beq.n	8008be0 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b4a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008b4e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008b52:	b91b      	cbnz	r3, 8008b5c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8008b54:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008b58:	f7f8 fd2a 	bl	80015b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b5c:	2324      	movs	r3, #36	@ 0x24
 8008b5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	f022 0201 	bic.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b6c:	6862      	ldr	r2, [r4, #4]
 8008b6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008b72:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b74:	689a      	ldr	r2, [r3, #8]
 8008b76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b7a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b7c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b80:	2901      	cmp	r1, #1
 8008b82:	d124      	bne.n	8008bce <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b88:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b8a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b8c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b8e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b96:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b9e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ba0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8008ba4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008ba6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ba8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008bac:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008bae:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	f042 0201 	orr.w	r2, r2, #1
 8008bbc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008bbe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bc0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bc6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008bcc:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bd2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bd4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bd6:	d1d8      	bne.n	8008b8a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bdc:	605a      	str	r2, [r3, #4]
 8008bde:	e7d4      	b.n	8008b8a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8008be0:	2001      	movs	r0, #1
 8008be2:	e7f3      	b.n	8008bcc <HAL_I2C_Init+0x8a>

08008be4 <HAL_I2C_DeInit>:
{
 8008be4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008be6:	4604      	mov	r4, r0
 8008be8:	b198      	cbz	r0, 8008c12 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8008bea:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bec:	2324      	movs	r3, #36	@ 0x24
 8008bee:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008bf2:	6813      	ldr	r3, [r2, #0]
 8008bf4:	f023 0301 	bic.w	r3, r3, #1
 8008bf8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008bfa:	f7f8 fd23 	bl	8001644 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bfe:	2000      	movs	r0, #0
 8008c00:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8008c02:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008c06:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c0a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008c10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008c12:	2001      	movs	r0, #1
 8008c14:	e7fc      	b.n	8008c10 <HAL_I2C_DeInit+0x2c>
	...

08008c18 <HAL_I2C_Mem_Write>:
{
 8008c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c1e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008c22:	4604      	mov	r4, r0
 8008c24:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c26:	2b20      	cmp	r3, #32
{
 8008c28:	4616      	mov	r6, r2
 8008c2a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008c2e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c32:	f040 80c6 	bne.w	8008dc2 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8008c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c38:	b113      	cbz	r3, 8008c40 <HAL_I2C_Mem_Write+0x28>
 8008c3a:	f1ba 0f00 	cmp.w	sl, #0
 8008c3e:	d106      	bne.n	8008c4e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c44:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008c46:	2001      	movs	r0, #1
}
 8008c48:	b003      	add	sp, #12
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008c4e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	f000 80b5 	beq.w	8008dc2 <HAL_I2C_Mem_Write+0x1aa>
 8008c58:	f04f 0b01 	mov.w	fp, #1
 8008c5c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008c60:	f7ff face 	bl	8008200 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c64:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008c66:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c68:	9000      	str	r0, [sp, #0]
 8008c6a:	465a      	mov	r2, fp
 8008c6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008c70:	4620      	mov	r0, r4
 8008c72:	f7ff ff0a 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1e5      	bne.n	8008c46 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c7a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8008c7c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c7e:	fa5f f289 	uxtb.w	r2, r9
 8008c82:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c88:	2340      	movs	r3, #64	@ 0x40
 8008c8a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008c8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c90:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c92:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008c94:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c96:	4b4c      	ldr	r3, [pc, #304]	@ (8008dc8 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8008c98:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ca2:	f7ff fe31 	bl	8008908 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4641      	mov	r1, r8
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7ff fec2 	bl	8008a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008cb0:	bb18      	cbnz	r0, 8008cfa <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cb2:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cb6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cb8:	d115      	bne.n	8008ce6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cba:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2180      	movs	r1, #128	@ 0x80
 8008cc0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cc2:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc4:	4643      	mov	r3, r8
 8008cc6:	9500      	str	r5, [sp, #0]
 8008cc8:	f7ff fedf 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008ccc:	b9a8      	cbnz	r0, 8008cfa <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2bff      	cmp	r3, #255	@ 0xff
 8008cd4:	d815      	bhi.n	8008d02 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008cd6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008cd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008cdc:	b292      	uxth	r2, r2
 8008cde:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	9000      	str	r0, [sp, #0]
 8008ce4:	e012      	b.n	8008d0c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ce6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008cec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cee:	462a      	mov	r2, r5
 8008cf0:	f7ff fea0 	bl	8008a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008cf4:	b908      	cbnz	r0, 8008cfa <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	e7df      	b.n	8008cba <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008d00:	e7a1      	b.n	8008c46 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d02:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d08:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d0a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff fdfa 	bl	8008908 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d14:	462a      	mov	r2, r5
 8008d16:	4641      	mov	r1, r8
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7ff fe8b 	bl	8008a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d191      	bne.n	8008c46 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008d2a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008d2c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008d2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d30:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008d32:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008d34:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8008d36:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008d38:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008d3a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d3c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d3e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	b1b3      	cbz	r3, 8008d72 <HAL_I2C_Mem_Write+0x15a>
 8008d44:	b9aa      	cbnz	r2, 8008d72 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d46:	4643      	mov	r3, r8
 8008d48:	2180      	movs	r1, #128	@ 0x80
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	9500      	str	r5, [sp, #0]
 8008d4e:	f7ff fe9c 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	f47f af77 	bne.w	8008c46 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d58:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	2bff      	cmp	r3, #255	@ 0xff
 8008d5e:	d928      	bls.n	8008db2 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d60:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d66:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d68:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f7ff fdcb 	bl	8008908 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008d72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1cc      	bne.n	8008d14 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4641      	mov	r1, r8
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff feb6 	bl	8008af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f47f af5e 	bne.w	8008c46 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	2120      	movs	r1, #32
 8008d8e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008d96:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008d9a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008d9e:	f022 0201 	bic.w	r2, r2, #1
 8008da2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008da4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008da8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008dac:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008db0:	e74a      	b.n	8008c48 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008db2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008db4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008db8:	b292      	uxth	r2, r2
 8008dba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008dbc:	b2d2      	uxtb	r2, r2
 8008dbe:	9000      	str	r0, [sp, #0]
 8008dc0:	e7d3      	b.n	8008d6a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8008dc2:	2002      	movs	r0, #2
 8008dc4:	e740      	b.n	8008c48 <HAL_I2C_Mem_Write+0x30>
 8008dc6:	bf00      	nop
 8008dc8:	80002000 	.word	0x80002000

08008dcc <HAL_I2C_Mem_Read>:
{
 8008dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dd2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dda:	2b20      	cmp	r3, #32
{
 8008ddc:	4616      	mov	r6, r2
 8008dde:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008de2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008de6:	f040 80c9 	bne.w	8008f7c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8008dea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dec:	b113      	cbz	r3, 8008df4 <HAL_I2C_Mem_Read+0x28>
 8008dee:	f1ba 0f00 	cmp.w	sl, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008df4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008df8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008dfa:	2001      	movs	r0, #1
}
 8008dfc:	b003      	add	sp, #12
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008e02:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	f000 80b8 	beq.w	8008f7c <HAL_I2C_Mem_Read+0x1b0>
 8008e0c:	f04f 0b01 	mov.w	fp, #1
 8008e10:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008e14:	f7ff f9f4 	bl	8008200 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e18:	2319      	movs	r3, #25
 8008e1a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008e1c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e1e:	465a      	mov	r2, fp
 8008e20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e24:	4620      	mov	r0, r4
 8008e26:	f7ff fe30 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d1e4      	bne.n	8008dfa <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e30:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8008e32:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e34:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e36:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e3a:	2240      	movs	r2, #64	@ 0x40
 8008e3c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008e40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e42:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e44:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008e46:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e48:	4a4d      	ldr	r2, [pc, #308]	@ (8008f80 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8008e4a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e4e:	9200      	str	r2, [sp, #0]
 8008e50:	fa5f f289 	uxtb.w	r2, r9
 8008e54:	f7ff fd58 	bl	8008908 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e58:	462a      	mov	r2, r5
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7ff fde9 	bl	8008a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e62:	bb20      	cbnz	r0, 8008eae <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e64:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e68:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e6a:	d116      	bne.n	8008e9a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e6c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2140      	movs	r1, #64	@ 0x40
 8008e72:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e74:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e76:	4643      	mov	r3, r8
 8008e78:	9500      	str	r5, [sp, #0]
 8008e7a:	f7ff fe06 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008e7e:	b9b0      	cbnz	r0, 8008eae <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e80:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2bff      	cmp	r3, #255	@ 0xff
 8008e86:	4b3f      	ldr	r3, [pc, #252]	@ (8008f84 <HAL_I2C_Mem_Read+0x1b8>)
 8008e88:	d815      	bhi.n	8008eb6 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008e8a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008e8c:	b292      	uxth	r2, r2
 8008e8e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e98:	e012      	b.n	8008ec0 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e9a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e9c:	4641      	mov	r1, r8
 8008e9e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ea0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	f7ff fdc6 	bl	8008a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ea8:	b908      	cbnz	r0, 8008eae <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	e7de      	b.n	8008e6c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008eb4:	e7a1      	b.n	8008dfa <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008eb6:	22ff      	movs	r2, #255	@ 0xff
 8008eb8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7ff fd20 	bl	8008908 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008ec8:	4643      	mov	r3, r8
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2104      	movs	r1, #4
 8008ece:	4620      	mov	r0, r4
 8008ed0:	9500      	str	r5, [sp, #0]
 8008ed2:	f7ff fdda 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d18f      	bne.n	8008dfa <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ede:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ee0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008ee2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008ee4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008ee6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008ee8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008eea:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008eec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008eee:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008ef0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008ef2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ef8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	b1b3      	cbz	r3, 8008f2c <HAL_I2C_Mem_Read+0x160>
 8008efe:	b9aa      	cbnz	r2, 8008f2c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f00:	4643      	mov	r3, r8
 8008f02:	2180      	movs	r1, #128	@ 0x80
 8008f04:	4620      	mov	r0, r4
 8008f06:	9500      	str	r5, [sp, #0]
 8008f08:	f7ff fdbf 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f47f af74 	bne.w	8008dfa <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	2bff      	cmp	r3, #255	@ 0xff
 8008f18:	d928      	bls.n	8008f6c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f1a:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008f1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f20:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008f22:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f24:	4639      	mov	r1, r7
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7ff fcee 	bl	8008908 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008f2c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1c9      	bne.n	8008ec8 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f34:	462a      	mov	r2, r5
 8008f36:	4641      	mov	r1, r8
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7ff fdd9 	bl	8008af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f47f af5b 	bne.w	8008dfa <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	2120      	movs	r1, #32
 8008f48:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008f50:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008f54:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008f5e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008f62:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f66:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008f6a:	e747      	b.n	8008dfc <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008f6c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008f72:	b292      	uxth	r2, r2
 8008f74:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	9000      	str	r0, [sp, #0]
 8008f7a:	e7d3      	b.n	8008f24 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008f7c:	2002      	movs	r0, #2
 8008f7e:	e73d      	b.n	8008dfc <HAL_I2C_Mem_Read+0x30>
 8008f80:	80002000 	.word	0x80002000
 8008f84:	80002400 	.word	0x80002400

08008f88 <HAL_I2C_IsDeviceReady>:
{
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8008f8e:	2300      	movs	r3, #0
{
 8008f90:	4604      	mov	r4, r0
 8008f92:	4690      	mov	r8, r2
  __IO uint32_t I2C_Trials = 0UL;
 8008f94:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f96:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	d17c      	bne.n	8009098 <HAL_I2C_IsDeviceReady+0x110>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008f9e:	6803      	ldr	r3, [r0, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f413 4300 	ands.w	r3, r3, #32768	@ 0x8000
 8008fa6:	d177      	bne.n	8009098 <HAL_I2C_IsDeviceReady+0x110>
    __HAL_LOCK(hi2c);
 8008fa8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008fac:	2a01      	cmp	r2, #1
 8008fae:	d073      	beq.n	8009098 <HAL_I2C_IsDeviceReady+0x110>
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f3c1 0609 	ubfx	r6, r1, #0, #10
 8008fb6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008fba:	f446 5920 	orr.w	r9, r6, #10240	@ 0x2800
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fbe:	2224      	movs	r2, #36	@ 0x24
 8008fc0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc4:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008fc6:	68e3      	ldr	r3, [r4, #12]
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	bf0a      	itet	eq
 8008fce:	f046 7300 	orreq.w	r3, r6, #33554432	@ 0x2000000
 8008fd2:	464b      	movne	r3, r9
 8008fd4:	f443 5300 	orreq.w	r3, r3, #8192	@ 0x2000
 8008fd8:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8008fda:	f7ff f911 	bl	8008200 <HAL_GetTick>
 8008fde:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe0:	6822      	ldr	r2, [r4, #0]
 8008fe2:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008fe4:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe6:	f3c3 1340 	ubfx	r3, r3, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008fea:	f3c2 1200 	ubfx	r2, r2, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	d013      	beq.n	800901a <HAL_I2C_IsDeviceReady+0x92>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008ff6:	462b      	mov	r3, r5
 8008ff8:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008ffa:	f012 0210 	ands.w	r2, r2, #16
 8008ffe:	d123      	bne.n	8009048 <HAL_I2C_IsDeviceReady+0xc0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009000:	2120      	movs	r1, #32
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff fd41 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8009008:	b9d0      	cbnz	r0, 8009040 <HAL_I2C_IsDeviceReady+0xb8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800900a:	2320      	movs	r3, #32
 800900c:	6822      	ldr	r2, [r4, #0]
 800900e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8009010:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8009014:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
        return HAL_OK;
 8009018:	e013      	b.n	8009042 <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 800901a:	1c6b      	adds	r3, r5, #1
 800901c:	d0e0      	beq.n	8008fe0 <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800901e:	f7ff f8ef 	bl	8008200 <HAL_GetTick>
 8009022:	1bc0      	subs	r0, r0, r7
 8009024:	42a8      	cmp	r0, r5
 8009026:	d801      	bhi.n	800902c <HAL_I2C_IsDeviceReady+0xa4>
 8009028:	2d00      	cmp	r5, #0
 800902a:	d1d9      	bne.n	8008fe0 <HAL_I2C_IsDeviceReady+0x58>
            hi2c->State = HAL_I2C_STATE_READY;
 800902c:	2320      	movs	r3, #32
 800902e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009032:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009034:	f043 0320 	orr.w	r3, r3, #32
 8009038:	6463      	str	r3, [r4, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 800903a:	2300      	movs	r3, #0
 800903c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            return HAL_ERROR;
 8009040:	2001      	movs	r0, #1
}
 8009042:	b004      	add	sp, #16
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009048:	2200      	movs	r2, #0
 800904a:	2120      	movs	r1, #32
 800904c:	4620      	mov	r0, r4
 800904e:	f7ff fd1c 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8009052:	4602      	mov	r2, r0
 8009054:	2800      	cmp	r0, #0
 8009056:	d1f3      	bne.n	8009040 <HAL_I2C_IsDeviceReady+0xb8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800905c:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009060:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009062:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 8009066:	9903      	ldr	r1, [sp, #12]
 8009068:	4541      	cmp	r1, r8
 800906a:	d10e      	bne.n	800908a <HAL_I2C_IsDeviceReady+0x102>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800906c:	6859      	ldr	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800906e:	4620      	mov	r0, r4
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009070:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8009074:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009076:	462b      	mov	r3, r5
 8009078:	4651      	mov	r1, sl
 800907a:	9700      	str	r7, [sp, #0]
 800907c:	f7ff fd05 	bl	8008a8a <I2C_WaitOnFlagUntilTimeout>
 8009080:	2800      	cmp	r0, #0
 8009082:	d1dd      	bne.n	8009040 <HAL_I2C_IsDeviceReady+0xb8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	4543      	cmp	r3, r8
 8009094:	d397      	bcc.n	8008fc6 <HAL_I2C_IsDeviceReady+0x3e>
 8009096:	e7c9      	b.n	800902c <HAL_I2C_IsDeviceReady+0xa4>
      return HAL_BUSY;
 8009098:	2002      	movs	r0, #2
 800909a:	e7d2      	b.n	8009042 <HAL_I2C_IsDeviceReady+0xba>

0800909c <HAL_I2C_GetState>:
  return hi2c->State;
 800909c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80090a0:	4770      	bx	lr

080090a2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80090a2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 80090a4:	4770      	bx	lr

080090a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090a6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090a8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80090ac:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ae:	2a20      	cmp	r2, #32
 80090b0:	b2d4      	uxtb	r4, r2
 80090b2:	d11c      	bne.n	80090ee <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090b4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80090b8:	2a01      	cmp	r2, #1
 80090ba:	d018      	beq.n	80090ee <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090bc:	2224      	movs	r2, #36	@ 0x24
 80090be:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090c2:	6802      	ldr	r2, [r0, #0]
 80090c4:	6810      	ldr	r0, [r2, #0]
 80090c6:	f020 0001 	bic.w	r0, r0, #1
 80090ca:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80090cc:	6810      	ldr	r0, [r2, #0]
 80090ce:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80090d2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80090d4:	6810      	ldr	r0, [r2, #0]
 80090d6:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090d8:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 80090da:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80090dc:	6811      	ldr	r1, [r2, #0]
 80090de:	f041 0101 	orr.w	r1, r1, #1
 80090e2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80090e4:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80090e8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80090ec:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80090ee:	2002      	movs	r0, #2
 80090f0:	e7fc      	b.n	80090ec <HAL_I2CEx_ConfigAnalogFilter+0x46>

080090f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090f2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090f4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80090f8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090fa:	2a20      	cmp	r2, #32
 80090fc:	b2d4      	uxtb	r4, r2
 80090fe:	d11b      	bne.n	8009138 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009100:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009104:	2a01      	cmp	r2, #1
 8009106:	d017      	beq.n	8009138 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009108:	2224      	movs	r2, #36	@ 0x24
 800910a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800910e:	6802      	ldr	r2, [r0, #0]
 8009110:	6810      	ldr	r0, [r2, #0]
 8009112:	f020 0001 	bic.w	r0, r0, #1
 8009116:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009118:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800911a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800911e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009122:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8009124:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009126:	6811      	ldr	r1, [r2, #0]
 8009128:	f041 0101 	orr.w	r1, r1, #1
 800912c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800912e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009132:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009136:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009138:	2002      	movs	r0, #2
 800913a:	e7fc      	b.n	8009136 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800913c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800913c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800913e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009140:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009144:	3284      	adds	r2, #132	@ 0x84
 8009146:	1883      	adds	r3, r0, r2
{
 8009148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800914c:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800914e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009152:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009154:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009158:	684c      	ldr	r4, [r1, #4]
 800915a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800915e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009162:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009166:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009168:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800916a:	68c5      	ldr	r5, [r0, #12]
 800916c:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009170:	443d      	add	r5, r7
 8009172:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009176:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009178:	68c6      	ldr	r6, [r0, #12]
 800917a:	68cd      	ldr	r5, [r1, #12]
 800917c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8009180:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009182:	689d      	ldr	r5, [r3, #8]
 8009184:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8009188:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800918a:	688d      	ldr	r5, [r1, #8]
 800918c:	68c7      	ldr	r7, [r0, #12]
 800918e:	3501      	adds	r5, #1
 8009190:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009194:	443d      	add	r5, r7
 8009196:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800919a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800919c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800919e:	691d      	ldr	r5, [r3, #16]
 80091a0:	f025 0507 	bic.w	r5, r5, #7
 80091a4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80091a6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80091a8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80091aa:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80091ae:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80091b2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80091b6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80091ba:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80091be:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80091c2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80091c6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80091c8:	695d      	ldr	r5, [r3, #20]
 80091ca:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80091ce:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80091d0:	694d      	ldr	r5, [r1, #20]
 80091d2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80091d4:	69dd      	ldr	r5, [r3, #28]
 80091d6:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80091da:	f025 0507 	bic.w	r5, r5, #7
 80091de:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80091e0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80091e4:	433d      	orrs	r5, r7
 80091e6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80091e8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80091ea:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80091ec:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80091f0:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80091f2:	b31e      	cbz	r6, 800923c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80091f4:	2e01      	cmp	r6, #1
 80091f6:	d023      	beq.n	8009240 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80091f8:	1eb5      	subs	r5, r6, #2
 80091fa:	2d02      	cmp	r5, #2
 80091fc:	d922      	bls.n	8009244 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80091fe:	2e07      	cmp	r6, #7
 8009200:	bf14      	ite	ne
 8009202:	2501      	movne	r5, #1
 8009204:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009206:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009208:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800920c:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009210:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009212:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009214:	3407      	adds	r4, #7
 8009216:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009218:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800921a:	436e      	muls	r6, r5
 800921c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8009220:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009222:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8009224:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8009228:	f024 0407 	bic.w	r4, r4, #7
 800922c:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800922e:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009230:	5883      	ldr	r3, [r0, r2]
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	5083      	str	r3, [r0, r2]
}
 8009238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800923c:	2504      	movs	r5, #4
 800923e:	e7e2      	b.n	8009206 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8009240:	2503      	movs	r5, #3
 8009242:	e7e0      	b.n	8009206 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8009244:	2502      	movs	r5, #2
 8009246:	e7de      	b.n	8009206 <LTDC_SetConfig+0xca>

08009248 <HAL_LTDC_Init>:
{
 8009248:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800924a:	4604      	mov	r4, r0
 800924c:	2800      	cmp	r0, #0
 800924e:	d063      	beq.n	8009318 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009250:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009254:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009258:	b91b      	cbnz	r3, 8009262 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800925a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800925e:	f7f8 fa11 	bl	8001684 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009262:	2302      	movs	r3, #2
 8009264:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009270:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009272:	6999      	ldr	r1, [r3, #24]
 8009274:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009278:	4302      	orrs	r2, r0
 800927a:	68e0      	ldr	r0, [r4, #12]
 800927c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800927e:	6920      	ldr	r0, [r4, #16]
 8009280:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009282:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009284:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009286:	4925      	ldr	r1, [pc, #148]	@ (800931c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009288:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	400a      	ands	r2, r1
 800928e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009296:	69a0      	ldr	r0, [r4, #24]
 8009298:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800929a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800929c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	400a      	ands	r2, r1
 80092a2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80092aa:	6a20      	ldr	r0, [r4, #32]
 80092ac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80092ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80092b0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	400a      	ands	r2, r1
 80092b6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80092b8:	691a      	ldr	r2, [r3, #16]
 80092ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80092be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80092c0:	4302      	orrs	r2, r0
 80092c2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80092c4:	695a      	ldr	r2, [r3, #20]
 80092c6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 80092c8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80092ca:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80092cc:	695a      	ldr	r2, [r3, #20]
 80092ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80092d2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80092d4:	430a      	orrs	r2, r1
 80092d6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80092d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80092da:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80092de:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80092e2:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80092e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80092e8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80092ea:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80092ee:	432a      	orrs	r2, r5
 80092f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80092f4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80092f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80092fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80092fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092fe:	f042 0206 	orr.w	r2, r2, #6
 8009302:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800930c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800930e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8009312:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8009316:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009318:	2001      	movs	r0, #1
 800931a:	e7fc      	b.n	8009316 <HAL_LTDC_Init+0xce>
 800931c:	f000f800 	.word	0xf000f800

08009320 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8009320:	4770      	bx	lr

08009322 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8009322:	4770      	bx	lr

08009324 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009324:	6803      	ldr	r3, [r0, #0]
{
 8009326:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009328:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800932a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800932c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800932e:	0772      	lsls	r2, r6, #29
 8009330:	d514      	bpl.n	800935c <HAL_LTDC_IRQHandler+0x38>
 8009332:	0769      	lsls	r1, r5, #29
 8009334:	d512      	bpl.n	800935c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009338:	f022 0204 	bic.w	r2, r2, #4
 800933c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800933e:	2204      	movs	r2, #4
 8009340:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009342:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8009346:	f043 0301 	orr.w	r3, r3, #1
 800934a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800934e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009350:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009354:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009358:	f7ff ffe2 	bl	8009320 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800935c:	07b2      	lsls	r2, r6, #30
 800935e:	d516      	bpl.n	800938e <HAL_LTDC_IRQHandler+0x6a>
 8009360:	07ab      	lsls	r3, r5, #30
 8009362:	d514      	bpl.n	800938e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009364:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8009366:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936a:	f022 0202 	bic.w	r2, r2, #2
 800936e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009370:	2202      	movs	r2, #2
 8009372:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009374:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009378:	4313      	orrs	r3, r2
 800937a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800937e:	2304      	movs	r3, #4
 8009380:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009384:	2300      	movs	r3, #0
 8009386:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800938a:	f7ff ffc9 	bl	8009320 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800938e:	07f0      	lsls	r0, r6, #31
 8009390:	d510      	bpl.n	80093b4 <HAL_LTDC_IRQHandler+0x90>
 8009392:	07e9      	lsls	r1, r5, #31
 8009394:	d50e      	bpl.n	80093b4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009396:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009398:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800939a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80093a2:	2201      	movs	r2, #1
 80093a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 80093a6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80093a8:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80093ac:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80093b0:	f7f9 fd06 	bl	8002dc0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80093b4:	0732      	lsls	r2, r6, #28
 80093b6:	d511      	bpl.n	80093dc <HAL_LTDC_IRQHandler+0xb8>
 80093b8:	072b      	lsls	r3, r5, #28
 80093ba:	d50f      	bpl.n	80093dc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80093bc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80093be:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80093c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093c2:	f022 0208 	bic.w	r2, r2, #8
 80093c6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80093c8:	2208      	movs	r2, #8
 80093ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80093d2:	2300      	movs	r3, #0
 80093d4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80093d8:	f7ff ffa3 	bl	8009322 <HAL_LTDC_ReloadEventCallback>
}
 80093dc:	bd70      	pop	{r4, r5, r6, pc}

080093de <HAL_LTDC_ConfigLayer>:
{
 80093de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80093e2:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f04f 0002 	mov.w	r0, #2
 80093f2:	d01f      	beq.n	8009434 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80093f4:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 80093f6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80093fa:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093fc:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009400:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8009404:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009408:	3438      	adds	r4, #56	@ 0x38
 800940a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800940c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800940e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009416:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009418:	4630      	mov	r0, r6
 800941a:	4662      	mov	r2, ip
 800941c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800941e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009420:	f7ff fe8c 	bl	800913c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009424:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8009426:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009428:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800942c:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009430:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8009434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009438 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8009438:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 800943c:	4603      	mov	r3, r0
 800943e:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 8009440:	2a01      	cmp	r2, #1
 8009442:	d012      	beq.n	800946a <HAL_LTDC_ProgramLineEvent+0x32>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009444:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009446:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800944a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800944c:	f020 0001 	bic.w	r0, r0, #1
 8009450:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8009452:	4806      	ldr	r0, [pc, #24]	@ (800946c <HAL_LTDC_ProgramLineEvent+0x34>)
 8009454:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hltdc);
 8009456:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8009458:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800945a:	f041 0101 	orr.w	r1, r1, #1
 800945e:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8009460:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 8009462:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 8009466:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
}
 800946a:	4770      	bx	lr
 800946c:	50001000 	.word	0x50001000

08009470 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8009474:	f7fe fec4 	bl	8008200 <HAL_GetTick>
 8009478:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800947a:	b144      	cbz	r4, 800948e <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800947c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8009480:	2b02      	cmp	r3, #2
 8009482:	d006      	beq.n	8009492 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	66a3      	str	r3, [r4, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8009488:	2300      	movs	r3, #0
 800948a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800948e:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 8009490:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800949a:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	f022 0201 	bic.w	r2, r2, #1
 80094a2:	60da      	str	r2, [r3, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	68d8      	ldr	r0, [r3, #12]
 80094a8:	f010 0001 	ands.w	r0, r0, #1
 80094ac:	d107      	bne.n	80094be <HAL_MDMA_Abort+0x4e>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80094ae:	221f      	movs	r2, #31
 80094b0:	605a      	str	r2, [r3, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 80094b2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hmdma);
 80094b4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80094b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80094bc:	e7e8      	b.n	8009490 <HAL_MDMA_Abort+0x20>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80094be:	f7fe fe9f 	bl	8008200 <HAL_GetTick>
 80094c2:	1b40      	subs	r0, r0, r5
 80094c4:	2805      	cmp	r0, #5
 80094c6:	d9ed      	bls.n	80094a4 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80094c8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80094ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ce:	66a3      	str	r3, [r4, #104]	@ 0x68
        __HAL_UNLOCK(hmdma);
 80094d0:	2300      	movs	r3, #0
 80094d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80094d6:	2303      	movs	r3, #3
 80094d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        return HAL_ERROR;
 80094dc:	e7d7      	b.n	800948e <HAL_MDMA_Abort+0x1e>
	...

080094e0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80094e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80094e4:	6804      	ldr	r4, [r0, #0]
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80094ec:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80094ee:	6883      	ldr	r3, [r0, #8]
 80094f0:	b92b      	cbnz	r3, 80094fe <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	684a      	ldr	r2, [r1, #4]
 80094f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094fa:	4313      	orrs	r3, r2
 80094fc:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80094fe:	680b      	ldr	r3, [r1, #0]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d150      	bne.n	80095a6 <OSPI_ConfigCmd+0xc6>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8009504:	f504 72c0 	add.w	r2, r4, #384	@ 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8009508:	f504 76c4 	add.w	r6, r4, #392	@ 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800950c:	f504 75c8 	add.w	r5, r4, #400	@ 0x190
    abr_reg = &(hospi->Instance->WABR);
 8009510:	f504 7cd0 	add.w	ip, r4, #416	@ 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8009514:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	@ 0x48
 8009518:	433b      	orrs	r3, r7
 800951a:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800951c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800951e:	b16b      	cbz	r3, 800953c <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8009520:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009522:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8009526:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
 8009528:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800952a:	f8d2 c000 	ldr.w	ip, [r2]
 800952e:	433b      	orrs	r3, r7
 8009530:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8009532:	433b      	orrs	r3, r7
 8009534:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
 8009538:	433b      	orrs	r3, r7
 800953a:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800953c:	6833      	ldr	r3, [r6, #0]
 800953e:	6c4f      	ldr	r7, [r1, #68]	@ 0x44
 8009540:	f023 031f 	bic.w	r3, r3, #31
 8009544:	433b      	orrs	r3, r7
 8009546:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009548:	f8d1 e038 	ldr.w	lr, [r1, #56]	@ 0x38
 800954c:	f1be 0f00 	cmp.w	lr, #0
 8009550:	d004      	beq.n	800955c <OSPI_ConfigCmd+0x7c>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8009552:	680b      	ldr	r3, [r1, #0]
 8009554:	b913      	cbnz	r3, 800955c <OSPI_ConfigCmd+0x7c>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8009556:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8009558:	3b01      	subs	r3, #1
 800955a:	6423      	str	r3, [r4, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800955c:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800955e:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8009562:	2b00      	cmp	r3, #0
 8009564:	d07a      	beq.n	800965c <OSPI_ConfigCmd+0x17c>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009566:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800956a:	f1b9 0f00 	cmp.w	r9, #0
 800956e:	d04a      	beq.n	8009606 <OSPI_ConfigCmd+0x126>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009570:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009574:	f1be 0f00 	cmp.w	lr, #0
 8009578:	d029      	beq.n	80095ce <OSPI_ConfigCmd+0xee>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800957a:	ea4e 0303 	orr.w	r3, lr, r3
 800957e:	6810      	ldr	r0, [r2, #0]
 8009580:	ea43 0309 	orr.w	r3, r3, r9
 8009584:	ea43 0308 	orr.w	r3, r3, r8
 8009588:	ea43 030c 	orr.w	r3, r3, ip
 800958c:	433b      	orrs	r3, r7
 800958e:	4333      	orrs	r3, r6
 8009590:	6c0e      	ldr	r6, [r1, #64]	@ 0x40
 8009592:	4333      	orrs	r3, r6
 8009594:	4e43      	ldr	r6, [pc, #268]	@ (80096a4 <OSPI_ConfigCmd+0x1c4>)
 8009596:	4006      	ands	r6, r0
 8009598:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800959a:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800959c:	688b      	ldr	r3, [r1, #8]
 800959e:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80095a0:	698b      	ldr	r3, [r1, #24]
 80095a2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80095a4:	e043      	b.n	800962e <OSPI_ConfigCmd+0x14e>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80095a6:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80095a8:	bf01      	itttt	eq
 80095aa:	f504 72a0 	addeq.w	r2, r4, #320	@ 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80095ae:	f504 76a4 	addeq.w	r6, r4, #328	@ 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80095b2:	f504 75a8 	addeq.w	r5, r4, #336	@ 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80095b6:	f504 7cb0 	addeq.w	ip, r4, #352	@ 0x160
    ccr_reg = &(hospi->Instance->CCR);
 80095ba:	bf1f      	itttt	ne
 80095bc:	f504 7280 	addne.w	r2, r4, #256	@ 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80095c0:	f504 7684 	addne.w	r6, r4, #264	@ 0x108
    ir_reg  = &(hospi->Instance->IR);
 80095c4:	f504 7588 	addne.w	r5, r4, #272	@ 0x110
    abr_reg = &(hospi->Instance->ABR);
 80095c8:	f504 7c90 	addne.w	ip, r4, #288	@ 0x120
 80095cc:	e7a2      	b.n	8009514 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80095ce:	ea43 0309 	orr.w	r3, r3, r9
 80095d2:	f8d2 e000 	ldr.w	lr, [r2]
 80095d6:	ea43 0308 	orr.w	r3, r3, r8
 80095da:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
 80095de:	ea43 030c 	orr.w	r3, r3, ip
 80095e2:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
 80095e6:	433b      	orrs	r3, r7
 80095e8:	4333      	orrs	r3, r6
 80095ea:	ea43 030e 	orr.w	r3, r3, lr
 80095ee:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80095f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80095f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095f6:	d1d1      	bne.n	800959c <OSPI_ConfigCmd+0xbc>
 80095f8:	694b      	ldr	r3, [r1, #20]
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d1ce      	bne.n	800959c <OSPI_ConfigCmd+0xbc>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80095fe:	6813      	ldr	r3, [r2, #0]
 8009600:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009604:	e7c9      	b.n	800959a <OSPI_ConfigCmd+0xba>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009606:	f1be 0f00 	cmp.w	lr, #0
 800960a:	d013      	beq.n	8009634 <OSPI_ConfigCmd+0x154>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800960c:	ea4e 0303 	orr.w	r3, lr, r3
 8009610:	6810      	ldr	r0, [r2, #0]
 8009612:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8009614:	ea43 0308 	orr.w	r3, r3, r8
 8009618:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 800961c:	ea43 030c 	orr.w	r3, r3, ip
 8009620:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8009624:	4323      	orrs	r3, r4
 8009626:	4303      	orrs	r3, r0
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009628:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 800962a:	688b      	ldr	r3, [r1, #8]
 800962c:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800962e:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8009630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8009634:	6814      	ldr	r4, [r2, #0]
 8009636:	ea43 0308 	orr.w	r3, r3, r8
 800963a:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 800963e:	ea43 030c 	orr.w	r3, r3, ip
 8009642:	4323      	orrs	r3, r4
 8009644:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009646:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8009648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800964c:	d1ed      	bne.n	800962a <OSPI_ConfigCmd+0x14a>
 800964e:	694b      	ldr	r3, [r1, #20]
 8009650:	2b08      	cmp	r3, #8
 8009652:	d1ea      	bne.n	800962a <OSPI_ConfigCmd+0x14a>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009654:	6813      	ldr	r3, [r2, #0]
 8009656:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800965a:	e7e5      	b.n	8009628 <OSPI_ConfigCmd+0x148>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800965c:	f1b9 0f00 	cmp.w	r9, #0
 8009660:	d01b      	beq.n	800969a <OSPI_ConfigCmd+0x1ba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009662:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009666:	f1be 0f00 	cmp.w	lr, #0
 800966a:	d00d      	beq.n	8009688 <OSPI_ConfigCmd+0x1a8>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800966c:	ea4e 0309 	orr.w	r3, lr, r9
 8009670:	6815      	ldr	r5, [r2, #0]
 8009672:	4303      	orrs	r3, r0
 8009674:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8009676:	4333      	orrs	r3, r6
 8009678:	4303      	orrs	r3, r0
 800967a:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
 800967e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8009682:	4303      	orrs	r3, r0
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	e78b      	b.n	80095a0 <OSPI_ConfigCmd+0xc0>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8009688:	6813      	ldr	r3, [r2, #0]
 800968a:	ea40 0009 	orr.w	r0, r0, r9
 800968e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009692:	4330      	orrs	r0, r6
 8009694:	4318      	orrs	r0, r3
 8009696:	6010      	str	r0, [r2, #0]
 8009698:	e782      	b.n	80095a0 <OSPI_ConfigCmd+0xc0>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800969a:	2308      	movs	r3, #8
 800969c:	6543      	str	r3, [r0, #84]	@ 0x54
      status = HAL_ERROR;
 800969e:	2001      	movs	r0, #1
 80096a0:	e7c6      	b.n	8009630 <OSPI_ConfigCmd+0x150>
 80096a2:	bf00      	nop
 80096a4:	f0ffc0c0 	.word	0xf0ffc0c0

080096a8 <OSPI_WaitFlagStateUntilTimeout>:
{
 80096a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80096b0:	4604      	mov	r4, r0
 80096b2:	460e      	mov	r6, r1
 80096b4:	4615      	mov	r5, r2
 80096b6:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80096b8:	6822      	ldr	r2, [r4, #0]
 80096ba:	6a13      	ldr	r3, [r2, #32]
 80096bc:	4233      	tst	r3, r6
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	d101      	bne.n	80096cc <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80096c8:	2000      	movs	r0, #0
 80096ca:	e012      	b.n	80096f2 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80096cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80096d0:	d0f3      	beq.n	80096ba <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d2:	f7fe fd95 	bl	8008200 <HAL_GetTick>
 80096d6:	1bc0      	subs	r0, r0, r7
 80096d8:	4540      	cmp	r0, r8
 80096da:	d802      	bhi.n	80096e2 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 80096dc:	f1b8 0f00 	cmp.w	r8, #0
 80096e0:	d1ea      	bne.n	80096b8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80096e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80096e6:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80096e8:	6523      	str	r3, [r4, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80096ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80096ec:	f043 0301 	orr.w	r3, r3, #1
 80096f0:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80096f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080096f8 <HAL_OSPI_Init>:
{
 80096f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80096fc:	f7fe fd80 	bl	8008200 <HAL_GetTick>
 8009700:	4606      	mov	r6, r0
  if (hospi == NULL)
 8009702:	2c00      	cmp	r4, #0
 8009704:	d068      	beq.n	80097d8 <HAL_OSPI_Init+0xe0>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009706:	2300      	movs	r3, #0
 8009708:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800970a:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 800970c:	2f00      	cmp	r7, #0
 800970e:	d15e      	bne.n	80097ce <HAL_OSPI_Init+0xd6>
      HAL_OSPI_MspInit(hospi);
 8009710:	4620      	mov	r0, r4
 8009712:	f7f8 f8ef 	bl	80018f4 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8009716:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009718:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 800971a:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800971e:	6825      	ldr	r5, [r4, #0]
 8009720:	4319      	orrs	r1, r3
 8009722:	69e3      	ldr	r3, [r4, #28]
 8009724:	68a8      	ldr	r0, [r5, #8]
 8009726:	4319      	orrs	r1, r3
 8009728:	4b2c      	ldr	r3, [pc, #176]	@ (80097dc <HAL_OSPI_Init+0xe4>)
  hospi->Timeout = Timeout;
 800972a:	65a2      	str	r2, [r4, #88]	@ 0x58
      MODIFY_REG(hospi->Instance->DCR1,
 800972c:	4003      	ands	r3, r0
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800972e:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->DCR1,
 8009730:	4319      	orrs	r1, r3
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	3b01      	subs	r3, #1
 8009736:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800973a:	6963      	ldr	r3, [r4, #20]
 800973c:	3b01      	subs	r3, #1
 800973e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8009742:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009744:	68eb      	ldr	r3, [r5, #12]
 8009746:	6a21      	ldr	r1, [r4, #32]
 8009748:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800974c:	430b      	orrs	r3, r1
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800974e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009750:	60eb      	str	r3, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009752:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009754:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009758:	6861      	ldr	r1, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800975a:	612b      	str	r3, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800975c:	3901      	subs	r1, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800975e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009760:	616b      	str	r3, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009768:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800976c:	2120      	movs	r1, #32
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800976e:	602b      	str	r3, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009770:	4633      	mov	r3, r6
 8009772:	9200      	str	r2, [sp, #0]
 8009774:	463a      	mov	r2, r7
 8009776:	f7ff ff97 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800977a:	bb48      	cbnz	r0, 80097d0 <HAL_OSPI_Init+0xd8>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009780:	68d9      	ldr	r1, [r3, #12]
 8009782:	3a01      	subs	r2, #1
 8009784:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8009788:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800978a:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800978c:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009794:	430a      	orrs	r2, r1
 8009796:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009798:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 800979c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 80097a0:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
 80097a4:	4302      	orrs	r2, r0
 80097a6:	430a      	orrs	r2, r1
 80097a8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        __HAL_OSPI_ENABLE(hospi);
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80097b4:	69a2      	ldr	r2, [r4, #24]
 80097b6:	2a02      	cmp	r2, #2
 80097b8:	d103      	bne.n	80097c2 <HAL_OSPI_Init+0xca>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	f042 0202 	orr.w	r2, r2, #2
 80097c0:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80097c2:	68e3      	ldr	r3, [r4, #12]
 80097c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097c8:	d104      	bne.n	80097d4 <HAL_OSPI_Init+0xdc>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80097ca:	2301      	movs	r3, #1
 80097cc:	6523      	str	r3, [r4, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80097ce:	2000      	movs	r0, #0
}
 80097d0:	b003      	add	sp, #12
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hospi->State = HAL_OSPI_STATE_READY;
 80097d4:	2302      	movs	r3, #2
 80097d6:	e7f9      	b.n	80097cc <HAL_OSPI_Init+0xd4>
    status = HAL_ERROR;
 80097d8:	2001      	movs	r0, #1
 80097da:	e7f9      	b.n	80097d0 <HAL_OSPI_Init+0xd8>
 80097dc:	f8e0f8f4 	.word	0xf8e0f8f4

080097e0 <HAL_OSPI_DeInit>:
{
 80097e0:	b510      	push	{r4, lr}
  if (hospi == NULL)
 80097e2:	4604      	mov	r4, r0
 80097e4:	b168      	cbz	r0, 8009802 <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	f022 0202 	bic.w	r2, r2, #2
 80097f6:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 80097f8:	f7f8 f9aa 	bl	8001b50 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 80097fc:	2000      	movs	r0, #0
 80097fe:	6520      	str	r0, [r4, #80]	@ 0x50
}
 8009800:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8009802:	2001      	movs	r0, #1
 8009804:	e7fc      	b.n	8009800 <HAL_OSPI_DeInit+0x20>

08009806 <HAL_OSPI_Command>:
{
 8009806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009808:	4604      	mov	r4, r0
 800980a:	460d      	mov	r5, r1
 800980c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800980e:	f7fe fcf7 	bl	8008200 <HAL_GetTick>
  state = hospi->State;
 8009812:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 8009814:	4606      	mov	r6, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8009816:	2b02      	cmp	r3, #2
 8009818:	d107      	bne.n	800982a <HAL_OSPI_Command+0x24>
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009820:	d109      	bne.n	8009836 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009822:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8009824:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009826:	6563      	str	r3, [r4, #84]	@ 0x54
 8009828:	e01f      	b.n	800986a <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800982a:	2b14      	cmp	r3, #20
 800982c:	d11f      	bne.n	800986e <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009832:	2b01      	cmp	r3, #1
 8009834:	d8f5      	bhi.n	8009822 <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009836:	4633      	mov	r3, r6
 8009838:	2200      	movs	r2, #0
 800983a:	2120      	movs	r1, #32
 800983c:	4620      	mov	r0, r4
 800983e:	9700      	str	r7, [sp, #0]
 8009840:	f7ff ff32 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009844:	b988      	cbnz	r0, 800986a <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009846:	6560      	str	r0, [r4, #84]	@ 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8009848:	4629      	mov	r1, r5
 800984a:	4620      	mov	r0, r4
 800984c:	f7ff fe48 	bl	80094e0 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8009850:	b958      	cbnz	r0, 800986a <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8009852:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8009854:	b99b      	cbnz	r3, 800987e <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009856:	4633      	mov	r3, r6
 8009858:	2201      	movs	r2, #1
 800985a:	2102      	movs	r1, #2
 800985c:	4620      	mov	r0, r4
 800985e:	9700      	str	r7, [sp, #0]
 8009860:	f7ff ff22 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	2202      	movs	r2, #2
 8009868:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800986a:	b003      	add	sp, #12
 800986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800986e:	2b24      	cmp	r3, #36	@ 0x24
 8009870:	d1d7      	bne.n	8009822 <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009872:	682b      	ldr	r3, [r5, #0]
 8009874:	f023 0302 	bic.w	r3, r3, #2
 8009878:	2b01      	cmp	r3, #1
 800987a:	d1d2      	bne.n	8009822 <HAL_OSPI_Command+0x1c>
 800987c:	e7db      	b.n	8009836 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	b90b      	cbnz	r3, 8009886 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009882:	2304      	movs	r3, #4
 8009884:	e005      	b.n	8009892 <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8009886:	2b01      	cmp	r3, #1
 8009888:	d105      	bne.n	8009896 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800988a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800988c:	2b24      	cmp	r3, #36	@ 0x24
 800988e:	d0f8      	beq.n	8009882 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8009890:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009892:	6523      	str	r3, [r4, #80]	@ 0x50
 8009894:	e7e9      	b.n	800986a <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009896:	2b02      	cmp	r3, #2
 8009898:	d1e7      	bne.n	800986a <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800989a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800989c:	2b14      	cmp	r3, #20
 800989e:	d0f0      	beq.n	8009882 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80098a0:	2324      	movs	r3, #36	@ 0x24
 80098a2:	e7f6      	b.n	8009892 <HAL_OSPI_Command+0x8c>

080098a4 <HAL_OSPI_HyperbusCfg>:
{
 80098a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a6:	4604      	mov	r4, r0
 80098a8:	4616      	mov	r6, r2
 80098aa:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80098ac:	f7fe fca8 	bl	8008200 <HAL_GetTick>
  state = hospi->State;
 80098b0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80098b2:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80098b4:	3a01      	subs	r2, #1
 80098b6:	2a01      	cmp	r2, #1
 80098b8:	d816      	bhi.n	80098e8 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80098ba:	2200      	movs	r2, #0
 80098bc:	2120      	movs	r1, #32
 80098be:	4620      	mov	r0, r4
 80098c0:	9600      	str	r6, [sp, #0]
 80098c2:	f7ff fef1 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80098c6:	b968      	cbnz	r0, 80098e4 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 80098ce:	430b      	orrs	r3, r1
 80098d0:	6829      	ldr	r1, [r5, #0]
 80098d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80098d6:	6869      	ldr	r1, [r5, #4]
 80098d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80098dc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 80098e0:	2302      	movs	r3, #2
 80098e2:	6523      	str	r3, [r4, #80]	@ 0x50
}
 80098e4:	b002      	add	sp, #8
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80098e8:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80098ea:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80098ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80098ee:	e7f9      	b.n	80098e4 <HAL_OSPI_HyperbusCfg+0x40>

080098f0 <HAL_OSPI_HyperbusCmd>:
{
 80098f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f2:	4604      	mov	r4, r0
 80098f4:	4616      	mov	r6, r2
 80098f6:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80098f8:	f7fe fc82 	bl	8008200 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80098fc:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80098fe:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8009900:	2a02      	cmp	r2, #2
 8009902:	d127      	bne.n	8009954 <HAL_OSPI_HyperbusCmd+0x64>
 8009904:	68e2      	ldr	r2, [r4, #12]
 8009906:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800990a:	d123      	bne.n	8009954 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800990c:	2200      	movs	r2, #0
 800990e:	2120      	movs	r1, #32
 8009910:	4620      	mov	r0, r4
 8009912:	9600      	str	r6, [sp, #0]
 8009914:	f7ff fec8 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009918:	b9d0      	cbnz	r0, 8009950 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800991a:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800991c:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009924:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800992c:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800992e:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8009930:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8009932:	692a      	ldr	r2, [r5, #16]
 8009934:	430a      	orrs	r2, r1
 8009936:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800993a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 800993e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8009942:	68ea      	ldr	r2, [r5, #12]
 8009944:	3a01      	subs	r2, #1
 8009946:	641a      	str	r2, [r3, #64]	@ 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8009948:	686a      	ldr	r2, [r5, #4]
 800994a:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800994c:	2304      	movs	r3, #4
 800994e:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8009950:	b002      	add	sp, #8
 8009952:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009954:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8009956:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009958:	6563      	str	r3, [r4, #84]	@ 0x54
 800995a:	e7f9      	b.n	8009950 <HAL_OSPI_HyperbusCmd+0x60>

0800995c <HAL_OSPI_Transmit>:
{
 800995c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009960:	4604      	mov	r4, r0
 8009962:	4688      	mov	r8, r1
 8009964:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8009966:	f7fe fc4b 	bl	8008200 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800996a:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800996c:	4605      	mov	r5, r0
  if (pData == NULL)
 800996e:	f1b8 0f00 	cmp.w	r8, #0
 8009972:	d103      	bne.n	800997c <HAL_OSPI_Transmit+0x20>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009974:	2308      	movs	r3, #8
    status = HAL_ERROR;
 8009976:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009978:	6563      	str	r3, [r4, #84]	@ 0x54
 800997a:	e02e      	b.n	80099da <HAL_OSPI_Transmit+0x7e>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800997c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800997e:	2b04      	cmp	r3, #4
 8009980:	d12e      	bne.n	80099e0 <HAL_OSPI_Transmit+0x84>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 8009984:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009988:	3301      	adds	r3, #1
 800998a:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800998c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800998e:	6463      	str	r3, [r4, #68]	@ 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8009996:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8009998:	462b      	mov	r3, r5
 800999a:	2201      	movs	r2, #1
 800999c:	2104      	movs	r1, #4
 800999e:	4620      	mov	r0, r4
 80099a0:	9600      	str	r6, [sp, #0]
 80099a2:	f7ff fe81 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80099a6:	b9c0      	cbnz	r0, 80099da <HAL_OSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80099a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hospi->pBuffPtr++;
 80099b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099b2:	3301      	adds	r3, #1
 80099b4:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 80099b6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80099b8:	3b01      	subs	r3, #1
 80099ba:	64a3      	str	r3, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80099bc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1ea      	bne.n	8009998 <HAL_OSPI_Transmit+0x3c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80099c2:	462b      	mov	r3, r5
 80099c4:	2201      	movs	r2, #1
 80099c6:	2102      	movs	r1, #2
 80099c8:	4620      	mov	r0, r4
 80099ca:	9600      	str	r6, [sp, #0]
 80099cc:	f7ff fe6c 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80099d0:	b918      	cbnz	r0, 80099da <HAL_OSPI_Transmit+0x7e>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80099d2:	2302      	movs	r3, #2
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80099d8:	6523      	str	r3, [r4, #80]	@ 0x50
}
 80099da:	b002      	add	sp, #8
 80099dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80099e0:	2310      	movs	r3, #16
 80099e2:	e7c8      	b.n	8009976 <HAL_OSPI_Transmit+0x1a>

080099e4 <HAL_OSPI_Receive>:
{
 80099e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80099e8:	4604      	mov	r4, r0
 80099ea:	4616      	mov	r6, r2
 80099ec:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80099ee:	f7fe fc07 	bl	8008200 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80099f2:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80099f4:	4607      	mov	r7, r0
  uint32_t addr_reg = hospi->Instance->AR;
 80099f6:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80099f8:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
 80099fc:	f1b8 0f00 	cmp.w	r8, #0
 8009a00:	d103      	bne.n	8009a0a <HAL_OSPI_Receive+0x26>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009a02:	2308      	movs	r3, #8
    status = HAL_ERROR;
 8009a04:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009a06:	6563      	str	r3, [r4, #84]	@ 0x54
 8009a08:	e035      	b.n	8009a76 <HAL_OSPI_Receive+0x92>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009a0a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d13d      	bne.n	8009a8c <HAL_OSPI_Receive+0xa8>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009a10:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 8009a12:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009a16:	3301      	adds	r3, #1
 8009a18:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009a1a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a1c:	6463      	str	r3, [r4, #68]	@ 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009a1e:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009a20:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009a22:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009a26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009a2a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8009a2e:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009a30:	d124      	bne.n	8009a7c <HAL_OSPI_Receive+0x98>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8009a32:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8009a34:	463b      	mov	r3, r7
 8009a36:	2201      	movs	r2, #1
 8009a38:	2106      	movs	r1, #6
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	9600      	str	r6, [sp, #0]
 8009a3e:	f7ff fe33 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009a42:	b9c0      	cbnz	r0, 8009a76 <HAL_OSPI_Receive+0x92>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8009a44:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 8009a48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a4a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009a4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a4e:	3301      	adds	r3, #1
 8009a50:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 8009a52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a54:	3b01      	subs	r3, #1
 8009a56:	64a3      	str	r3, [r4, #72]	@ 0x48
      } while(hospi->XferCount > 0U);
 8009a58:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1ea      	bne.n	8009a34 <HAL_OSPI_Receive+0x50>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009a5e:	463b      	mov	r3, r7
 8009a60:	2201      	movs	r2, #1
 8009a62:	2102      	movs	r1, #2
 8009a64:	4620      	mov	r0, r4
 8009a66:	9600      	str	r6, [sp, #0]
 8009a68:	f7ff fe1e 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009a6c:	b918      	cbnz	r0, 8009a76 <HAL_OSPI_Receive+0x92>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009a6e:	2302      	movs	r3, #2
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8009a74:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8009a76:	b002      	add	sp, #8
 8009a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8009a7c:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
 8009a80:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8009a84:	d1d5      	bne.n	8009a32 <HAL_OSPI_Receive+0x4e>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8009a86:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 8009a8a:	e7d3      	b.n	8009a34 <HAL_OSPI_Receive+0x50>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009a8c:	2310      	movs	r3, #16
 8009a8e:	e7b9      	b.n	8009a04 <HAL_OSPI_Receive+0x20>

08009a90 <HAL_OSPI_AutoPolling>:
{
 8009a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	4604      	mov	r4, r0
 8009a96:	460d      	mov	r5, r1
 8009a98:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8009a9a:	f7fe fbb1 	bl	8008200 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8009a9e:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009aa0:	4681      	mov	r9, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8009aa2:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8009aa4:	f8d3 8110 	ldr.w	r8, [r3, #272]	@ 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8009aa8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d13c      	bne.n	8009b28 <HAL_OSPI_AutoPolling+0x98>
 8009aae:	68eb      	ldr	r3, [r5, #12]
 8009ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ab4:	d138      	bne.n	8009b28 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2120      	movs	r1, #32
 8009abc:	4620      	mov	r0, r4
 8009abe:	9600      	str	r6, [sp, #0]
 8009ac0:	f7ff fdf2 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009ac4:	bb28      	cbnz	r0, 8009b12 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	682a      	ldr	r2, [r5, #0]
 8009aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8009ace:	686a      	ldr	r2, [r5, #4]
 8009ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8009ad4:	692a      	ldr	r2, [r5, #16]
 8009ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8009ada:	6819      	ldr	r1, [r3, #0]
 8009adc:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 8009ae0:	f021 5143 	bic.w	r1, r1, #817889280	@ 0x30c00000
 8009ae4:	4302      	orrs	r2, r0
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8009aec:	601a      	str	r2, [r3, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009aee:	68e2      	ldr	r2, [r4, #12]
 8009af0:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8009af4:	d110      	bne.n	8009b18 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8009af6:	649f      	str	r7, [r3, #72]	@ 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8009af8:	464b      	mov	r3, r9
 8009afa:	2201      	movs	r2, #1
 8009afc:	2108      	movs	r1, #8
 8009afe:	4620      	mov	r0, r4
 8009b00:	9600      	str	r6, [sp, #0]
 8009b02:	f7ff fdd1 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009b06:	b920      	cbnz	r0, 8009b12 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8009b0e:	2302      	movs	r3, #2
 8009b10:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8009b12:	b003      	add	sp, #12
 8009b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8009b18:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009b1c:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 8009b20:	d1e9      	bne.n	8009af6 <HAL_OSPI_AutoPolling+0x66>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8009b22:	f8c3 8110 	str.w	r8, [r3, #272]	@ 0x110
 8009b26:	e7e7      	b.n	8009af8 <HAL_OSPI_AutoPolling+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009b28:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8009b2a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009b2c:	6563      	str	r3, [r4, #84]	@ 0x54
 8009b2e:	e7f0      	b.n	8009b12 <HAL_OSPI_AutoPolling+0x82>

08009b30 <HAL_OSPI_MemoryMapped>:
{
 8009b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8009b36:	f7fe fb63 	bl	8008200 <HAL_GetTick>
 8009b3a:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009b3c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8009b3e:	2a04      	cmp	r2, #4
 8009b40:	d121      	bne.n	8009b86 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009b42:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009b44:	2120      	movs	r1, #32
 8009b46:	4620      	mov	r0, r4
 8009b48:	9200      	str	r2, [sp, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f7ff fdac 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009b50:	b9b8      	cbnz	r0, 8009b82 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8009b52:	6829      	ldr	r1, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8009b54:	2388      	movs	r3, #136	@ 0x88
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8009b56:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8009b58:	2908      	cmp	r1, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8009b5a:	6523      	str	r3, [r4, #80]	@ 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8009b5c:	d108      	bne.n	8009b70 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8009b5e:	686b      	ldr	r3, [r5, #4]
 8009b60:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8009b64:	2310      	movs	r3, #16
 8009b66:	6253      	str	r3, [r2, #36]	@ 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8009b68:	6813      	ldr	r3, [r2, #0]
 8009b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b6e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8009b70:	6813      	ldr	r3, [r2, #0]
 8009b72:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8009b76:	f023 0308 	bic.w	r3, r3, #8
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8009b80:	6013      	str	r3, [r2, #0]
}
 8009b82:	b003      	add	sp, #12
 8009b84:	bd30      	pop	{r4, r5, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009b86:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8009b88:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009b8a:	6563      	str	r3, [r4, #84]	@ 0x54
 8009b8c:	e7f9      	b.n	8009b82 <HAL_OSPI_MemoryMapped+0x52>

08009b8e <HAL_OSPI_Abort>:
{
 8009b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b90:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009b92:	f7fe fb35 	bl	8008200 <HAL_GetTick>
 8009b96:	4605      	mov	r5, r0
  state = hospi->State;
 8009b98:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8009b9a:	f013 0f0c 	tst.w	r3, #12
 8009b9e:	d032      	beq.n	8009c06 <HAL_OSPI_Abort+0x78>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	0751      	lsls	r1, r2, #29
 8009ba6:	d507      	bpl.n	8009bb8 <HAL_OSPI_Abort+0x2a>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8009ba8:	681a      	ldr	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8009baa:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8009bac:	f022 0204 	bic.w	r2, r2, #4
 8009bb0:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8009bb2:	f7ff fc5d 	bl	8009470 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8009bb6:	bb00      	cbnz	r0, 8009bfa <HAL_OSPI_Abort+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8009bb8:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6a1a      	ldr	r2, [r3, #32]
 8009bbe:	0692      	lsls	r2, r2, #26
 8009bc0:	d51e      	bpl.n	8009c00 <HAL_OSPI_Abort+0x72>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8009bc2:	681a      	ldr	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8009bc4:	2102      	movs	r1, #2
 8009bc6:	4620      	mov	r0, r4
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8009bc8:	f042 0202 	orr.w	r2, r2, #2
 8009bcc:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8009bce:	2201      	movs	r2, #1
 8009bd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	f7ff fd67 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009bda:	b960      	cbnz	r0, 8009bf6 <HAL_OSPI_Abort+0x68>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	2602      	movs	r6, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009be0:	4602      	mov	r2, r0
 8009be2:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009be4:	625e      	str	r6, [r3, #36]	@ 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009be6:	4620      	mov	r0, r4
 8009be8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	462b      	mov	r3, r5
 8009bee:	f7ff fd5b 	bl	80096a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009bf2:	b900      	cbnz	r0, 8009bf6 <HAL_OSPI_Abort+0x68>
          hospi->State = HAL_OSPI_STATE_READY;
 8009bf4:	6526      	str	r6, [r4, #80]	@ 0x50
}
 8009bf6:	b002      	add	sp, #8
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8009bfa:	2304      	movs	r3, #4
 8009bfc:	6563      	str	r3, [r4, #84]	@ 0x54
 8009bfe:	e7dc      	b.n	8009bba <HAL_OSPI_Abort+0x2c>
      hospi->State = HAL_OSPI_STATE_READY;
 8009c00:	2302      	movs	r3, #2
 8009c02:	6523      	str	r3, [r4, #80]	@ 0x50
 8009c04:	e7f7      	b.n	8009bf6 <HAL_OSPI_Abort+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009c06:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8009c08:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009c0a:	6563      	str	r3, [r4, #84]	@ 0x54
 8009c0c:	e7f3      	b.n	8009bf6 <HAL_OSPI_Abort+0x68>
	...

08009c10 <HAL_OSPIM_Config>:
    other_instance = 1U;
 8009c10:	4b96      	ldr	r3, [pc, #600]	@ (8009e6c <HAL_OSPIM_Config+0x25c>)
{
 8009c12:	468c      	mov	ip, r1
  if (hospi->Instance == OCTOSPI1)
 8009c14:	6802      	ldr	r2, [r0, #0]
{
 8009c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 1U;
 8009c1a:	429a      	cmp	r2, r3
{
 8009c1c:	b091      	sub	sp, #68	@ 0x44
 8009c1e:	f04f 0701 	mov.w	r7, #1
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8009c22:	f04f 0400 	mov.w	r4, #0
    other_instance = 1U;
 8009c26:	bf15      	itete	ne
 8009c28:	f04f 0a00 	movne.w	sl, #0
 8009c2c:	f04f 0a01 	moveq.w	sl, #1
 8009c30:	2601      	movne	r6, #1
 8009c32:	2600      	moveq	r6, #0
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009c34:	ab04      	add	r3, sp, #16
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
    {
      reg = OCTOSPIM->PCR[index];
 8009c36:	f8df e238 	ldr.w	lr, [pc, #568]	@ 8009e70 <HAL_OSPIM_Config+0x260>
    if (instance_nb == 2U)
 8009c3a:	2f02      	cmp	r7, #2
    cfg->IOHighPort = 0U;
 8009c3c:	611c      	str	r4, [r3, #16]
    cfg->DQSPort    = 0U;
 8009c3e:	e9c3 4400 	strd	r4, r4, [r3]
    cfg->IOLowPort  = 0U;
 8009c42:	e9c3 4402 	strd	r4, r4, [r3, #8]
    if (instance_nb == 2U)
 8009c46:	f040 810d 	bne.w	8009e64 <HAL_OSPIM_Config+0x254>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8009c4a:	4a89      	ldr	r2, [pc, #548]	@ (8009e70 <HAL_OSPIM_Config+0x260>)
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8009c4c:	4889      	ldr	r0, [pc, #548]	@ (8009e74 <HAL_OSPIM_Config+0x264>)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8009c4e:	6812      	ldr	r2, [r2, #0]
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8009c50:	f012 0f01 	tst.w	r2, #1
 8009c54:	bf18      	it	ne
 8009c56:	f44f 7000 	movne.w	r0, #512	@ 0x200
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009c5a:	2500      	movs	r5, #0
      reg = OCTOSPIM->PCR[index];
 8009c5c:	eb0e 0285 	add.w	r2, lr, r5, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8009c60:	1c69      	adds	r1, r5, #1
      reg = OCTOSPIM->PCR[index];
 8009c62:	6852      	ldr	r2, [r2, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8009c64:	07d5      	lsls	r5, r2, #31
 8009c66:	d504      	bpl.n	8009c72 <HAL_OSPIM_Config+0x62>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8009c68:	ea82 0500 	eor.w	r5, r2, r0
 8009c6c:	07ad      	lsls	r5, r5, #30
          cfg->ClkPort = index+1U;
 8009c6e:	bf58      	it	pl
 8009c70:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8009c72:	06d5      	lsls	r5, r2, #27
 8009c74:	d504      	bpl.n	8009c80 <HAL_OSPIM_Config+0x70>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8009c76:	ea82 0500 	eor.w	r5, r2, r0
 8009c7a:	06ad      	lsls	r5, r5, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8009c7c:	bf58      	it	pl
 8009c7e:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8009c80:	05d5      	lsls	r5, r2, #23
 8009c82:	d504      	bpl.n	8009c8e <HAL_OSPIM_Config+0x7e>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8009c84:	ea82 0500 	eor.w	r5, r2, r0
 8009c88:	05ad      	lsls	r5, r5, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8009c8a:	bf58      	it	pl
 8009c8c:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8009c8e:	03d5      	lsls	r5, r2, #15
 8009c90:	d50a      	bpl.n	8009ca8 <HAL_OSPIM_Config+0x98>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8009c92:	ea82 0500 	eor.w	r5, r2, r0
 8009c96:	036d      	lsls	r5, r5, #13
 8009c98:	d406      	bmi.n	8009ca8 <HAL_OSPIM_Config+0x98>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8009c9a:	0395      	lsls	r5, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8009c9c:	bf54      	ite	pl
 8009c9e:	f441 3580 	orrpl.w	r5, r1, #65536	@ 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8009ca2:	f041 7580 	orrmi.w	r5, r1, #16777216	@ 0x1000000
 8009ca6:	60dd      	str	r5, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8009ca8:	01d5      	lsls	r5, r2, #7
 8009caa:	d50a      	bpl.n	8009cc2 <HAL_OSPIM_Config+0xb2>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8009cac:	ea82 0500 	eor.w	r5, r2, r0
 8009cb0:	016d      	lsls	r5, r5, #5
 8009cb2:	d406      	bmi.n	8009cc2 <HAL_OSPIM_Config+0xb2>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8009cb4:	0195      	lsls	r5, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8009cb6:	bf54      	ite	pl
 8009cb8:	f441 3280 	orrpl.w	r2, r1, #65536	@ 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8009cbc:	f041 7280 	orrmi.w	r2, r1, #16777216	@ 0x1000000
 8009cc0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009cc2:	2902      	cmp	r1, #2
 8009cc4:	f04f 0501 	mov.w	r5, #1
 8009cc8:	d1c8      	bne.n	8009c5c <HAL_OSPIM_Config+0x4c>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009cca:	42af      	cmp	r7, r5
 8009ccc:	f103 0318 	add.w	r3, r3, #24
 8009cd0:	f000 80c6 	beq.w	8009e60 <HAL_OSPIM_Config+0x250>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009cd4:	4b65      	ldr	r3, [pc, #404]	@ (8009e6c <HAL_OSPIM_Config+0x25c>)
 8009cd6:	681f      	ldr	r7, [r3, #0]
 8009cd8:	402f      	ands	r7, r5
 8009cda:	d004      	beq.n	8009ce6 <HAL_OSPIM_Config+0xd6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009cdc:	681a      	ldr	r2, [r3, #0]
      ospi_enabled |= 0x1U;
 8009cde:	462f      	mov	r7, r5
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009ce0:	f022 0201 	bic.w	r2, r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009ce6:	4b64      	ldr	r3, [pc, #400]	@ (8009e78 <HAL_OSPIM_Config+0x268>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	07d1      	lsls	r1, r2, #31
 8009cec:	f140 80bc 	bpl.w	8009e68 <HAL_OSPIM_Config+0x258>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	f022 0201 	bic.w	r2, r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8009cf8:	f047 0302 	orr.w	r3, r7, #2
 8009cfc:	9303      	str	r3, [sp, #12]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009cfe:	ab10      	add	r3, sp, #64	@ 0x40
 8009d00:	2118      	movs	r1, #24
 8009d02:	fb01 3106 	mla	r1, r1, r6, r3
 8009d06:	4b5a      	ldr	r3, [pc, #360]	@ (8009e70 <HAL_OSPIM_Config+0x260>)
 8009d08:	f851 2c28 	ldr.w	r2, [r1, #-40]
 8009d0c:	3a01      	subs	r2, #1
 8009d0e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009d12:	6850      	ldr	r0, [r2, #4]
 8009d14:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8009d18:	6050      	str	r0, [r2, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	07d2      	lsls	r2, r2, #31
 8009d1e:	f140 80af 	bpl.w	8009e80 <HAL_OSPIM_Config+0x270>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8009d2a:	f1ba 0f00 	cmp.w	sl, #0
 8009d2e:	d02c      	beq.n	8009d8a <HAL_OSPIM_Config+0x17a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8009d30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d32:	3a01      	subs	r2, #1
 8009d34:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009d38:	6851      	ldr	r1, [r2, #4]
 8009d3a:	f041 0102 	orr.w	r1, r1, #2
 8009d3e:	6051      	str	r1, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009d40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d42:	b132      	cbz	r2, 8009d52 <HAL_OSPIM_Config+0x142>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8009d44:	3a01      	subs	r2, #1
 8009d46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	f042 0220 	orr.w	r2, r2, #32
 8009d50:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d54:	b15b      	cbz	r3, 8009d6e <HAL_OSPIM_Config+0x15e>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8009d56:	3b01      	subs	r3, #1
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8009d62:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009d6c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d70:	b15b      	cbz	r3, 8009d8a <HAL_OSPIM_Config+0x17a>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8009d72:	3b01      	subs	r3, #1
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8009d7e:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009d88:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009d8a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d8e:	f04f 0918 	mov.w	r9, #24
 8009d92:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009d96:	9302      	str	r3, [sp, #8]
 8009d98:	ab10      	add	r3, sp, #64	@ 0x40
 8009d9a:	9902      	ldr	r1, [sp, #8]
 8009d9c:	fb09 390a 	mla	r9, r9, sl, r3
 8009da0:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8009e70 <HAL_OSPIM_Config+0x260>
 8009da4:	f859 8c30 	ldr.w	r8, [r9, #-48]
 8009da8:	f859 3c2c 	ldr.w	r3, [r9, #-44]
 8009dac:	4541      	cmp	r1, r8
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009dae:	f859 4c24 	ldr.w	r4, [r9, #-36]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009db2:	9301      	str	r3, [sp, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009db4:	f859 0c20 	ldr.w	r0, [r9, #-32]
 8009db8:	f8dc 3010 	ldr.w	r3, [ip, #16]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009dbc:	9901      	ldr	r1, [sp, #4]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009dbe:	e9dc e202 	ldrd	lr, r2, [ip, #8]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009dc2:	f000 809a 	beq.w	8009efa <HAL_OSPIM_Config+0x2ea>
 8009dc6:	42a9      	cmp	r1, r5
 8009dc8:	d008      	beq.n	8009ddc <HAL_OSPIM_Config+0x1cc>
 8009dca:	f859 9c28 	ldr.w	r9, [r9, #-40]
 8009dce:	45f1      	cmp	r9, lr
 8009dd0:	d004      	beq.n	8009ddc <HAL_OSPIM_Config+0x1cc>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009dd2:	42a2      	cmp	r2, r4
 8009dd4:	d002      	beq.n	8009ddc <HAL_OSPIM_Config+0x1cc>
 8009dd6:	4298      	cmp	r0, r3
 8009dd8:	f040 809e 	bne.w	8009f18 <HAL_OSPIM_Config+0x308>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009ddc:	f108 38ff 	add.w	r8, r8, #4294967295
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009de0:	9901      	ldr	r1, [sp, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009de2:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
 8009de6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8009dea:	f029 0901 	bic.w	r9, r9, #1
 8009dee:	f8c8 9004 	str.w	r9, [r8, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009df2:	b141      	cbz	r1, 8009e06 <HAL_OSPIM_Config+0x1f6>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009df4:	3901      	subs	r1, #1
 8009df6:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8009dfa:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8009dfe:	f028 0810 	bic.w	r8, r8, #16
 8009e02:	f8c1 8004 	str.w	r8, [r1, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009e06:	2118      	movs	r1, #24
 8009e08:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8009e0c:	fb01 8a0a 	mla	sl, r1, sl, r8
 8009e10:	f85a 1c28 	ldr.w	r1, [sl, #-40]
 8009e14:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8009e18:	4918      	ldr	r1, [pc, #96]	@ (8009e7c <HAL_OSPIM_Config+0x26c>)
 8009e1a:	4441      	add	r1, r8
 8009e1c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8009e20:	f428 7880 	bic.w	r8, r8, #256	@ 0x100
 8009e24:	f8c1 8004 	str.w	r8, [r1, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009e28:	b15c      	cbz	r4, 8009e42 <HAL_OSPIM_Config+0x232>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009e2a:	3c01      	subs	r4, #1
 8009e2c:	f004 0401 	and.w	r4, r4, #1
 8009e30:	00a4      	lsls	r4, r4, #2
 8009e32:	f104 44a4 	add.w	r4, r4, #1375731712	@ 0x52000000
 8009e36:	f504 4434 	add.w	r4, r4, #46080	@ 0xb400
 8009e3a:	6861      	ldr	r1, [r4, #4]
 8009e3c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009e40:	6061      	str	r1, [r4, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d068      	beq.n	8009f18 <HAL_OSPIM_Config+0x308>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009e46:	3801      	subs	r0, #1
 8009e48:	f000 0001 	and.w	r0, r0, #1
 8009e4c:	0080      	lsls	r0, r0, #2
 8009e4e:	f100 40a4 	add.w	r0, r0, #1375731712	@ 0x52000000
 8009e52:	f500 4034 	add.w	r0, r0, #46080	@ 0xb400
 8009e56:	6841      	ldr	r1, [r0, #4]
 8009e58:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8009e5c:	6041      	str	r1, [r0, #4]
 8009e5e:	e05b      	b.n	8009f18 <HAL_OSPIM_Config+0x308>
 8009e60:	460f      	mov	r7, r1
 8009e62:	e6ea      	b.n	8009c3a <HAL_OSPIM_Config+0x2a>
  uint32_t value = 0U;
 8009e64:	2000      	movs	r0, #0
 8009e66:	e6f8      	b.n	8009c5a <HAL_OSPIM_Config+0x4a>
 8009e68:	9703      	str	r7, [sp, #12]
 8009e6a:	e748      	b.n	8009cfe <HAL_OSPIM_Config+0xee>
 8009e6c:	52005000 	.word	0x52005000
 8009e70:	5200b400 	.word	0x5200b400
 8009e74:	04040222 	.word	0x04040222
 8009e78:	5200a000 	.word	0x5200a000
 8009e7c:	5200b3fc 	.word	0x5200b3fc
      if (IOM_cfg[instance].ClkPort != 0U)
 8009e80:	f851 2c30 	ldr.w	r2, [r1, #-48]
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	d080      	beq.n	8009d8a <HAL_OSPIM_Config+0x17a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009e88:	3a01      	subs	r2, #1
 8009e8a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009e8e:	6850      	ldr	r0, [r2, #4]
 8009e90:	f020 0001 	bic.w	r0, r0, #1
 8009e94:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009e96:	f851 2c2c 	ldr.w	r2, [r1, #-44]
 8009e9a:	b132      	cbz	r2, 8009eaa <HAL_OSPIM_Config+0x29a>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009e9c:	3a01      	subs	r2, #1
 8009e9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	f022 0210 	bic.w	r2, r2, #16
 8009ea8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009eaa:	2318      	movs	r3, #24
 8009eac:	aa10      	add	r2, sp, #64	@ 0x40
 8009eae:	fb03 2306 	mla	r3, r3, r6, r2
 8009eb2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8009eb6:	b15b      	cbz	r3, 8009ed0 <HAL_OSPIM_Config+0x2c0>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8009ec4:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009ece:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009ed0:	2318      	movs	r3, #24
 8009ed2:	aa10      	add	r2, sp, #64	@ 0x40
 8009ed4:	fb03 2306 	mla	r3, r3, r6, r2
 8009ed8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f43f af54 	beq.w	8009d8a <HAL_OSPIM_Config+0x17a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8009eee:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009ef8:	e746      	b.n	8009d88 <HAL_OSPIM_Config+0x178>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009efa:	42a9      	cmp	r1, r5
 8009efc:	f47f af6e 	bne.w	8009ddc <HAL_OSPIM_Config+0x1cc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009f00:	42a2      	cmp	r2, r4
 8009f02:	f47f af6b 	bne.w	8009ddc <HAL_OSPIM_Config+0x1cc>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009f06:	4298      	cmp	r0, r3
 8009f08:	f47f af68 	bne.w	8009ddc <HAL_OSPIM_Config+0x1cc>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009f0c:	f8db 1000 	ldr.w	r1, [fp]
 8009f10:	f041 0101 	orr.w	r1, r1, #1
 8009f14:	f8cb 1000 	str.w	r1, [fp]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8009f18:	4c72      	ldr	r4, [pc, #456]	@ (800a0e4 <HAL_OSPIM_Config+0x4d4>)
 8009f1a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009f1e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8009f22:	f8de 1004 	ldr.w	r1, [lr, #4]
 8009f26:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8009f2a:	ea41 2146 	orr.w	r1, r1, r6, lsl #9
 8009f2e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8009f32:	f8ce 1004 	str.w	r1, [lr, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8009f36:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8009f3a:	6821      	ldr	r1, [r4, #0]
 8009f3c:	3801      	subs	r0, #1
 8009f3e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8009f42:	4288      	cmp	r0, r1
 8009f44:	d905      	bls.n	8009f52 <HAL_OSPIM_Config+0x342>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8009f46:	6821      	ldr	r1, [r4, #0]
 8009f48:	f421 017f 	bic.w	r1, r1, #16711680	@ 0xff0000
 8009f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f50:	6021      	str	r1, [r4, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8009f52:	9902      	ldr	r1, [sp, #8]
 8009f54:	f402 3c80 	and.w	ip, r2, #65536	@ 0x10000
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009f58:	6820      	ldr	r0, [r4, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8009f5a:	3901      	subs	r1, #1
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009f5c:	f010 0f01 	tst.w	r0, #1
 8009f60:	f403 3080 	and.w	r0, r3, #65536	@ 0x10000
 8009f64:	ea4f 0181 	mov.w	r1, r1, lsl #2
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8009f68:	4421      	add	r1, r4
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009f6a:	d061      	beq.n	800a030 <HAL_OSPIM_Config+0x420>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8009f6c:	684e      	ldr	r6, [r1, #4]
 8009f6e:	f026 0603 	bic.w	r6, r6, #3
 8009f72:	f046 0601 	orr.w	r6, r6, #1
 8009f76:	604e      	str	r6, [r1, #4]
      if (cfg->DQSPort != 0U)
 8009f78:	b145      	cbz	r5, 8009f8c <HAL_OSPIM_Config+0x37c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8009f7a:	3d01      	subs	r5, #1
 8009f7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009f80:	6869      	ldr	r1, [r5, #4]
 8009f82:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8009f86:	f041 0110 	orr.w	r1, r1, #16
 8009f8a:	6069      	str	r1, [r5, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009f8c:	f1bc 0f00 	cmp.w	ip, #0
 8009f90:	d02e      	beq.n	8009ff0 <HAL_OSPIM_Config+0x3e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009f92:	3a01      	subs	r2, #1
 8009f94:	f002 0201 	and.w	r2, r2, #1
 8009f98:	0092      	lsls	r2, r2, #2
 8009f9a:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8009f9e:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8009fa2:	6851      	ldr	r1, [r2, #4]
 8009fa4:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8009fa8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009fac:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009fae:	b378      	cbz	r0, 800a010 <HAL_OSPIM_Config+0x400>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8009fbc:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009fc6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009fca:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8009fcc:	b127      	cbz	r7, 8009fd8 <HAL_OSPIM_Config+0x3c8>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009fce:	4a46      	ldr	r2, [pc, #280]	@ (800a0e8 <HAL_OSPIM_Config+0x4d8>)
 8009fd0:	6813      	ldr	r3, [r2, #0]
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8009fd8:	9b03      	ldr	r3, [sp, #12]
 8009fda:	079b      	lsls	r3, r3, #30
 8009fdc:	d504      	bpl.n	8009fe8 <HAL_OSPIM_Config+0x3d8>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009fde:	4a43      	ldr	r2, [pc, #268]	@ (800a0ec <HAL_OSPIM_Config+0x4dc>)
 8009fe0:	6813      	ldr	r3, [r2, #0]
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	6013      	str	r3, [r2, #0]
}
 8009fe8:	2000      	movs	r0, #0
 8009fea:	b011      	add	sp, #68	@ 0x44
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	d0dc      	beq.n	8009fae <HAL_OSPIM_Config+0x39e>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009ff4:	3a01      	subs	r2, #1
 8009ff6:	f002 0201 	and.w	r2, r2, #1
 8009ffa:	0092      	lsls	r2, r2, #2
 8009ffc:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 800a000:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 800a004:	6851      	ldr	r1, [r2, #4]
 800a006:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800a00a:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800a00e:	e7cd      	b.n	8009fac <HAL_OSPIM_Config+0x39c>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0db      	beq.n	8009fcc <HAL_OSPIM_Config+0x3bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a014:	3b01      	subs	r3, #1
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 800a020:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a02a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a02e:	e7cc      	b.n	8009fca <HAL_OSPIM_Config+0x3ba>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a030:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800a034:	f02e 0e03 	bic.w	lr, lr, #3
 800a038:	ea4e 0e46 	orr.w	lr, lr, r6, lsl #1
 800a03c:	f04e 0e01 	orr.w	lr, lr, #1
 800a040:	f8c1 e004 	str.w	lr, [r1, #4]
      if (cfg->DQSPort != 0U)
 800a044:	b155      	cbz	r5, 800a05c <HAL_OSPIM_Config+0x44c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a046:	3d01      	subs	r5, #1
 800a048:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a04c:	6861      	ldr	r1, [r4, #4]
 800a04e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800a052:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
 800a056:	f041 0110 	orr.w	r1, r1, #16
 800a05a:	6061      	str	r1, [r4, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a05c:	f1bc 0f00 	cmp.w	ip, #0
 800a060:	d01e      	beq.n	800a0a0 <HAL_OSPIM_Config+0x490>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a062:	3a01      	subs	r2, #1
 800a064:	f002 0201 	and.w	r2, r2, #1
 800a068:	0092      	lsls	r2, r2, #2
 800a06a:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 800a06e:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 800a072:	6851      	ldr	r1, [r2, #4]
 800a074:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800a078:	ea41 4186 	orr.w	r1, r1, r6, lsl #18
 800a07c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a080:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a082:	b1f8      	cbz	r0, 800a0c4 <HAL_OSPIM_Config+0x4b4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a084:	3b01      	subs	r3, #1
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 800a090:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800a09a:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
 800a09e:	e792      	b.n	8009fc6 <HAL_OSPIM_Config+0x3b6>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	d0ee      	beq.n	800a082 <HAL_OSPIM_Config+0x472>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a0a4:	3a01      	subs	r2, #1
 800a0a6:	f002 0201 	and.w	r2, r2, #1
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 800a0b0:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 800a0b4:	6851      	ldr	r1, [r2, #4]
 800a0b6:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800a0ba:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 800a0be:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800a0c2:	e7dd      	b.n	800a080 <HAL_OSPIM_Config+0x470>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d081      	beq.n	8009fcc <HAL_OSPIM_Config+0x3bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 800a0d4:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800a0de:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800a0e2:	e7a2      	b.n	800a02a <HAL_OSPIM_Config+0x41a>
 800a0e4:	5200b400 	.word	0x5200b400
 800a0e8:	52005000 	.word	0x52005000
 800a0ec:	5200a000 	.word	0x5200a000

0800a0f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a0f0:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a0f2:	4d1d      	ldr	r5, [pc, #116]	@ (800a168 <HAL_PWREx_ConfigSupply+0x78>)
{
 800a0f4:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a0f6:	68eb      	ldr	r3, [r5, #12]
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	2b06      	cmp	r3, #6
 800a0fe:	d006      	beq.n	800a10e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a100:	68e8      	ldr	r0, [r5, #12]
 800a102:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a106:	1b00      	subs	r0, r0, r4
 800a108:	bf18      	it	ne
 800a10a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a10e:	68eb      	ldr	r3, [r5, #12]
 800a110:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a114:	4303      	orrs	r3, r0
 800a116:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800a118:	f7fe f872 	bl	8008200 <HAL_GetTick>
 800a11c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a11e:	686b      	ldr	r3, [r5, #4]
 800a120:	049b      	lsls	r3, r3, #18
 800a122:	d508      	bpl.n	800a136 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a124:	f1a4 031d 	sub.w	r3, r4, #29
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d90c      	bls.n	800a146 <HAL_PWREx_ConfigSupply+0x56>
 800a12c:	3c2d      	subs	r4, #45	@ 0x2d
 800a12e:	2c01      	cmp	r4, #1
 800a130:	d909      	bls.n	800a146 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800a132:	2000      	movs	r0, #0
 800a134:	e7ea      	b.n	800a10c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a136:	f7fe f863 	bl	8008200 <HAL_GetTick>
 800a13a:	1b80      	subs	r0, r0, r6
 800a13c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a140:	d9ed      	bls.n	800a11e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800a142:	2001      	movs	r0, #1
 800a144:	e7e2      	b.n	800a10c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800a146:	f7fe f85b 	bl	8008200 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a14a:	4d07      	ldr	r5, [pc, #28]	@ (800a168 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 800a14c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a14e:	68eb      	ldr	r3, [r5, #12]
 800a150:	f003 0311 	and.w	r3, r3, #17
 800a154:	2b11      	cmp	r3, #17
 800a156:	d0ec      	beq.n	800a132 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a158:	f7fe f852 	bl	8008200 <HAL_GetTick>
 800a15c:	1b00      	subs	r0, r0, r4
 800a15e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a162:	d9f4      	bls.n	800a14e <HAL_PWREx_ConfigSupply+0x5e>
 800a164:	e7ed      	b.n	800a142 <HAL_PWREx_ConfigSupply+0x52>
 800a166:	bf00      	nop
 800a168:	58024800 	.word	0x58024800

0800a16c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a16e:	4604      	mov	r4, r0
 800a170:	2800      	cmp	r0, #0
 800a172:	d069      	beq.n	800a248 <HAL_RCC_OscConfig+0xdc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a174:	6803      	ldr	r3, [r0, #0]
 800a176:	07d8      	lsls	r0, r3, #31
 800a178:	d453      	bmi.n	800a222 <HAL_RCC_OscConfig+0xb6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	0799      	lsls	r1, r3, #30
 800a17e:	f100 80a1 	bmi.w	800a2c4 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	06da      	lsls	r2, r3, #27
 800a186:	d51c      	bpl.n	800a1c2 <HAL_RCC_OscConfig+0x56>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a188:	4a95      	ldr	r2, [pc, #596]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a18a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a18c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a18e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a192:	2b08      	cmp	r3, #8
 800a194:	d007      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x3a>
 800a196:	2b18      	cmp	r3, #24
 800a198:	f040 80e1 	bne.w	800a35e <HAL_RCC_OscConfig+0x1f2>
 800a19c:	f001 0303 	and.w	r3, r1, #3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	f040 80dc 	bne.w	800a35e <HAL_RCC_OscConfig+0x1f2>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1a6:	6813      	ldr	r3, [r2, #0]
 800a1a8:	05db      	lsls	r3, r3, #23
 800a1aa:	d502      	bpl.n	800a1b2 <HAL_RCC_OscConfig+0x46>
 800a1ac:	69e3      	ldr	r3, [r4, #28]
 800a1ae:	2b80      	cmp	r3, #128	@ 0x80
 800a1b0:	d14a      	bne.n	800a248 <HAL_RCC_OscConfig+0xdc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1b2:	4a8b      	ldr	r2, [pc, #556]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a1b4:	6a21      	ldr	r1, [r4, #32]
 800a1b6:	68d3      	ldr	r3, [r2, #12]
 800a1b8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800a1bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a1c0:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	0719      	lsls	r1, r3, #28
 800a1c6:	f100 80f6 	bmi.w	800a3b6 <HAL_RCC_OscConfig+0x24a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	069a      	lsls	r2, r3, #26
 800a1ce:	f100 811c 	bmi.w	800a40a <HAL_RCC_OscConfig+0x29e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	075d      	lsls	r5, r3, #29
 800a1d6:	d51e      	bpl.n	800a216 <HAL_RCC_OscConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a1d8:	4d82      	ldr	r5, [pc, #520]	@ (800a3e4 <HAL_RCC_OscConfig+0x278>)
 800a1da:	682b      	ldr	r3, [r5, #0]
 800a1dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1e0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1e2:	f7fe f80d 	bl	8008200 <HAL_GetTick>
 800a1e6:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	05da      	lsls	r2, r3, #23
 800a1ec:	f140 8132 	bpl.w	800a454 <HAL_RCC_OscConfig+0x2e8>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	4d7b      	ldr	r5, [pc, #492]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	f040 8134 	bne.w	800a462 <HAL_RCC_OscConfig+0x2f6>
 800a1fa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a1fc:	f043 0301 	orr.w	r3, r3, #1
 800a200:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a202:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800a206:	f7fd fffb 	bl	8008200 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a20a:	4e75      	ldr	r6, [pc, #468]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 800a20c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a20e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800a210:	079b      	lsls	r3, r3, #30
 800a212:	f140 814c 	bpl.w	800a4ae <HAL_RCC_OscConfig+0x342>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a216:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a218:	2900      	cmp	r1, #0
 800a21a:	f040 814f 	bne.w	800a4bc <HAL_RCC_OscConfig+0x350>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800a21e:	2000      	movs	r0, #0
 800a220:	e02a      	b.n	800a278 <HAL_RCC_OscConfig+0x10c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a222:	4a6f      	ldr	r2, [pc, #444]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a224:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a226:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d005      	beq.n	800a23c <HAL_RCC_OscConfig+0xd0>
 800a230:	2b18      	cmp	r3, #24
 800a232:	d10b      	bne.n	800a24c <HAL_RCC_OscConfig+0xe0>
 800a234:	f001 0303 	and.w	r3, r1, #3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d107      	bne.n	800a24c <HAL_RCC_OscConfig+0xe0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a23c:	6813      	ldr	r3, [r2, #0]
 800a23e:	039a      	lsls	r2, r3, #14
 800a240:	d59b      	bpl.n	800a17a <HAL_RCC_OscConfig+0xe>
 800a242:	6863      	ldr	r3, [r4, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d198      	bne.n	800a17a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800a248:	2001      	movs	r0, #1
 800a24a:	e015      	b.n	800a278 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	4d64      	ldr	r5, [pc, #400]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a254:	d111      	bne.n	800a27a <HAL_RCC_OscConfig+0x10e>
 800a256:	682b      	ldr	r3, [r5, #0]
 800a258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a25c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a25e:	f7fd ffcf 	bl	8008200 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a262:	4e5f      	ldr	r6, [pc, #380]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800a264:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a266:	6833      	ldr	r3, [r6, #0]
 800a268:	039b      	lsls	r3, r3, #14
 800a26a:	d486      	bmi.n	800a17a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a26c:	f7fd ffc8 	bl	8008200 <HAL_GetTick>
 800a270:	1b40      	subs	r0, r0, r5
 800a272:	2864      	cmp	r0, #100	@ 0x64
 800a274:	d9f7      	bls.n	800a266 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800a276:	2003      	movs	r0, #3
}
 800a278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a27a:	b9a3      	cbnz	r3, 800a2a6 <HAL_RCC_OscConfig+0x13a>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a28a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a28c:	f7fd ffb8 	bl	8008200 <HAL_GetTick>
 800a290:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	039f      	lsls	r7, r3, #14
 800a296:	f57f af70 	bpl.w	800a17a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a29a:	f7fd ffb1 	bl	8008200 <HAL_GetTick>
 800a29e:	1b80      	subs	r0, r0, r6
 800a2a0:	2864      	cmp	r0, #100	@ 0x64
 800a2a2:	d9f6      	bls.n	800a292 <HAL_RCC_OscConfig+0x126>
 800a2a4:	e7e7      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	d103      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x14a>
 800a2ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	e7cf      	b.n	800a256 <HAL_RCC_OscConfig+0xea>
 800a2b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2c2:	e7cb      	b.n	800a25c <HAL_RCC_OscConfig+0xf0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2c4:	4946      	ldr	r1, [pc, #280]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a2c6:	68e2      	ldr	r2, [r4, #12]
 800a2c8:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2ca:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a2cc:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a2d0:	d003      	beq.n	800a2da <HAL_RCC_OscConfig+0x16e>
 800a2d2:	2b18      	cmp	r3, #24
 800a2d4:	d120      	bne.n	800a318 <HAL_RCC_OscConfig+0x1ac>
 800a2d6:	0780      	lsls	r0, r0, #30
 800a2d8:	d11e      	bne.n	800a318 <HAL_RCC_OscConfig+0x1ac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2da:	680b      	ldr	r3, [r1, #0]
 800a2dc:	075b      	lsls	r3, r3, #29
 800a2de:	d501      	bpl.n	800a2e4 <HAL_RCC_OscConfig+0x178>
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	d0b1      	beq.n	800a248 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2e4:	4d3e      	ldr	r5, [pc, #248]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	f023 0319 	bic.w	r3, r3, #25
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a2f0:	f7fd ff86 	bl	8008200 <HAL_GetTick>
 800a2f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2f6:	682b      	ldr	r3, [r5, #0]
 800a2f8:	075f      	lsls	r7, r3, #29
 800a2fa:	d507      	bpl.n	800a30c <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2fc:	686b      	ldr	r3, [r5, #4]
 800a2fe:	6922      	ldr	r2, [r4, #16]
 800a300:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a304:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a308:	606b      	str	r3, [r5, #4]
 800a30a:	e73a      	b.n	800a182 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a30c:	f7fd ff78 	bl	8008200 <HAL_GetTick>
 800a310:	1b80      	subs	r0, r0, r6
 800a312:	2802      	cmp	r0, #2
 800a314:	d9ef      	bls.n	800a2f6 <HAL_RCC_OscConfig+0x18a>
 800a316:	e7ae      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a318:	4d31      	ldr	r5, [pc, #196]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a31a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a31c:	b17a      	cbz	r2, 800a33e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a31e:	f023 0319 	bic.w	r3, r3, #25
 800a322:	4313      	orrs	r3, r2
 800a324:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a326:	f7fd ff6b 	bl	8008200 <HAL_GetTick>
 800a32a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	0758      	lsls	r0, r3, #29
 800a330:	d4e4      	bmi.n	800a2fc <HAL_RCC_OscConfig+0x190>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a332:	f7fd ff65 	bl	8008200 <HAL_GetTick>
 800a336:	1b80      	subs	r0, r0, r6
 800a338:	2802      	cmp	r0, #2
 800a33a:	d9f7      	bls.n	800a32c <HAL_RCC_OscConfig+0x1c0>
 800a33c:	e79b      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_HSI_DISABLE();
 800a33e:	f023 0301 	bic.w	r3, r3, #1
 800a342:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a344:	f7fd ff5c 	bl	8008200 <HAL_GetTick>
 800a348:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	0759      	lsls	r1, r3, #29
 800a34e:	f57f af18 	bpl.w	800a182 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a352:	f7fd ff55 	bl	8008200 <HAL_GetTick>
 800a356:	1b80      	subs	r0, r0, r6
 800a358:	2802      	cmp	r0, #2
 800a35a:	d9f6      	bls.n	800a34a <HAL_RCC_OscConfig+0x1de>
 800a35c:	e78b      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a35e:	69e3      	ldr	r3, [r4, #28]
 800a360:	4d1f      	ldr	r5, [pc, #124]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a362:	b1bb      	cbz	r3, 800a394 <HAL_RCC_OscConfig+0x228>
        __HAL_RCC_CSI_ENABLE();
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a36a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a36c:	f7fd ff48 	bl	8008200 <HAL_GetTick>
 800a370:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	05df      	lsls	r7, r3, #23
 800a376:	d507      	bpl.n	800a388 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a378:	68eb      	ldr	r3, [r5, #12]
 800a37a:	6a22      	ldr	r2, [r4, #32]
 800a37c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800a380:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a384:	60eb      	str	r3, [r5, #12]
 800a386:	e71c      	b.n	800a1c2 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a388:	f7fd ff3a 	bl	8008200 <HAL_GetTick>
 800a38c:	1b80      	subs	r0, r0, r6
 800a38e:	2802      	cmp	r0, #2
 800a390:	d9ef      	bls.n	800a372 <HAL_RCC_OscConfig+0x206>
 800a392:	e770      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_CSI_DISABLE();
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a39a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a39c:	f7fd ff30 	bl	8008200 <HAL_GetTick>
 800a3a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	05d8      	lsls	r0, r3, #23
 800a3a6:	f57f af0c 	bpl.w	800a1c2 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3aa:	f7fd ff29 	bl	8008200 <HAL_GetTick>
 800a3ae:	1b80      	subs	r0, r0, r6
 800a3b0:	2802      	cmp	r0, #2
 800a3b2:	d9f6      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x236>
 800a3b4:	e75f      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3b6:	6963      	ldr	r3, [r4, #20]
 800a3b8:	4d09      	ldr	r5, [pc, #36]	@ (800a3e0 <HAL_RCC_OscConfig+0x274>)
 800a3ba:	b1ab      	cbz	r3, 800a3e8 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSI_ENABLE();
 800a3bc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3be:	f043 0301 	orr.w	r3, r3, #1
 800a3c2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a3c4:	f7fd ff1c 	bl	8008200 <HAL_GetTick>
 800a3c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3ca:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3cc:	079b      	lsls	r3, r3, #30
 800a3ce:	f53f aefc 	bmi.w	800a1ca <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3d2:	f7fd ff15 	bl	8008200 <HAL_GetTick>
 800a3d6:	1b80      	subs	r0, r0, r6
 800a3d8:	2802      	cmp	r0, #2
 800a3da:	d9f6      	bls.n	800a3ca <HAL_RCC_OscConfig+0x25e>
 800a3dc:	e74b      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
 800a3de:	bf00      	nop
 800a3e0:	58024400 	.word	0x58024400
 800a3e4:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 800a3e8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3ea:	f023 0301 	bic.w	r3, r3, #1
 800a3ee:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a3f0:	f7fd ff06 	bl	8008200 <HAL_GetTick>
 800a3f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3f6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3f8:	079f      	lsls	r7, r3, #30
 800a3fa:	f57f aee6 	bpl.w	800a1ca <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3fe:	f7fd feff 	bl	8008200 <HAL_GetTick>
 800a402:	1b80      	subs	r0, r0, r6
 800a404:	2802      	cmp	r0, #2
 800a406:	d9f6      	bls.n	800a3f6 <HAL_RCC_OscConfig+0x28a>
 800a408:	e735      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a40a:	69a3      	ldr	r3, [r4, #24]
 800a40c:	4d93      	ldr	r5, [pc, #588]	@ (800a65c <HAL_RCC_OscConfig+0x4f0>)
 800a40e:	b183      	cbz	r3, 800a432 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSI48_ENABLE();
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a416:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a418:	f7fd fef2 	bl	8008200 <HAL_GetTick>
 800a41c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	0498      	lsls	r0, r3, #18
 800a422:	f53f aed6 	bmi.w	800a1d2 <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a426:	f7fd feeb 	bl	8008200 <HAL_GetTick>
 800a42a:	1b80      	subs	r0, r0, r6
 800a42c:	2802      	cmp	r0, #2
 800a42e:	d9f6      	bls.n	800a41e <HAL_RCC_OscConfig+0x2b2>
 800a430:	e721      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSI48_DISABLE();
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a438:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a43a:	f7fd fee1 	bl	8008200 <HAL_GetTick>
 800a43e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	0499      	lsls	r1, r3, #18
 800a444:	f57f aec5 	bpl.w	800a1d2 <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a448:	f7fd feda 	bl	8008200 <HAL_GetTick>
 800a44c:	1b80      	subs	r0, r0, r6
 800a44e:	2802      	cmp	r0, #2
 800a450:	d9f6      	bls.n	800a440 <HAL_RCC_OscConfig+0x2d4>
 800a452:	e710      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a454:	f7fd fed4 	bl	8008200 <HAL_GetTick>
 800a458:	1b80      	subs	r0, r0, r6
 800a45a:	2864      	cmp	r0, #100	@ 0x64
 800a45c:	f67f aec4 	bls.w	800a1e8 <HAL_RCC_OscConfig+0x7c>
 800a460:	e709      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a462:	b9b3      	cbnz	r3, 800a492 <HAL_RCC_OscConfig+0x326>
 800a464:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a466:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a46a:	f023 0301 	bic.w	r3, r3, #1
 800a46e:	672b      	str	r3, [r5, #112]	@ 0x70
 800a470:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a472:	f023 0304 	bic.w	r3, r3, #4
 800a476:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800a478:	f7fd fec2 	bl	8008200 <HAL_GetTick>
 800a47c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a47e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a480:	0798      	lsls	r0, r3, #30
 800a482:	f57f aec8 	bpl.w	800a216 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a486:	f7fd febb 	bl	8008200 <HAL_GetTick>
 800a48a:	1b80      	subs	r0, r0, r6
 800a48c:	42b8      	cmp	r0, r7
 800a48e:	d9f6      	bls.n	800a47e <HAL_RCC_OscConfig+0x312>
 800a490:	e6f1      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a492:	2b05      	cmp	r3, #5
 800a494:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a496:	d103      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x334>
 800a498:	f043 0304 	orr.w	r3, r3, #4
 800a49c:	672b      	str	r3, [r5, #112]	@ 0x70
 800a49e:	e6ac      	b.n	800a1fa <HAL_RCC_OscConfig+0x8e>
 800a4a0:	f023 0301 	bic.w	r3, r3, #1
 800a4a4:	672b      	str	r3, [r5, #112]	@ 0x70
 800a4a6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a4a8:	f023 0304 	bic.w	r3, r3, #4
 800a4ac:	e6a8      	b.n	800a200 <HAL_RCC_OscConfig+0x94>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ae:	f7fd fea7 	bl	8008200 <HAL_GetTick>
 800a4b2:	1b40      	subs	r0, r0, r5
 800a4b4:	42b8      	cmp	r0, r7
 800a4b6:	f67f aeaa 	bls.w	800a20e <HAL_RCC_OscConfig+0xa2>
 800a4ba:	e6dc      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a4bc:	4d67      	ldr	r5, [pc, #412]	@ (800a65c <HAL_RCC_OscConfig+0x4f0>)
 800a4be:	692b      	ldr	r3, [r5, #16]
 800a4c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4c4:	2b18      	cmp	r3, #24
 800a4c6:	d07a      	beq.n	800a5be <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_DISABLE();
 800a4c8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4ca:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800a4cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a4d0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4d2:	d167      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 800a4d4:	f7fd fe94 	bl	8008200 <HAL_GetTick>
 800a4d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	0199      	lsls	r1, r3, #6
 800a4de:	d45b      	bmi.n	800a598 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4e0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a4e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a4e4:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a4f0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a4f4:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a4f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	3a01      	subs	r2, #1
 800a4fe:	025b      	lsls	r3, r3, #9
 800a500:	0412      	lsls	r2, r2, #16
 800a502:	b29b      	uxth	r3, r3
 800a504:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a508:	4313      	orrs	r3, r2
 800a50a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a50c:	3a01      	subs	r2, #1
 800a50e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a512:	4313      	orrs	r3, r2
 800a514:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a516:	3a01      	subs	r2, #1
 800a518:	0612      	lsls	r2, r2, #24
 800a51a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a51e:	4313      	orrs	r3, r2
 800a520:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a522:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a524:	f023 0301 	bic.w	r3, r3, #1
 800a528:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a52a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a52c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a52e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a532:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a536:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a53a:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a53c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a53e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a540:	f023 030c 	bic.w	r3, r3, #12
 800a544:	4313      	orrs	r3, r2
 800a546:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a548:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a54a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a54c:	f023 0302 	bic.w	r3, r3, #2
 800a550:	4313      	orrs	r3, r2
 800a552:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a554:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a55a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a55c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a562:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a564:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a56a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a56c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a57a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a57c:	f7fd fe40 	bl	8008200 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a580:	4d36      	ldr	r5, [pc, #216]	@ (800a65c <HAL_RCC_OscConfig+0x4f0>)
        tickstart = HAL_GetTick();
 800a582:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	019a      	lsls	r2, r3, #6
 800a588:	f53f ae49 	bmi.w	800a21e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a58c:	f7fd fe38 	bl	8008200 <HAL_GetTick>
 800a590:	1b00      	subs	r0, r0, r4
 800a592:	2802      	cmp	r0, #2
 800a594:	d9f6      	bls.n	800a584 <HAL_RCC_OscConfig+0x418>
 800a596:	e66e      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a598:	f7fd fe32 	bl	8008200 <HAL_GetTick>
 800a59c:	1b80      	subs	r0, r0, r6
 800a59e:	2802      	cmp	r0, #2
 800a5a0:	d99b      	bls.n	800a4da <HAL_RCC_OscConfig+0x36e>
 800a5a2:	e668      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 800a5a4:	f7fd fe2c 	bl	8008200 <HAL_GetTick>
 800a5a8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	019b      	lsls	r3, r3, #6
 800a5ae:	f57f ae36 	bpl.w	800a21e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5b2:	f7fd fe25 	bl	8008200 <HAL_GetTick>
 800a5b6:	1b00      	subs	r0, r0, r4
 800a5b8:	2802      	cmp	r0, #2
 800a5ba:	d9f6      	bls.n	800a5aa <HAL_RCC_OscConfig+0x43e>
 800a5bc:	e65b      	b.n	800a276 <HAL_RCC_OscConfig+0x10a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5be:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5c0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c4:	f43f ae40 	beq.w	800a248 <HAL_RCC_OscConfig+0xdc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c8:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5cc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a5ce:	4281      	cmp	r1, r0
 800a5d0:	f47f ae3a 	bne.w	800a248 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5d4:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5da:	428a      	cmp	r2, r1
 800a5dc:	f47f ae34 	bne.w	800a248 <HAL_RCC_OscConfig+0xdc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5e0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a5e2:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800a5e6:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5e8:	4291      	cmp	r1, r2
 800a5ea:	f47f ae2d 	bne.w	800a248 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5ee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a5f0:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800a5f4:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5f6:	4291      	cmp	r1, r2
 800a5f8:	f47f ae26 	bne.w	800a248 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a5fe:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800a602:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a604:	4291      	cmp	r1, r2
 800a606:	f47f ae1f 	bne.w	800a248 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a60a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a60c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a610:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a612:	4293      	cmp	r3, r2
 800a614:	f47f ae18 	bne.w	800a248 <HAL_RCC_OscConfig+0xdc>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a618:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a61a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a61c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a620:	429a      	cmp	r2, r3
 800a622:	f43f adfc 	beq.w	800a21e <HAL_RCC_OscConfig+0xb2>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a626:	4d0d      	ldr	r5, [pc, #52]	@ (800a65c <HAL_RCC_OscConfig+0x4f0>)
 800a628:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a62a:	f023 0301 	bic.w	r3, r3, #1
 800a62e:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800a630:	f7fd fde6 	bl	8008200 <HAL_GetTick>
 800a634:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a636:	f7fd fde3 	bl	8008200 <HAL_GetTick>
 800a63a:	42b0      	cmp	r0, r6
 800a63c:	d0fb      	beq.n	800a636 <HAL_RCC_OscConfig+0x4ca>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a63e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a640:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a646:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a64a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a64e:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a650:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a658:	e5e1      	b.n	800a21e <HAL_RCC_OscConfig+0xb2>
 800a65a:	bf00      	nop
 800a65c:	58024400 	.word	0x58024400

0800a660 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a660:	4b49      	ldr	r3, [pc, #292]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x128>)
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a668:	2a10      	cmp	r2, #16
{
 800a66a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a66c:	f000 8088 	beq.w	800a780 <HAL_RCC_GetSysClockFreq+0x120>
 800a670:	2a18      	cmp	r2, #24
 800a672:	d00c      	beq.n	800a68e <HAL_RCC_GetSysClockFreq+0x2e>
 800a674:	2a00      	cmp	r2, #0
 800a676:	f040 8085 	bne.w	800a784 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	4843      	ldr	r0, [pc, #268]	@ (800a78c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a67e:	f012 0f20 	tst.w	r2, #32
 800a682:	d003      	beq.n	800a68c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a68a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a68c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a68e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a690:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a692:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a694:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a698:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a69c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a69e:	d0f5      	beq.n	800a68c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6a0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6a4:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6a8:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6ac:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6b0:	4362      	muls	r2, r4
 800a6b2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a6b6:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6bc:	ee06 2a90 	vmov	s13, r2
 800a6c0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a6c4:	d04e      	beq.n	800a764 <HAL_RCC_GetSysClockFreq+0x104>
 800a6c6:	2902      	cmp	r1, #2
 800a6c8:	d03e      	beq.n	800a748 <HAL_RCC_GetSysClockFreq+0xe8>
 800a6ca:	2900      	cmp	r1, #0
 800a6cc:	d14a      	bne.n	800a764 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	0692      	lsls	r2, r2, #26
 800a6d2:	d527      	bpl.n	800a724 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6d4:	6819      	ldr	r1, [r3, #0]
 800a6d6:	4a2d      	ldr	r2, [pc, #180]	@ (800a78c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a6d8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6de:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e4:	ee07 2a90 	vmov	s15, r2
 800a6e8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a6ec:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a6f0:	ee07 3a10 	vmov	s14, r3
 800a6f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a6fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a700:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a704:	4b20      	ldr	r3, [pc, #128]	@ (800a788 <HAL_RCC_GetSysClockFreq+0x128>)
 800a706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a708:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a70c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a70e:	ee07 3a10 	vmov	s14, r3
 800a712:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a71a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a71e:	ee17 0a90 	vmov	r0, s15
 800a722:	e7b3      	b.n	800a68c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a736:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a73a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a790 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a73e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a742:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a746:	e7dd      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74e:	ee07 3a90 	vmov	s15, r3
 800a752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a75e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a794 <HAL_RCC_GetSysClockFreq+0x134>
 800a762:	e7ec      	b.n	800a73e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a776:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a77a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a798 <HAL_RCC_GetSysClockFreq+0x138>
 800a77e:	e7de      	b.n	800a73e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a780:	4806      	ldr	r0, [pc, #24]	@ (800a79c <HAL_RCC_GetSysClockFreq+0x13c>)
 800a782:	e783      	b.n	800a68c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a784:	4806      	ldr	r0, [pc, #24]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x140>)
 800a786:	e781      	b.n	800a68c <HAL_RCC_GetSysClockFreq+0x2c>
 800a788:	58024400 	.word	0x58024400
 800a78c:	03d09000 	.word	0x03d09000
 800a790:	4c742400 	.word	0x4c742400
 800a794:	4bbebc20 	.word	0x4bbebc20
 800a798:	4a742400 	.word	0x4a742400
 800a79c:	017d7840 	.word	0x017d7840
 800a7a0:	003d0900 	.word	0x003d0900

0800a7a4 <HAL_RCC_ClockConfig>:
{
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	b910      	cbnz	r0, 800a7b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a7ae:	2001      	movs	r0, #1
}
 800a7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7b4:	4a88      	ldr	r2, [pc, #544]	@ (800a9d8 <HAL_RCC_ClockConfig+0x234>)
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	428b      	cmp	r3, r1
 800a7be:	f0c0 8093 	bcc.w	800a8e8 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	075f      	lsls	r7, r3, #29
 800a7c6:	f100 809b 	bmi.w	800a900 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ca:	071e      	lsls	r6, r3, #28
 800a7cc:	d50b      	bpl.n	800a7e6 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7ce:	4983      	ldr	r1, [pc, #524]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a7d0:	6960      	ldr	r0, [r4, #20]
 800a7d2:	69ca      	ldr	r2, [r1, #28]
 800a7d4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a7d8:	4290      	cmp	r0, r2
 800a7da:	d904      	bls.n	800a7e6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7dc:	69ca      	ldr	r2, [r1, #28]
 800a7de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a7e2:	4302      	orrs	r2, r0
 800a7e4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e6:	06d8      	lsls	r0, r3, #27
 800a7e8:	d50b      	bpl.n	800a802 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7ea:	497c      	ldr	r1, [pc, #496]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a7ec:	69a0      	ldr	r0, [r4, #24]
 800a7ee:	69ca      	ldr	r2, [r1, #28]
 800a7f0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a7f4:	4290      	cmp	r0, r2
 800a7f6:	d904      	bls.n	800a802 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a7f8:	69ca      	ldr	r2, [r1, #28]
 800a7fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7fe:	4302      	orrs	r2, r0
 800a800:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a802:	0699      	lsls	r1, r3, #26
 800a804:	d50b      	bpl.n	800a81e <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a806:	4975      	ldr	r1, [pc, #468]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a808:	69e0      	ldr	r0, [r4, #28]
 800a80a:	6a0a      	ldr	r2, [r1, #32]
 800a80c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a810:	4290      	cmp	r0, r2
 800a812:	d904      	bls.n	800a81e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a814:	6a0a      	ldr	r2, [r1, #32]
 800a816:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a81a:	4302      	orrs	r2, r0
 800a81c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a81e:	079a      	lsls	r2, r3, #30
 800a820:	d50b      	bpl.n	800a83a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a822:	496e      	ldr	r1, [pc, #440]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a824:	68e0      	ldr	r0, [r4, #12]
 800a826:	698a      	ldr	r2, [r1, #24]
 800a828:	f002 020f 	and.w	r2, r2, #15
 800a82c:	4290      	cmp	r0, r2
 800a82e:	d904      	bls.n	800a83a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a830:	698a      	ldr	r2, [r1, #24]
 800a832:	f022 020f 	bic.w	r2, r2, #15
 800a836:	4302      	orrs	r2, r0
 800a838:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a83a:	07df      	lsls	r7, r3, #31
 800a83c:	d46e      	bmi.n	800a91c <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	079e      	lsls	r6, r3, #30
 800a842:	f100 80a1 	bmi.w	800a988 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a846:	4964      	ldr	r1, [pc, #400]	@ (800a9d8 <HAL_RCC_ClockConfig+0x234>)
 800a848:	680a      	ldr	r2, [r1, #0]
 800a84a:	f002 020f 	and.w	r2, r2, #15
 800a84e:	42aa      	cmp	r2, r5
 800a850:	f200 80a8 	bhi.w	800a9a4 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a854:	0758      	lsls	r0, r3, #29
 800a856:	f100 80b1 	bmi.w	800a9bc <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a85a:	0719      	lsls	r1, r3, #28
 800a85c:	d50b      	bpl.n	800a876 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a85e:	495f      	ldr	r1, [pc, #380]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a860:	6960      	ldr	r0, [r4, #20]
 800a862:	69ca      	ldr	r2, [r1, #28]
 800a864:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a868:	4290      	cmp	r0, r2
 800a86a:	d204      	bcs.n	800a876 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a86c:	69ca      	ldr	r2, [r1, #28]
 800a86e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a872:	4302      	orrs	r2, r0
 800a874:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a876:	06da      	lsls	r2, r3, #27
 800a878:	d50b      	bpl.n	800a892 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a87a:	4958      	ldr	r1, [pc, #352]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a87c:	69a0      	ldr	r0, [r4, #24]
 800a87e:	69ca      	ldr	r2, [r1, #28]
 800a880:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a884:	4290      	cmp	r0, r2
 800a886:	d204      	bcs.n	800a892 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a888:	69ca      	ldr	r2, [r1, #28]
 800a88a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a88e:	4302      	orrs	r2, r0
 800a890:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a892:	069b      	lsls	r3, r3, #26
 800a894:	d50b      	bpl.n	800a8ae <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a896:	4a51      	ldr	r2, [pc, #324]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a898:	69e1      	ldr	r1, [r4, #28]
 800a89a:	6a13      	ldr	r3, [r2, #32]
 800a89c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8a0:	4299      	cmp	r1, r3
 800a8a2:	d204      	bcs.n	800a8ae <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8a4:	6a13      	ldr	r3, [r2, #32]
 800a8a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a8ae:	f7ff fed7 	bl	800a660 <HAL_RCC_GetSysClockFreq>
 800a8b2:	494a      	ldr	r1, [pc, #296]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a8b4:	4a4a      	ldr	r2, [pc, #296]	@ (800a9e0 <HAL_RCC_ClockConfig+0x23c>)
 800a8b6:	698b      	ldr	r3, [r1, #24]
 800a8b8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a8bc:	5cd3      	ldrb	r3, [r2, r3]
 800a8be:	f003 031f 	and.w	r3, r3, #31
 800a8c2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8c4:	698b      	ldr	r3, [r1, #24]
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	5cd3      	ldrb	r3, [r2, r3]
 800a8cc:	4a45      	ldr	r2, [pc, #276]	@ (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a8ce:	f003 031f 	and.w	r3, r3, #31
 800a8d2:	fa20 f303 	lsr.w	r3, r0, r3
 800a8d6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800a8d8:	4b43      	ldr	r3, [pc, #268]	@ (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8da:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800a8dc:	4b43      	ldr	r3, [pc, #268]	@ (800a9ec <HAL_RCC_ClockConfig+0x248>)
}
 800a8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a8e2:	6818      	ldr	r0, [r3, #0]
 800a8e4:	f7f7 b9d6 	b.w	8001c94 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8e8:	6813      	ldr	r3, [r2, #0]
 800a8ea:	f023 030f 	bic.w	r3, r3, #15
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	f003 030f 	and.w	r3, r3, #15
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	f47f af58 	bne.w	800a7ae <HAL_RCC_ClockConfig+0xa>
 800a8fe:	e760      	b.n	800a7c2 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a900:	4936      	ldr	r1, [pc, #216]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a902:	6920      	ldr	r0, [r4, #16]
 800a904:	698a      	ldr	r2, [r1, #24]
 800a906:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a90a:	4290      	cmp	r0, r2
 800a90c:	f67f af5d 	bls.w	800a7ca <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a910:	698a      	ldr	r2, [r1, #24]
 800a912:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a916:	4302      	orrs	r2, r0
 800a918:	618a      	str	r2, [r1, #24]
 800a91a:	e756      	b.n	800a7ca <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a91c:	4b2f      	ldr	r3, [pc, #188]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a91e:	68a1      	ldr	r1, [r4, #8]
 800a920:	699a      	ldr	r2, [r3, #24]
 800a922:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800a926:	430a      	orrs	r2, r1
 800a928:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a92a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a92c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a92e:	2902      	cmp	r1, #2
 800a930:	d11d      	bne.n	800a96e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a932:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a936:	f43f af3a 	beq.w	800a7ae <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a93a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a93c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a940:	4f26      	ldr	r7, [pc, #152]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a942:	f022 0207 	bic.w	r2, r2, #7
 800a946:	430a      	orrs	r2, r1
 800a948:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800a94a:	f7fd fc59 	bl	8008200 <HAL_GetTick>
 800a94e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	6862      	ldr	r2, [r4, #4]
 800a954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a958:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a95c:	f43f af6f 	beq.w	800a83e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a960:	f7fd fc4e 	bl	8008200 <HAL_GetTick>
 800a964:	1b80      	subs	r0, r0, r6
 800a966:	4540      	cmp	r0, r8
 800a968:	d9f2      	bls.n	800a950 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a96a:	2003      	movs	r0, #3
 800a96c:	e720      	b.n	800a7b0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a96e:	2903      	cmp	r1, #3
 800a970:	d102      	bne.n	800a978 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a972:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a976:	e7de      	b.n	800a936 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a978:	2901      	cmp	r1, #1
 800a97a:	d102      	bne.n	800a982 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a97c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a980:	e7d9      	b.n	800a936 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a982:	f012 0f04 	tst.w	r2, #4
 800a986:	e7d6      	b.n	800a936 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a988:	4914      	ldr	r1, [pc, #80]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a98a:	68e0      	ldr	r0, [r4, #12]
 800a98c:	698a      	ldr	r2, [r1, #24]
 800a98e:	f002 020f 	and.w	r2, r2, #15
 800a992:	4290      	cmp	r0, r2
 800a994:	f4bf af57 	bcs.w	800a846 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a998:	698a      	ldr	r2, [r1, #24]
 800a99a:	f022 020f 	bic.w	r2, r2, #15
 800a99e:	4302      	orrs	r2, r0
 800a9a0:	618a      	str	r2, [r1, #24]
 800a9a2:	e750      	b.n	800a846 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a4:	680a      	ldr	r2, [r1, #0]
 800a9a6:	f022 020f 	bic.w	r2, r2, #15
 800a9aa:	432a      	orrs	r2, r5
 800a9ac:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ae:	680a      	ldr	r2, [r1, #0]
 800a9b0:	f002 020f 	and.w	r2, r2, #15
 800a9b4:	42aa      	cmp	r2, r5
 800a9b6:	f47f aefa 	bne.w	800a7ae <HAL_RCC_ClockConfig+0xa>
 800a9ba:	e74b      	b.n	800a854 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9bc:	4907      	ldr	r1, [pc, #28]	@ (800a9dc <HAL_RCC_ClockConfig+0x238>)
 800a9be:	6920      	ldr	r0, [r4, #16]
 800a9c0:	698a      	ldr	r2, [r1, #24]
 800a9c2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a9c6:	4290      	cmp	r0, r2
 800a9c8:	f4bf af47 	bcs.w	800a85a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9cc:	698a      	ldr	r2, [r1, #24]
 800a9ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a9d2:	4302      	orrs	r2, r0
 800a9d4:	618a      	str	r2, [r1, #24]
 800a9d6:	e740      	b.n	800a85a <HAL_RCC_ClockConfig+0xb6>
 800a9d8:	52002000 	.word	0x52002000
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	080252e4 	.word	0x080252e4
 800a9e4:	2400006c 	.word	0x2400006c
 800a9e8:	24000070 	.word	0x24000070
 800a9ec:	24000078 	.word	0x24000078

0800a9f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9f0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a9f2:	f7ff fe35 	bl	800a660 <HAL_RCC_GetSysClockFreq>
 800a9f6:	4a0b      	ldr	r2, [pc, #44]	@ (800aa24 <HAL_RCC_GetHCLKFreq+0x34>)
 800a9f8:	490b      	ldr	r1, [pc, #44]	@ (800aa28 <HAL_RCC_GetHCLKFreq+0x38>)
 800a9fa:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9fc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a9fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa02:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa06:	5ccb      	ldrb	r3, [r1, r3]
 800aa08:	f003 031f 	and.w	r3, r3, #31
 800aa0c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa10:	5c88      	ldrb	r0, [r1, r2]
 800aa12:	4a06      	ldr	r2, [pc, #24]	@ (800aa2c <HAL_RCC_GetHCLKFreq+0x3c>)
 800aa14:	f000 001f 	and.w	r0, r0, #31
 800aa18:	fa23 f000 	lsr.w	r0, r3, r0
 800aa1c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa1e:	4a04      	ldr	r2, [pc, #16]	@ (800aa30 <HAL_RCC_GetHCLKFreq+0x40>)
 800aa20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800aa22:	bd08      	pop	{r3, pc}
 800aa24:	58024400 	.word	0x58024400
 800aa28:	080252e4 	.word	0x080252e4
 800aa2c:	2400006c 	.word	0x2400006c
 800aa30:	24000070 	.word	0x24000070

0800aa34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa34:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aa36:	f7ff ffdb 	bl	800a9f0 <HAL_RCC_GetHCLKFreq>
 800aa3a:	4b05      	ldr	r3, [pc, #20]	@ (800aa50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aa3c:	4a05      	ldr	r2, [pc, #20]	@ (800aa54 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800aa44:	5cd3      	ldrb	r3, [r2, r3]
 800aa46:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aa4a:	40d8      	lsrs	r0, r3
 800aa4c:	bd08      	pop	{r3, pc}
 800aa4e:	bf00      	nop
 800aa50:	58024400 	.word	0x58024400
 800aa54:	080252e4 	.word	0x080252e4

0800aa58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa5a:	f7ff ffc9 	bl	800a9f0 <HAL_RCC_GetHCLKFreq>
 800aa5e:	4b05      	ldr	r3, [pc, #20]	@ (800aa74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800aa60:	4a05      	ldr	r2, [pc, #20]	@ (800aa78 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800aa68:	5cd3      	ldrb	r3, [r2, r3]
 800aa6a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa6e:	40d8      	lsrs	r0, r3
 800aa70:	bd08      	pop	{r3, pc}
 800aa72:	bf00      	nop
 800aa74:	58024400 	.word	0x58024400
 800aa78:	080252e4 	.word	0x080252e4

0800aa7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800aa7c:	233f      	movs	r3, #63	@ 0x3f
 800aa7e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aa80:	4b11      	ldr	r3, [pc, #68]	@ (800aac8 <HAL_RCC_GetClockConfig+0x4c>)
 800aa82:	691a      	ldr	r2, [r3, #16]
 800aa84:	f002 0207 	and.w	r2, r2, #7
 800aa88:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800aa90:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800aa92:	699a      	ldr	r2, [r3, #24]
 800aa94:	f002 020f 	and.w	r2, r2, #15
 800aa98:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800aa9a:	699a      	ldr	r2, [r3, #24]
 800aa9c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aaa0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800aaa2:	69da      	ldr	r2, [r3, #28]
 800aaa4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aaa8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aaaa:	69da      	ldr	r2, [r3, #28]
 800aaac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800aab0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aab8:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aaba:	4b04      	ldr	r3, [pc, #16]	@ (800aacc <HAL_RCC_GetClockConfig+0x50>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	600b      	str	r3, [r1, #0]
}
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	58024400 	.word	0x58024400
 800aacc:	52002000 	.word	0x52002000

0800aad0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aad2:	4c3a      	ldr	r4, [pc, #232]	@ (800abbc <RCCEx_PLL2_Config+0xec>)
{
 800aad4:	4606      	mov	r6, r0
 800aad6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aad8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d069      	beq.n	800abb6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aae8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaea:	f7fd fb89 	bl	8008200 <HAL_GetTick>
 800aaee:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	011a      	lsls	r2, r3, #4
 800aaf4:	d44b      	bmi.n	800ab8e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aaf6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800aaf8:	6832      	ldr	r2, [r6, #0]
 800aafa:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800aafe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ab02:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab04:	68b3      	ldr	r3, [r6, #8]
 800ab06:	68f2      	ldr	r2, [r6, #12]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	3a01      	subs	r2, #1
 800ab0c:	025b      	lsls	r3, r3, #9
 800ab0e:	0412      	lsls	r2, r2, #16
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ab16:	4313      	orrs	r3, r2
 800ab18:	6872      	ldr	r2, [r6, #4]
 800ab1a:	3a01      	subs	r2, #1
 800ab1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab20:	4313      	orrs	r3, r2
 800ab22:	6932      	ldr	r2, [r6, #16]
 800ab24:	3a01      	subs	r2, #1
 800ab26:	0612      	lsls	r2, r2, #24
 800ab28:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab32:	6972      	ldr	r2, [r6, #20]
 800ab34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab3e:	69b2      	ldr	r2, [r6, #24]
 800ab40:	f023 0320 	bic.w	r3, r3, #32
 800ab44:	4313      	orrs	r3, r2
 800ab46:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab48:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab4a:	f023 0310 	bic.w	r3, r3, #16
 800ab4e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ab52:	69f2      	ldr	r2, [r6, #28]
 800ab54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ab5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ab60:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab64:	f043 0310 	orr.w	r3, r3, #16
 800ab68:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ab6c:	b9b5      	cbnz	r5, 800ab9c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab72:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab74:	4c11      	ldr	r4, [pc, #68]	@ (800abbc <RCCEx_PLL2_Config+0xec>)
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab7c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab7e:	f7fd fb3f 	bl	8008200 <HAL_GetTick>
 800ab82:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	d50f      	bpl.n	800abaa <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e005      	b.n	800ab9a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ab8e:	f7fd fb37 	bl	8008200 <HAL_GetTick>
 800ab92:	1bc0      	subs	r0, r0, r7
 800ab94:	2802      	cmp	r0, #2
 800ab96:	d9ab      	bls.n	800aaf0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800ab98:	2003      	movs	r0, #3
}
 800ab9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab9c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab9e:	bf0c      	ite	eq
 800aba0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aba4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800aba8:	e7e3      	b.n	800ab72 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abaa:	f7fd fb29 	bl	8008200 <HAL_GetTick>
 800abae:	1b40      	subs	r0, r0, r5
 800abb0:	2802      	cmp	r0, #2
 800abb2:	d9e7      	bls.n	800ab84 <RCCEx_PLL2_Config+0xb4>
 800abb4:	e7f0      	b.n	800ab98 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800abb6:	2001      	movs	r0, #1
 800abb8:	e7ef      	b.n	800ab9a <RCCEx_PLL2_Config+0xca>
 800abba:	bf00      	nop
 800abbc:	58024400 	.word	0x58024400

0800abc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abc2:	4c3a      	ldr	r4, [pc, #232]	@ (800acac <RCCEx_PLL3_Config+0xec>)
{
 800abc4:	4606      	mov	r6, r0
 800abc6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abc8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d069      	beq.n	800aca6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abd8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abda:	f7fd fb11 	bl	8008200 <HAL_GetTick>
 800abde:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	009a      	lsls	r2, r3, #2
 800abe4:	d44b      	bmi.n	800ac7e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800abe6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800abe8:	6832      	ldr	r2, [r6, #0]
 800abea:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800abee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800abf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abf4:	68b3      	ldr	r3, [r6, #8]
 800abf6:	68f2      	ldr	r2, [r6, #12]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	3a01      	subs	r2, #1
 800abfc:	025b      	lsls	r3, r3, #9
 800abfe:	0412      	lsls	r2, r2, #16
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ac06:	4313      	orrs	r3, r2
 800ac08:	6872      	ldr	r2, [r6, #4]
 800ac0a:	3a01      	subs	r2, #1
 800ac0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac10:	4313      	orrs	r3, r2
 800ac12:	6932      	ldr	r2, [r6, #16]
 800ac14:	3a01      	subs	r2, #1
 800ac16:	0612      	lsls	r2, r2, #24
 800ac18:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac22:	6972      	ldr	r2, [r6, #20]
 800ac24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac2e:	69b2      	ldr	r2, [r6, #24]
 800ac30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac34:	4313      	orrs	r3, r2
 800ac36:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac3e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ac42:	69f2      	ldr	r2, [r6, #28]
 800ac44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac48:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ac4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ac50:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac58:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ac5c:	b9b5      	cbnz	r5, 800ac8c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac62:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac64:	4c11      	ldr	r4, [pc, #68]	@ (800acac <RCCEx_PLL3_Config+0xec>)
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac6c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac6e:	f7fd fac7 	bl	8008200 <HAL_GetTick>
 800ac72:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	d50f      	bpl.n	800ac9a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e005      	b.n	800ac8a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac7e:	f7fd fabf 	bl	8008200 <HAL_GetTick>
 800ac82:	1bc0      	subs	r0, r0, r7
 800ac84:	2802      	cmp	r0, #2
 800ac86:	d9ab      	bls.n	800abe0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ac88:	2003      	movs	r0, #3
}
 800ac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ac8c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac8e:	bf0c      	ite	eq
 800ac90:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac94:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800ac98:	e7e3      	b.n	800ac62 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac9a:	f7fd fab1 	bl	8008200 <HAL_GetTick>
 800ac9e:	1b40      	subs	r0, r0, r5
 800aca0:	2802      	cmp	r0, #2
 800aca2:	d9e7      	bls.n	800ac74 <RCCEx_PLL3_Config+0xb4>
 800aca4:	e7f0      	b.n	800ac88 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800aca6:	2001      	movs	r0, #1
 800aca8:	e7ef      	b.n	800ac8a <RCCEx_PLL3_Config+0xca>
 800acaa:	bf00      	nop
 800acac:	58024400 	.word	0x58024400

0800acb0 <HAL_RCCEx_PeriphCLKConfig>:
{
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acb4:	6803      	ldr	r3, [r0, #0]
{
 800acb6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acb8:	011c      	lsls	r4, r3, #4
 800acba:	d51e      	bpl.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800acbc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800acbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acc2:	d02a      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800acc4:	d80f      	bhi.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800acc6:	b1d3      	cbz	r3, 800acfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800acc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800accc:	d01d      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800acce:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	05d8      	lsls	r0, r3, #23
 800acd4:	d553      	bpl.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch (PeriphClkInit->Sai1ClockSelection)
 800acd6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d84f      	bhi.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800acdc:	e8df f003 	tbb	[pc, r3]
 800ace0:	27484122 	.word	0x27484122
 800ace4:	27          	.byte	0x27
 800ace5:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ace6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acea:	d1f0      	bne.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acec:	4a98      	ldr	r2, [pc, #608]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800acee:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800acf0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800acf2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800acf6:	430b      	orrs	r3, r1
 800acf8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800acfa:	2600      	movs	r6, #0
 800acfc:	e7e8      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acfe:	4a94      	ldr	r2, [pc, #592]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ad00:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad06:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ad08:	e7f0      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	3008      	adds	r0, #8
 800ad0e:	f7ff fedf 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad12:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d1db      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800ad18:	e7e8      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad1a:	2102      	movs	r1, #2
 800ad1c:	3028      	adds	r0, #40	@ 0x28
 800ad1e:	f7ff ff4f 	bl	800abc0 <RCCEx_PLL3_Config>
 800ad22:	e7f6      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad24:	4a8a      	ldr	r2, [pc, #552]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ad26:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad2e:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800ad30:	bb3c      	cbnz	r4, 800ad82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad32:	4a87      	ldr	r2, [pc, #540]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ad34:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ad36:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ad38:	f023 0307 	bic.w	r3, r3, #7
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	0559      	lsls	r1, r3, #21
 800ad44:	d530      	bpl.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ad46:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800ad4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad4e:	d049      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800ad50:	d819      	bhi.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d039      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800ad56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad5a:	d03c      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x126>
 800ad5c:	2601      	movs	r6, #1
 800ad5e:	4634      	mov	r4, r6
 800ad60:	e022      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad62:	2100      	movs	r1, #0
 800ad64:	f105 0008 	add.w	r0, r5, #8
 800ad68:	f7ff feb2 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad6c:	4604      	mov	r4, r0
        break;
 800ad6e:	e7df      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad70:	2100      	movs	r1, #0
 800ad72:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ad76:	f7ff ff23 	bl	800abc0 <RCCEx_PLL3_Config>
 800ad7a:	e7f7      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad7c:	2601      	movs	r6, #1
 800ad7e:	4634      	mov	r4, r6
 800ad80:	e7de      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad82:	4626      	mov	r6, r4
 800ad84:	e7dc      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ad86:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ad8a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800ad8e:	d002      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800ad90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ad94:	d1e2      	bne.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xac>
    if (ret == HAL_OK)
 800ad96:	bb5c      	cbnz	r4, 800adf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad98:	4a6d      	ldr	r2, [pc, #436]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ad9a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800ad9e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ada0:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	051a      	lsls	r2, r3, #20
 800adac:	d533      	bpl.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->Sai4BClockSelection)
 800adae:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 800adb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adb6:	d048      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800adb8:	d81c      	bhi.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d038      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800adbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adc2:	d03b      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800adc4:	2601      	movs	r6, #1
 800adc6:	4634      	mov	r4, r6
 800adc8:	e025      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x166>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adca:	4a61      	ldr	r2, [pc, #388]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800adcc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800adce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800add2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800add4:	e7df      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800add6:	2100      	movs	r1, #0
 800add8:	f105 0008 	add.w	r0, r5, #8
 800addc:	f7ff fe78 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ade0:	4604      	mov	r4, r0
        break;
 800ade2:	e7d8      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ade4:	2100      	movs	r1, #0
 800ade6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800adea:	f7ff fee9 	bl	800abc0 <RCCEx_PLL3_Config>
 800adee:	e7f7      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800adf0:	4626      	mov	r6, r4
 800adf2:	e7d9      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800adf4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800adf8:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800adfc:	d002      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800adfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae02:	d1df      	bne.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if (ret == HAL_OK)
 800ae04:	bb3c      	cbnz	r4, 800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae06:	4a52      	ldr	r2, [pc, #328]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ae08:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ae0c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ae0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ae12:	430b      	orrs	r3, r1
 800ae14:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	019b      	lsls	r3, r3, #6
 800ae1a:	d528      	bpl.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->OspiClockSelection)
 800ae1c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	d03b      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ae22:	d81a      	bhi.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ae24:	b1db      	cbz	r3, 800ae5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d031      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x1de>
 800ae2a:	2601      	movs	r6, #1
 800ae2c:	4634      	mov	r4, r6
 800ae2e:	e01e      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae30:	4a47      	ldr	r2, [pc, #284]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ae32:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ae3a:	e7e3      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	f105 0008 	add.w	r0, r5, #8
 800ae42:	f7ff fe45 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae46:	4604      	mov	r4, r0
        break;
 800ae48:	e7dc      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ae50:	f7ff feb6 	bl	800abc0 <RCCEx_PLL3_Config>
 800ae54:	e7f7      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ae56:	4626      	mov	r6, r4
 800ae58:	e7dd      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->OspiClockSelection)
 800ae5a:	2b30      	cmp	r3, #48	@ 0x30
 800ae5c:	d1e5      	bne.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    if (ret == HAL_OK)
 800ae5e:	bb1c      	cbnz	r4, 800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ae60:	4a3b      	ldr	r2, [pc, #236]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ae62:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ae64:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ae66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae6e:	682b      	ldr	r3, [r5, #0]
 800ae70:	04df      	lsls	r7, r3, #19
 800ae72:	d52a      	bpl.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ae74:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800ae76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae7a:	d078      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800ae7c:	d816      	bhi.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d068      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800ae82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae86:	d06b      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ae88:	2601      	movs	r6, #1
 800ae8a:	4634      	mov	r4, r6
 800ae8c:	e01d      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x21a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae8e:	4a30      	ldr	r2, [pc, #192]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ae90:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae96:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ae98:	e7e1      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae9a:	2102      	movs	r1, #2
 800ae9c:	f105 0008 	add.w	r0, r5, #8
 800aea0:	f7ff fe16 	bl	800aad0 <RCCEx_PLL2_Config>
 800aea4:	4604      	mov	r4, r0
        break;
 800aea6:	e7da      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800aea8:	4626      	mov	r6, r4
 800aeaa:	e7e0      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Spi123ClockSelection)
 800aeac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aeb0:	d002      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800aeb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aeb6:	d1e7      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 800aeb8:	2c00      	cmp	r4, #0
 800aeba:	d15e      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aebc:	4a24      	ldr	r2, [pc, #144]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800aebe:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800aec0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800aec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aec6:	430b      	orrs	r3, r1
 800aec8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	0498      	lsls	r0, r3, #18
 800aece:	d50b      	bpl.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
    switch (PeriphClkInit->Spi45ClockSelection)
 800aed0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800aed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aed6:	d06a      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800aed8:	d851      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d057      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aee2:	d05d      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800aee4:	2601      	movs	r6, #1
 800aee6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	0459      	lsls	r1, r3, #17
 800aeec:	d50c      	bpl.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->Spi6ClockSelection)
 800aeee:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800aef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aef6:	d07b      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x340>
 800aef8:	d861      	bhi.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d067      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800aefe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af02:	d06e      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800af04:	2601      	movs	r6, #1
 800af06:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	041a      	lsls	r2, r3, #16
 800af0c:	d511      	bpl.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x282>
    switch (PeriphClkInit->FdcanClockSelection)
 800af0e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800af10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af14:	d074      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800af16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af1a:	d077      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d17c      	bne.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    if (ret == HAL_OK)
 800af20:	2c00      	cmp	r4, #0
 800af22:	d17d      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af24:	4a0a      	ldr	r2, [pc, #40]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800af26:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800af28:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800af2a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800af2e:	430b      	orrs	r3, r1
 800af30:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	01db      	lsls	r3, r3, #7
 800af36:	f140 8083 	bpl.w	800b040 <HAL_RCCEx_PeriphCLKConfig+0x390>
    switch (PeriphClkInit->FmcClockSelection)
 800af3a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	f200 80db 	bhi.w	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
 800af42:	e8df f013 	tbh	[pc, r3, lsl #1]
 800af46:	0074      	.short	0x0074
 800af48:	00d2006f 	.word	0x00d2006f
 800af4c:	0074      	.short	0x0074
 800af4e:	bf00      	nop
 800af50:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af54:	4a9e      	ldr	r2, [pc, #632]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800af56:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800af58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800af5e:	e7ab      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af60:	2100      	movs	r1, #0
 800af62:	f105 0008 	add.w	r0, r5, #8
 800af66:	f7ff fdb3 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af6a:	4604      	mov	r4, r0
        break;
 800af6c:	e7a4      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af6e:	2100      	movs	r1, #0
 800af70:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af74:	f7ff fe24 	bl	800abc0 <RCCEx_PLL3_Config>
 800af78:	e7f7      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800af7a:	4626      	mov	r6, r4
 800af7c:	e7a5      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800af7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af82:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800af86:	d002      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800af88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af8c:	d1aa      	bne.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    if (ret == HAL_OK)
 800af8e:	b9a4      	cbnz	r4, 800afba <HAL_RCCEx_PeriphCLKConfig+0x30a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af90:	4a8f      	ldr	r2, [pc, #572]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800af92:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800af94:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800af96:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800af9a:	430b      	orrs	r3, r1
 800af9c:	6513      	str	r3, [r2, #80]	@ 0x50
 800af9e:	e7a3      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afa0:	2101      	movs	r1, #1
 800afa2:	f105 0008 	add.w	r0, r5, #8
 800afa6:	f7ff fd93 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afaa:	4604      	mov	r4, r0
        break;
 800afac:	e7ef      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afae:	2101      	movs	r1, #1
 800afb0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afb4:	f7ff fe04 	bl	800abc0 <RCCEx_PLL3_Config>
 800afb8:	e7f7      	b.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800afba:	4626      	mov	r6, r4
 800afbc:	e794      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
    switch (PeriphClkInit->Spi6ClockSelection)
 800afbe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800afc2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800afc6:	d002      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800afc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afcc:	d19a      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x254>
    if (ret == HAL_OK)
 800afce:	b9ac      	cbnz	r4, 800affc <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800afd0:	4a7f      	ldr	r2, [pc, #508]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800afd2:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800afd6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800afd8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800afdc:	430b      	orrs	r3, r1
 800afde:	6593      	str	r3, [r2, #88]	@ 0x58
 800afe0:	e792      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x258>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afe2:	2101      	movs	r1, #1
 800afe4:	f105 0008 	add.w	r0, r5, #8
 800afe8:	f7ff fd72 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afec:	4604      	mov	r4, r0
        break;
 800afee:	e7ee      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x31e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aff0:	2101      	movs	r1, #1
 800aff2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aff6:	f7ff fde3 	bl	800abc0 <RCCEx_PLL3_Config>
 800affa:	e7f7      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800affc:	4626      	mov	r6, r4
 800affe:	e783      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x258>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b000:	4a73      	ldr	r2, [pc, #460]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b002:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b008:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b00a:	e789      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b00c:	2101      	movs	r1, #1
 800b00e:	f105 0008 	add.w	r0, r5, #8
 800b012:	f7ff fd5d 	bl	800aad0 <RCCEx_PLL2_Config>
 800b016:	4604      	mov	r4, r0
        break;
 800b018:	e782      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x270>
    switch (PeriphClkInit->FdcanClockSelection)
 800b01a:	2601      	movs	r6, #1
 800b01c:	4634      	mov	r4, r6
 800b01e:	e788      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x282>
 800b020:	4626      	mov	r6, r4
 800b022:	e786      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x282>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b024:	4a6a      	ldr	r2, [pc, #424]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b026:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b02c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b02e:	2c00      	cmp	r4, #0
 800b030:	d165      	bne.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b032:	4a67      	ldr	r2, [pc, #412]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b034:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b036:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b038:	f023 0303 	bic.w	r3, r3, #3
 800b03c:	430b      	orrs	r3, r1
 800b03e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	025f      	lsls	r7, r3, #9
 800b044:	d539      	bpl.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b046:	4f63      	ldr	r7, [pc, #396]	@ (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b04e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b050:	f7fd f8d6 	bl	8008200 <HAL_GetTick>
 800b054:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	05d8      	lsls	r0, r3, #23
 800b05a:	d552      	bpl.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x452>
    if (ret == HAL_OK)
 800b05c:	2c00      	cmp	r4, #0
 800b05e:	d16e      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x48e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b060:	4b5b      	ldr	r3, [pc, #364]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b062:	f8d5 00b0 	ldr.w	r0, [r5, #176]	@ 0xb0
 800b066:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b068:	4042      	eors	r2, r0
 800b06a:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800b06e:	d00b      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b070:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b072:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b074:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b078:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800b07c:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b07e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b080:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b084:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800b086:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b088:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b08c:	d042      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b08e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800b092:	494f      	ldr	r1, [pc, #316]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b094:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b098:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800b09c:	d14b      	bne.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b09e:	6908      	ldr	r0, [r1, #16]
 800b0a0:	4a4d      	ldr	r2, [pc, #308]	@ (800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800b0a2:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800b0a6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800b0aa:	4302      	orrs	r2, r0
 800b0ac:	610a      	str	r2, [r1, #16]
 800b0ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b2:	4a47      	ldr	r2, [pc, #284]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b0b4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800b0b6:	430b      	orrs	r3, r1
 800b0b8:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	07da      	lsls	r2, r3, #31
 800b0be:	d509      	bpl.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0c0:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800b0c2:	2b10      	cmp	r3, #16
 800b0c4:	d053      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800b0c6:	d83c      	bhi.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x492>
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d040      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d047      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b0d0:	2601      	movs	r6, #1
 800b0d2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	079b      	lsls	r3, r3, #30
 800b0d8:	d55f      	bpl.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b0da:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b0dc:	2b05      	cmp	r3, #5
 800b0de:	d872      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b0e0:	e8df f003 	tbb	[pc, r3]
 800b0e4:	536b4d53 	.word	0x536b4d53
 800b0e8:	5353      	.short	0x5353
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0ea:	2102      	movs	r1, #2
 800b0ec:	f105 0008 	add.w	r0, r5, #8
 800b0f0:	f7ff fcee 	bl	800aad0 <RCCEx_PLL2_Config>
 800b0f4:	4604      	mov	r4, r0
        break;
 800b0f6:	e79a      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch (PeriphClkInit->FmcClockSelection)
 800b0f8:	2601      	movs	r6, #1
 800b0fa:	4634      	mov	r4, r6
 800b0fc:	e7a0      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800b0fe:	4626      	mov	r6, r4
 800b100:	e79e      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b102:	f7fd f87d 	bl	8008200 <HAL_GetTick>
 800b106:	eba0 0008 	sub.w	r0, r0, r8
 800b10a:	2864      	cmp	r0, #100	@ 0x64
 800b10c:	d9a3      	bls.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        ret = HAL_TIMEOUT;
 800b10e:	2603      	movs	r6, #3
 800b110:	4634      	mov	r4, r6
 800b112:	e7d2      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
        tickstart = HAL_GetTick();
 800b114:	f7fd f874 	bl	8008200 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b118:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
        tickstart = HAL_GetTick();
 800b11c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b11e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b122:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b126:	0799      	lsls	r1, r3, #30
 800b128:	d4b1      	bmi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x3de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b12a:	f7fd f869 	bl	8008200 <HAL_GetTick>
 800b12e:	1bc0      	subs	r0, r0, r7
 800b130:	4548      	cmp	r0, r9
 800b132:	d9f6      	bls.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x472>
 800b134:	e7eb      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b136:	690a      	ldr	r2, [r1, #16]
 800b138:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800b13c:	e7b6      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b13e:	4626      	mov	r6, r4
 800b140:	e7bb      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b142:	f023 0208 	bic.w	r2, r3, #8
 800b146:	2a20      	cmp	r2, #32
 800b148:	d001      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800b14a:	2b18      	cmp	r3, #24
 800b14c:	d1c0      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    if (ret == HAL_OK)
 800b14e:	b9a4      	cbnz	r4, 800b17a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b150:	4a1f      	ldr	r2, [pc, #124]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b152:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 800b154:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b156:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800b15a:	430b      	orrs	r3, r1
 800b15c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b15e:	e7b9      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x424>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b160:	2101      	movs	r1, #1
 800b162:	f105 0008 	add.w	r0, r5, #8
 800b166:	f7ff fcb3 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b16a:	4604      	mov	r4, r0
        break;
 800b16c:	e7ef      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b16e:	2101      	movs	r1, #1
 800b170:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b174:	f7ff fd24 	bl	800abc0 <RCCEx_PLL3_Config>
 800b178:	e7f7      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800b17a:	4626      	mov	r6, r4
 800b17c:	e7aa      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x424>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b17e:	2101      	movs	r1, #1
 800b180:	f105 0008 	add.w	r0, r5, #8
 800b184:	f7ff fca4 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b188:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b18a:	b9fc      	cbnz	r4, 800b1cc <HAL_RCCEx_PeriphCLKConfig+0x51c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b18c:	4a10      	ldr	r2, [pc, #64]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800b18e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b190:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b192:	f023 0307 	bic.w	r3, r3, #7
 800b196:	430b      	orrs	r3, r1
 800b198:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	075f      	lsls	r7, r3, #29
 800b19e:	d52e      	bpl.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	f200 8166 	bhi.w	800b476 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800b1aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b1ae:	001d      	.short	0x001d
 800b1b0:	015e0017 	.word	0x015e0017
 800b1b4:	001d001d 	.word	0x001d001d
 800b1b8:	001d      	.short	0x001d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b1c0:	f7ff fcfe 	bl	800abc0 <RCCEx_PLL3_Config>
 800b1c4:	e7e0      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b1c6:	2601      	movs	r6, #1
 800b1c8:	4634      	mov	r4, r6
 800b1ca:	e7e6      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800b1cc:	4626      	mov	r6, r4
 800b1ce:	e7e4      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	58024800 	.word	0x58024800
 800b1d8:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1dc:	2101      	movs	r1, #1
 800b1de:	f105 0008 	add.w	r0, r5, #8
 800b1e2:	f7ff fc75 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1e6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b1e8:	2c00      	cmp	r4, #0
 800b1ea:	f040 8147 	bne.w	800b47c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1ee:	4aa4      	ldr	r2, [pc, #656]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b1f0:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 800b1f4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b1f6:	f023 0307 	bic.w	r3, r3, #7
 800b1fa:	430b      	orrs	r3, r1
 800b1fc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	0698      	lsls	r0, r3, #26
 800b202:	d510      	bpl.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b204:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800b208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b20c:	f000 8154 	beq.w	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b210:	f200 8138 	bhi.w	800b484 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 813e 	beq.w	800b496 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800b21a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b21e:	f000 8144 	beq.w	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 800b222:	2601      	movs	r6, #1
 800b224:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b226:	682b      	ldr	r3, [r5, #0]
 800b228:	0659      	lsls	r1, r3, #25
 800b22a:	d510      	bpl.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b22c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800b230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b234:	f000 8162 	beq.w	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800b238:	f200 8146 	bhi.w	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x818>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 814c 	beq.w	800b4da <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800b242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b246:	f000 8152 	beq.w	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b24a:	2601      	movs	r6, #1
 800b24c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b24e:	682b      	ldr	r3, [r5, #0]
 800b250:	061a      	lsls	r2, r3, #24
 800b252:	d510      	bpl.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b254:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800b258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b25c:	f000 8170 	beq.w	800b540 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800b260:	f200 8154 	bhi.w	800b50c <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 815a 	beq.w	800b51e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 800b26a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b26e:	f000 8160 	beq.w	800b532 <HAL_RCCEx_PeriphCLKConfig+0x882>
 800b272:	2601      	movs	r6, #1
 800b274:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	071b      	lsls	r3, r3, #28
 800b27a:	d514      	bpl.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b27c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800b280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b284:	d107      	bne.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b286:	2102      	movs	r1, #2
 800b288:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b28c:	f7ff fc98 	bl	800abc0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b290:	2800      	cmp	r0, #0
 800b292:	bf18      	it	ne
 800b294:	2601      	movne	r6, #1
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b296:	4a7a      	ldr	r2, [pc, #488]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b298:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800b29c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b29e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	06df      	lsls	r7, r3, #27
 800b2aa:	d514      	bpl.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b2ac:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800b2b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2b4:	d107      	bne.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x616>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2b6:	2102      	movs	r1, #2
 800b2b8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2bc:	f7ff fc80 	bl	800abc0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	bf18      	it	ne
 800b2c4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2c6:	4a6e      	ldr	r2, [pc, #440]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b2c8:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800b2cc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b2ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2d2:	430b      	orrs	r3, r1
 800b2d4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2d6:	682b      	ldr	r3, [r5, #0]
 800b2d8:	0318      	lsls	r0, r3, #12
 800b2da:	d51b      	bpl.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x664>
    switch (PeriphClkInit->AdcClockSelection)
 800b2dc:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b2e0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b2e4:	f000 8134 	beq.w	800b550 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800b2e8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b2ec:	d007      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b2ee:	2900      	cmp	r1, #0
 800b2f0:	f040 8134 	bne.w	800b55c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f4:	f105 0008 	add.w	r0, r5, #8
 800b2f8:	f7ff fbea 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2fc:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b2fe:	2c00      	cmp	r4, #0
 800b300:	f040 812f 	bne.w	800b562 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b304:	4a5e      	ldr	r2, [pc, #376]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b306:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b30a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b30c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b310:	430b      	orrs	r3, r1
 800b312:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	0359      	lsls	r1, r3, #13
 800b318:	d50f      	bpl.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->UsbClockSelection)
 800b31a:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800b31e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b322:	f000 812f 	beq.w	800b584 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 800b326:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b32a:	f000 8121 	beq.w	800b570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b32e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b332:	f000 8118 	beq.w	800b566 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 800b336:	2601      	movs	r6, #1
 800b338:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	03da      	lsls	r2, r3, #15
 800b33e:	d509      	bpl.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b340:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8127 	beq.w	800b596 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800b348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b34c:	f000 8131 	beq.w	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800b350:	2601      	movs	r6, #1
 800b352:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	d507      	bpl.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b35a:	2102      	movs	r1, #2
 800b35c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b360:	f7ff fc2e 	bl	800abc0 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800b364:	2800      	cmp	r0, #0
 800b366:	bf18      	it	ne
 800b368:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b36a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800b36e:	039f      	lsls	r7, r3, #14
 800b370:	f140 8137 	bpl.w	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x932>
    switch (PeriphClkInit->RngClockSelection)
 800b374:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800b376:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b37a:	f000 8134 	beq.w	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x936>
 800b37e:	f200 8121 	bhi.w	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800b382:	2800      	cmp	r0, #0
 800b384:	f000 8124 	beq.w	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x920>
 800b388:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b38a:	02de      	lsls	r6, r3, #11
 800b38c:	d506      	bpl.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b38e:	483c      	ldr	r0, [pc, #240]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b390:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800b392:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b394:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b398:	4332      	orrs	r2, r6
 800b39a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b39c:	0298      	lsls	r0, r3, #10
 800b39e:	d506      	bpl.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3a0:	4837      	ldr	r0, [pc, #220]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b3a2:	6eae      	ldr	r6, [r5, #104]	@ 0x68
 800b3a4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b3a6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b3aa:	4332      	orrs	r2, r6
 800b3ac:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3ae:	005a      	lsls	r2, r3, #1
 800b3b0:	d509      	bpl.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3b2:	4a33      	ldr	r2, [pc, #204]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b3b4:	6910      	ldr	r0, [r2, #16]
 800b3b6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b3ba:	6110      	str	r0, [r2, #16]
 800b3bc:	6910      	ldr	r0, [r2, #16]
 800b3be:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 800b3c2:	4330      	orrs	r0, r6
 800b3c4:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	da06      	bge.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3ca:	482d      	ldr	r0, [pc, #180]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b3cc:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 800b3ce:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800b3d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b3d4:	4332      	orrs	r2, r6
 800b3d6:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3d8:	021f      	lsls	r7, r3, #8
 800b3da:	d507      	bpl.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b3dc:	4a28      	ldr	r2, [pc, #160]	@ (800b480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800b3de:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 800b3e2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b3e4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b3e8:	4303      	orrs	r3, r0
 800b3ea:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b3ec:	07ce      	lsls	r6, r1, #31
 800b3ee:	d506      	bpl.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x74e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	f105 0008 	add.w	r0, r5, #8
 800b3f6:	f7ff fb6b 	bl	800aad0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	b900      	cbnz	r0, 800b400 <HAL_RCCEx_PeriphCLKConfig+0x750>
    switch (PeriphClkInit->RngClockSelection)
 800b3fe:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b400:	686b      	ldr	r3, [r5, #4]
 800b402:	079c      	lsls	r4, r3, #30
 800b404:	d506      	bpl.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x764>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b406:	2101      	movs	r1, #1
 800b408:	f105 0008 	add.w	r0, r5, #8
 800b40c:	f7ff fb60 	bl	800aad0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b410:	4606      	mov	r6, r0
 800b412:	b900      	cbnz	r0, 800b416 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch (PeriphClkInit->RngClockSelection)
 800b414:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b416:	686b      	ldr	r3, [r5, #4]
 800b418:	0758      	lsls	r0, r3, #29
 800b41a:	d506      	bpl.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b41c:	2102      	movs	r1, #2
 800b41e:	f105 0008 	add.w	r0, r5, #8
 800b422:	f7ff fb55 	bl	800aad0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b426:	4604      	mov	r4, r0
 800b428:	b900      	cbnz	r0, 800b42c <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (PeriphClkInit->RngClockSelection)
 800b42a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b42c:	686b      	ldr	r3, [r5, #4]
 800b42e:	0719      	lsls	r1, r3, #28
 800b430:	d506      	bpl.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x790>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b432:	2100      	movs	r1, #0
 800b434:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b438:	f7ff fbc2 	bl	800abc0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b43c:	4606      	mov	r6, r0
 800b43e:	b900      	cbnz	r0, 800b442 <HAL_RCCEx_PeriphCLKConfig+0x792>
    switch (PeriphClkInit->RngClockSelection)
 800b440:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b442:	686b      	ldr	r3, [r5, #4]
 800b444:	06da      	lsls	r2, r3, #27
 800b446:	d506      	bpl.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b448:	2101      	movs	r1, #1
 800b44a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b44e:	f7ff fbb7 	bl	800abc0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b452:	4604      	mov	r4, r0
 800b454:	b900      	cbnz	r0, 800b458 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 800b456:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b458:	686b      	ldr	r3, [r5, #4]
 800b45a:	069b      	lsls	r3, r3, #26
 800b45c:	f100 80c9 	bmi.w	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x942>
  if (status == HAL_OK)
 800b460:	1e20      	subs	r0, r4, #0
 800b462:	bf18      	it	ne
 800b464:	2001      	movne	r0, #1
}
 800b466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b46a:	2101      	movs	r1, #1
 800b46c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b470:	f7ff fba6 	bl	800abc0 <RCCEx_PLL3_Config>
 800b474:	e6b7      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b476:	2601      	movs	r6, #1
 800b478:	4634      	mov	r4, r6
 800b47a:	e6c0      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800b47c:	4626      	mov	r6, r4
 800b47e:	e6be      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800b480:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b484:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b488:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b48c:	d003      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800b48e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b492:	f47f aec6 	bne.w	800b222 <HAL_RCCEx_PeriphCLKConfig+0x572>
    if (ret == HAL_OK)
 800b496:	b9ac      	cbnz	r4, 800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b498:	4a5b      	ldr	r2, [pc, #364]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b49a:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b49e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b4a0:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b4a8:	e6bd      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x576>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	f105 0008 	add.w	r0, r5, #8
 800b4b0:	f7ff fb0e 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4b4:	4604      	mov	r4, r0
        break;
 800b4b6:	e7ee      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4b8:	2102      	movs	r1, #2
 800b4ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b4be:	f7ff fb7f 	bl	800abc0 <RCCEx_PLL3_Config>
 800b4c2:	e7f7      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x804>
 800b4c4:	4626      	mov	r6, r4
 800b4c6:	e6ae      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b4c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b4cc:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b4d0:	d003      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800b4d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4d6:	f47f aeb8 	bne.w	800b24a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    if (ret == HAL_OK)
 800b4da:	b9ac      	cbnz	r4, 800b508 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4dc:	4a4a      	ldr	r2, [pc, #296]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4de:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800b4e2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b4e4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b4e8:	430b      	orrs	r3, r1
 800b4ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4ec:	e6af      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x59e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	f105 0008 	add.w	r0, r5, #8
 800b4f4:	f7ff faec 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4f8:	4604      	mov	r4, r0
        break;
 800b4fa:	e7ee      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x82a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4fc:	2102      	movs	r1, #2
 800b4fe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b502:	f7ff fb5d 	bl	800abc0 <RCCEx_PLL3_Config>
 800b506:	e7f7      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800b508:	4626      	mov	r6, r4
 800b50a:	e6a0      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b50c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b510:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b514:	d003      	beq.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 800b516:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b51a:	f47f aeaa 	bne.w	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if (ret == HAL_OK)
 800b51e:	b9ac      	cbnz	r4, 800b54c <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b520:	4a39      	ldr	r2, [pc, #228]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b522:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800b526:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b528:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b52c:	430b      	orrs	r3, r1
 800b52e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b530:	e6a1      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b532:	2100      	movs	r1, #0
 800b534:	f105 0008 	add.w	r0, r5, #8
 800b538:	f7ff faca 	bl	800aad0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b53c:	4604      	mov	r4, r0
        break;
 800b53e:	e7ee      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x86e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b540:	2102      	movs	r1, #2
 800b542:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b546:	f7ff fb3b 	bl	800abc0 <RCCEx_PLL3_Config>
 800b54a:	e7f7      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b54c:	4626      	mov	r6, r4
 800b54e:	e692      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b550:	2102      	movs	r1, #2
 800b552:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b556:	f7ff fb33 	bl	800abc0 <RCCEx_PLL3_Config>
 800b55a:	e6cf      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
    switch (PeriphClkInit->AdcClockSelection)
 800b55c:	2601      	movs	r6, #1
 800b55e:	4634      	mov	r4, r6
 800b560:	e6d8      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b562:	4626      	mov	r6, r4
 800b564:	e6d6      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x664>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b566:	4a28      	ldr	r2, [pc, #160]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b568:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b56a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b56e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b570:	b97c      	cbnz	r4, 800b592 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b572:	4a25      	ldr	r2, [pc, #148]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b574:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 800b578:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b57a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b57e:	430b      	orrs	r3, r1
 800b580:	6553      	str	r3, [r2, #84]	@ 0x54
 800b582:	e6da      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b584:	2101      	movs	r1, #1
 800b586:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b58a:	f7ff fb19 	bl	800abc0 <RCCEx_PLL3_Config>
 800b58e:	4604      	mov	r4, r0
        break;
 800b590:	e7ee      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b592:	4626      	mov	r6, r4
 800b594:	e6d1      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b596:	4a1c      	ldr	r2, [pc, #112]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b598:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b59a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b59e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b5a0:	b974      	cbnz	r4, 800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b5a2:	4a19      	ldr	r2, [pc, #100]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5a4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b5a6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b5a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b5b0:	e6d0      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5b2:	2102      	movs	r1, #2
 800b5b4:	f105 0008 	add.w	r0, r5, #8
 800b5b8:	f7ff fa8a 	bl	800aad0 <RCCEx_PLL2_Config>
 800b5bc:	4604      	mov	r4, r0
        break;
 800b5be:	e7ef      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b5c0:	4626      	mov	r6, r4
 800b5c2:	e6c7      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->RngClockSelection)
 800b5c4:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b5c8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b5cc:	f47f aedc 	bne.w	800b388 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if (ret == HAL_OK)
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	f47f aeda 	bne.w	800b38a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b5d6:	4c0c      	ldr	r4, [pc, #48]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b5de:	4302      	orrs	r2, r0
 800b5e0:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b5e2:	4634      	mov	r4, r6
 800b5e4:	e6d1      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5e6:	4f08      	ldr	r7, [pc, #32]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b5ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b5f0:	e7ee      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x920>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b5f8:	f7ff fae2 	bl	800abc0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f43f af2f 	beq.w	800b460 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  return HAL_ERROR;
 800b602:	2001      	movs	r0, #1
 800b604:	e72f      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800b606:	bf00      	nop
 800b608:	58024400 	.word	0x58024400

0800b60c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b60c:	4770      	bx	lr
	...

0800b610 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b610:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b614:	2b01      	cmp	r3, #1
 800b616:	d13b      	bne.n	800b690 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b618:	2302      	movs	r3, #2
 800b61a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b61e:	6803      	ldr	r3, [r0, #0]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	f042 0201 	orr.w	r2, r2, #1
 800b626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b628:	4a1a      	ldr	r2, [pc, #104]	@ (800b694 <HAL_TIM_Base_Start_IT+0x84>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d022      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b62e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b632:	d01f      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b634:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b638:	4293      	cmp	r3, r2
 800b63a:	d01b      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b63c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b640:	4293      	cmp	r3, r2
 800b642:	d017      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b644:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b648:	4293      	cmp	r3, r2
 800b64a:	d013      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b64c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b650:	4293      	cmp	r3, r2
 800b652:	d00f      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b654:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b658:	4293      	cmp	r3, r2
 800b65a:	d00b      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b65c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b660:	4293      	cmp	r3, r2
 800b662:	d007      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b664:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 800b668:	4293      	cmp	r3, r2
 800b66a:	d003      	beq.n	800b674 <HAL_TIM_Base_Start_IT+0x64>
 800b66c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b670:	4293      	cmp	r3, r2
 800b672:	d107      	bne.n	800b684 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b674:	6899      	ldr	r1, [r3, #8]
 800b676:	4a08      	ldr	r2, [pc, #32]	@ (800b698 <HAL_TIM_Base_Start_IT+0x88>)
 800b678:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b67a:	2a06      	cmp	r2, #6
 800b67c:	d006      	beq.n	800b68c <HAL_TIM_Base_Start_IT+0x7c>
 800b67e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b682:	d003      	beq.n	800b68c <HAL_TIM_Base_Start_IT+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	f042 0201 	orr.w	r2, r2, #1
 800b68a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b68c:	2000      	movs	r0, #0
 800b68e:	4770      	bx	lr
    return HAL_ERROR;
 800b690:	2001      	movs	r0, #1
}
 800b692:	4770      	bx	lr
 800b694:	40010000 	.word	0x40010000
 800b698:	00010007 	.word	0x00010007

0800b69c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b69c:	4603      	mov	r3, r0
 800b69e:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b6a0:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b6a4:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b6a8:	f893 5044 	ldrb.w	r5, [r3, #68]	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b6ac:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b6ae:	f893 4045 	ldrb.w	r4, [r3, #69]	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b6b2:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b6b4:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b6b6:	b2e4      	uxtb	r4, r4

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b6b8:	b9e1      	cbnz	r1, 800b6f4 <HAL_TIM_Encoder_Start_IT+0x58>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6ba:	2801      	cmp	r0, #1
 800b6bc:	d159      	bne.n	800b772 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b6be:	2d01      	cmp	r5, #1
 800b6c0:	d117      	bne.n	800b6f2 <HAL_TIM_Encoder_Start_IT+0x56>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b6cc:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6ce:	6a11      	ldr	r1, [r2, #32]
 800b6d0:	f021 0101 	bic.w	r1, r1, #1
 800b6d4:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6d6:	6a11      	ldr	r1, [r2, #32]
 800b6d8:	f041 0101 	orr.w	r1, r1, #1
 800b6dc:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b6de:	68d1      	ldr	r1, [r2, #12]
 800b6e0:	f041 0102 	orr.w	r1, r1, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b6e4:	60d1      	str	r1, [r2, #12]
  return HAL_OK;
 800b6e6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	f043 0301 	orr.w	r3, r3, #1
 800b6f0:	6013      	str	r3, [r2, #0]
}
 800b6f2:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800b6f4:	2904      	cmp	r1, #4
 800b6f6:	d115      	bne.n	800b724 <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6f8:	2a01      	cmp	r2, #1
 800b6fa:	d13a      	bne.n	800b772 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b6fc:	2c01      	cmp	r4, #1
 800b6fe:	d138      	bne.n	800b772 <HAL_TIM_Encoder_Start_IT+0xd6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b700:	2202      	movs	r2, #2
 800b702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b70a:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 800b70c:	6a11      	ldr	r1, [r2, #32]
 800b70e:	f021 0110 	bic.w	r1, r1, #16
 800b712:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b714:	6a11      	ldr	r1, [r2, #32]
 800b716:	f041 0110 	orr.w	r1, r1, #16
 800b71a:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b71c:	68d1      	ldr	r1, [r2, #12]
 800b71e:	f041 0104 	orr.w	r1, r1, #4
 800b722:	e7df      	b.n	800b6e4 <HAL_TIM_Encoder_Start_IT+0x48>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b724:	2801      	cmp	r0, #1
 800b726:	d124      	bne.n	800b772 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b728:	2a01      	cmp	r2, #1
 800b72a:	d1e2      	bne.n	800b6f2 <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b72c:	2d01      	cmp	r5, #1
 800b72e:	d1e0      	bne.n	800b6f2 <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b730:	2c01      	cmp	r4, #1
 800b732:	d1de      	bne.n	800b6f2 <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b734:	2202      	movs	r2, #2
 800b736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b73a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b73e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b746:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 800b748:	6a11      	ldr	r1, [r2, #32]
 800b74a:	f021 0101 	bic.w	r1, r1, #1
 800b74e:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b750:	6a11      	ldr	r1, [r2, #32]
 800b752:	f041 0101 	orr.w	r1, r1, #1
 800b756:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 800b758:	6a11      	ldr	r1, [r2, #32]
 800b75a:	f021 0110 	bic.w	r1, r1, #16
 800b75e:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b760:	6a11      	ldr	r1, [r2, #32]
 800b762:	f041 0110 	orr.w	r1, r1, #16
 800b766:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b768:	68d1      	ldr	r1, [r2, #12]
 800b76a:	f041 0102 	orr.w	r1, r1, #2
 800b76e:	60d1      	str	r1, [r2, #12]
 800b770:	e7d4      	b.n	800b71c <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 800b772:	2001      	movs	r0, #1
 800b774:	e7bd      	b.n	800b6f2 <HAL_TIM_Encoder_Start_IT+0x56>

0800b776 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800b776:	4770      	bx	lr

0800b778 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800b778:	4770      	bx	lr

0800b77a <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800b77a:	4770      	bx	lr

0800b77c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b77c:	6803      	ldr	r3, [r0, #0]
 800b77e:	691a      	ldr	r2, [r3, #16]
 800b780:	0791      	lsls	r1, r2, #30
{
 800b782:	b510      	push	{r4, lr}
 800b784:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b786:	d50f      	bpl.n	800b7a8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b788:	68da      	ldr	r2, [r3, #12]
 800b78a:	0792      	lsls	r2, r2, #30
 800b78c:	d50c      	bpl.n	800b7a8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b78e:	f06f 0202 	mvn.w	r2, #2
 800b792:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b794:	2201      	movs	r2, #1
 800b796:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	0799      	lsls	r1, r3, #30
 800b79c:	f000 8085 	beq.w	800b8aa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b7a0:	f7f5 f854 	bl	800084c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	691a      	ldr	r2, [r3, #16]
 800b7ac:	0752      	lsls	r2, r2, #29
 800b7ae:	d510      	bpl.n	800b7d2 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	0750      	lsls	r0, r2, #29
 800b7b4:	d50d      	bpl.n	800b7d2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7b6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7be:	2202      	movs	r2, #2
 800b7c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b7c8:	d075      	beq.n	800b8b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ca:	f7f5 f83f 	bl	800084c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	691a      	ldr	r2, [r3, #16]
 800b7d6:	0711      	lsls	r1, r2, #28
 800b7d8:	d50f      	bpl.n	800b7fa <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7da:	68da      	ldr	r2, [r3, #12]
 800b7dc:	0712      	lsls	r2, r2, #28
 800b7de:	d50c      	bpl.n	800b7fa <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7e0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b7e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7e8:	2204      	movs	r2, #4
 800b7ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	079b      	lsls	r3, r3, #30
 800b7f0:	d067      	beq.n	800b8c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b7f2:	f7f5 f82b 	bl	800084c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	691a      	ldr	r2, [r3, #16]
 800b7fe:	06d0      	lsls	r0, r2, #27
 800b800:	d510      	bpl.n	800b824 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	06d1      	lsls	r1, r2, #27
 800b806:	d50d      	bpl.n	800b824 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b808:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800b80c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b80e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b810:	2208      	movs	r2, #8
 800b812:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b814:	69db      	ldr	r3, [r3, #28]
 800b816:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b81a:	d058      	beq.n	800b8ce <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800b81c:	f7f5 f816 	bl	800084c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b820:	2300      	movs	r3, #0
 800b822:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	07d2      	lsls	r2, r2, #31
 800b82a:	d508      	bpl.n	800b83e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b82c:	68da      	ldr	r2, [r3, #12]
 800b82e:	07d0      	lsls	r0, r2, #31
 800b830:	d505      	bpl.n	800b83e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b832:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b836:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b838:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b83a:	f7f5 fd0b 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	691a      	ldr	r2, [r3, #16]
 800b842:	0611      	lsls	r1, r2, #24
 800b844:	d508      	bpl.n	800b858 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	0612      	lsls	r2, r2, #24
 800b84a:	d505      	bpl.n	800b858 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b84c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800b850:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b852:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b854:	f000 f987 	bl	800bb66 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	05d0      	lsls	r0, r2, #23
 800b85e:	d508      	bpl.n	800b872 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	0611      	lsls	r1, r2, #24
 800b864:	d505      	bpl.n	800b872 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b866:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b86a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b86c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b86e:	f000 f97b 	bl	800bb68 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	691a      	ldr	r2, [r3, #16]
 800b876:	0652      	lsls	r2, r2, #25
 800b878:	d508      	bpl.n	800b88c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b87a:	68da      	ldr	r2, [r3, #12]
 800b87c:	0650      	lsls	r0, r2, #25
 800b87e:	d505      	bpl.n	800b88c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b880:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800b884:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b886:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b888:	f7ff ff77 	bl	800b77a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	691a      	ldr	r2, [r3, #16]
 800b890:	0691      	lsls	r1, r2, #26
 800b892:	d522      	bpl.n	800b8da <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b894:	68da      	ldr	r2, [r3, #12]
 800b896:	0692      	lsls	r2, r2, #26
 800b898:	d51f      	bpl.n	800b8da <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b89a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b89e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8a0:	611a      	str	r2, [r3, #16]
}
 800b8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b8a6:	f000 b95d 	b.w	800bb64 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8aa:	f7ff ff64 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff ff62 	bl	800b778 <HAL_TIM_PWM_PulseFinishedCallback>
 800b8b4:	e776      	b.n	800b7a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8b6:	f7ff ff5e 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f7ff ff5c 	bl	800b778 <HAL_TIM_PWM_PulseFinishedCallback>
 800b8c0:	e785      	b.n	800b7ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c2:	f7ff ff58 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7ff ff56 	bl	800b778 <HAL_TIM_PWM_PulseFinishedCallback>
 800b8cc:	e793      	b.n	800b7f6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ce:	f7ff ff52 	bl	800b776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7ff ff50 	bl	800b778 <HAL_TIM_PWM_PulseFinishedCallback>
 800b8d8:	e7a2      	b.n	800b820 <HAL_TIM_IRQHandler+0xa4>
}
 800b8da:	bd10      	pop	{r4, pc}

0800b8dc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8dc:	4a34      	ldr	r2, [pc, #208]	@ (800b9b0 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 800b8de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8e0:	4290      	cmp	r0, r2
 800b8e2:	d012      	beq.n	800b90a <TIM_Base_SetConfig+0x2e>
 800b8e4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b8e8:	d00f      	beq.n	800b90a <TIM_Base_SetConfig+0x2e>
 800b8ea:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b8ee:	4290      	cmp	r0, r2
 800b8f0:	d00b      	beq.n	800b90a <TIM_Base_SetConfig+0x2e>
 800b8f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b8f6:	4290      	cmp	r0, r2
 800b8f8:	d007      	beq.n	800b90a <TIM_Base_SetConfig+0x2e>
 800b8fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b8fe:	4290      	cmp	r0, r2
 800b900:	d003      	beq.n	800b90a <TIM_Base_SetConfig+0x2e>
 800b902:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b906:	4290      	cmp	r0, r2
 800b908:	d119      	bne.n	800b93e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800b90a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b910:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b912:	4a27      	ldr	r2, [pc, #156]	@ (800b9b0 <TIM_Base_SetConfig+0xd4>)
 800b914:	4290      	cmp	r0, r2
 800b916:	d025      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b918:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b91c:	d022      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b91e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b922:	4290      	cmp	r0, r2
 800b924:	d01e      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b926:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b92a:	4290      	cmp	r0, r2
 800b92c:	d01a      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b92e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b932:	4290      	cmp	r0, r2
 800b934:	d016      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b936:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b93a:	4290      	cmp	r0, r2
 800b93c:	d012      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b93e:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b4 <TIM_Base_SetConfig+0xd8>)
 800b940:	4290      	cmp	r0, r2
 800b942:	d00f      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b944:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b948:	4290      	cmp	r0, r2
 800b94a:	d00b      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b94c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b950:	4290      	cmp	r0, r2
 800b952:	d007      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b954:	f5a2 42d0 	sub.w	r2, r2, #26624	@ 0x6800
 800b958:	4290      	cmp	r0, r2
 800b95a:	d003      	beq.n	800b964 <TIM_Base_SetConfig+0x88>
 800b95c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b960:	4290      	cmp	r0, r2
 800b962:	d103      	bne.n	800b96c <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
 800b964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b968:	68ca      	ldr	r2, [r1, #12]
 800b96a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b96c:	694a      	ldr	r2, [r1, #20]
 800b96e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b972:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b974:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b976:	688b      	ldr	r3, [r1, #8]
 800b978:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b97a:	680b      	ldr	r3, [r1, #0]
 800b97c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b97e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b0 <TIM_Base_SetConfig+0xd4>)
 800b980:	4298      	cmp	r0, r3
 800b982:	d00f      	beq.n	800b9a4 <TIM_Base_SetConfig+0xc8>
 800b984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b988:	4298      	cmp	r0, r3
 800b98a:	d00b      	beq.n	800b9a4 <TIM_Base_SetConfig+0xc8>
 800b98c:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800b990:	4298      	cmp	r0, r3
 800b992:	d007      	beq.n	800b9a4 <TIM_Base_SetConfig+0xc8>
 800b994:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b998:	4298      	cmp	r0, r3
 800b99a:	d003      	beq.n	800b9a4 <TIM_Base_SetConfig+0xc8>
 800b99c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9a0:	4298      	cmp	r0, r3
 800b9a2:	d101      	bne.n	800b9a8 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 800b9a4:	690b      	ldr	r3, [r1, #16]
 800b9a6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	6143      	str	r3, [r0, #20]
}
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	40010000 	.word	0x40010000
 800b9b4:	40014000 	.word	0x40014000

0800b9b8 <HAL_TIM_Base_Init>:
{
 800b9b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	b350      	cbz	r0, 800ba14 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b9be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b9c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b9c6:	b91b      	cbnz	r3, 800b9d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b9c8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b9cc:	f7ff fe1e 	bl	800b60c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9d2:	6820      	ldr	r0, [r4, #0]
 800b9d4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9da:	f7ff ff7f 	bl	800b8dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9de:	2301      	movs	r3, #1
  return HAL_OK;
 800b9e0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9e2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b9ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b9ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b9f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b9f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ba02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ba06:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ba0a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ba0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800ba12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ba14:	2001      	movs	r0, #1
 800ba16:	e7fc      	b.n	800ba12 <HAL_TIM_Base_Init+0x5a>

0800ba18 <HAL_TIM_Encoder_Init>:
{
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	460d      	mov	r5, r1
  if (htim == NULL)
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d04c      	beq.n	800babc <HAL_TIM_Encoder_Init+0xa4>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ba22:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ba26:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ba2a:	b91b      	cbnz	r3, 800ba34 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800ba2c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800ba30:	f7f6 f8f0 	bl	8001c14 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ba34:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ba36:	2302      	movs	r3, #2
 800ba38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ba3c:	f851 0b04 	ldr.w	r0, [r1], #4
 800ba40:	6883      	ldr	r3, [r0, #8]
 800ba42:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ba46:	f023 0307 	bic.w	r3, r3, #7
 800ba4a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba4c:	f7ff ff46 	bl	800b8dc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800ba50:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800ba52:	682a      	ldr	r2, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 800ba54:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ba56:	69ae      	ldr	r6, [r5, #24]
  tmpsmcr |= sConfig->EncoderMode;
 800ba58:	4311      	orrs	r1, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ba5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ba5e:	68aa      	ldr	r2, [r5, #8]
  tmpccer = htim->Instance->CCER;
 800ba60:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ba62:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ba66:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ba6a:	69ee      	ldr	r6, [r5, #28]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ba6c:	f027 07aa 	bic.w	r7, r7, #170	@ 0xaa
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ba70:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba72:	692b      	ldr	r3, [r5, #16]
 800ba74:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ba76:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba7a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800ba7e:	68ee      	ldr	r6, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ba80:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba84:	4333      	orrs	r3, r6
 800ba86:	6a2e      	ldr	r6, [r5, #32]
 800ba88:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba8c:	696e      	ldr	r6, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba8e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba90:	686a      	ldr	r2, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 800ba92:	6081      	str	r1, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba94:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800ba98:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba9a:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba9c:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 800ba9e:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 800baa0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baa2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800baa6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800baaa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800baae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bab2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800bab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800baba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800babc:	2001      	movs	r0, #1
 800babe:	e7fc      	b.n	800baba <HAL_TIM_Encoder_Init+0xa2>

0800bac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bac0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bac2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800bac6:	4604      	mov	r4, r0
 800bac8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d043      	beq.n	800bb56 <HAL_TIMEx_MasterConfigSynchronization+0x96>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bace:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bad0:	4d21      	ldr	r5, [pc, #132]	@ (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bad2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bad6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800bad8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bada:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800badc:	d002      	beq.n	800bae4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800bade:	4e1f      	ldr	r6, [pc, #124]	@ (800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800bae0:	42b3      	cmp	r3, r6
 800bae2:	d103      	bne.n	800baec <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bae4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bae8:	684e      	ldr	r6, [r1, #4]
 800baea:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baec:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800baee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf2:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baf4:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800baf8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bafa:	d021      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bafc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb00:	d01e      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb02:	4a17      	ldr	r2, [pc, #92]	@ (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d01b      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d017      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d013      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb18:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00f      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb20:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00b      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb28:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d007      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb30:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d003      	beq.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 800bb38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d104      	bne.n	800bb4a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb40:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb42:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb46:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb4a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800bb4c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bb4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800bb52:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	40010000 	.word	0x40010000
 800bb5c:	40010400 	.word	0x40010400
 800bb60:	40000400 	.word	0x40000400

0800bb64 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800bb64:	4770      	bx	lr

0800bb66 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800bb66:	4770      	bx	lr

0800bb68 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800bb68:	4770      	bx	lr

0800bb6a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800bb6a:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800bb6c:	f002 fa6c 	bl	800e048 <pvTimerGetTimerID>

  if (callb != NULL) {
 800bb70:	b120      	cbz	r0, 800bb7c <TimerCallback+0x12>
    callb->func (callb->arg);
 800bb72:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
 800bb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 800bb7a:	4718      	bx	r3
}
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <SysTick_Handler>:
void SysTick_Handler (void) {
 800bb7e:	b508      	push	{r3, lr}
  SysTick->CTRL;
 800bb80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bb84:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bb86:	f001 ff1f 	bl	800d9c8 <xTaskGetSchedulerState>
 800bb8a:	2801      	cmp	r0, #1
 800bb8c:	d003      	beq.n	800bb96 <SysTick_Handler+0x18>
}
 800bb8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800bb92:	f000 bc6f 	b.w	800c474 <xPortSysTickHandler>
}
 800bb96:	bd08      	pop	{r3, pc}

0800bb98 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb98:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800bb9c:	b92b      	cbnz	r3, 800bbaa <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 800bb9e:	4b06      	ldr	r3, [pc, #24]	@ (800bbb8 <osKernelInitialize+0x20>)
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	b928      	cbnz	r0, 800bbb0 <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 800bba4:	2201      	movs	r2, #1
 800bba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bba8:	4770      	bx	lr
    stat = osErrorISR;
 800bbaa:	f06f 0005 	mvn.w	r0, #5
 800bbae:	4770      	bx	lr
      stat = osError;
 800bbb0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	2401af14 	.word	0x2401af14

0800bbbc <osKernelStart>:
osStatus_t osKernelStart (void) {
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
 800bbc2:	b95c      	cbnz	r4, 800bbdc <osKernelStart+0x20>
    if (KernelState == osKernelReady) {
 800bbc4:	4b08      	ldr	r3, [pc, #32]	@ (800bbe8 <osKernelStart+0x2c>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	2a01      	cmp	r2, #1
 800bbca:	d10a      	bne.n	800bbe2 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbcc:	4a07      	ldr	r2, [pc, #28]	@ (800bbec <osKernelStart+0x30>)
 800bbce:	77d4      	strb	r4, [r2, #31]
      KernelState = osKernelRunning;
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800bbd4:	f001 fd94 	bl	800d700 <vTaskStartScheduler>
      stat = osOK;
 800bbd8:	4620      	mov	r0, r4
}
 800bbda:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800bbdc:	f06f 0005 	mvn.w	r0, #5
 800bbe0:	e7fb      	b.n	800bbda <osKernelStart+0x1e>
      stat = osError;
 800bbe2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800bbe6:	e7f8      	b.n	800bbda <osKernelStart+0x1e>
 800bbe8:	2401af14 	.word	0x2401af14
 800bbec:	e000ed00 	.word	0xe000ed00

0800bbf0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	b087      	sub	sp, #28
  hTask = NULL;
 800bbf6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bbf8:	460b      	mov	r3, r1
  hTask = NULL;
 800bbfa:	9205      	str	r2, [sp, #20]
 800bbfc:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 800bc00:	b9ca      	cbnz	r2, 800bc36 <osThreadNew+0x46>
 800bc02:	b1c0      	cbz	r0, 800bc36 <osThreadNew+0x46>
    if (attr != NULL) {
 800bc04:	b36c      	cbz	r4, 800bc62 <osThreadNew+0x72>
      if (attr->priority != osPriorityNone) {
 800bc06:	69a5      	ldr	r5, [r4, #24]
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	bf08      	it	eq
 800bc0c:	2518      	moveq	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc0e:	1e69      	subs	r1, r5, #1
 800bc10:	46ac      	mov	ip, r5
 800bc12:	2937      	cmp	r1, #55	@ 0x37
 800bc14:	d82a      	bhi.n	800bc6c <osThreadNew+0x7c>
 800bc16:	6861      	ldr	r1, [r4, #4]
 800bc18:	07c9      	lsls	r1, r1, #31
 800bc1a:	d427      	bmi.n	800bc6c <osThreadNew+0x7c>
      if (attr->stack_size > 0U) {
 800bc1c:	6966      	ldr	r6, [r4, #20]
 800bc1e:	b16e      	cbz	r6, 800bc3c <osThreadNew+0x4c>
        stack = attr->stack_size / sizeof(StackType_t);
 800bc20:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800bc22:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc24:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800bc28:	b157      	cbz	r7, 800bc40 <osThreadNew+0x50>
 800bc2a:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800bc2e:	d902      	bls.n	800bc36 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc30:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc32:	b104      	cbz	r4, 800bc36 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc34:	b9e6      	cbnz	r6, 800bc70 <osThreadNew+0x80>
  return ((osThreadId_t)hTask);
 800bc36:	9805      	ldr	r0, [sp, #20]
}
 800bc38:	b007      	add	sp, #28
 800bc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800bc3c:	2280      	movs	r2, #128	@ 0x80
 800bc3e:	e7f0      	b.n	800bc22 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc40:	f1be 0f00 	cmp.w	lr, #0
 800bc44:	d1f7      	bne.n	800bc36 <osThreadNew+0x46>
      if (mem == 0) {
 800bc46:	6924      	ldr	r4, [r4, #16]
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	d1f4      	bne.n	800bc36 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc4c:	ac05      	add	r4, sp, #20
 800bc4e:	b292      	uxth	r2, r2
 800bc50:	e9cd c400 	strd	ip, r4, [sp]
 800bc54:	f001 fbce 	bl	800d3f4 <xTaskCreate>
 800bc58:	2801      	cmp	r0, #1
            hTask = NULL;
 800bc5a:	bf1c      	itt	ne
 800bc5c:	2300      	movne	r3, #0
 800bc5e:	9305      	strne	r3, [sp, #20]
 800bc60:	e7e9      	b.n	800bc36 <osThreadNew+0x46>
    name = NULL;
 800bc62:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800bc64:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800bc68:	2280      	movs	r2, #128	@ 0x80
 800bc6a:	e7ef      	b.n	800bc4c <osThreadNew+0x5c>
        return (NULL);
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	e7e3      	b.n	800bc38 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc70:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800bc74:	9500      	str	r5, [sp, #0]
 800bc76:	f001 fb85 	bl	800d384 <xTaskCreateStatic>
 800bc7a:	9005      	str	r0, [sp, #20]
 800bc7c:	e7db      	b.n	800bc36 <osThreadNew+0x46>

0800bc7e <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 800bc7e:	b508      	push	{r3, lr}
 800bc80:	f3ef 8205 	mrs	r2, IPSR
  if (IS_IRQ()) {
 800bc84:	b922      	cbnz	r2, 800bc90 <osDelay+0x12>
    if (ticks != 0U) {
 800bc86:	b108      	cbz	r0, 800bc8c <osDelay+0xe>
      vTaskDelay(ticks);
 800bc88:	f001 fcfa 	bl	800d680 <vTaskDelay>
    stat = osOK;
 800bc8c:	2000      	movs	r0, #0
}
 800bc8e:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800bc90:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 800bc94:	e7fb      	b.n	800bc8e <osDelay+0x10>
	...

0800bc98 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800bc98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	460e      	mov	r6, r1
 800bca0:	4690      	mov	r8, r2
 800bca2:	461d      	mov	r5, r3
 800bca4:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 800bca8:	b9a3      	cbnz	r3, 800bcd4 <osTimerNew+0x3c>
 800bcaa:	b198      	cbz	r0, 800bcd4 <osTimerNew+0x3c>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800bcac:	2008      	movs	r0, #8
 800bcae:	f000 fa01 	bl	800c0b4 <pvPortMalloc>

    if (callb != NULL) {
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	b170      	cbz	r0, 800bcd4 <osTimerNew+0x3c>
      callb->func = func;
      callb->arg  = argument;

      if (type == osTimerOnce) {
 800bcb6:	1e32      	subs	r2, r6, #0
      callb->arg  = argument;
 800bcb8:	e9c0 7800 	strd	r7, r8, [r0]
      if (type == osTimerOnce) {
 800bcbc:	bf18      	it	ne
 800bcbe:	2201      	movne	r2, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 800bcc0:	b17d      	cbz	r5, 800bce2 <osTimerNew+0x4a>
        if (attr->name != NULL) {
 800bcc2:	6828      	ldr	r0, [r5, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800bcc4:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 800bcc8:	b143      	cbz	r3, 800bcdc <osTimerNew+0x44>
 800bcca:	292b      	cmp	r1, #43	@ 0x2b
 800bccc:	d811      	bhi.n	800bcf2 <osTimerNew+0x5a>
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 fa88 	bl	800c1e4 <vPortFree>
  hTimer = NULL;
 800bcd4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 800bcd6:	b002      	add	sp, #8
 800bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bcdc:	2900      	cmp	r1, #0
 800bcde:	d1f6      	bne.n	800bcce <osTimerNew+0x36>
 800bce0:	4605      	mov	r5, r0
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800bce2:	4b09      	ldr	r3, [pc, #36]	@ (800bd08 <osTimerNew+0x70>)
 800bce4:	2101      	movs	r1, #1
 800bce6:	4628      	mov	r0, r5
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	4623      	mov	r3, r4
 800bcec:	f001 ffda 	bl	800dca4 <xTimerCreate>
 800bcf0:	e006      	b.n	800bd00 <osTimerNew+0x68>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	4b04      	ldr	r3, [pc, #16]	@ (800bd08 <osTimerNew+0x70>)
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	4623      	mov	r3, r4
 800bcfc:	f001 ffff 	bl	800dcfe <xTimerCreateStatic>
      if ((hTimer == NULL) && (callb != NULL)) {
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1e8      	bne.n	800bcd6 <osTimerNew+0x3e>
 800bd04:	e7e3      	b.n	800bcce <osTimerNew+0x36>
 800bd06:	bf00      	nop
 800bd08:	0800bb6b 	.word	0x0800bb6b

0800bd0c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800bd0c:	460a      	mov	r2, r1
 800bd0e:	b513      	push	{r0, r1, r4, lr}
 800bd10:	f3ef 8305 	mrs	r3, IPSR
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd14:	b95b      	cbnz	r3, 800bd2e <osTimerStart+0x22>
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 800bd16:	b168      	cbz	r0, 800bd34 <osTimerStart+0x28>
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800bd18:	2104      	movs	r1, #4
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	f002 f832 	bl	800dd84 <xTimerGenericCommand>
      stat = osOK;
 800bd20:	2801      	cmp	r0, #1
 800bd22:	bf14      	ite	ne
 800bd24:	f06f 0002 	mvnne.w	r0, #2
 800bd28:	2000      	moveq	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800bd2a:	b002      	add	sp, #8
 800bd2c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800bd2e:	f06f 0005 	mvn.w	r0, #5
 800bd32:	e7fa      	b.n	800bd2a <osTimerStart+0x1e>
    stat = osErrorParameter;
 800bd34:	f06f 0003 	mvn.w	r0, #3
 800bd38:	e7f7      	b.n	800bd2a <osTimerStart+0x1e>

0800bd3a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bd3a:	b570      	push	{r4, r5, r6, lr}
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800bd42:	b116      	cbz	r6, 800bd4a <osMutexNew+0x10>
  hMutex = NULL;
 800bd44:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800bd46:	4620      	mov	r0, r4
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800bd4a:	b110      	cbz	r0, 800bd52 <osMutexNew+0x18>
      type = attr->attr_bits;
 800bd4c:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800bd4e:	0733      	lsls	r3, r6, #28
 800bd50:	d4f8      	bmi.n	800bd44 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bd52:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800bd56:	b17d      	cbz	r5, 800bd78 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bd58:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800bd5c:	b151      	cbz	r1, 800bd74 <osMutexNew+0x3a>
 800bd5e:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd60:	d9f0      	bls.n	800bd44 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800bd62:	b1de      	cbz	r6, 800bd9c <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bd64:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bd66:	f000 fe8e 	bl	800ca86 <xQueueCreateMutexStatic>
 800bd6a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d0e9      	beq.n	800bd44 <osMutexNew+0xa>
          name = attr->name;
 800bd70:	682d      	ldr	r5, [r5, #0]
 800bd72:	e00a      	b.n	800bd8a <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e5      	bne.n	800bd44 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800bd78:	b196      	cbz	r6, 800bda0 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bd7a:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800bd7c:	f000 fe98 	bl	800cab0 <xQueueCreateMutex>
 800bd80:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d0de      	beq.n	800bd44 <osMutexNew+0xa>
        if (attr != NULL) {
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	d1f2      	bne.n	800bd70 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f001 f921 	bl	800cfd4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bd92:	2e00      	cmp	r6, #0
 800bd94:	d0d7      	beq.n	800bd46 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bd96:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800bd9a:	e7d4      	b.n	800bd46 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	e7e2      	b.n	800bd66 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800bda0:	2001      	movs	r0, #1
 800bda2:	e7eb      	b.n	800bd7c <osMutexNew+0x42>

0800bda4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda6:	4604      	mov	r4, r0
 800bda8:	460e      	mov	r6, r1
 800bdaa:	4615      	mov	r5, r2
 800bdac:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bdb0:	b942      	cbnz	r2, 800bdc4 <osSemaphoreNew+0x20>
 800bdb2:	b138      	cbz	r0, 800bdc4 <osSemaphoreNew+0x20>
 800bdb4:	4288      	cmp	r0, r1
 800bdb6:	d305      	bcc.n	800bdc4 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800bdb8:	b155      	cbz	r5, 800bdd0 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bdba:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800bdbe:	b12b      	cbz	r3, 800bdcc <osSemaphoreNew+0x28>
 800bdc0:	2f4f      	cmp	r7, #79	@ 0x4f
 800bdc2:	d822      	bhi.n	800be0a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800bdc4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	b003      	add	sp, #12
 800bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bdcc:	2f00      	cmp	r7, #0
 800bdce:	d1f9      	bne.n	800bdc4 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800bdd0:	2c01      	cmp	r4, #1
 800bdd2:	d00c      	beq.n	800bdee <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	f000 fd85 	bl	800c8e6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800bddc:	4604      	mov	r4, r0
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d0f0      	beq.n	800bdc4 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800bde2:	b985      	cbnz	r5, 800be06 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800bde4:	4629      	mov	r1, r5
 800bde6:	4620      	mov	r0, r4
 800bde8:	f001 f8f4 	bl	800cfd4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800bdec:	e7eb      	b.n	800bdc6 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800bdee:	2203      	movs	r2, #3
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	f000 fd2e 	bl	800c854 <xQueueGenericCreate>
 800bdf8:	e00e      	b.n	800be18 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f000 fd51 	bl	800c8a2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800be00:	4604      	mov	r4, r0
 800be02:	2800      	cmp	r0, #0
 800be04:	d0de      	beq.n	800bdc4 <osSemaphoreNew+0x20>
          name = attr->name;
 800be06:	682d      	ldr	r5, [r5, #0]
 800be08:	e7ec      	b.n	800bde4 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800be0a:	2801      	cmp	r0, #1
 800be0c:	d1f5      	bne.n	800bdfa <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800be0e:	2103      	movs	r1, #3
 800be10:	9100      	str	r1, [sp, #0]
 800be12:	4611      	mov	r1, r2
 800be14:	f000 fcd0 	bl	800c7b8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800be18:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d0d2      	beq.n	800bdc4 <osSemaphoreNew+0x20>
 800be1e:	2e00      	cmp	r6, #0
 800be20:	d0df      	beq.n	800bde2 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800be22:	2300      	movs	r3, #0
 800be24:	461a      	mov	r2, r3
 800be26:	4619      	mov	r1, r3
 800be28:	f000 fd7b 	bl	800c922 <xQueueGenericSend>
 800be2c:	2801      	cmp	r0, #1
 800be2e:	d0d8      	beq.n	800bde2 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800be30:	4620      	mov	r0, r4
 800be32:	f001 f8f9 	bl	800d028 <vQueueDelete>
      if (hSemaphore != NULL) {
 800be36:	e7c5      	b.n	800bdc4 <osSemaphoreNew+0x20>

0800be38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800be38:	b513      	push	{r0, r1, r4, lr}
 800be3a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800be3c:	b328      	cbz	r0, 800be8a <osSemaphoreAcquire+0x52>
 800be3e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800be42:	b1cb      	cbz	r3, 800be78 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800be44:	bb09      	cbnz	r1, 800be8a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be46:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800be48:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be4a:	f001 f857 	bl	800cefc <xQueueReceiveFromISR>
 800be4e:	2801      	cmp	r0, #1
 800be50:	d003      	beq.n	800be5a <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800be52:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800be56:	b002      	add	sp, #8
 800be58:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800be5a:	9b01      	ldr	r3, [sp, #4]
 800be5c:	b90b      	cbnz	r3, 800be62 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800be5e:	2000      	movs	r0, #0
 800be60:	e7f9      	b.n	800be56 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800be62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800be66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	e7f2      	b.n	800be5e <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be78:	f000 ff83 	bl	800cd82 <xQueueSemaphoreTake>
 800be7c:	2801      	cmp	r0, #1
 800be7e:	d0ee      	beq.n	800be5e <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800be80:	2c00      	cmp	r4, #0
 800be82:	d0e6      	beq.n	800be52 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800be84:	f06f 0001 	mvn.w	r0, #1
 800be88:	e7e5      	b.n	800be56 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800be8a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800be8e:	e7e2      	b.n	800be56 <osSemaphoreAcquire+0x1e>

0800be90 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800be90:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800be92:	b318      	cbz	r0, 800bedc <osSemaphoreRelease+0x4c>
 800be94:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800be98:	b1cb      	cbz	r3, 800bece <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800be9a:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800be9c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800be9e:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bea0:	f000 fe80 	bl	800cba4 <xQueueGiveFromISR>
 800bea4:	2801      	cmp	r0, #1
 800bea6:	d004      	beq.n	800beb2 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800bea8:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800beac:	b003      	add	sp, #12
 800beae:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800beb2:	9b01      	ldr	r3, [sp, #4]
 800beb4:	b14b      	cbz	r3, 800beca <osSemaphoreRelease+0x3a>
 800beb6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800beba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bebe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800beca:	2000      	movs	r0, #0
 800becc:	e7ee      	b.n	800beac <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bece:	461a      	mov	r2, r3
 800bed0:	4619      	mov	r1, r3
 800bed2:	f000 fd26 	bl	800c922 <xQueueGenericSend>
 800bed6:	2801      	cmp	r0, #1
 800bed8:	d0f7      	beq.n	800beca <osSemaphoreRelease+0x3a>
 800beda:	e7e5      	b.n	800bea8 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800bedc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800bee0:	e7e4      	b.n	800beac <osSemaphoreRelease+0x1c>

0800bee2 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 800bee2:	b130      	cbz	r0, 800bef2 <osSemaphoreGetCount+0x10>
 800bee4:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800bee8:	b10b      	cbz	r3, 800beee <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800beea:	f001 b867 	b.w	800cfbc <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800beee:	f001 b852 	b.w	800cf96 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800bef2:	4770      	bx	lr

0800bef4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bef6:	4605      	mov	r5, r0
 800bef8:	460e      	mov	r6, r1
 800befa:	4614      	mov	r4, r2
 800befc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bf00:	b11f      	cbz	r7, 800bf0a <osMessageQueueNew+0x16>
  hQueue = NULL;
 800bf02:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800bf04:	4628      	mov	r0, r5
 800bf06:	b003      	add	sp, #12
 800bf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0f9      	beq.n	800bf02 <osMessageQueueNew+0xe>
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	d0f7      	beq.n	800bf02 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800bf12:	b1da      	cbz	r2, 800bf4c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf14:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800bf18:	b183      	cbz	r3, 800bf3c <osMessageQueueNew+0x48>
 800bf1a:	2a4f      	cmp	r2, #79	@ 0x4f
 800bf1c:	d9f1      	bls.n	800bf02 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf1e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	d0ee      	beq.n	800bf02 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf24:	434d      	muls	r5, r1
 800bf26:	6966      	ldr	r6, [r4, #20]
 800bf28:	42ae      	cmp	r6, r5
 800bf2a:	d3ea      	bcc.n	800bf02 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bf2c:	9700      	str	r7, [sp, #0]
 800bf2e:	f000 fc43 	bl	800c7b8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800bf32:	4605      	mov	r5, r0
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d0e4      	beq.n	800bf02 <osMessageQueueNew+0xe>
        name = attr->name;
 800bf38:	6824      	ldr	r4, [r4, #0]
 800bf3a:	e011      	b.n	800bf60 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf3c:	2a00      	cmp	r2, #0
 800bf3e:	d1e0      	bne.n	800bf02 <osMessageQueueNew+0xe>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1dd      	bne.n	800bf02 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf46:	6963      	ldr	r3, [r4, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1da      	bne.n	800bf02 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	2200      	movs	r2, #0
 800bf50:	4631      	mov	r1, r6
 800bf52:	f000 fc7f 	bl	800c854 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800bf56:	4605      	mov	r5, r0
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d0d2      	beq.n	800bf02 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800bf5c:	2c00      	cmp	r4, #0
 800bf5e:	d1eb      	bne.n	800bf38 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800bf60:	4621      	mov	r1, r4
 800bf62:	4628      	mov	r0, r5
 800bf64:	f001 f836 	bl	800cfd4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800bf68:	e7cc      	b.n	800bf04 <osMessageQueueNew+0x10>

0800bf6a <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf6c:	461c      	mov	r4, r3
 800bf6e:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bf72:	b1de      	cbz	r6, 800bfac <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf74:	b338      	cbz	r0, 800bfc6 <osMessageQueuePut+0x5c>
 800bf76:	b331      	cbz	r1, 800bfc6 <osMessageQueuePut+0x5c>
 800bf78:	bb2b      	cbnz	r3, 800bfc6 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bf7a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800bf7c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bf7e:	f000 fdb4 	bl	800caea <xQueueGenericSendFromISR>
 800bf82:	2801      	cmp	r0, #1
 800bf84:	d003      	beq.n	800bf8e <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800bf86:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800bf8a:	b002      	add	sp, #8
 800bf8c:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	b90b      	cbnz	r3, 800bf96 <osMessageQueuePut+0x2c>
  stat = osOK;
 800bf92:	2000      	movs	r0, #0
 800bf94:	e7f9      	b.n	800bf8a <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800bf96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	e7f2      	b.n	800bf92 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bfac:	b158      	cbz	r0, 800bfc6 <osMessageQueuePut+0x5c>
 800bfae:	b151      	cbz	r1, 800bfc6 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bfb0:	4633      	mov	r3, r6
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	f000 fcb5 	bl	800c922 <xQueueGenericSend>
 800bfb8:	2801      	cmp	r0, #1
 800bfba:	d0ea      	beq.n	800bf92 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	d0e2      	beq.n	800bf86 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800bfc0:	f06f 0001 	mvn.w	r0, #1
 800bfc4:	e7e1      	b.n	800bf8a <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800bfc6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800bfca:	e7de      	b.n	800bf8a <osMessageQueuePut+0x20>

0800bfcc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfce:	461c      	mov	r4, r3
 800bfd0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bfd4:	b1db      	cbz	r3, 800c00e <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfd6:	b330      	cbz	r0, 800c026 <osMessageQueueGet+0x5a>
 800bfd8:	b329      	cbz	r1, 800c026 <osMessageQueueGet+0x5a>
 800bfda:	bb24      	cbnz	r4, 800c026 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bfdc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800bfde:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bfe0:	f000 ff8c 	bl	800cefc <xQueueReceiveFromISR>
 800bfe4:	2801      	cmp	r0, #1
 800bfe6:	d003      	beq.n	800bff0 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800bfe8:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800bfec:	b003      	add	sp, #12
 800bfee:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	b90b      	cbnz	r3, 800bff8 <osMessageQueueGet+0x2c>
  stat = osOK;
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7f9      	b.n	800bfec <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800bff8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c000:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	e7f2      	b.n	800bff4 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c00e:	b150      	cbz	r0, 800c026 <osMessageQueueGet+0x5a>
 800c010:	b149      	cbz	r1, 800c026 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c012:	4622      	mov	r2, r4
 800c014:	f000 fe17 	bl	800cc46 <xQueueReceive>
 800c018:	2801      	cmp	r0, #1
 800c01a:	d0eb      	beq.n	800bff4 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800c01c:	2c00      	cmp	r4, #0
 800c01e:	d0e3      	beq.n	800bfe8 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800c020:	f06f 0001 	mvn.w	r0, #1
 800c024:	e7e2      	b.n	800bfec <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800c026:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c02a:	e7df      	b.n	800bfec <osMessageQueueGet+0x20>

0800c02c <osMessageQueueGetMsgSize>:

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t size;

  if (mq == NULL) {
 800c02c:	b100      	cbz	r0, 800c030 <osMessageQueueGetMsgSize+0x4>
    size = 0U;
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 800c02e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  }

  return (size);
}
 800c030:	4770      	bx	lr

0800c032 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800c032:	f7ff bf56 	b.w	800bee2 <osSemaphoreGetCount>
	...

0800c038 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c038:	4b03      	ldr	r3, [pc, #12]	@ (800c048 <vApplicationGetIdleTaskMemory+0x10>)
 800c03a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c03c:	4b03      	ldr	r3, [pc, #12]	@ (800c04c <vApplicationGetIdleTaskMemory+0x14>)
 800c03e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c040:	2380      	movs	r3, #128	@ 0x80
 800c042:	6013      	str	r3, [r2, #0]
}
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	2401ae68 	.word	0x2401ae68
 800c04c:	2401ac68 	.word	0x2401ac68

0800c050 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c050:	4b03      	ldr	r3, [pc, #12]	@ (800c060 <vApplicationGetTimerTaskMemory+0x10>)
 800c052:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c054:	4b03      	ldr	r3, [pc, #12]	@ (800c064 <vApplicationGetTimerTaskMemory+0x14>)
 800c056:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c05c:	6013      	str	r3, [r2, #0]
}
 800c05e:	4770      	bx	lr
 800c060:	2401abbc 	.word	0x2401abbc
 800c064:	2401a7bc 	.word	0x2401a7bc

0800c068 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c068:	4b10      	ldr	r3, [pc, #64]	@ (800c0ac <prvInsertBlockIntoFreeList+0x44>)
{
 800c06a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c06c:	461a      	mov	r2, r3
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4283      	cmp	r3, r0
 800c072:	d3fb      	bcc.n	800c06c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c074:	6854      	ldr	r4, [r2, #4]
 800c076:	1911      	adds	r1, r2, r4
 800c078:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c07a:	bf01      	itttt	eq
 800c07c:	6841      	ldreq	r1, [r0, #4]
 800c07e:	4610      	moveq	r0, r2
 800c080:	1909      	addeq	r1, r1, r4
 800c082:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c084:	6844      	ldr	r4, [r0, #4]
 800c086:	1901      	adds	r1, r0, r4
 800c088:	428b      	cmp	r3, r1
 800c08a:	d10c      	bne.n	800c0a6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c08c:	4908      	ldr	r1, [pc, #32]	@ (800c0b0 <prvInsertBlockIntoFreeList+0x48>)
 800c08e:	6809      	ldr	r1, [r1, #0]
 800c090:	428b      	cmp	r3, r1
 800c092:	d003      	beq.n	800c09c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c094:	6859      	ldr	r1, [r3, #4]
 800c096:	4421      	add	r1, r4
 800c098:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c09a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c09c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c09e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0a0:	bf18      	it	ne
 800c0a2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0a4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	e7f8      	b.n	800c09c <prvInsertBlockIntoFreeList+0x34>
 800c0aa:	bf00      	nop
 800c0ac:	2401af30 	.word	0x2401af30
 800c0b0:	2401af2c 	.word	0x2401af2c

0800c0b4 <pvPortMalloc>:
{
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c0ba:	f001 f9c9 	bl	800d450 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c0be:	4940      	ldr	r1, [pc, #256]	@ (800c1c0 <pvPortMalloc+0x10c>)
 800c0c0:	4d40      	ldr	r5, [pc, #256]	@ (800c1c4 <pvPortMalloc+0x110>)
 800c0c2:	680b      	ldr	r3, [r1, #0]
 800c0c4:	b9f3      	cbnz	r3, 800c104 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800c0c6:	4a40      	ldr	r2, [pc, #256]	@ (800c1c8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800c0c8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0ca:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0cc:	4e3f      	ldr	r6, [pc, #252]	@ (800c1cc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ce:	bf1b      	ittet	ne
 800c0d0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0d2:	4b3f      	ldrne	r3, [pc, #252]	@ (800c1d0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0d4:	4b3f      	ldreq	r3, [pc, #252]	@ (800c1d4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0d6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800c0da:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0dc:	bf18      	it	ne
 800c0de:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0e0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0e2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800c0e4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800c0ea:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0ee:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800c0f0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0f2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0f6:	4b38      	ldr	r3, [pc, #224]	@ (800c1d8 <pvPortMalloc+0x124>)
 800c0f8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0fa:	4b38      	ldr	r3, [pc, #224]	@ (800c1dc <pvPortMalloc+0x128>)
 800c0fc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c102:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c104:	682e      	ldr	r6, [r5, #0]
 800c106:	4226      	tst	r6, r4
 800c108:	d155      	bne.n	800c1b6 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800c10a:	2c00      	cmp	r4, #0
 800c10c:	d046      	beq.n	800c19c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800c10e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c112:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c114:	bf1c      	itt	ne
 800c116:	f023 0307 	bicne.w	r3, r3, #7
 800c11a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d04a      	beq.n	800c1b6 <pvPortMalloc+0x102>
 800c120:	4f2e      	ldr	r7, [pc, #184]	@ (800c1dc <pvPortMalloc+0x128>)
 800c122:	683c      	ldr	r4, [r7, #0]
 800c124:	429c      	cmp	r4, r3
 800c126:	d346      	bcc.n	800c1b6 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800c128:	4a28      	ldr	r2, [pc, #160]	@ (800c1cc <pvPortMalloc+0x118>)
 800c12a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c12c:	6868      	ldr	r0, [r5, #4]
 800c12e:	4298      	cmp	r0, r3
 800c130:	d204      	bcs.n	800c13c <pvPortMalloc+0x88>
 800c132:	f8d5 c000 	ldr.w	ip, [r5]
 800c136:	f1bc 0f00 	cmp.w	ip, #0
 800c13a:	d115      	bne.n	800c168 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800c13c:	6809      	ldr	r1, [r1, #0]
 800c13e:	42a9      	cmp	r1, r5
 800c140:	d039      	beq.n	800c1b6 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c142:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c144:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c148:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c14a:	1ac2      	subs	r2, r0, r3
 800c14c:	2a10      	cmp	r2, #16
 800c14e:	d912      	bls.n	800c176 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c150:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c152:	0741      	lsls	r1, r0, #29
 800c154:	d00b      	beq.n	800c16e <pvPortMalloc+0xba>
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	e7fe      	b.n	800c166 <pvPortMalloc+0xb2>
 800c168:	462a      	mov	r2, r5
 800c16a:	4665      	mov	r5, ip
 800c16c:	e7de      	b.n	800c12c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c16e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c170:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c172:	f7ff ff79 	bl	800c068 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c176:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c178:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c17a:	4917      	ldr	r1, [pc, #92]	@ (800c1d8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c17c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c17e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c180:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800c182:	4a17      	ldr	r2, [pc, #92]	@ (800c1e0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c184:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800c186:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800c188:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c18a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800c18c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c190:	bf38      	it	cc
 800c192:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c194:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c198:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800c19a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800c19c:	f001 f9fc 	bl	800d598 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a0:	0763      	lsls	r3, r4, #29
 800c1a2:	d00a      	beq.n	800c1ba <pvPortMalloc+0x106>
 800c1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	e7fe      	b.n	800c1b4 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800c1b6:	2400      	movs	r4, #0
 800c1b8:	e7f0      	b.n	800c19c <pvPortMalloc+0xe8>
}
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c0:	2401af2c 	.word	0x2401af2c
 800c1c4:	2401af18 	.word	0x2401af18
 800c1c8:	2401af38 	.word	0x2401af38
 800c1cc:	2401af30 	.word	0x2401af30
 800c1d0:	2402d430 	.word	0x2402d430
 800c1d4:	000124f8 	.word	0x000124f8
 800c1d8:	2401af24 	.word	0x2401af24
 800c1dc:	2401af28 	.word	0x2401af28
 800c1e0:	2401af20 	.word	0x2401af20

0800c1e4 <vPortFree>:
{
 800c1e4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	b390      	cbz	r0, 800c250 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c254 <vPortFree+0x70>)
 800c1ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	4213      	tst	r3, r2
 800c1f4:	d108      	bne.n	800c208 <vPortFree+0x24>
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	e7fe      	b.n	800c206 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c208:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c20c:	b141      	cbz	r1, 800c220 <vPortFree+0x3c>
 800c20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	e7fe      	b.n	800c21e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c220:	ea23 0302 	bic.w	r3, r3, r2
 800c224:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800c228:	f001 f912 	bl	800d450 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c22c:	4a0a      	ldr	r2, [pc, #40]	@ (800c258 <vPortFree+0x74>)
 800c22e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c232:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c236:	6811      	ldr	r1, [r2, #0]
 800c238:	440b      	add	r3, r1
 800c23a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c23c:	f7ff ff14 	bl	800c068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c240:	4a06      	ldr	r2, [pc, #24]	@ (800c25c <vPortFree+0x78>)
 800c242:	6813      	ldr	r3, [r2, #0]
 800c244:	3301      	adds	r3, #1
}
 800c246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800c24a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800c24c:	f001 b9a4 	b.w	800d598 <xTaskResumeAll>
}
 800c250:	bd10      	pop	{r4, pc}
 800c252:	bf00      	nop
 800c254:	2401af18 	.word	0x2401af18
 800c258:	2401af28 	.word	0x2401af28
 800c25c:	2401af1c 	.word	0x2401af1c

0800c260 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c260:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c264:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c268:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c26a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c26c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c270:	2300      	movs	r3, #0
 800c272:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c274:	4770      	bx	lr

0800c276 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c27a:	4770      	bx	lr

0800c27c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c27c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c27e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800c280:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c282:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c284:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c286:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800c288:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800c28a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c28c:	3301      	adds	r3, #1
 800c28e:	6003      	str	r3, [r0, #0]
}
 800c290:	4770      	bx	lr

0800c292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c292:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c294:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c296:	1c63      	adds	r3, r4, #1
 800c298:	d10a      	bne.n	800c2b0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c29a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2a0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2a2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2a4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800c2a6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800c2a8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	6003      	str	r3, [r0, #0]
}
 800c2ae:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2b0:	f100 0208 	add.w	r2, r0, #8
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	6852      	ldr	r2, [r2, #4]
 800c2b8:	6815      	ldr	r5, [r2, #0]
 800c2ba:	42a5      	cmp	r5, r4
 800c2bc:	d9fa      	bls.n	800c2b4 <vListInsert+0x22>
 800c2be:	e7ed      	b.n	800c29c <vListInsert+0xa>

0800c2c0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2c0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2c2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800c2c6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2c8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2ca:	6859      	ldr	r1, [r3, #4]
 800c2cc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2ce:	bf08      	it	eq
 800c2d0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	3a01      	subs	r2, #1
 800c2da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2dc:	6818      	ldr	r0, [r3, #0]
}
 800c2de:	4770      	bx	lr

0800c2e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2e0:	4808      	ldr	r0, [pc, #32]	@ (800c304 <prvPortStartFirstTask+0x24>)
 800c2e2:	6800      	ldr	r0, [r0, #0]
 800c2e4:	6800      	ldr	r0, [r0, #0]
 800c2e6:	f380 8808 	msr	MSP, r0
 800c2ea:	f04f 0000 	mov.w	r0, #0
 800c2ee:	f380 8814 	msr	CONTROL, r0
 800c2f2:	b662      	cpsie	i
 800c2f4:	b661      	cpsie	f
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	df00      	svc	0
 800c300:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c302:	0000      	.short	0x0000
 800c304:	e000ed08 	.word	0xe000ed08

0800c308 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c308:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c318 <vPortEnableVFP+0x10>
 800c30c:	6801      	ldr	r1, [r0, #0]
 800c30e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c312:	6001      	str	r1, [r0, #0]
 800c314:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c316:	0000      	.short	0x0000
 800c318:	e000ed88 	.word	0xe000ed88

0800c31c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800c31c:	2300      	movs	r3, #0
{
 800c31e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800c320:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c322:	4b0d      	ldr	r3, [pc, #52]	@ (800c358 <prvTaskExitError+0x3c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3301      	adds	r3, #1
 800c328:	d008      	beq.n	800c33c <prvTaskExitError+0x20>
 800c32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	e7fe      	b.n	800c33a <prvTaskExitError+0x1e>
 800c33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d0fc      	beq.n	800c34c <prvTaskExitError+0x30>
}
 800c352:	b002      	add	sp, #8
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	2400007c 	.word	0x2400007c

0800c35c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c35c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c360:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c364:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800c368:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c36a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c36c:	4b03      	ldr	r3, [pc, #12]	@ (800c37c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c36e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c370:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c372:	f06f 0302 	mvn.w	r3, #2
 800c376:	6203      	str	r3, [r0, #32]
}
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	0800c31d 	.word	0x0800c31d

0800c380 <SVC_Handler>:
	__asm volatile (
 800c380:	4b07      	ldr	r3, [pc, #28]	@ (800c3a0 <pxCurrentTCBConst2>)
 800c382:	6819      	ldr	r1, [r3, #0]
 800c384:	6808      	ldr	r0, [r1, #0]
 800c386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f380 8809 	msr	PSP, r0
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f04f 0000 	mov.w	r0, #0
 800c396:	f380 8811 	msr	BASEPRI, r0
 800c39a:	4770      	bx	lr
 800c39c:	f3af 8000 	nop.w

0800c3a0 <pxCurrentTCBConst2>:
 800c3a0:	2402d970 	.word	0x2402d970

0800c3a4 <vPortEnterCritical>:
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800c3b4:	4a0a      	ldr	r2, [pc, #40]	@ (800c3e0 <vPortEnterCritical+0x3c>)
 800c3b6:	6813      	ldr	r3, [r2, #0]
 800c3b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800c3ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800c3bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800c3be:	d10e      	bne.n	800c3de <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c3c4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	b143      	cbz	r3, 800c3de <vPortEnterCritical+0x3a>
 800c3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	e7fe      	b.n	800c3dc <vPortEnterCritical+0x38>
}
 800c3de:	4770      	bx	lr
 800c3e0:	2400007c 	.word	0x2400007c

0800c3e4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800c3e4:	4a08      	ldr	r2, [pc, #32]	@ (800c408 <vPortExitCritical+0x24>)
 800c3e6:	6813      	ldr	r3, [r2, #0]
 800c3e8:	b943      	cbnz	r3, 800c3fc <vPortExitCritical+0x18>
 800c3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	e7fe      	b.n	800c3fa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c400:	b90b      	cbnz	r3, 800c406 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c402:	f383 8811 	msr	BASEPRI, r3
}
 800c406:	4770      	bx	lr
 800c408:	2400007c 	.word	0x2400007c
 800c40c:	00000000 	.word	0x00000000

0800c410 <PendSV_Handler>:
	__asm volatile
 800c410:	f3ef 8009 	mrs	r0, PSP
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	4b15      	ldr	r3, [pc, #84]	@ (800c470 <pxCurrentTCBConst>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	f01e 0f10 	tst.w	lr, #16
 800c420:	bf08      	it	eq
 800c422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42a:	6010      	str	r0, [r2, #0]
 800c42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c434:	f380 8811 	msr	BASEPRI, r0
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f001 f9b2 	bl	800d7a8 <vTaskSwitchContext>
 800c444:	f04f 0000 	mov.w	r0, #0
 800c448:	f380 8811 	msr	BASEPRI, r0
 800c44c:	bc09      	pop	{r0, r3}
 800c44e:	6819      	ldr	r1, [r3, #0]
 800c450:	6808      	ldr	r0, [r1, #0]
 800c452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c456:	f01e 0f10 	tst.w	lr, #16
 800c45a:	bf08      	it	eq
 800c45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c460:	f380 8809 	msr	PSP, r0
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	f3af 8000 	nop.w

0800c470 <pxCurrentTCBConst>:
 800c470:	2402d970 	.word	0x2402d970

0800c474 <xPortSysTickHandler>:
{
 800c474:	b508      	push	{r3, lr}
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c486:	f000 fff1 	bl	800d46c <xTaskIncrementTick>
 800c48a:	b128      	cbz	r0, 800c498 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c48c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c494:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800c498:	2300      	movs	r3, #0
 800c49a:	f383 8811 	msr	BASEPRI, r3
}
 800c49e:	bd08      	pop	{r3, pc}

0800c4a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4a0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800c4a4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4aa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4ac:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4ae:	4b04      	ldr	r3, [pc, #16]	@ (800c4c0 <vPortSetupTimerInterrupt+0x20>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4ba:	2307      	movs	r3, #7
 800c4bc:	6113      	str	r3, [r2, #16]
}
 800c4be:	4770      	bx	lr
 800c4c0:	24000070 	.word	0x24000070

0800c4c4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800c4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4ca:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800c4ce:	4a38      	ldr	r2, [pc, #224]	@ (800c5b0 <xPortStartScheduler+0xec>)
 800c4d0:	4291      	cmp	r1, r2
 800c4d2:	d108      	bne.n	800c4e6 <xPortStartScheduler+0x22>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	e7fe      	b.n	800c4e4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4e6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800c4ea:	4b32      	ldr	r3, [pc, #200]	@ (800c5b4 <xPortStartScheduler+0xf0>)
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d108      	bne.n	800c502 <xPortStartScheduler+0x3e>
 800c4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	e7fe      	b.n	800c500 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c502:	4b2d      	ldr	r3, [pc, #180]	@ (800c5b8 <xPortStartScheduler+0xf4>)
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	b2d2      	uxtb	r2, r2
 800c508:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c50a:	22ff      	movs	r2, #255	@ 0xff
 800c50c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c50e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c510:	4a2a      	ldr	r2, [pc, #168]	@ (800c5bc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c518:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c51c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c520:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c522:	2307      	movs	r3, #7
 800c524:	4a26      	ldr	r2, [pc, #152]	@ (800c5c0 <xPortStartScheduler+0xfc>)
 800c526:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c528:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800c52c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c52e:	0609      	lsls	r1, r1, #24
 800c530:	d40a      	bmi.n	800c548 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c532:	2b03      	cmp	r3, #3
 800c534:	d011      	beq.n	800c55a <xPortStartScheduler+0x96>
 800c536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	e7fe      	b.n	800c546 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800c548:	3b01      	subs	r3, #1
 800c54a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c54c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f88d 3003 	strb.w	r3, [sp, #3]
 800c558:	e7e6      	b.n	800c528 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c55a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c55e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800c562:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c564:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c566:	9b01      	ldr	r3, [sp, #4]
 800c568:	4a13      	ldr	r2, [pc, #76]	@ (800c5b8 <xPortStartScheduler+0xf4>)
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c56e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800c572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c576:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c57a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800c57e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c582:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800c586:	f7ff ff8b 	bl	800c4a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c58a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c4 <xPortStartScheduler+0x100>)
 800c58c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800c58e:	f7ff febb 	bl	800c308 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c592:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800c596:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c59a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800c59e:	f7ff fe9f 	bl	800c2e0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c5a2:	f001 f901 	bl	800d7a8 <vTaskSwitchContext>
}
 800c5a6:	4628      	mov	r0, r5
	prvTaskExitError();
 800c5a8:	f7ff feb8 	bl	800c31c <prvTaskExitError>
}
 800c5ac:	b003      	add	sp, #12
 800c5ae:	bd30      	pop	{r4, r5, pc}
 800c5b0:	410fc271 	.word	0x410fc271
 800c5b4:	410fc270 	.word	0x410fc270
 800c5b8:	e000e400 	.word	0xe000e400
 800c5bc:	2402d434 	.word	0x2402d434
 800c5c0:	2402d430 	.word	0x2402d430
 800c5c4:	2400007c 	.word	0x2400007c

0800c5c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5cc:	2b0f      	cmp	r3, #15
 800c5ce:	d90e      	bls.n	800c5ee <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5d0:	4a11      	ldr	r2, [pc, #68]	@ (800c618 <vPortValidateInterruptPriority+0x50>)
 800c5d2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5d4:	4a11      	ldr	r2, [pc, #68]	@ (800c61c <vPortValidateInterruptPriority+0x54>)
 800c5d6:	7812      	ldrb	r2, [r2, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d908      	bls.n	800c5ee <vPortValidateInterruptPriority+0x26>
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	e7fe      	b.n	800c5ec <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c5f2:	4a0b      	ldr	r2, [pc, #44]	@ (800c620 <vPortValidateInterruptPriority+0x58>)
 800c5f4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800c5f8:	6812      	ldr	r2, [r2, #0]
 800c5fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d908      	bls.n	800c614 <vPortValidateInterruptPriority+0x4c>
 800c602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	e7fe      	b.n	800c612 <vPortValidateInterruptPriority+0x4a>
	}
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	e000e3f0 	.word	0xe000e3f0
 800c61c:	2402d434 	.word	0x2402d434
 800c620:	2402d430 	.word	0x2402d430

0800c624 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c624:	b510      	push	{r4, lr}
 800c626:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c628:	f7ff febc 	bl	800c3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c62c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c62e:	f7ff fed9 	bl	800c3e4 <vPortExitCritical>

	return xReturn;
}
 800c632:	fab4 f084 	clz	r0, r4
 800c636:	0940      	lsrs	r0, r0, #5
 800c638:	bd10      	pop	{r4, pc}

0800c63a <prvCopyDataToQueue>:
{
 800c63a:	b570      	push	{r4, r5, r6, lr}
 800c63c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c63e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800c640:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c642:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c644:	b942      	cbnz	r2, 800c658 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c646:	6806      	ldr	r6, [r0, #0]
 800c648:	b99e      	cbnz	r6, 800c672 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c64a:	6880      	ldr	r0, [r0, #8]
 800c64c:	f001 fa0a 	bl	800da64 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c650:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c652:	3501      	adds	r5, #1
 800c654:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800c656:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800c658:	b96e      	cbnz	r6, 800c676 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c65a:	6840      	ldr	r0, [r0, #4]
 800c65c:	f016 fd5b 	bl	8023116 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c660:	6863      	ldr	r3, [r4, #4]
 800c662:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c664:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c666:	68a2      	ldr	r2, [r4, #8]
 800c668:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c66a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c66c:	bf24      	itt	cs
 800c66e:	6823      	ldrcs	r3, [r4, #0]
 800c670:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c672:	2000      	movs	r0, #0
 800c674:	e7ed      	b.n	800c652 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c676:	68c0      	ldr	r0, [r0, #12]
 800c678:	f016 fd4d 	bl	8023116 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c67c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c67e:	68e3      	ldr	r3, [r4, #12]
 800c680:	4251      	negs	r1, r2
 800c682:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c684:	6822      	ldr	r2, [r4, #0]
 800c686:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c688:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c68a:	bf3e      	ittt	cc
 800c68c:	68a3      	ldrcc	r3, [r4, #8]
 800c68e:	185b      	addcc	r3, r3, r1
 800c690:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c692:	2e02      	cmp	r6, #2
 800c694:	d1ed      	bne.n	800c672 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c696:	b10d      	cbz	r5, 800c69c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800c698:	3d01      	subs	r5, #1
 800c69a:	e7ea      	b.n	800c672 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800c69c:	4628      	mov	r0, r5
 800c69e:	e7d8      	b.n	800c652 <prvCopyDataToQueue+0x18>

0800c6a0 <prvCopyDataFromQueue>:
{
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800c6a6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6a8:	b162      	cbz	r2, 800c6c4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6aa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6ac:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ae:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6b0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6b2:	60dc      	str	r4, [r3, #12]
}
 800c6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6b8:	bf24      	itt	cs
 800c6ba:	6819      	ldrcs	r1, [r3, #0]
 800c6bc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6be:	68d9      	ldr	r1, [r3, #12]
 800c6c0:	f016 bd29 	b.w	8023116 <memcpy>
}
 800c6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <prvUnlockQueue>:
{
 800c6ca:	b570      	push	{r4, r5, r6, lr}
 800c6cc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c6ce:	f7ff fe69 	bl	800c3a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c6d2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6d6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800c6da:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6dc:	2d00      	cmp	r5, #0
 800c6de:	dc14      	bgt.n	800c70a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800c6e0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6e2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c6e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800c6ea:	f7ff fe7b 	bl	800c3e4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c6ee:	f7ff fe59 	bl	800c3a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c6f2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800c6f6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	dc12      	bgt.n	800c722 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800c6fc:	23ff      	movs	r3, #255	@ 0xff
 800c6fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800c702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800c706:	f7ff be6d 	b.w	800c3e4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c70a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0e7      	beq.n	800c6e0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c710:	4630      	mov	r0, r6
 800c712:	f001 f8c9 	bl	800d8a8 <xTaskRemoveFromEventList>
 800c716:	b108      	cbz	r0, 800c71c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800c718:	f001 f950 	bl	800d9bc <vTaskMissedYield>
			--cTxLock;
 800c71c:	3d01      	subs	r5, #1
 800c71e:	b26d      	sxtb	r5, r5
 800c720:	e7dc      	b.n	800c6dc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d0e9      	beq.n	800c6fc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c728:	4630      	mov	r0, r6
 800c72a:	f001 f8bd 	bl	800d8a8 <xTaskRemoveFromEventList>
 800c72e:	b108      	cbz	r0, 800c734 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800c730:	f001 f944 	bl	800d9bc <vTaskMissedYield>
				--cRxLock;
 800c734:	3d01      	subs	r5, #1
 800c736:	b26d      	sxtb	r5, r5
 800c738:	e7de      	b.n	800c6f8 <prvUnlockQueue+0x2e>

0800c73a <xQueueGenericReset>:
{
 800c73a:	b538      	push	{r3, r4, r5, lr}
 800c73c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c73e:	4604      	mov	r4, r0
 800c740:	b940      	cbnz	r0, 800c754 <xQueueGenericReset+0x1a>
 800c742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	e7fe      	b.n	800c752 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800c754:	f7ff fe26 	bl	800c3a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c758:	6822      	ldr	r2, [r4, #0]
 800c75a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c75e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c760:	434b      	muls	r3, r1
 800c762:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c764:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c766:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c768:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c76a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800c76c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c76e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c770:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800c772:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c776:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800c77a:	b9a5      	cbnz	r5, 800c7a6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	b173      	cbz	r3, 800c79e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c780:	f104 0010 	add.w	r0, r4, #16
 800c784:	f001 f890 	bl	800d8a8 <xTaskRemoveFromEventList>
 800c788:	b148      	cbz	r0, 800c79e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800c78a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c78e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c792:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800c79e:	f7ff fe21 	bl	800c3e4 <vPortExitCritical>
}
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7a6:	f104 0010 	add.w	r0, r4, #16
 800c7aa:	f7ff fd59 	bl	800c260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c7b2:	f7ff fd55 	bl	800c260 <vListInitialise>
 800c7b6:	e7f2      	b.n	800c79e <xQueueGenericReset+0x64>

0800c7b8 <xQueueGenericCreateStatic>:
	{
 800c7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7be:	b940      	cbnz	r0, 800c7d2 <xQueueGenericCreateStatic+0x1a>
 800c7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	e7fe      	b.n	800c7d0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800c7d2:	b943      	cbnz	r3, 800c7e6 <xQueueGenericCreateStatic+0x2e>
 800c7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	e7fe      	b.n	800c7e4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7e6:	b14a      	cbz	r2, 800c7fc <xQueueGenericCreateStatic+0x44>
 800c7e8:	b991      	cbnz	r1, 800c810 <xQueueGenericCreateStatic+0x58>
 800c7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	e7fe      	b.n	800c7fa <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7fc:	b141      	cbz	r1, 800c810 <xQueueGenericCreateStatic+0x58>
 800c7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	e7fe      	b.n	800c80e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c810:	2350      	movs	r3, #80	@ 0x50
 800c812:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c814:	9b01      	ldr	r3, [sp, #4]
 800c816:	2b50      	cmp	r3, #80	@ 0x50
 800c818:	d008      	beq.n	800c82c <xQueueGenericCreateStatic+0x74>
 800c81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81e:	f383 8811 	msr	BASEPRI, r3
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	e7fe      	b.n	800c82a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c82c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c82e:	2d00      	cmp	r5, #0
 800c830:	bf08      	it	eq
 800c832:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c834:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c836:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c83a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c83c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c840:	4620      	mov	r0, r4
 800c842:	f7ff ff7a 	bl	800c73a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c846:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800c84a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c84c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800c850:	b003      	add	sp, #12
 800c852:	bd30      	pop	{r4, r5, pc}

0800c854 <xQueueGenericCreate>:
	{
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	460d      	mov	r5, r1
 800c858:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c85a:	4606      	mov	r6, r0
 800c85c:	b940      	cbnz	r0, 800c870 <xQueueGenericCreate+0x1c>
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	e7fe      	b.n	800c86e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c870:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c872:	3050      	adds	r0, #80	@ 0x50
 800c874:	f7ff fc1e 	bl	800c0b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c878:	4604      	mov	r4, r0
 800c87a:	b170      	cbz	r0, 800c89a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c882:	b165      	cbz	r5, 800c89e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c884:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c888:	2101      	movs	r1, #1
 800c88a:	4620      	mov	r0, r4
 800c88c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c88e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c892:	f7ff ff52 	bl	800c73a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c896:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800c89a:	4620      	mov	r0, r4
 800c89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c89e:	4603      	mov	r3, r0
 800c8a0:	e7f2      	b.n	800c888 <xQueueGenericCreate+0x34>

0800c8a2 <xQueueCreateCountingSemaphoreStatic>:
	{
 800c8a2:	b513      	push	{r0, r1, r4, lr}
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c8a8:	b940      	cbnz	r0, 800c8bc <xQueueCreateCountingSemaphoreStatic+0x1a>
 800c8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	e7fe      	b.n	800c8ba <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c8bc:	4288      	cmp	r0, r1
 800c8be:	d208      	bcs.n	800c8d2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800c8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	e7fe      	b.n	800c8d0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	9200      	str	r2, [sp, #0]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	4611      	mov	r1, r2
 800c8da:	f7ff ff6d 	bl	800c7b8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c8de:	b100      	cbz	r0, 800c8e2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c8e0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c8e2:	b002      	add	sp, #8
 800c8e4:	bd10      	pop	{r4, pc}

0800c8e6 <xQueueCreateCountingSemaphore>:
	{
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c8ea:	b940      	cbnz	r0, 800c8fe <xQueueCreateCountingSemaphore+0x18>
 800c8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	e7fe      	b.n	800c8fc <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c8fe:	4288      	cmp	r0, r1
 800c900:	d208      	bcs.n	800c914 <xQueueCreateCountingSemaphore+0x2e>
 800c902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	e7fe      	b.n	800c912 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c914:	2202      	movs	r2, #2
 800c916:	2100      	movs	r1, #0
 800c918:	f7ff ff9c 	bl	800c854 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c91c:	b100      	cbz	r0, 800c920 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c91e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c920:	bd10      	pop	{r4, pc}

0800c922 <xQueueGenericSend>:
{
 800c922:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c926:	460f      	mov	r7, r1
 800c928:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800c92a:	4604      	mov	r4, r0
{
 800c92c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c92e:	b940      	cbnz	r0, 800c942 <xQueueGenericSend+0x20>
 800c930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	e7fe      	b.n	800c940 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c942:	b951      	cbnz	r1, 800c95a <xQueueGenericSend+0x38>
 800c944:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c946:	b143      	cbz	r3, 800c95a <xQueueGenericSend+0x38>
 800c948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	e7fe      	b.n	800c958 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c95a:	2e02      	cmp	r6, #2
 800c95c:	d10b      	bne.n	800c976 <xQueueGenericSend+0x54>
 800c95e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c960:	2b01      	cmp	r3, #1
 800c962:	d008      	beq.n	800c976 <xQueueGenericSend+0x54>
 800c964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	e7fe      	b.n	800c974 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c976:	f001 f827 	bl	800d9c8 <xTaskGetSchedulerState>
 800c97a:	4605      	mov	r5, r0
 800c97c:	b330      	cbz	r0, 800c9cc <xQueueGenericSend+0xaa>
 800c97e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c980:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c984:	f7ff fd0e 	bl	800c3a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c988:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c98a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d301      	bcc.n	800c994 <xQueueGenericSend+0x72>
 800c990:	2e02      	cmp	r6, #2
 800c992:	d127      	bne.n	800c9e4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c994:	4632      	mov	r2, r6
 800c996:	4639      	mov	r1, r7
 800c998:	4620      	mov	r0, r4
 800c99a:	f7ff fe4e 	bl	800c63a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c99e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c9a0:	b11b      	cbz	r3, 800c9aa <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c9a6:	f000 ff7f 	bl	800d8a8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800c9aa:	b148      	cbz	r0, 800c9c0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800c9ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c9b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c9c0:	f7ff fd10 	bl	800c3e4 <vPortExitCritical>
				return pdPASS;
 800c9c4:	2001      	movs	r0, #1
}
 800c9c6:	b004      	add	sp, #16
 800c9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0d6      	beq.n	800c980 <xQueueGenericSend+0x5e>
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	e7fe      	b.n	800c9e2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9e4:	9b01      	ldr	r3, [sp, #4]
 800c9e6:	b91b      	cbnz	r3, 800c9f0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800c9e8:	f7ff fcfc 	bl	800c3e4 <vPortExitCritical>
					return errQUEUE_FULL;
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	e7ea      	b.n	800c9c6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800c9f0:	b915      	cbnz	r5, 800c9f8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9f2:	a802      	add	r0, sp, #8
 800c9f4:	f000 ff9a 	bl	800d92c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c9f8:	f7ff fcf4 	bl	800c3e4 <vPortExitCritical>
		vTaskSuspendAll();
 800c9fc:	f000 fd28 	bl	800d450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca00:	f7ff fcd0 	bl	800c3a4 <vPortEnterCritical>
 800ca04:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ca08:	2bff      	cmp	r3, #255	@ 0xff
 800ca0a:	d101      	bne.n	800ca10 <xQueueGenericSend+0xee>
 800ca0c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800ca10:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ca14:	2bff      	cmp	r3, #255	@ 0xff
 800ca16:	d101      	bne.n	800ca1c <xQueueGenericSend+0xfa>
 800ca18:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800ca1c:	f7ff fce2 	bl	800c3e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca20:	a901      	add	r1, sp, #4
 800ca22:	a802      	add	r0, sp, #8
 800ca24:	f000 ff8e 	bl	800d944 <xTaskCheckForTimeOut>
 800ca28:	bb38      	cbnz	r0, 800ca7a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca2a:	f7ff fcbb 	bl	800c3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ca30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d10e      	bne.n	800ca54 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ca36:	f7ff fcd5 	bl	800c3e4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca3a:	9901      	ldr	r1, [sp, #4]
 800ca3c:	f104 0010 	add.w	r0, r4, #16
 800ca40:	f000 fefa 	bl	800d838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff fe40 	bl	800c6ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca4a:	f000 fda5 	bl	800d598 <xTaskResumeAll>
 800ca4e:	b148      	cbz	r0, 800ca64 <xQueueGenericSend+0x142>
 800ca50:	2501      	movs	r5, #1
 800ca52:	e797      	b.n	800c984 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800ca54:	f7ff fcc6 	bl	800c3e4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7ff fe36 	bl	800c6ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca5e:	f000 fd9b 	bl	800d598 <xTaskResumeAll>
 800ca62:	e7f5      	b.n	800ca50 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800ca64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	e7ea      	b.n	800ca50 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff fe25 	bl	800c6ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca80:	f000 fd8a 	bl	800d598 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ca84:	e7b2      	b.n	800c9ec <xQueueGenericSend+0xca>

0800ca86 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ca86:	2200      	movs	r2, #0
	{
 800ca88:	460b      	mov	r3, r1
 800ca8a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	9000      	str	r0, [sp, #0]
 800ca90:	2001      	movs	r0, #1
 800ca92:	f7ff fe91 	bl	800c7b8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800ca96:	4604      	mov	r4, r0
 800ca98:	b138      	cbz	r0, 800caaa <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca9a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800caa0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800caa2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800caa4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800caa6:	f7ff ff3c 	bl	800c922 <xQueueGenericSend>
	}
 800caaa:	4620      	mov	r0, r4
 800caac:	b002      	add	sp, #8
 800caae:	bd10      	pop	{r4, pc}

0800cab0 <xQueueCreateMutex>:
	{
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cab4:	2050      	movs	r0, #80	@ 0x50
 800cab6:	f7ff fafd 	bl	800c0b4 <pvPortMalloc>
 800caba:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800cabc:	b198      	cbz	r0, 800cae6 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cabe:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800cac0:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cac2:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cac4:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800cac8:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cacc:	f7ff fe35 	bl	800c73a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cad0:	462b      	mov	r3, r5
 800cad2:	462a      	mov	r2, r5
 800cad4:	4629      	mov	r1, r5
 800cad6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800cad8:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cadc:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cade:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cae0:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cae2:	f7ff ff1e 	bl	800c922 <xQueueGenericSend>
	}
 800cae6:	4620      	mov	r0, r4
 800cae8:	bd70      	pop	{r4, r5, r6, pc}

0800caea <xQueueGenericSendFromISR>:
{
 800caea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caee:	4689      	mov	r9, r1
 800caf0:	4617      	mov	r7, r2
 800caf2:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800caf4:	4604      	mov	r4, r0
 800caf6:	b940      	cbnz	r0, 800cb0a <xQueueGenericSendFromISR+0x20>
 800caf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	e7fe      	b.n	800cb08 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb0a:	b951      	cbnz	r1, 800cb22 <xQueueGenericSendFromISR+0x38>
 800cb0c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cb0e:	b143      	cbz	r3, 800cb22 <xQueueGenericSendFromISR+0x38>
 800cb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	e7fe      	b.n	800cb20 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb22:	2e02      	cmp	r6, #2
 800cb24:	d10b      	bne.n	800cb3e <xQueueGenericSendFromISR+0x54>
 800cb26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d008      	beq.n	800cb3e <xQueueGenericSendFromISR+0x54>
 800cb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	e7fe      	b.n	800cb3c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb3e:	f7ff fd43 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cb42:	f3ef 8811 	mrs	r8, BASEPRI
 800cb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb56:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cb58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d301      	bcc.n	800cb62 <xQueueGenericSendFromISR+0x78>
 800cb5e:	2e02      	cmp	r6, #2
 800cb60:	d11e      	bne.n	800cba0 <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb62:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb66:	4632      	mov	r2, r6
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb6c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb70:	f7ff fd63 	bl	800c63a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800cb74:	1c6b      	adds	r3, r5, #1
 800cb76:	d10e      	bne.n	800cb96 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cb7a:	b13b      	cbz	r3, 800cb8c <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb7c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cb80:	f000 fe92 	bl	800d8a8 <xTaskRemoveFromEventList>
 800cb84:	b110      	cbz	r0, 800cb8c <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800cb86:	b10f      	cbz	r7, 800cb8c <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800cb8c:	2001      	movs	r0, #1
	__asm volatile
 800cb8e:	f388 8811 	msr	BASEPRI, r8
}
 800cb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb96:	3501      	adds	r5, #1
 800cb98:	b26d      	sxtb	r5, r5
 800cb9a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800cb9e:	e7f5      	b.n	800cb8c <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800cba0:	2000      	movs	r0, #0
 800cba2:	e7f4      	b.n	800cb8e <xQueueGenericSendFromISR+0xa4>

0800cba4 <xQueueGiveFromISR>:
{
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800cba8:	4604      	mov	r4, r0
 800cbaa:	b940      	cbnz	r0, 800cbbe <xQueueGiveFromISR+0x1a>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	e7fe      	b.n	800cbbc <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbbe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cbc0:	b143      	cbz	r3, 800cbd4 <xQueueGiveFromISR+0x30>
 800cbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	e7fe      	b.n	800cbd2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cbd4:	6803      	ldr	r3, [r0, #0]
 800cbd6:	b953      	cbnz	r3, 800cbee <xQueueGiveFromISR+0x4a>
 800cbd8:	6883      	ldr	r3, [r0, #8]
 800cbda:	b143      	cbz	r3, 800cbee <xQueueGiveFromISR+0x4a>
 800cbdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	e7fe      	b.n	800cbec <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbee:	f7ff fceb 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cbf2:	f3ef 8611 	mrs	r6, BASEPRI
 800cbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d919      	bls.n	800cc42 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc0e:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc12:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800cc14:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc16:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc18:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800cc1a:	d10d      	bne.n	800cc38 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cc1e:	b13b      	cbz	r3, 800cc30 <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc20:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cc24:	f000 fe40 	bl	800d8a8 <xTaskRemoveFromEventList>
 800cc28:	b110      	cbz	r0, 800cc30 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800cc2a:	b10d      	cbz	r5, 800cc30 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800cc30:	2001      	movs	r0, #1
	__asm volatile
 800cc32:	f386 8811 	msr	BASEPRI, r6
}
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc38:	3301      	adds	r3, #1
 800cc3a:	b25b      	sxtb	r3, r3
 800cc3c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cc40:	e7f6      	b.n	800cc30 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800cc42:	2000      	movs	r0, #0
 800cc44:	e7f5      	b.n	800cc32 <xQueueGiveFromISR+0x8e>

0800cc46 <xQueueReceive>:
{
 800cc46:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cc4a:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800cc4c:	4604      	mov	r4, r0
{
 800cc4e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cc50:	b940      	cbnz	r0, 800cc64 <xQueueReceive+0x1e>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	e7fe      	b.n	800cc62 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc64:	b951      	cbnz	r1, 800cc7c <xQueueReceive+0x36>
 800cc66:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cc68:	b143      	cbz	r3, 800cc7c <xQueueReceive+0x36>
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	e7fe      	b.n	800cc7a <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc7c:	f000 fea4 	bl	800d9c8 <xTaskGetSchedulerState>
 800cc80:	4605      	mov	r5, r0
 800cc82:	b318      	cbz	r0, 800cccc <xQueueReceive+0x86>
 800cc84:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800cc86:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800cc8a:	f7ff fb8b 	bl	800c3a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc8e:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc90:	b347      	cbz	r7, 800cce4 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc92:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc94:	4631      	mov	r1, r6
 800cc96:	4620      	mov	r0, r4
 800cc98:	f7ff fd02 	bl	800c6a0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc9c:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc9e:	6923      	ldr	r3, [r4, #16]
 800cca0:	b173      	cbz	r3, 800ccc0 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cca2:	f104 0010 	add.w	r0, r4, #16
 800cca6:	f000 fdff 	bl	800d8a8 <xTaskRemoveFromEventList>
 800ccaa:	b148      	cbz	r0, 800ccc0 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800ccac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ccb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ccc0:	f7ff fb90 	bl	800c3e4 <vPortExitCritical>
				return pdPASS;
 800ccc4:	2001      	movs	r0, #1
}
 800ccc6:	b004      	add	sp, #16
 800ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cccc:	9b01      	ldr	r3, [sp, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0d9      	beq.n	800cc86 <xQueueReceive+0x40>
 800ccd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	e7fe      	b.n	800cce2 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	b91b      	cbnz	r3, 800ccf0 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800cce8:	f7ff fb7c 	bl	800c3e4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ccec:	2000      	movs	r0, #0
 800ccee:	e7ea      	b.n	800ccc6 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800ccf0:	b915      	cbnz	r5, 800ccf8 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccf2:	a802      	add	r0, sp, #8
 800ccf4:	f000 fe1a 	bl	800d92c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ccf8:	f7ff fb74 	bl	800c3e4 <vPortExitCritical>
		vTaskSuspendAll();
 800ccfc:	f000 fba8 	bl	800d450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd00:	f7ff fb50 	bl	800c3a4 <vPortEnterCritical>
 800cd04:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cd08:	2bff      	cmp	r3, #255	@ 0xff
 800cd0a:	d101      	bne.n	800cd10 <xQueueReceive+0xca>
 800cd0c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800cd10:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cd14:	2bff      	cmp	r3, #255	@ 0xff
 800cd16:	d101      	bne.n	800cd1c <xQueueReceive+0xd6>
 800cd18:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800cd1c:	f7ff fb62 	bl	800c3e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd20:	a901      	add	r1, sp, #4
 800cd22:	a802      	add	r0, sp, #8
 800cd24:	f000 fe0e 	bl	800d944 <xTaskCheckForTimeOut>
 800cd28:	bb00      	cbnz	r0, 800cd6c <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f7ff fc7a 	bl	800c624 <prvIsQueueEmpty>
 800cd30:	b1b0      	cbz	r0, 800cd60 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd32:	9901      	ldr	r1, [sp, #4]
 800cd34:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cd38:	f000 fd7e 	bl	800d838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7ff fcc4 	bl	800c6ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd42:	f000 fc29 	bl	800d598 <xTaskResumeAll>
 800cd46:	b948      	cbnz	r0, 800cd5c <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800cd48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cd4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	2501      	movs	r5, #1
 800cd5e:	e794      	b.n	800cc8a <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800cd60:	4620      	mov	r0, r4
 800cd62:	f7ff fcb2 	bl	800c6ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd66:	f000 fc17 	bl	800d598 <xTaskResumeAll>
 800cd6a:	e7f7      	b.n	800cd5c <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7ff fcac 	bl	800c6ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd72:	f000 fc11 	bl	800d598 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7ff fc54 	bl	800c624 <prvIsQueueEmpty>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d0ed      	beq.n	800cd5c <xQueueReceive+0x116>
 800cd80:	e7b4      	b.n	800ccec <xQueueReceive+0xa6>

0800cd82 <xQueueSemaphoreTake>:
{
 800cd82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd84:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800cd86:	4604      	mov	r4, r0
{
 800cd88:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cd8a:	b940      	cbnz	r0, 800cd9e <xQueueSemaphoreTake+0x1c>
 800cd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	e7fe      	b.n	800cd9c <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd9e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800cda0:	b145      	cbz	r5, 800cdb4 <xQueueSemaphoreTake+0x32>
 800cda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	e7fe      	b.n	800cdb2 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdb4:	f000 fe08 	bl	800d9c8 <xTaskGetSchedulerState>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b320      	cbz	r0, 800ce06 <xQueueSemaphoreTake+0x84>
 800cdbc:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800cdbe:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800cdc0:	f7ff faf0 	bl	800c3a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cdc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cdc6:	b353      	cbz	r3, 800ce1e <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	b913      	cbnz	r3, 800cdd6 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cdd0:	f000 fed8 	bl	800db84 <pvTaskIncrementMutexHeldCount>
 800cdd4:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdd6:	6923      	ldr	r3, [r4, #16]
 800cdd8:	b173      	cbz	r3, 800cdf8 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdda:	f104 0010 	add.w	r0, r4, #16
 800cdde:	f000 fd63 	bl	800d8a8 <xTaskRemoveFromEventList>
 800cde2:	b148      	cbz	r0, 800cdf8 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800cde4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cde8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800cdf8:	f7ff faf4 	bl	800c3e4 <vPortExitCritical>
				return pdPASS;
 800cdfc:	2001      	movs	r0, #1
}
 800cdfe:	b005      	add	sp, #20
 800ce00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce02:	4635      	mov	r5, r6
 800ce04:	e7db      	b.n	800cdbe <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0fa      	beq.n	800ce02 <xQueueSemaphoreTake+0x80>
 800ce0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	e7fe      	b.n	800ce1c <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	b953      	cbnz	r3, 800ce38 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	d066      	beq.n	800cef4 <xQueueSemaphoreTake+0x172>
 800ce26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	e7fe      	b.n	800ce36 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800ce38:	b916      	cbnz	r6, 800ce40 <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce3a:	a802      	add	r0, sp, #8
 800ce3c:	f000 fd76 	bl	800d92c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ce40:	f7ff fad0 	bl	800c3e4 <vPortExitCritical>
		vTaskSuspendAll();
 800ce44:	f000 fb04 	bl	800d450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce48:	f7ff faac 	bl	800c3a4 <vPortEnterCritical>
 800ce4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ce50:	2bff      	cmp	r3, #255	@ 0xff
 800ce52:	d101      	bne.n	800ce58 <xQueueSemaphoreTake+0xd6>
 800ce54:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800ce58:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ce5c:	2bff      	cmp	r3, #255	@ 0xff
 800ce5e:	d101      	bne.n	800ce64 <xQueueSemaphoreTake+0xe2>
 800ce60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce64:	f7ff fabe 	bl	800c3e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce68:	a901      	add	r1, sp, #4
 800ce6a:	a802      	add	r0, sp, #8
 800ce6c:	f000 fd6a 	bl	800d944 <xTaskCheckForTimeOut>
 800ce70:	bb50      	cbnz	r0, 800cec8 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce72:	4620      	mov	r0, r4
 800ce74:	f7ff fbd6 	bl	800c624 <prvIsQueueEmpty>
 800ce78:	b300      	cbz	r0, 800cebc <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	b93b      	cbnz	r3, 800ce8e <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800ce7e:	f7ff fa91 	bl	800c3a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce82:	68a0      	ldr	r0, [r4, #8]
 800ce84:	f000 fdb0 	bl	800d9e8 <xTaskPriorityInherit>
 800ce88:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800ce8a:	f7ff faab 	bl	800c3e4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce8e:	9901      	ldr	r1, [sp, #4]
 800ce90:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ce94:	f000 fcd0 	bl	800d838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7ff fc16 	bl	800c6ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce9e:	f000 fb7b 	bl	800d598 <xTaskResumeAll>
 800cea2:	b948      	cbnz	r0, 800ceb8 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800cea4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	2601      	movs	r6, #1
 800ceba:	e781      	b.n	800cdc0 <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800cebc:	4620      	mov	r0, r4
 800cebe:	f7ff fc04 	bl	800c6ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cec2:	f000 fb69 	bl	800d598 <xTaskResumeAll>
 800cec6:	e7f7      	b.n	800ceb8 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff fbfe 	bl	800c6ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cece:	f000 fb63 	bl	800d598 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ced2:	4620      	mov	r0, r4
 800ced4:	f7ff fba6 	bl	800c624 <prvIsQueueEmpty>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d0ed      	beq.n	800ceb8 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800cedc:	b165      	cbz	r5, 800cef8 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800cede:	f7ff fa61 	bl	800c3a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cee2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cee4:	b119      	cbz	r1, 800ceee <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cee6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cee8:	6819      	ldr	r1, [r3, #0]
 800ceea:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ceee:	68a0      	ldr	r0, [r4, #8]
 800cef0:	f000 fdfa 	bl	800dae8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800cef4:	f7ff fa76 	bl	800c3e4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cef8:	2000      	movs	r0, #0
 800cefa:	e780      	b.n	800cdfe <xQueueSemaphoreTake+0x7c>

0800cefc <xQueueReceiveFromISR>:
{
 800cefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf00:	4689      	mov	r9, r1
 800cf02:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800cf04:	4604      	mov	r4, r0
 800cf06:	b940      	cbnz	r0, 800cf1a <xQueueReceiveFromISR+0x1e>
 800cf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	e7fe      	b.n	800cf18 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf1a:	b951      	cbnz	r1, 800cf32 <xQueueReceiveFromISR+0x36>
 800cf1c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cf1e:	b143      	cbz	r3, 800cf32 <xQueueReceiveFromISR+0x36>
 800cf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	e7fe      	b.n	800cf30 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf32:	f7ff fb49 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cf36:	f3ef 8711 	mrs	r7, BASEPRI
 800cf3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3e:	f383 8811 	msr	BASEPRI, r3
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf4a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf4c:	b30d      	cbz	r5, 800cf92 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf4e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf52:	4649      	mov	r1, r9
 800cf54:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf56:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf58:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf5a:	f7ff fba1 	bl	800c6a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf5e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800cf60:	1c73      	adds	r3, r6, #1
 800cf62:	d111      	bne.n	800cf88 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf64:	6923      	ldr	r3, [r4, #16]
 800cf66:	b153      	cbz	r3, 800cf7e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf68:	f104 0010 	add.w	r0, r4, #16
 800cf6c:	f000 fc9c 	bl	800d8a8 <xTaskRemoveFromEventList>
 800cf70:	b128      	cbz	r0, 800cf7e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800cf72:	f1b8 0f00 	cmp.w	r8, #0
 800cf76:	d002      	beq.n	800cf7e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800cf7e:	2001      	movs	r0, #1
	__asm volatile
 800cf80:	f387 8811 	msr	BASEPRI, r7
}
 800cf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cf88:	3601      	adds	r6, #1
 800cf8a:	b276      	sxtb	r6, r6
 800cf8c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800cf90:	e7f5      	b.n	800cf7e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800cf92:	4628      	mov	r0, r5
 800cf94:	e7f4      	b.n	800cf80 <xQueueReceiveFromISR+0x84>

0800cf96 <uxQueueMessagesWaiting>:
{
 800cf96:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 800cf98:	4604      	mov	r4, r0
 800cf9a:	b940      	cbnz	r0, 800cfae <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	e7fe      	b.n	800cfac <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800cfae:	f7ff f9f9 	bl	800c3a4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cfb2:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 800cfb4:	f7ff fa16 	bl	800c3e4 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cfb8:	4620      	mov	r0, r4
 800cfba:	bd10      	pop	{r4, pc}

0800cfbc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 800cfbc:	b940      	cbnz	r0, 800cfd0 <uxQueueMessagesWaitingFromISR+0x14>
 800cfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	e7fe      	b.n	800cfce <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800cfd0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cfd2:	4770      	bx	lr

0800cfd4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfd4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cfd6:	4a07      	ldr	r2, [pc, #28]	@ (800cff4 <vQueueAddToRegistry+0x20>)
	{
 800cfd8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cfda:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800cfde:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800cfe2:	b91d      	cbnz	r5, 800cfec <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cfe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cfe8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cfea:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfec:	3301      	adds	r3, #1
 800cfee:	2b08      	cmp	r3, #8
 800cff0:	d1f3      	bne.n	800cfda <vQueueAddToRegistry+0x6>
 800cff2:	e7fa      	b.n	800cfea <vQueueAddToRegistry+0x16>
 800cff4:	2402d438 	.word	0x2402d438

0800cff8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cff8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cffa:	4a09      	ldr	r2, [pc, #36]	@ (800d020 <vQueueUnregisterQueue+0x28>)
	{
 800cffc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cffe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d002:	00dc      	lsls	r4, r3, #3
 800d004:	4281      	cmp	r1, r0
 800d006:	d106      	bne.n	800d016 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d008:	4a06      	ldr	r2, [pc, #24]	@ (800d024 <vQueueUnregisterQueue+0x2c>)
 800d00a:	2100      	movs	r1, #0
 800d00c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d010:	4422      	add	r2, r4
 800d012:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d014:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d016:	3301      	adds	r3, #1
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d1f0      	bne.n	800cffe <vQueueUnregisterQueue+0x6>
 800d01c:	e7fa      	b.n	800d014 <vQueueUnregisterQueue+0x1c>
 800d01e:	bf00      	nop
 800d020:	2402d43c 	.word	0x2402d43c
 800d024:	2402d438 	.word	0x2402d438

0800d028 <vQueueDelete>:
{
 800d028:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800d02a:	b940      	cbnz	r0, 800d03e <vQueueDelete+0x16>
 800d02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	e7fe      	b.n	800d03c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800d03e:	f7ff ffdb 	bl	800cff8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d042:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800d046:	b91b      	cbnz	r3, 800d050 <vQueueDelete+0x28>
}
 800d048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800d04c:	f7ff b8ca 	b.w	800c1e4 <vPortFree>
}
 800d050:	bd10      	pop	{r4, pc}

0800d052 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d052:	b570      	push	{r4, r5, r6, lr}
 800d054:	4604      	mov	r4, r0
 800d056:	460d      	mov	r5, r1
 800d058:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d05a:	f7ff f9a3 	bl	800c3a4 <vPortEnterCritical>
 800d05e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d062:	2bff      	cmp	r3, #255	@ 0xff
 800d064:	d102      	bne.n	800d06c <vQueueWaitForMessageRestricted+0x1a>
 800d066:	2300      	movs	r3, #0
 800d068:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d06c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d070:	2bff      	cmp	r3, #255	@ 0xff
 800d072:	d102      	bne.n	800d07a <vQueueWaitForMessageRestricted+0x28>
 800d074:	2300      	movs	r3, #0
 800d076:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d07a:	f7ff f9b3 	bl	800c3e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d07e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d080:	b92b      	cbnz	r3, 800d08e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d082:	4632      	mov	r2, r6
 800d084:	4629      	mov	r1, r5
 800d086:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d08a:	f000 fbef 	bl	800d86c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d08e:	4620      	mov	r0, r4
	}
 800d090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800d094:	f7ff bb19 	b.w	800c6ca <prvUnlockQueue>

0800d098 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d09e:	f7ff f981 	bl	800c3a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0a2:	4b2f      	ldr	r3, [pc, #188]	@ (800d160 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800d0a4:	4e2f      	ldr	r6, [pc, #188]	@ (800d164 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	4f2f      	ldr	r7, [pc, #188]	@ (800d168 <prvAddNewTaskToReadyList+0xd0>)
 800d0aa:	3201      	adds	r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d0ae:	6835      	ldr	r5, [r6, #0]
 800d0b0:	2d00      	cmp	r5, #0
 800d0b2:	d14a      	bne.n	800d14a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0b4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d11f      	bne.n	800d0fc <prvAddNewTaskToReadyList+0x64>
 800d0bc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0be:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	f7ff f8cd 	bl	800c260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0c6:	f108 0814 	add.w	r8, r8, #20
 800d0ca:	2d38      	cmp	r5, #56	@ 0x38
 800d0cc:	d1f7      	bne.n	800d0be <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0ce:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800d190 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800d0d2:	4d26      	ldr	r5, [pc, #152]	@ (800d16c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	f7ff f8c3 	bl	800c260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7ff f8c0 	bl	800c260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0e0:	4823      	ldr	r0, [pc, #140]	@ (800d170 <prvAddNewTaskToReadyList+0xd8>)
 800d0e2:	f7ff f8bd 	bl	800c260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0e6:	4823      	ldr	r0, [pc, #140]	@ (800d174 <prvAddNewTaskToReadyList+0xdc>)
 800d0e8:	f7ff f8ba 	bl	800c260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0ec:	4822      	ldr	r0, [pc, #136]	@ (800d178 <prvAddNewTaskToReadyList+0xe0>)
 800d0ee:	f7ff f8b7 	bl	800c260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0f2:	4b22      	ldr	r3, [pc, #136]	@ (800d17c <prvAddNewTaskToReadyList+0xe4>)
 800d0f4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0f8:	4b21      	ldr	r3, [pc, #132]	@ (800d180 <prvAddNewTaskToReadyList+0xe8>)
 800d0fa:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800d0fc:	4a21      	ldr	r2, [pc, #132]	@ (800d184 <prvAddNewTaskToReadyList+0xec>)
 800d0fe:	6813      	ldr	r3, [r2, #0]
 800d100:	3301      	adds	r3, #1
 800d102:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d104:	4a20      	ldr	r2, [pc, #128]	@ (800d188 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d106:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d108:	6811      	ldr	r1, [r2, #0]
 800d10a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d10c:	428b      	cmp	r3, r1
 800d10e:	d900      	bls.n	800d112 <prvAddNewTaskToReadyList+0x7a>
 800d110:	6013      	str	r3, [r2, #0]
 800d112:	2014      	movs	r0, #20
 800d114:	1d21      	adds	r1, r4, #4
 800d116:	fb00 7003 	mla	r0, r0, r3, r7
 800d11a:	f7ff f8af 	bl	800c27c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d11e:	f7ff f961 	bl	800c3e4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d122:	4b1a      	ldr	r3, [pc, #104]	@ (800d18c <prvAddNewTaskToReadyList+0xf4>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	b173      	cbz	r3, 800d146 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d128:	6833      	ldr	r3, [r6, #0]
 800d12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d12c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d12e:	429a      	cmp	r2, r3
 800d130:	d209      	bcs.n	800d146 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800d132:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d13a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	f3bf 8f6f 	isb	sy
}
 800d146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800d14a:	4b10      	ldr	r3, [pc, #64]	@ (800d18c <prvAddNewTaskToReadyList+0xf4>)
 800d14c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d14e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800d150:	2a00      	cmp	r2, #0
 800d152:	d1d3      	bne.n	800d0fc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d154:	6832      	ldr	r2, [r6, #0]
 800d156:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d158:	429a      	cmp	r2, r3
 800d15a:	d8cf      	bhi.n	800d0fc <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800d15c:	6034      	str	r4, [r6, #0]
 800d15e:	e7cd      	b.n	800d0fc <prvAddNewTaskToReadyList+0x64>
 800d160:	2402d49c 	.word	0x2402d49c
 800d164:	2402d970 	.word	0x2402d970
 800d168:	2402d510 	.word	0x2402d510
 800d16c:	2402d4e8 	.word	0x2402d4e8
 800d170:	2402d4cc 	.word	0x2402d4cc
 800d174:	2402d4b8 	.word	0x2402d4b8
 800d178:	2402d4a0 	.word	0x2402d4a0
 800d17c:	2402d4e4 	.word	0x2402d4e4
 800d180:	2402d4e0 	.word	0x2402d4e0
 800d184:	2402d480 	.word	0x2402d480
 800d188:	2402d494 	.word	0x2402d494
 800d18c:	2402d490 	.word	0x2402d490
 800d190:	2402d4fc 	.word	0x2402d4fc

0800d194 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d196:	4b15      	ldr	r3, [pc, #84]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0x58>)
{
 800d198:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d19a:	4d15      	ldr	r5, [pc, #84]	@ (800d1f0 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800d19c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800d19e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1a0:	6828      	ldr	r0, [r5, #0]
 800d1a2:	3004      	adds	r0, #4
 800d1a4:	f7ff f88c 	bl	800c2c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1a8:	1c73      	adds	r3, r6, #1
 800d1aa:	d107      	bne.n	800d1bc <prvAddCurrentTaskToDelayedList+0x28>
 800d1ac:	b137      	cbz	r7, 800d1bc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1ae:	6829      	ldr	r1, [r5, #0]
 800d1b0:	4810      	ldr	r0, [pc, #64]	@ (800d1f4 <prvAddCurrentTaskToDelayedList+0x60>)
 800d1b2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d1b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1b8:	f7ff b860 	b.w	800c27c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d1bc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d1be:	682b      	ldr	r3, [r5, #0]
 800d1c0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d1c2:	d307      	bcc.n	800d1d4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d1f8 <prvAddCurrentTaskToDelayedList+0x64>)
 800d1c6:	6818      	ldr	r0, [r3, #0]
 800d1c8:	6829      	ldr	r1, [r5, #0]
}
 800d1ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1ce:	3104      	adds	r1, #4
 800d1d0:	f7ff b85f 	b.w	800c292 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1d4:	4b09      	ldr	r3, [pc, #36]	@ (800d1fc <prvAddCurrentTaskToDelayedList+0x68>)
 800d1d6:	6818      	ldr	r0, [r3, #0]
 800d1d8:	6829      	ldr	r1, [r5, #0]
 800d1da:	3104      	adds	r1, #4
 800d1dc:	f7ff f859 	bl	800c292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1e0:	4b07      	ldr	r3, [pc, #28]	@ (800d200 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	42a2      	cmp	r2, r4
 800d1e6:	d900      	bls.n	800d1ea <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800d1e8:	601c      	str	r4, [r3, #0]
}
 800d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ec:	2402d498 	.word	0x2402d498
 800d1f0:	2402d970 	.word	0x2402d970
 800d1f4:	2402d4a0 	.word	0x2402d4a0
 800d1f8:	2402d4e0 	.word	0x2402d4e0
 800d1fc:	2402d4e4 	.word	0x2402d4e4
 800d200:	2402d47c 	.word	0x2402d47c

0800d204 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d204:	4a06      	ldr	r2, [pc, #24]	@ (800d220 <prvResetNextTaskUnblockTime+0x1c>)
 800d206:	6813      	ldr	r3, [r2, #0]
 800d208:	6819      	ldr	r1, [r3, #0]
 800d20a:	4b06      	ldr	r3, [pc, #24]	@ (800d224 <prvResetNextTaskUnblockTime+0x20>)
 800d20c:	b919      	cbnz	r1, 800d216 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d20e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d212:	601a      	str	r2, [r3, #0]
}
 800d214:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d216:	6812      	ldr	r2, [r2, #0]
 800d218:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d21a:	68d2      	ldr	r2, [r2, #12]
 800d21c:	6852      	ldr	r2, [r2, #4]
 800d21e:	e7f8      	b.n	800d212 <prvResetNextTaskUnblockTime+0xe>
 800d220:	2402d4e4 	.word	0x2402d4e4
 800d224:	2402d47c 	.word	0x2402d47c

0800d228 <prvDeleteTCB>:
	{
 800d228:	b510      	push	{r4, lr}
 800d22a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d22c:	3058      	adds	r0, #88	@ 0x58
 800d22e:	f015 fe95 	bl	8022f5c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d232:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800d236:	b93b      	cbnz	r3, 800d248 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800d238:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d23a:	f7fe ffd3 	bl	800c1e4 <vPortFree>
				vPortFree( pxTCB );
 800d23e:	4620      	mov	r0, r4
	}
 800d240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800d244:	f7fe bfce 	b.w	800c1e4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d0f8      	beq.n	800d23e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d008      	beq.n	800d262 <prvDeleteTCB+0x3a>
 800d250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	e7fe      	b.n	800d260 <prvDeleteTCB+0x38>
	}
 800d262:	bd10      	pop	{r4, pc}

0800d264 <prvIdleTask>:
{
 800d264:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d266:	4c14      	ldr	r4, [pc, #80]	@ (800d2b8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d268:	4f14      	ldr	r7, [pc, #80]	@ (800d2bc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800d26a:	4d15      	ldr	r5, [pc, #84]	@ (800d2c0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	b983      	cbnz	r3, 800d292 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d270:	4b14      	ldr	r3, [pc, #80]	@ (800d2c4 <prvIdleTask+0x60>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b01      	cmp	r3, #1
 800d276:	d909      	bls.n	800d28c <prvIdleTask+0x28>
				taskYIELD();
 800d278:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d27c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d280:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800d28c:	f7f3 fa4c 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d290:	e7eb      	b.n	800d26a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800d292:	f7ff f887 	bl	800c3a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d29a:	1d30      	adds	r0, r6, #4
 800d29c:	f7ff f810 	bl	800c2c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800d2ac:	f7ff f89a 	bl	800c3e4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f7ff ffb9 	bl	800d228 <prvDeleteTCB>
 800d2b6:	e7d9      	b.n	800d26c <prvIdleTask+0x8>
 800d2b8:	2402d4b4 	.word	0x2402d4b4
 800d2bc:	2402d4b8 	.word	0x2402d4b8
 800d2c0:	2402d49c 	.word	0x2402d49c
 800d2c4:	2402d510 	.word	0x2402d510

0800d2c8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2cc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2d2:	21a5      	movs	r1, #165	@ 0xa5
 800d2d4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d2d6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2d8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d2da:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d2e0:	f015 fdf3 	bl	8022eca <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d2e6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2e8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800d2ec:	2d00      	cmp	r5, #0
 800d2ee:	d043      	beq.n	800d378 <prvInitialiseNewTask.constprop.0+0xb0>
 800d2f0:	1e6b      	subs	r3, r5, #1
 800d2f2:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800d2f6:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d2fc:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800d300:	b109      	cbz	r1, 800d306 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d302:	42ab      	cmp	r3, r5
 800d304:	d1f8      	bne.n	800d2f8 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d306:	2300      	movs	r3, #0
 800d308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d30c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800d30e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d312:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d314:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800d316:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d31a:	bf28      	it	cs
 800d31c:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d31e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d320:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d322:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d326:	f7fe ffa6 	bl	800c276 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d32a:	f104 0018 	add.w	r0, r4, #24
 800d32e:	f7fe ffa2 	bl	800c276 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d332:	224c      	movs	r2, #76	@ 0x4c
 800d334:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800d336:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d33a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d33e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d340:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d342:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800d344:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d348:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d34c:	f015 fdbd 	bl	8022eca <memset>
 800d350:	4b0b      	ldr	r3, [pc, #44]	@ (800d380 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d352:	4639      	mov	r1, r7
 800d354:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d35a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800d35c:	33d0      	adds	r3, #208	@ 0xd0
 800d35e:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d360:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d362:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d364:	f7fe fffa 	bl	800c35c <pxPortInitialiseStack>
 800d368:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d36a:	f1b9 0f00 	cmp.w	r9, #0
 800d36e:	d001      	beq.n	800d374 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d370:	f8c9 4000 	str.w	r4, [r9]
}
 800d374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d378:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800d37c:	e7c6      	b.n	800d30c <prvInitialiseNewTask.constprop.0+0x44>
 800d37e:	bf00      	nop
 800d380:	2402e3e8 	.word	0x2402e3e8

0800d384 <xTaskCreateStatic>:
	{
 800d384:	b570      	push	{r4, r5, r6, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d38c:	b945      	cbnz	r5, 800d3a0 <xTaskCreateStatic+0x1c>
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	e7fe      	b.n	800d39e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800d3a0:	b944      	cbnz	r4, 800d3b4 <xTaskCreateStatic+0x30>
 800d3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	e7fe      	b.n	800d3b2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3b4:	26ac      	movs	r6, #172	@ 0xac
 800d3b6:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3b8:	9e05      	ldr	r6, [sp, #20]
 800d3ba:	2eac      	cmp	r6, #172	@ 0xac
 800d3bc:	d008      	beq.n	800d3d0 <xTaskCreateStatic+0x4c>
 800d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	e7fe      	b.n	800d3ce <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d3d0:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d3d2:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d3d4:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d3d6:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d3da:	ad04      	add	r5, sp, #16
 800d3dc:	9402      	str	r4, [sp, #8]
 800d3de:	9501      	str	r5, [sp, #4]
 800d3e0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d3e2:	9500      	str	r5, [sp, #0]
 800d3e4:	f7ff ff70 	bl	800d2c8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f7ff fe55 	bl	800d098 <prvAddNewTaskToReadyList>
	}
 800d3ee:	9804      	ldr	r0, [sp, #16]
 800d3f0:	b006      	add	sp, #24
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}

0800d3f4 <xTaskCreate>:
	{
 800d3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3fc:	0090      	lsls	r0, r2, #2
	{
 800d3fe:	4688      	mov	r8, r1
 800d400:	4616      	mov	r6, r2
 800d402:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d404:	f7fe fe56 	bl	800c0b4 <pvPortMalloc>
			if( pxStack != NULL )
 800d408:	4605      	mov	r5, r0
 800d40a:	b920      	cbnz	r0, 800d416 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d410:	b005      	add	sp, #20
 800d412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d416:	20ac      	movs	r0, #172	@ 0xac
 800d418:	f7fe fe4c 	bl	800c0b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d41c:	4604      	mov	r4, r0
 800d41e:	b198      	cbz	r0, 800d448 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d420:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800d422:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d424:	4632      	mov	r2, r6
 800d426:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d428:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d42c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d42e:	9002      	str	r0, [sp, #8]
 800d430:	4638      	mov	r0, r7
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	464b      	mov	r3, r9
 800d43a:	f7ff ff45 	bl	800d2c8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d43e:	4620      	mov	r0, r4
 800d440:	f7ff fe2a 	bl	800d098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d444:	2001      	movs	r0, #1
 800d446:	e7e3      	b.n	800d410 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800d448:	4628      	mov	r0, r5
 800d44a:	f7fe fecb 	bl	800c1e4 <vPortFree>
		if( pxNewTCB != NULL )
 800d44e:	e7dd      	b.n	800d40c <xTaskCreate+0x18>

0800d450 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d450:	4a02      	ldr	r2, [pc, #8]	@ (800d45c <vTaskSuspendAll+0xc>)
 800d452:	6813      	ldr	r3, [r2, #0]
 800d454:	3301      	adds	r3, #1
 800d456:	6013      	str	r3, [r2, #0]
}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	2402d478 	.word	0x2402d478

0800d460 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d460:	4b01      	ldr	r3, [pc, #4]	@ (800d468 <xTaskGetTickCount+0x8>)
 800d462:	6818      	ldr	r0, [r3, #0]
}
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	2402d498 	.word	0x2402d498

0800d46c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d46c:	4b3f      	ldr	r3, [pc, #252]	@ (800d56c <xTaskIncrementTick+0x100>)
 800d46e:	681b      	ldr	r3, [r3, #0]
{
 800d470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d474:	2b00      	cmp	r3, #0
 800d476:	d172      	bne.n	800d55e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d478:	4b3d      	ldr	r3, [pc, #244]	@ (800d570 <xTaskIncrementTick+0x104>)
 800d47a:	681c      	ldr	r4, [r3, #0]
 800d47c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800d47e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d480:	b9bc      	cbnz	r4, 800d4b2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d482:	4b3c      	ldr	r3, [pc, #240]	@ (800d574 <xTaskIncrementTick+0x108>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	6812      	ldr	r2, [r2, #0]
 800d488:	b142      	cbz	r2, 800d49c <xTaskIncrementTick+0x30>
 800d48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	e7fe      	b.n	800d49a <xTaskIncrementTick+0x2e>
 800d49c:	4a36      	ldr	r2, [pc, #216]	@ (800d578 <xTaskIncrementTick+0x10c>)
 800d49e:	6819      	ldr	r1, [r3, #0]
 800d4a0:	6810      	ldr	r0, [r2, #0]
 800d4a2:	6018      	str	r0, [r3, #0]
 800d4a4:	6011      	str	r1, [r2, #0]
 800d4a6:	4a35      	ldr	r2, [pc, #212]	@ (800d57c <xTaskIncrementTick+0x110>)
 800d4a8:	6813      	ldr	r3, [r2, #0]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	f7ff fea9 	bl	800d204 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4b2:	4d33      	ldr	r5, [pc, #204]	@ (800d580 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800d4b4:	f04f 0b00 	mov.w	fp, #0
 800d4b8:	4e32      	ldr	r6, [pc, #200]	@ (800d584 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4ba:	682b      	ldr	r3, [r5, #0]
 800d4bc:	4f32      	ldr	r7, [pc, #200]	@ (800d588 <xTaskIncrementTick+0x11c>)
 800d4be:	429c      	cmp	r4, r3
 800d4c0:	d212      	bcs.n	800d4e8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	2114      	movs	r1, #20
 800d4c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d4c8:	434a      	muls	r2, r1
 800d4ca:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800d4cc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800d4ce:	4a2f      	ldr	r2, [pc, #188]	@ (800d58c <xTaskIncrementTick+0x120>)
 800d4d0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800d4d2:	bf28      	it	cs
 800d4d4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800d4d8:	2a00      	cmp	r2, #0
 800d4da:	bf18      	it	ne
 800d4dc:	f04f 0b01 	movne.w	fp, #1
}
 800d4e0:	4658      	mov	r0, fp
 800d4e2:	b003      	add	sp, #12
 800d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4e8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800d574 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800d4ec:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800d594 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4f0:	f8d9 2000 	ldr.w	r2, [r9]
 800d4f4:	6812      	ldr	r2, [r2, #0]
 800d4f6:	b91a      	cbnz	r2, 800d500 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4fc:	602a      	str	r2, [r5, #0]
					break;
 800d4fe:	e7e0      	b.n	800d4c2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d500:	f8d9 2000 	ldr.w	r2, [r9]
 800d504:	68d2      	ldr	r2, [r2, #12]
 800d506:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d50a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800d50e:	428c      	cmp	r4, r1
 800d510:	d201      	bcs.n	800d516 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800d512:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d514:	e7d5      	b.n	800d4c2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d516:	f108 0304 	add.w	r3, r8, #4
 800d51a:	4618      	mov	r0, r3
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	f7fe fecf 	bl	800c2c0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d522:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800d526:	b119      	cbz	r1, 800d530 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d528:	f108 0018 	add.w	r0, r8, #24
 800d52c:	f7fe fec8 	bl	800c2c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d530:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800d534:	f8da 1000 	ldr.w	r1, [sl]
 800d538:	4288      	cmp	r0, r1
 800d53a:	d901      	bls.n	800d540 <xTaskIncrementTick+0xd4>
 800d53c:	f8ca 0000 	str.w	r0, [sl]
 800d540:	2314      	movs	r3, #20
 800d542:	9901      	ldr	r1, [sp, #4]
 800d544:	fb03 6000 	mla	r0, r3, r0, r6
 800d548:	f7fe fe98 	bl	800c27c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d54c:	6838      	ldr	r0, [r7, #0]
 800d54e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800d552:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800d554:	4291      	cmp	r1, r2
 800d556:	bf28      	it	cs
 800d558:	f04f 0b01 	movcs.w	fp, #1
 800d55c:	e7c8      	b.n	800d4f0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800d55e:	4a0c      	ldr	r2, [pc, #48]	@ (800d590 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800d560:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800d564:	6813      	ldr	r3, [r2, #0]
 800d566:	3301      	adds	r3, #1
 800d568:	6013      	str	r3, [r2, #0]
 800d56a:	e7b9      	b.n	800d4e0 <xTaskIncrementTick+0x74>
 800d56c:	2402d478 	.word	0x2402d478
 800d570:	2402d498 	.word	0x2402d498
 800d574:	2402d4e4 	.word	0x2402d4e4
 800d578:	2402d4e0 	.word	0x2402d4e0
 800d57c:	2402d484 	.word	0x2402d484
 800d580:	2402d47c 	.word	0x2402d47c
 800d584:	2402d510 	.word	0x2402d510
 800d588:	2402d970 	.word	0x2402d970
 800d58c:	2402d488 	.word	0x2402d488
 800d590:	2402d48c 	.word	0x2402d48c
 800d594:	2402d494 	.word	0x2402d494

0800d598 <xTaskResumeAll>:
{
 800d598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800d59c:	4c30      	ldr	r4, [pc, #192]	@ (800d660 <xTaskResumeAll+0xc8>)
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	b943      	cbnz	r3, 800d5b4 <xTaskResumeAll+0x1c>
 800d5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	e7fe      	b.n	800d5b2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d5b4:	f7fe fef6 	bl	800c3a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d5b8:	6823      	ldr	r3, [r4, #0]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5be:	6824      	ldr	r4, [r4, #0]
 800d5c0:	b12c      	cbz	r4, 800d5ce <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d5c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d5c4:	f7fe ff0e 	bl	800c3e4 <vPortExitCritical>
}
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5ce:	4b25      	ldr	r3, [pc, #148]	@ (800d664 <xTaskResumeAll+0xcc>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d0f5      	beq.n	800d5c2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5d6:	4d24      	ldr	r5, [pc, #144]	@ (800d668 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800d5d8:	4e24      	ldr	r6, [pc, #144]	@ (800d66c <xTaskResumeAll+0xd4>)
 800d5da:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800d67c <xTaskResumeAll+0xe4>
 800d5de:	e01d      	b.n	800d61c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e0:	68eb      	ldr	r3, [r5, #12]
 800d5e2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5e4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5e6:	f104 0018 	add.w	r0, r4, #24
 800d5ea:	f7fe fe69 	bl	800c2c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	f7fe fe66 	bl	800c2c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d5f6:	6832      	ldr	r2, [r6, #0]
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d900      	bls.n	800d5fe <xTaskResumeAll+0x66>
 800d5fc:	6033      	str	r3, [r6, #0]
 800d5fe:	2014      	movs	r0, #20
 800d600:	4639      	mov	r1, r7
 800d602:	fb00 8003 	mla	r0, r0, r3, r8
 800d606:	f7fe fe39 	bl	800c27c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d60a:	4b19      	ldr	r3, [pc, #100]	@ (800d670 <xTaskResumeAll+0xd8>)
 800d60c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d612:	429a      	cmp	r2, r3
 800d614:	d302      	bcc.n	800d61c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800d616:	4b17      	ldr	r3, [pc, #92]	@ (800d674 <xTaskResumeAll+0xdc>)
 800d618:	2201      	movs	r2, #1
 800d61a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1de      	bne.n	800d5e0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800d622:	b10c      	cbz	r4, 800d628 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800d624:	f7ff fdee 	bl	800d204 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d628:	4d13      	ldr	r5, [pc, #76]	@ (800d678 <xTaskResumeAll+0xe0>)
 800d62a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d62c:	b144      	cbz	r4, 800d640 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800d62e:	4e11      	ldr	r6, [pc, #68]	@ (800d674 <xTaskResumeAll+0xdc>)
 800d630:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d632:	f7ff ff1b 	bl	800d46c <xTaskIncrementTick>
 800d636:	b100      	cbz	r0, 800d63a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800d638:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d63a:	3c01      	subs	r4, #1
 800d63c:	d1f9      	bne.n	800d632 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800d63e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800d640:	4b0c      	ldr	r3, [pc, #48]	@ (800d674 <xTaskResumeAll+0xdc>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d0bc      	beq.n	800d5c2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800d648:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d64c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d650:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d65c:	2401      	movs	r4, #1
 800d65e:	e7b1      	b.n	800d5c4 <xTaskResumeAll+0x2c>
 800d660:	2402d478 	.word	0x2402d478
 800d664:	2402d49c 	.word	0x2402d49c
 800d668:	2402d4cc 	.word	0x2402d4cc
 800d66c:	2402d494 	.word	0x2402d494
 800d670:	2402d970 	.word	0x2402d970
 800d674:	2402d488 	.word	0x2402d488
 800d678:	2402d48c 	.word	0x2402d48c
 800d67c:	2402d510 	.word	0x2402d510

0800d680 <vTaskDelay>:
	{
 800d680:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d682:	b950      	cbnz	r0, 800d69a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800d684:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d68c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	f3bf 8f6f 	isb	sy
	}
 800d698:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800d69a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c4 <vTaskDelay+0x44>)
 800d69c:	6819      	ldr	r1, [r3, #0]
 800d69e:	b141      	cbz	r1, 800d6b2 <vTaskDelay+0x32>
 800d6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	e7fe      	b.n	800d6b0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d6b2:	f7ff fecd 	bl	800d450 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6b6:	f7ff fd6d 	bl	800d194 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d6ba:	f7ff ff6d 	bl	800d598 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d0e0      	beq.n	800d684 <vTaskDelay+0x4>
 800d6c2:	e7e9      	b.n	800d698 <vTaskDelay+0x18>
 800d6c4:	2402d478 	.word	0x2402d478

0800d6c8 <vTaskSetApplicationTaskTag>:
	{
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	460d      	mov	r5, r1
		if( xTask == NULL )
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	b908      	cbnz	r0, 800d6d4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800d6d0:	4b04      	ldr	r3, [pc, #16]	@ (800d6e4 <vTaskSetApplicationTaskTag+0x1c>)
 800d6d2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800d6d4:	f7fe fe66 	bl	800c3a4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800d6d8:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800d6da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800d6de:	f7fe be81 	b.w	800c3e4 <vPortExitCritical>
 800d6e2:	bf00      	nop
 800d6e4:	2402d970 	.word	0x2402d970

0800d6e8 <xTaskCallApplicationTaskHook>:
	{
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	4608      	mov	r0, r1
		if( xTask == NULL )
 800d6ec:	b90b      	cbnz	r3, 800d6f2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800d6ee:	4b03      	ldr	r3, [pc, #12]	@ (800d6fc <xTaskCallApplicationTaskHook+0x14>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800d6f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6f4:	b103      	cbz	r3, 800d6f8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800d6f6:	4718      	bx	r3
	}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	4770      	bx	lr
 800d6fc:	2402d970 	.word	0x2402d970

0800d700 <vTaskStartScheduler>:
{
 800d700:	b510      	push	{r4, lr}
 800d702:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d704:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d706:	aa07      	add	r2, sp, #28
 800d708:	a906      	add	r1, sp, #24
 800d70a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d70c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d710:	f7fe fc92 	bl	800c038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d714:	9b05      	ldr	r3, [sp, #20]
 800d716:	9a07      	ldr	r2, [sp, #28]
 800d718:	9302      	str	r3, [sp, #8]
 800d71a:	9b06      	ldr	r3, [sp, #24]
 800d71c:	491b      	ldr	r1, [pc, #108]	@ (800d78c <vTaskStartScheduler+0x8c>)
 800d71e:	481c      	ldr	r0, [pc, #112]	@ (800d790 <vTaskStartScheduler+0x90>)
 800d720:	e9cd 4300 	strd	r4, r3, [sp]
 800d724:	4623      	mov	r3, r4
 800d726:	f7ff fe2d 	bl	800d384 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800d72a:	b360      	cbz	r0, 800d786 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800d72c:	f000 fa88 	bl	800dc40 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d730:	2801      	cmp	r0, #1
 800d732:	d11d      	bne.n	800d770 <vTaskStartScheduler+0x70>
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d744:	4a13      	ldr	r2, [pc, #76]	@ (800d794 <vTaskStartScheduler+0x94>)
 800d746:	4914      	ldr	r1, [pc, #80]	@ (800d798 <vTaskStartScheduler+0x98>)
 800d748:	6813      	ldr	r3, [r2, #0]
 800d74a:	3358      	adds	r3, #88	@ 0x58
 800d74c:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d74e:	f04f 31ff 	mov.w	r1, #4294967295
 800d752:	4b12      	ldr	r3, [pc, #72]	@ (800d79c <vTaskStartScheduler+0x9c>)
 800d754:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800d756:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800d758:	4b11      	ldr	r3, [pc, #68]	@ (800d7a0 <vTaskStartScheduler+0xa0>)
 800d75a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d75c:	4b11      	ldr	r3, [pc, #68]	@ (800d7a4 <vTaskStartScheduler+0xa4>)
 800d75e:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800d760:	6810      	ldr	r0, [r2, #0]
 800d762:	f7ff ffc1 	bl	800d6e8 <xTaskCallApplicationTaskHook>
}
 800d766:	b008      	add	sp, #32
 800d768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800d76c:	f7fe beaa 	b.w	800c4c4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d770:	3001      	adds	r0, #1
 800d772:	d108      	bne.n	800d786 <vTaskStartScheduler+0x86>
 800d774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	e7fe      	b.n	800d784 <vTaskStartScheduler+0x84>
}
 800d786:	b008      	add	sp, #32
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	bf00      	nop
 800d78c:	080252f4 	.word	0x080252f4
 800d790:	0800d265 	.word	0x0800d265
 800d794:	2402d970 	.word	0x2402d970
 800d798:	240000ec 	.word	0x240000ec
 800d79c:	2402d47c 	.word	0x2402d47c
 800d7a0:	2402d490 	.word	0x2402d490
 800d7a4:	2402d498 	.word	0x2402d498

0800d7a8 <vTaskSwitchContext>:
{
 800d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d820 <vTaskSwitchContext+0x78>)
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d824 <vTaskSwitchContext+0x7c>)
 800d7b0:	b112      	cbz	r2, 800d7b8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	601a      	str	r2, [r3, #0]
}
 800d7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800d7b8:	4c1b      	ldr	r4, [pc, #108]	@ (800d828 <vTaskSwitchContext+0x80>)
 800d7ba:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7bc:	4e1b      	ldr	r6, [pc, #108]	@ (800d82c <vTaskSwitchContext+0x84>)
 800d7be:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800d7c0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800d7c2:	6820      	ldr	r0, [r4, #0]
 800d7c4:	f7ff ff90 	bl	800d6e8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c8:	6832      	ldr	r2, [r6, #0]
 800d7ca:	4919      	ldr	r1, [pc, #100]	@ (800d830 <vTaskSwitchContext+0x88>)
 800d7cc:	fb07 f302 	mul.w	r3, r7, r2
 800d7d0:	58cd      	ldr	r5, [r1, r3]
 800d7d2:	18c8      	adds	r0, r1, r3
 800d7d4:	b1c5      	cbz	r5, 800d808 <vTaskSwitchContext+0x60>
 800d7d6:	6845      	ldr	r5, [r0, #4]
 800d7d8:	3308      	adds	r3, #8
 800d7da:	686d      	ldr	r5, [r5, #4]
 800d7dc:	440b      	add	r3, r1
 800d7de:	429d      	cmp	r5, r3
 800d7e0:	6045      	str	r5, [r0, #4]
 800d7e2:	bf04      	itt	eq
 800d7e4:	686b      	ldreq	r3, [r5, #4]
 800d7e6:	6043      	streq	r3, [r0, #4]
 800d7e8:	2314      	movs	r3, #20
 800d7ea:	fb03 1102 	mla	r1, r3, r2, r1
 800d7ee:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800d7f0:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800d7f8:	6820      	ldr	r0, [r4, #0]
 800d7fa:	f7ff ff75 	bl	800d6e8 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	4a0c      	ldr	r2, [pc, #48]	@ (800d834 <vTaskSwitchContext+0x8c>)
 800d802:	3358      	adds	r3, #88	@ 0x58
 800d804:	6013      	str	r3, [r2, #0]
}
 800d806:	e7d6      	b.n	800d7b6 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d808:	b942      	cbnz	r2, 800d81c <vTaskSwitchContext+0x74>
 800d80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	e7fe      	b.n	800d81a <vTaskSwitchContext+0x72>
 800d81c:	3a01      	subs	r2, #1
 800d81e:	e7d5      	b.n	800d7cc <vTaskSwitchContext+0x24>
 800d820:	2402d478 	.word	0x2402d478
 800d824:	2402d488 	.word	0x2402d488
 800d828:	2402d970 	.word	0x2402d970
 800d82c:	2402d494 	.word	0x2402d494
 800d830:	2402d510 	.word	0x2402d510
 800d834:	240000ec 	.word	0x240000ec

0800d838 <vTaskPlaceOnEventList>:
{
 800d838:	b510      	push	{r4, lr}
 800d83a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800d83c:	b940      	cbnz	r0, 800d850 <vTaskPlaceOnEventList+0x18>
 800d83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	e7fe      	b.n	800d84e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d850:	4b05      	ldr	r3, [pc, #20]	@ (800d868 <vTaskPlaceOnEventList+0x30>)
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	3118      	adds	r1, #24
 800d856:	f7fe fd1c 	bl	800c292 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d85a:	4620      	mov	r0, r4
 800d85c:	2101      	movs	r1, #1
}
 800d85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d862:	f7ff bc97 	b.w	800d194 <prvAddCurrentTaskToDelayedList>
 800d866:	bf00      	nop
 800d868:	2402d970 	.word	0x2402d970

0800d86c <vTaskPlaceOnEventListRestricted>:
	{
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	460d      	mov	r5, r1
 800d870:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800d872:	b940      	cbnz	r0, 800d886 <vTaskPlaceOnEventListRestricted+0x1a>
 800d874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	e7fe      	b.n	800d884 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d886:	4b07      	ldr	r3, [pc, #28]	@ (800d8a4 <vTaskPlaceOnEventListRestricted+0x38>)
 800d888:	6819      	ldr	r1, [r3, #0]
 800d88a:	3118      	adds	r1, #24
 800d88c:	f7fe fcf6 	bl	800c27c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800d890:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d892:	4621      	mov	r1, r4
 800d894:	bf0c      	ite	eq
 800d896:	4628      	moveq	r0, r5
 800d898:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800d89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8a0:	f7ff bc78 	b.w	800d194 <prvAddCurrentTaskToDelayedList>
 800d8a4:	2402d970 	.word	0x2402d970

0800d8a8 <xTaskRemoveFromEventList>:
{
 800d8a8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8aa:	68c3      	ldr	r3, [r0, #12]
 800d8ac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d8ae:	b944      	cbnz	r4, 800d8c2 <xTaskRemoveFromEventList+0x1a>
 800d8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d8c2:	f104 0518 	add.w	r5, r4, #24
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f7fe fcfa 	bl	800c2c0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8cc:	4b11      	ldr	r3, [pc, #68]	@ (800d914 <xTaskRemoveFromEventList+0x6c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	b9d3      	cbnz	r3, 800d908 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d8d2:	1d25      	adds	r5, r4, #4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7fe fcf3 	bl	800c2c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d8da:	4a0f      	ldr	r2, [pc, #60]	@ (800d918 <xTaskRemoveFromEventList+0x70>)
 800d8dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d8de:	6811      	ldr	r1, [r2, #0]
 800d8e0:	428b      	cmp	r3, r1
 800d8e2:	d900      	bls.n	800d8e6 <xTaskRemoveFromEventList+0x3e>
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	2014      	movs	r0, #20
 800d8e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d91c <xTaskRemoveFromEventList+0x74>)
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d8f0:	f7fe fcc4 	bl	800c27c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d920 <xTaskRemoveFromEventList+0x78>)
 800d8f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d906      	bls.n	800d90e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800d900:	2001      	movs	r0, #1
 800d902:	4b08      	ldr	r3, [pc, #32]	@ (800d924 <xTaskRemoveFromEventList+0x7c>)
 800d904:	6018      	str	r0, [r3, #0]
}
 800d906:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d908:	4629      	mov	r1, r5
 800d90a:	4807      	ldr	r0, [pc, #28]	@ (800d928 <xTaskRemoveFromEventList+0x80>)
 800d90c:	e7f0      	b.n	800d8f0 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800d90e:	2000      	movs	r0, #0
	return xReturn;
 800d910:	e7f9      	b.n	800d906 <xTaskRemoveFromEventList+0x5e>
 800d912:	bf00      	nop
 800d914:	2402d478 	.word	0x2402d478
 800d918:	2402d494 	.word	0x2402d494
 800d91c:	2402d510 	.word	0x2402d510
 800d920:	2402d970 	.word	0x2402d970
 800d924:	2402d488 	.word	0x2402d488
 800d928:	2402d4cc 	.word	0x2402d4cc

0800d92c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d92c:	4b03      	ldr	r3, [pc, #12]	@ (800d93c <vTaskInternalSetTimeOutState+0x10>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d932:	4b03      	ldr	r3, [pc, #12]	@ (800d940 <vTaskInternalSetTimeOutState+0x14>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6043      	str	r3, [r0, #4]
}
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	2402d484 	.word	0x2402d484
 800d940:	2402d498 	.word	0x2402d498

0800d944 <xTaskCheckForTimeOut>:
{
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800d948:	4605      	mov	r5, r0
 800d94a:	b940      	cbnz	r0, 800d95e <xTaskCheckForTimeOut+0x1a>
 800d94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	e7fe      	b.n	800d95c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800d95e:	b941      	cbnz	r1, 800d972 <xTaskCheckForTimeOut+0x2e>
 800d960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	e7fe      	b.n	800d970 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800d972:	f7fe fd17 	bl	800c3a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d976:	4b0f      	ldr	r3, [pc, #60]	@ (800d9b4 <xTaskCheckForTimeOut+0x70>)
 800d978:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	d010      	beq.n	800d9a2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d980:	480d      	ldr	r0, [pc, #52]	@ (800d9b8 <xTaskCheckForTimeOut+0x74>)
 800d982:	682e      	ldr	r6, [r5, #0]
 800d984:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d986:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d988:	4286      	cmp	r6, r0
 800d98a:	d001      	beq.n	800d990 <xTaskCheckForTimeOut+0x4c>
 800d98c:	428a      	cmp	r2, r1
 800d98e:	d90f      	bls.n	800d9b0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d990:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d992:	4283      	cmp	r3, r0
 800d994:	d90a      	bls.n	800d9ac <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800d996:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d998:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800d99a:	4413      	add	r3, r2
 800d99c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d99e:	f7ff ffc5 	bl	800d92c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800d9a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d9a4:	f7fe fd1e 	bl	800c3e4 <vPortExitCritical>
}
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d9b0:	2401      	movs	r4, #1
 800d9b2:	e7f7      	b.n	800d9a4 <xTaskCheckForTimeOut+0x60>
 800d9b4:	2402d498 	.word	0x2402d498
 800d9b8:	2402d484 	.word	0x2402d484

0800d9bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d9bc:	4b01      	ldr	r3, [pc, #4]	@ (800d9c4 <vTaskMissedYield+0x8>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	601a      	str	r2, [r3, #0]
}
 800d9c2:	4770      	bx	lr
 800d9c4:	2402d488 	.word	0x2402d488

0800d9c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d9c8:	4b05      	ldr	r3, [pc, #20]	@ (800d9e0 <xTaskGetSchedulerState+0x18>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	b133      	cbz	r3, 800d9dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9ce:	4b05      	ldr	r3, [pc, #20]	@ (800d9e4 <xTaskGetSchedulerState+0x1c>)
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	fab0 f080 	clz	r0, r0
 800d9d6:	0940      	lsrs	r0, r0, #5
 800d9d8:	0040      	lsls	r0, r0, #1
 800d9da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9dc:	2001      	movs	r0, #1
	}
 800d9de:	4770      	bx	lr
 800d9e0:	2402d490 	.word	0x2402d490
 800d9e4:	2402d478 	.word	0x2402d478

0800d9e8 <xTaskPriorityInherit>:
	{
 800d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	b338      	cbz	r0, 800da3e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d9ee:	4d1a      	ldr	r5, [pc, #104]	@ (800da58 <xTaskPriorityInherit+0x70>)
 800d9f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d9f2:	682a      	ldr	r2, [r5, #0]
 800d9f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d226      	bcs.n	800da48 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9fa:	6982      	ldr	r2, [r0, #24]
 800d9fc:	2a00      	cmp	r2, #0
 800d9fe:	db04      	blt.n	800da0a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da00:	682a      	ldr	r2, [r5, #0]
 800da02:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800da04:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800da08:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800da0a:	2214      	movs	r2, #20
 800da0c:	4e13      	ldr	r6, [pc, #76]	@ (800da5c <xTaskPriorityInherit+0x74>)
 800da0e:	fb02 6303 	mla	r3, r2, r3, r6
 800da12:	6962      	ldr	r2, [r4, #20]
 800da14:	429a      	cmp	r2, r3
 800da16:	d113      	bne.n	800da40 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da18:	1d27      	adds	r7, r4, #4
 800da1a:	4638      	mov	r0, r7
 800da1c:	f7fe fc50 	bl	800c2c0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da20:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da22:	4a0f      	ldr	r2, [pc, #60]	@ (800da60 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da26:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da28:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da2a:	428b      	cmp	r3, r1
 800da2c:	d900      	bls.n	800da30 <xTaskPriorityInherit+0x48>
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	2014      	movs	r0, #20
 800da32:	4639      	mov	r1, r7
 800da34:	fb00 6003 	mla	r0, r0, r3, r6
 800da38:	f7fe fc20 	bl	800c27c <vListInsertEnd>
				xReturn = pdTRUE;
 800da3c:	2001      	movs	r0, #1
	}
 800da3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da46:	e7f9      	b.n	800da3c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800da4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da4e:	4298      	cmp	r0, r3
 800da50:	bf2c      	ite	cs
 800da52:	2000      	movcs	r0, #0
 800da54:	2001      	movcc	r0, #1
 800da56:	e7f2      	b.n	800da3e <xTaskPriorityInherit+0x56>
 800da58:	2402d970 	.word	0x2402d970
 800da5c:	2402d510 	.word	0x2402d510
 800da60:	2402d494 	.word	0x2402d494

0800da64 <xTaskPriorityDisinherit>:
	{
 800da64:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800da66:	b908      	cbnz	r0, 800da6c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800da68:	2000      	movs	r0, #0
	}
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800da6c:	4b1b      	ldr	r3, [pc, #108]	@ (800dadc <xTaskPriorityDisinherit+0x78>)
 800da6e:	681c      	ldr	r4, [r3, #0]
 800da70:	4284      	cmp	r4, r0
 800da72:	d008      	beq.n	800da86 <xTaskPriorityDisinherit+0x22>
 800da74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	e7fe      	b.n	800da84 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800da86:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800da88:	b943      	cbnz	r3, 800da9c <xTaskPriorityDisinherit+0x38>
 800da8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	e7fe      	b.n	800da9a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da9c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800da9e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800daa0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800daa2:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800daa4:	4291      	cmp	r1, r2
 800daa6:	d0df      	beq.n	800da68 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1dd      	bne.n	800da68 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daac:	1d25      	adds	r5, r4, #4
 800daae:	4628      	mov	r0, r5
 800dab0:	f7fe fc06 	bl	800c2c0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dab4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800daba:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dabc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800dabe:	4a08      	ldr	r2, [pc, #32]	@ (800dae0 <xTaskPriorityDisinherit+0x7c>)
 800dac0:	6811      	ldr	r1, [r2, #0]
 800dac2:	428b      	cmp	r3, r1
 800dac4:	d900      	bls.n	800dac8 <xTaskPriorityDisinherit+0x64>
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	4a06      	ldr	r2, [pc, #24]	@ (800dae4 <xTaskPriorityDisinherit+0x80>)
 800daca:	2014      	movs	r0, #20
 800dacc:	4629      	mov	r1, r5
 800dace:	fb00 2003 	mla	r0, r0, r3, r2
 800dad2:	f7fe fbd3 	bl	800c27c <vListInsertEnd>
					xReturn = pdTRUE;
 800dad6:	2001      	movs	r0, #1
		return xReturn;
 800dad8:	e7c7      	b.n	800da6a <xTaskPriorityDisinherit+0x6>
 800dada:	bf00      	nop
 800dadc:	2402d970 	.word	0x2402d970
 800dae0:	2402d494 	.word	0x2402d494
 800dae4:	2402d510 	.word	0x2402d510

0800dae8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800dae8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800daea:	4604      	mov	r4, r0
 800daec:	2800      	cmp	r0, #0
 800daee:	d042      	beq.n	800db76 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800daf0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800daf2:	b942      	cbnz	r2, 800db06 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800daf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	e7fe      	b.n	800db04 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800db06:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800db08:	4299      	cmp	r1, r3
 800db0a:	bf38      	it	cc
 800db0c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800db0e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800db10:	428b      	cmp	r3, r1
 800db12:	d030      	beq.n	800db76 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800db14:	2a01      	cmp	r2, #1
 800db16:	d12e      	bne.n	800db76 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800db18:	4a17      	ldr	r2, [pc, #92]	@ (800db78 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800db1a:	6812      	ldr	r2, [r2, #0]
 800db1c:	4282      	cmp	r2, r0
 800db1e:	d108      	bne.n	800db32 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800db20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db24:	f383 8811 	msr	BASEPRI, r3
 800db28:	f3bf 8f6f 	isb	sy
 800db2c:	f3bf 8f4f 	dsb	sy
 800db30:	e7fe      	b.n	800db30 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db32:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db34:	4d11      	ldr	r5, [pc, #68]	@ (800db7c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db36:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db38:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800db3c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db3e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db42:	bfa8      	it	ge
 800db44:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db48:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db4a:	bfa8      	it	ge
 800db4c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db4e:	429a      	cmp	r2, r3
 800db50:	d111      	bne.n	800db76 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db52:	1d06      	adds	r6, r0, #4
 800db54:	4630      	mov	r0, r6
 800db56:	f7fe fbb3 	bl	800c2c0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800db5a:	4a09      	ldr	r2, [pc, #36]	@ (800db80 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800db5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800db5e:	6811      	ldr	r1, [r2, #0]
 800db60:	428b      	cmp	r3, r1
 800db62:	d900      	bls.n	800db66 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800db64:	6013      	str	r3, [r2, #0]
 800db66:	2014      	movs	r0, #20
 800db68:	4631      	mov	r1, r6
 800db6a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800db6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800db72:	f7fe bb83 	b.w	800c27c <vListInsertEnd>
	}
 800db76:	bd70      	pop	{r4, r5, r6, pc}
 800db78:	2402d970 	.word	0x2402d970
 800db7c:	2402d510 	.word	0x2402d510
 800db80:	2402d494 	.word	0x2402d494

0800db84 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800db84:	4b04      	ldr	r3, [pc, #16]	@ (800db98 <pvTaskIncrementMutexHeldCount+0x14>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	b11a      	cbz	r2, 800db92 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800db8a:	6819      	ldr	r1, [r3, #0]
 800db8c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800db8e:	3201      	adds	r2, #1
 800db90:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800db92:	6818      	ldr	r0, [r3, #0]
	}
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	2402d970 	.word	0x2402d970

0800db9c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800db9c:	4291      	cmp	r1, r2
{
 800db9e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dba0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dba2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800dba4:	d80a      	bhi.n	800dbbc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba6:	1ad2      	subs	r2, r2, r3
 800dba8:	6983      	ldr	r3, [r0, #24]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d20d      	bcs.n	800dbca <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbae:	1d01      	adds	r1, r0, #4
 800dbb0:	4b07      	ldr	r3, [pc, #28]	@ (800dbd0 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbb2:	6818      	ldr	r0, [r3, #0]
 800dbb4:	f7fe fb6d 	bl	800c292 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800dbb8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800dbba:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d201      	bcs.n	800dbc4 <prvInsertTimerInActiveList+0x28>
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	d202      	bcs.n	800dbca <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbc4:	1d01      	adds	r1, r0, #4
 800dbc6:	4b03      	ldr	r3, [pc, #12]	@ (800dbd4 <prvInsertTimerInActiveList+0x38>)
 800dbc8:	e7f3      	b.n	800dbb2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800dbca:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800dbcc:	e7f5      	b.n	800dbba <prvInsertTimerInActiveList+0x1e>
 800dbce:	bf00      	nop
 800dbd0:	2402da70 	.word	0x2402da70
 800dbd4:	2402da74 	.word	0x2402da74

0800dbd8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dbd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800dbda:	4c11      	ldr	r4, [pc, #68]	@ (800dc20 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800dbdc:	f7fe fbe2 	bl	800c3a4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800dbe0:	6825      	ldr	r5, [r4, #0]
 800dbe2:	b9bd      	cbnz	r5, 800dc14 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800dbe4:	4f0f      	ldr	r7, [pc, #60]	@ (800dc24 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800dbe6:	4e10      	ldr	r6, [pc, #64]	@ (800dc28 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800dbe8:	4638      	mov	r0, r7
 800dbea:	f7fe fb39 	bl	800c260 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dbee:	4630      	mov	r0, r6
 800dbf0:	f7fe fb36 	bl	800c260 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbf4:	4b0d      	ldr	r3, [pc, #52]	@ (800dc2c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbf6:	4a0e      	ldr	r2, [pc, #56]	@ (800dc30 <prvCheckForValidListAndQueue+0x58>)
 800dbf8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800dbfa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbfc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800dbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800dc34 <prvCheckForValidListAndQueue+0x5c>)
 800dc00:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc02:	4b0d      	ldr	r3, [pc, #52]	@ (800dc38 <prvCheckForValidListAndQueue+0x60>)
 800dc04:	9500      	str	r5, [sp, #0]
 800dc06:	f7fe fdd7 	bl	800c7b8 <xQueueGenericCreateStatic>
 800dc0a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc0c:	b110      	cbz	r0, 800dc14 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc0e:	490b      	ldr	r1, [pc, #44]	@ (800dc3c <prvCheckForValidListAndQueue+0x64>)
 800dc10:	f7ff f9e0 	bl	800cfd4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800dc14:	b003      	add	sp, #12
 800dc16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800dc1a:	f7fe bbe3 	b.w	800c3e4 <vPortExitCritical>
 800dc1e:	bf00      	nop
 800dc20:	2402da6c 	.word	0x2402da6c
 800dc24:	2402da8c 	.word	0x2402da8c
 800dc28:	2402da78 	.word	0x2402da78
 800dc2c:	2402da74 	.word	0x2402da74
 800dc30:	2402d9c4 	.word	0x2402d9c4
 800dc34:	2402da70 	.word	0x2402da70
 800dc38:	2402d974 	.word	0x2402d974
 800dc3c:	080252f9 	.word	0x080252f9

0800dc40 <xTimerCreateTimerTask>:
{
 800dc40:	b510      	push	{r4, lr}
 800dc42:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800dc44:	f7ff ffc8 	bl	800dbd8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800dc48:	4b12      	ldr	r3, [pc, #72]	@ (800dc94 <xTimerCreateTimerTask+0x54>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	b1b3      	cbz	r3, 800dc7c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc4e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc50:	aa07      	add	r2, sp, #28
 800dc52:	a906      	add	r1, sp, #24
 800dc54:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc56:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc5a:	f7fe f9f9 	bl	800c050 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc5e:	9b05      	ldr	r3, [sp, #20]
 800dc60:	9a07      	ldr	r2, [sp, #28]
 800dc62:	9302      	str	r3, [sp, #8]
 800dc64:	9b06      	ldr	r3, [sp, #24]
 800dc66:	490c      	ldr	r1, [pc, #48]	@ (800dc98 <xTimerCreateTimerTask+0x58>)
 800dc68:	9301      	str	r3, [sp, #4]
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	480b      	ldr	r0, [pc, #44]	@ (800dc9c <xTimerCreateTimerTask+0x5c>)
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	4623      	mov	r3, r4
 800dc72:	f7ff fb87 	bl	800d384 <xTaskCreateStatic>
 800dc76:	4b0a      	ldr	r3, [pc, #40]	@ (800dca0 <xTimerCreateTimerTask+0x60>)
 800dc78:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800dc7a:	b940      	cbnz	r0, 800dc8e <xTimerCreateTimerTask+0x4e>
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800dc8c:	e7fe      	b.n	800dc8c <xTimerCreateTimerTask+0x4c>
}
 800dc8e:	2001      	movs	r0, #1
 800dc90:	b008      	add	sp, #32
 800dc92:	bd10      	pop	{r4, pc}
 800dc94:	2402da6c 	.word	0x2402da6c
 800dc98:	080252fe 	.word	0x080252fe
 800dc9c:	0800de7d 	.word	0x0800de7d
 800dca0:	2402da68 	.word	0x2402da68

0800dca4 <xTimerCreate>:
	{
 800dca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca8:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dcaa:	202c      	movs	r0, #44	@ 0x2c
	{
 800dcac:	460d      	mov	r5, r1
 800dcae:	4616      	mov	r6, r2
 800dcb0:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dcb2:	f7fe f9ff 	bl	800c0b4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	b1f0      	cbz	r0, 800dcf8 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dcc0:	b945      	cbnz	r5, 800dcd4 <xTimerCreate+0x30>
 800dcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	e7fe      	b.n	800dcd2 <xTimerCreate+0x2e>
		prvCheckForValidListAndQueue();
 800dcd4:	f7ff ff80 	bl	800dbd8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dcd8:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dcda:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 800dcdc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dce0:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 800dce2:	e9c4 5706 	strd	r5, r7, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dce6:	f7fe fac6 	bl	800c276 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dcea:	b12e      	cbz	r6, 800dcf8 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dcec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dcf0:	f043 0304 	orr.w	r3, r3, #4
 800dcf4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dcfe <xTimerCreateStatic>:
	{
 800dcfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dd02:	461f      	mov	r7, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 800dd04:	232c      	movs	r3, #44	@ 0x2c
	{
 800dd06:	4680      	mov	r8, r0
 800dd08:	460d      	mov	r5, r1
			volatile size_t xSize = sizeof( StaticTimer_t );
 800dd0a:	9301      	str	r3, [sp, #4]
	{
 800dd0c:	4616      	mov	r6, r2
			configASSERT( xSize == sizeof( Timer_t ) );
 800dd0e:	9b01      	ldr	r3, [sp, #4]
	{
 800dd10:	9c09      	ldr	r4, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 800dd12:	2b2c      	cmp	r3, #44	@ 0x2c
 800dd14:	d008      	beq.n	800dd28 <xTimerCreateStatic+0x2a>
 800dd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	e7fe      	b.n	800dd26 <xTimerCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dd28:	9b01      	ldr	r3, [sp, #4]
		configASSERT( pxTimerBuffer );
 800dd2a:	b944      	cbnz	r4, 800dd3e <xTimerCreateStatic+0x40>
 800dd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	e7fe      	b.n	800dd3c <xTimerCreateStatic+0x3e>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800dd3e:	2302      	movs	r3, #2
 800dd40:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dd44:	b941      	cbnz	r1, 800dd58 <xTimerCreateStatic+0x5a>
 800dd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	e7fe      	b.n	800dd56 <xTimerCreateStatic+0x58>
		prvCheckForValidListAndQueue();
 800dd58:	f7ff ff3e 	bl	800dbd8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dd5c:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dd5e:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 800dd60:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dd64:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 800dd66:	e9c4 5706 	strd	r5, r7, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dd6a:	f7fe fa84 	bl	800c276 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dd6e:	b12e      	cbz	r6, 800dd7c <xTimerCreateStatic+0x7e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dd70:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd74:	f043 0304 	orr.w	r3, r3, #4
 800dd78:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	b002      	add	sp, #8
 800dd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd84 <xTimerGenericCommand>:
{
 800dd84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd86:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800dd88:	4604      	mov	r4, r0
{
 800dd8a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800dd8c:	b940      	cbnz	r0, 800dda0 <xTimerGenericCommand+0x1c>
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	e7fe      	b.n	800dd9e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800dda0:	4d0c      	ldr	r5, [pc, #48]	@ (800ddd4 <xTimerGenericCommand+0x50>)
 800dda2:	6828      	ldr	r0, [r5, #0]
 800dda4:	b178      	cbz	r0, 800ddc6 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dda6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dda8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddaa:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ddae:	dc0c      	bgt.n	800ddca <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddb0:	f7ff fe0a 	bl	800d9c8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddb4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddb6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddb8:	4669      	mov	r1, sp
 800ddba:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddbc:	bf0c      	ite	eq
 800ddbe:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddc0:	461a      	movne	r2, r3
 800ddc2:	f7fe fdae 	bl	800c922 <xQueueGenericSend>
}
 800ddc6:	b004      	add	sp, #16
 800ddc8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddca:	2300      	movs	r3, #0
 800ddcc:	4669      	mov	r1, sp
 800ddce:	f7fe fe8c 	bl	800caea <xQueueGenericSendFromISR>
 800ddd2:	e7f8      	b.n	800ddc6 <xTimerGenericCommand+0x42>
 800ddd4:	2402da6c 	.word	0x2402da6c

0800ddd8 <prvSampleTimeNow>:
{
 800ddd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800dddc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800de78 <prvSampleTimeNow+0xa0>
{
 800dde0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800dde2:	f7ff fb3d 	bl	800d460 <xTaskGetTickCount>
 800dde6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800dde8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddec:	4283      	cmp	r3, r0
 800ddee:	d909      	bls.n	800de04 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddf0:	4f1f      	ldr	r7, [pc, #124]	@ (800de70 <prvSampleTimeNow+0x98>)
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	b96a      	cbnz	r2, 800de14 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800ddf8:	4a1e      	ldr	r2, [pc, #120]	@ (800de74 <prvSampleTimeNow+0x9c>)
 800ddfa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ddfc:	6013      	str	r3, [r2, #0]
 800ddfe:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800de00:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800de02:	e000      	b.n	800de06 <prvSampleTimeNow+0x2e>
 800de04:	2300      	movs	r3, #0
}
 800de06:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800de08:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800de0a:	f8c8 5000 	str.w	r5, [r8]
}
 800de0e:	b002      	add	sp, #8
 800de10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de14:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de16:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de18:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de1c:	f104 0a04 	add.w	sl, r4, #4
 800de20:	4650      	mov	r0, sl
 800de22:	f7fe fa4d 	bl	800c2c0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de26:	6a23      	ldr	r3, [r4, #32]
 800de28:	4620      	mov	r0, r4
 800de2a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de2c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800de30:	075b      	lsls	r3, r3, #29
 800de32:	d5de      	bpl.n	800ddf2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de34:	69a3      	ldr	r3, [r4, #24]
 800de36:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800de38:	4599      	cmp	r9, r3
 800de3a:	d206      	bcs.n	800de4a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de3c:	4651      	mov	r1, sl
 800de3e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de40:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de42:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de44:	f7fe fa25 	bl	800c292 <vListInsert>
 800de48:	e7d3      	b.n	800ddf2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de4a:	2300      	movs	r3, #0
 800de4c:	464a      	mov	r2, r9
 800de4e:	4620      	mov	r0, r4
 800de50:	4619      	mov	r1, r3
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	f7ff ff96 	bl	800dd84 <xTimerGenericCommand>
				configASSERT( xResult );
 800de58:	2800      	cmp	r0, #0
 800de5a:	d1ca      	bne.n	800ddf2 <prvSampleTimeNow+0x1a>
 800de5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	e7fe      	b.n	800de6c <prvSampleTimeNow+0x94>
 800de6e:	bf00      	nop
 800de70:	2402da74 	.word	0x2402da74
 800de74:	2402da70 	.word	0x2402da70
 800de78:	2402da64 	.word	0x2402da64

0800de7c <prvTimerTask>:
{
 800de7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de80:	4d6e      	ldr	r5, [pc, #440]	@ (800e03c <prvTimerTask+0x1c0>)
{
 800de82:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de84:	4e6e      	ldr	r6, [pc, #440]	@ (800e040 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	f8d3 8000 	ldr.w	r8, [r3]
 800de8c:	f1b8 0f00 	cmp.w	r8, #0
 800de90:	d035      	beq.n	800defe <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de92:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de94:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de96:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800de9a:	f7ff fad9 	bl	800d450 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de9e:	a804      	add	r0, sp, #16
 800dea0:	f7ff ff9a 	bl	800ddd8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800dea4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dea6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d169      	bne.n	800df80 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800deac:	2c00      	cmp	r4, #0
 800deae:	d14c      	bne.n	800df4a <prvTimerTask+0xce>
 800deb0:	4540      	cmp	r0, r8
 800deb2:	d350      	bcc.n	800df56 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800deb4:	f7ff fb70 	bl	800d598 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800debe:	1d38      	adds	r0, r7, #4
 800dec0:	f7fe f9fe 	bl	800c2c0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dec4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dec8:	0758      	lsls	r0, r3, #29
 800deca:	d51a      	bpl.n	800df02 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800decc:	69b9      	ldr	r1, [r7, #24]
 800dece:	4643      	mov	r3, r8
 800ded0:	464a      	mov	r2, r9
 800ded2:	4638      	mov	r0, r7
 800ded4:	4441      	add	r1, r8
 800ded6:	f7ff fe61 	bl	800db9c <prvInsertTimerInActiveList>
 800deda:	b1b0      	cbz	r0, 800df0a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dedc:	4623      	mov	r3, r4
 800dede:	4642      	mov	r2, r8
 800dee0:	4621      	mov	r1, r4
 800dee2:	4638      	mov	r0, r7
 800dee4:	9400      	str	r4, [sp, #0]
 800dee6:	f7ff ff4d 	bl	800dd84 <xTimerGenericCommand>
			configASSERT( xResult );
 800deea:	b970      	cbnz	r0, 800df0a <prvTimerTask+0x8e>
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	e7fe      	b.n	800defc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800defe:	2401      	movs	r4, #1
 800df00:	e7cb      	b.n	800de9a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df02:	f023 0301 	bic.w	r3, r3, #1
 800df06:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	4638      	mov	r0, r7
 800df0e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df10:	2200      	movs	r2, #0
 800df12:	a904      	add	r1, sp, #16
 800df14:	6830      	ldr	r0, [r6, #0]
 800df16:	f7fe fe96 	bl	800cc46 <xQueueReceive>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d0b3      	beq.n	800de86 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df1e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df20:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df22:	2b00      	cmp	r3, #0
 800df24:	db2f      	blt.n	800df86 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df26:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df28:	6963      	ldr	r3, [r4, #20]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d132      	bne.n	800df94 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df2e:	a803      	add	r0, sp, #12
 800df30:	f7ff ff52 	bl	800ddd8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800df34:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df36:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800df38:	2b09      	cmp	r3, #9
 800df3a:	d8e9      	bhi.n	800df10 <prvTimerTask+0x94>
 800df3c:	e8df f003 	tbb	[pc, r3]
 800df40:	572e2e2e 	.word	0x572e2e2e
 800df44:	2e2e765e 	.word	0x2e2e765e
 800df48:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df4a:	4b3e      	ldr	r3, [pc, #248]	@ (800e044 <prvTimerTask+0x1c8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681c      	ldr	r4, [r3, #0]
 800df50:	fab4 f484 	clz	r4, r4
 800df54:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df56:	4622      	mov	r2, r4
 800df58:	eba8 0109 	sub.w	r1, r8, r9
 800df5c:	6830      	ldr	r0, [r6, #0]
 800df5e:	f7ff f878 	bl	800d052 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df62:	f7ff fb19 	bl	800d598 <xTaskResumeAll>
 800df66:	2800      	cmp	r0, #0
 800df68:	d1d2      	bne.n	800df10 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800df6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	e7c7      	b.n	800df10 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800df80:	f7ff fb0a 	bl	800d598 <xTaskResumeAll>
}
 800df84:	e7c4      	b.n	800df10 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df86:	9b05      	ldr	r3, [sp, #20]
 800df88:	9907      	ldr	r1, [sp, #28]
 800df8a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df8c:	9b04      	ldr	r3, [sp, #16]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	dbbe      	blt.n	800df10 <prvTimerTask+0x94>
 800df92:	e7c8      	b.n	800df26 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df94:	1d20      	adds	r0, r4, #4
 800df96:	f7fe f993 	bl	800c2c0 <uxListRemove>
 800df9a:	e7c8      	b.n	800df2e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df9c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfa4:	f043 0301 	orr.w	r3, r3, #1
 800dfa8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfac:	9b05      	ldr	r3, [sp, #20]
 800dfae:	4419      	add	r1, r3
 800dfb0:	f7ff fdf4 	bl	800db9c <prvInsertTimerInActiveList>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d0ab      	beq.n	800df10 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfb8:	6a23      	ldr	r3, [r4, #32]
 800dfba:	4620      	mov	r0, r4
 800dfbc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfbe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dfc2:	0759      	lsls	r1, r3, #29
 800dfc4:	d5a4      	bpl.n	800df10 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfc6:	69a2      	ldr	r2, [r4, #24]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	9905      	ldr	r1, [sp, #20]
 800dfcc:	4620      	mov	r0, r4
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	440a      	add	r2, r1
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	f7ff fed6 	bl	800dd84 <xTimerGenericCommand>
							configASSERT( xResult );
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d199      	bne.n	800df10 <prvTimerTask+0x94>
 800dfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	e7fe      	b.n	800dfec <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dff2:	f023 0301 	bic.w	r3, r3, #1
 800dff6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800dffa:	e789      	b.n	800df10 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dffc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e000:	f043 0301 	orr.w	r3, r3, #1
 800e004:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e008:	9905      	ldr	r1, [sp, #20]
 800e00a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e00c:	b941      	cbnz	r1, 800e020 <prvTimerTask+0x1a4>
 800e00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	e7fe      	b.n	800e01e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e020:	4603      	mov	r3, r0
 800e022:	4401      	add	r1, r0
 800e024:	4620      	mov	r0, r4
 800e026:	f7ff fdb9 	bl	800db9c <prvInsertTimerInActiveList>
					break;
 800e02a:	e771      	b.n	800df10 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e02c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e030:	079a      	lsls	r2, r3, #30
 800e032:	d4de      	bmi.n	800dff2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800e034:	4620      	mov	r0, r4
 800e036:	f7fe f8d5 	bl	800c1e4 <vPortFree>
 800e03a:	e769      	b.n	800df10 <prvTimerTask+0x94>
 800e03c:	2402da74 	.word	0x2402da74
 800e040:	2402da6c 	.word	0x2402da6c
 800e044:	2402da70 	.word	0x2402da70

0800e048 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e048:	b510      	push	{r4, lr}
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800e04a:	4604      	mov	r4, r0
 800e04c:	b940      	cbnz	r0, 800e060 <pvTimerGetTimerID+0x18>
 800e04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	e7fe      	b.n	800e05e <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
 800e060:	f7fe f9a0 	bl	800c3a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e064:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 800e066:	f7fe f9bd 	bl	800c3e4 <vPortExitCritical>

	return pvReturn;
}
 800e06a:	4620      	mov	r0, r4
 800e06c:	bd10      	pop	{r4, pc}

0800e06e <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800e06e:	8880      	ldrh	r0, [r0, #4]
 800e070:	4770      	bx	lr

0800e072 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800e072:	b570      	push	{r4, r5, r6, lr}
 800e074:	6803      	ldr	r3, [r0, #0]
 800e076:	460c      	mov	r4, r1
 800e078:	2100      	movs	r1, #0
 800e07a:	4605      	mov	r5, r0
 800e07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e07e:	4798      	blx	r3
 800e080:	4606      	mov	r6, r0
 800e082:	682b      	ldr	r3, [r5, #0]
 800e084:	4628      	mov	r0, r5
 800e086:	1ba4      	subs	r4, r4, r6
 800e088:	6a1b      	ldr	r3, [r3, #32]
 800e08a:	b2a4      	uxth	r4, r4
 800e08c:	4798      	blx	r3
 800e08e:	fbb4 f0f0 	udiv	r0, r4, r0
 800e092:	bd70      	pop	{r4, r5, r6, pc}

0800e094 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800e094:	2300      	movs	r3, #0
 800e096:	8083      	strh	r3, [r0, #4]
 800e098:	4770      	bx	lr

0800e09a <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e09a:	b510      	push	{r4, lr}
 800e09c:	6803      	ldr	r3, [r0, #0]
 800e09e:	4604      	mov	r4, r0
 800e0a0:	8881      	ldrh	r1, [r0, #4]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a4:	4798      	blx	r3
 800e0a6:	88a3      	ldrh	r3, [r4, #4]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	80a3      	strh	r3, [r4, #4]
 800e0ac:	bd10      	pop	{r4, pc}

0800e0ae <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e0ae:	6803      	ldr	r3, [r0, #0]
 800e0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0b2:	4718      	bx	r3

0800e0b4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e0b8:	4a02      	ldr	r2, [pc, #8]	@ (800e0c4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e0ba:	6002      	str	r2, [r0, #0]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	8082      	strh	r2, [r0, #4]
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	08025310 	.word	0x08025310

0800e0c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e0c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	b12b      	cbz	r3, 800e0da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e0ce:	b920      	cbnz	r0, 800e0da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e0d0:	1a5a      	subs	r2, r3, r1
 800e0d2:	699b      	ldr	r3, [r3, #24]
 800e0d4:	4250      	negs	r0, r2
 800e0d6:	4150      	adcs	r0, r2
 800e0d8:	e7f8      	b.n	800e0cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e0da:	4770      	bx	lr

0800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800e0dc:	2300      	movs	r3, #0
 800e0de:	6148      	str	r0, [r1, #20]
 800e0e0:	618b      	str	r3, [r1, #24]
 800e0e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e0e4:	b913      	cbnz	r3, 800e0ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800e0e6:	6281      	str	r1, [r0, #40]	@ 0x28
 800e0e8:	4770      	bx	lr
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	699a      	ldr	r2, [r3, #24]
 800e0ee:	2a00      	cmp	r2, #0
 800e0f0:	d1fb      	bne.n	800e0ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800e0f2:	6199      	str	r1, [r3, #24]
 800e0f4:	4770      	bx	lr

0800e0f6 <_ZN8touchgfx9Container9removeAllEv>:
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e0fa:	b123      	cbz	r3, 800e106 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e0fc:	6999      	ldr	r1, [r3, #24]
 800e0fe:	6281      	str	r1, [r0, #40]	@ 0x28
 800e100:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e104:	e7f8      	b.n	800e0f8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e106:	4770      	bx	lr

0800e108 <_ZN8touchgfx9Container6unlinkEv>:
 800e108:	2300      	movs	r3, #0
 800e10a:	6283      	str	r3, [r0, #40]	@ 0x28
 800e10c:	4770      	bx	lr

0800e10e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e10e:	2200      	movs	r2, #0
 800e110:	8002      	strh	r2, [r0, #0]
 800e112:	8042      	strh	r2, [r0, #2]
 800e114:	8082      	strh	r2, [r0, #4]
 800e116:	80c2      	strh	r2, [r0, #6]
 800e118:	4770      	bx	lr

0800e11a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e11a:	b570      	push	{r4, r5, r6, lr}
 800e11c:	460d      	mov	r5, r1
 800e11e:	4616      	mov	r6, r2
 800e120:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e122:	b13c      	cbz	r4, 800e134 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	4620      	mov	r0, r4
 800e128:	4632      	mov	r2, r6
 800e12a:	4629      	mov	r1, r5
 800e12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e12e:	4798      	blx	r3
 800e130:	69a4      	ldr	r4, [r4, #24]
 800e132:	e7f6      	b.n	800e122 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e134:	bd70      	pop	{r4, r5, r6, pc}

0800e136 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e136:	b538      	push	{r3, r4, r5, lr}
 800e138:	460d      	mov	r5, r1
 800e13a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e13c:	b134      	cbz	r4, 800e14c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	4621      	mov	r1, r4
 800e142:	4628      	mov	r0, r5
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	4798      	blx	r3
 800e148:	69a4      	ldr	r4, [r4, #24]
 800e14a:	e7f7      	b.n	800e13c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e14c:	bd38      	pop	{r3, r4, r5, pc}

0800e14e <_ZN8touchgfx9ContainerD1Ev>:
 800e14e:	4770      	bx	lr

0800e150 <_ZN8touchgfx9ContainerD0Ev>:
 800e150:	b510      	push	{r4, lr}
 800e152:	4604      	mov	r4, r0
 800e154:	212c      	movs	r1, #44	@ 0x2c
 800e156:	f014 f929 	bl	80223ac <_ZdlPvj>
 800e15a:	4620      	mov	r0, r4
 800e15c:	bd10      	pop	{r4, pc}

0800e15e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e15e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e160:	b19b      	cbz	r3, 800e18a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e162:	428b      	cmp	r3, r1
 800e164:	d109      	bne.n	800e17a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e166:	699a      	ldr	r2, [r3, #24]
 800e168:	2100      	movs	r1, #0
 800e16a:	6159      	str	r1, [r3, #20]
 800e16c:	6282      	str	r2, [r0, #40]	@ 0x28
 800e16e:	b902      	cbnz	r2, 800e172 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e170:	4770      	bx	lr
 800e172:	6199      	str	r1, [r3, #24]
 800e174:	4770      	bx	lr
 800e176:	4613      	mov	r3, r2
 800e178:	b13a      	cbz	r2, 800e18a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e17a:	699a      	ldr	r2, [r3, #24]
 800e17c:	428a      	cmp	r2, r1
 800e17e:	d1fa      	bne.n	800e176 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e180:	698a      	ldr	r2, [r1, #24]
 800e182:	619a      	str	r2, [r3, #24]
 800e184:	2300      	movs	r3, #0
 800e186:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e18a:	4770      	bx	lr

0800e18c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e18c:	b410      	push	{r4}
 800e18e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e190:	4604      	mov	r4, r0
 800e192:	b92b      	cbnz	r3, 800e1a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e194:	6803      	ldr	r3, [r0, #0]
 800e196:	4611      	mov	r1, r2
 800e198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e19c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e19e:	4718      	bx	r3
 800e1a0:	b941      	cbnz	r1, 800e1b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e1a2:	6193      	str	r3, [r2, #24]
 800e1a4:	6282      	str	r2, [r0, #40]	@ 0x28
 800e1a6:	6154      	str	r4, [r2, #20]
 800e1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d0f9      	beq.n	800e1a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e1b4:	4299      	cmp	r1, r3
 800e1b6:	6998      	ldr	r0, [r3, #24]
 800e1b8:	d1f9      	bne.n	800e1ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e1ba:	6190      	str	r0, [r2, #24]
 800e1bc:	618a      	str	r2, [r1, #24]
 800e1be:	e7f2      	b.n	800e1a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800e1c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c4:	461f      	mov	r7, r3
 800e1c6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e1ca:	460d      	mov	r5, r1
 800e1cc:	4616      	mov	r6, r2
 800e1ce:	b103      	cbz	r3, 800e1d2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800e1d0:	6038      	str	r0, [r7, #0]
 800e1d2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e1d4:	b314      	cbz	r4, 800e21c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800e1d6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e1da:	b1eb      	cbz	r3, 800e218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e1dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e1e0:	428d      	cmp	r5, r1
 800e1e2:	db19      	blt.n	800e218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e1e4:	b289      	uxth	r1, r1
 800e1e6:	8923      	ldrh	r3, [r4, #8]
 800e1e8:	440b      	add	r3, r1
 800e1ea:	b21b      	sxth	r3, r3
 800e1ec:	429d      	cmp	r5, r3
 800e1ee:	da13      	bge.n	800e218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e1f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e1f4:	4296      	cmp	r6, r2
 800e1f6:	db0f      	blt.n	800e218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e1f8:	b292      	uxth	r2, r2
 800e1fa:	8963      	ldrh	r3, [r4, #10]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	b21b      	sxth	r3, r3
 800e200:	429e      	cmp	r6, r3
 800e202:	da09      	bge.n	800e218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	1ab2      	subs	r2, r6, r2
 800e208:	1a69      	subs	r1, r5, r1
 800e20a:	4620      	mov	r0, r4
 800e20c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800e210:	b212      	sxth	r2, r2
 800e212:	463b      	mov	r3, r7
 800e214:	b209      	sxth	r1, r1
 800e216:	47c0      	blx	r8
 800e218:	69a4      	ldr	r4, [r4, #24]
 800e21a:	e7db      	b.n	800e1d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	4c6d      	ldr	r4, [pc, #436]	@ (800e3dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800e226:	b0a1      	sub	sp, #132	@ 0x84
 800e228:	4606      	mov	r6, r0
 800e22a:	6824      	ldr	r4, [r4, #0]
 800e22c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800e22e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800e232:	2400      	movs	r4, #0
 800e234:	9303      	str	r3, [sp, #12]
 800e236:	802c      	strh	r4, [r5, #0]
 800e238:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800e23a:	802c      	strh	r4, [r5, #0]
 800e23c:	601c      	str	r4, [r3, #0]
 800e23e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e242:	f7ff ffbd 	bl	800e1c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e246:	f1b9 0f03 	cmp.w	r9, #3
 800e24a:	f340 80c1 	ble.w	800e3d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800e24e:	4631      	mov	r1, r6
 800e250:	a80c      	add	r0, sp, #48	@ 0x30
 800e252:	f007 fb09 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e256:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800e25a:	9306      	str	r3, [sp, #24]
 800e25c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800e260:	9307      	str	r3, [sp, #28]
 800e262:	9b03      	ldr	r3, [sp, #12]
 800e264:	f8d3 a000 	ldr.w	sl, [r3]
 800e268:	f1ba 0f00 	cmp.w	sl, #0
 800e26c:	f000 80b3 	beq.w	800e3d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800e270:	4651      	mov	r1, sl
 800e272:	a810      	add	r0, sp, #64	@ 0x40
 800e274:	f007 faf8 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e278:	2002      	movs	r0, #2
 800e27a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	9a06      	ldr	r2, [sp, #24]
 800e282:	fb91 f1f0 	sdiv	r1, r1, r0
 800e286:	189d      	adds	r5, r3, r2
 800e288:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800e28c:	9a07      	ldr	r2, [sp, #28]
 800e28e:	4419      	add	r1, r3
 800e290:	9b02      	ldr	r3, [sp, #8]
 800e292:	4413      	add	r3, r2
 800e294:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800e298:	1a6d      	subs	r5, r5, r1
 800e29a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800e29e:	fb92 f2f0 	sdiv	r2, r2, r0
 800e2a2:	440a      	add	r2, r1
 800e2a4:	1a9b      	subs	r3, r3, r2
 800e2a6:	435b      	muls	r3, r3
 800e2a8:	fb05 3505 	mla	r5, r5, r5, r3
 800e2ac:	4f4c      	ldr	r7, [pc, #304]	@ (800e3e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800e2ae:	ac10      	add	r4, sp, #64	@ 0x40
 800e2b0:	f1b9 0f0c 	cmp.w	r9, #12
 800e2b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e2b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e2ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e2be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800e2c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e2c8:	f04f 0303 	mov.w	r3, #3
 800e2cc:	bfd8      	it	le
 800e2ce:	f109 32ff 	addle.w	r2, r9, #4294967295
 800e2d2:	f04f 0400 	mov.w	r4, #0
 800e2d6:	f8cd 9000 	str.w	r9, [sp]
 800e2da:	bfcc      	ite	gt
 800e2dc:	4698      	movgt	r8, r3
 800e2de:	fb92 f8f3 	sdivle	r8, r2, r3
 800e2e2:	1c63      	adds	r3, r4, #1
 800e2e4:	aa10      	add	r2, sp, #64	@ 0x40
 800e2e6:	f004 0401 	and.w	r4, r4, #1
 800e2ea:	f04f 0b00 	mov.w	fp, #0
 800e2ee:	9308      	str	r3, [sp, #32]
 800e2f0:	9b00      	ldr	r3, [sp, #0]
 800e2f2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800e2f6:	fb93 f3f8 	sdiv	r3, r3, r8
 800e2fa:	3404      	adds	r4, #4
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	9304      	str	r3, [sp, #16]
 800e300:	9a04      	ldr	r2, [sp, #16]
 800e302:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e306:	fb13 f302 	smulbb	r3, r3, r2
 800e30a:	9a01      	ldr	r2, [sp, #4]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	1899      	adds	r1, r3, r2
 800e310:	9305      	str	r3, [sp, #20]
 800e312:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e316:	b209      	sxth	r1, r1
 800e318:	4299      	cmp	r1, r3
 800e31a:	db4d      	blt.n	800e3b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e31c:	8932      	ldrh	r2, [r6, #8]
 800e31e:	4413      	add	r3, r2
 800e320:	b21b      	sxth	r3, r3
 800e322:	4299      	cmp	r1, r3
 800e324:	da48      	bge.n	800e3b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e326:	9b04      	ldr	r3, [sp, #16]
 800e328:	6827      	ldr	r7, [r4, #0]
 800e32a:	fb17 f703 	smulbb	r7, r7, r3
 800e32e:	9b02      	ldr	r3, [sp, #8]
 800e330:	b2bf      	uxth	r7, r7
 800e332:	18fa      	adds	r2, r7, r3
 800e334:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e338:	b212      	sxth	r2, r2
 800e33a:	429a      	cmp	r2, r3
 800e33c:	db3c      	blt.n	800e3b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e33e:	8970      	ldrh	r0, [r6, #10]
 800e340:	4403      	add	r3, r0
 800e342:	b21b      	sxth	r3, r3
 800e344:	429a      	cmp	r2, r3
 800e346:	da37      	bge.n	800e3b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e348:	2300      	movs	r3, #0
 800e34a:	4630      	mov	r0, r6
 800e34c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e34e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800e350:	f7ff ff36 	bl	800e1c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e354:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e356:	b37a      	cbz	r2, 800e3b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e358:	4552      	cmp	r2, sl
 800e35a:	d02d      	beq.n	800e3b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e35c:	4611      	mov	r1, r2
 800e35e:	a80e      	add	r0, sp, #56	@ 0x38
 800e360:	9209      	str	r2, [sp, #36]	@ 0x24
 800e362:	f007 fa81 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e366:	f04f 0e02 	mov.w	lr, #2
 800e36a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800e36e:	9a06      	ldr	r2, [sp, #24]
 800e370:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800e374:	9b01      	ldr	r3, [sp, #4]
 800e376:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800e37a:	4413      	add	r3, r2
 800e37c:	9a07      	ldr	r2, [sp, #28]
 800e37e:	fb91 f1fe 	sdiv	r1, r1, lr
 800e382:	fb9c fcfe 	sdiv	ip, ip, lr
 800e386:	4401      	add	r1, r0
 800e388:	1a58      	subs	r0, r3, r1
 800e38a:	9b02      	ldr	r3, [sp, #8]
 800e38c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800e390:	4413      	add	r3, r2
 800e392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e394:	448c      	add	ip, r1
 800e396:	eba3 030c 	sub.w	r3, r3, ip
 800e39a:	435b      	muls	r3, r3
 800e39c:	fb00 3300 	mla	r3, r0, r0, r3
 800e3a0:	42ab      	cmp	r3, r5
 800e3a2:	d208      	bcs.n	800e3b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800e3a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3a6:	461d      	mov	r5, r3
 800e3a8:	9803      	ldr	r0, [sp, #12]
 800e3aa:	6001      	str	r1, [r0, #0]
 800e3ac:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800e3ae:	9805      	ldr	r0, [sp, #20]
 800e3b0:	8008      	strh	r0, [r1, #0]
 800e3b2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800e3b4:	800f      	strh	r7, [r1, #0]
 800e3b6:	4692      	mov	sl, r2
 800e3b8:	f10b 0b01 	add.w	fp, fp, #1
 800e3bc:	3408      	adds	r4, #8
 800e3be:	f1bb 0f04 	cmp.w	fp, #4
 800e3c2:	d19d      	bne.n	800e300 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800e3c4:	9b00      	ldr	r3, [sp, #0]
 800e3c6:	9c08      	ldr	r4, [sp, #32]
 800e3c8:	444b      	add	r3, r9
 800e3ca:	4544      	cmp	r4, r8
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	d188      	bne.n	800e2e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800e3d0:	b021      	add	sp, #132	@ 0x84
 800e3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d6:	f04f 35ff 	mov.w	r5, #4294967295
 800e3da:	e767      	b.n	800e2ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800e3dc:	2402daac 	.word	0x2402daac
 800e3e0:	08023bc0 	.word	0x08023bc0

0800e3e4 <_ZN8touchgfx4RectaNERKS0_>:
 800e3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3e8:	f9b1 7000 	ldrsh.w	r7, [r1]
 800e3ec:	888c      	ldrh	r4, [r1, #4]
 800e3ee:	f9b0 9000 	ldrsh.w	r9, [r0]
 800e3f2:	443c      	add	r4, r7
 800e3f4:	b2a4      	uxth	r4, r4
 800e3f6:	fa0f f884 	sxth.w	r8, r4
 800e3fa:	45c1      	cmp	r9, r8
 800e3fc:	da2f      	bge.n	800e45e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e3fe:	8882      	ldrh	r2, [r0, #4]
 800e400:	444a      	add	r2, r9
 800e402:	b292      	uxth	r2, r2
 800e404:	fa0f fe82 	sxth.w	lr, r2
 800e408:	4577      	cmp	r7, lr
 800e40a:	da28      	bge.n	800e45e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e40c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e410:	88cb      	ldrh	r3, [r1, #6]
 800e412:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e416:	442b      	add	r3, r5
 800e418:	b21b      	sxth	r3, r3
 800e41a:	429e      	cmp	r6, r3
 800e41c:	da1f      	bge.n	800e45e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e41e:	88c3      	ldrh	r3, [r0, #6]
 800e420:	4433      	add	r3, r6
 800e422:	b29b      	uxth	r3, r3
 800e424:	fa0f fc83 	sxth.w	ip, r3
 800e428:	4565      	cmp	r5, ip
 800e42a:	da18      	bge.n	800e45e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e42c:	454f      	cmp	r7, r9
 800e42e:	bfb8      	it	lt
 800e430:	464f      	movlt	r7, r9
 800e432:	42b5      	cmp	r5, r6
 800e434:	bfb8      	it	lt
 800e436:	4635      	movlt	r5, r6
 800e438:	45f0      	cmp	r8, lr
 800e43a:	bfd8      	it	le
 800e43c:	4622      	movle	r2, r4
 800e43e:	1bd2      	subs	r2, r2, r7
 800e440:	8082      	strh	r2, [r0, #4]
 800e442:	884a      	ldrh	r2, [r1, #2]
 800e444:	88c9      	ldrh	r1, [r1, #6]
 800e446:	8007      	strh	r7, [r0, #0]
 800e448:	440a      	add	r2, r1
 800e44a:	8045      	strh	r5, [r0, #2]
 800e44c:	b292      	uxth	r2, r2
 800e44e:	b211      	sxth	r1, r2
 800e450:	458c      	cmp	ip, r1
 800e452:	bfa8      	it	ge
 800e454:	4613      	movge	r3, r2
 800e456:	1b5b      	subs	r3, r3, r5
 800e458:	80c3      	strh	r3, [r0, #6]
 800e45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e45e:	2300      	movs	r3, #0
 800e460:	8003      	strh	r3, [r0, #0]
 800e462:	8043      	strh	r3, [r0, #2]
 800e464:	8083      	strh	r3, [r0, #4]
 800e466:	80c3      	strh	r3, [r0, #6]
 800e468:	e7f7      	b.n	800e45a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800e46a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e46a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	dd06      	ble.n	800e480 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800e472:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e476:	2800      	cmp	r0, #0
 800e478:	bfcc      	ite	gt
 800e47a:	2000      	movgt	r0, #0
 800e47c:	2001      	movle	r0, #1
 800e47e:	4770      	bx	lr
 800e480:	2001      	movs	r0, #1
 800e482:	4770      	bx	lr

0800e484 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	2300      	movs	r3, #0
 800e48a:	4604      	mov	r4, r0
 800e48c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800e48e:	8003      	strh	r3, [r0, #0]
 800e490:	8043      	strh	r3, [r0, #2]
 800e492:	8083      	strh	r3, [r0, #4]
 800e494:	80c3      	strh	r3, [r0, #6]
 800e496:	2d00      	cmp	r5, #0
 800e498:	d040      	beq.n	800e51c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e49a:	1d28      	adds	r0, r5, #4
 800e49c:	f7ff ffe5 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e4a0:	b988      	cbnz	r0, 800e4c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f7ff ffe1 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e4a8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e4ac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e4b0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e4b4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e4b8:	b138      	cbz	r0, 800e4ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e4ba:	8022      	strh	r2, [r4, #0]
 800e4bc:	8063      	strh	r3, [r4, #2]
 800e4be:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e4c2:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e4c6:	69ad      	ldr	r5, [r5, #24]
 800e4c8:	e7e5      	b.n	800e496 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e4ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e4ce:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e4d2:	4290      	cmp	r0, r2
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e4da:	460e      	mov	r6, r1
 800e4dc:	bfa8      	it	ge
 800e4de:	4617      	movge	r7, r2
 800e4e0:	4299      	cmp	r1, r3
 800e4e2:	4472      	add	r2, lr
 800e4e4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e4e8:	bfa8      	it	ge
 800e4ea:	461e      	movge	r6, r3
 800e4ec:	4440      	add	r0, r8
 800e4ee:	4471      	add	r1, lr
 800e4f0:	4463      	add	r3, ip
 800e4f2:	b200      	sxth	r0, r0
 800e4f4:	8027      	strh	r7, [r4, #0]
 800e4f6:	b212      	sxth	r2, r2
 800e4f8:	8066      	strh	r6, [r4, #2]
 800e4fa:	b209      	sxth	r1, r1
 800e4fc:	b21b      	sxth	r3, r3
 800e4fe:	4290      	cmp	r0, r2
 800e500:	bfac      	ite	ge
 800e502:	ebc7 0200 	rsbge	r2, r7, r0
 800e506:	ebc7 0202 	rsblt	r2, r7, r2
 800e50a:	4299      	cmp	r1, r3
 800e50c:	bfac      	ite	ge
 800e50e:	ebc6 0301 	rsbge	r3, r6, r1
 800e512:	ebc6 0303 	rsblt	r3, r6, r3
 800e516:	80a2      	strh	r2, [r4, #4]
 800e518:	80e3      	strh	r3, [r4, #6]
 800e51a:	e7d4      	b.n	800e4c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e51c:	4620      	mov	r0, r4
 800e51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e522 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e522:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e526:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e52a:	b383      	cbz	r3, 800e58e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e52c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e52e:	b374      	cbz	r4, 800e58e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e530:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e534:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e538:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e53c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e540:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e544:	b303      	cbz	r3, 800e588 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e546:	4668      	mov	r0, sp
 800e548:	1d21      	adds	r1, r4, #4
 800e54a:	f8ad 5000 	strh.w	r5, [sp]
 800e54e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e552:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e556:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e55a:	f7ff ff43 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 800e55e:	4668      	mov	r0, sp
 800e560:	f7ff ff83 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e564:	b980      	cbnz	r0, 800e588 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e566:	f8bd 3000 	ldrh.w	r3, [sp]
 800e56a:	4669      	mov	r1, sp
 800e56c:	88a2      	ldrh	r2, [r4, #4]
 800e56e:	4620      	mov	r0, r4
 800e570:	1a9b      	subs	r3, r3, r2
 800e572:	88e2      	ldrh	r2, [r4, #6]
 800e574:	f8ad 3000 	strh.w	r3, [sp]
 800e578:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e57c:	1a9b      	subs	r3, r3, r2
 800e57e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	4798      	blx	r3
 800e588:	69a4      	ldr	r4, [r4, #24]
 800e58a:	2c00      	cmp	r4, #0
 800e58c:	d1d8      	bne.n	800e540 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e58e:	b002      	add	sp, #8
 800e590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e594 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e594:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e596:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e59a:	460d      	mov	r5, r1
 800e59c:	4616      	mov	r6, r2
 800e59e:	b323      	cbz	r3, 800e5ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e5a0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e5a2:	b314      	cbz	r4, 800e5ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e5a4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e5a8:	b1eb      	cbz	r3, 800e5e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e5aa:	6828      	ldr	r0, [r5, #0]
 800e5ac:	466b      	mov	r3, sp
 800e5ae:	6869      	ldr	r1, [r5, #4]
 800e5b0:	c303      	stmia	r3!, {r0, r1}
 800e5b2:	4668      	mov	r0, sp
 800e5b4:	1d21      	adds	r1, r4, #4
 800e5b6:	f7ff ff15 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 800e5ba:	4668      	mov	r0, sp
 800e5bc:	f7ff ff55 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e5c0:	b988      	cbnz	r0, 800e5e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e5c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5c6:	4669      	mov	r1, sp
 800e5c8:	88a2      	ldrh	r2, [r4, #4]
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	1a9b      	subs	r3, r3, r2
 800e5ce:	88e2      	ldrh	r2, [r4, #6]
 800e5d0:	f8ad 3000 	strh.w	r3, [sp]
 800e5d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5d8:	1a9b      	subs	r3, r3, r2
 800e5da:	4632      	mov	r2, r6
 800e5dc:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e5e4:	4798      	blx	r3
 800e5e6:	69a4      	ldr	r4, [r4, #24]
 800e5e8:	e7db      	b.n	800e5a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e5ea:	b002      	add	sp, #8
 800e5ec:	bd70      	pop	{r4, r5, r6, pc}

0800e5ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e5ee:	6803      	ldr	r3, [r0, #0]
 800e5f0:	b513      	push	{r0, r1, r4, lr}
 800e5f2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e9cd 3300 	strd	r3, r3, [sp]
 800e5fc:	466b      	mov	r3, sp
 800e5fe:	47a0      	blx	r4
 800e600:	b002      	add	sp, #8
 800e602:	bd10      	pop	{r4, pc}

0800e604 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e604:	2301      	movs	r3, #1
 800e606:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800e60a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800e60e:	4770      	bx	lr

0800e610 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e610:	2301      	movs	r3, #1
 800e612:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800e616:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800e61a:	4770      	bx	lr

0800e61c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e61c:	6843      	ldr	r3, [r0, #4]
 800e61e:	2201      	movs	r2, #1
 800e620:	725a      	strb	r2, [r3, #9]
 800e622:	6840      	ldr	r0, [r0, #4]
 800e624:	6803      	ldr	r3, [r0, #0]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	4718      	bx	r3

0800e62a <_ZN8touchgfx3HAL8flushDMAEv>:
 800e62a:	6840      	ldr	r0, [r0, #4]
 800e62c:	6803      	ldr	r3, [r0, #0]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	4718      	bx	r3

0800e632 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800e632:	b530      	push	{r4, r5, lr}
 800e634:	b08b      	sub	sp, #44	@ 0x2c
 800e636:	6804      	ldr	r4, [r0, #0]
 800e638:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800e63c:	9509      	str	r5, [sp, #36]	@ 0x24
 800e63e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800e642:	9508      	str	r5, [sp, #32]
 800e644:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800e648:	9507      	str	r5, [sp, #28]
 800e64a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800e64e:	9506      	str	r5, [sp, #24]
 800e650:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800e654:	9505      	str	r5, [sp, #20]
 800e656:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800e65a:	9504      	str	r5, [sp, #16]
 800e65c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800e660:	9503      	str	r5, [sp, #12]
 800e662:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800e666:	9502      	str	r5, [sp, #8]
 800e668:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800e66c:	e9cd 3500 	strd	r3, r5, [sp]
 800e670:	4613      	mov	r3, r2
 800e672:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800e674:	2200      	movs	r2, #0
 800e676:	47a0      	blx	r4
 800e678:	b00b      	add	sp, #44	@ 0x2c
 800e67a:	bd30      	pop	{r4, r5, pc}

0800e67c <_ZN8touchgfx3HAL10beginFrameEv>:
 800e67c:	4b04      	ldr	r3, [pc, #16]	@ (800e690 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	b123      	cbz	r3, 800e68c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e682:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800e686:	f080 0001 	eor.w	r0, r0, #1
 800e68a:	4770      	bx	lr
 800e68c:	2001      	movs	r0, #1
 800e68e:	4770      	bx	lr
 800e690:	2402daaa 	.word	0x2402daaa

0800e694 <_ZN8touchgfx3HAL8endFrameEv>:
 800e694:	b510      	push	{r4, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	6840      	ldr	r0, [r0, #4]
 800e69a:	6803      	ldr	r3, [r0, #0]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	4798      	blx	r3
 800e6a0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800e6a4:	b113      	cbz	r3, 800e6ac <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e6ac:	bd10      	pop	{r4, pc}

0800e6ae <_ZN8touchgfx3HAL10initializeEv>:
 800e6ae:	b510      	push	{r4, lr}
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	f7f3 fe31 	bl	8002318 <_ZN8touchgfx10OSWrappers10initializeEv>
 800e6b6:	f7f3 fcf7 	bl	80020a8 <_ZN8touchgfx4GPIO4initEv>
 800e6ba:	6860      	ldr	r0, [r4, #4]
 800e6bc:	6803      	ldr	r3, [r0, #0]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	4798      	blx	r3
 800e6c2:	68e0      	ldr	r0, [r4, #12]
 800e6c4:	6803      	ldr	r3, [r0, #0]
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	4798      	blx	r3
 800e6ca:	6823      	ldr	r3, [r4, #0]
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6d4:	4718      	bx	r3
	...

0800e6d8 <_ZN8touchgfx3HAL4tickEv>:
 800e6d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e6da:	6803      	ldr	r3, [r0, #0]
 800e6dc:	4604      	mov	r4, r0
 800e6de:	4d5b      	ldr	r5, [pc, #364]	@ (800e84c <_ZN8touchgfx3HAL4tickEv+0x174>)
 800e6e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e6e4:	4798      	blx	r3
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	f000 8095 	beq.w	800e816 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800e6ec:	2001      	movs	r0, #1
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	f7f3 fc38 	bl	8001f64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e6f4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800e6f8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800e6fc:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e700:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800e704:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800e708:	b133      	cbz	r3, 800e718 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	4620      	mov	r0, r4
 800e70e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e712:	4798      	blx	r3
 800e714:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800e718:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800e71c:	2601      	movs	r6, #1
 800e71e:	6862      	ldr	r2, [r4, #4]
 800e720:	f083 0301 	eor.w	r3, r3, #1
 800e724:	702e      	strb	r6, [r5, #0]
 800e726:	7253      	strb	r3, [r2, #9]
 800e728:	f005 ff8a 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>
 800e72c:	6803      	ldr	r3, [r0, #0]
 800e72e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e730:	4798      	blx	r3
 800e732:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e736:	b90b      	cbnz	r3, 800e73c <_ZN8touchgfx3HAL4tickEv+0x64>
 800e738:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800e73c:	f005 ff80 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>
 800e740:	6803      	ldr	r3, [r0, #0]
 800e742:	695b      	ldr	r3, [r3, #20]
 800e744:	4798      	blx	r3
 800e746:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e748:	6803      	ldr	r3, [r0, #0]
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	4798      	blx	r3
 800e74e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e752:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800e756:	3b01      	subs	r3, #1
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e75e:	b10a      	cbz	r2, 800e764 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1eb      	bne.n	800e73c <_ZN8touchgfx3HAL4tickEv+0x64>
 800e764:	4a3a      	ldr	r2, [pc, #232]	@ (800e850 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e766:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800e76a:	7813      	ldrb	r3, [r2, #0]
 800e76c:	3301      	adds	r3, #1
 800e76e:	b25b      	sxtb	r3, r3
 800e770:	4299      	cmp	r1, r3
 800e772:	7013      	strb	r3, [r2, #0]
 800e774:	dc10      	bgt.n	800e798 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e776:	2300      	movs	r3, #0
 800e778:	68e0      	ldr	r0, [r4, #12]
 800e77a:	a902      	add	r1, sp, #8
 800e77c:	7013      	strb	r3, [r2, #0]
 800e77e:	aa03      	add	r2, sp, #12
 800e780:	6803      	ldr	r3, [r0, #0]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	4798      	blx	r3
 800e786:	6823      	ldr	r3, [r4, #0]
 800e788:	2800      	cmp	r0, #0
 800e78a:	d050      	beq.n	800e82e <_ZN8touchgfx3HAL4tickEv+0x156>
 800e78c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e790:	4620      	mov	r0, r4
 800e792:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e796:	4798      	blx	r3
 800e798:	2300      	movs	r3, #0
 800e79a:	6960      	ldr	r0, [r4, #20]
 800e79c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e7a0:	b158      	cbz	r0, 800e7ba <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e7a2:	6803      	ldr	r3, [r0, #0]
 800e7a4:	f10d 0107 	add.w	r1, sp, #7
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	4798      	blx	r3
 800e7ac:	b128      	cbz	r0, 800e7ba <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e7ae:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e7b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e7b4:	6803      	ldr	r3, [r0, #0]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	4798      	blx	r3
 800e7ba:	f104 001c 	add.w	r0, r4, #28
 800e7be:	f012 ffd9 	bl	8021774 <_ZN8touchgfx8Gestures4tickEv>
 800e7c2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800e7c6:	b30b      	cbz	r3, 800e80c <_ZN8touchgfx3HAL4tickEv+0x134>
 800e7c8:	6920      	ldr	r0, [r4, #16]
 800e7ca:	6803      	ldr	r3, [r0, #0]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	4798      	blx	r3
 800e7d0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	b903      	cbnz	r3, 800e7d8 <_ZN8touchgfx3HAL4tickEv+0x100>
 800e7d6:	6760      	str	r0, [r4, #116]	@ 0x74
 800e7d8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e7da:	4a1e      	ldr	r2, [pc, #120]	@ (800e854 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e7dc:	1af3      	subs	r3, r6, r3
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d914      	bls.n	800e80c <_ZN8touchgfx3HAL4tickEv+0x134>
 800e7e2:	6920      	ldr	r0, [r4, #16]
 800e7e4:	6803      	ldr	r3, [r0, #0]
 800e7e6:	699b      	ldr	r3, [r3, #24]
 800e7e8:	4798      	blx	r3
 800e7ea:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e7ec:	2264      	movs	r2, #100	@ 0x64
 800e7ee:	1af3      	subs	r3, r6, r3
 800e7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7f4:	fbb0 f0f3 	udiv	r0, r0, r3
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	dc1d      	bgt.n	800e838 <_ZN8touchgfx3HAL4tickEv+0x160>
 800e7fc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800e800:	6920      	ldr	r0, [r4, #16]
 800e802:	2100      	movs	r1, #0
 800e804:	6803      	ldr	r3, [r0, #0]
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	4798      	blx	r3
 800e80a:	6766      	str	r6, [r4, #116]	@ 0x74
 800e80c:	f005 ff18 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>
 800e810:	6803      	ldr	r3, [r0, #0]
 800e812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e814:	4798      	blx	r3
 800e816:	6823      	ldr	r3, [r4, #0]
 800e818:	4620      	mov	r0, r4
 800e81a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e81e:	4798      	blx	r3
 800e820:	2001      	movs	r0, #1
 800e822:	f7f3 fbd1 	bl	8001fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e826:	2300      	movs	r3, #0
 800e828:	702b      	strb	r3, [r5, #0]
 800e82a:	b004      	add	sp, #16
 800e82c:	bd70      	pop	{r4, r5, r6, pc}
 800e82e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e832:	4620      	mov	r0, r4
 800e834:	4798      	blx	r3
 800e836:	e7af      	b.n	800e798 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e838:	2863      	cmp	r0, #99	@ 0x63
 800e83a:	bfcb      	itete	gt
 800e83c:	2300      	movgt	r3, #0
 800e83e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800e842:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800e846:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800e84a:	e7d9      	b.n	800e800 <_ZN8touchgfx3HAL4tickEv+0x128>
 800e84c:	2402dab0 	.word	0x2402dab0
 800e850:	2402dab1 	.word	0x2402dab1
 800e854:	05f5e100 	.word	0x05f5e100

0800e858 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e858:	b510      	push	{r4, lr}
 800e85a:	4604      	mov	r4, r0
 800e85c:	f7f3 fd8c 	bl	8002378 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800e860:	2200      	movs	r2, #0
 800e862:	6863      	ldr	r3, [r4, #4]
 800e864:	729a      	strb	r2, [r3, #10]
 800e866:	bd10      	pop	{r4, pc}

0800e868 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e868:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800e86a:	301c      	adds	r0, #28
 800e86c:	f012 bf80 	b.w	8021770 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e870 <_ZN8touchgfx3HAL5touchEll>:
 800e870:	b530      	push	{r4, r5, lr}
 800e872:	b087      	sub	sp, #28
 800e874:	4604      	mov	r4, r0
 800e876:	a804      	add	r0, sp, #16
 800e878:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e87c:	f005 fd0e 	bl	801429c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e880:	9b04      	ldr	r3, [sp, #16]
 800e882:	a906      	add	r1, sp, #24
 800e884:	a803      	add	r0, sp, #12
 800e886:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e88a:	9b05      	ldr	r3, [sp, #20]
 800e88c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e890:	f005 fd56 	bl	8014340 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e894:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800e898:	f104 001c 	add.w	r0, r4, #28
 800e89c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e8a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e8a4:	b189      	cbz	r1, 800e8ca <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e8a6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e8b2:	462a      	mov	r2, r5
 800e8b4:	f012 ff6c 	bl	8021790 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e8b8:	b128      	cbz	r0, 800e8c6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800e8ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e8be:	6623      	str	r3, [r4, #96]	@ 0x60
 800e8c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e8c4:	6663      	str	r3, [r4, #100]	@ 0x64
 800e8c6:	b007      	add	sp, #28
 800e8c8:	bd30      	pop	{r4, r5, pc}
 800e8ca:	f012 ffa1 	bl	8021810 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e8d4:	e7f1      	b.n	800e8ba <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e8d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e8d6:	b510      	push	{r4, lr}
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d046      	beq.n	800e96a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e8dc:	ea81 0002 	eor.w	r0, r1, r2
 800e8e0:	07c4      	lsls	r4, r0, #31
 800e8e2:	d508      	bpl.n	800e8f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e8e4:	440b      	add	r3, r1
 800e8e6:	3a01      	subs	r2, #1
 800e8e8:	428b      	cmp	r3, r1
 800e8ea:	d93e      	bls.n	800e96a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e8ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e8f0:	f801 0b01 	strb.w	r0, [r1], #1
 800e8f4:	e7f8      	b.n	800e8e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e8f6:	07d0      	lsls	r0, r2, #31
 800e8f8:	bf42      	ittt	mi
 800e8fa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e8fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e902:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e906:	2b01      	cmp	r3, #1
 800e908:	d911      	bls.n	800e92e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e90a:	ea81 0402 	eor.w	r4, r1, r2
 800e90e:	4610      	mov	r0, r2
 800e910:	07a4      	lsls	r4, r4, #30
 800e912:	d022      	beq.n	800e95a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e914:	f023 0401 	bic.w	r4, r3, #1
 800e918:	440c      	add	r4, r1
 800e91a:	428c      	cmp	r4, r1
 800e91c:	4602      	mov	r2, r0
 800e91e:	d904      	bls.n	800e92a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e920:	8812      	ldrh	r2, [r2, #0]
 800e922:	3002      	adds	r0, #2
 800e924:	f821 2b02 	strh.w	r2, [r1], #2
 800e928:	e7f7      	b.n	800e91a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	f023 0003 	bic.w	r0, r3, #3
 800e932:	4408      	add	r0, r1
 800e934:	4288      	cmp	r0, r1
 800e936:	4614      	mov	r4, r2
 800e938:	d904      	bls.n	800e944 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e93a:	6824      	ldr	r4, [r4, #0]
 800e93c:	3204      	adds	r2, #4
 800e93e:	f841 4b04 	str.w	r4, [r1], #4
 800e942:	e7f7      	b.n	800e934 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e944:	f003 0303 	and.w	r3, r3, #3
 800e948:	3a01      	subs	r2, #1
 800e94a:	440b      	add	r3, r1
 800e94c:	428b      	cmp	r3, r1
 800e94e:	d90c      	bls.n	800e96a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e950:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e954:	f801 0b01 	strb.w	r0, [r1], #1
 800e958:	e7f8      	b.n	800e94c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e95a:	0790      	lsls	r0, r2, #30
 800e95c:	d0e7      	beq.n	800e92e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e95e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e962:	3b02      	subs	r3, #2
 800e964:	f821 0b02 	strh.w	r0, [r1], #2
 800e968:	e7e1      	b.n	800e92e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e96a:	2001      	movs	r0, #1
 800e96c:	bd10      	pop	{r4, pc}

0800e96e <_ZN8touchgfx3HAL7noTouchEv>:
 800e96e:	b510      	push	{r4, lr}
 800e970:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800e974:	4604      	mov	r4, r0
 800e976:	b153      	cbz	r3, 800e98e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e978:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800e97c:	2101      	movs	r1, #1
 800e97e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800e982:	301c      	adds	r0, #28
 800e984:	f012 ff44 	bl	8021810 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e988:	2300      	movs	r3, #0
 800e98a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e98e:	bd10      	pop	{r4, pc}

0800e990 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e994:	b085      	sub	sp, #20
 800e996:	4604      	mov	r4, r0
 800e998:	2000      	movs	r0, #0
 800e99a:	4699      	mov	r9, r3
 800e99c:	ad04      	add	r5, sp, #16
 800e99e:	460f      	mov	r7, r1
 800e9a0:	4690      	mov	r8, r2
 800e9a2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e9a6:	69a0      	ldr	r0, [r4, #24]
 800e9a8:	6806      	ldr	r6, [r0, #0]
 800e9aa:	9501      	str	r5, [sp, #4]
 800e9ac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800e9b0:	9500      	str	r5, [sp, #0]
 800e9b2:	6835      	ldr	r5, [r6, #0]
 800e9b4:	47a8      	blx	r5
 800e9b6:	4d10      	ldr	r5, [pc, #64]	@ (800e9f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e9b8:	4606      	mov	r6, r0
 800e9ba:	f8a5 9000 	strh.w	r9, [r5]
 800e9be:	f7f4 fb9d 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800e9c2:	6803      	ldr	r3, [r0, #0]
 800e9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c6:	4798      	blx	r3
 800e9c8:	b128      	cbz	r0, 800e9d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e9ca:	2801      	cmp	r0, #1
 800e9cc:	d00b      	beq.n	800e9e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	b005      	add	sp, #20
 800e9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9d6:	882b      	ldrh	r3, [r5, #0]
 800e9d8:	fb08 7203 	mla	r2, r8, r3, r7
 800e9dc:	9b03      	ldr	r3, [sp, #12]
 800e9de:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e9e2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e9e4:	e7f3      	b.n	800e9ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e9e6:	882a      	ldrh	r2, [r5, #0]
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	fb08 7202 	mla	r2, r8, r2, r7
 800e9ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e9f2:	1a9a      	subs	r2, r3, r2
 800e9f4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800e9f6:	e7ea      	b.n	800e9ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e9f8:	2402daa6 	.word	0x2402daa6

0800e9fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9fe:	b08b      	sub	sp, #44	@ 0x2c
 800ea00:	4617      	mov	r7, r2
 800ea02:	4604      	mov	r4, r0
 800ea04:	460e      	mov	r6, r1
 800ea06:	461d      	mov	r5, r3
 800ea08:	f7f4 fb78 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800ea0c:	6803      	ldr	r3, [r0, #0]
 800ea0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea10:	4798      	blx	r3
 800ea12:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800ea16:	9007      	str	r0, [sp, #28]
 800ea18:	4631      	mov	r1, r6
 800ea1a:	6822      	ldr	r2, [r4, #0]
 800ea1c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800ea20:	4b0c      	ldr	r3, [pc, #48]	@ (800ea54 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800ea22:	4620      	mov	r0, r4
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	9306      	str	r3, [sp, #24]
 800ea28:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800ea2c:	9305      	str	r3, [sp, #20]
 800ea2e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ea38:	9303      	str	r3, [sp, #12]
 800ea3a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ea3e:	9302      	str	r3, [sp, #8]
 800ea40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800ea44:	e9cd 5300 	strd	r5, r3, [sp]
 800ea48:	463b      	mov	r3, r7
 800ea4a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	47a8      	blx	r5
 800ea50:	b00b      	add	sp, #44	@ 0x2c
 800ea52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea54:	2402daa6 	.word	0x2402daa6

0800ea58 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800ea58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea5c:	4698      	mov	r8, r3
 800ea5e:	6803      	ldr	r3, [r0, #0]
 800ea60:	b08b      	sub	sp, #44	@ 0x2c
 800ea62:	4617      	mov	r7, r2
 800ea64:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800ea66:	460e      	mov	r6, r1
 800ea68:	4b13      	ldr	r3, [pc, #76]	@ (800eab8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	f8b3 9000 	ldrh.w	r9, [r3]
 800ea70:	f7f4 fb44 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800ea74:	6803      	ldr	r3, [r0, #0]
 800ea76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea78:	4798      	blx	r3
 800ea7a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800ea7e:	2200      	movs	r2, #0
 800ea80:	4631      	mov	r1, r6
 800ea82:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800ea86:	2302      	movs	r3, #2
 800ea88:	4620      	mov	r0, r4
 800ea8a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800ea96:	9304      	str	r3, [sp, #16]
 800ea98:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800ea9c:	9303      	str	r3, [sp, #12]
 800ea9e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800eaa2:	9302      	str	r3, [sp, #8]
 800eaa4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800eaa8:	e9cd 8300 	strd	r8, r3, [sp]
 800eaac:	463b      	mov	r3, r7
 800eaae:	47a8      	blx	r5
 800eab0:	b00b      	add	sp, #44	@ 0x2c
 800eab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eab6:	bf00      	nop
 800eab8:	2402daa6 	.word	0x2402daa6

0800eabc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800eabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eac0:	4698      	mov	r8, r3
 800eac2:	6803      	ldr	r3, [r0, #0]
 800eac4:	b087      	sub	sp, #28
 800eac6:	460e      	mov	r6, r1
 800eac8:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800eaca:	4617      	mov	r7, r2
 800eacc:	4b0f      	ldr	r3, [pc, #60]	@ (800eb0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800eace:	4604      	mov	r4, r0
 800ead0:	f8b3 9000 	ldrh.w	r9, [r3]
 800ead4:	f7f4 fb12 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800ead8:	6803      	ldr	r3, [r0, #0]
 800eada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eadc:	4798      	blx	r3
 800eade:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800eae2:	463a      	mov	r2, r7
 800eae4:	4631      	mov	r1, r6
 800eae6:	f8cd 900c 	str.w	r9, [sp, #12]
 800eaea:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800eaee:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	9302      	str	r3, [sp, #8]
 800eaf6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	4643      	mov	r3, r8
 800eb04:	47a8      	blx	r5
 800eb06:	b007      	add	sp, #28
 800eb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb0c:	2402daa6 	.word	0x2402daa6

0800eb10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	b08f      	sub	sp, #60	@ 0x3c
 800eb18:	4610      	mov	r0, r2
 800eb1a:	460d      	mov	r5, r1
 800eb1c:	4691      	mov	r9, r2
 800eb1e:	461e      	mov	r6, r3
 800eb20:	f009 fb38 	bl	8018194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f000 809d 	beq.w	800ec64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800ecc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800eb32:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800eb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb38:	4798      	blx	r3
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800eccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800eb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb44:	4798      	blx	r3
 800eb46:	f8bb 3000 	ldrh.w	r3, [fp]
 800eb4a:	4f5c      	ldr	r7, [pc, #368]	@ (800ecbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	f8ba 3000 	ldrh.w	r3, [sl]
 800eb52:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800eb56:	4640      	mov	r0, r8
 800eb58:	9302      	str	r3, [sp, #8]
 800eb5a:	883b      	ldrh	r3, [r7, #0]
 800eb5c:	9303      	str	r3, [sp, #12]
 800eb5e:	4b58      	ldr	r3, [pc, #352]	@ (800ecc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800eb60:	881a      	ldrh	r2, [r3, #0]
 800eb62:	9305      	str	r3, [sp, #20]
 800eb64:	9204      	str	r2, [sp, #16]
 800eb66:	f009 fc59 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eb6a:	8038      	strh	r0, [r7, #0]
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	f009 fc89 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eb72:	9b05      	ldr	r3, [sp, #20]
 800eb74:	b280      	uxth	r0, r0
 800eb76:	8018      	strh	r0, [r3, #0]
 800eb78:	4b52      	ldr	r3, [pc, #328]	@ (800ecc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d174      	bne.n	800ec6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800eb80:	883b      	ldrh	r3, [r7, #0]
 800eb82:	f8aa 0000 	strh.w	r0, [sl]
 800eb86:	f8ab 3000 	strh.w	r3, [fp]
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800eb90:	f009 fb00 	bl	8018194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800eb94:	2200      	movs	r2, #0
 800eb96:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800eba2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800eba6:	f7f4 ffb6 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800ebb0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ebb4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	dd5c      	ble.n	800ec76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800ebbc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dd58      	ble.n	800ec76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800ebc4:	462a      	mov	r2, r5
 800ebc6:	ab0a      	add	r3, sp, #40	@ 0x28
 800ebc8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ebcc:	6851      	ldr	r1, [r2, #4]
 800ebce:	c303      	stmia	r3!, {r0, r1}
 800ebd0:	4631      	mov	r1, r6
 800ebd2:	a80a      	add	r0, sp, #40	@ 0x28
 800ebd4:	f7ff fc06 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 800ebd8:	4b38      	ldr	r3, [pc, #224]	@ (800ecbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ebda:	2100      	movs	r1, #0
 800ebdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ebe0:	4b37      	ldr	r3, [pc, #220]	@ (800ecc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ebe2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800ebe6:	aa0a      	add	r2, sp, #40	@ 0x28
 800ebe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebec:	910c      	str	r1, [sp, #48]	@ 0x30
 800ebee:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800ebf2:	ab08      	add	r3, sp, #32
 800ebf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebf8:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	a90c      	add	r1, sp, #48	@ 0x30
 800ec00:	f7ff fbf0 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 800ec04:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d13c      	bne.n	800ec84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800ec10:	2600      	movs	r6, #0
 800ec12:	696b      	ldr	r3, [r5, #20]
 800ec14:	a908      	add	r1, sp, #32
 800ec16:	682a      	ldr	r2, [r5, #0]
 800ec18:	4628      	mov	r0, r5
 800ec1a:	9305      	str	r3, [sp, #20]
 800ec1c:	616e      	str	r6, [r5, #20]
 800ec1e:	6892      	ldr	r2, [r2, #8]
 800ec20:	4790      	blx	r2
 800ec22:	9b05      	ldr	r3, [sp, #20]
 800ec24:	4652      	mov	r2, sl
 800ec26:	4649      	mov	r1, r9
 800ec28:	616b      	str	r3, [r5, #20]
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800ec30:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800ec34:	f7f4 ff6f 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 800ec38:	9a01      	ldr	r2, [sp, #4]
 800ec3a:	4b23      	ldr	r3, [pc, #140]	@ (800ecc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	801a      	strh	r2, [r3, #0]
 800ec40:	9a02      	ldr	r2, [sp, #8]
 800ec42:	4b22      	ldr	r3, [pc, #136]	@ (800eccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800ec44:	801a      	strh	r2, [r3, #0]
 800ec46:	9a03      	ldr	r2, [sp, #12]
 800ec48:	4b1c      	ldr	r3, [pc, #112]	@ (800ecbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ec4a:	801a      	strh	r2, [r3, #0]
 800ec4c:	4b1c      	ldr	r3, [pc, #112]	@ (800ecc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ec4e:	9a04      	ldr	r2, [sp, #16]
 800ec50:	801a      	strh	r2, [r3, #0]
 800ec52:	6823      	ldr	r3, [r4, #0]
 800ec54:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800ec58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec5a:	4798      	blx	r3
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	4620      	mov	r0, r4
 800ec60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec62:	4798      	blx	r3
 800ec64:	b00f      	add	sp, #60	@ 0x3c
 800ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6a:	883b      	ldrh	r3, [r7, #0]
 800ec6c:	f8ab 0000 	strh.w	r0, [fp]
 800ec70:	f8aa 3000 	strh.w	r3, [sl]
 800ec74:	e789      	b.n	800eb8a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800ec76:	462a      	mov	r2, r5
 800ec78:	ab0a      	add	r3, sp, #40	@ 0x28
 800ec7a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ec7e:	6851      	ldr	r1, [r2, #4]
 800ec80:	c303      	stmia	r3!, {r0, r1}
 800ec82:	e7a9      	b.n	800ebd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800ec84:	a807      	add	r0, sp, #28
 800ec86:	f009 fd01 	bl	801868c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800ec8e:	6803      	ldr	r3, [r0, #0]
 800ec90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec92:	4798      	blx	r3
 800ec94:	4286      	cmp	r6, r0
 800ec96:	d1b8      	bne.n	800ec0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800ec98:	f7f4 fa30 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800ec9c:	6803      	ldr	r3, [r0, #0]
 800ec9e:	4606      	mov	r6, r0
 800eca0:	a807      	add	r0, sp, #28
 800eca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	f009 fcf1 	bl	801868c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ecaa:	9b05      	ldr	r3, [sp, #20]
 800ecac:	4601      	mov	r1, r0
 800ecae:	4630      	mov	r0, r6
 800ecb0:	4798      	blx	r3
 800ecb2:	f080 0001 	eor.w	r0, r0, #1
 800ecb6:	b2c0      	uxtb	r0, r0
 800ecb8:	e7a8      	b.n	800ec0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800ecba:	bf00      	nop
 800ecbc:	2402daa0 	.word	0x2402daa0
 800ecc0:	2402daa2 	.word	0x2402daa2
 800ecc4:	2402daa4 	.word	0x2402daa4
 800ecc8:	2402daa6 	.word	0x2402daa6
 800eccc:	2402daa8 	.word	0x2402daa8

0800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800ecd0:	4b07      	ldr	r3, [pc, #28]	@ (800ecf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	b13b      	cbz	r3, 800ecea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ecda:	6803      	ldr	r3, [r0, #0]
 800ecdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecde:	4798      	blx	r3
 800ece0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ece2:	4283      	cmp	r3, r0
 800ece4:	d101      	bne.n	800ecea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ece6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800ece8:	bd10      	pop	{r4, pc}
 800ecea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800ecec:	e7fc      	b.n	800ece8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800ecee:	bf00      	nop
 800ecf0:	2402daaa 	.word	0x2402daaa

0800ecf4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	461d      	mov	r5, r3
 800ecfa:	b08a      	sub	sp, #40	@ 0x28
 800ecfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed00:	4690      	mov	r8, r2
 800ed02:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800ed06:	2400      	movs	r4, #0
 800ed08:	4607      	mov	r7, r0
 800ed0a:	fb06 8505 	mla	r5, r6, r5, r8
 800ed0e:	9404      	str	r4, [sp, #16]
 800ed10:	f88d 4020 	strb.w	r4, [sp, #32]
 800ed14:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ed18:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800ed1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ed20:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ed24:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ed28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ed2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ed30:	f7ff ffce 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ed34:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ed3e:	a901      	add	r1, sp, #4
 800ed40:	9505      	str	r5, [sp, #20]
 800ed42:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800ed46:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800ed4a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800ed4e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800ed52:	6803      	ldr	r3, [r0, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	4798      	blx	r3
 800ed58:	b00a      	add	sp, #40	@ 0x28
 800ed5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed5e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800ed5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed62:	b08b      	sub	sp, #44	@ 0x2c
 800ed64:	2400      	movs	r4, #0
 800ed66:	4691      	mov	r9, r2
 800ed68:	461d      	mov	r5, r3
 800ed6a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800ed6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed72:	4688      	mov	r8, r1
 800ed74:	4607      	mov	r7, r0
 800ed76:	9404      	str	r4, [sp, #16]
 800ed78:	fb06 9505 	mla	r5, r6, r5, r9
 800ed7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed80:	f7ff ffa6 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ed84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ed88:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ed92:	a901      	add	r1, sp, #4
 800ed94:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ed98:	9505      	str	r5, [sp, #20]
 800ed9a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ed9e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800eda2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800eda6:	f8cd 8010 	str.w	r8, [sp, #16]
 800edaa:	f8ad 4020 	strh.w	r4, [sp, #32]
 800edae:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800edb2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800edb6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800edba:	6803      	ldr	r3, [r0, #0]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	4798      	blx	r3
 800edc0:	b00b      	add	sp, #44	@ 0x2c
 800edc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800edc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800edc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	b08a      	sub	sp, #40	@ 0x28
 800edce:	4698      	mov	r8, r3
 800edd0:	2300      	movs	r3, #0
 800edd2:	4606      	mov	r6, r0
 800edd4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800edd8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800eddc:	2d0b      	cmp	r5, #11
 800edde:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800ede2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800ede6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800edea:	9304      	str	r3, [sp, #16]
 800edec:	d137      	bne.n	800ee5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800edee:	2380      	movs	r3, #128	@ 0x80
 800edf0:	f88d 0020 	strb.w	r0, [sp, #32]
 800edf4:	4630      	mov	r0, r6
 800edf6:	9203      	str	r2, [sp, #12]
 800edf8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800edfc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ee00:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ee04:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ee08:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ee0c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ee10:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ee14:	f7ff ff5c 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ee18:	2c0b      	cmp	r4, #11
 800ee1a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ee1e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ee22:	bf94      	ite	ls
 800ee24:	4b19      	ldrls	r3, [pc, #100]	@ (800ee8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ee26:	2100      	movhi	r1, #0
 800ee28:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800ee2c:	bf98      	it	ls
 800ee2e:	5d19      	ldrbls	r1, [r3, r4]
 800ee30:	fb02 8307 	mla	r3, r2, r7, r8
 800ee34:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800ee38:	10c9      	asrs	r1, r1, #3
 800ee3a:	fb01 0003 	mla	r0, r1, r3, r0
 800ee3e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800ee42:	a901      	add	r1, sp, #4
 800ee44:	9005      	str	r0, [sp, #20]
 800ee46:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6870      	ldr	r0, [r6, #4]
 800ee4e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ee52:	6803      	ldr	r3, [r0, #0]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	4798      	blx	r3
 800ee58:	b00a      	add	sp, #40	@ 0x28
 800ee5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee5e:	2d02      	cmp	r5, #2
 800ee60:	d109      	bne.n	800ee76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800ee62:	28ff      	cmp	r0, #255	@ 0xff
 800ee64:	d105      	bne.n	800ee72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800ee66:	f1bc 0f00 	cmp.w	ip, #0
 800ee6a:	bf14      	ite	ne
 800ee6c:	2340      	movne	r3, #64	@ 0x40
 800ee6e:	2320      	moveq	r3, #32
 800ee70:	e7be      	b.n	800edf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ee72:	2340      	movs	r3, #64	@ 0x40
 800ee74:	e7bc      	b.n	800edf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ee76:	28ff      	cmp	r0, #255	@ 0xff
 800ee78:	d105      	bne.n	800ee86 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800ee7a:	f1bc 0f00 	cmp.w	ip, #0
 800ee7e:	bf14      	ite	ne
 800ee80:	2304      	movne	r3, #4
 800ee82:	2301      	moveq	r3, #1
 800ee84:	e7b4      	b.n	800edf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ee86:	2304      	movs	r3, #4
 800ee88:	e7b2      	b.n	800edf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ee8a:	bf00      	nop
 800ee8c:	080253cc 	.word	0x080253cc

0800ee90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800ee90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee94:	b08b      	sub	sp, #44	@ 0x2c
 800ee96:	461d      	mov	r5, r3
 800ee98:	2400      	movs	r4, #0
 800ee9a:	4688      	mov	r8, r1
 800ee9c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800eea0:	4693      	mov	fp, r2
 800eea2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800eea6:	4607      	mov	r7, r0
 800eea8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800eeac:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800eeb0:	9404      	str	r4, [sp, #16]
 800eeb2:	bf14      	ite	ne
 800eeb4:	2308      	movne	r3, #8
 800eeb6:	2302      	moveq	r3, #2
 800eeb8:	fb05 b50a 	mla	r5, r5, sl, fp
 800eebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eec0:	f7ff ff06 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eec4:	2e0b      	cmp	r6, #11
 800eec6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800eeca:	a901      	add	r1, sp, #4
 800eecc:	bf98      	it	ls
 800eece:	4b13      	ldrls	r3, [pc, #76]	@ (800ef1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800eed0:	f8ad a01e 	strh.w	sl, [sp, #30]
 800eed4:	bf98      	it	ls
 800eed6:	5d9c      	ldrbls	r4, [r3, r6]
 800eed8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800eedc:	10e4      	asrs	r4, r4, #3
 800eede:	f8cd 8010 	str.w	r8, [sp, #16]
 800eee2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eee6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800eeea:	fb04 0405 	mla	r4, r4, r5, r0
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eef4:	2300      	movs	r3, #0
 800eef6:	9405      	str	r4, [sp, #20]
 800eef8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eefc:	f88d 9020 	strb.w	r9, [sp, #32]
 800ef00:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800ef04:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ef08:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800ef0c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800ef10:	6803      	ldr	r3, [r0, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	4798      	blx	r3
 800ef16:	b00b      	add	sp, #44	@ 0x2c
 800ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1c:	080253cc 	.word	0x080253cc

0800ef20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ef20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef24:	461e      	mov	r6, r3
 800ef26:	4b0a      	ldr	r3, [pc, #40]	@ (800ef50 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800ef28:	460f      	mov	r7, r1
 800ef2a:	4690      	mov	r8, r2
 800ef2c:	881d      	ldrh	r5, [r3, #0]
 800ef2e:	f7f4 f8e5 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800ef32:	6803      	ldr	r3, [r0, #0]
 800ef34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef36:	4798      	blx	r3
 800ef38:	280b      	cmp	r0, #11
 800ef3a:	bf96      	itet	ls
 800ef3c:	4b05      	ldrls	r3, [pc, #20]	@ (800ef54 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ef3e:	2400      	movhi	r4, #0
 800ef40:	5c1c      	ldrbls	r4, [r3, r0]
 800ef42:	fb08 7005 	mla	r0, r8, r5, r7
 800ef46:	10e4      	asrs	r4, r4, #3
 800ef48:	fb04 6000 	mla	r0, r4, r0, r6
 800ef4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef50:	2402daa6 	.word	0x2402daa6
 800ef54:	080253cc 	.word	0x080253cc

0800ef58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef5a:	b08b      	sub	sp, #44	@ 0x2c
 800ef5c:	461f      	mov	r7, r3
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4616      	mov	r6, r2
 800ef62:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800ef66:	2500      	movs	r5, #0
 800ef68:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ef6c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800ef70:	9504      	str	r5, [sp, #16]
 800ef72:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ef76:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ef7a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ef7e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ef82:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ef86:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800ef8a:	f88d 3020 	strb.w	r3, [sp, #32]
 800ef8e:	f7ff fe9f 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ef92:	463a      	mov	r2, r7
 800ef94:	4631      	mov	r1, r6
 800ef96:	4603      	mov	r3, r0
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f7ff ffc1 	bl	800ef20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ef9e:	4b0e      	ldr	r3, [pc, #56]	@ (800efd8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800efa0:	9005      	str	r0, [sp, #20]
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800efa8:	f7f4 f8a8 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800efac:	6803      	ldr	r3, [r0, #0]
 800efae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb0:	4798      	blx	r3
 800efb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800efb4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800efb8:	a901      	add	r1, sp, #4
 800efba:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800efbe:	9304      	str	r3, [sp, #16]
 800efc0:	6860      	ldr	r0, [r4, #4]
 800efc2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800efc6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800efca:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800efce:	6803      	ldr	r3, [r0, #0]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	4798      	blx	r3
 800efd4:	b00b      	add	sp, #44	@ 0x2c
 800efd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd8:	2402daa6 	.word	0x2402daa6

0800efdc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efde:	b08d      	sub	sp, #52	@ 0x34
 800efe0:	2501      	movs	r5, #1
 800efe2:	4604      	mov	r4, r0
 800efe4:	466b      	mov	r3, sp
 800efe6:	9503      	str	r5, [sp, #12]
 800efe8:	e883 0006 	stmia.w	r3, {r1, r2}
 800efec:	2300      	movs	r3, #0
 800efee:	f8bd 6000 	ldrh.w	r6, [sp]
 800eff2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800eff6:	9306      	str	r3, [sp, #24]
 800eff8:	6803      	ldr	r3, [r0, #0]
 800effa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800effc:	4798      	blx	r3
 800effe:	463a      	mov	r2, r7
 800f000:	4631      	mov	r1, r6
 800f002:	4603      	mov	r3, r0
 800f004:	4620      	mov	r0, r4
 800f006:	f7ff ff8b 	bl	800ef20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f00a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f00c:	9004      	str	r0, [sp, #16]
 800f00e:	9307      	str	r3, [sp, #28]
 800f010:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f014:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f018:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f01c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f020:	4b0e      	ldr	r3, [pc, #56]	@ (800f05c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f028:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f02c:	f7f4 f866 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800f030:	6803      	ldr	r3, [r0, #0]
 800f032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f034:	4798      	blx	r3
 800f036:	23ff      	movs	r3, #255	@ 0xff
 800f038:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f03c:	a903      	add	r1, sp, #12
 800f03e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f042:	6860      	ldr	r0, [r4, #4]
 800f044:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f048:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f04c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f050:	6803      	ldr	r3, [r0, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	4798      	blx	r3
 800f056:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800f058:	b00d      	add	sp, #52	@ 0x34
 800f05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f05c:	2402daa6 	.word	0x2402daa6

0800f060 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f064:	b08c      	sub	sp, #48	@ 0x30
 800f066:	461e      	mov	r6, r3
 800f068:	2300      	movs	r3, #0
 800f06a:	4604      	mov	r4, r0
 800f06c:	466d      	mov	r5, sp
 800f06e:	9306      	str	r3, [sp, #24]
 800f070:	6803      	ldr	r3, [r0, #0]
 800f072:	e885 0006 	stmia.w	r5, {r1, r2}
 800f076:	2501      	movs	r5, #1
 800f078:	f8bd 7000 	ldrh.w	r7, [sp]
 800f07c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800f080:	9503      	str	r5, [sp, #12]
 800f082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f084:	4798      	blx	r3
 800f086:	4642      	mov	r2, r8
 800f088:	4639      	mov	r1, r7
 800f08a:	4603      	mov	r3, r0
 800f08c:	4620      	mov	r0, r4
 800f08e:	f7ff ff47 	bl	800ef20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f092:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f096:	9004      	str	r0, [sp, #16]
 800f098:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f09c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f0a0:	9607      	str	r6, [sp, #28]
 800f0a2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f0a6:	4b10      	ldr	r3, [pc, #64]	@ (800f0e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f0ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0b0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f0b4:	f7f4 f822 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 800f0b8:	6803      	ldr	r3, [r0, #0]
 800f0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0bc:	4798      	blx	r3
 800f0be:	23ff      	movs	r3, #255	@ 0xff
 800f0c0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f0c4:	a903      	add	r1, sp, #12
 800f0c6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f0ca:	6860      	ldr	r0, [r4, #4]
 800f0cc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f0d0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f0d4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f0d8:	6803      	ldr	r3, [r0, #0]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	4798      	blx	r3
 800f0de:	4630      	mov	r0, r6
 800f0e0:	b00c      	add	sp, #48	@ 0x30
 800f0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e6:	bf00      	nop
 800f0e8:	2402daa6 	.word	0x2402daa6

0800f0ec <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800f0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	ac02      	add	r4, sp, #8
 800f0f4:	e884 0006 	stmia.w	r4, {r1, r2}
 800f0f8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800f0fc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800f100:	f7ff fde6 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f104:	4631      	mov	r1, r6
 800f106:	4603      	mov	r3, r0
 800f108:	463a      	mov	r2, r7
 800f10a:	4628      	mov	r0, r5
 800f10c:	f7ff ff08 	bl	800ef20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f110:	4a05      	ldr	r2, [pc, #20]	@ (800f128 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	8812      	ldrh	r2, [r2, #0]
 800f116:	9200      	str	r2, [sp, #0]
 800f118:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800f11a:	4603      	mov	r3, r0
 800f11c:	4628      	mov	r0, r5
 800f11e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800f122:	47b0      	blx	r6
 800f124:	b005      	add	sp, #20
 800f126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f128:	2402daa6 	.word	0x2402daa6

0800f12c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800f132:	4604      	mov	r4, r0
 800f134:	b19b      	cbz	r3, 800f15e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800f136:	2002      	movs	r0, #2
 800f138:	f7f2 ff78 	bl	800202c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800f13c:	2300      	movs	r3, #0
 800f13e:	4620      	mov	r0, r4
 800f140:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f144:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800f14e:	f7ff fdbf 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f152:	4601      	mov	r1, r0
 800f154:	4620      	mov	r0, r4
 800f156:	462b      	mov	r3, r5
 800f158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f15c:	4718      	bx	r3
 800f15e:	bd70      	pop	{r4, r5, r6, pc}

0800f160 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	4605      	mov	r5, r0
 800f164:	460c      	mov	r4, r1
 800f166:	2003      	movs	r0, #3
 800f168:	b149      	cbz	r1, 800f17e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800f16a:	f7f2 fefb 	bl	8001f64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f16e:	6928      	ldr	r0, [r5, #16]
 800f170:	b168      	cbz	r0, 800f18e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800f172:	6803      	ldr	r3, [r0, #0]
 800f174:	2101      	movs	r1, #1
 800f176:	695b      	ldr	r3, [r3, #20]
 800f178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f17c:	4718      	bx	r3
 800f17e:	f7f2 ff23 	bl	8001fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f182:	6928      	ldr	r0, [r5, #16]
 800f184:	b118      	cbz	r0, 800f18e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800f186:	6803      	ldr	r3, [r0, #0]
 800f188:	4621      	mov	r1, r4
 800f18a:	695b      	ldr	r3, [r3, #20]
 800f18c:	e7f4      	b.n	800f178 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800f18e:	bd70      	pop	{r4, r5, r6, pc}

0800f190 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800f196:	4604      	mov	r4, r0
 800f198:	460d      	mov	r5, r1
 800f19a:	428b      	cmp	r3, r1
 800f19c:	d006      	beq.n	800f1ac <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800f19e:	6803      	ldr	r3, [r0, #0]
 800f1a0:	b929      	cbnz	r1, 800f1ae <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800f1a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f1a6:	4798      	blx	r3
 800f1a8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}
 800f1ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f1b2:	e7f8      	b.n	800f1a6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800f1b4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800f1b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800f1b6:	b510      	push	{r4, lr}
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	b95b      	cbnz	r3, 800f1d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f1be:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d007      	beq.n	800f1d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f1c6:	6840      	ldr	r0, [r0, #4]
 800f1c8:	f000 f92c 	bl	800f424 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800f1cc:	b118      	cbz	r0, 800f1d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f1ce:	6862      	ldr	r2, [r4, #4]
 800f1d0:	7a53      	ldrb	r3, [r2, #9]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d0fc      	beq.n	800f1d0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800f1d6:	f7f3 f8c7 	bl	8002368 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f1da:	4620      	mov	r0, r4
 800f1dc:	2100      	movs	r1, #0
 800f1de:	f7ff ffd7 	bl	800f190 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f7ff fd74 	bl	800ecd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f1e8:	bd10      	pop	{r4, pc}
 800f1ea:	bf00      	nop
 800f1ec:	2402daaa 	.word	0x2402daaa

0800f1f0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800f1f0:	b570      	push	{r4, r5, r6, lr}
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	6803      	ldr	r3, [r0, #0]
 800f1f6:	b919      	cbnz	r1, 800f200 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800f1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1fe:	4718      	bx	r3
 800f200:	2200      	movs	r2, #0
 800f202:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800f206:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800f20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f20c:	4798      	blx	r3
 800f20e:	6863      	ldr	r3, [r4, #4]
 800f210:	2101      	movs	r1, #1
 800f212:	4605      	mov	r5, r0
 800f214:	4620      	mov	r0, r4
 800f216:	7299      	strb	r1, [r3, #10]
 800f218:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800f21c:	f7ff ffb8 	bl	800f190 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f220:	4628      	mov	r0, r5
 800f222:	bd70      	pop	{r4, r5, r6, pc}

0800f224 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800f224:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800f228:	1a13      	subs	r3, r2, r0
 800f22a:	4258      	negs	r0, r3
 800f22c:	4158      	adcs	r0, r3
 800f22e:	4770      	bx	lr

0800f230 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800f230:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800f234:	1a9b      	subs	r3, r3, r2
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfdc      	itt	le
 800f23a:	6882      	ldrle	r2, [r0, #8]
 800f23c:	189b      	addle	r3, r3, r2
 800f23e:	2b01      	cmp	r3, #1
 800f240:	bfcc      	ite	gt
 800f242:	2000      	movgt	r0, #0
 800f244:	2001      	movle	r0, #1
 800f246:	4770      	bx	lr

0800f248 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800f248:	6902      	ldr	r2, [r0, #16]
 800f24a:	6843      	ldr	r3, [r0, #4]
 800f24c:	2024      	movs	r0, #36	@ 0x24
 800f24e:	fb00 3002 	mla	r0, r0, r2, r3
 800f252:	4770      	bx	lr

0800f254 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800f254:	6803      	ldr	r3, [r0, #0]
 800f256:	691b      	ldr	r3, [r3, #16]
 800f258:	4718      	bx	r3

0800f25a <_ZN8touchgfx13DMA_Interface7executeEv>:
 800f25a:	2301      	movs	r3, #1
 800f25c:	b570      	push	{r4, r5, r6, lr}
 800f25e:	7203      	strb	r3, [r0, #8]
 800f260:	4604      	mov	r4, r0
 800f262:	6840      	ldr	r0, [r0, #4]
 800f264:	6803      	ldr	r3, [r0, #0]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	4798      	blx	r3
 800f26a:	6803      	ldr	r3, [r0, #0]
 800f26c:	4605      	mov	r5, r0
 800f26e:	2b40      	cmp	r3, #64	@ 0x40
 800f270:	d00c      	beq.n	800f28c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f272:	d810      	bhi.n	800f296 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800f274:	2b04      	cmp	r3, #4
 800f276:	d01d      	beq.n	800f2b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800f278:	d804      	bhi.n	800f284 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d006      	beq.n	800f28c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d02c      	beq.n	800f2dc <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800f282:	bd70      	pop	{r4, r5, r6, pc}
 800f284:	2b08      	cmp	r3, #8
 800f286:	d01d      	beq.n	800f2c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800f288:	2b20      	cmp	r3, #32
 800f28a:	d1fa      	bne.n	800f282 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	4620      	mov	r0, r4
 800f290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f292:	4798      	blx	r3
 800f294:	e013      	b.n	800f2be <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800f296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f29a:	d0f7      	beq.n	800f28c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f29c:	d804      	bhi.n	800f2a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800f29e:	2b80      	cmp	r3, #128	@ 0x80
 800f2a0:	d0f4      	beq.n	800f28c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f2a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2a6:	e7f0      	b.n	800f28a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800f2a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2ac:	d0ee      	beq.n	800f28c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f2ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2b2:	e7e5      	b.n	800f280 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800f2b4:	6823      	ldr	r3, [r4, #0]
 800f2b6:	7f01      	ldrb	r1, [r0, #28]
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2bc:	4798      	blx	r3
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c2:	e006      	b.n	800f2d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f2c4:	6823      	ldr	r3, [r4, #0]
 800f2c6:	7f01      	ldrb	r1, [r0, #28]
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2cc:	4798      	blx	r3
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2d2:	4629      	mov	r1, r5
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2da:	4718      	bx	r3
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2e2:	4798      	blx	r3
 800f2e4:	e7f3      	b.n	800f2ce <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800f2e6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800f2e6:	4770      	bx	lr

0800f2e8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800f2e8:	4770      	bx	lr

0800f2ea <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800f2ea:	4770      	bx	lr

0800f2ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800f2ec:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800f2f0:	b510      	push	{r4, lr}
 800f2f2:	1ad2      	subs	r2, r2, r3
 800f2f4:	2a00      	cmp	r2, #0
 800f2f6:	bfdc      	itt	le
 800f2f8:	6884      	ldrle	r4, [r0, #8]
 800f2fa:	1912      	addle	r2, r2, r4
 800f2fc:	2a01      	cmp	r2, #1
 800f2fe:	dd16      	ble.n	800f32e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800f300:	6842      	ldr	r2, [r0, #4]
 800f302:	2424      	movs	r4, #36	@ 0x24
 800f304:	fb04 2303 	mla	r3, r4, r3, r2
 800f308:	f101 0220 	add.w	r2, r1, #32
 800f30c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f310:	4291      	cmp	r1, r2
 800f312:	f843 4b04 	str.w	r4, [r3], #4
 800f316:	d1f9      	bne.n	800f30c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800f318:	780a      	ldrb	r2, [r1, #0]
 800f31a:	701a      	strb	r2, [r3, #0]
 800f31c:	68c3      	ldr	r3, [r0, #12]
 800f31e:	6882      	ldr	r2, [r0, #8]
 800f320:	f3bf 8f5b 	dmb	ish
 800f324:	3301      	adds	r3, #1
 800f326:	429a      	cmp	r2, r3
 800f328:	bfd8      	it	le
 800f32a:	1a9b      	suble	r3, r3, r2
 800f32c:	60c3      	str	r3, [r0, #12]
 800f32e:	bd10      	pop	{r4, pc}

0800f330 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800f330:	6903      	ldr	r3, [r0, #16]
 800f332:	6882      	ldr	r2, [r0, #8]
 800f334:	f3bf 8f5b 	dmb	ish
 800f338:	3301      	adds	r3, #1
 800f33a:	429a      	cmp	r2, r3
 800f33c:	bfd8      	it	le
 800f33e:	1a9b      	suble	r3, r3, r2
 800f340:	6103      	str	r3, [r0, #16]
 800f342:	4770      	bx	lr

0800f344 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	4604      	mov	r4, r0
 800f348:	460e      	mov	r6, r1
 800f34a:	6860      	ldr	r0, [r4, #4]
 800f34c:	6803      	ldr	r3, [r0, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	4798      	blx	r3
 800f352:	2800      	cmp	r0, #0
 800f354:	d1f9      	bne.n	800f34a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800f356:	4d0d      	ldr	r5, [pc, #52]	@ (800f38c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800f358:	6828      	ldr	r0, [r5, #0]
 800f35a:	6803      	ldr	r3, [r0, #0]
 800f35c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f35e:	4798      	blx	r3
 800f360:	f7f3 f810 	bl	8002384 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800f364:	6828      	ldr	r0, [r5, #0]
 800f366:	2101      	movs	r1, #1
 800f368:	f7ff ff12 	bl	800f190 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f36c:	6860      	ldr	r0, [r4, #4]
 800f36e:	4631      	mov	r1, r6
 800f370:	6803      	ldr	r3, [r0, #0]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	4798      	blx	r3
 800f376:	6823      	ldr	r3, [r4, #0]
 800f378:	4620      	mov	r0, r4
 800f37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f37c:	4798      	blx	r3
 800f37e:	6828      	ldr	r0, [r5, #0]
 800f380:	6803      	ldr	r3, [r0, #0]
 800f382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f386:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f388:	4718      	bx	r3
 800f38a:	bf00      	nop
 800f38c:	2402daac 	.word	0x2402daac

0800f390 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800f390:	b508      	push	{r3, lr}
 800f392:	f7f2 ffe9 	bl	8002368 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f39a:	f7f2 bfed 	b.w	8002378 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f39e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800f39e:	b510      	push	{r4, lr}
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	2114      	movs	r1, #20
 800f3a4:	f013 f802 	bl	80223ac <_ZdlPvj>
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	bd10      	pop	{r4, pc}

0800f3ac <_ZN8touchgfx13DMA_Interface5startEv>:
 800f3ac:	b510      	push	{r4, lr}
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	6840      	ldr	r0, [r0, #4]
 800f3b2:	6803      	ldr	r3, [r0, #0]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4798      	blx	r3
 800f3b8:	b948      	cbnz	r0, 800f3ce <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f3ba:	7a63      	ldrb	r3, [r4, #9]
 800f3bc:	b13b      	cbz	r3, 800f3ce <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f3be:	7a23      	ldrb	r3, [r4, #8]
 800f3c0:	b92b      	cbnz	r3, 800f3ce <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3cc:	4718      	bx	r3
 800f3ce:	bd10      	pop	{r4, pc}

0800f3d0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	6840      	ldr	r0, [r0, #4]
 800f3d6:	6803      	ldr	r3, [r0, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4798      	blx	r3
 800f3dc:	4605      	mov	r5, r0
 800f3de:	b930      	cbnz	r0, 800f3ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f3e0:	7a23      	ldrb	r3, [r4, #8]
 800f3e2:	b123      	cbz	r3, 800f3ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f3e4:	6860      	ldr	r0, [r4, #4]
 800f3e6:	6803      	ldr	r3, [r0, #0]
 800f3e8:	695b      	ldr	r3, [r3, #20]
 800f3ea:	4798      	blx	r3
 800f3ec:	7225      	strb	r5, [r4, #8]
 800f3ee:	6860      	ldr	r0, [r4, #4]
 800f3f0:	6803      	ldr	r3, [r0, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4798      	blx	r3
 800f3f6:	b928      	cbnz	r0, 800f404 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800f3f8:	6823      	ldr	r3, [r4, #0]
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f402:	4718      	bx	r3
 800f404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f408:	f7f2 bfc4 	b.w	8002394 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800f40c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800f40c:	b510      	push	{r4, lr}
 800f40e:	6082      	str	r2, [r0, #8]
 800f410:	2200      	movs	r2, #0
 800f412:	4c03      	ldr	r4, [pc, #12]	@ (800f420 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800f414:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800f418:	e9c0 4100 	strd	r4, r1, [r0]
 800f41c:	bd10      	pop	{r4, pc}
 800f41e:	bf00      	nop
 800f420:	080253e0 	.word	0x080253e0

0800f424 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800f424:	6840      	ldr	r0, [r0, #4]
 800f426:	6803      	ldr	r3, [r0, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4718      	bx	r3

0800f42c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800f42c:	2300      	movs	r3, #0
 800f42e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800f430:	8503      	strh	r3, [r0, #40]	@ 0x28
 800f432:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800f434:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f436:	6980      	ldr	r0, [r0, #24]
 800f438:	b110      	cbz	r0, 800f440 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800f43a:	6803      	ldr	r3, [r0, #0]
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	4718      	bx	r3
 800f440:	4770      	bx	lr

0800f442 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800f442:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800f446:	4770      	bx	lr

0800f448 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	0e0b      	lsrs	r3, r1, #24
 800f44c:	4604      	mov	r4, r0
 800f44e:	460d      	mov	r5, r1
 800f450:	7783      	strb	r3, [r0, #30]
 800f452:	6803      	ldr	r3, [r0, #0]
 800f454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f456:	4798      	blx	r3
 800f458:	6803      	ldr	r3, [r0, #0]
 800f45a:	4629      	mov	r1, r5
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	4798      	blx	r3
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	4620      	mov	r0, r4
 800f464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f466:	4798      	blx	r3
 800f468:	61a0      	str	r0, [r4, #24]
 800f46a:	bd38      	pop	{r3, r4, r5, pc}

0800f46c <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800f46c:	7741      	strb	r1, [r0, #29]
 800f46e:	4770      	bx	lr

0800f470 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800f470:	b530      	push	{r4, r5, lr}
 800f472:	460d      	mov	r5, r1
 800f474:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800f478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f47a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f47c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f47e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f480:	682b      	ldr	r3, [r5, #0]
 800f482:	6023      	str	r3, [r4, #0]
 800f484:	bd30      	pop	{r4, r5, pc}

0800f486 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800f486:	b538      	push	{r3, r4, r5, lr}
 800f488:	4604      	mov	r4, r0
 800f48a:	1d03      	adds	r3, r0, #4
 800f48c:	6808      	ldr	r0, [r1, #0]
 800f48e:	2500      	movs	r5, #0
 800f490:	6849      	ldr	r1, [r1, #4]
 800f492:	c303      	stmia	r3!, {r0, r1}
 800f494:	6813      	ldr	r3, [r2, #0]
 800f496:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800f49a:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800f49e:	6853      	ldr	r3, [r2, #4]
 800f4a0:	61a5      	str	r5, [r4, #24]
 800f4a2:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800f4a6:	f006 fc4b 	bl	8015d40 <_ZN8touchgfx9Matrix3x35resetEv>
 800f4aa:	23ff      	movs	r3, #255	@ 0xff
 800f4ac:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800f4b0:	7763      	strb	r3, [r4, #29]
 800f4b2:	77a3      	strb	r3, [r4, #30]
 800f4b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f4b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800f4c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f4c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800f4c4:	ee70 7a41 	vsub.f32	s15, s0, s2
 800f4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	ed2d 8b0a 	vpush	{d8-d12}
 800f4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4da:	b086      	sub	sp, #24
 800f4dc:	eeb0 ba40 	vmov.f32	s22, s0
 800f4e0:	6802      	ldr	r2, [r0, #0]
 800f4e2:	eef0 ba60 	vmov.f32	s23, s1
 800f4e6:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800f4ea:	eef0 aa41 	vmov.f32	s21, s2
 800f4ee:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800f4f0:	eeb0 aa61 	vmov.f32	s20, s3
 800f4f4:	eeb0 ca42 	vmov.f32	s24, s4
 800f4f8:	eef0 ca62 	vmov.f32	s25, s5
 800f4fc:	d112      	bne.n	800f524 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800f4fe:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800f502:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50a:	d10b      	bne.n	800f524 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800f50c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800f510:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800f512:	3901      	subs	r1, #1
 800f514:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f518:	b006      	add	sp, #24
 800f51a:	ecbd 8b0a 	vpop	{d8-d12}
 800f51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f522:	4710      	bx	r2
 800f524:	23ff      	movs	r3, #255	@ 0xff
 800f526:	4628      	mov	r0, r5
 800f528:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800f52c:	77ab      	strb	r3, [r5, #30]
 800f52e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f530:	4798      	blx	r3
 800f532:	eeb0 0a4b 	vmov.f32	s0, s22
 800f536:	eef0 0a6b 	vmov.f32	s1, s23
 800f53a:	4604      	mov	r4, r0
 800f53c:	4640      	mov	r0, r8
 800f53e:	f006 fcae 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f542:	eef0 8a40 	vmov.f32	s17, s0
 800f546:	ed8d 0a00 	vstr	s0, [sp]
 800f54a:	eeb0 0a6a 	vmov.f32	s0, s21
 800f54e:	eef0 9a60 	vmov.f32	s19, s1
 800f552:	edcd 0a01 	vstr	s1, [sp, #4]
 800f556:	4640      	mov	r0, r8
 800f558:	eef0 0a4a 	vmov.f32	s1, s20
 800f55c:	f006 fc9f 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f560:	eef4 8a40 	vcmp.f32	s17, s0
 800f564:	eeb0 8a40 	vmov.f32	s16, s0
 800f568:	ed8d 0a02 	vstr	s0, [sp, #8]
 800f56c:	eeb0 9a60 	vmov.f32	s18, s1
 800f570:	edcd 0a03 	vstr	s1, [sp, #12]
 800f574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f578:	eef4 9a60 	vcmp.f32	s19, s1
 800f57c:	bf0c      	ite	eq
 800f57e:	2301      	moveq	r3, #1
 800f580:	2300      	movne	r3, #0
 800f582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f586:	eef4 8a40 	vcmp.f32	s17, s0
 800f58a:	7463      	strb	r3, [r4, #17]
 800f58c:	bf0c      	ite	eq
 800f58e:	2301      	moveq	r3, #1
 800f590:	2300      	movne	r3, #0
 800f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f596:	74a3      	strb	r3, [r4, #18]
 800f598:	d024      	beq.n	800f5e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800f59a:	eef4 9a60 	vcmp.f32	s19, s1
 800f59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a2:	d01f      	beq.n	800f5e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800f5a4:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	ee7a aacb 	vsub.f32	s21, s21, s22
 800f5ae:	eeb0 0a4b 	vmov.f32	s0, s22
 800f5b2:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800f5b6:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800f5ba:	eef0 0a6b 	vmov.f32	s1, s23
 800f5be:	eea7 0acc 	vfms.f32	s0, s15, s24
 800f5c2:	eeec 0a87 	vfma.f32	s1, s25, s14
 800f5c6:	f006 fc6a 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f5ca:	ed8d 0a04 	vstr	s0, [sp, #16]
 800f5ce:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f5d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f5d6:	edcd 0a05 	vstr	s1, [sp, #20]
 800f5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5de:	d121      	bne.n	800f624 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	74a3      	strb	r3, [r4, #18]
 800f5e4:	7c63      	ldrb	r3, [r4, #17]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d051      	beq.n	800f68e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800f5ea:	ee39 7a69 	vsub.f32	s14, s18, s19
 800f5ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f6e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800f5f2:	eef4 9ac9 	vcmpe.f32	s19, s18
 800f5f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fe:	edc4 7a08 	vstr	s15, [r4, #32]
 800f602:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800f606:	ee17 3a90 	vmov	r3, s15
 800f60a:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800f60e:	b21a      	sxth	r2, r3
 800f610:	ee17 3a90 	vmov	r3, s15
 800f614:	bf48      	it	mi
 800f616:	8122      	strhmi	r2, [r4, #8]
 800f618:	b21b      	sxth	r3, r3
 800f61a:	bf56      	itet	pl
 800f61c:	80e2      	strhpl	r2, [r4, #6]
 800f61e:	80e3      	strhmi	r3, [r4, #6]
 800f620:	8123      	strhpl	r3, [r4, #8]
 800f622:	e02c      	b.n	800f67e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f624:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800f628:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800f62c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f630:	edc4 7a05 	vstr	s15, [r4, #20]
 800f634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f638:	d102      	bne.n	800f640 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800f63a:	2301      	movs	r3, #1
 800f63c:	7463      	strb	r3, [r4, #17]
 800f63e:	e7d1      	b.n	800f5e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800f640:	eeb0 7a69 	vmov.f32	s14, s19
 800f644:	ee39 9a69 	vsub.f32	s18, s18, s19
 800f648:	ee38 8a68 	vsub.f32	s16, s16, s17
 800f64c:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800f650:	ed84 7a06 	vstr	s14, [r4, #24]
 800f654:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800f658:	ee38 8a47 	vsub.f32	s16, s16, s14
 800f65c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800f6e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800f660:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800f664:	ed84 8a07 	vstr	s16, [r4, #28]
 800f668:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f670:	edc4 7a08 	vstr	s15, [r4, #32]
 800f674:	d503      	bpl.n	800f67e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f676:	eeb1 8a48 	vneg.f32	s16, s16
 800f67a:	ed84 8a07 	vstr	s16, [r4, #28]
 800f67e:	60e7      	str	r7, [r4, #12]
 800f680:	7426      	strb	r6, [r4, #16]
 800f682:	61ac      	str	r4, [r5, #24]
 800f684:	b006      	add	sp, #24
 800f686:	ecbd 8b0a 	vpop	{d8-d12}
 800f68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68e:	7ca3      	ldrb	r3, [r4, #18]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d0f4      	beq.n	800f67e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f694:	ee38 7a68 	vsub.f32	s14, s16, s17
 800f698:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800f6e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800f69c:	eef4 8ac8 	vcmpe.f32	s17, s16
 800f6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a8:	edc4 7a08 	vstr	s15, [r4, #32]
 800f6ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f6b0:	ee17 3a90 	vmov	r3, s15
 800f6b4:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800f6b8:	b21a      	sxth	r2, r3
 800f6ba:	ee17 3a90 	vmov	r3, s15
 800f6be:	bf48      	it	mi
 800f6c0:	8122      	strhmi	r2, [r4, #8]
 800f6c2:	b21b      	sxth	r3, r3
 800f6c4:	bf56      	itet	pl
 800f6c6:	80e2      	strhpl	r2, [r4, #6]
 800f6c8:	80e3      	strhmi	r3, [r4, #6]
 800f6ca:	8123      	strhpl	r3, [r4, #8]
 800f6cc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f6d0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f6d4:	1a9b      	subs	r3, r3, r2
 800f6d6:	ee07 3a90 	vmov	s15, r3
 800f6da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6de:	edc4 7a07 	vstr	s15, [r4, #28]
 800f6e2:	e7cc      	b.n	800f67e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f6e4:	447ffffe 	.word	0x447ffffe
 800f6e8:	44800000 	.word	0x44800000

0800f6ec <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	ed2d 8b02 	vpush	{d8}
 800f6f2:	eef0 8a62 	vmov.f32	s17, s5
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	eeb0 8a42 	vmov.f32	s16, s4
 800f6fe:	f012 fbc7 	bl	8021e90 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800f702:	eef0 7a68 	vmov.f32	s15, s17
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	4620      	mov	r0, r4
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f710:	ee17 2a90 	vmov	r2, s15
 800f714:	eef0 7a48 	vmov.f32	s15, s16
 800f718:	ecbd 8b02 	vpop	{d8}
 800f71c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f724:	ee17 1a90 	vmov	r1, s15
 800f728:	4718      	bx	r3

0800f72a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800f72a:	b510      	push	{r4, lr}
 800f72c:	ed2d 8b02 	vpush	{d8}
 800f730:	eef0 8a63 	vmov.f32	s17, s7
 800f734:	2100      	movs	r1, #0
 800f736:	4604      	mov	r4, r0
 800f738:	eeb0 8a43 	vmov.f32	s16, s6
 800f73c:	f012 fc6a 	bl	8022014 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800f740:	eef0 7a68 	vmov.f32	s15, s17
 800f744:	6823      	ldr	r3, [r4, #0]
 800f746:	4620      	mov	r0, r4
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f74e:	ee17 2a90 	vmov	r2, s15
 800f752:	eef0 7a48 	vmov.f32	s15, s16
 800f756:	ecbd 8b02 	vpop	{d8}
 800f75a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f762:	ee17 1a90 	vmov	r1, s15
 800f766:	4718      	bx	r3

0800f768 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800f768:	b513      	push	{r0, r1, r4, lr}
 800f76a:	4604      	mov	r4, r0
 800f76c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800f76e:	f006 fb96 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f772:	eef0 7a60 	vmov.f32	s15, s1
 800f776:	4620      	mov	r0, r4
 800f778:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f77c:	ee17 2a90 	vmov	r2, s15
 800f780:	eef0 7a40 	vmov.f32	s15, s0
 800f784:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f788:	ee17 1a90 	vmov	r1, s15
 800f78c:	b002      	add	sp, #8
 800f78e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f792:	f012 bad7 	b.w	8021d44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800f796:	b513      	push	{r0, r1, r4, lr}
 800f798:	4604      	mov	r4, r0
 800f79a:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800f79c:	f006 fb7f 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7a0:	eef0 7a60 	vmov.f32	s15, s1
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f7aa:	ee17 2a90 	vmov	r2, s15
 800f7ae:	eef0 7a40 	vmov.f32	s15, s0
 800f7b2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f7b6:	ee17 1a90 	vmov	r1, s15
 800f7ba:	b002      	add	sp, #8
 800f7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7c0:	f012 bb0d 	b.w	8021dde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800f7c4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c6:	2400      	movs	r4, #0
 800f7c8:	9f07      	ldr	r7, [sp, #28]
 800f7ca:	f04f 0e01 	mov.w	lr, #1
 800f7ce:	4626      	mov	r6, r4
 800f7d0:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800f7d4:	4463      	add	r3, ip
 800f7d6:	4563      	cmp	r3, ip
 800f7d8:	d02d      	beq.n	800f836 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800f7da:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800f7de:	2d06      	cmp	r5, #6
 800f7e0:	d8f9      	bhi.n	800f7d6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f7e2:	fa0e f505 	lsl.w	r5, lr, r5
 800f7e6:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800f7ea:	d10d      	bne.n	800f808 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800f7ec:	f015 0f10 	tst.w	r5, #16
 800f7f0:	d117      	bne.n	800f822 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800f7f2:	072d      	lsls	r5, r5, #28
 800f7f4:	d5ef      	bpl.n	800f7d6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f7f6:	3801      	subs	r0, #1
 800f7f8:	b91e      	cbnz	r6, 800f802 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800f7fa:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800f7fe:	682d      	ldr	r5, [r5, #0]
 800f800:	600d      	str	r5, [r1, #0]
 800f802:	b96c      	cbnz	r4, 800f820 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f804:	2601      	movs	r6, #1
 800f806:	e7e6      	b.n	800f7d6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f808:	b926      	cbnz	r6, 800f814 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800f80a:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f80e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800f812:	600b      	str	r3, [r1, #0]
 800f814:	b924      	cbnz	r4, 800f820 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f816:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800f81a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f822:	3801      	subs	r0, #1
 800f824:	b91c      	cbnz	r4, 800f82e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800f826:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800f82a:	6824      	ldr	r4, [r4, #0]
 800f82c:	6014      	str	r4, [r2, #0]
 800f82e:	2e00      	cmp	r6, #0
 800f830:	d1f6      	bne.n	800f820 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f832:	2401      	movs	r4, #1
 800f834:	e7cf      	b.n	800f7d6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f836:	b90e      	cbnz	r6, 800f83c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800f838:	2300      	movs	r3, #0
 800f83a:	600b      	str	r3, [r1, #0]
 800f83c:	2c00      	cmp	r4, #0
 800f83e:	d1ef      	bne.n	800f820 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f840:	2300      	movs	r3, #0
 800f842:	e7ec      	b.n	800f81e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800f844 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	ed2d 8b0a 	vpush	{d8-d12}
 800f84a:	eef0 ba40 	vmov.f32	s23, s0
 800f84e:	4604      	mov	r4, r0
 800f850:	eeb0 ca60 	vmov.f32	s24, s1
 800f854:	460d      	mov	r5, r1
 800f856:	eef0 aa41 	vmov.f32	s21, s2
 800f85a:	eeb0 ba61 	vmov.f32	s22, s3
 800f85e:	eeb0 9a42 	vmov.f32	s18, s4
 800f862:	eef0 9a62 	vmov.f32	s19, s5
 800f866:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800f86a:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800f86e:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800f872:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800f876:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800f87a:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800f87e:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800f882:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f886:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800f88a:	f012 fdb9 	bl	8022400 <sqrtf>
 800f88e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f896:	d12e      	bne.n	800f8f6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800f898:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800f89c:	ee39 7acb 	vsub.f32	s14, s19, s22
 800f8a0:	eeb0 8a6a 	vmov.f32	s16, s21
 800f8a4:	eef0 8a4b 	vmov.f32	s17, s22
 800f8a8:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800f8ac:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800f8b0:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800f8b4:	eee7 8aca 	vfms.f32	s17, s15, s20
 800f8b8:	2d02      	cmp	r5, #2
 800f8ba:	dc2f      	bgt.n	800f91c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800f8bc:	3501      	adds	r5, #1
 800f8be:	eef0 1a4b 	vmov.f32	s3, s22
 800f8c2:	eeb0 1a6a 	vmov.f32	s2, s21
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	eef0 2a68 	vmov.f32	s5, s17
 800f8ce:	eeb0 2a48 	vmov.f32	s4, s16
 800f8d2:	eef0 0a4c 	vmov.f32	s1, s24
 800f8d6:	eeb0 0a6b 	vmov.f32	s0, s23
 800f8da:	f7ff ffb3 	bl	800f844 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f8de:	eef0 0a68 	vmov.f32	s1, s17
 800f8e2:	eeb0 0a48 	vmov.f32	s0, s16
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7ff ff55 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f8ec:	eeb0 ba68 	vmov.f32	s22, s17
 800f8f0:	eef0 aa48 	vmov.f32	s21, s16
 800f8f4:	e7b9      	b.n	800f86a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800f8f6:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800f8fa:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f8fe:	ee78 8acc 	vsub.f32	s17, s17, s24
 800f902:	ee28 7a27 	vmul.f32	s14, s16, s15
 800f906:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f90a:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800f90e:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800f912:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800f916:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800f91a:	e7cd      	b.n	800f8b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800f91c:	eef0 0a68 	vmov.f32	s1, s17
 800f920:	4620      	mov	r0, r4
 800f922:	eeb0 0a48 	vmov.f32	s0, s16
 800f926:	f7ff ff36 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f92a:	ecbd 8b0a 	vpop	{d8-d12}
 800f92e:	bd38      	pop	{r3, r4, r5, pc}

0800f930 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800f930:	b510      	push	{r4, lr}
 800f932:	ed2d 8b0a 	vpush	{d8-d12}
 800f936:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800f93a:	4604      	mov	r4, r0
 800f93c:	eeb0 ca40 	vmov.f32	s24, s0
 800f940:	2b02      	cmp	r3, #2
 800f942:	eeb0 9a60 	vmov.f32	s18, s1
 800f946:	eef0 9a41 	vmov.f32	s19, s2
 800f94a:	eef0 8a61 	vmov.f32	s17, s3
 800f94e:	eeb0 ba42 	vmov.f32	s22, s4
 800f952:	eef0 ba62 	vmov.f32	s23, s5
 800f956:	eeb0 aa43 	vmov.f32	s20, s6
 800f95a:	eef0 aa63 	vmov.f32	s21, s7
 800f95e:	eeb0 8a44 	vmov.f32	s16, s8
 800f962:	eef0 ca64 	vmov.f32	s25, s9
 800f966:	d12c      	bne.n	800f9c2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800f968:	eef0 0a62 	vmov.f32	s1, s5
 800f96c:	eeb0 0a42 	vmov.f32	s0, s4
 800f970:	f7ff ff11 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f974:	ee79 9acb 	vsub.f32	s19, s19, s22
 800f978:	ee7a caec 	vsub.f32	s25, s21, s25
 800f97c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800f980:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f984:	ee69 9aac 	vmul.f32	s19, s19, s25
 800f988:	ee28 8a88 	vmul.f32	s16, s17, s16
 800f98c:	eef4 9ac8 	vcmpe.f32	s19, s16
 800f990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f994:	db0f      	blt.n	800f9b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800f996:	2101      	movs	r1, #1
 800f998:	eef0 2a6a 	vmov.f32	s5, s21
 800f99c:	eeb0 2a4a 	vmov.f32	s4, s20
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	eef0 1a6b 	vmov.f32	s3, s23
 800f9a6:	eeb0 1a4b 	vmov.f32	s2, s22
 800f9aa:	eef0 0a49 	vmov.f32	s1, s18
 800f9ae:	eeb0 0a4c 	vmov.f32	s0, s24
 800f9b2:	f7ff ff47 	bl	800f844 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f9b6:	eef0 0a6a 	vmov.f32	s1, s21
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	eeb0 0a4a 	vmov.f32	s0, s20
 800f9c0:	e035      	b.n	800fa2e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d138      	bne.n	800fa38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f9c6:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800f9ca:	ee33 6a48 	vsub.f32	s12, s6, s16
 800f9ce:	ee71 7a42 	vsub.f32	s15, s2, s4
 800f9d2:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800f9d6:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800f9da:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f9de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e6:	d027      	beq.n	800fa38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f9e8:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800f9ec:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800f9f0:	eea4 8a83 	vfma.f32	s16, s9, s6
 800f9f4:	eee1 8a22 	vfma.f32	s17, s2, s5
 800f9f8:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800f9fc:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800fa00:	eee6 7a28 	vfma.f32	s15, s12, s17
 800fa04:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800fa08:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800fa0c:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800fa10:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800fa14:	ee3c ca40 	vsub.f32	s24, s24, s0
 800fa18:	ee39 9a60 	vsub.f32	s18, s18, s1
 800fa1c:	ee29 9a09 	vmul.f32	s18, s18, s18
 800fa20:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800fa24:	eef4 7ac9 	vcmpe.f32	s15, s18
 800fa28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2c:	db04      	blt.n	800fa38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800fa2e:	f7ff feb2 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fa32:	ecbd 8b0a 	vpop	{d8-d12}
 800fa36:	bd10      	pop	{r4, pc}
 800fa38:	eef0 0a6b 	vmov.f32	s1, s23
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	eeb0 0a4b 	vmov.f32	s0, s22
 800fa42:	f7ff fea8 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fa46:	e7b6      	b.n	800f9b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800fa48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800fa48:	b510      	push	{r4, lr}
 800fa4a:	ed2d 8b0c 	vpush	{d8-d13}
 800fa4e:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800fa52:	4604      	mov	r4, r0
 800fa54:	eeb0 9a40 	vmov.f32	s18, s0
 800fa58:	eef0 9a60 	vmov.f32	s19, s1
 800fa5c:	eef0 aa41 	vmov.f32	s21, s2
 800fa60:	eeb0 ba61 	vmov.f32	s22, s3
 800fa64:	b933      	cbnz	r3, 800fa74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800fa66:	f7ff fe96 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fa6a:	eef0 0a4b 	vmov.f32	s1, s22
 800fa6e:	eeb0 0a6a 	vmov.f32	s0, s21
 800fa72:	e015      	b.n	800faa0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800fa74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	ee71 8a40 	vsub.f32	s17, s2, s0
 800fa7e:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800fa82:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fa86:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fa8a:	d10f      	bne.n	800faac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800fa8c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800fa90:	ee30 0a08 	vadd.f32	s0, s0, s16
 800fa94:	f7ff fe7f 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fa98:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800fa9c:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800faa0:	4620      	mov	r0, r4
 800faa2:	f7ff fe78 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800faa6:	ecbd 8b0c 	vpop	{d8-d13}
 800faaa:	bd10      	pop	{r4, pc}
 800faac:	f7ff fe73 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fab0:	eef0 0a69 	vmov.f32	s1, s19
 800fab4:	eeb0 0a49 	vmov.f32	s0, s18
 800fab8:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800fbe8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800fabc:	eeb1 aa68 	vneg.f32	s20, s17
 800fac0:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800fbec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800fac4:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fac8:	4620      	mov	r0, r4
 800faca:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800face:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800fbf0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800fad2:	eddf ca48 	vldr	s25, [pc, #288]	@ 800fbf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800fad6:	ed9f da48 	vldr	s26, [pc, #288]	@ 800fbf8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800fada:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800fade:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800fae2:	f7ff fe58 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fae6:	eef0 0a69 	vmov.f32	s1, s19
 800faea:	eeb0 0a49 	vmov.f32	s0, s18
 800faee:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800fbfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800faf2:	4620      	mov	r0, r4
 800faf4:	eee8 0a27 	vfma.f32	s1, s16, s15
 800faf8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fafc:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800fb00:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800fb04:	f7ff fe47 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fb08:	eef0 0a69 	vmov.f32	s1, s19
 800fb0c:	eeb0 0a49 	vmov.f32	s0, s18
 800fb10:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800fc00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800fb14:	4620      	mov	r0, r4
 800fb16:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fb1a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fb1e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800fb22:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800fb26:	f7ff fe36 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fb2a:	eef0 0a69 	vmov.f32	s1, s19
 800fb2e:	eeb0 0a49 	vmov.f32	s0, s18
 800fb32:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800fc04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800fb36:	4620      	mov	r0, r4
 800fb38:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fb3c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fb40:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800fb44:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800fb48:	f7ff fe25 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fb4c:	ee79 0a88 	vadd.f32	s1, s19, s16
 800fb50:	ee39 0a28 	vadd.f32	s0, s18, s17
 800fb54:	4620      	mov	r0, r4
 800fb56:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800fb5a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800fb5e:	f7ff fe1a 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fb62:	eef0 0a69 	vmov.f32	s1, s19
 800fb66:	eeb0 0a49 	vmov.f32	s0, s18
 800fb6a:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800fc08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800fb6e:	4620      	mov	r0, r4
 800fb70:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fb74:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fb78:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800fb7c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800fb80:	f7ff fe09 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fb84:	eef0 0a69 	vmov.f32	s1, s19
 800fb88:	eeb0 0a49 	vmov.f32	s0, s18
 800fb8c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800fc0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800fb90:	4620      	mov	r0, r4
 800fb92:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fb96:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fb9a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800fb9e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800fba2:	f7ff fdf8 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fba6:	eef0 0a69 	vmov.f32	s1, s19
 800fbaa:	eeb0 0a49 	vmov.f32	s0, s18
 800fbae:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800fc10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fbb8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fbbc:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800fbc0:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800fbc4:	f7ff fde7 	bl	800f796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800fbc8:	eef0 0a69 	vmov.f32	s1, s19
 800fbcc:	eeb0 0a49 	vmov.f32	s0, s18
 800fbd0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800fc14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	eee8 0a27 	vfma.f32	s1, s16, s15
 800fbda:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fbde:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800fbe2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800fbe6:	e73e      	b.n	800fa66 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800fbe8:	3d23d70a 	.word	0x3d23d70a
 800fbec:	3e8f5c29 	.word	0x3e8f5c29
 800fbf0:	3f19999a 	.word	0x3f19999a
 800fbf4:	3f4ccccd 	.word	0x3f4ccccd
 800fbf8:	3f75c28f 	.word	0x3f75c28f
 800fbfc:	3e4ccccd 	.word	0x3e4ccccd
 800fc00:	3ecccccd 	.word	0x3ecccccd
 800fc04:	3f3851ec 	.word	0x3f3851ec
 800fc08:	3fa3d70a 	.word	0x3fa3d70a
 800fc0c:	3fcccccd 	.word	0x3fcccccd
 800fc10:	3fe66666 	.word	0x3fe66666
 800fc14:	3ffae148 	.word	0x3ffae148

0800fc18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	ed2d 8b06 	vpush	{d8-d10}
 800fc1e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800fc22:	eef0 aa40 	vmov.f32	s21, s0
 800fc26:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800fc30:	ee30 9a49 	vsub.f32	s18, s0, s18
 800fc34:	eeb0 aa60 	vmov.f32	s20, s1
 800fc38:	ee28 0a08 	vmul.f32	s0, s16, s16
 800fc3c:	eea9 0a09 	vfma.f32	s0, s18, s18
 800fc40:	f012 fbde 	bl	8022400 <sqrtf>
 800fc44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4c:	dd36      	ble.n	800fcbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800fc4e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800fc52:	2600      	movs	r6, #0
 800fc54:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800fc58:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800fc5c:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800fc60:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800fc64:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800fc68:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800fc6c:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800fc70:	ee70 9a28 	vadd.f32	s19, s0, s17
 800fc74:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800fc78:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800fc7c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800fc80:	b1fd      	cbz	r5, 800fcc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800fc82:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800fc86:	eef0 0a49 	vmov.f32	s1, s18
 800fc8a:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800fc8e:	eeb0 0a69 	vmov.f32	s0, s19
 800fc92:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800fc96:	4620      	mov	r0, r4
 800fc98:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800fc9c:	f7ff fd64 	bl	800f768 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800fca0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800fca4:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800fca8:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800fcac:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800fcb0:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800fcb4:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800fcb8:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800fcbc:	ecbd 8b06 	vpop	{d8-d10}
 800fcc0:	bd70      	pop	{r4, r5, r6, pc}
 800fcc2:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800fcc6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800fcca:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800fcce:	b16b      	cbz	r3, 800fcec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800fcd0:	eef0 1a49 	vmov.f32	s3, s18
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	eeb0 1a69 	vmov.f32	s2, s19
 800fcda:	eef0 0a62 	vmov.f32	s1, s5
 800fcde:	eeb0 0a42 	vmov.f32	s0, s4
 800fce2:	f7ff feb1 	bl	800fa48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800fce6:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800fcea:	e7db      	b.n	800fca4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800fcec:	eef0 4a48 	vmov.f32	s9, s16
 800fcf0:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800fcf4:	eeb0 4a68 	vmov.f32	s8, s17
 800fcf8:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800fcfc:	eef0 3a49 	vmov.f32	s7, s18
 800fd00:	4620      	mov	r0, r4
 800fd02:	eeb0 3a69 	vmov.f32	s6, s19
 800fd06:	f7ff fe13 	bl	800f930 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800fd0a:	e7cb      	b.n	800fca4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800fd0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800fd0c:	ee07 2a90 	vmov	s15, r2
 800fd10:	ee07 1a10 	vmov	s14, r1
 800fd14:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800fd18:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800fd2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800fd1c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800fd20:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800fd24:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd28:	f7ff bf76 	b.w	800fc18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fd2c:	3d000000 	.word	0x3d000000

0800fd30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	ed2d 8b02 	vpush	{d8}
 800fd36:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	b31d      	cbz	r5, 800fd86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800fd3e:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800fd42:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800fd46:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800fd4a:	ee78 8a67 	vsub.f32	s17, s16, s15
 800fd4e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800fd52:	eef0 0a68 	vmov.f32	s1, s17
 800fd56:	f7ff fd07 	bl	800f768 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800fd5a:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800fd5e:	eef0 1a48 	vmov.f32	s3, s16
 800fd62:	4620      	mov	r0, r4
 800fd64:	eeb0 0a41 	vmov.f32	s0, s2
 800fd68:	eef0 0a68 	vmov.f32	s1, s17
 800fd6c:	f7ff fe6c 	bl	800fa48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800fd70:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800fd74:	eef0 1a68 	vmov.f32	s3, s17
 800fd78:	4620      	mov	r0, r4
 800fd7a:	eef0 0a48 	vmov.f32	s1, s16
 800fd7e:	eeb0 0a41 	vmov.f32	s0, s2
 800fd82:	f7ff fe61 	bl	800fa48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800fd86:	4628      	mov	r0, r5
 800fd88:	ecbd 8b02 	vpop	{d8}
 800fd8c:	bd38      	pop	{r3, r4, r5, pc}

0800fd8e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800fd8e:	b510      	push	{r4, lr}
 800fd90:	ed2d 8b02 	vpush	{d8}
 800fd94:	4604      	mov	r4, r0
 800fd96:	eeb0 8a40 	vmov.f32	s16, s0
 800fd9a:	eef0 8a60 	vmov.f32	s17, s1
 800fd9e:	f7ff ffc7 	bl	800fd30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800fda2:	b9d0      	cbnz	r0, 800fdda <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800fda4:	4620      	mov	r0, r4
 800fda6:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800fdaa:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800fdae:	eef0 0a68 	vmov.f32	s1, s17
 800fdb2:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800fdb6:	eeb0 0a48 	vmov.f32	s0, s16
 800fdba:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800fdbe:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800fdc2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800fdc6:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800fdca:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800fdce:	f7ff fdaf 	bl	800f930 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800fdd2:	2001      	movs	r0, #1
 800fdd4:	ecbd 8b02 	vpop	{d8}
 800fdd8:	bd10      	pop	{r4, pc}
 800fdda:	2000      	movs	r0, #0
 800fddc:	e7fa      	b.n	800fdd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800fdde <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800fdde:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800fde2:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800fde6:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800fdea:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800fdee:	f7ff be2b 	b.w	800fa48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800fdf4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800fdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf8:	b089      	sub	sp, #36	@ 0x24
 800fdfa:	461c      	mov	r4, r3
 800fdfc:	4682      	mov	sl, r0
 800fdfe:	4615      	mov	r5, r2
 800fe00:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800fe04:	f10d 0820 	add.w	r8, sp, #32
 800fe08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fe0a:	9304      	str	r3, [sp, #16]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9105      	str	r1, [sp, #20]
 800fe10:	9306      	str	r3, [sp, #24]
 800fe12:	f848 3d04 	str.w	r3, [r8, #-4]!
 800fe16:	9b04      	ldr	r3, [sp, #16]
 800fe18:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800fe1c:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800fe20:	9b05      	ldr	r3, [sp, #20]
 800fe22:	429d      	cmp	r5, r3
 800fe24:	d96d      	bls.n	800ff02 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800fe26:	3d01      	subs	r5, #1
 800fe28:	f819 3005 	ldrb.w	r3, [r9, r5]
 800fe2c:	2b06      	cmp	r3, #6
 800fe2e:	d8f7      	bhi.n	800fe20 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800fe30:	a201      	add	r2, pc, #4	@ (adr r2, 800fe38 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800fe32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe36:	bf00      	nop
 800fe38:	0800fe57 	.word	0x0800fe57
 800fe3c:	0800fe21 	.word	0x0800fe21
 800fe40:	0800fe55 	.word	0x0800fe55
 800fe44:	0800fe79 	.word	0x0800fe79
 800fe48:	0800fe79 	.word	0x0800fe79
 800fe4c:	0800fe7d 	.word	0x0800fe7d
 800fe50:	0800febd 	.word	0x0800febd
 800fe54:	3c02      	subs	r4, #2
 800fe56:	4650      	mov	r0, sl
 800fe58:	9400      	str	r4, [sp, #0]
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	4642      	mov	r2, r8
 800fe5e:	a906      	add	r1, sp, #24
 800fe60:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800fe64:	f7ff fcae 	bl	800f7c4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800fe68:	eddd 0a07 	vldr	s1, [sp, #28]
 800fe6c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7ff fed1 	bl	800fc18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fe76:	e7d3      	b.n	800fe20 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800fe78:	3c01      	subs	r4, #1
 800fe7a:	e7ec      	b.n	800fe56 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800fe7c:	f1a4 0b04 	sub.w	fp, r4, #4
 800fe80:	3c02      	subs	r4, #2
 800fe82:	4650      	mov	r0, sl
 800fe84:	462b      	mov	r3, r5
 800fe86:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800fe8a:	f8cd b000 	str.w	fp, [sp]
 800fe8e:	4642      	mov	r2, r8
 800fe90:	a906      	add	r1, sp, #24
 800fe92:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800fe96:	f7ff fc95 	bl	800f7c4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800fe9a:	eddd 2a07 	vldr	s5, [sp, #28]
 800fe9e:	ed9d 2a06 	vldr	s4, [sp, #24]
 800fea2:	4630      	mov	r0, r6
 800fea4:	ed54 1a01 	vldr	s3, [r4, #-4]
 800fea8:	ed14 1a02 	vldr	s2, [r4, #-8]
 800feac:	edd4 0a01 	vldr	s1, [r4, #4]
 800feb0:	ed94 0a00 	vldr	s0, [r4]
 800feb4:	f7ff fc1a 	bl	800f6ec <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800feb8:	465c      	mov	r4, fp
 800feba:	e7b1      	b.n	800fe20 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800febc:	f1a4 0b06 	sub.w	fp, r4, #6
 800fec0:	3c02      	subs	r4, #2
 800fec2:	4650      	mov	r0, sl
 800fec4:	462b      	mov	r3, r5
 800fec6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800feca:	f8cd b000 	str.w	fp, [sp]
 800fece:	4642      	mov	r2, r8
 800fed0:	a906      	add	r1, sp, #24
 800fed2:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800fed6:	f7ff fc75 	bl	800f7c4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800feda:	eddd 3a07 	vldr	s7, [sp, #28]
 800fede:	ed9d 3a06 	vldr	s6, [sp, #24]
 800fee2:	4630      	mov	r0, r6
 800fee4:	ed54 2a03 	vldr	s5, [r4, #-12]
 800fee8:	ed14 2a04 	vldr	s4, [r4, #-16]
 800feec:	ed54 1a01 	vldr	s3, [r4, #-4]
 800fef0:	ed14 1a02 	vldr	s2, [r4, #-8]
 800fef4:	edd4 0a01 	vldr	s1, [r4, #4]
 800fef8:	ed94 0a00 	vldr	s0, [r4]
 800fefc:	f7ff fc15 	bl	800f72a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800ff00:	e7da      	b.n	800feb8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800ff02:	9b04      	ldr	r3, [sp, #16]
 800ff04:	b113      	cbz	r3, 800ff0c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800ff06:	4630      	mov	r0, r6
 800ff08:	f7ff ff69 	bl	800fdde <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800ff0c:	b009      	add	sp, #36	@ 0x24
 800ff0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff12:	bf00      	nop

0800ff14 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800ff14:	eef0 7a60 	vmov.f32	s15, s1
 800ff18:	6803      	ldr	r3, [r0, #0]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ff20:	ee17 2a90 	vmov	r2, s15
 800ff24:	eef0 7a40 	vmov.f32	s15, s0
 800ff28:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ff2c:	ee17 1a90 	vmov	r1, s15
 800ff30:	4718      	bx	r3
	...

0800ff34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800ff34:	4b04      	ldr	r3, [pc, #16]	@ (800ff48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800ff36:	b510      	push	{r4, lr}
 800ff38:	4604      	mov	r4, r0
 800ff3a:	f840 3b14 	str.w	r3, [r0], #20
 800ff3e:	f002 f845 	bl	8011fcc <_ZN8touchgfx7OutlineD1Ev>
 800ff42:	4620      	mov	r0, r4
 800ff44:	bd10      	pop	{r4, pc}
 800ff46:	bf00      	nop
 800ff48:	08025da8 	.word	0x08025da8

0800ff4c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff50:	ed2d 8b04 	vpush	{d8-d9}
 800ff54:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800ff58:	b0b5      	sub	sp, #212	@ 0xd4
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	468b      	mov	fp, r1
 800ff5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff62:	9206      	str	r2, [sp, #24]
 800ff64:	461e      	mov	r6, r3
 800ff66:	2400      	movs	r4, #0
 800ff68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6c:	f240 814f 	bls.w	801020e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800ff70:	23ff      	movs	r3, #255	@ 0xff
 800ff72:	1d02      	adds	r2, r0, #4
 800ff74:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8010214 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800ff78:	f04f 0800 	mov.w	r8, #0
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	af08      	add	r7, sp, #32
 800ff80:	6981      	ldr	r1, [r0, #24]
 800ff82:	a808      	add	r0, sp, #32
 800ff84:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ff86:	eef0 9a49 	vmov.f32	s19, s18
 800ff8a:	f011 fd8f 	bl	8021aac <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800ff8e:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800ff92:	4ba1      	ldr	r3, [pc, #644]	@ (8010218 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800ff94:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ff98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	9308      	str	r3, [sp, #32]
 800ffa0:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800ffa4:	edd5 6a08 	vldr	s13, [r5, #32]
 800ffa8:	eeb0 8a49 	vmov.f32	s16, s18
 800ffac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb0:	9325      	str	r3, [sp, #148]	@ 0x94
 800ffb2:	f04f 0300 	mov.w	r3, #0
 800ffb6:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800ffba:	7f6a      	ldrb	r2, [r5, #29]
 800ffbc:	eef0 8a49 	vmov.f32	s17, s18
 800ffc0:	bf48      	it	mi
 800ffc2:	eef1 7a67 	vnegmi.f32	s15, s15
 800ffc6:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800ffca:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800ffce:	46c1      	mov	r9, r8
 800ffd0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ffd4:	f04f 0a01 	mov.w	sl, #1
 800ffd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffdc:	7fab      	ldrb	r3, [r5, #30]
 800ffde:	942a      	str	r4, [sp, #168]	@ 0xa8
 800ffe0:	435a      	muls	r2, r3
 800ffe2:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800ffe6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800ffea:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800ffee:	1c53      	adds	r3, r2, #1
 800fff0:	942b      	str	r4, [sp, #172]	@ 0xac
 800fff2:	942c      	str	r4, [sp, #176]	@ 0xb0
 800fff4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fff8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800fffc:	942d      	str	r4, [sp, #180]	@ 0xb4
 800fffe:	942e      	str	r4, [sp, #184]	@ 0xb8
 8010000:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010008:	942f      	str	r4, [sp, #188]	@ 0xbc
 801000a:	9430      	str	r4, [sp, #192]	@ 0xc0
 801000c:	9431      	str	r4, [sp, #196]	@ 0xc4
 801000e:	9432      	str	r4, [sp, #200]	@ 0xc8
 8010010:	9433      	str	r4, [sp, #204]	@ 0xcc
 8010012:	4644      	mov	r4, r8
 8010014:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010018:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 801001c:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8010020:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8010024:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8010028:	9b06      	ldr	r3, [sp, #24]
 801002a:	454b      	cmp	r3, r9
 801002c:	f000 80cc 	beq.w	80101c8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8010030:	f109 0301 	add.w	r3, r9, #1
 8010034:	9305      	str	r3, [sp, #20]
 8010036:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801003a:	2b06      	cmp	r3, #6
 801003c:	d839      	bhi.n	80100b2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801003e:	e8df f003 	tbb	[pc, r3]
 8010042:	3b04      	.short	0x3b04
 8010044:	817c6f60 	.word	0x817c6f60
 8010048:	a0          	.byte	0xa0
 8010049:	00          	.byte	0x00
 801004a:	45c1      	cmp	r9, r8
 801004c:	d92b      	bls.n	80100a6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801004e:	eef0 0a49 	vmov.f32	s1, s18
 8010052:	4638      	mov	r0, r7
 8010054:	eeb0 0a69 	vmov.f32	s0, s19
 8010058:	f7ff fdde 	bl	800fc18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801005c:	4638      	mov	r0, r7
 801005e:	f7ff fe67 	bl	800fd30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010062:	4681      	mov	r9, r0
 8010064:	b9f8      	cbnz	r0, 80100a6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8010066:	eef0 0a49 	vmov.f32	s1, s18
 801006a:	4638      	mov	r0, r7
 801006c:	eeb0 0a69 	vmov.f32	s0, s19
 8010070:	f7ff fe8d 	bl	800fd8e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8010074:	4628      	mov	r0, r5
 8010076:	4623      	mov	r3, r4
 8010078:	9a05      	ldr	r2, [sp, #20]
 801007a:	4641      	mov	r1, r8
 801007c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8010080:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8010084:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010088:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801008c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8010090:	e9cd b600 	strd	fp, r6, [sp]
 8010094:	f7ff feae 	bl	800fdf4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010098:	eef0 0a49 	vmov.f32	s1, s18
 801009c:	eeb0 0a69 	vmov.f32	s0, s19
 80100a0:	4638      	mov	r0, r7
 80100a2:	f7ff fe74 	bl	800fd8e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80100a6:	eeb0 8a49 	vmov.f32	s16, s18
 80100aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80100ae:	eef0 8a69 	vmov.f32	s17, s19
 80100b2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80100b6:	e7b7      	b.n	8010028 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80100b8:	45c1      	cmp	r9, r8
 80100ba:	d90d      	bls.n	80100d8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80100bc:	4638      	mov	r0, r7
 80100be:	f7ff fe37 	bl	800fd30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80100c2:	b948      	cbnz	r0, 80100d8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80100c4:	4623      	mov	r3, r4
 80100c6:	464a      	mov	r2, r9
 80100c8:	4641      	mov	r1, r8
 80100ca:	4628      	mov	r0, r5
 80100cc:	e9cd a702 	strd	sl, r7, [sp, #8]
 80100d0:	e9cd b600 	strd	fp, r6, [sp]
 80100d4:	f7ff fe8e 	bl	800fdf4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80100d8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80100dc:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80100e0:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80100e4:	3402      	adds	r4, #2
 80100e6:	edd3 8a00 	vldr	s17, [r3]
 80100ea:	46c8      	mov	r8, r9
 80100ec:	ed93 8a01 	vldr	s16, [r3, #4]
 80100f0:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80100f4:	eef0 9a68 	vmov.f32	s19, s17
 80100f8:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80100fc:	eeb0 9a48 	vmov.f32	s18, s16
 8010100:	e7d7      	b.n	80100b2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010102:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010106:	4638      	mov	r0, r7
 8010108:	3402      	adds	r4, #2
 801010a:	edd3 8a00 	vldr	s17, [r3]
 801010e:	ed93 8a01 	vldr	s16, [r3, #4]
 8010112:	eeb0 0a68 	vmov.f32	s0, s17
 8010116:	eef0 0a48 	vmov.f32	s1, s16
 801011a:	f7ff fd7d 	bl	800fc18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801011e:	e7c8      	b.n	80100b2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010120:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010124:	edd3 8a00 	vldr	s17, [r3]
 8010128:	eef0 0a48 	vmov.f32	s1, s16
 801012c:	4638      	mov	r0, r7
 801012e:	eeb0 0a68 	vmov.f32	s0, s17
 8010132:	3401      	adds	r4, #1
 8010134:	f7ff fd70 	bl	800fc18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010138:	e7bb      	b.n	80100b2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801013a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801013e:	ed93 8a00 	vldr	s16, [r3]
 8010142:	e7f1      	b.n	8010128 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8010144:	00a3      	lsls	r3, r4, #2
 8010146:	eef0 0a48 	vmov.f32	s1, s16
 801014a:	eeb0 0a68 	vmov.f32	s0, s17
 801014e:	4638      	mov	r0, r7
 8010150:	f103 0208 	add.w	r2, r3, #8
 8010154:	f103 090c 	add.w	r9, r3, #12
 8010158:	4433      	add	r3, r6
 801015a:	3404      	adds	r4, #4
 801015c:	4432      	add	r2, r6
 801015e:	44b1      	add	r9, r6
 8010160:	edd3 1a01 	vldr	s3, [r3, #4]
 8010164:	ed92 2a00 	vldr	s4, [r2]
 8010168:	edd9 2a00 	vldr	s5, [r9]
 801016c:	ed93 1a00 	vldr	s2, [r3]
 8010170:	9207      	str	r2, [sp, #28]
 8010172:	f7ff fabb 	bl	800f6ec <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010176:	9a07      	ldr	r2, [sp, #28]
 8010178:	ed99 8a00 	vldr	s16, [r9]
 801017c:	edd2 8a00 	vldr	s17, [r2]
 8010180:	e797      	b.n	80100b2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010182:	00a3      	lsls	r3, r4, #2
 8010184:	eef0 0a48 	vmov.f32	s1, s16
 8010188:	eeb0 0a68 	vmov.f32	s0, s17
 801018c:	4638      	mov	r0, r7
 801018e:	f103 0210 	add.w	r2, r3, #16
 8010192:	f103 0914 	add.w	r9, r3, #20
 8010196:	4433      	add	r3, r6
 8010198:	3406      	adds	r4, #6
 801019a:	4432      	add	r2, r6
 801019c:	44b1      	add	r9, r6
 801019e:	edd3 2a03 	vldr	s5, [r3, #12]
 80101a2:	ed92 3a00 	vldr	s6, [r2]
 80101a6:	edd9 3a00 	vldr	s7, [r9]
 80101aa:	ed93 2a02 	vldr	s4, [r3, #8]
 80101ae:	edd3 1a01 	vldr	s3, [r3, #4]
 80101b2:	ed93 1a00 	vldr	s2, [r3]
 80101b6:	9207      	str	r2, [sp, #28]
 80101b8:	f7ff fab7 	bl	800f72a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80101bc:	9a07      	ldr	r2, [sp, #28]
 80101be:	ed99 8a00 	vldr	s16, [r9]
 80101c2:	edd2 8a00 	vldr	s17, [r2]
 80101c6:	e774      	b.n	80100b2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80101c8:	9b06      	ldr	r3, [sp, #24]
 80101ca:	af08      	add	r7, sp, #32
 80101cc:	4543      	cmp	r3, r8
 80101ce:	d90f      	bls.n	80101f0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80101d0:	4638      	mov	r0, r7
 80101d2:	f7ff fdad 	bl	800fd30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80101d6:	b958      	cbnz	r0, 80101f0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80101d8:	2301      	movs	r3, #1
 80101da:	9703      	str	r7, [sp, #12]
 80101dc:	f8cd b000 	str.w	fp, [sp]
 80101e0:	4641      	mov	r1, r8
 80101e2:	9a06      	ldr	r2, [sp, #24]
 80101e4:	4628      	mov	r0, r5
 80101e6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80101ea:	4623      	mov	r3, r4
 80101ec:	f7ff fe02 	bl	800fdf4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80101f0:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80101f4:	4638      	mov	r0, r7
 80101f6:	f011 fced 	bl	8021bd4 <_ZN8touchgfx6Canvas6renderEh>
 80101fa:	4604      	mov	r4, r0
 80101fc:	4638      	mov	r0, r7
 80101fe:	f7ff fe99 	bl	800ff34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010202:	4620      	mov	r0, r4
 8010204:	b035      	add	sp, #212	@ 0xd4
 8010206:	ecbd 8b04 	vpop	{d8-d9}
 801020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801020e:	2401      	movs	r4, #1
 8010210:	e7f7      	b.n	8010202 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8010212:	bf00      	nop
 8010214:	00000000 	.word	0x00000000
 8010218:	08025404 	.word	0x08025404

0801021c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 801021c:	b510      	push	{r4, lr}
 801021e:	4604      	mov	r4, r0
 8010220:	f7ff fe88 	bl	800ff34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010224:	21b0      	movs	r1, #176	@ 0xb0
 8010226:	4620      	mov	r0, r4
 8010228:	f012 f8c0 	bl	80223ac <_ZdlPvj>
 801022c:	4620      	mov	r0, r4
 801022e:	bd10      	pop	{r4, pc}

08010230 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8010230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010234:	4698      	mov	r8, r3
 8010236:	23ff      	movs	r3, #255	@ 0xff
 8010238:	4607      	mov	r7, r0
 801023a:	4689      	mov	r9, r1
 801023c:	4692      	mov	sl, r2
 801023e:	1d02      	adds	r2, r0, #4
 8010240:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8010244:	2400      	movs	r4, #0
 8010246:	44ca      	add	sl, r9
 8010248:	ed2d 8b06 	vpush	{d8-d10}
 801024c:	b0aa      	sub	sp, #168	@ 0xa8
 801024e:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8010454 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	eef0 8a48 	vmov.f32	s17, s16
 8010258:	6981      	ldr	r1, [r0, #24]
 801025a:	a80d      	add	r0, sp, #52	@ 0x34
 801025c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801025e:	f011 fc25 	bl	8021aac <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8010262:	7f3b      	ldrb	r3, [r7, #28]
 8010264:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8010454 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010268:	4628      	mov	r0, r5
 801026a:	1e5a      	subs	r2, r3, #1
 801026c:	eeb0 0a60 	vmov.f32	s0, s1
 8010270:	4253      	negs	r3, r2
 8010272:	4153      	adcs	r3, r2
 8010274:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8010278:	f005 fe11 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801027c:	eeb0 9a40 	vmov.f32	s18, s0
 8010280:	eef0 9a60 	vmov.f32	s19, s1
 8010284:	45ca      	cmp	sl, r9
 8010286:	f000 80cd 	beq.w	8010424 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 801028a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801028e:	2b06      	cmp	r3, #6
 8010290:	d8f8      	bhi.n	8010284 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010292:	e8df f003 	tbb	[pc, r3]
 8010296:	0804      	.short	0x0804
 8010298:	58533f2a 	.word	0x58533f2a
 801029c:	8a          	.byte	0x8a
 801029d:	00          	.byte	0x00
 801029e:	a80d      	add	r0, sp, #52	@ 0x34
 80102a0:	f011 fc76 	bl	8021b90 <_ZN8touchgfx6Canvas5closeEv>
 80102a4:	e7ee      	b.n	8010284 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80102a6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80102aa:	4628      	mov	r0, r5
 80102ac:	ed93 8a01 	vldr	s16, [r3, #4]
 80102b0:	edd3 8a00 	vldr	s17, [r3]
 80102b4:	eef0 0a48 	vmov.f32	s1, s16
 80102b8:	eeb0 0a68 	vmov.f32	s0, s17
 80102bc:	f005 fdef 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80102c0:	a80d      	add	r0, sp, #52	@ 0x34
 80102c2:	eef0 7a60 	vmov.f32	s15, s1
 80102c6:	eeb0 9a40 	vmov.f32	s18, s0
 80102ca:	eef0 9a60 	vmov.f32	s19, s1
 80102ce:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80102d2:	ee17 2a90 	vmov	r2, s15
 80102d6:	eef0 7a40 	vmov.f32	s15, s0
 80102da:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80102de:	ee17 1a90 	vmov	r1, s15
 80102e2:	f011 fd2f 	bl	8021d44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80102e6:	3402      	adds	r4, #2
 80102e8:	e7cc      	b.n	8010284 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80102ea:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80102ee:	4628      	mov	r0, r5
 80102f0:	edd3 8a00 	vldr	s17, [r3]
 80102f4:	ed93 8a01 	vldr	s16, [r3, #4]
 80102f8:	eeb0 0a68 	vmov.f32	s0, s17
 80102fc:	eef0 0a48 	vmov.f32	s1, s16
 8010300:	f005 fdcd 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010304:	a80d      	add	r0, sp, #52	@ 0x34
 8010306:	eeb0 9a40 	vmov.f32	s18, s0
 801030a:	eef0 9a60 	vmov.f32	s19, s1
 801030e:	f7ff fe01 	bl	800ff14 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010312:	e7e8      	b.n	80102e6 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8010314:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010318:	edd3 8a00 	vldr	s17, [r3]
 801031c:	eef0 0a48 	vmov.f32	s1, s16
 8010320:	4628      	mov	r0, r5
 8010322:	eeb0 0a68 	vmov.f32	s0, s17
 8010326:	3401      	adds	r4, #1
 8010328:	f005 fdb9 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801032c:	a80d      	add	r0, sp, #52	@ 0x34
 801032e:	eef0 9a60 	vmov.f32	s19, s1
 8010332:	eeb0 9a40 	vmov.f32	s18, s0
 8010336:	f7ff fded 	bl	800ff14 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801033a:	e7a3      	b.n	8010284 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801033c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010340:	ed93 8a00 	vldr	s16, [r3]
 8010344:	e7ea      	b.n	801031c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8010346:	1ca3      	adds	r3, r4, #2
 8010348:	4628      	mov	r0, r5
 801034a:	3404      	adds	r4, #4
 801034c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010350:	ed53 0a01 	vldr	s1, [r3, #-4]
 8010354:	ed13 0a02 	vldr	s0, [r3, #-8]
 8010358:	edd3 8a00 	vldr	s17, [r3]
 801035c:	ed93 8a01 	vldr	s16, [r3, #4]
 8010360:	f005 fd9d 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010364:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010368:	eeb0 0a68 	vmov.f32	s0, s17
 801036c:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010370:	eef0 0a48 	vmov.f32	s1, s16
 8010374:	4628      	mov	r0, r5
 8010376:	f005 fd92 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801037a:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801037e:	eef0 2a60 	vmov.f32	s5, s1
 8010382:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8010386:	eeb0 2a40 	vmov.f32	s4, s0
 801038a:	a80d      	add	r0, sp, #52	@ 0x34
 801038c:	eeb0 aa40 	vmov.f32	s20, s0
 8010390:	eef0 aa60 	vmov.f32	s21, s1
 8010394:	eeb0 0a49 	vmov.f32	s0, s18
 8010398:	eef0 0a69 	vmov.f32	s1, s19
 801039c:	f7ff f9a6 	bl	800f6ec <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80103a0:	eef0 9a6a 	vmov.f32	s19, s21
 80103a4:	eeb0 9a4a 	vmov.f32	s18, s20
 80103a8:	e76c      	b.n	8010284 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80103aa:	1d26      	adds	r6, r4, #4
 80103ac:	4628      	mov	r0, r5
 80103ae:	3406      	adds	r4, #6
 80103b0:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80103b4:	ed56 0a03 	vldr	s1, [r6, #-12]
 80103b8:	ed16 0a04 	vldr	s0, [r6, #-16]
 80103bc:	edd6 8a00 	vldr	s17, [r6]
 80103c0:	ed96 8a01 	vldr	s16, [r6, #4]
 80103c4:	f005 fd6b 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80103c8:	ed8d 0a07 	vstr	s0, [sp, #28]
 80103cc:	4628      	mov	r0, r5
 80103ce:	ed16 0a02 	vldr	s0, [r6, #-8]
 80103d2:	edcd 0a08 	vstr	s1, [sp, #32]
 80103d6:	ed56 0a01 	vldr	s1, [r6, #-4]
 80103da:	f005 fd60 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80103de:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80103e2:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80103e6:	eeb0 0a68 	vmov.f32	s0, s17
 80103ea:	eef0 0a48 	vmov.f32	s1, s16
 80103ee:	4628      	mov	r0, r5
 80103f0:	f005 fd55 	bl	8015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80103f4:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80103f8:	eeb0 3a40 	vmov.f32	s6, s0
 80103fc:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8010400:	eef0 3a60 	vmov.f32	s7, s1
 8010404:	eddd 1a08 	vldr	s3, [sp, #32]
 8010408:	eeb0 aa40 	vmov.f32	s20, s0
 801040c:	ed9d 1a07 	vldr	s2, [sp, #28]
 8010410:	eef0 aa60 	vmov.f32	s21, s1
 8010414:	a80d      	add	r0, sp, #52	@ 0x34
 8010416:	eef0 0a69 	vmov.f32	s1, s19
 801041a:	eeb0 0a49 	vmov.f32	s0, s18
 801041e:	f7ff f984 	bl	800f72a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010422:	e7bd      	b.n	80103a0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8010424:	7f7b      	ldrb	r3, [r7, #29]
 8010426:	a80d      	add	r0, sp, #52	@ 0x34
 8010428:	7fb9      	ldrb	r1, [r7, #30]
 801042a:	4359      	muls	r1, r3
 801042c:	1c4b      	adds	r3, r1, #1
 801042e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8010432:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010436:	f011 fbcd 	bl	8021bd4 <_ZN8touchgfx6Canvas6renderEh>
 801043a:	4b07      	ldr	r3, [pc, #28]	@ (8010458 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 801043c:	4604      	mov	r4, r0
 801043e:	a812      	add	r0, sp, #72	@ 0x48
 8010440:	930d      	str	r3, [sp, #52]	@ 0x34
 8010442:	f001 fdc3 	bl	8011fcc <_ZN8touchgfx7OutlineD1Ev>
 8010446:	4620      	mov	r0, r4
 8010448:	b02a      	add	sp, #168	@ 0xa8
 801044a:	ecbd 8b06 	vpop	{d8-d10}
 801044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010452:	bf00      	nop
 8010454:	00000000 	.word	0x00000000
 8010458:	08025da8 	.word	0x08025da8

0801045c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 801045c:	b410      	push	{r4}
 801045e:	7f04      	ldrb	r4, [r0, #28]
 8010460:	b11c      	cbz	r4, 801046a <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8010462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010466:	f7ff bee3 	b.w	8010230 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801046a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801046e:	f7ff bd6d 	b.w	800ff4c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08010472 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8010472:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010476:	4691      	mov	r9, r2
 8010478:	4602      	mov	r2, r0
 801047a:	4606      	mov	r6, r0
 801047c:	4688      	mov	r8, r1
 801047e:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8010482:	469a      	mov	sl, r3
 8010484:	ab02      	add	r3, sp, #8
 8010486:	af02      	add	r7, sp, #8
 8010488:	6851      	ldr	r1, [r2, #4]
 801048a:	c303      	stmia	r3!, {r0, r1}
 801048c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	dd2f      	ble.n	80104f4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8010494:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8010498:	2c00      	cmp	r4, #0
 801049a:	dd2b      	ble.n	80104f4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801049c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80104a0:	441c      	add	r4, r3
 80104a2:	b2a4      	uxth	r4, r4
 80104a4:	b225      	sxth	r5, r4
 80104a6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80104aa:	42ab      	cmp	r3, r5
 80104ac:	da22      	bge.n	80104f4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80104ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104b0:	464a      	mov	r2, r9
 80104b2:	9701      	str	r7, [sp, #4]
 80104b4:	4641      	mov	r1, r8
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	4630      	mov	r0, r6
 80104ba:	4653      	mov	r3, sl
 80104bc:	f7ff ffce 	bl	801045c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80104c0:	b940      	cbnz	r0, 80104d4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80104c2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d004      	beq.n	80104d4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80104ca:	3301      	adds	r3, #1
 80104cc:	105b      	asrs	r3, r3, #1
 80104ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80104d2:	e7ec      	b.n	80104ae <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80104d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80104d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80104dc:	4413      	add	r3, r2
 80104de:	b29b      	uxth	r3, r3
 80104e0:	441a      	add	r2, r3
 80104e2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80104e6:	b212      	sxth	r2, r2
 80104e8:	4295      	cmp	r5, r2
 80104ea:	dadc      	bge.n	80104a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80104ec:	1ae3      	subs	r3, r4, r3
 80104ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80104f2:	e7d8      	b.n	80104a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80104f4:	b004      	add	sp, #16
 80104f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080104fa <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80104fa:	0c0b      	lsrs	r3, r1, #16
 80104fc:	60c1      	str	r1, [r0, #12]
 80104fe:	7481      	strb	r1, [r0, #18]
 8010500:	7403      	strb	r3, [r0, #16]
 8010502:	0a0b      	lsrs	r3, r1, #8
 8010504:	7443      	strb	r3, [r0, #17]
 8010506:	4770      	bx	lr

08010508 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010508:	f1a0 0008 	sub.w	r0, r0, #8
 801050c:	e7f5      	b.n	80104fa <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08010510 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8010510:	b508      	push	{r3, lr}
 8010512:	4b05      	ldr	r3, [pc, #20]	@ (8010528 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8010514:	6818      	ldr	r0, [r3, #0]
 8010516:	6803      	ldr	r3, [r0, #0]
 8010518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801051c:	4798      	blx	r3
 801051e:	1e43      	subs	r3, r0, #1
 8010520:	4258      	negs	r0, r3
 8010522:	4158      	adcs	r0, r3
 8010524:	bd08      	pop	{r3, pc}
 8010526:	bf00      	nop
 8010528:	2402daac 	.word	0x2402daac

0801052c <_ZN8touchgfx13PainterRGB888D1Ev>:
 801052c:	4770      	bx	lr

0801052e <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 801052e:	3808      	subs	r0, #8
 8010530:	4770      	bx	lr

08010532 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8010532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010536:	b410      	push	{r4}
 8010538:	188c      	adds	r4, r1, r2
 801053a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801053e:	68c2      	ldr	r2, [r0, #12]
 8010540:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010544:	4620      	mov	r0, r4
 8010546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801054a:	f7f2 b8e3 	b.w	8002714 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801054e <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801054e:	f7f2 b8d7 	b.w	8002700 <_ZN8touchgfx5paint8tearDownEv>

08010552 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8010552:	b510      	push	{r4, lr}
 8010554:	4604      	mov	r4, r0
 8010556:	2114      	movs	r1, #20
 8010558:	f011 ff28 	bl	80223ac <_ZdlPvj>
 801055c:	4620      	mov	r0, r4
 801055e:	bd10      	pop	{r4, pc}

08010560 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8010560:	f1a0 0008 	sub.w	r0, r0, #8
 8010564:	e7f5      	b.n	8010552 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08010568 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8010568:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010570:	4411      	add	r1, r2
 8010572:	7c42      	ldrb	r2, [r0, #17]
 8010574:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8010578:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801057c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8010580:	2a00      	cmp	r2, #0
 8010582:	f000 8084 	beq.w	801068e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8010586:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801058a:	ed90 7a08 	vldr	s14, [r0, #32]
 801058e:	42a2      	cmp	r2, r4
 8010590:	68c3      	ldr	r3, [r0, #12]
 8010592:	db20      	blt.n	80105d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8010594:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010598:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a0:	bfc8      	it	gt
 80105a2:	2200      	movgt	r2, #0
 80105a4:	589a      	ldr	r2, [r3, r2]
 80105a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80105aa:	7c03      	ldrb	r3, [r0, #16]
 80105ac:	fa5f fc82 	uxtb.w	ip, r2
 80105b0:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80105b4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80105b8:	440e      	add	r6, r1
 80105ba:	b36b      	cbz	r3, 8010618 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80105bc:	2dff      	cmp	r5, #255	@ 0xff
 80105be:	d12b      	bne.n	8010618 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80105c0:	42b1      	cmp	r1, r6
 80105c2:	f080 8204 	bcs.w	80109ce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80105c6:	f881 c000 	strb.w	ip, [r1]
 80105ca:	3103      	adds	r1, #3
 80105cc:	f801 7c02 	strb.w	r7, [r1, #-2]
 80105d0:	f801 4c01 	strb.w	r4, [r1, #-1]
 80105d4:	e7f4      	b.n	80105c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80105d6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80105da:	42a7      	cmp	r7, r4
 80105dc:	dc08      	bgt.n	80105f0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80105de:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80105e2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80105e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ea:	bfd8      	it	le
 80105ec:	2200      	movle	r2, #0
 80105ee:	e7d9      	b.n	80105a4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80105f0:	1aa2      	subs	r2, r4, r2
 80105f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80105f6:	ee07 2a90 	vmov	s15, r2
 80105fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801060a:	ee17 2a90 	vmov	r2, s15
 801060e:	bfd8      	it	le
 8010610:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8010614:	0092      	lsls	r2, r2, #2
 8010616:	e7c5      	b.n	80105a4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8010618:	0e12      	lsrs	r2, r2, #24
 801061a:	4355      	muls	r5, r2
 801061c:	1c6a      	adds	r2, r5, #1
 801061e:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8010622:	122d      	asrs	r5, r5, #8
 8010624:	43e8      	mvns	r0, r5
 8010626:	b2ad      	uxth	r5, r5
 8010628:	fb1c fc05 	smulbb	ip, ip, r5
 801062c:	b2c0      	uxtb	r0, r0
 801062e:	fb17 f705 	smulbb	r7, r7, r5
 8010632:	fb14 f505 	smulbb	r5, r4, r5
 8010636:	fa1f fc8c 	uxth.w	ip, ip
 801063a:	b2bf      	uxth	r7, r7
 801063c:	b2ad      	uxth	r5, r5
 801063e:	428e      	cmp	r6, r1
 8010640:	f101 0303 	add.w	r3, r1, #3
 8010644:	f240 81c3 	bls.w	80109ce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010648:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801064c:	fb02 c200 	mla	r2, r2, r0, ip
 8010650:	b292      	uxth	r2, r2
 8010652:	1c51      	adds	r1, r2, #1
 8010654:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010658:	1212      	asrs	r2, r2, #8
 801065a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801065e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8010662:	fb02 7200 	mla	r2, r2, r0, r7
 8010666:	b292      	uxth	r2, r2
 8010668:	1c51      	adds	r1, r2, #1
 801066a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801066e:	1212      	asrs	r2, r2, #8
 8010670:	f803 2c02 	strb.w	r2, [r3, #-2]
 8010674:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8010678:	fb02 5200 	mla	r2, r2, r0, r5
 801067c:	b292      	uxth	r2, r2
 801067e:	1c51      	adds	r1, r2, #1
 8010680:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010684:	4619      	mov	r1, r3
 8010686:	1212      	asrs	r2, r2, #8
 8010688:	f803 2c01 	strb.w	r2, [r3, #-1]
 801068c:	e7d7      	b.n	801063e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801068e:	7c82      	ldrb	r2, [r0, #18]
 8010690:	2a00      	cmp	r2, #0
 8010692:	d047      	beq.n	8010724 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8010694:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010698:	ee07 2a10 	vmov	s14, r2
 801069c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106a0:	ee07 3a90 	vmov	s15, r3
 80106a4:	461a      	mov	r2, r3
 80106a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80106aa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80106ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b2:	f200 808e 	bhi.w	80107d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 80106b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80106ba:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80106be:	68c7      	ldr	r7, [r0, #12]
 80106c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106c8:	ee06 6a90 	vmov	s13, r6
 80106cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80106d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d8:	bf4a      	itet	mi
 80106da:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80106de:	4634      	movpl	r4, r6
 80106e0:	ee17 4a90 	vmovmi	r4, s15
 80106e4:	edd0 7a08 	vldr	s15, [r0, #32]
 80106e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80106ec:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80106f0:	448e      	add	lr, r1
 80106f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f6:	bfc8      	it	gt
 80106f8:	2200      	movgt	r2, #0
 80106fa:	58bf      	ldr	r7, [r7, r2]
 80106fc:	7c02      	ldrb	r2, [r0, #16]
 80106fe:	fa5f f987 	uxtb.w	r9, r7
 8010702:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8010706:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 801070a:	b31a      	cbz	r2, 8010754 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801070c:	2dff      	cmp	r5, #255	@ 0xff
 801070e:	d121      	bne.n	8010754 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8010710:	4571      	cmp	r1, lr
 8010712:	d25d      	bcs.n	80107d0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8010714:	f881 9000 	strb.w	r9, [r1]
 8010718:	3103      	adds	r1, #3
 801071a:	f801 8c02 	strb.w	r8, [r1, #-2]
 801071e:	f801 cc01 	strb.w	ip, [r1, #-1]
 8010722:	e7f5      	b.n	8010710 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8010724:	ee07 4a90 	vmov	s15, r4
 8010728:	ed90 7a06 	vldr	s14, [r0, #24]
 801072c:	edd0 6a05 	vldr	s13, [r0, #20]
 8010730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010738:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801073c:	edd0 7a08 	vldr	s15, [r0, #32]
 8010740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010748:	bf44      	itt	mi
 801074a:	edd0 7a07 	vldrmi	s15, [r0, #28]
 801074e:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8010752:	e7a5      	b.n	80106a0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8010754:	0e3f      	lsrs	r7, r7, #24
 8010756:	436f      	muls	r7, r5
 8010758:	1c7a      	adds	r2, r7, #1
 801075a:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801075e:	1212      	asrs	r2, r2, #8
 8010760:	ea6f 0a02 	mvn.w	sl, r2
 8010764:	b292      	uxth	r2, r2
 8010766:	fb19 f902 	smulbb	r9, r9, r2
 801076a:	fa5f fa8a 	uxtb.w	sl, sl
 801076e:	fb18 f802 	smulbb	r8, r8, r2
 8010772:	fb1c fc02 	smulbb	ip, ip, r2
 8010776:	fa1f f989 	uxth.w	r9, r9
 801077a:	fa1f f888 	uxth.w	r8, r8
 801077e:	fa1f fc8c 	uxth.w	ip, ip
 8010782:	458e      	cmp	lr, r1
 8010784:	f101 0203 	add.w	r2, r1, #3
 8010788:	d922      	bls.n	80107d0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801078a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801078e:	fb01 910a 	mla	r1, r1, sl, r9
 8010792:	b289      	uxth	r1, r1
 8010794:	1c4f      	adds	r7, r1, #1
 8010796:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801079a:	1209      	asrs	r1, r1, #8
 801079c:	f802 1c03 	strb.w	r1, [r2, #-3]
 80107a0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80107a4:	fb01 810a 	mla	r1, r1, sl, r8
 80107a8:	b289      	uxth	r1, r1
 80107aa:	1c4f      	adds	r7, r1, #1
 80107ac:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80107b0:	1209      	asrs	r1, r1, #8
 80107b2:	f802 1c02 	strb.w	r1, [r2, #-2]
 80107b6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80107ba:	fb01 c10a 	mla	r1, r1, sl, ip
 80107be:	b289      	uxth	r1, r1
 80107c0:	1c4f      	adds	r7, r1, #1
 80107c2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80107c6:	1209      	asrs	r1, r1, #8
 80107c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80107cc:	4611      	mov	r1, r2
 80107ce:	e7d8      	b.n	8010782 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80107d0:	191a      	adds	r2, r3, r4
 80107d2:	4433      	add	r3, r6
 80107d4:	b21b      	sxth	r3, r3
 80107d6:	4293      	cmp	r3, r2
 80107d8:	f340 80f9 	ble.w	80109ce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80107dc:	edd0 7a07 	vldr	s15, [r0, #28]
 80107e0:	ee06 2a90 	vmov	s13, r2
 80107e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80107ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f4:	f340 80b0 	ble.w	8010958 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80107f8:	ee06 3a10 	vmov	s12, r3
 80107fc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010800:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80109d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8010804:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010808:	eef4 7ac6 	vcmpe.f32	s15, s12
 801080c:	ed90 6a08 	vldr	s12, [r0, #32]
 8010810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010814:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8010818:	bfd6      	itet	le
 801081a:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801081e:	469c      	movgt	ip, r3
 8010820:	ee17 ca90 	vmovle	ip, s15
 8010824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010828:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80109d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 801082c:	ebac 0202 	sub.w	r2, ip, r2
 8010830:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8010834:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010838:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801083c:	188c      	adds	r4, r1, r2
 801083e:	7c02      	ldrb	r2, [r0, #16]
 8010840:	b1d2      	cbz	r2, 8010878 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8010842:	2dff      	cmp	r5, #255	@ 0xff
 8010844:	d118      	bne.n	8010878 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8010846:	42a1      	cmp	r1, r4
 8010848:	d261      	bcs.n	801090e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801084a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801084e:	68c6      	ldr	r6, [r0, #12]
 8010850:	3103      	adds	r1, #3
 8010852:	ee17 7a10 	vmov	r7, s14
 8010856:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801085a:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801085e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8010862:	7856      	ldrb	r6, [r2, #1]
 8010864:	f801 6c02 	strb.w	r6, [r1, #-2]
 8010868:	7892      	ldrb	r2, [r2, #2]
 801086a:	f801 2c01 	strb.w	r2, [r1, #-1]
 801086e:	ed90 7a08 	vldr	s14, [r0, #32]
 8010872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010876:	e7e6      	b.n	8010846 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8010878:	68c2      	ldr	r2, [r0, #12]
 801087a:	428c      	cmp	r4, r1
 801087c:	f101 0e03 	add.w	lr, r1, #3
 8010880:	d945      	bls.n	801090e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8010882:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010886:	ee17 9a10 	vmov	r9, s14
 801088a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801088e:	f898 7003 	ldrb.w	r7, [r8, #3]
 8010892:	fb07 f605 	mul.w	r6, r7, r5
 8010896:	1c77      	adds	r7, r6, #1
 8010898:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801089c:	123f      	asrs	r7, r7, #8
 801089e:	b2b9      	uxth	r1, r7
 80108a0:	43ff      	mvns	r7, r7
 80108a2:	b2fe      	uxtb	r6, r7
 80108a4:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 80108a8:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 80108ac:	fb19 f906 	smulbb	r9, r9, r6
 80108b0:	fb07 9701 	mla	r7, r7, r1, r9
 80108b4:	b2bf      	uxth	r7, r7
 80108b6:	f107 0901 	add.w	r9, r7, #1
 80108ba:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80108be:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80108c2:	fb19 f906 	smulbb	r9, r9, r6
 80108c6:	123f      	asrs	r7, r7, #8
 80108c8:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80108cc:	f898 7001 	ldrb.w	r7, [r8, #1]
 80108d0:	fb07 9701 	mla	r7, r7, r1, r9
 80108d4:	b2bf      	uxth	r7, r7
 80108d6:	f107 0901 	add.w	r9, r7, #1
 80108da:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80108de:	123f      	asrs	r7, r7, #8
 80108e0:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80108e4:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80108e8:	f898 8002 	ldrb.w	r8, [r8, #2]
 80108ec:	fb17 f606 	smulbb	r6, r7, r6
 80108f0:	fb08 6601 	mla	r6, r8, r1, r6
 80108f4:	b2b6      	uxth	r6, r6
 80108f6:	1c71      	adds	r1, r6, #1
 80108f8:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80108fc:	4671      	mov	r1, lr
 80108fe:	1236      	asrs	r6, r6, #8
 8010900:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8010904:	ed90 7a08 	vldr	s14, [r0, #32]
 8010908:	ee77 7a87 	vadd.f32	s15, s15, s14
 801090c:	e7b5      	b.n	801087a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801090e:	4563      	cmp	r3, ip
 8010910:	dd5d      	ble.n	80109ce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010912:	edd0 7a08 	vldr	s15, [r0, #32]
 8010916:	eba3 030c 	sub.w	r3, r3, ip
 801091a:	68c4      	ldr	r4, [r0, #12]
 801091c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010928:	7c00      	ldrb	r0, [r0, #16]
 801092a:	440b      	add	r3, r1
 801092c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010930:	bfd8      	it	le
 8010932:	2200      	movle	r2, #0
 8010934:	58a2      	ldr	r2, [r4, r2]
 8010936:	b2d4      	uxtb	r4, r2
 8010938:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 801093c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8010940:	b160      	cbz	r0, 801095c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8010942:	2dff      	cmp	r5, #255	@ 0xff
 8010944:	d10a      	bne.n	801095c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8010946:	4299      	cmp	r1, r3
 8010948:	d241      	bcs.n	80109ce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801094a:	700c      	strb	r4, [r1, #0]
 801094c:	3103      	adds	r1, #3
 801094e:	f801 cc02 	strb.w	ip, [r1, #-2]
 8010952:	f801 7c01 	strb.w	r7, [r1, #-1]
 8010956:	e7f6      	b.n	8010946 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8010958:	4694      	mov	ip, r2
 801095a:	e7da      	b.n	8010912 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 801095c:	0e12      	lsrs	r2, r2, #24
 801095e:	436a      	muls	r2, r5
 8010960:	1c55      	adds	r5, r2, #1
 8010962:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8010966:	122d      	asrs	r5, r5, #8
 8010968:	43ee      	mvns	r6, r5
 801096a:	b2ad      	uxth	r5, r5
 801096c:	fb14 f405 	smulbb	r4, r4, r5
 8010970:	b2f6      	uxtb	r6, r6
 8010972:	fb1c f005 	smulbb	r0, ip, r5
 8010976:	fb17 f505 	smulbb	r5, r7, r5
 801097a:	b2a4      	uxth	r4, r4
 801097c:	b280      	uxth	r0, r0
 801097e:	b2ad      	uxth	r5, r5
 8010980:	428b      	cmp	r3, r1
 8010982:	f101 0203 	add.w	r2, r1, #3
 8010986:	d922      	bls.n	80109ce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010988:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801098c:	fb01 4106 	mla	r1, r1, r6, r4
 8010990:	b289      	uxth	r1, r1
 8010992:	1c4f      	adds	r7, r1, #1
 8010994:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010998:	1209      	asrs	r1, r1, #8
 801099a:	f802 1c03 	strb.w	r1, [r2, #-3]
 801099e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80109a2:	fb01 0106 	mla	r1, r1, r6, r0
 80109a6:	b289      	uxth	r1, r1
 80109a8:	1c4f      	adds	r7, r1, #1
 80109aa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80109ae:	1209      	asrs	r1, r1, #8
 80109b0:	f802 1c02 	strb.w	r1, [r2, #-2]
 80109b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80109b8:	fb01 5106 	mla	r1, r1, r6, r5
 80109bc:	b289      	uxth	r1, r1
 80109be:	1c4f      	adds	r7, r1, #1
 80109c0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80109c4:	1209      	asrs	r1, r1, #8
 80109c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80109ca:	4611      	mov	r1, r2
 80109cc:	e7d8      	b.n	8010980 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80109ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d2:	bf00      	nop
 80109d4:	447ffffe 	.word	0x447ffffe
 80109d8:	00000000 	.word	0x00000000

080109dc <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80109dc:	4770      	bx	lr

080109de <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80109de:	4770      	bx	lr

080109e0 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80109e0:	b510      	push	{r4, lr}
 80109e2:	4604      	mov	r4, r0
 80109e4:	2124      	movs	r1, #36	@ 0x24
 80109e6:	f011 fce1 	bl	80223ac <_ZdlPvj>
 80109ea:	4620      	mov	r0, r4
 80109ec:	bd10      	pop	{r4, pc}
	...

080109f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80109f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80109f2:	6803      	ldr	r3, [r0, #0]
 80109f4:	460d      	mov	r5, r1
 80109f6:	4604      	mov	r4, r0
 80109f8:	4601      	mov	r1, r0
 80109fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80109fc:	a802      	add	r0, sp, #8
 80109fe:	4798      	blx	r3
 8010a00:	6828      	ldr	r0, [r5, #0]
 8010a02:	6869      	ldr	r1, [r5, #4]
 8010a04:	466b      	mov	r3, sp
 8010a06:	c303      	stmia	r3!, {r0, r1}
 8010a08:	4668      	mov	r0, sp
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	f7fd fcea 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 8010a10:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010a12:	b188      	cbz	r0, 8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010a14:	6803      	ldr	r3, [r0, #0]
 8010a16:	1d21      	adds	r1, r4, #4
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	4798      	blx	r3
 8010a1c:	b160      	cbz	r0, 8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010a1e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dd08      	ble.n	8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010a26:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8010a2a:	2d00      	cmp	r5, #0
 8010a2c:	dd04      	ble.n	8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8010adc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8010a30:	7812      	ldrb	r2, [r2, #0]
 8010a32:	b11a      	cbz	r2, 8010a3c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8010a34:	2a01      	cmp	r2, #1
 8010a36:	d029      	beq.n	8010a8c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8010a38:	b004      	add	sp, #16
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a40:	441d      	add	r5, r3
 8010a42:	b2ad      	uxth	r5, r5
 8010a44:	b22e      	sxth	r6, r5
 8010a46:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8010a4a:	42b3      	cmp	r3, r6
 8010a4c:	daf4      	bge.n	8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	4669      	mov	r1, sp
 8010a52:	4620      	mov	r0, r4
 8010a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a56:	4798      	blx	r3
 8010a58:	b940      	cbnz	r0, 8010a6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8010a5a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8010a5e:	2b01      	cmp	r3, #1
 8010a60:	d004      	beq.n	8010a6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8010a62:	3301      	adds	r3, #1
 8010a64:	105b      	asrs	r3, r3, #1
 8010a66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010a6a:	e7f0      	b.n	8010a4e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8010a6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a74:	4413      	add	r3, r2
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	441a      	add	r2, r3
 8010a7a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010a7e:	b212      	sxth	r2, r2
 8010a80:	4296      	cmp	r6, r2
 8010a82:	dae0      	bge.n	8010a46 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010a84:	1aeb      	subs	r3, r5, r3
 8010a86:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010a8a:	e7dc      	b.n	8010a46 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010a8c:	f8bd 5000 	ldrh.w	r5, [sp]
 8010a90:	441d      	add	r5, r3
 8010a92:	b2ad      	uxth	r5, r5
 8010a94:	b22e      	sxth	r6, r5
 8010a96:	f9bd 3000 	ldrsh.w	r3, [sp]
 8010a9a:	42b3      	cmp	r3, r6
 8010a9c:	dacc      	bge.n	8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	4669      	mov	r1, sp
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aa6:	4798      	blx	r3
 8010aa8:	b940      	cbnz	r0, 8010abc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8010aaa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d004      	beq.n	8010abc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	105b      	asrs	r3, r3, #1
 8010ab6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010aba:	e7f0      	b.n	8010a9e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8010abc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010ac0:	f8bd 3000 	ldrh.w	r3, [sp]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	441a      	add	r2, r3
 8010aca:	f8ad 3000 	strh.w	r3, [sp]
 8010ace:	b212      	sxth	r2, r2
 8010ad0:	4296      	cmp	r6, r2
 8010ad2:	dae0      	bge.n	8010a96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010ad4:	1aeb      	subs	r3, r5, r3
 8010ad6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010ada:	e7dc      	b.n	8010a96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010adc:	2402daa4 	.word	0x2402daa4

08010ae0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8010ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ae2:	6803      	ldr	r3, [r0, #0]
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	4601      	mov	r1, r0
 8010ae8:	4668      	mov	r0, sp
 8010aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010aec:	4798      	blx	r3
 8010aee:	2100      	movs	r1, #0
 8010af0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010af4:	4668      	mov	r0, sp
 8010af6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010afa:	9102      	str	r1, [sp, #8]
 8010afc:	a902      	add	r1, sp, #8
 8010afe:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010b02:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010b06:	f7fd fc6d 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 8010b0a:	6823      	ldr	r3, [r4, #0]
 8010b0c:	4669      	mov	r1, sp
 8010b0e:	4620      	mov	r0, r4
 8010b10:	691b      	ldr	r3, [r3, #16]
 8010b12:	4798      	blx	r3
 8010b14:	b004      	add	sp, #16
 8010b16:	bd10      	pop	{r4, pc}

08010b18 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8010b18:	2101      	movs	r1, #1
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8010b20:	490a      	ldr	r1, [pc, #40]	@ (8010b4c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8010b22:	8082      	strh	r2, [r0, #4]
 8010b24:	6001      	str	r1, [r0, #0]
 8010b26:	21ff      	movs	r1, #255	@ 0xff
 8010b28:	80c2      	strh	r2, [r0, #6]
 8010b2a:	8102      	strh	r2, [r0, #8]
 8010b2c:	8142      	strh	r2, [r0, #10]
 8010b2e:	8182      	strh	r2, [r0, #12]
 8010b30:	81c2      	strh	r2, [r0, #14]
 8010b32:	8202      	strh	r2, [r0, #16]
 8010b34:	8242      	strh	r2, [r0, #18]
 8010b36:	61c2      	str	r2, [r0, #28]
 8010b38:	8402      	strh	r2, [r0, #32]
 8010b3a:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010b3c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8010b40:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8010b44:	6282      	str	r2, [r0, #40]	@ 0x28
 8010b46:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010b4a:	4770      	bx	lr
 8010b4c:	080254bc 	.word	0x080254bc

08010b50 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8010b50:	6301      	str	r1, [r0, #48]	@ 0x30
 8010b52:	4770      	bx	lr

08010b54 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8010b54:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010b56:	4770      	bx	lr

08010b58 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8010b58:	6341      	str	r1, [r0, #52]	@ 0x34
 8010b5a:	4770      	bx	lr

08010b5c <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8010b5c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8010b5e:	4770      	bx	lr

08010b60 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8010b60:	4770      	bx	lr

08010b62 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8010b62:	4608      	mov	r0, r1
 8010b64:	4770      	bx	lr

08010b66 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8010b66:	b530      	push	{r4, r5, lr}
 8010b68:	460d      	mov	r5, r1
 8010b6a:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8010b6c:	8949      	ldrh	r1, [r1, #10]
 8010b6e:	b085      	sub	sp, #20
 8010b70:	4604      	mov	r4, r0
 8010b72:	1ac9      	subs	r1, r1, r3
 8010b74:	6803      	ldr	r3, [r0, #0]
 8010b76:	f10d 0206 	add.w	r2, sp, #6
 8010b7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8010b7e:	b209      	sxth	r1, r1
 8010b80:	4798      	blx	r3
 8010b82:	b1a0      	cbz	r0, 8010bae <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8010b84:	792b      	ldrb	r3, [r5, #4]
 8010b86:	b993      	cbnz	r3, 8010bae <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8010b88:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8010b8c:	b178      	cbz	r0, 8010bae <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8010b8e:	6803      	ldr	r3, [r0, #0]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	4798      	blx	r3
 8010b94:	b158      	cbz	r0, 8010bae <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8010b96:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8010b9a:	aa02      	add	r2, sp, #8
 8010b9c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010ba6:	9503      	str	r5, [sp, #12]
 8010ba8:	6803      	ldr	r3, [r0, #0]
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	4798      	blx	r3
 8010bae:	b005      	add	sp, #20
 8010bb0:	bd30      	pop	{r4, r5, pc}

08010bb2 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8010bb2:	428a      	cmp	r2, r1
 8010bb4:	bfbc      	itt	lt
 8010bb6:	460b      	movlt	r3, r1
 8010bb8:	4611      	movlt	r1, r2
 8010bba:	b510      	push	{r4, lr}
 8010bbc:	bfb8      	it	lt
 8010bbe:	461a      	movlt	r2, r3
 8010bc0:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	428b      	cmp	r3, r1
 8010bc8:	d103      	bne.n	8010bd2 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8010bca:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d011      	beq.n	8010bf6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8010bd2:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8010bd6:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8010bda:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8010bde:	f004 fda8 	bl	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010be2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010be6:	f004 fda4 	bl	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010bea:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8010bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf2:	f004 bd9e 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010bf6:	bd10      	pop	{r4, pc}

08010bf8 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8010bf8:	428a      	cmp	r2, r1
 8010bfa:	bfbc      	itt	lt
 8010bfc:	460b      	movlt	r3, r1
 8010bfe:	4611      	movlt	r1, r2
 8010c00:	b510      	push	{r4, lr}
 8010c02:	bfb8      	it	lt
 8010c04:	461a      	movlt	r2, r3
 8010c06:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	428b      	cmp	r3, r1
 8010c0e:	d103      	bne.n	8010c18 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8010c10:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d011      	beq.n	8010c3c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8010c18:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8010c1c:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8010c20:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8010c24:	f004 fd85 	bl	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010c28:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010c2c:	f004 fd81 	bl	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010c30:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8010c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c38:	f004 bd7b 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010c3c:	bd10      	pop	{r4, pc}

08010c3e <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8010c3e:	2300      	movs	r3, #0
 8010c40:	3038      	adds	r0, #56	@ 0x38
 8010c42:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8010c46:	f004 bd74 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>

08010c4a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8010c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8010c52:	4605      	mov	r5, r0
 8010c54:	460f      	mov	r7, r1
 8010c56:	4616      	mov	r6, r2
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d03d      	beq.n	8010cd8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8010c5c:	6803      	ldr	r3, [r0, #0]
 8010c5e:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010c62:	4798      	blx	r3
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	b204      	sxth	r4, r0
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8010c6e:	4798      	blx	r3
 8010c70:	b203      	sxth	r3, r0
 8010c72:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 8010c76:	429c      	cmp	r4, r3
 8010c78:	bfc4      	itt	gt
 8010c7a:	4622      	movgt	r2, r4
 8010c7c:	461c      	movgt	r4, r3
 8010c7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8010c82:	bfc8      	it	gt
 8010c84:	4613      	movgt	r3, r2
 8010c86:	4284      	cmp	r4, r0
 8010c88:	da26      	bge.n	8010cd8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8010c8a:	4298      	cmp	r0, r3
 8010c8c:	bfa8      	it	ge
 8010c8e:	4618      	movge	r0, r3
 8010c90:	2800      	cmp	r0, #0
 8010c92:	db21      	blt.n	8010cd8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8010c94:	b9ef      	cbnz	r7, 8010cd2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 8010c96:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 8010c9a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	42a0      	cmp	r0, r4
 8010ca2:	dd0b      	ble.n	8010cbc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 8010ca4:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 8010ca8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8010cac:	3401      	adds	r4, #1
 8010cae:	4291      	cmp	r1, r2
 8010cb0:	bfa8      	it	ge
 8010cb2:	4611      	movge	r1, r2
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	bfb8      	it	lt
 8010cb8:	4613      	movlt	r3, r2
 8010cba:	e7f1      	b.n	8010ca0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8010cbc:	1b89      	subs	r1, r1, r6
 8010cbe:	18f2      	adds	r2, r6, r3
 8010cc0:	4291      	cmp	r1, r2
 8010cc2:	d009      	beq.n	8010cd8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd0:	4718      	bx	r3
 8010cd2:	4273      	negs	r3, r6
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	e7e3      	b.n	8010ca0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8010cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010cdc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8010cdc:	b530      	push	{r4, r5, lr}
 8010cde:	790b      	ldrb	r3, [r1, #4]
 8010ce0:	b085      	sub	sp, #20
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	2b02      	cmp	r3, #2
 8010ce8:	d020      	beq.n	8010d2c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8010cea:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8010cec:	f10d 0206 	add.w	r2, sp, #6
 8010cf0:	88c9      	ldrh	r1, [r1, #6]
 8010cf2:	1ac9      	subs	r1, r1, r3
 8010cf4:	6803      	ldr	r3, [r0, #0]
 8010cf6:	b209      	sxth	r1, r1
 8010cf8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8010cfc:	4798      	blx	r3
 8010cfe:	b1a8      	cbz	r0, 8010d2c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8010d00:	792b      	ldrb	r3, [r5, #4]
 8010d02:	2b01      	cmp	r3, #1
 8010d04:	d812      	bhi.n	8010d2c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8010d06:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8010d0a:	b178      	cbz	r0, 8010d2c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	4798      	blx	r3
 8010d12:	b158      	cbz	r0, 8010d2c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8010d14:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8010d18:	aa02      	add	r2, sp, #8
 8010d1a:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8010d1e:	4621      	mov	r1, r4
 8010d20:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010d24:	9503      	str	r5, [sp, #12]
 8010d26:	6803      	ldr	r3, [r0, #0]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	4798      	blx	r3
 8010d2c:	b005      	add	sp, #20
 8010d2e:	bd30      	pop	{r4, r5, pc}

08010d30 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8010d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d34:	4604      	mov	r4, r0
 8010d36:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8010d3a:	4690      	mov	r8, r2
 8010d3c:	461f      	mov	r7, r3
 8010d3e:	9e06      	ldr	r6, [sp, #24]
 8010d40:	b928      	cbnz	r0, 8010d4e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8010d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010d46:	8033      	strh	r3, [r6, #0]
 8010d48:	803b      	strh	r3, [r7, #0]
 8010d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8010d52:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8010d56:	1883      	adds	r3, r0, r2
 8010d58:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8010d5c:	1ad2      	subs	r2, r2, r3
 8010d5e:	b212      	sxth	r2, r2
 8010d60:	2a01      	cmp	r2, #1
 8010d62:	dc07      	bgt.n	8010d74 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8010d64:	2300      	movs	r3, #0
 8010d66:	803b      	strh	r3, [r7, #0]
 8010d68:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	8033      	strh	r3, [r6, #0]
 8010d70:	2001      	movs	r0, #1
 8010d72:	e7ea      	b.n	8010d4a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8010d74:	1a08      	subs	r0, r1, r0
 8010d76:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8010d7a:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8010d7e:	0140      	lsls	r0, r0, #5
 8010d80:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010d82:	1a5b      	subs	r3, r3, r1
 8010d84:	d459      	bmi.n	8010e3a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8010d86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010d8a:	fb93 f1f5 	sdiv	r1, r3, r5
 8010d8e:	2302      	movs	r3, #2
 8010d90:	fb91 f1f3 	sdiv	r1, r1, r3
 8010d94:	3a01      	subs	r2, #1
 8010d96:	f005 f9ba 	bl	801610e <_ZN8touchgfx6muldivElll>
 8010d9a:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8010d9e:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8010da2:	2900      	cmp	r1, #0
 8010da4:	db55      	blt.n	8010e52 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8010da6:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8010daa:	2502      	movs	r5, #2
 8010dac:	fb93 f3fc 	sdiv	r3, r3, ip
 8010db0:	fb93 f3f5 	sdiv	r3, r3, r5
 8010db4:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8010db8:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8010dbc:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8010dc0:	1a52      	subs	r2, r2, r1
 8010dc2:	eba8 0003 	sub.w	r0, r8, r3
 8010dc6:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8010dca:	d44e      	bmi.n	8010e6a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8010dcc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8010dd0:	fb92 f1fc 	sdiv	r1, r2, ip
 8010dd4:	2202      	movs	r2, #2
 8010dd6:	fb91 f1f2 	sdiv	r1, r1, r2
 8010dda:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8010dde:	4413      	add	r3, r2
 8010de0:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8010de4:	1ad2      	subs	r2, r2, r3
 8010de6:	b212      	sxth	r2, r2
 8010de8:	3a01      	subs	r2, #1
 8010dea:	f005 f990 	bl	801610e <_ZN8touchgfx6muldivElll>
 8010dee:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8010df2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	db44      	blt.n	8010e82 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8010df8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8010dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e00:	2202      	movs	r2, #2
 8010e02:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e06:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8010e0a:	2020      	movs	r0, #32
 8010e0c:	429d      	cmp	r5, r3
 8010e0e:	bfde      	ittt	le
 8010e10:	461a      	movle	r2, r3
 8010e12:	462b      	movle	r3, r5
 8010e14:	4615      	movle	r5, r2
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	2d00      	cmp	r5, #0
 8010e1a:	bfaa      	itet	ge
 8010e1c:	351f      	addge	r5, #31
 8010e1e:	fb95 f5f0 	sdivlt	r5, r5, r0
 8010e22:	116d      	asrge	r5, r5, #5
 8010e24:	fb93 f3f0 	sdiv	r3, r3, r0
 8010e28:	b22d      	sxth	r5, r5
 8010e2a:	803b      	strh	r3, [r7, #0]
 8010e2c:	2d00      	cmp	r5, #0
 8010e2e:	8035      	strh	r5, [r6, #0]
 8010e30:	da33      	bge.n	8010e9a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8010e32:	2000      	movs	r0, #0
 8010e34:	8030      	strh	r0, [r6, #0]
 8010e36:	8038      	strh	r0, [r7, #0]
 8010e38:	e787      	b.n	8010d4a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8010e3a:	f06f 0101 	mvn.w	r1, #1
 8010e3e:	fb01 5303 	mla	r3, r1, r3, r5
 8010e42:	1e59      	subs	r1, r3, #1
 8010e44:	2302      	movs	r3, #2
 8010e46:	fb91 f1f5 	sdiv	r1, r1, r5
 8010e4a:	fb91 f1f3 	sdiv	r1, r1, r3
 8010e4e:	4249      	negs	r1, r1
 8010e50:	e7a0      	b.n	8010d94 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8010e52:	f06f 0301 	mvn.w	r3, #1
 8010e56:	2502      	movs	r5, #2
 8010e58:	fb03 c301 	mla	r3, r3, r1, ip
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	fb93 f3fc 	sdiv	r3, r3, ip
 8010e62:	fb93 f3f5 	sdiv	r3, r3, r5
 8010e66:	425b      	negs	r3, r3
 8010e68:	e7a4      	b.n	8010db4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8010e6a:	f06f 0101 	mvn.w	r1, #1
 8010e6e:	fb01 c202 	mla	r2, r1, r2, ip
 8010e72:	1e51      	subs	r1, r2, #1
 8010e74:	2202      	movs	r2, #2
 8010e76:	fb91 f1fc 	sdiv	r1, r1, ip
 8010e7a:	fb91 f1f2 	sdiv	r1, r1, r2
 8010e7e:	4249      	negs	r1, r1
 8010e80:	e7ab      	b.n	8010dda <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8010e82:	f06f 0101 	mvn.w	r1, #1
 8010e86:	fb01 2303 	mla	r3, r1, r3, r2
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e90:	2202      	movs	r2, #2
 8010e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e96:	425b      	negs	r3, r3
 8010e98:	e7b5      	b.n	8010e06 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8010e9a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8010e9e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	dc05      	bgt.n	8010eb2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	b21b      	sxth	r3, r3
 8010eac:	8033      	strh	r3, [r6, #0]
 8010eae:	803b      	strh	r3, [r7, #0]
 8010eb0:	e74b      	b.n	8010d4a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8010eb2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8010eb6:	803a      	strh	r2, [r7, #0]
 8010eb8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8010ebc:	f9b6 2000 	ldrsh.w	r2, [r6]
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	bfdc      	itt	le
 8010ec4:	f103 33ff 	addle.w	r3, r3, #4294967295
 8010ec8:	b21a      	sxthle	r2, r3
 8010eca:	8032      	strh	r2, [r6, #0]
 8010ecc:	e750      	b.n	8010d70 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08010ed0 <_ZN8touchgfx9ContainerC1Ev>:
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8010ed8:	4909      	ldr	r1, [pc, #36]	@ (8010f00 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8010eda:	8082      	strh	r2, [r0, #4]
 8010edc:	80c2      	strh	r2, [r0, #6]
 8010ede:	8102      	strh	r2, [r0, #8]
 8010ee0:	8142      	strh	r2, [r0, #10]
 8010ee2:	8182      	strh	r2, [r0, #12]
 8010ee4:	81c2      	strh	r2, [r0, #14]
 8010ee6:	8202      	strh	r2, [r0, #16]
 8010ee8:	8242      	strh	r2, [r0, #18]
 8010eea:	61c2      	str	r2, [r0, #28]
 8010eec:	8402      	strh	r2, [r0, #32]
 8010eee:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010ef0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8010ef4:	6001      	str	r1, [r0, #0]
 8010ef6:	6282      	str	r2, [r0, #40]	@ 0x28
 8010ef8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	08025344 	.word	0x08025344

08010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8010f04:	6800      	ldr	r0, [r0, #0]
 8010f06:	2800      	cmp	r0, #0
 8010f08:	bfbd      	ittte	lt
 8010f0a:	380f      	sublt	r0, #15
 8010f0c:	2320      	movlt	r3, #32
 8010f0e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8010f12:	3010      	addge	r0, #16
 8010f14:	bfa8      	it	ge
 8010f16:	1140      	asrge	r0, r0, #5
 8010f18:	4770      	bx	lr

08010f1a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8010f1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1e:	4605      	mov	r5, r0
 8010f20:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8010f24:	4688      	mov	r8, r1
 8010f26:	4691      	mov	r9, r2
 8010f28:	469a      	mov	sl, r3
 8010f2a:	b360      	cbz	r0, 8010f86 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8010f2c:	2700      	movs	r7, #0
 8010f2e:	f04f 3bff 	mov.w	fp, #4294967295
 8010f32:	b23e      	sxth	r6, r7
 8010f34:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8010f38:	42b3      	cmp	r3, r6
 8010f3a:	dd23      	ble.n	8010f84 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8010f3c:	682b      	ldr	r3, [r5, #0]
 8010f3e:	4631      	mov	r1, r6
 8010f40:	4628      	mov	r0, r5
 8010f42:	3701      	adds	r7, #1
 8010f44:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8010f48:	4798      	blx	r3
 8010f4a:	9001      	str	r0, [sp, #4]
 8010f4c:	a801      	add	r0, sp, #4
 8010f4e:	f7ff ffd9 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010f52:	682b      	ldr	r3, [r5, #0]
 8010f54:	eba0 0008 	sub.w	r0, r0, r8
 8010f58:	4631      	mov	r1, r6
 8010f5a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010f5e:	b204      	sxth	r4, r0
 8010f60:	4628      	mov	r0, r5
 8010f62:	4798      	blx	r3
 8010f64:	9001      	str	r0, [sp, #4]
 8010f66:	a801      	add	r0, sp, #4
 8010f68:	f7ff ffcc 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010f6c:	eba0 0009 	sub.w	r0, r0, r9
 8010f70:	fb10 f000 	smulbb	r0, r0, r0
 8010f74:	fb04 0404 	mla	r4, r4, r4, r0
 8010f78:	455c      	cmp	r4, fp
 8010f7a:	bf3c      	itt	cc
 8010f7c:	f8aa 6000 	strhcc.w	r6, [sl]
 8010f80:	46a3      	movcc	fp, r4
 8010f82:	e7d6      	b.n	8010f32 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8010f84:	2001      	movs	r0, #1
 8010f86:	b003      	add	sp, #12
 8010f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f8c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8010f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f90:	460e      	mov	r6, r1
 8010f92:	2100      	movs	r1, #0
 8010f94:	4605      	mov	r5, r0
 8010f96:	4617      	mov	r7, r2
 8010f98:	8011      	strh	r1, [r2, #0]
 8010f9a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8010f9e:	b36b      	cbz	r3, 8010ffc <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8010fa0:	6803      	ldr	r3, [r0, #0]
 8010fa2:	f10d 0808 	add.w	r8, sp, #8
 8010fa6:	2401      	movs	r4, #1
 8010fa8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8010fac:	4798      	blx	r3
 8010fae:	f848 0d04 	str.w	r0, [r8, #-4]!
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	f7ff ffa6 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010fb8:	b200      	sxth	r0, r0
 8010fba:	1b80      	subs	r0, r0, r6
 8010fbc:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8010fc0:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8010fc4:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8010fc8:	42a3      	cmp	r3, r4
 8010fca:	dd1b      	ble.n	8011004 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8010fcc:	682b      	ldr	r3, [r5, #0]
 8010fce:	4621      	mov	r1, r4
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8010fd6:	4798      	blx	r3
 8010fd8:	9001      	str	r0, [sp, #4]
 8010fda:	4640      	mov	r0, r8
 8010fdc:	f7ff ff92 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010fe0:	b200      	sxth	r0, r0
 8010fe2:	1b80      	subs	r0, r0, r6
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	bfb8      	it	lt
 8010fe8:	4240      	neglt	r0, r0
 8010fea:	4548      	cmp	r0, r9
 8010fec:	bf38      	it	cc
 8010fee:	803c      	strhcc	r4, [r7, #0]
 8010ff0:	f104 0401 	add.w	r4, r4, #1
 8010ff4:	bf38      	it	cc
 8010ff6:	4681      	movcc	r9, r0
 8010ff8:	b224      	sxth	r4, r4
 8010ffa:	e7e3      	b.n	8010fc4 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	b003      	add	sp, #12
 8011000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011004:	2001      	movs	r0, #1
 8011006:	e7fa      	b.n	8010ffe <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08011008 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8011008:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 801100c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011010:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8011014:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8011018:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 801101c:	4770      	bx	lr

0801101e <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 801101e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011020:	4604      	mov	r4, r0
 8011022:	3038      	adds	r0, #56	@ 0x38
 8011024:	460d      	mov	r5, r1
 8011026:	f7fd f859 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801102a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 801102e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8011032:	4628      	mov	r0, r5
 8011034:	9200      	str	r2, [sp, #0]
 8011036:	2200      	movs	r2, #0
 8011038:	4611      	mov	r1, r2
 801103a:	f7f2 fd79 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 801103e:	b003      	add	sp, #12
 8011040:	bd30      	pop	{r4, r5, pc}

08011042 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8011042:	b538      	push	{r3, r4, r5, lr}
 8011044:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8011048:	460d      	mov	r5, r1
 801104a:	428b      	cmp	r3, r1
 801104c:	dd08      	ble.n	8011060 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801104e:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8011050:	b134      	cbz	r4, 8011060 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	4620      	mov	r0, r4
 8011056:	4629      	mov	r1, r5
 8011058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801105a:	4798      	blx	r3
 801105c:	69a4      	ldr	r4, [r4, #24]
 801105e:	e7f7      	b.n	8011050 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8011060:	bd38      	pop	{r3, r4, r5, pc}

08011062 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8011062:	b570      	push	{r4, r5, r6, lr}
 8011064:	4606      	mov	r6, r0
 8011066:	460d      	mov	r5, r1
 8011068:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 801106c:	b134      	cbz	r4, 801107c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801106e:	6823      	ldr	r3, [r4, #0]
 8011070:	4620      	mov	r0, r4
 8011072:	4629      	mov	r1, r5
 8011074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011076:	4798      	blx	r3
 8011078:	69a4      	ldr	r4, [r4, #24]
 801107a:	e7f7      	b.n	801106c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801107c:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8011080:	b134      	cbz	r4, 8011090 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	4620      	mov	r0, r4
 8011086:	4629      	mov	r1, r5
 8011088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801108a:	4798      	blx	r3
 801108c:	69a4      	ldr	r4, [r4, #24]
 801108e:	e7f7      	b.n	8011080 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8011090:	bd70      	pop	{r4, r5, r6, pc}

08011092 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8011092:	b538      	push	{r3, r4, r5, lr}
 8011094:	4604      	mov	r4, r0
 8011096:	2500      	movs	r5, #0
 8011098:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801109c:	42ab      	cmp	r3, r5
 801109e:	db05      	blt.n	80110ac <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80110a0:	b229      	sxth	r1, r5
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ff ffdd 	bl	8011062 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80110a8:	3501      	adds	r5, #1
 80110aa:	e7f5      	b.n	8011098 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80110ac:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80110b0:	f004 fb3f 	bl	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>
 80110b4:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80110b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110bc:	f004 bb39 	b.w	8015732 <_ZNK8touchgfx8Drawable10invalidateEv>

080110c0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80110c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80110c6:	b15d      	cbz	r5, 80110e0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80110c8:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80110cc:	4628      	mov	r0, r5
 80110ce:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80110d2:	9200      	str	r2, [sp, #0]
 80110d4:	2200      	movs	r2, #0
 80110d6:	4611      	mov	r1, r2
 80110d8:	f7f2 fd2a 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 80110dc:	69ad      	ldr	r5, [r5, #24]
 80110de:	e7f2      	b.n	80110c6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80110e0:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 80110e4:	b15d      	cbz	r5, 80110fe <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80110e6:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 80110ea:	4628      	mov	r0, r5
 80110ec:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 80110f0:	9200      	str	r2, [sp, #0]
 80110f2:	2200      	movs	r2, #0
 80110f4:	4611      	mov	r1, r2
 80110f6:	f7f2 fd1b 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 80110fa:	69ad      	ldr	r5, [r5, #24]
 80110fc:	e7f2      	b.n	80110e4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 80110fe:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8011102:	b15d      	cbz	r5, 801111c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8011104:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8011108:	4628      	mov	r0, r5
 801110a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 801110e:	9200      	str	r2, [sp, #0]
 8011110:	2200      	movs	r2, #0
 8011112:	4611      	mov	r1, r2
 8011114:	f7f2 fd0c 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011118:	69ad      	ldr	r5, [r5, #24]
 801111a:	e7f2      	b.n	8011102 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801111c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8011120:	b15d      	cbz	r5, 801113a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8011122:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8011126:	4628      	mov	r0, r5
 8011128:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 801112c:	9200      	str	r2, [sp, #0]
 801112e:	2200      	movs	r2, #0
 8011130:	4611      	mov	r1, r2
 8011132:	f7f2 fcfd 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011136:	69ad      	ldr	r5, [r5, #24]
 8011138:	e7f2      	b.n	8011120 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801113a:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 801113e:	b15d      	cbz	r5, 8011158 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8011140:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8011144:	4628      	mov	r0, r5
 8011146:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801114a:	9200      	str	r2, [sp, #0]
 801114c:	2200      	movs	r2, #0
 801114e:	4611      	mov	r1, r2
 8011150:	f7f2 fcee 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011154:	69ad      	ldr	r5, [r5, #24]
 8011156:	e7f2      	b.n	801113e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8011158:	6823      	ldr	r3, [r4, #0]
 801115a:	4620      	mov	r0, r4
 801115c:	695b      	ldr	r3, [r3, #20]
 801115e:	b003      	add	sp, #12
 8011160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011164:	4718      	bx	r3

08011166 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8011166:	b430      	push	{r4, r5}
 8011168:	b28a      	uxth	r2, r1
 801116a:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 801116e:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8011172:	1b15      	subs	r5, r2, r4
 8011174:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8011178:	8101      	strh	r1, [r0, #8]
 801117a:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 801117e:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8011182:	442c      	add	r4, r5
 8011184:	1b12      	subs	r2, r2, r4
 8011186:	bc30      	pop	{r4, r5}
 8011188:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801118c:	f7ff bf98 	b.w	80110c0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08011190 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8011190:	b430      	push	{r4, r5}
 8011192:	b28a      	uxth	r2, r1
 8011194:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8011198:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 801119c:	1b15      	subs	r5, r2, r4
 801119e:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 80111a2:	8141      	strh	r1, [r0, #10]
 80111a4:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 80111a8:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 80111ac:	442c      	add	r4, r5
 80111ae:	1b12      	subs	r2, r2, r4
 80111b0:	bc30      	pop	{r4, r5}
 80111b2:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80111b6:	f7ff bf83 	b.w	80110c0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080111ba <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 80111ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80111be:	fa1f fa83 	uxth.w	sl, r3
 80111c2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80111c6:	4615      	mov	r5, r2
 80111c8:	4699      	mov	r9, r3
 80111ca:	fa1f f887 	uxth.w	r8, r7
 80111ce:	8903      	ldrh	r3, [r0, #8]
 80111d0:	4452      	add	r2, sl
 80111d2:	4604      	mov	r4, r0
 80111d4:	8940      	ldrh	r0, [r0, #10]
 80111d6:	460e      	mov	r6, r1
 80111d8:	1a9b      	subs	r3, r3, r2
 80111da:	eb08 0201 	add.w	r2, r8, r1
 80111de:	1a80      	subs	r0, r0, r2
 80111e0:	b21b      	sxth	r3, r3
 80111e2:	460a      	mov	r2, r1
 80111e4:	4629      	mov	r1, r5
 80111e6:	b200      	sxth	r0, r0
 80111e8:	9000      	str	r0, [sp, #0]
 80111ea:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80111ee:	f7f2 fc9f 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 80111f2:	2200      	movs	r2, #0
 80111f4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80111f8:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80111fc:	4611      	mov	r1, r2
 80111fe:	9600      	str	r6, [sp, #0]
 8011200:	f7f2 fc96 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011204:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011208:	2200      	movs	r2, #0
 801120a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	462b      	mov	r3, r5
 8011212:	4611      	mov	r1, r2
 8011214:	f7f2 fc8c 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011218:	8921      	ldrh	r1, [r4, #8]
 801121a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801121e:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8011222:	eba1 010a 	sub.w	r1, r1, sl
 8011226:	2200      	movs	r2, #0
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	464b      	mov	r3, r9
 801122c:	b209      	sxth	r1, r1
 801122e:	f7f2 fc7f 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011232:	8962      	ldrh	r2, [r4, #10]
 8011234:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8011238:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801123c:	eba2 0208 	sub.w	r2, r2, r8
 8011240:	9700      	str	r7, [sp, #0]
 8011242:	2100      	movs	r1, #0
 8011244:	b212      	sxth	r2, r2
 8011246:	f7f2 fc73 	bl	8003b30 <_ZN8touchgfx8Drawable11setPositionEssss>
 801124a:	4620      	mov	r0, r4
 801124c:	b002      	add	sp, #8
 801124e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011252:	f7ff bf35 	b.w	80110c0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08011258 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8011258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801125c:	b085      	sub	sp, #20
 801125e:	4604      	mov	r4, r0
 8011260:	2601      	movs	r6, #1
 8011262:	2500      	movs	r5, #0
 8011264:	9103      	str	r1, [sp, #12]
 8011266:	f7ff fe33 	bl	8010ed0 <_ZN8touchgfx9ContainerC1Ev>
 801126a:	4b2c      	ldr	r3, [pc, #176]	@ (801131c <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 801126c:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8011270:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8011274:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8011278:	6023      	str	r3, [r4, #0]
 801127a:	23ff      	movs	r3, #255	@ 0xff
 801127c:	4658      	mov	r0, fp
 801127e:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8011282:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011286:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 801128a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801128e:	f7ff fe1f 	bl	8010ed0 <_ZN8touchgfx9ContainerC1Ev>
 8011292:	4648      	mov	r0, r9
 8011294:	f7ff fe1c 	bl	8010ed0 <_ZN8touchgfx9ContainerC1Ev>
 8011298:	4640      	mov	r0, r8
 801129a:	f7ff fe19 	bl	8010ed0 <_ZN8touchgfx9ContainerC1Ev>
 801129e:	4650      	mov	r0, sl
 80112a0:	f7ff fe16 	bl	8010ed0 <_ZN8touchgfx9ContainerC1Ev>
 80112a4:	4638      	mov	r0, r7
 80112a6:	f7ff fe13 	bl	8010ed0 <_ZN8touchgfx9ContainerC1Ev>
 80112aa:	9903      	ldr	r1, [sp, #12]
 80112ac:	4620      	mov	r0, r4
 80112ae:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80112b2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80112b6:	4659      	mov	r1, fp
 80112b8:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80112bc:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 80112c0:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 80112c4:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 80112c8:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 80112cc:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 80112d0:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80112d4:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80112d8:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 80112dc:	f7fc fefe 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80112e0:	4651      	mov	r1, sl
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7fc fefa 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80112e8:	4649      	mov	r1, r9
 80112ea:	4620      	mov	r0, r4
 80112ec:	f7fc fef6 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80112f0:	4641      	mov	r1, r8
 80112f2:	4620      	mov	r0, r4
 80112f4:	f7fc fef2 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80112f8:	4639      	mov	r1, r7
 80112fa:	4620      	mov	r0, r4
 80112fc:	f7fc feee 	bl	800e0dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011300:	4620      	mov	r0, r4
 8011302:	9500      	str	r5, [sp, #0]
 8011304:	462b      	mov	r3, r5
 8011306:	462a      	mov	r2, r5
 8011308:	4629      	mov	r1, r5
 801130a:	f7ff ff56 	bl	80111ba <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801130e:	4620      	mov	r0, r4
 8011310:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8011314:	b005      	add	sp, #20
 8011316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131a:	bf00      	nop
 801131c:	080256cc 	.word	0x080256cc

08011320 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8011320:	4291      	cmp	r1, r2
 8011322:	4613      	mov	r3, r2
 8011324:	d003      	beq.n	801132e <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8011326:	460a      	mov	r2, r1
 8011328:	4619      	mov	r1, r3
 801132a:	f004 bef0 	b.w	801610e <_ZN8touchgfx6muldivElll>
 801132e:	4770      	bx	lr

08011330 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8011330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011334:	6803      	ldr	r3, [r0, #0]
 8011336:	460d      	mov	r5, r1
 8011338:	4604      	mov	r4, r0
 801133a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801133e:	4798      	blx	r3
 8011340:	42a8      	cmp	r0, r5
 8011342:	4606      	mov	r6, r0
 8011344:	d024      	beq.n	8011390 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	4601      	mov	r1, r0
 801134a:	462a      	mov	r2, r5
 801134c:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8011350:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8011354:	f7ff ffe4 	bl	8011320 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8011358:	4680      	mov	r8, r0
 801135a:	462a      	mov	r2, r5
 801135c:	4631      	mov	r1, r6
 801135e:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8011362:	f7ff ffdd 	bl	8011320 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8011366:	4641      	mov	r1, r8
 8011368:	4602      	mov	r2, r0
 801136a:	4620      	mov	r0, r4
 801136c:	47b8      	blx	r7
 801136e:	462a      	mov	r2, r5
 8011370:	4631      	mov	r1, r6
 8011372:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8011376:	f7ff ffd3 	bl	8011320 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801137a:	462a      	mov	r2, r5
 801137c:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8011380:	4631      	mov	r1, r6
 8011382:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8011386:	f7ff ffcb 	bl	8011320 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801138a:	6325      	str	r5, [r4, #48]	@ 0x30
 801138c:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8011390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011394 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8011394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011398:	4604      	mov	r4, r0
 801139a:	460f      	mov	r7, r1
 801139c:	b1b2      	cbz	r2, 80113cc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 801139e:	6803      	ldr	r3, [r0, #0]
 80113a0:	2600      	movs	r6, #0
 80113a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80113a6:	4798      	blx	r3
 80113a8:	4681      	mov	r9, r0
 80113aa:	b235      	sxth	r5, r6
 80113ac:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80113b0:	3601      	adds	r6, #1
 80113b2:	42ab      	cmp	r3, r5
 80113b4:	dd0a      	ble.n	80113cc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80113b6:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 80113ba:	463a      	mov	r2, r7
 80113bc:	4649      	mov	r1, r9
 80113be:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80113c2:	f7ff ffad 	bl	8011320 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80113c6:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80113ca:	e7ee      	b.n	80113aa <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 80113cc:	6367      	str	r7, [r4, #52]	@ 0x34
 80113ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080113d2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 80113d2:	b570      	push	{r4, r5, r6, lr}
 80113d4:	6803      	ldr	r3, [r0, #0]
 80113d6:	4604      	mov	r4, r0
 80113d8:	460d      	mov	r5, r1
 80113da:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80113de:	4798      	blx	r3
 80113e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80113e4:	4629      	mov	r1, r5
 80113e6:	4620      	mov	r0, r4
 80113e8:	3301      	adds	r3, #1
 80113ea:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113f4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80113f8:	4718      	bx	r3

080113fa <_ZN8touchgfx16GraphElementLineD1Ev>:
 80113fa:	4770      	bx	lr

080113fc <_ZN8touchgfx16GraphElementLineD0Ev>:
 80113fc:	b510      	push	{r4, lr}
 80113fe:	4604      	mov	r4, r0
 8011400:	2130      	movs	r1, #48	@ 0x30
 8011402:	f010 ffd3 	bl	80223ac <_ZdlPvj>
 8011406:	4620      	mov	r0, r4
 8011408:	bd10      	pop	{r4, pc}

0801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801140a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140c:	4604      	mov	r4, r0
 801140e:	4608      	mov	r0, r1
 8011410:	460d      	mov	r5, r1
 8011412:	f7fd f82a 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011416:	b978      	cbnz	r0, 8011438 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8011418:	4620      	mov	r0, r4
 801141a:	f7fd f826 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 801141e:	f9b5 6000 	ldrsh.w	r6, [r5]
 8011422:	b150      	cbz	r0, 801143a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8011424:	8026      	strh	r6, [r4, #0]
 8011426:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801142a:	8063      	strh	r3, [r4, #2]
 801142c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011430:	80a3      	strh	r3, [r4, #4]
 8011432:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011436:	80e3      	strh	r3, [r4, #6]
 8011438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801143e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011442:	42b1      	cmp	r1, r6
 8011444:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011448:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801144c:	460f      	mov	r7, r1
 801144e:	88ed      	ldrh	r5, [r5, #6]
 8011450:	bfa8      	it	ge
 8011452:	4637      	movge	r7, r6
 8011454:	4293      	cmp	r3, r2
 8011456:	4618      	mov	r0, r3
 8011458:	4466      	add	r6, ip
 801145a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801145e:	bfa8      	it	ge
 8011460:	4610      	movge	r0, r2
 8011462:	442a      	add	r2, r5
 8011464:	88e5      	ldrh	r5, [r4, #6]
 8011466:	4461      	add	r1, ip
 8011468:	b236      	sxth	r6, r6
 801146a:	8027      	strh	r7, [r4, #0]
 801146c:	442b      	add	r3, r5
 801146e:	b209      	sxth	r1, r1
 8011470:	b212      	sxth	r2, r2
 8011472:	8060      	strh	r0, [r4, #2]
 8011474:	b21b      	sxth	r3, r3
 8011476:	428e      	cmp	r6, r1
 8011478:	bfac      	ite	ge
 801147a:	ebc7 0106 	rsbge	r1, r7, r6
 801147e:	ebc7 0101 	rsblt	r1, r7, r1
 8011482:	429a      	cmp	r2, r3
 8011484:	bfac      	ite	ge
 8011486:	ebc0 0202 	rsbge	r2, r0, r2
 801148a:	ebc0 0203 	rsblt	r2, r0, r3
 801148e:	80a1      	strh	r1, [r4, #4]
 8011490:	80e2      	strh	r2, [r4, #6]
 8011492:	e7d1      	b.n	8011438 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08011494 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8011494:	6800      	ldr	r0, [r0, #0]
 8011496:	2800      	cmp	r0, #0
 8011498:	bfb9      	ittee	lt
 801149a:	2320      	movlt	r3, #32
 801149c:	fb90 f0f3 	sdivlt	r0, r0, r3
 80114a0:	301f      	addge	r0, #31
 80114a2:	1140      	asrge	r0, r0, #5
 80114a4:	4770      	bx	lr

080114a6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80114a6:	b510      	push	{r4, lr}
 80114a8:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80114ac:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80114b0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80114b4:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80114b8:	139b      	asrs	r3, r3, #14
 80114ba:	13a4      	asrs	r4, r4, #14
 80114bc:	429c      	cmp	r4, r3
 80114be:	bfb8      	it	lt
 80114c0:	461c      	movlt	r4, r3
 80114c2:	2c01      	cmp	r4, #1
 80114c4:	dd07      	ble.n	80114d6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80114c6:	fb91 f1f4 	sdiv	r1, r1, r4
 80114ca:	fb90 f0f4 	sdiv	r0, r0, r4
 80114ce:	f7ff ffea 	bl	80114a6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80114d2:	4360      	muls	r0, r4
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	4340      	muls	r0, r0
 80114d8:	fb01 0101 	mla	r1, r1, r1, r0
 80114dc:	2000      	movs	r0, #0
 80114de:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80114e2:	bfb4      	ite	lt
 80114e4:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 80114e8:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 80114ec:	18c2      	adds	r2, r0, r3
 80114ee:	428a      	cmp	r2, r1
 80114f0:	bf9c      	itt	ls
 80114f2:	1898      	addls	r0, r3, r2
 80114f4:	1a89      	subls	r1, r1, r2
 80114f6:	089b      	lsrs	r3, r3, #2
 80114f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80114fc:	d1f6      	bne.n	80114ec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 80114fe:	e7e9      	b.n	80114d4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08011500 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8011500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011502:	9906      	ldr	r1, [sp, #24]
 8011504:	4606      	mov	r6, r0
 8011506:	461c      	mov	r4, r3
 8011508:	2020      	movs	r0, #32
 801150a:	4291      	cmp	r1, r2
 801150c:	bfbc      	itt	lt
 801150e:	9206      	strlt	r2, [sp, #24]
 8011510:	460a      	movlt	r2, r1
 8011512:	9907      	ldr	r1, [sp, #28]
 8011514:	428b      	cmp	r3, r1
 8011516:	bfc4      	itt	gt
 8011518:	460c      	movgt	r4, r1
 801151a:	9307      	strgt	r3, [sp, #28]
 801151c:	fb92 f5f0 	sdiv	r5, r2, r0
 8011520:	fb94 f4f0 	sdiv	r4, r4, r0
 8011524:	a806      	add	r0, sp, #24
 8011526:	f7ff ffb5 	bl	8011494 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801152a:	4607      	mov	r7, r0
 801152c:	a807      	add	r0, sp, #28
 801152e:	f7ff ffb1 	bl	8011494 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011532:	1b7a      	subs	r2, r7, r5
 8011534:	1b00      	subs	r0, r0, r4
 8011536:	8035      	strh	r5, [r6, #0]
 8011538:	8074      	strh	r4, [r6, #2]
 801153a:	80f0      	strh	r0, [r6, #6]
 801153c:	4630      	mov	r0, r6
 801153e:	80b2      	strh	r2, [r6, #4]
 8011540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011542 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8011542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011544:	9c08      	ldr	r4, [sp, #32]
 8011546:	2602      	movs	r6, #2
 8011548:	4605      	mov	r5, r0
 801154a:	3401      	adds	r4, #1
 801154c:	fb94 f4f6 	sdiv	r4, r4, r6
 8011550:	18a6      	adds	r6, r4, r2
 8011552:	191f      	adds	r7, r3, r4
 8011554:	1b12      	subs	r2, r2, r4
 8011556:	1b1b      	subs	r3, r3, r4
 8011558:	e9cd 6700 	strd	r6, r7, [sp]
 801155c:	f7ff ffd0 	bl	8011500 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8011560:	4628      	mov	r0, r5
 8011562:	b003      	add	sp, #12
 8011564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011566 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8011566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801156a:	6943      	ldr	r3, [r0, #20]
 801156c:	b087      	sub	sp, #28
 801156e:	4606      	mov	r6, r0
 8011570:	460d      	mov	r5, r1
 8011572:	2b00      	cmp	r3, #0
 8011574:	d072      	beq.n	801165c <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8011576:	695c      	ldr	r4, [r3, #20]
 8011578:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 801157c:	6823      	ldr	r3, [r4, #0]
 801157e:	4620      	mov	r0, r4
 8011580:	017f      	lsls	r7, r7, #5
 8011582:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8011586:	4798      	blx	r3
 8011588:	6823      	ldr	r3, [r4, #0]
 801158a:	4680      	mov	r8, r0
 801158c:	4629      	mov	r1, r5
 801158e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8011592:	4620      	mov	r0, r4
 8011594:	4798      	blx	r3
 8011596:	9700      	str	r7, [sp, #0]
 8011598:	4603      	mov	r3, r0
 801159a:	4642      	mov	r2, r8
 801159c:	4631      	mov	r1, r6
 801159e:	a802      	add	r0, sp, #8
 80115a0:	f7ff ffcf 	bl	8011542 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80115a4:	2d00      	cmp	r5, #0
 80115a6:	dd1b      	ble.n	80115e0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 80115a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80115ac:	6823      	ldr	r3, [r4, #0]
 80115ae:	4620      	mov	r0, r4
 80115b0:	fa0f f888 	sxth.w	r8, r8
 80115b4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80115b8:	4641      	mov	r1, r8
 80115ba:	4798      	blx	r3
 80115bc:	6823      	ldr	r3, [r4, #0]
 80115be:	4681      	mov	r9, r0
 80115c0:	4641      	mov	r1, r8
 80115c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80115c6:	4620      	mov	r0, r4
 80115c8:	4798      	blx	r3
 80115ca:	4631      	mov	r1, r6
 80115cc:	4603      	mov	r3, r0
 80115ce:	9700      	str	r7, [sp, #0]
 80115d0:	a804      	add	r0, sp, #16
 80115d2:	464a      	mov	r2, r9
 80115d4:	f7ff ffb5 	bl	8011542 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80115d8:	a904      	add	r1, sp, #16
 80115da:	a802      	add	r0, sp, #8
 80115dc:	f7ff ff15 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80115e0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80115e4:	3b01      	subs	r3, #1
 80115e6:	429d      	cmp	r5, r3
 80115e8:	da19      	bge.n	801161e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 80115ea:	3501      	adds	r5, #1
 80115ec:	6823      	ldr	r3, [r4, #0]
 80115ee:	4620      	mov	r0, r4
 80115f0:	b22d      	sxth	r5, r5
 80115f2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80115f6:	4629      	mov	r1, r5
 80115f8:	4798      	blx	r3
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	4680      	mov	r8, r0
 80115fe:	4629      	mov	r1, r5
 8011600:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8011604:	4620      	mov	r0, r4
 8011606:	4798      	blx	r3
 8011608:	4631      	mov	r1, r6
 801160a:	4603      	mov	r3, r0
 801160c:	9700      	str	r7, [sp, #0]
 801160e:	a804      	add	r0, sp, #16
 8011610:	4642      	mov	r2, r8
 8011612:	f7ff ff96 	bl	8011542 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8011616:	a904      	add	r1, sp, #16
 8011618:	a802      	add	r0, sp, #8
 801161a:	f7ff fef6 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801161e:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8011622:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8011626:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 801162a:	18ca      	adds	r2, r1, r3
 801162c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8011630:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011634:	a904      	add	r1, sp, #16
 8011636:	1a9b      	subs	r3, r3, r2
 8011638:	2200      	movs	r2, #0
 801163a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801163e:	a802      	add	r0, sp, #8
 8011640:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011644:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011648:	f7fc fecc 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 801164c:	6833      	ldr	r3, [r6, #0]
 801164e:	a902      	add	r1, sp, #8
 8011650:	4630      	mov	r0, r6
 8011652:	691b      	ldr	r3, [r3, #16]
 8011654:	4798      	blx	r3
 8011656:	b007      	add	sp, #28
 8011658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	deff      	udf	#255	@ 0xff

08011660 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8011660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	b08b      	sub	sp, #44	@ 0x2c
 8011666:	461e      	mov	r6, r3
 8011668:	460f      	mov	r7, r1
 801166a:	4615      	mov	r5, r2
 801166c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8011670:	429e      	cmp	r6, r3
 8011672:	9304      	str	r3, [sp, #16]
 8011674:	d074      	beq.n	8011760 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8011676:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801167a:	4631      	mov	r1, r6
 801167c:	4610      	mov	r0, r2
 801167e:	4634      	mov	r4, r6
 8011680:	015b      	lsls	r3, r3, #5
 8011682:	9303      	str	r3, [sp, #12]
 8011684:	6813      	ldr	r3, [r2, #0]
 8011686:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801168a:	4798      	blx	r3
 801168c:	ab0a      	add	r3, sp, #40	@ 0x28
 801168e:	f843 0d10 	str.w	r0, [r3, #-16]!
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff fc36 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8011698:	682b      	ldr	r3, [r5, #0]
 801169a:	4631      	mov	r1, r6
 801169c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80116a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80116a4:	4628      	mov	r0, r5
 80116a6:	4798      	blx	r3
 80116a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80116aa:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7ff fc28 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80116b4:	4641      	mov	r1, r8
 80116b6:	ea4f 1940 	mov.w	r9, r0, lsl #5
 80116ba:	4638      	mov	r0, r7
 80116bc:	464a      	mov	r2, r9
 80116be:	f010 fb41 	bl	8021d44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80116c2:	2301      	movs	r3, #1
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	4628      	mov	r0, r5
 80116c8:	9b00      	ldr	r3, [sp, #0]
 80116ca:	441c      	add	r4, r3
 80116cc:	682b      	ldr	r3, [r5, #0]
 80116ce:	b224      	sxth	r4, r4
 80116d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80116d4:	4621      	mov	r1, r4
 80116d6:	4798      	blx	r3
 80116d8:	9008      	str	r0, [sp, #32]
 80116da:	a808      	add	r0, sp, #32
 80116dc:	f7ff fc12 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80116e0:	4621      	mov	r1, r4
 80116e2:	0143      	lsls	r3, r0, #5
 80116e4:	4628      	mov	r0, r5
 80116e6:	9301      	str	r3, [sp, #4]
 80116e8:	682b      	ldr	r3, [r5, #0]
 80116ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80116ee:	4798      	blx	r3
 80116f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80116f2:	a809      	add	r0, sp, #36	@ 0x24
 80116f4:	f7ff fc06 	bl	8010f04 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80116f8:	0143      	lsls	r3, r0, #5
 80116fa:	9302      	str	r3, [sp, #8]
 80116fc:	9b01      	ldr	r3, [sp, #4]
 80116fe:	eba3 0b08 	sub.w	fp, r3, r8
 8011702:	9b02      	ldr	r3, [sp, #8]
 8011704:	eba3 0a09 	sub.w	sl, r3, r9
 8011708:	4658      	mov	r0, fp
 801170a:	4651      	mov	r1, sl
 801170c:	f7ff fecb 	bl	80114a6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011710:	b320      	cbz	r0, 801175c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8011712:	4602      	mov	r2, r0
 8011714:	4651      	mov	r1, sl
 8011716:	9005      	str	r0, [sp, #20]
 8011718:	9803      	ldr	r0, [sp, #12]
 801171a:	f004 fcf8 	bl	801610e <_ZN8touchgfx6muldivElll>
 801171e:	2302      	movs	r3, #2
 8011720:	4659      	mov	r1, fp
 8011722:	fb90 faf3 	sdiv	sl, r0, r3
 8011726:	9b05      	ldr	r3, [sp, #20]
 8011728:	9803      	ldr	r0, [sp, #12]
 801172a:	461a      	mov	r2, r3
 801172c:	f004 fcef 	bl	801610e <_ZN8touchgfx6muldivElll>
 8011730:	2302      	movs	r3, #2
 8011732:	eba8 010a 	sub.w	r1, r8, sl
 8011736:	fb90 fbf3 	sdiv	fp, r0, r3
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	eb0b 0209 	add.w	r2, fp, r9
 8011740:	4638      	mov	r0, r7
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	4798      	blx	r3
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	9a02      	ldr	r2, [sp, #8]
 801174a:	4638      	mov	r0, r7
 801174c:	9901      	ldr	r1, [sp, #4]
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	445a      	add	r2, fp
 8011752:	eba1 010a 	sub.w	r1, r1, sl
 8011756:	4798      	blx	r3
 8011758:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 801175c:	42a6      	cmp	r6, r4
 801175e:	db02      	blt.n	8011766 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8011760:	b00b      	add	sp, #44	@ 0x2c
 8011762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011766:	9b00      	ldr	r3, [sp, #0]
 8011768:	9a04      	ldr	r2, [sp, #16]
 801176a:	42a2      	cmp	r2, r4
 801176c:	bf08      	it	eq
 801176e:	f04f 33ff 	moveq.w	r3, #4294967295
 8011772:	e7a7      	b.n	80116c4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08011774 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8011774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	6943      	ldr	r3, [r0, #20]
 801177a:	b0a4      	sub	sp, #144	@ 0x90
 801177c:	4605      	mov	r5, r0
 801177e:	460f      	mov	r7, r1
 8011780:	2b00      	cmp	r3, #0
 8011782:	d077      	beq.n	8011874 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8011784:	695c      	ldr	r4, [r3, #20]
 8011786:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801178a:	2b01      	cmp	r3, #1
 801178c:	dc04      	bgt.n	8011798 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 801178e:	2401      	movs	r4, #1
 8011790:	4620      	mov	r0, r4
 8011792:	b024      	add	sp, #144	@ 0x90
 8011794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011798:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801179c:	ae24      	add	r6, sp, #144	@ 0x90
 801179e:	011b      	lsls	r3, r3, #4
 80117a0:	f846 3d74 	str.w	r3, [r6, #-116]!
 80117a4:	4630      	mov	r0, r6
 80117a6:	f7ff fe75 	bl	8011494 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80117aa:	8839      	ldrh	r1, [r7, #0]
 80117ac:	88ba      	ldrh	r2, [r7, #4]
 80117ae:	b280      	uxth	r0, r0
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	440a      	add	r2, r1
 80117b4:	1a09      	subs	r1, r1, r0
 80117b6:	4402      	add	r2, r0
 80117b8:	f10d 000a 	add.w	r0, sp, #10
 80117bc:	b209      	sxth	r1, r1
 80117be:	9000      	str	r0, [sp, #0]
 80117c0:	b212      	sxth	r2, r2
 80117c2:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80117c6:	4620      	mov	r0, r4
 80117c8:	ab02      	add	r3, sp, #8
 80117ca:	47c0      	blx	r8
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d0de      	beq.n	801178e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80117d0:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 80117d4:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80117d8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 80117dc:	18ca      	adds	r2, r1, r3
 80117de:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80117e2:	f8ad 100e 	strh.w	r1, [sp, #14]
 80117e6:	4639      	mov	r1, r7
 80117e8:	1a9b      	subs	r3, r3, r2
 80117ea:	2200      	movs	r2, #0
 80117ec:	f8ad 0010 	strh.w	r0, [sp, #16]
 80117f0:	a803      	add	r0, sp, #12
 80117f2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80117f6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80117fa:	f7fc fdf3 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 80117fe:	4629      	mov	r1, r5
 8011800:	a805      	add	r0, sp, #20
 8011802:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8011804:	f004 f830 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011808:	682b      	ldr	r3, [r5, #0]
 801180a:	4628      	mov	r0, r5
 801180c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801180e:	4798      	blx	r3
 8011810:	ab03      	add	r3, sp, #12
 8011812:	9000      	str	r0, [sp, #0]
 8011814:	aa05      	add	r2, sp, #20
 8011816:	4639      	mov	r1, r7
 8011818:	4630      	mov	r0, r6
 801181a:	f010 f947 	bl	8021aac <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801181e:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8011822:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8011826:	2f00      	cmp	r7, #0
 8011828:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801182c:	dd03      	ble.n	8011836 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801182e:	42bb      	cmp	r3, r7
 8011830:	da01      	bge.n	8011836 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8011832:	42ba      	cmp	r2, r7
 8011834:	da11      	bge.n	801185a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8011836:	9200      	str	r2, [sp, #0]
 8011838:	4622      	mov	r2, r4
 801183a:	4631      	mov	r1, r6
 801183c:	4628      	mov	r0, r5
 801183e:	f7ff ff0f 	bl	8011660 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8011842:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011846:	4630      	mov	r0, r6
 8011848:	f010 f9c4 	bl	8021bd4 <_ZN8touchgfx6Canvas6renderEh>
 801184c:	4b0b      	ldr	r3, [pc, #44]	@ (801187c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 801184e:	4604      	mov	r4, r0
 8011850:	a80c      	add	r0, sp, #48	@ 0x30
 8011852:	9307      	str	r3, [sp, #28]
 8011854:	f000 fbba 	bl	8011fcc <_ZN8touchgfx7OutlineD1Ev>
 8011858:	e79a      	b.n	8011790 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801185a:	1e7a      	subs	r2, r7, #1
 801185c:	4631      	mov	r1, r6
 801185e:	4628      	mov	r0, r5
 8011860:	b212      	sxth	r2, r2
 8011862:	9200      	str	r2, [sp, #0]
 8011864:	4622      	mov	r2, r4
 8011866:	f7ff fefb 	bl	8011660 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801186a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	463b      	mov	r3, r7
 8011872:	e7e1      	b.n	8011838 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8011874:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8011878:	deff      	udf	#255	@ 0xff
 801187a:	bf00      	nop
 801187c:	08025da8 	.word	0x08025da8

08011880 <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8011880:	b510      	push	{r4, lr}
 8011882:	4604      	mov	r4, r0
 8011884:	f7ff fc05 	bl	8011092 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8011888:	4620      	mov	r0, r4
 801188a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801188e:	f7ff b9d6 	b.w	8010c3e <_ZN8touchgfx17AbstractDataGraph5clearEv>

08011892 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 8011892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011894:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8011898:	460f      	mov	r7, r1
 801189a:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 801189e:	4604      	mov	r4, r0
 80118a0:	1c6b      	adds	r3, r5, #1
 80118a2:	4629      	mov	r1, r5
 80118a4:	f8a0 311e 	strh.w	r3, [r0, #286]	@ 0x11e
 80118a8:	6803      	ldr	r3, [r0, #0]
 80118aa:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80118ae:	4798      	blx	r3
 80118b0:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 80118b4:	b915      	cbnz	r5, 80118bc <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 80118b6:	4620      	mov	r0, r4
 80118b8:	f7ff fbeb 	bl	8011092 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80118bc:	4620      	mov	r0, r4
 80118be:	4629      	mov	r1, r5
 80118c0:	f7ff fbbf 	bl	8011042 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 80118c4:	4628      	mov	r0, r5
 80118c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080118c8 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 80118c8:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	@ 0x11e
 80118cc:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 80118d0:	4291      	cmp	r1, r2
 80118d2:	db03      	blt.n	80118dc <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 80118d4:	6803      	ldr	r3, [r0, #0]
 80118d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80118da:	4718      	bx	r3
 80118dc:	4770      	bx	lr
	...

080118e0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80118e0:	4b07      	ldr	r3, [pc, #28]	@ (8011900 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80118e2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	4293      	cmp	r3, r2
 80118e8:	bf81      	itttt	hi
 80118ea:	4b06      	ldrhi	r3, [pc, #24]	@ (8011904 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80118ec:	681b      	ldrhi	r3, [r3, #0]
 80118ee:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80118f2:	7858      	ldrbhi	r0, [r3, #1]
 80118f4:	bf8c      	ite	hi
 80118f6:	f000 0003 	andhi.w	r0, r0, #3
 80118fa:	2000      	movls	r0, #0
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	2402db08 	.word	0x2402db08
 8011904:	2402db04 	.word	0x2402db04

08011908 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8011908:	4b11      	ldr	r3, [pc, #68]	@ (8011950 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801190a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801190e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011910:	4604      	mov	r4, r0
 8011912:	881b      	ldrh	r3, [r3, #0]
 8011914:	428b      	cmp	r3, r1
 8011916:	d918      	bls.n	801194a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8011918:	6803      	ldr	r3, [r0, #0]
 801191a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 801191c:	4b0d      	ldr	r3, [pc, #52]	@ (8011954 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801191e:	6818      	ldr	r0, [r3, #0]
 8011920:	f7f4 ffae 	bl	8006880 <_ZNK8touchgfx5Texts7getTextEt>
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	4606      	mov	r6, r0
 8011928:	4620      	mov	r0, r4
 801192a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801192c:	4798      	blx	r3
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	4607      	mov	r7, r0
 8011932:	4620      	mov	r0, r4
 8011934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011938:	4798      	blx	r3
 801193a:	463a      	mov	r2, r7
 801193c:	4603      	mov	r3, r0
 801193e:	4631      	mov	r1, r6
 8011940:	4620      	mov	r0, r4
 8011942:	46ac      	mov	ip, r5
 8011944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011948:	4760      	bx	ip
 801194a:	2000      	movs	r0, #0
 801194c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011950:	2402db08 	.word	0x2402db08
 8011954:	2402db10 	.word	0x2402db10

08011958 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8011958:	4b18      	ldr	r3, [pc, #96]	@ (80119bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801195a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801195e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011960:	4604      	mov	r4, r0
 8011962:	881b      	ldrh	r3, [r3, #0]
 8011964:	428b      	cmp	r3, r1
 8011966:	d926      	bls.n	80119b6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8011968:	4b15      	ldr	r3, [pc, #84]	@ (80119c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8011970:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011974:	4b13      	ldr	r3, [pc, #76]	@ (80119c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011976:	7855      	ldrb	r5, [r2, #1]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801197e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011982:	6833      	ldr	r3, [r6, #0]
 8011984:	69df      	ldr	r7, [r3, #28]
 8011986:	4b10      	ldr	r3, [pc, #64]	@ (80119c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	f7f4 ff79 	bl	8006880 <_ZNK8touchgfx5Texts7getTextEt>
 801198e:	6823      	ldr	r3, [r4, #0]
 8011990:	4680      	mov	r8, r0
 8011992:	4620      	mov	r0, r4
 8011994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011996:	4798      	blx	r3
 8011998:	6823      	ldr	r3, [r4, #0]
 801199a:	4681      	mov	r9, r0
 801199c:	4620      	mov	r0, r4
 801199e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119a2:	4798      	blx	r3
 80119a4:	464b      	mov	r3, r9
 80119a6:	9000      	str	r0, [sp, #0]
 80119a8:	4642      	mov	r2, r8
 80119aa:	4629      	mov	r1, r5
 80119ac:	4630      	mov	r0, r6
 80119ae:	47b8      	blx	r7
 80119b0:	b003      	add	sp, #12
 80119b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119b6:	2000      	movs	r0, #0
 80119b8:	e7fa      	b.n	80119b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80119ba:	bf00      	nop
 80119bc:	2402db08 	.word	0x2402db08
 80119c0:	2402db04 	.word	0x2402db04
 80119c4:	2402db0c 	.word	0x2402db0c
 80119c8:	2402db10 	.word	0x2402db10

080119cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80119cc:	b40e      	push	{r1, r2, r3}
 80119ce:	4b30      	ldr	r3, [pc, #192]	@ (8011a90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80119d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d4:	881a      	ldrh	r2, [r3, #0]
 80119d6:	b09d      	sub	sp, #116	@ 0x74
 80119d8:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80119da:	4604      	mov	r4, r0
 80119dc:	429a      	cmp	r2, r3
 80119de:	d954      	bls.n	8011a8a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80119e0:	aa26      	add	r2, sp, #152	@ 0x98
 80119e2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8011a94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80119e6:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8011a98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80119ea:	9202      	str	r2, [sp, #8]
 80119ec:	f8d9 2000 	ldr.w	r2, [r9]
 80119f0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80119f4:	f8d8 3000 	ldr.w	r3, [r8]
 80119f8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	4628      	mov	r0, r5
 8011a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a02:	4798      	blx	r3
 8011a04:	4606      	mov	r6, r0
 8011a06:	b207      	sxth	r7, r0
 8011a08:	a803      	add	r0, sp, #12
 8011a0a:	f004 fedd 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 8011a0e:	682b      	ldr	r3, [r5, #0]
 8011a10:	4628      	mov	r0, r5
 8011a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a14:	4798      	blx	r3
 8011a16:	682b      	ldr	r3, [r5, #0]
 8011a18:	4682      	mov	sl, r0
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a1e:	4798      	blx	r3
 8011a20:	4653      	mov	r3, sl
 8011a22:	9000      	str	r0, [sp, #0]
 8011a24:	a803      	add	r0, sp, #12
 8011a26:	9a02      	ldr	r2, [sp, #8]
 8011a28:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011a2a:	f004 ff20 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011a2e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011a30:	f8d9 3000 	ldr.w	r3, [r9]
 8011a34:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8011a38:	8925      	ldrh	r5, [r4, #8]
 8011a3a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8011a3e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8011a42:	eba5 050c 	sub.w	r5, r5, ip
 8011a46:	784a      	ldrb	r2, [r1, #1]
 8011a48:	f8d8 3000 	ldr.w	r3, [r8]
 8011a4c:	b22d      	sxth	r5, r5
 8011a4e:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8011a52:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011a56:	9500      	str	r5, [sp, #0]
 8011a58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011a5c:	a803      	add	r0, sp, #12
 8011a5e:	f002 f9a3 	bl	8013da8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8011a62:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8011a66:	b203      	sxth	r3, r0
 8011a68:	18b9      	adds	r1, r7, r2
 8011a6a:	2900      	cmp	r1, #0
 8011a6c:	dd0b      	ble.n	8011a86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8011a6e:	3b01      	subs	r3, #1
 8011a70:	fb13 f302 	smulbb	r3, r3, r2
 8011a74:	fb16 3300 	smlabb	r3, r6, r0, r3
 8011a78:	b21f      	sxth	r7, r3
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	b01d      	add	sp, #116	@ 0x74
 8011a7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a82:	b003      	add	sp, #12
 8011a84:	4770      	bx	lr
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	dcf7      	bgt.n	8011a7a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8011a8a:	2700      	movs	r7, #0
 8011a8c:	e7f5      	b.n	8011a7a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8011a8e:	bf00      	nop
 8011a90:	2402db08 	.word	0x2402db08
 8011a94:	2402db04 	.word	0x2402db04
 8011a98:	2402db0c 	.word	0x2402db0c

08011a9c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	6803      	ldr	r3, [r0, #0]
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	4615      	mov	r5, r2
 8011aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aa6:	4798      	blx	r3
 8011aa8:	6823      	ldr	r3, [r4, #0]
 8011aaa:	4629      	mov	r1, r5
 8011aac:	4620      	mov	r0, r4
 8011aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ab4:	4718      	bx	r3
	...

08011ab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4b0e      	ldr	r3, [pc, #56]	@ (8011af4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8011abc:	4604      	mov	r4, r0
 8011abe:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d214      	bcs.n	8011af0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8011ac6:	6803      	ldr	r3, [r0, #0]
 8011ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011aca:	4798      	blx	r3
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	4605      	mov	r5, r0
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ad4:	4798      	blx	r3
 8011ad6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011ada:	b22d      	sxth	r5, r5
 8011adc:	4601      	mov	r1, r0
 8011ade:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8011ae2:	bf06      	itte	eq
 8011ae4:	4602      	moveq	r2, r0
 8011ae6:	4629      	moveq	r1, r5
 8011ae8:	462a      	movne	r2, r5
 8011aea:	4620      	mov	r0, r4
 8011aec:	f7ff ffd6 	bl	8011a9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8011af0:	bd38      	pop	{r3, r4, r5, pc}
 8011af2:	bf00      	nop
 8011af4:	2402db08 	.word	0x2402db08

08011af8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8011af8:	b530      	push	{r4, r5, lr}
 8011afa:	888b      	ldrh	r3, [r1, #4]
 8011afc:	b085      	sub	sp, #20
 8011afe:	4604      	mov	r4, r0
 8011b00:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011b02:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011b06:	b923      	cbnz	r3, 8011b12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011b08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011b0c:	b90b      	cbnz	r3, 8011b12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011b0e:	f7ff ffd3 	bl	8011ab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8011b12:	6823      	ldr	r3, [r4, #0]
 8011b14:	466d      	mov	r5, sp
 8011b16:	4621      	mov	r1, r4
 8011b18:	343c      	adds	r4, #60	@ 0x3c
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b20:	4798      	blx	r3
 8011b22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011b2a:	b005      	add	sp, #20
 8011b2c:	bd30      	pop	{r4, r5, pc}

08011b2e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011b2e:	2300      	movs	r3, #0
 8011b30:	8083      	strh	r3, [r0, #4]
 8011b32:	80c3      	strh	r3, [r0, #6]
 8011b34:	8003      	strh	r3, [r0, #0]
 8011b36:	8043      	strh	r3, [r0, #2]
 8011b38:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8011b3c:	2bff      	cmp	r3, #255	@ 0xff
 8011b3e:	bf01      	itttt	eq
 8011b40:	890b      	ldrheq	r3, [r1, #8]
 8011b42:	8083      	strheq	r3, [r0, #4]
 8011b44:	894b      	ldrheq	r3, [r1, #10]
 8011b46:	80c3      	strheq	r3, [r0, #6]
 8011b48:	4770      	bx	lr
	...

08011b4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b4e:	4604      	mov	r4, r0
 8011b50:	466b      	mov	r3, sp
 8011b52:	6808      	ldr	r0, [r1, #0]
 8011b54:	6849      	ldr	r1, [r1, #4]
 8011b56:	c303      	stmia	r3!, {r0, r1}
 8011b58:	6823      	ldr	r3, [r4, #0]
 8011b5a:	4669      	mov	r1, sp
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b60:	4798      	blx	r3
 8011b62:	4b08      	ldr	r3, [pc, #32]	@ (8011b84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011b6a:	b10a      	cbz	r2, 8011b70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011b6c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011b6e:	b900      	cbnz	r0, 8011b72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011b70:	6898      	ldr	r0, [r3, #8]
 8011b72:	6803      	ldr	r3, [r0, #0]
 8011b74:	4669      	mov	r1, sp
 8011b76:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011b78:	6a1d      	ldr	r5, [r3, #32]
 8011b7a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011b7e:	47a8      	blx	r5
 8011b80:	b003      	add	sp, #12
 8011b82:	bd30      	pop	{r4, r5, pc}
 8011b84:	2402daac 	.word	0x2402daac

08011b88 <_ZN8touchgfx3BoxD1Ev>:
 8011b88:	4770      	bx	lr

08011b8a <_ZN8touchgfx3BoxD0Ev>:
 8011b8a:	b510      	push	{r4, lr}
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	212c      	movs	r1, #44	@ 0x2c
 8011b90:	f010 fc0c 	bl	80223ac <_ZdlPvj>
 8011b94:	4620      	mov	r0, r4
 8011b96:	bd10      	pop	{r4, pc}

08011b98 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011b98:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8011b9c:	b12a      	cbz	r2, 8011baa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011b9e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011ba2:	b112      	cbz	r2, 8011baa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011ba4:	6803      	ldr	r3, [r0, #0]
 8011ba6:	695b      	ldr	r3, [r3, #20]
 8011ba8:	4718      	bx	r3
 8011baa:	4770      	bx	lr

08011bac <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8011bac:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011bb0:	4770      	bx	lr

08011bb2 <_ZN8touchgfx6ButtonD1Ev>:
 8011bb2:	4770      	bx	lr

08011bb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	880b      	ldrh	r3, [r1, #0]
 8011bb8:	4605      	mov	r5, r0
 8011bba:	4604      	mov	r4, r0
 8011bbc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8011bbe:	8813      	ldrh	r3, [r2, #0]
 8011bc0:	f825 3f30 	strh.w	r3, [r5, #48]!
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f006 fc29 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011bca:	4606      	mov	r6, r0
 8011bcc:	4628      	mov	r0, r5
 8011bce:	f006 fc59 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	4631      	mov	r1, r6
 8011bd8:	4620      	mov	r0, r4
 8011bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bdc:	4798      	blx	r3
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4629      	mov	r1, r5
 8011be2:	4620      	mov	r0, r4
 8011be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bea:	4718      	bx	r3

08011bec <_ZN8touchgfx6ButtonD0Ev>:
 8011bec:	b510      	push	{r4, lr}
 8011bee:	4604      	mov	r4, r0
 8011bf0:	2134      	movs	r1, #52	@ 0x34
 8011bf2:	f010 fbdb 	bl	80223ac <_ZdlPvj>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	bd10      	pop	{r4, pc}

08011bfa <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8011bfa:	b510      	push	{r4, lr}
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8011c00:	b150      	cbz	r0, 8011c18 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011c02:	6803      	ldr	r3, [r0, #0]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	4798      	blx	r3
 8011c08:	b130      	cbz	r0, 8011c18 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011c0a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011c0c:	4621      	mov	r1, r4
 8011c0e:	6803      	ldr	r3, [r0, #0]
 8011c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c14:	689b      	ldr	r3, [r3, #8]
 8011c16:	4718      	bx	r3
 8011c18:	bd10      	pop	{r4, pc}

08011c1a <_ZNK8touchgfx6Button12getSolidRectEv>:
 8011c1a:	b510      	push	{r4, lr}
 8011c1c:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8011c20:	4604      	mov	r4, r0
 8011c22:	2bff      	cmp	r3, #255	@ 0xff
 8011c24:	d006      	beq.n	8011c34 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8011c26:	2300      	movs	r3, #0
 8011c28:	8003      	strh	r3, [r0, #0]
 8011c2a:	8043      	strh	r3, [r0, #2]
 8011c2c:	8083      	strh	r3, [r0, #4]
 8011c2e:	80c3      	strh	r3, [r0, #6]
 8011c30:	4620      	mov	r0, r4
 8011c32:	bd10      	pop	{r4, pc}
 8011c34:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8011c38:	b11b      	cbz	r3, 8011c42 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8011c3a:	3130      	adds	r1, #48	@ 0x30
 8011c3c:	f006 fc56 	bl	80184ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011c40:	e7f6      	b.n	8011c30 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8011c42:	312e      	adds	r1, #46	@ 0x2e
 8011c44:	e7fa      	b.n	8011c3c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08011c48 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8011c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011c50:	b08a      	sub	sp, #40	@ 0x28
 8011c52:	4604      	mov	r4, r0
 8011c54:	4688      	mov	r8, r1
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d066      	beq.n	8011d28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8011c5a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8011c5c:	a805      	add	r0, sp, #20
 8011c5e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011c62:	f006 fbdb 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011c66:	4607      	mov	r7, r0
 8011c68:	a805      	add	r0, sp, #20
 8011c6a:	f006 fc0b 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011c6e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8011c72:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011c76:	2300      	movs	r3, #0
 8011c78:	4432      	add	r2, r6
 8011c7a:	9306      	str	r3, [sp, #24]
 8011c7c:	b292      	uxth	r2, r2
 8011c7e:	fa0f fc82 	sxth.w	ip, r2
 8011c82:	459c      	cmp	ip, r3
 8011c84:	dd52      	ble.n	8011d2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c86:	42b7      	cmp	r7, r6
 8011c88:	dd50      	ble.n	8011d2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c8a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8011c8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011c92:	442b      	add	r3, r5
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	b219      	sxth	r1, r3
 8011c98:	2900      	cmp	r1, #0
 8011c9a:	dd47      	ble.n	8011d2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c9c:	42a8      	cmp	r0, r5
 8011c9e:	dd45      	ble.n	8011d2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011ca0:	4567      	cmp	r7, ip
 8011ca2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011ca6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011caa:	bfb8      	it	lt
 8011cac:	b2ba      	uxthlt	r2, r7
 8011cae:	4288      	cmp	r0, r1
 8011cb0:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011cb4:	bfb8      	it	lt
 8011cb6:	b283      	uxthlt	r3, r0
 8011cb8:	1b92      	subs	r2, r2, r6
 8011cba:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011cbe:	1b5b      	subs	r3, r3, r5
 8011cc0:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011cc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011cc8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d026      	beq.n	8011d22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011cd4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	dd22      	ble.n	8011d22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011cdc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	dd1e      	ble.n	8011d22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	a908      	add	r1, sp, #32
 8011ce8:	4620      	mov	r0, r4
 8011cea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cf2:	4798      	blx	r3
 8011cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8011d34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011cfc:	b10a      	cbz	r2, 8011d02 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8011cfe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011d00:	b900      	cbnz	r0, 8011d04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8011d02:	6898      	ldr	r0, [r3, #8]
 8011d04:	2501      	movs	r5, #1
 8011d06:	6801      	ldr	r1, [r0, #0]
 8011d08:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8011d0c:	9502      	str	r5, [sp, #8]
 8011d0e:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8011d12:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011d16:	9401      	str	r4, [sp, #4]
 8011d18:	ac06      	add	r4, sp, #24
 8011d1a:	9400      	str	r4, [sp, #0]
 8011d1c:	688c      	ldr	r4, [r1, #8]
 8011d1e:	a905      	add	r1, sp, #20
 8011d20:	47a0      	blx	r4
 8011d22:	b00a      	add	sp, #40	@ 0x28
 8011d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d28:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8011d2a:	e797      	b.n	8011c5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	9307      	str	r3, [sp, #28]
 8011d30:	e7ca      	b.n	8011cc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8011d32:	bf00      	nop
 8011d34:	2402daac 	.word	0x2402daac

08011d38 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8011d38:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8011d3c:	b12a      	cbz	r2, 8011d4a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011d3e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011d42:	b112      	cbz	r2, 8011d4a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011d44:	6803      	ldr	r3, [r0, #0]
 8011d46:	695b      	ldr	r3, [r3, #20]
 8011d48:	4718      	bx	r3
 8011d4a:	4770      	bx	lr

08011d4c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8011d4c:	4b30      	ldr	r3, [pc, #192]	@ (8011e10 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8011d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d52:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011d54:	b08d      	sub	sp, #52	@ 0x34
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	4604      	mov	r4, r0
 8011d5a:	460f      	mov	r7, r1
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d954      	bls.n	8011e0a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011d60:	4b2c      	ldr	r3, [pc, #176]	@ (8011e14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8011d62:	6819      	ldr	r1, [r3, #0]
 8011d64:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8011d68:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8011d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8011e18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8011d6e:	6812      	ldr	r2, [r2, #0]
 8011d70:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011d74:	2900      	cmp	r1, #0
 8011d76:	d048      	beq.n	8011e0a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011d78:	785a      	ldrb	r2, [r3, #1]
 8011d7a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8011d7e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8011d82:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011d86:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011d8a:	4b24      	ldr	r3, [pc, #144]	@ (8011e1c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8011d8c:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8011d96:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8011d9a:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8011d9e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011da0:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8011da4:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8011da8:	9107      	str	r1, [sp, #28]
 8011daa:	f88d 8020 	strb.w	r8, [sp, #32]
 8011dae:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8011db2:	9609      	str	r6, [sp, #36]	@ 0x24
 8011db4:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8011db8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011dbc:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8011dc0:	b10b      	cbz	r3, 8011dc6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8011dc2:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8011dc4:	b905      	cbnz	r5, 8011dc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8011dc6:	6895      	ldr	r5, [r2, #8]
 8011dc8:	ae05      	add	r6, sp, #20
 8011dca:	4621      	mov	r1, r4
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f003 fd4b 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011dd2:	4b13      	ldr	r3, [pc, #76]	@ (8011e20 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8011dd4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8011dd6:	6818      	ldr	r0, [r3, #0]
 8011dd8:	f7f4 fd52 	bl	8006880 <_ZNK8touchgfx5Texts7getTextEt>
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	4680      	mov	r8, r0
 8011de0:	4620      	mov	r0, r4
 8011de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011de4:	4798      	blx	r3
 8011de6:	6823      	ldr	r3, [r4, #0]
 8011de8:	4681      	mov	r9, r0
 8011dea:	4620      	mov	r0, r4
 8011dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011df0:	4798      	blx	r3
 8011df2:	ab07      	add	r3, sp, #28
 8011df4:	f8cd 8004 	str.w	r8, [sp, #4]
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	463b      	mov	r3, r7
 8011dfc:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8011e00:	4628      	mov	r0, r5
 8011e02:	e896 0006 	ldmia.w	r6, {r1, r2}
 8011e06:	f7f4 fced 	bl	80067e4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011e0a:	b00d      	add	sp, #52	@ 0x34
 8011e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e10:	2402db08 	.word	0x2402db08
 8011e14:	2402db04 	.word	0x2402db04
 8011e18:	2402db0c 	.word	0x2402db0c
 8011e1c:	2402daac 	.word	0x2402daac
 8011e20:	2402db10 	.word	0x2402db10

08011e24 <_ZN8touchgfx5ImageD1Ev>:
 8011e24:	4770      	bx	lr

08011e26 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011e26:	b570      	push	{r4, r5, r6, lr}
 8011e28:	880b      	ldrh	r3, [r1, #0]
 8011e2a:	460d      	mov	r5, r1
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011e30:	4608      	mov	r0, r1
 8011e32:	f006 faf3 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011e36:	4606      	mov	r6, r0
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f006 fb23 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011e3e:	6823      	ldr	r3, [r4, #0]
 8011e40:	4605      	mov	r5, r0
 8011e42:	4631      	mov	r1, r6
 8011e44:	4620      	mov	r0, r4
 8011e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e48:	4798      	blx	r3
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	4629      	mov	r1, r5
 8011e4e:	4620      	mov	r0, r4
 8011e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e56:	4718      	bx	r3

08011e58 <_ZN8touchgfx5ImageD0Ev>:
 8011e58:	b510      	push	{r4, lr}
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	212c      	movs	r1, #44	@ 0x2c
 8011e5e:	f010 faa5 	bl	80223ac <_ZdlPvj>
 8011e62:	4620      	mov	r0, r4
 8011e64:	bd10      	pop	{r4, pc}

08011e66 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011e66:	b510      	push	{r4, lr}
 8011e68:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	2bff      	cmp	r3, #255	@ 0xff
 8011e70:	d006      	beq.n	8011e80 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011e72:	2300      	movs	r3, #0
 8011e74:	8003      	strh	r3, [r0, #0]
 8011e76:	8043      	strh	r3, [r0, #2]
 8011e78:	8083      	strh	r3, [r0, #4]
 8011e7a:	80c3      	strh	r3, [r0, #6]
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	bd10      	pop	{r4, pc}
 8011e80:	3126      	adds	r1, #38	@ 0x26
 8011e82:	f006 fb33 	bl	80184ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011e86:	e7f9      	b.n	8011e7c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011e88 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8011e88:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8011e8c:	b12a      	cbz	r2, 8011e9a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011e8e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011e92:	b112      	cbz	r2, 8011e9a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011e94:	6803      	ldr	r3, [r0, #0]
 8011e96:	695b      	ldr	r3, [r3, #20]
 8011e98:	4718      	bx	r3
 8011e9a:	4770      	bx	lr

08011e9c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	b088      	sub	sp, #32
 8011ea4:	2500      	movs	r5, #0
 8011ea6:	460f      	mov	r7, r1
 8011ea8:	f854 3b26 	ldr.w	r3, [r4], #38
 8011eac:	a904      	add	r1, sp, #16
 8011eae:	4606      	mov	r6, r0
 8011eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011eb6:	4798      	blx	r3
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f006 faaf 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011ebe:	4680      	mov	r8, r0
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f006 fadf 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011ec6:	9506      	str	r5, [sp, #24]
 8011ec8:	ad06      	add	r5, sp, #24
 8011eca:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011ece:	4639      	mov	r1, r7
 8011ed0:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	f7fc fa85 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 8011eda:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	dd19      	ble.n	8011f16 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011ee2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	dd15      	ble.n	8011f16 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011eea:	4b0c      	ldr	r3, [pc, #48]	@ (8011f1c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011ef2:	b10a      	cbz	r2, 8011ef8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011ef4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011ef6:	b900      	cbnz	r0, 8011efa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011ef8:	6898      	ldr	r0, [r3, #8]
 8011efa:	2701      	movs	r7, #1
 8011efc:	6801      	ldr	r1, [r0, #0]
 8011efe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011f02:	9702      	str	r7, [sp, #8]
 8011f04:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8011f08:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011f0c:	e9cd 5600 	strd	r5, r6, [sp]
 8011f10:	688d      	ldr	r5, [r1, #8]
 8011f12:	4621      	mov	r1, r4
 8011f14:	47a8      	blx	r5
 8011f16:	b008      	add	sp, #32
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	2402daac 	.word	0x2402daac

08011f20 <_ZN8touchgfx15PixelDataWidgetD1Ev>:
 8011f20:	4770      	bx	lr

08011f22 <_ZN8touchgfx15PixelDataWidgetD0Ev>:
 8011f22:	b510      	push	{r4, lr}
 8011f24:	4604      	mov	r4, r0
 8011f26:	2130      	movs	r1, #48	@ 0x30
 8011f28:	f010 fa40 	bl	80223ac <_ZdlPvj>
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	bd10      	pop	{r4, pc}

08011f30 <_ZNK8touchgfx15PixelDataWidget12getSolidRectEv>:
 8011f30:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8011f32:	b510      	push	{r4, lr}
 8011f34:	b1b3      	cbz	r3, 8011f64 <_ZNK8touchgfx15PixelDataWidget12getSolidRectEv+0x34>
 8011f36:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8011f3a:	2bff      	cmp	r3, #255	@ 0xff
 8011f3c:	d112      	bne.n	8011f64 <_ZNK8touchgfx15PixelDataWidget12getSolidRectEv+0x34>
 8011f3e:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 8011f42:	2a06      	cmp	r2, #6
 8011f44:	d80e      	bhi.n	8011f64 <_ZNK8touchgfx15PixelDataWidget12getSolidRectEv+0x34>
 8011f46:	2301      	movs	r3, #1
 8011f48:	4093      	lsls	r3, r2
 8011f4a:	f013 0f7b 	tst.w	r3, #123	@ 0x7b
 8011f4e:	d009      	beq.n	8011f64 <_ZNK8touchgfx15PixelDataWidget12getSolidRectEv+0x34>
 8011f50:	2300      	movs	r3, #0
 8011f52:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8011f56:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8011f5a:	8003      	strh	r3, [r0, #0]
 8011f5c:	8043      	strh	r3, [r0, #2]
 8011f5e:	8084      	strh	r4, [r0, #4]
 8011f60:	80c2      	strh	r2, [r0, #6]
 8011f62:	bd10      	pop	{r4, pc}
 8011f64:	2300      	movs	r3, #0
 8011f66:	8003      	strh	r3, [r0, #0]
 8011f68:	8043      	strh	r3, [r0, #2]
 8011f6a:	8083      	strh	r3, [r0, #4]
 8011f6c:	80c3      	strh	r3, [r0, #6]
 8011f6e:	e7f8      	b.n	8011f62 <_ZNK8touchgfx15PixelDataWidget12getSolidRectEv+0x32>

08011f70 <_ZNK8touchgfx15PixelDataWidget4drawERKNS_4RectE>:
 8011f70:	b530      	push	{r4, r5, lr}
 8011f72:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011f74:	b087      	sub	sp, #28
 8011f76:	4604      	mov	r4, r0
 8011f78:	460d      	mov	r5, r1
 8011f7a:	b1c3      	cbz	r3, 8011fae <_ZNK8touchgfx15PixelDataWidget4drawERKNS_4RectE+0x3e>
 8011f7c:	4601      	mov	r1, r0
 8011f7e:	a804      	add	r0, sp, #16
 8011f80:	f003 fc72 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011f84:	4b0b      	ldr	r3, [pc, #44]	@ (8011fb4 <_ZNK8touchgfx15PixelDataWidget4drawERKNS_4RectE+0x44>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011f8c:	b10a      	cbz	r2, 8011f92 <_ZNK8touchgfx15PixelDataWidget4drawERKNS_4RectE+0x22>
 8011f8e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011f90:	b900      	cbnz	r0, 8011f94 <_ZNK8touchgfx15PixelDataWidget4drawERKNS_4RectE+0x24>
 8011f92:	6898      	ldr	r0, [r3, #8]
 8011f94:	2100      	movs	r1, #0
 8011f96:	6803      	ldr	r3, [r0, #0]
 8011f98:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8011f9c:	9102      	str	r1, [sp, #8]
 8011f9e:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8011fa2:	e9cd 5100 	strd	r5, r1, [sp]
 8011fa6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011fa8:	691d      	ldr	r5, [r3, #16]
 8011faa:	ab04      	add	r3, sp, #16
 8011fac:	47a8      	blx	r5
 8011fae:	b007      	add	sp, #28
 8011fb0:	bd30      	pop	{r4, r5, pc}
 8011fb2:	bf00      	nop
 8011fb4:	2402daac 	.word	0x2402daac

08011fb8 <_ZNK8touchgfx15PixelDataWidget17invalidateContentEv>:
 8011fb8:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8011fbc:	b12a      	cbz	r2, 8011fca <_ZNK8touchgfx15PixelDataWidget17invalidateContentEv+0x12>
 8011fbe:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011fc2:	b112      	cbz	r2, 8011fca <_ZNK8touchgfx15PixelDataWidget17invalidateContentEv+0x12>
 8011fc4:	6803      	ldr	r3, [r0, #0]
 8011fc6:	695b      	ldr	r3, [r3, #20]
 8011fc8:	4718      	bx	r3
 8011fca:	4770      	bx	lr

08011fcc <_ZN8touchgfx7OutlineD1Ev>:
 8011fcc:	4770      	bx	lr

08011fce <_ZN8touchgfx7OutlineD0Ev>:
 8011fce:	b510      	push	{r4, lr}
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	2130      	movs	r1, #48	@ 0x30
 8011fd4:	f010 f9ea 	bl	80223ac <_ZdlPvj>
 8011fd8:	4620      	mov	r0, r4
 8011fda:	bd10      	pop	{r4, pc}

08011fdc <_ZN8touchgfx7Outline5resetEv>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	4604      	mov	r4, r0
 8011fe0:	f000 fe86 	bl	8012cf0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8011fe4:	60e0      	str	r0, [r4, #12]
 8011fe6:	f000 fe89 	bl	8012cfc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8011fea:	68e3      	ldr	r3, [r4, #12]
 8011fec:	08c0      	lsrs	r0, r0, #3
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	3801      	subs	r0, #1
 8011ff8:	60a2      	str	r2, [r4, #8]
 8011ffa:	6060      	str	r0, [r4, #4]
 8011ffc:	8019      	strh	r1, [r3, #0]
 8011ffe:	8059      	strh	r1, [r3, #2]
 8012000:	809a      	strh	r2, [r3, #4]
 8012002:	80da      	strh	r2, [r3, #6]
 8012004:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012006:	f023 0301 	bic.w	r3, r3, #1
 801200a:	f043 0302 	orr.w	r3, r3, #2
 801200e:	6263      	str	r3, [r4, #36]	@ 0x24
 8012010:	bd10      	pop	{r4, pc}
	...

08012014 <_ZN8touchgfx7OutlineC1Ev>:
 8012014:	4b0a      	ldr	r3, [pc, #40]	@ (8012040 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8012016:	b510      	push	{r4, lr}
 8012018:	6003      	str	r3, [r0, #0]
 801201a:	2300      	movs	r3, #0
 801201c:	4604      	mov	r4, r0
 801201e:	6243      	str	r3, [r0, #36]	@ 0x24
 8012020:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8012024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012028:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801202c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8012030:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012034:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8012038:	f7ff ffd0 	bl	8011fdc <_ZN8touchgfx7Outline5resetEv>
 801203c:	4620      	mov	r0, r4
 801203e:	bd10      	pop	{r4, pc}
 8012040:	08025a28 	.word	0x08025a28

08012044 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8012044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012048:	b093      	sub	sp, #76	@ 0x4c
 801204a:	1156      	asrs	r6, r2, #5
 801204c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801204e:	9305      	str	r3, [sp, #20]
 8012050:	1153      	asrs	r3, r2, #5
 8012052:	f004 051f 	and.w	r5, r4, #31
 8012056:	9303      	str	r3, [sp, #12]
 8012058:	1163      	asrs	r3, r4, #5
 801205a:	9504      	str	r5, [sp, #16]
 801205c:	1165      	asrs	r5, r4, #5
 801205e:	9306      	str	r3, [sp, #24]
 8012060:	f002 031f 	and.w	r3, r2, #31
 8012064:	42ae      	cmp	r6, r5
 8012066:	f040 80f4 	bne.w	8012252 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801206a:	9c04      	ldr	r4, [sp, #16]
 801206c:	9a05      	ldr	r2, [sp, #20]
 801206e:	42a3      	cmp	r3, r4
 8012070:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8012074:	6902      	ldr	r2, [r0, #16]
 8012076:	d125      	bne.n	80120c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8012078:	f9b2 3000 	ldrsh.w	r3, [r2]
 801207c:	459e      	cmp	lr, r3
 801207e:	d103      	bne.n	8012088 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8012080:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012084:	429e      	cmp	r6, r3
 8012086:	d035      	beq.n	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012088:	88d1      	ldrh	r1, [r2, #6]
 801208a:	8893      	ldrh	r3, [r2, #4]
 801208c:	430b      	orrs	r3, r1
 801208e:	d010      	beq.n	80120b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8012090:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012094:	2b00      	cmp	r3, #0
 8012096:	db0c      	blt.n	80120b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8012098:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801209a:	428b      	cmp	r3, r1
 801209c:	da09      	bge.n	80120b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801209e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80120a2:	428b      	cmp	r3, r1
 80120a4:	f103 0301 	add.w	r3, r3, #1
 80120a8:	bf38      	it	cc
 80120aa:	3208      	addcc	r2, #8
 80120ac:	6083      	str	r3, [r0, #8]
 80120ae:	bf38      	it	cc
 80120b0:	6102      	strcc	r2, [r0, #16]
 80120b2:	6903      	ldr	r3, [r0, #16]
 80120b4:	9a03      	ldr	r2, [sp, #12]
 80120b6:	f8a3 e000 	strh.w	lr, [r3]
 80120ba:	805a      	strh	r2, [r3, #2]
 80120bc:	2200      	movs	r2, #0
 80120be:	809a      	strh	r2, [r3, #4]
 80120c0:	80da      	strh	r2, [r3, #6]
 80120c2:	e017      	b.n	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80120c4:	9c05      	ldr	r4, [sp, #20]
 80120c6:	114e      	asrs	r6, r1, #5
 80120c8:	f001 0c1f 	and.w	ip, r1, #31
 80120cc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80120d0:	f004 041f 	and.w	r4, r4, #31
 80120d4:	4576      	cmp	r6, lr
 80120d6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80120da:	9402      	str	r4, [sp, #8]
 80120dc:	9c04      	ldr	r4, [sp, #16]
 80120de:	eba4 0403 	sub.w	r4, r4, r3
 80120e2:	d10a      	bne.n	80120fa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80120e4:	9b02      	ldr	r3, [sp, #8]
 80120e6:	44a0      	add	r8, r4
 80120e8:	449c      	add	ip, r3
 80120ea:	f8a2 8004 	strh.w	r8, [r2, #4]
 80120ee:	fb04 a40c 	mla	r4, r4, ip, sl
 80120f2:	80d4      	strh	r4, [r2, #6]
 80120f4:	b013      	add	sp, #76	@ 0x4c
 80120f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fa:	9d05      	ldr	r5, [sp, #20]
 80120fc:	1a69      	subs	r1, r5, r1
 80120fe:	bf51      	iteee	pl
 8012100:	f1cc 0520 	rsbpl	r5, ip, #32
 8012104:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012108:	4249      	negmi	r1, r1
 801210a:	2500      	movmi	r5, #0
 801210c:	bf5d      	ittte	pl
 801210e:	436c      	mulpl	r4, r5
 8012110:	2520      	movpl	r5, #32
 8012112:	f04f 0901 	movpl.w	r9, #1
 8012116:	f04f 39ff 	movmi.w	r9, #4294967295
 801211a:	9501      	str	r5, [sp, #4]
 801211c:	9f01      	ldr	r7, [sp, #4]
 801211e:	444e      	add	r6, r9
 8012120:	fb94 f5f1 	sdiv	r5, r4, r1
 8012124:	fb01 4415 	mls	r4, r1, r5, r4
 8012128:	44bc      	add	ip, r7
 801212a:	2c00      	cmp	r4, #0
 801212c:	bfbc      	itt	lt
 801212e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8012132:	1864      	addlt	r4, r4, r1
 8012134:	44a8      	add	r8, r5
 8012136:	fb05 ac0c 	mla	ip, r5, ip, sl
 801213a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801213e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012142:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012146:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801214a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801214e:	ea58 0202 	orrs.w	r2, r8, r2
 8012152:	d011      	beq.n	8012178 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8012154:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8012158:	f1b8 0f00 	cmp.w	r8, #0
 801215c:	db0c      	blt.n	8012178 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801215e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8012160:	4590      	cmp	r8, r2
 8012162:	da09      	bge.n	8012178 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8012164:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8012168:	4590      	cmp	r8, r2
 801216a:	bf3c      	itt	cc
 801216c:	f10c 0208 	addcc.w	r2, ip, #8
 8012170:	6102      	strcc	r2, [r0, #16]
 8012172:	f108 0201 	add.w	r2, r8, #1
 8012176:	6082      	str	r2, [r0, #8]
 8012178:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801217c:	2700      	movs	r7, #0
 801217e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012182:	45b6      	cmp	lr, r6
 8012184:	f8ac 6000 	strh.w	r6, [ip]
 8012188:	442b      	add	r3, r5
 801218a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801218e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012192:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012196:	d04b      	beq.n	8012230 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8012198:	9f04      	ldr	r7, [sp, #16]
 801219a:	1a64      	subs	r4, r4, r1
 801219c:	f04f 0a00 	mov.w	sl, #0
 80121a0:	1aff      	subs	r7, r7, r3
 80121a2:	443d      	add	r5, r7
 80121a4:	016d      	lsls	r5, r5, #5
 80121a6:	fb95 f8f1 	sdiv	r8, r5, r1
 80121aa:	fb01 5518 	mls	r5, r1, r8, r5
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	bfbc      	itt	lt
 80121b2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80121b6:	186d      	addlt	r5, r5, r1
 80121b8:	f108 0701 	add.w	r7, r8, #1
 80121bc:	9703      	str	r7, [sp, #12]
 80121be:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80121c2:	1964      	adds	r4, r4, r5
 80121c4:	444e      	add	r6, r9
 80121c6:	bf54      	ite	pl
 80121c8:	9f03      	ldrpl	r7, [sp, #12]
 80121ca:	4647      	movmi	r7, r8
 80121cc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80121d0:	bf58      	it	pl
 80121d2:	1a64      	subpl	r4, r4, r1
 80121d4:	443b      	add	r3, r7
 80121d6:	44bb      	add	fp, r7
 80121d8:	f8ac b004 	strh.w	fp, [ip, #4]
 80121dc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80121e0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80121e4:	f8ac b006 	strh.w	fp, [ip, #6]
 80121e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80121ec:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80121f0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80121f4:	ea5b 0707 	orrs.w	r7, fp, r7
 80121f8:	d011      	beq.n	801221e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80121fa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80121fe:	f1bb 0f00 	cmp.w	fp, #0
 8012202:	db0c      	blt.n	801221e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012204:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012206:	45bb      	cmp	fp, r7
 8012208:	da09      	bge.n	801221e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801220a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801220e:	45bb      	cmp	fp, r7
 8012210:	bf3c      	itt	cc
 8012212:	f10c 0708 	addcc.w	r7, ip, #8
 8012216:	6107      	strcc	r7, [r0, #16]
 8012218:	f10b 0701 	add.w	r7, fp, #1
 801221c:	6087      	str	r7, [r0, #8]
 801221e:	6907      	ldr	r7, [r0, #16]
 8012220:	45b6      	cmp	lr, r6
 8012222:	803e      	strh	r6, [r7, #0]
 8012224:	807a      	strh	r2, [r7, #2]
 8012226:	f8a7 a004 	strh.w	sl, [r7, #4]
 801222a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801222e:	d1c6      	bne.n	80121be <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8012230:	9a04      	ldr	r2, [sp, #16]
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	6902      	ldr	r2, [r0, #16]
 8012236:	8891      	ldrh	r1, [r2, #4]
 8012238:	88d6      	ldrh	r6, [r2, #6]
 801223a:	4419      	add	r1, r3
 801223c:	8091      	strh	r1, [r2, #4]
 801223e:	9902      	ldr	r1, [sp, #8]
 8012240:	f101 0c20 	add.w	ip, r1, #32
 8012244:	9901      	ldr	r1, [sp, #4]
 8012246:	ebac 0c01 	sub.w	ip, ip, r1
 801224a:	fb03 630c 	mla	r3, r3, ip, r6
 801224e:	80d3      	strh	r3, [r2, #6]
 8012250:	e750      	b.n	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012252:	9d05      	ldr	r5, [sp, #20]
 8012254:	1aa2      	subs	r2, r4, r2
 8012256:	eba5 0501 	sub.w	r5, r5, r1
 801225a:	9202      	str	r2, [sp, #8]
 801225c:	9508      	str	r5, [sp, #32]
 801225e:	f140 8128 	bpl.w	80124b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8012262:	9a03      	ldr	r2, [sp, #12]
 8012264:	2a00      	cmp	r2, #0
 8012266:	f6ff af45 	blt.w	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801226a:	9a02      	ldr	r2, [sp, #8]
 801226c:	f04f 34ff 	mov.w	r4, #4294967295
 8012270:	4252      	negs	r2, r2
 8012272:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012274:	2400      	movs	r4, #0
 8012276:	9202      	str	r2, [sp, #8]
 8012278:	9a06      	ldr	r2, [sp, #24]
 801227a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801227e:	9206      	str	r2, [sp, #24]
 8012280:	462a      	mov	r2, r5
 8012282:	435a      	muls	r2, r3
 8012284:	9401      	str	r4, [sp, #4]
 8012286:	9c02      	ldr	r4, [sp, #8]
 8012288:	9d02      	ldr	r5, [sp, #8]
 801228a:	fb92 f4f4 	sdiv	r4, r2, r4
 801228e:	fb05 2214 	mls	r2, r5, r4, r2
 8012292:	2a00      	cmp	r2, #0
 8012294:	9207      	str	r2, [sp, #28]
 8012296:	bfbc      	itt	lt
 8012298:	1952      	addlt	r2, r2, r5
 801229a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801229e:	6905      	ldr	r5, [r0, #16]
 80122a0:	bfb8      	it	lt
 80122a2:	9207      	strlt	r2, [sp, #28]
 80122a4:	eb04 0901 	add.w	r9, r4, r1
 80122a8:	9a01      	ldr	r2, [sp, #4]
 80122aa:	ea4f 1669 	mov.w	r6, r9, asr #5
 80122ae:	429a      	cmp	r2, r3
 80122b0:	f040 8111 	bne.w	80124d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80122b4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80122b8:	429e      	cmp	r6, r3
 80122ba:	d104      	bne.n	80122c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80122bc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80122c0:	9a03      	ldr	r2, [sp, #12]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d01b      	beq.n	80122fe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80122c6:	88ea      	ldrh	r2, [r5, #6]
 80122c8:	88ab      	ldrh	r3, [r5, #4]
 80122ca:	4313      	orrs	r3, r2
 80122cc:	d010      	beq.n	80122f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80122ce:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80122d2:	2a00      	cmp	r2, #0
 80122d4:	db0c      	blt.n	80122f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80122d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80122d8:	429a      	cmp	r2, r3
 80122da:	da09      	bge.n	80122f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80122dc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	f102 0201 	add.w	r2, r2, #1
 80122e6:	bf38      	it	cc
 80122e8:	3508      	addcc	r5, #8
 80122ea:	6082      	str	r2, [r0, #8]
 80122ec:	bf38      	it	cc
 80122ee:	6105      	strcc	r5, [r0, #16]
 80122f0:	6903      	ldr	r3, [r0, #16]
 80122f2:	9a03      	ldr	r2, [sp, #12]
 80122f4:	801e      	strh	r6, [r3, #0]
 80122f6:	805a      	strh	r2, [r3, #2]
 80122f8:	2200      	movs	r2, #0
 80122fa:	809a      	strh	r2, [r3, #4]
 80122fc:	80da      	strh	r2, [r3, #6]
 80122fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012300:	9a03      	ldr	r2, [sp, #12]
 8012302:	6901      	ldr	r1, [r0, #16]
 8012304:	441a      	add	r2, r3
 8012306:	f9b1 3000 	ldrsh.w	r3, [r1]
 801230a:	42b3      	cmp	r3, r6
 801230c:	d103      	bne.n	8012316 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801230e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012312:	429a      	cmp	r2, r3
 8012314:	d01a      	beq.n	801234c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8012316:	88cc      	ldrh	r4, [r1, #6]
 8012318:	888b      	ldrh	r3, [r1, #4]
 801231a:	4323      	orrs	r3, r4
 801231c:	d010      	beq.n	8012340 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801231e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012322:	2c00      	cmp	r4, #0
 8012324:	db0c      	blt.n	8012340 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012326:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012328:	429c      	cmp	r4, r3
 801232a:	da09      	bge.n	8012340 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801232c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012330:	429c      	cmp	r4, r3
 8012332:	f104 0401 	add.w	r4, r4, #1
 8012336:	bf38      	it	cc
 8012338:	3108      	addcc	r1, #8
 801233a:	6084      	str	r4, [r0, #8]
 801233c:	bf38      	it	cc
 801233e:	6101      	strcc	r1, [r0, #16]
 8012340:	6903      	ldr	r3, [r0, #16]
 8012342:	2100      	movs	r1, #0
 8012344:	801e      	strh	r6, [r3, #0]
 8012346:	805a      	strh	r2, [r3, #2]
 8012348:	8099      	strh	r1, [r3, #4]
 801234a:	80d9      	strh	r1, [r3, #6]
 801234c:	9b06      	ldr	r3, [sp, #24]
 801234e:	4293      	cmp	r3, r2
 8012350:	f000 8082 	beq.w	8012458 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8012354:	9b08      	ldr	r3, [sp, #32]
 8012356:	9902      	ldr	r1, [sp, #8]
 8012358:	015b      	lsls	r3, r3, #5
 801235a:	9c02      	ldr	r4, [sp, #8]
 801235c:	fb93 f1f1 	sdiv	r1, r3, r1
 8012360:	fb04 3311 	mls	r3, r4, r1, r3
 8012364:	9103      	str	r1, [sp, #12]
 8012366:	2b00      	cmp	r3, #0
 8012368:	9308      	str	r3, [sp, #32]
 801236a:	da04      	bge.n	8012376 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801236c:	1e4b      	subs	r3, r1, #1
 801236e:	9303      	str	r3, [sp, #12]
 8012370:	9b08      	ldr	r3, [sp, #32]
 8012372:	4423      	add	r3, r4
 8012374:	9308      	str	r3, [sp, #32]
 8012376:	9b07      	ldr	r3, [sp, #28]
 8012378:	464f      	mov	r7, r9
 801237a:	9902      	ldr	r1, [sp, #8]
 801237c:	2600      	movs	r6, #0
 801237e:	1a5b      	subs	r3, r3, r1
 8012380:	9307      	str	r3, [sp, #28]
 8012382:	9b01      	ldr	r3, [sp, #4]
 8012384:	f1c3 0320 	rsb	r3, r3, #32
 8012388:	930e      	str	r3, [sp, #56]	@ 0x38
 801238a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801238c:	9b01      	ldr	r3, [sp, #4]
 801238e:	1a5b      	subs	r3, r3, r1
 8012390:	930a      	str	r3, [sp, #40]	@ 0x28
 8012392:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8012396:	185b      	adds	r3, r3, r1
 8012398:	bf58      	it	pl
 801239a:	9902      	ldrpl	r1, [sp, #8]
 801239c:	9307      	str	r3, [sp, #28]
 801239e:	bf57      	itett	pl
 80123a0:	1a5b      	subpl	r3, r3, r1
 80123a2:	9903      	ldrmi	r1, [sp, #12]
 80123a4:	9307      	strpl	r3, [sp, #28]
 80123a6:	9b03      	ldrpl	r3, [sp, #12]
 80123a8:	bf58      	it	pl
 80123aa:	1c59      	addpl	r1, r3, #1
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	4489      	add	r9, r1
 80123b0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80123b4:	db2e      	blt.n	8012414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80123b6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80123b8:	4293      	cmp	r3, r2
 80123ba:	dd2b      	ble.n	8012414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80123bc:	9c01      	ldr	r4, [sp, #4]
 80123be:	6905      	ldr	r5, [r0, #16]
 80123c0:	46a0      	mov	r8, r4
 80123c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80123c4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80123c8:	45a0      	cmp	r8, r4
 80123ca:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80123ce:	f040 814c 	bne.w	801266a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80123d2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80123d6:	4551      	cmp	r1, sl
 80123d8:	d103      	bne.n	80123e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80123da:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80123de:	4291      	cmp	r1, r2
 80123e0:	d018      	beq.n	8012414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80123e2:	ea5c 010e 	orrs.w	r1, ip, lr
 80123e6:	d00f      	beq.n	8012408 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80123e8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80123ec:	2900      	cmp	r1, #0
 80123ee:	db0b      	blt.n	8012408 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80123f0:	428b      	cmp	r3, r1
 80123f2:	dd09      	ble.n	8012408 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80123f4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80123f8:	4299      	cmp	r1, r3
 80123fa:	f101 0101 	add.w	r1, r1, #1
 80123fe:	bf38      	it	cc
 8012400:	3508      	addcc	r5, #8
 8012402:	6081      	str	r1, [r0, #8]
 8012404:	bf38      	it	cc
 8012406:	6105      	strcc	r5, [r0, #16]
 8012408:	6903      	ldr	r3, [r0, #16]
 801240a:	f8a3 a000 	strh.w	sl, [r3]
 801240e:	805a      	strh	r2, [r3, #2]
 8012410:	809e      	strh	r6, [r3, #4]
 8012412:	80de      	strh	r6, [r3, #6]
 8012414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012416:	6901      	ldr	r1, [r0, #16]
 8012418:	441a      	add	r2, r3
 801241a:	88cc      	ldrh	r4, [r1, #6]
 801241c:	888b      	ldrh	r3, [r1, #4]
 801241e:	4323      	orrs	r3, r4
 8012420:	d010      	beq.n	8012444 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012422:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012426:	2c00      	cmp	r4, #0
 8012428:	db0c      	blt.n	8012444 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801242a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801242c:	429c      	cmp	r4, r3
 801242e:	da09      	bge.n	8012444 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012430:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012434:	429c      	cmp	r4, r3
 8012436:	f104 0401 	add.w	r4, r4, #1
 801243a:	bf38      	it	cc
 801243c:	3108      	addcc	r1, #8
 801243e:	6084      	str	r4, [r0, #8]
 8012440:	bf38      	it	cc
 8012442:	6101      	strcc	r1, [r0, #16]
 8012444:	6903      	ldr	r3, [r0, #16]
 8012446:	464f      	mov	r7, r9
 8012448:	f8a3 a000 	strh.w	sl, [r3]
 801244c:	805a      	strh	r2, [r3, #2]
 801244e:	809e      	strh	r6, [r3, #4]
 8012450:	80de      	strh	r6, [r3, #6]
 8012452:	9b06      	ldr	r3, [sp, #24]
 8012454:	4293      	cmp	r3, r2
 8012456:	d19c      	bne.n	8012392 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8012458:	9b01      	ldr	r3, [sp, #4]
 801245a:	6907      	ldr	r7, [r0, #16]
 801245c:	f1c3 0620 	rsb	r6, r3, #32
 8012460:	9b05      	ldr	r3, [sp, #20]
 8012462:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8012466:	9b04      	ldr	r3, [sp, #16]
 8012468:	429e      	cmp	r6, r3
 801246a:	f040 81c7 	bne.w	80127fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801246e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012472:	459e      	cmp	lr, r3
 8012474:	d104      	bne.n	8012480 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8012476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801247a:	429a      	cmp	r2, r3
 801247c:	f43f ae3a 	beq.w	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012480:	88f9      	ldrh	r1, [r7, #6]
 8012482:	88bb      	ldrh	r3, [r7, #4]
 8012484:	430b      	orrs	r3, r1
 8012486:	d010      	beq.n	80124aa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801248c:	2b00      	cmp	r3, #0
 801248e:	db0c      	blt.n	80124aa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012490:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8012492:	428b      	cmp	r3, r1
 8012494:	da09      	bge.n	80124aa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012496:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801249a:	428b      	cmp	r3, r1
 801249c:	f103 0301 	add.w	r3, r3, #1
 80124a0:	bf38      	it	cc
 80124a2:	3708      	addcc	r7, #8
 80124a4:	6083      	str	r3, [r0, #8]
 80124a6:	bf38      	it	cc
 80124a8:	6107      	strcc	r7, [r0, #16]
 80124aa:	6903      	ldr	r3, [r0, #16]
 80124ac:	f8a3 e000 	strh.w	lr, [r3]
 80124b0:	e603      	b.n	80120ba <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80124b2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80124b4:	9c03      	ldr	r4, [sp, #12]
 80124b6:	42a2      	cmp	r2, r4
 80124b8:	f6ff ae1c 	blt.w	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80124bc:	9c06      	ldr	r4, [sp, #24]
 80124be:	42a2      	cmp	r2, r4
 80124c0:	9c08      	ldr	r4, [sp, #32]
 80124c2:	bfbc      	itt	lt
 80124c4:	3201      	addlt	r2, #1
 80124c6:	9206      	strlt	r2, [sp, #24]
 80124c8:	f1c3 0220 	rsb	r2, r3, #32
 80124cc:	4362      	muls	r2, r4
 80124ce:	2401      	movs	r4, #1
 80124d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80124d2:	2420      	movs	r4, #32
 80124d4:	e6d6      	b.n	8012284 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80124d6:	ea4f 1861 	mov.w	r8, r1, asr #5
 80124da:	f009 021f 	and.w	r2, r9, #31
 80124de:	f001 011f 	and.w	r1, r1, #31
 80124e2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80124e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80124e8:	45b0      	cmp	r8, r6
 80124ea:	9a01      	ldr	r2, [sp, #4]
 80124ec:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80124f0:	eba2 0203 	sub.w	r2, r2, r3
 80124f4:	d108      	bne.n	8012508 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80124f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124f8:	4496      	add	lr, r2
 80124fa:	4419      	add	r1, r3
 80124fc:	f8a5 e004 	strh.w	lr, [r5, #4]
 8012500:	fb02 a101 	mla	r1, r2, r1, sl
 8012504:	80e9      	strh	r1, [r5, #6]
 8012506:	e6fa      	b.n	80122fe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012508:	2c00      	cmp	r4, #0
 801250a:	f2c0 80a7 	blt.w	801265c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801250e:	2701      	movs	r7, #1
 8012510:	f1c1 0c20 	rsb	ip, r1, #32
 8012514:	970a      	str	r7, [sp, #40]	@ 0x28
 8012516:	2720      	movs	r7, #32
 8012518:	fb02 f20c 	mul.w	r2, r2, ip
 801251c:	9709      	str	r7, [sp, #36]	@ 0x24
 801251e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012520:	fb92 fcf4 	sdiv	ip, r2, r4
 8012524:	fb04 221c 	mls	r2, r4, ip, r2
 8012528:	4439      	add	r1, r7
 801252a:	2a00      	cmp	r2, #0
 801252c:	bfbc      	itt	lt
 801252e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8012532:	1912      	addlt	r2, r2, r4
 8012534:	fb0c a101 	mla	r1, ip, r1, sl
 8012538:	44e6      	add	lr, ip
 801253a:	80e9      	strh	r1, [r5, #6]
 801253c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801253e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8012542:	eb08 0501 	add.w	r5, r8, r1
 8012546:	6901      	ldr	r1, [r0, #16]
 8012548:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801254c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8012550:	ea58 070e 	orrs.w	r7, r8, lr
 8012554:	d010      	beq.n	8012578 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012556:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801255a:	f1be 0f00 	cmp.w	lr, #0
 801255e:	db0b      	blt.n	8012578 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012560:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012562:	45be      	cmp	lr, r7
 8012564:	da08      	bge.n	8012578 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012566:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801256a:	45be      	cmp	lr, r7
 801256c:	bf3c      	itt	cc
 801256e:	3108      	addcc	r1, #8
 8012570:	6101      	strcc	r1, [r0, #16]
 8012572:	f10e 0101 	add.w	r1, lr, #1
 8012576:	6081      	str	r1, [r0, #8]
 8012578:	6901      	ldr	r1, [r0, #16]
 801257a:	f04f 0e00 	mov.w	lr, #0
 801257e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8012582:	42ae      	cmp	r6, r5
 8012584:	800d      	strh	r5, [r1, #0]
 8012586:	4463      	add	r3, ip
 8012588:	f8a1 8002 	strh.w	r8, [r1, #2]
 801258c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012590:	f8a1 e006 	strh.w	lr, [r1, #6]
 8012594:	d053      	beq.n	801263e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8012596:	9901      	ldr	r1, [sp, #4]
 8012598:	1b12      	subs	r2, r2, r4
 801259a:	1ac9      	subs	r1, r1, r3
 801259c:	4461      	add	r1, ip
 801259e:	0149      	lsls	r1, r1, #5
 80125a0:	fb91 fef4 	sdiv	lr, r1, r4
 80125a4:	fb04 111e 	mls	r1, r4, lr, r1
 80125a8:	2900      	cmp	r1, #0
 80125aa:	bfbc      	itt	lt
 80125ac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80125b0:	1909      	addlt	r1, r1, r4
 80125b2:	f10e 0701 	add.w	r7, lr, #1
 80125b6:	970d      	str	r7, [sp, #52]	@ 0x34
 80125b8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80125bc:	1852      	adds	r2, r2, r1
 80125be:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80125c0:	bf54      	ite	pl
 80125c2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80125c6:	46f4      	movmi	ip, lr
 80125c8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80125cc:	bf58      	it	pl
 80125ce:	1b12      	subpl	r2, r2, r4
 80125d0:	4463      	add	r3, ip
 80125d2:	443d      	add	r5, r7
 80125d4:	44e3      	add	fp, ip
 80125d6:	f8aa b004 	strh.w	fp, [sl, #4]
 80125da:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80125de:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80125e2:	f8aa b006 	strh.w	fp, [sl, #6]
 80125e6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80125ea:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80125ee:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80125f2:	ea5b 070a 	orrs.w	r7, fp, sl
 80125f6:	d014      	beq.n	8012622 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80125f8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80125fc:	f1ba 0f00 	cmp.w	sl, #0
 8012600:	db0f      	blt.n	8012622 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012602:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012604:	45ba      	cmp	sl, r7
 8012606:	da0c      	bge.n	8012622 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012608:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801260c:	45ba      	cmp	sl, r7
 801260e:	f10a 0a01 	add.w	sl, sl, #1
 8012612:	bf38      	it	cc
 8012614:	f10c 0c08 	addcc.w	ip, ip, #8
 8012618:	f8c0 a008 	str.w	sl, [r0, #8]
 801261c:	bf38      	it	cc
 801261e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8012622:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012626:	f04f 0700 	mov.w	r7, #0
 801262a:	42ae      	cmp	r6, r5
 801262c:	f8ac 5000 	strh.w	r5, [ip]
 8012630:	f8ac 8002 	strh.w	r8, [ip, #2]
 8012634:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012638:	f8ac 7006 	strh.w	r7, [ip, #6]
 801263c:	d1bc      	bne.n	80125b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801263e:	6904      	ldr	r4, [r0, #16]
 8012640:	9a01      	ldr	r2, [sp, #4]
 8012642:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012644:	1ad3      	subs	r3, r2, r3
 8012646:	88a2      	ldrh	r2, [r4, #4]
 8012648:	3120      	adds	r1, #32
 801264a:	441a      	add	r2, r3
 801264c:	80a2      	strh	r2, [r4, #4]
 801264e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012650:	1a89      	subs	r1, r1, r2
 8012652:	88e2      	ldrh	r2, [r4, #6]
 8012654:	fb03 2301 	mla	r3, r3, r1, r2
 8012658:	80e3      	strh	r3, [r4, #6]
 801265a:	e650      	b.n	80122fe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801265c:	f04f 37ff 	mov.w	r7, #4294967295
 8012660:	434a      	muls	r2, r1
 8012662:	4264      	negs	r4, r4
 8012664:	970a      	str	r7, [sp, #40]	@ 0x28
 8012666:	2700      	movs	r7, #0
 8012668:	e758      	b.n	801251c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801266a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801266e:	f009 031f 	and.w	r3, r9, #31
 8012672:	f007 071f 	and.w	r7, r7, #31
 8012676:	fa1f fc8c 	uxth.w	ip, ip
 801267a:	45d0      	cmp	r8, sl
 801267c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801267e:	fa1f fe8e 	uxth.w	lr, lr
 8012682:	d10a      	bne.n	801269a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8012684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012686:	449c      	add	ip, r3
 8012688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801268a:	441f      	add	r7, r3
 801268c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801268e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8012692:	fb03 e707 	mla	r7, r3, r7, lr
 8012696:	80ef      	strh	r7, [r5, #6]
 8012698:	e6bc      	b.n	8012414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801269a:	2900      	cmp	r1, #0
 801269c:	f2c0 80a6 	blt.w	80127ec <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80126a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80126a2:	f1c7 0320 	rsb	r3, r7, #32
 80126a6:	4363      	muls	r3, r4
 80126a8:	2401      	movs	r4, #1
 80126aa:	940d      	str	r4, [sp, #52]	@ 0x34
 80126ac:	2420      	movs	r4, #32
 80126ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80126b0:	fb93 f4f1 	sdiv	r4, r3, r1
 80126b4:	fb01 3b14 	mls	fp, r1, r4, r3
 80126b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126ba:	f1bb 0f00 	cmp.w	fp, #0
 80126be:	441f      	add	r7, r3
 80126c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80126c2:	bfbc      	itt	lt
 80126c4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80126c8:	448b      	addlt	fp, r1
 80126ca:	fb04 e707 	mla	r7, r4, r7, lr
 80126ce:	44a4      	add	ip, r4
 80126d0:	80ef      	strh	r7, [r5, #6]
 80126d2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80126d6:	eb08 0503 	add.w	r5, r8, r3
 80126da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80126de:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80126e2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80126e6:	ea5e 0307 	orrs.w	r3, lr, r7
 80126ea:	d011      	beq.n	8012710 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80126ec:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80126f0:	f1be 0f00 	cmp.w	lr, #0
 80126f4:	db0c      	blt.n	8012710 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80126f6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80126f8:	45be      	cmp	lr, r7
 80126fa:	da09      	bge.n	8012710 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80126fc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8012700:	45be      	cmp	lr, r7
 8012702:	bf3c      	itt	cc
 8012704:	f10c 0708 	addcc.w	r7, ip, #8
 8012708:	6107      	strcc	r7, [r0, #16]
 801270a:	f10e 0701 	add.w	r7, lr, #1
 801270e:	6087      	str	r7, [r0, #8]
 8012710:	6907      	ldr	r7, [r0, #16]
 8012712:	b213      	sxth	r3, r2
 8012714:	4555      	cmp	r5, sl
 8012716:	9310      	str	r3, [sp, #64]	@ 0x40
 8012718:	807b      	strh	r3, [r7, #2]
 801271a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801271c:	803d      	strh	r5, [r7, #0]
 801271e:	80be      	strh	r6, [r7, #4]
 8012720:	eb04 0c03 	add.w	ip, r4, r3
 8012724:	80fe      	strh	r6, [r7, #6]
 8012726:	d050      	beq.n	80127ca <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8012728:	9b01      	ldr	r3, [sp, #4]
 801272a:	eba3 070c 	sub.w	r7, r3, ip
 801272e:	ebab 0301 	sub.w	r3, fp, r1
 8012732:	443c      	add	r4, r7
 8012734:	9309      	str	r3, [sp, #36]	@ 0x24
 8012736:	0164      	lsls	r4, r4, #5
 8012738:	fb94 f8f1 	sdiv	r8, r4, r1
 801273c:	fb01 4418 	mls	r4, r1, r8, r4
 8012740:	2c00      	cmp	r4, #0
 8012742:	bfbc      	itt	lt
 8012744:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012748:	1864      	addlt	r4, r4, r1
 801274a:	f108 0701 	add.w	r7, r8, #1
 801274e:	9711      	str	r7, [sp, #68]	@ 0x44
 8012750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012752:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012756:	191b      	adds	r3, r3, r4
 8012758:	f8be b004 	ldrh.w	fp, [lr, #4]
 801275c:	bf54      	ite	pl
 801275e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8012760:	4647      	movmi	r7, r8
 8012762:	9309      	str	r3, [sp, #36]	@ 0x24
 8012764:	bf58      	it	pl
 8012766:	1a5b      	subpl	r3, r3, r1
 8012768:	44bb      	add	fp, r7
 801276a:	44bc      	add	ip, r7
 801276c:	bf58      	it	pl
 801276e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8012770:	f8ae b004 	strh.w	fp, [lr, #4]
 8012774:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012778:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801277c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801277e:	f8ae b006 	strh.w	fp, [lr, #6]
 8012782:	443d      	add	r5, r7
 8012784:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012788:	f8be b006 	ldrh.w	fp, [lr, #6]
 801278c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8012790:	ea5b 0307 	orrs.w	r3, fp, r7
 8012794:	d011      	beq.n	80127ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012796:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801279a:	f1bb 0f00 	cmp.w	fp, #0
 801279e:	db0c      	blt.n	80127ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80127a0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80127a2:	45bb      	cmp	fp, r7
 80127a4:	da09      	bge.n	80127ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80127a6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80127aa:	45bb      	cmp	fp, r7
 80127ac:	bf3c      	itt	cc
 80127ae:	f10e 0708 	addcc.w	r7, lr, #8
 80127b2:	6107      	strcc	r7, [r0, #16]
 80127b4:	f10b 0701 	add.w	r7, fp, #1
 80127b8:	6087      	str	r7, [r0, #8]
 80127ba:	6907      	ldr	r7, [r0, #16]
 80127bc:	4555      	cmp	r5, sl
 80127be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80127c0:	803d      	strh	r5, [r7, #0]
 80127c2:	807b      	strh	r3, [r7, #2]
 80127c4:	80be      	strh	r6, [r7, #4]
 80127c6:	80fe      	strh	r6, [r7, #6]
 80127c8:	d1c2      	bne.n	8012750 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80127ca:	9b01      	ldr	r3, [sp, #4]
 80127cc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80127ce:	eba3 0c0c 	sub.w	ip, r3, ip
 80127d2:	6903      	ldr	r3, [r0, #16]
 80127d4:	3720      	adds	r7, #32
 80127d6:	8899      	ldrh	r1, [r3, #4]
 80127d8:	4461      	add	r1, ip
 80127da:	8099      	strh	r1, [r3, #4]
 80127dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127de:	1a7f      	subs	r7, r7, r1
 80127e0:	88d9      	ldrh	r1, [r3, #6]
 80127e2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80127e6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80127ea:	e613      	b.n	8012414 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80127ec:	f04f 34ff 	mov.w	r4, #4294967295
 80127f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127f2:	4249      	negs	r1, r1
 80127f4:	940d      	str	r4, [sp, #52]	@ 0x34
 80127f6:	2400      	movs	r4, #0
 80127f8:	437b      	muls	r3, r7
 80127fa:	e758      	b.n	80126ae <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80127fc:	9905      	ldr	r1, [sp, #20]
 80127fe:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8012802:	f009 0c1f 	and.w	ip, r9, #31
 8012806:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801280a:	f001 011f 	and.w	r1, r1, #31
 801280e:	45f3      	cmp	fp, lr
 8012810:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8012814:	9102      	str	r1, [sp, #8]
 8012816:	9904      	ldr	r1, [sp, #16]
 8012818:	eba1 0406 	sub.w	r4, r1, r6
 801281c:	d108      	bne.n	8012830 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801281e:	9b02      	ldr	r3, [sp, #8]
 8012820:	44a0      	add	r8, r4
 8012822:	449c      	add	ip, r3
 8012824:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012828:	fb04 a40c 	mla	r4, r4, ip, sl
 801282c:	80fc      	strh	r4, [r7, #6]
 801282e:	e461      	b.n	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012830:	9905      	ldr	r1, [sp, #20]
 8012832:	ebb1 0109 	subs.w	r1, r1, r9
 8012836:	bf51      	iteee	pl
 8012838:	f1cc 0520 	rsbpl	r5, ip, #32
 801283c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012840:	4249      	negmi	r1, r1
 8012842:	2500      	movmi	r5, #0
 8012844:	bf5d      	ittte	pl
 8012846:	436c      	mulpl	r4, r5
 8012848:	2520      	movpl	r5, #32
 801284a:	f04f 0901 	movpl.w	r9, #1
 801284e:	f04f 39ff 	movmi.w	r9, #4294967295
 8012852:	9501      	str	r5, [sp, #4]
 8012854:	9b01      	ldr	r3, [sp, #4]
 8012856:	fb94 f5f1 	sdiv	r5, r4, r1
 801285a:	fb01 4415 	mls	r4, r1, r5, r4
 801285e:	449c      	add	ip, r3
 8012860:	eb0b 0309 	add.w	r3, fp, r9
 8012864:	2c00      	cmp	r4, #0
 8012866:	bfbc      	itt	lt
 8012868:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801286c:	1864      	addlt	r4, r4, r1
 801286e:	44a8      	add	r8, r5
 8012870:	fb05 ac0c 	mla	ip, r5, ip, sl
 8012874:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012878:	f8a7 c006 	strh.w	ip, [r7, #6]
 801287c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012880:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8012884:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012888:	ea58 0707 	orrs.w	r7, r8, r7
 801288c:	d011      	beq.n	80128b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801288e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8012892:	f1b8 0f00 	cmp.w	r8, #0
 8012896:	db0c      	blt.n	80128b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012898:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801289a:	45b8      	cmp	r8, r7
 801289c:	da09      	bge.n	80128b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801289e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80128a2:	45b8      	cmp	r8, r7
 80128a4:	bf3c      	itt	cc
 80128a6:	f10c 0708 	addcc.w	r7, ip, #8
 80128aa:	6107      	strcc	r7, [r0, #16]
 80128ac:	f108 0701 	add.w	r7, r8, #1
 80128b0:	6087      	str	r7, [r0, #8]
 80128b2:	6907      	ldr	r7, [r0, #16]
 80128b4:	f04f 0c00 	mov.w	ip, #0
 80128b8:	b212      	sxth	r2, r2
 80128ba:	459e      	cmp	lr, r3
 80128bc:	803b      	strh	r3, [r7, #0]
 80128be:	442e      	add	r6, r5
 80128c0:	807a      	strh	r2, [r7, #2]
 80128c2:	f8a7 c004 	strh.w	ip, [r7, #4]
 80128c6:	f8a7 c006 	strh.w	ip, [r7, #6]
 80128ca:	d04b      	beq.n	8012964 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80128cc:	9f04      	ldr	r7, [sp, #16]
 80128ce:	1a64      	subs	r4, r4, r1
 80128d0:	f04f 0a00 	mov.w	sl, #0
 80128d4:	1bbf      	subs	r7, r7, r6
 80128d6:	443d      	add	r5, r7
 80128d8:	016d      	lsls	r5, r5, #5
 80128da:	fb95 f8f1 	sdiv	r8, r5, r1
 80128de:	fb01 5518 	mls	r5, r1, r8, r5
 80128e2:	4565      	cmp	r5, ip
 80128e4:	bfbc      	itt	lt
 80128e6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80128ea:	186d      	addlt	r5, r5, r1
 80128ec:	f108 0701 	add.w	r7, r8, #1
 80128f0:	9703      	str	r7, [sp, #12]
 80128f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80128f6:	1964      	adds	r4, r4, r5
 80128f8:	444b      	add	r3, r9
 80128fa:	bf54      	ite	pl
 80128fc:	9f03      	ldrpl	r7, [sp, #12]
 80128fe:	4647      	movmi	r7, r8
 8012900:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8012904:	bf58      	it	pl
 8012906:	1a64      	subpl	r4, r4, r1
 8012908:	443e      	add	r6, r7
 801290a:	44bb      	add	fp, r7
 801290c:	f8ac b004 	strh.w	fp, [ip, #4]
 8012910:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012914:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012918:	f8ac b006 	strh.w	fp, [ip, #6]
 801291c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012920:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012924:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012928:	ea5b 0707 	orrs.w	r7, fp, r7
 801292c:	d011      	beq.n	8012952 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801292e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8012932:	f1bb 0f00 	cmp.w	fp, #0
 8012936:	db0c      	blt.n	8012952 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012938:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801293a:	45bb      	cmp	fp, r7
 801293c:	da09      	bge.n	8012952 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801293e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012942:	45bb      	cmp	fp, r7
 8012944:	bf3c      	itt	cc
 8012946:	f10c 0708 	addcc.w	r7, ip, #8
 801294a:	6107      	strcc	r7, [r0, #16]
 801294c:	f10b 0701 	add.w	r7, fp, #1
 8012950:	6087      	str	r7, [r0, #8]
 8012952:	6907      	ldr	r7, [r0, #16]
 8012954:	459e      	cmp	lr, r3
 8012956:	803b      	strh	r3, [r7, #0]
 8012958:	807a      	strh	r2, [r7, #2]
 801295a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801295e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8012962:	d1c6      	bne.n	80128f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8012964:	9b04      	ldr	r3, [sp, #16]
 8012966:	1b9e      	subs	r6, r3, r6
 8012968:	6903      	ldr	r3, [r0, #16]
 801296a:	889a      	ldrh	r2, [r3, #4]
 801296c:	4432      	add	r2, r6
 801296e:	809a      	strh	r2, [r3, #4]
 8012970:	9a02      	ldr	r2, [sp, #8]
 8012972:	f102 0c20 	add.w	ip, r2, #32
 8012976:	9a01      	ldr	r2, [sp, #4]
 8012978:	ebac 0c02 	sub.w	ip, ip, r2
 801297c:	88da      	ldrh	r2, [r3, #6]
 801297e:	fb06 260c 	mla	r6, r6, ip, r2
 8012982:	80de      	strh	r6, [r3, #6]
 8012984:	f7ff bbb6 	b.w	80120f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08012988 <_ZN8touchgfx7Outline6lineToEii>:
 8012988:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801298a:	079b      	lsls	r3, r3, #30
 801298c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801298e:	460e      	mov	r6, r1
 8012990:	4615      	mov	r5, r2
 8012992:	d511      	bpl.n	80129b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012994:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8012998:	ea86 0701 	eor.w	r7, r6, r1
 801299c:	ea85 0302 	eor.w	r3, r5, r2
 80129a0:	433b      	orrs	r3, r7
 80129a2:	d009      	beq.n	80129b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80129a4:	4633      	mov	r3, r6
 80129a6:	9500      	str	r5, [sp, #0]
 80129a8:	f7ff fb4c 	bl	8012044 <_ZN8touchgfx7Outline10renderLineEiiii>
 80129ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80129ae:	f043 0301 	orr.w	r3, r3, #1
 80129b2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80129b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80129b8:	b003      	add	sp, #12
 80129ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080129bc <_ZN8touchgfx7Outline6moveToEii>:
 80129bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80129c0:	4615      	mov	r5, r2
 80129c2:	4604      	mov	r4, r0
 80129c4:	460e      	mov	r6, r1
 80129c6:	079a      	lsls	r2, r3, #30
 80129c8:	d401      	bmi.n	80129ce <_ZN8touchgfx7Outline6moveToEii+0x12>
 80129ca:	f7ff fb07 	bl	8011fdc <_ZN8touchgfx7Outline5resetEv>
 80129ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80129d0:	07db      	lsls	r3, r3, #31
 80129d2:	d504      	bpl.n	80129de <_ZN8touchgfx7Outline6moveToEii+0x22>
 80129d4:	4620      	mov	r0, r4
 80129d6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80129da:	f7ff ffd5 	bl	8012988 <_ZN8touchgfx7Outline6lineToEii>
 80129de:	6923      	ldr	r3, [r4, #16]
 80129e0:	1170      	asrs	r0, r6, #5
 80129e2:	1169      	asrs	r1, r5, #5
 80129e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129e8:	4290      	cmp	r0, r2
 80129ea:	d103      	bne.n	80129f4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80129ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80129f0:	4291      	cmp	r1, r2
 80129f2:	d01a      	beq.n	8012a2a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80129f4:	88df      	ldrh	r7, [r3, #6]
 80129f6:	889a      	ldrh	r2, [r3, #4]
 80129f8:	433a      	orrs	r2, r7
 80129fa:	d010      	beq.n	8012a1e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80129fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012a00:	2a00      	cmp	r2, #0
 8012a02:	db0c      	blt.n	8012a1e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012a04:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012a06:	42ba      	cmp	r2, r7
 8012a08:	da09      	bge.n	8012a1e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012a0a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8012a0e:	42ba      	cmp	r2, r7
 8012a10:	f102 0201 	add.w	r2, r2, #1
 8012a14:	bf38      	it	cc
 8012a16:	3308      	addcc	r3, #8
 8012a18:	60a2      	str	r2, [r4, #8]
 8012a1a:	bf38      	it	cc
 8012a1c:	6123      	strcc	r3, [r4, #16]
 8012a1e:	6923      	ldr	r3, [r4, #16]
 8012a20:	2200      	movs	r2, #0
 8012a22:	8018      	strh	r0, [r3, #0]
 8012a24:	8059      	strh	r1, [r3, #2]
 8012a26:	809a      	strh	r2, [r3, #4]
 8012a28:	80da      	strh	r2, [r3, #6]
 8012a2a:	6166      	str	r6, [r4, #20]
 8012a2c:	6225      	str	r5, [r4, #32]
 8012a2e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a34 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8012a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a38:	b0d0      	sub	sp, #320	@ 0x140
 8012a3a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012a3e:	466c      	mov	r4, sp
 8012a40:	4627      	mov	r7, r4
 8012a42:	1a0d      	subs	r5, r1, r0
 8012a44:	f100 0308 	add.w	r3, r0, #8
 8012a48:	2d48      	cmp	r5, #72	@ 0x48
 8012a4a:	f340 80d5 	ble.w	8012bf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012a4e:	112d      	asrs	r5, r5, #4
 8012a50:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012a54:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012a58:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8012a5c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012a60:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012a64:	6816      	ldr	r6, [r2, #0]
 8012a66:	6006      	str	r6, [r0, #0]
 8012a68:	6856      	ldr	r6, [r2, #4]
 8012a6a:	6046      	str	r6, [r0, #4]
 8012a6c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012a70:	f8a2 8002 	strh.w	r8, [r2, #2]
 8012a74:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012a78:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012a7c:	f1a1 0208 	sub.w	r2, r1, #8
 8012a80:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012a84:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8012a88:	4565      	cmp	r5, ip
 8012a8a:	db06      	blt.n	8012a9a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8012a8c:	d119      	bne.n	8012ac2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012a8e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8012a92:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8012a96:	42ae      	cmp	r6, r5
 8012a98:	dd13      	ble.n	8012ac2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012a9a:	460e      	mov	r6, r1
 8012a9c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8012aa0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8012aa4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012aa8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8012aac:	601d      	str	r5, [r3, #0]
 8012aae:	6875      	ldr	r5, [r6, #4]
 8012ab0:	605d      	str	r5, [r3, #4]
 8012ab2:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012ab6:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012aba:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012abe:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012ac2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012ac6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8012aca:	42ae      	cmp	r6, r5
 8012acc:	db06      	blt.n	8012adc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8012ace:	d116      	bne.n	8012afe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012ad0:	f9b0 c000 	ldrsh.w	ip, [r0]
 8012ad4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8012ad8:	45ac      	cmp	ip, r5
 8012ada:	da10      	bge.n	8012afe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012adc:	681d      	ldr	r5, [r3, #0]
 8012ade:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012ae2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012ae6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012aea:	6005      	str	r5, [r0, #0]
 8012aec:	685d      	ldr	r5, [r3, #4]
 8012aee:	f8a0 8008 	strh.w	r8, [r0, #8]
 8012af2:	6045      	str	r5, [r0, #4]
 8012af4:	8146      	strh	r6, [r0, #10]
 8012af6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8012afa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012afe:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012b02:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012b06:	4565      	cmp	r5, ip
 8012b08:	db06      	blt.n	8012b18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8012b0a:	d119      	bne.n	8012b40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b0c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8012b10:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012b14:	42ae      	cmp	r6, r5
 8012b16:	da13      	bge.n	8012b40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b18:	460e      	mov	r6, r1
 8012b1a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012b1e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8012b22:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012b26:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8012b2a:	6005      	str	r5, [r0, #0]
 8012b2c:	6875      	ldr	r5, [r6, #4]
 8012b2e:	6045      	str	r5, [r0, #4]
 8012b30:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012b34:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012b38:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012b3c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012b40:	3308      	adds	r3, #8
 8012b42:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012b46:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8012b4a:	45e6      	cmp	lr, ip
 8012b4c:	dbf8      	blt.n	8012b40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b4e:	d105      	bne.n	8012b5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012b50:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012b54:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012b58:	42ae      	cmp	r6, r5
 8012b5a:	dbf1      	blt.n	8012b40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b5c:	4615      	mov	r5, r2
 8012b5e:	3a08      	subs	r2, #8
 8012b60:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012b64:	45b4      	cmp	ip, r6
 8012b66:	dbf9      	blt.n	8012b5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012b68:	d105      	bne.n	8012b76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8012b6a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012b6e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8012b72:	45b0      	cmp	r8, r6
 8012b74:	dbf2      	blt.n	8012b5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012b76:	4293      	cmp	r3, r2
 8012b78:	f1a5 0608 	sub.w	r6, r5, #8
 8012b7c:	d816      	bhi.n	8012bac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8012b7e:	f8d6 c000 	ldr.w	ip, [r6]
 8012b82:	f9b3 a000 	ldrsh.w	sl, [r3]
 8012b86:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8012b8a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8012b8e:	f8c3 c000 	str.w	ip, [r3]
 8012b92:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8012b96:	f8c3 c004 	str.w	ip, [r3, #4]
 8012b9a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012b9e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8012ba2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012ba6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8012baa:	e7c9      	b.n	8012b40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012bac:	f8d6 e000 	ldr.w	lr, [r6]
 8012bb0:	f9b0 a000 	ldrsh.w	sl, [r0]
 8012bb4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8012bb8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8012bbc:	f8c0 e000 	str.w	lr, [r0]
 8012bc0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8012bc4:	1a16      	subs	r6, r2, r0
 8012bc6:	f8c0 e004 	str.w	lr, [r0, #4]
 8012bca:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012bce:	f825 cc06 	strh.w	ip, [r5, #-6]
 8012bd2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012bd6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8012bda:	1acd      	subs	r5, r1, r3
 8012bdc:	10ed      	asrs	r5, r5, #3
 8012bde:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8012be2:	bfb5      	itete	lt
 8012be4:	e9c4 0200 	strdlt	r0, r2, [r4]
 8012be8:	e9c4 3100 	strdge	r3, r1, [r4]
 8012bec:	460a      	movlt	r2, r1
 8012bee:	4603      	movge	r3, r0
 8012bf0:	3408      	adds	r4, #8
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	e724      	b.n	8012a42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012bf8:	4299      	cmp	r1, r3
 8012bfa:	d927      	bls.n	8012c4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8012bfc:	f1a3 0210 	sub.w	r2, r3, #16
 8012c00:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8012c04:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8012c08:	45ac      	cmp	ip, r5
 8012c0a:	db06      	blt.n	8012c1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8012c0c:	d11c      	bne.n	8012c48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012c0e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8012c12:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8012c16:	42ae      	cmp	r6, r5
 8012c18:	da16      	bge.n	8012c48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012c1a:	4615      	mov	r5, r2
 8012c1c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8012c20:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8012c24:	3a08      	subs	r2, #8
 8012c26:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8012c2a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8012c2e:	6196      	str	r6, [r2, #24]
 8012c30:	42a8      	cmp	r0, r5
 8012c32:	686e      	ldr	r6, [r5, #4]
 8012c34:	f8a2 9010 	strh.w	r9, [r2, #16]
 8012c38:	61d6      	str	r6, [r2, #28]
 8012c3a:	f8a2 c012 	strh.w	ip, [r2, #18]
 8012c3e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8012c42:	f8a2 e016 	strh.w	lr, [r2, #22]
 8012c46:	d1db      	bne.n	8012c00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8012c48:	3308      	adds	r3, #8
 8012c4a:	e7d5      	b.n	8012bf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012c4c:	42bc      	cmp	r4, r7
 8012c4e:	d903      	bls.n	8012c58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012c50:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8012c54:	3c08      	subs	r4, #8
 8012c56:	e6f4      	b.n	8012a42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012c58:	b050      	add	sp, #320	@ 0x140
 8012c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012c5e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8012c5e:	b510      	push	{r4, lr}
 8012c60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012c62:	4604      	mov	r4, r0
 8012c64:	07da      	lsls	r2, r3, #31
 8012c66:	d507      	bpl.n	8012c78 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8012c68:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8012c6c:	f7ff fe8c 	bl	8012988 <_ZN8touchgfx7Outline6lineToEii>
 8012c70:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012c72:	f023 0301 	bic.w	r3, r3, #1
 8012c76:	6243      	str	r3, [r0, #36]	@ 0x24
 8012c78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012c7a:	079b      	lsls	r3, r3, #30
 8012c7c:	d521      	bpl.n	8012cc2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8012c7e:	6923      	ldr	r3, [r4, #16]
 8012c80:	88d9      	ldrh	r1, [r3, #6]
 8012c82:	889a      	ldrh	r2, [r3, #4]
 8012c84:	430a      	orrs	r2, r1
 8012c86:	d010      	beq.n	8012caa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012c88:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012c8c:	2a00      	cmp	r2, #0
 8012c8e:	db0c      	blt.n	8012caa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012c90:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012c92:	428a      	cmp	r2, r1
 8012c94:	da09      	bge.n	8012caa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012c96:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8012c9a:	4291      	cmp	r1, r2
 8012c9c:	f102 0201 	add.w	r2, r2, #1
 8012ca0:	bf88      	it	hi
 8012ca2:	3308      	addhi	r3, #8
 8012ca4:	60a2      	str	r2, [r4, #8]
 8012ca6:	bf88      	it	hi
 8012ca8:	6123      	strhi	r3, [r4, #16]
 8012caa:	68a1      	ldr	r1, [r4, #8]
 8012cac:	b129      	cbz	r1, 8012cba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012cae:	6863      	ldr	r3, [r4, #4]
 8012cb0:	4299      	cmp	r1, r3
 8012cb2:	d802      	bhi.n	8012cba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012cb4:	68e0      	ldr	r0, [r4, #12]
 8012cb6:	f7ff febd 	bl	8012a34 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8012cba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012cbc:	f023 0302 	bic.w	r3, r3, #2
 8012cc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8012cc2:	68e0      	ldr	r0, [r4, #12]
 8012cc4:	bd10      	pop	{r4, pc}
	...

08012cc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8012cc8:	4b02      	ldr	r3, [pc, #8]	@ (8012cd4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8012cca:	6018      	str	r0, [r3, #0]
 8012ccc:	4b02      	ldr	r3, [pc, #8]	@ (8012cd8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8012cce:	6019      	str	r1, [r3, #0]
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	2402dab4 	.word	0x2402dab4
 8012cd8:	2402dab8 	.word	0x2402dab8

08012cdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8012cdc:	2300      	movs	r3, #0
 8012cde:	4a02      	ldr	r2, [pc, #8]	@ (8012ce8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8012ce0:	6013      	str	r3, [r2, #0]
 8012ce2:	4a02      	ldr	r2, [pc, #8]	@ (8012cec <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8012ce4:	6013      	str	r3, [r2, #0]
 8012ce6:	4770      	bx	lr
 8012ce8:	2402dab4 	.word	0x2402dab4
 8012cec:	2402dab8 	.word	0x2402dab8

08012cf0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8012cf0:	4b01      	ldr	r3, [pc, #4]	@ (8012cf8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8012cf2:	6818      	ldr	r0, [r3, #0]
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	2402dab4 	.word	0x2402dab4

08012cfc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8012cfc:	4b01      	ldr	r3, [pc, #4]	@ (8012d04 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8012cfe:	6818      	ldr	r0, [r3, #0]
 8012d00:	4770      	bx	lr
 8012d02:	bf00      	nop
 8012d04:	2402dab8 	.word	0x2402dab8

08012d08 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	6803      	ldr	r3, [r0, #0]
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d10:	4798      	blx	r3
 8012d12:	1b03      	subs	r3, r0, r4
 8012d14:	4258      	negs	r0, r3
 8012d16:	4158      	adcs	r0, r3
 8012d18:	bd10      	pop	{r4, pc}
	...

08012d1c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8012d1c:	4b01      	ldr	r3, [pc, #4]	@ (8012d24 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8012d1e:	6019      	str	r1, [r3, #0]
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	2402dabc 	.word	0x2402dabc

08012d28 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2c:	4696      	mov	lr, r2
 8012d2e:	b097      	sub	sp, #92	@ 0x5c
 8012d30:	4605      	mov	r5, r0
 8012d32:	4614      	mov	r4, r2
 8012d34:	460e      	mov	r6, r1
 8012d36:	461f      	mov	r7, r3
 8012d38:	f10d 0c1c 	add.w	ip, sp, #28
 8012d3c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8012d40:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8012d44:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8012d48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d50:	f8de 3000 	ldr.w	r3, [lr]
 8012d54:	f104 0e14 	add.w	lr, r4, #20
 8012d58:	f8cc 3000 	str.w	r3, [ip]
 8012d5c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012d60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d68:	f8de 3000 	ldr.w	r3, [lr]
 8012d6c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012d70:	f8cc 3000 	str.w	r3, [ip]
 8012d74:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012d78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d80:	f8de 3000 	ldr.w	r3, [lr]
 8012d84:	4631      	mov	r1, r6
 8012d86:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012d88:	4628      	mov	r0, r5
 8012d8a:	f8cc 3000 	str.w	r3, [ip]
 8012d8e:	682b      	ldr	r3, [r5, #0]
 8012d90:	9201      	str	r2, [sp, #4]
 8012d92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012d94:	f8cd 8008 	str.w	r8, [sp, #8]
 8012d98:	9200      	str	r2, [sp, #0]
 8012d9a:	aa07      	add	r2, sp, #28
 8012d9c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012da0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8012da4:	463b      	mov	r3, r7
 8012da6:	47d8      	blx	fp
 8012da8:	46a6      	mov	lr, r4
 8012daa:	f10d 0c1c 	add.w	ip, sp, #28
 8012dae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012db2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012db6:	f8de 3000 	ldr.w	r3, [lr]
 8012dba:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012dbe:	343c      	adds	r4, #60	@ 0x3c
 8012dc0:	f8cc 3000 	str.w	r3, [ip]
 8012dc4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012dc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012dcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dd0:	f8de 3000 	ldr.w	r3, [lr]
 8012dd4:	f8cc 3000 	str.w	r3, [ip]
 8012dd8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	4631      	mov	r1, r6
 8012de6:	4628      	mov	r0, r5
 8012de8:	f8cc 3000 	str.w	r3, [ip]
 8012dec:	682b      	ldr	r3, [r5, #0]
 8012dee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012df2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012df4:	f8cd 8008 	str.w	r8, [sp, #8]
 8012df8:	9201      	str	r2, [sp, #4]
 8012dfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012dfc:	9200      	str	r2, [sp, #0]
 8012dfe:	aa07      	add	r2, sp, #28
 8012e00:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8012e02:	463b      	mov	r3, r7
 8012e04:	47a0      	blx	r4
 8012e06:	b017      	add	sp, #92	@ 0x5c
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e10:	b08d      	sub	sp, #52	@ 0x34
 8012e12:	4688      	mov	r8, r1
 8012e14:	f8d3 c000 	ldr.w	ip, [r3]
 8012e18:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012e1a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8012e1e:	680f      	ldr	r7, [r1, #0]
 8012e20:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8012e24:	eba7 070c 	sub.w	r7, r7, ip
 8012e28:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8012e2c:	edd3 6a07 	vldr	s13, [r3, #28]
 8012e30:	42bc      	cmp	r4, r7
 8012e32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012e34:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8012e38:	bfa8      	it	ge
 8012e3a:	463c      	movge	r4, r7
 8012e3c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012e40:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012e44:	ee07 4a90 	vmov	s15, r4
 8012e48:	eb09 0e0c 	add.w	lr, r9, ip
 8012e4c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8012e50:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012e54:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8012e58:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8012e5c:	4571      	cmp	r1, lr
 8012e5e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012e62:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012e66:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012e6a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012e6e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012e72:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012e76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012e7a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012e7e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012e82:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012e86:	f340 808c 	ble.w	8012fa2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012e8a:	eba1 060e 	sub.w	r6, r1, lr
 8012e8e:	fb96 f5f4 	sdiv	r5, r6, r4
 8012e92:	ee07 5a10 	vmov	s14, r5
 8012e96:	2d00      	cmp	r5, #0
 8012e98:	fb04 6615 	mls	r6, r4, r5, r6
 8012e9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ea0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012ea4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012ea8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012eac:	dd12      	ble.n	8012ed4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8012eae:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012eb2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012eb6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012eba:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec2:	bf14      	ite	ne
 8012ec4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012ec8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012ecc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012ed0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012ed4:	fb05 f204 	mul.w	r2, r5, r4
 8012ed8:	1abf      	subs	r7, r7, r2
 8012eda:	4494      	add	ip, r2
 8012edc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8012ee0:	4411      	add	r1, r2
 8012ee2:	eb09 020c 	add.w	r2, r9, ip
 8012ee6:	b209      	sxth	r1, r1
 8012ee8:	443a      	add	r2, r7
 8012eea:	428a      	cmp	r2, r1
 8012eec:	bfc4      	itt	gt
 8012eee:	eba1 0209 	subgt.w	r2, r1, r9
 8012ef2:	eba2 070c 	subgt.w	r7, r2, ip
 8012ef6:	2f00      	cmp	r7, #0
 8012ef8:	dd50      	ble.n	8012f9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8012efa:	fb97 f1f4 	sdiv	r1, r7, r4
 8012efe:	fb04 7211 	mls	r2, r4, r1, r7
 8012f02:	b90a      	cbnz	r2, 8012f08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8012f04:	3901      	subs	r1, #1
 8012f06:	4622      	mov	r2, r4
 8012f08:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012f0c:	6840      	ldr	r0, [r0, #4]
 8012f0e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8012f12:	44b6      	add	lr, r6
 8012f14:	f8d0 a000 	ldr.w	sl, [r0]
 8012f18:	2900      	cmp	r1, #0
 8012f1a:	bfcc      	ite	gt
 8012f1c:	46a1      	movgt	r9, r4
 8012f1e:	4691      	movle	r9, r2
 8012f20:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012f22:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012f24:	fb04 e505 	mla	r5, r4, r5, lr
 8012f28:	eef0 6a42 	vmov.f32	s13, s4
 8012f2c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012f30:	9008      	str	r0, [sp, #32]
 8012f32:	eeb0 7a61 	vmov.f32	s14, s3
 8012f36:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8012f38:	695b      	ldr	r3, [r3, #20]
 8012f3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012f3e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012f42:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012f46:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012f48:	445b      	add	r3, fp
 8012f4a:	9307      	str	r3, [sp, #28]
 8012f4c:	ee16 3a90 	vmov	r3, s13
 8012f50:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012f54:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012f58:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012f5c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012f60:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012f64:	ee17 7a90 	vmov	r7, s15
 8012f68:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012f6c:	fb97 f7f4 	sdiv	r7, r7, r4
 8012f70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012f74:	ee17 ca90 	vmov	ip, s15
 8012f78:	fb9c fcf4 	sdiv	ip, ip, r4
 8012f7c:	fb0c 3306 	mla	r3, ip, r6, r3
 8012f80:	9302      	str	r3, [sp, #8]
 8012f82:	ee17 3a10 	vmov	r3, s14
 8012f86:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012f8a:	fb07 3706 	mla	r7, r7, r6, r3
 8012f8e:	eba9 0306 	sub.w	r3, r9, r6
 8012f92:	e9cd 4700 	strd	r4, r7, [sp]
 8012f96:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012f9a:	47a0      	blx	r4
 8012f9c:	b00d      	add	sp, #52	@ 0x34
 8012f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa2:	2500      	movs	r5, #0
 8012fa4:	462e      	mov	r6, r5
 8012fa6:	e799      	b.n	8012edc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	b0db      	sub	sp, #364	@ 0x16c
 8012fae:	461d      	mov	r5, r3
 8012fb0:	4614      	mov	r4, r2
 8012fb2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8012fb6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012fb8:	4629      	mov	r1, r5
 8012fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8012fbc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8012fc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8012fc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fc4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8012fc8:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8012fcc:	9310      	str	r3, [sp, #64]	@ 0x40
 8012fce:	6803      	ldr	r3, [r0, #0]
 8012fd0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8012fd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012fd6:	47b8      	blx	r7
 8012fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fda:	6058      	str	r0, [r3, #4]
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	f000 83a1 	beq.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fe2:	682b      	ldr	r3, [r5, #0]
 8012fe4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8012fe8:	ed94 7a02 	vldr	s14, [r4, #8]
 8012fec:	9314      	str	r3, [sp, #80]	@ 0x50
 8012fee:	686b      	ldr	r3, [r5, #4]
 8012ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ff4:	9315      	str	r3, [sp, #84]	@ 0x54
 8012ff6:	4bc1      	ldr	r3, [pc, #772]	@ (80132fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012ff8:	7819      	ldrb	r1, [r3, #0]
 8012ffa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012ffe:	2900      	cmp	r1, #0
 8013000:	bf16      	itet	ne
 8013002:	4619      	movne	r1, r3
 8013004:	4611      	moveq	r1, r2
 8013006:	4613      	movne	r3, r2
 8013008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300c:	9116      	str	r1, [sp, #88]	@ 0x58
 801300e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8013012:	f240 8387 	bls.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013016:	ed94 7a07 	vldr	s14, [r4, #28]
 801301a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013022:	f240 837f 	bls.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013026:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801302a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013032:	f240 8377 	bls.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013036:	6822      	ldr	r2, [r4, #0]
 8013038:	4bb1      	ldr	r3, [pc, #708]	@ (8013300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801303a:	429a      	cmp	r2, r3
 801303c:	f2c0 8372 	blt.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013040:	49b0      	ldr	r1, [pc, #704]	@ (8013304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8013042:	6963      	ldr	r3, [r4, #20]
 8013044:	428a      	cmp	r2, r1
 8013046:	f300 836d 	bgt.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801304a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801304e:	48ae      	ldr	r0, [pc, #696]	@ (8013308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013050:	33ff      	adds	r3, #255	@ 0xff
 8013052:	4283      	cmp	r3, r0
 8013054:	f200 8366 	bhi.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013058:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801305a:	4dac      	ldr	r5, [pc, #688]	@ (801330c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801305c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013060:	33ff      	adds	r3, #255	@ 0xff
 8013062:	42ab      	cmp	r3, r5
 8013064:	f200 835e 	bhi.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013068:	6862      	ldr	r2, [r4, #4]
 801306a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801306e:	33ff      	adds	r3, #255	@ 0xff
 8013070:	4283      	cmp	r3, r0
 8013072:	f200 8357 	bhi.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013076:	69a1      	ldr	r1, [r4, #24]
 8013078:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801307c:	33ff      	adds	r3, #255	@ 0xff
 801307e:	4283      	cmp	r3, r0
 8013080:	f200 8350 	bhi.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013084:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013086:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801308a:	30ff      	adds	r0, #255	@ 0xff
 801308c:	42a8      	cmp	r0, r5
 801308e:	f200 8349 	bhi.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013092:	428a      	cmp	r2, r1
 8013094:	f280 8110 	bge.w	80132b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013098:	429a      	cmp	r2, r3
 801309a:	f300 8119 	bgt.w	80132d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801309e:	4299      	cmp	r1, r3
 80130a0:	f280 811d 	bge.w	80132de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80130a4:	2502      	movs	r5, #2
 80130a6:	2701      	movs	r7, #1
 80130a8:	46a9      	mov	r9, r5
 80130aa:	46b8      	mov	r8, r7
 80130ac:	f04f 0a00 	mov.w	sl, #0
 80130b0:	4621      	mov	r1, r4
 80130b2:	a849      	add	r0, sp, #292	@ 0x124
 80130b4:	f004 f8ba 	bl	801722c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80130b8:	4622      	mov	r2, r4
 80130ba:	4653      	mov	r3, sl
 80130bc:	a949      	add	r1, sp, #292	@ 0x124
 80130be:	f8cd 9000 	str.w	r9, [sp]
 80130c2:	a819      	add	r0, sp, #100	@ 0x64
 80130c4:	f004 f9e2 	bl	801748c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80130c8:	4622      	mov	r2, r4
 80130ca:	4653      	mov	r3, sl
 80130cc:	a949      	add	r1, sp, #292	@ 0x124
 80130ce:	f8cd 8000 	str.w	r8, [sp]
 80130d2:	a829      	add	r0, sp, #164	@ 0xa4
 80130d4:	f004 f9da 	bl	801748c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80130d8:	4643      	mov	r3, r8
 80130da:	4622      	mov	r2, r4
 80130dc:	a949      	add	r1, sp, #292	@ 0x124
 80130de:	f8cd 9000 	str.w	r9, [sp]
 80130e2:	a839      	add	r0, sp, #228	@ 0xe4
 80130e4:	f004 f9d2 	bl	801748c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80130e8:	42af      	cmp	r7, r5
 80130ea:	af12      	add	r7, sp, #72	@ 0x48
 80130ec:	bfb7      	itett	lt
 80130ee:	2300      	movlt	r3, #0
 80130f0:	2301      	movge	r3, #1
 80130f2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80130f4:	ac19      	addlt	r4, sp, #100	@ 0x64
 80130f6:	bfb1      	iteee	lt
 80130f8:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80130fa:	ad19      	addge	r5, sp, #100	@ 0x64
 80130fc:	930e      	strge	r3, [sp, #56]	@ 0x38
 80130fe:	ac29      	addge	r4, sp, #164	@ 0xa4
 8013100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013102:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013106:	e887 0003 	stmia.w	r7, {r0, r1}
 801310a:	b928      	cbnz	r0, 8013118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801310c:	4b80      	ldr	r3, [pc, #512]	@ (8013310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801310e:	6818      	ldr	r0, [r3, #0]
 8013110:	6803      	ldr	r3, [r0, #0]
 8013112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013114:	4798      	blx	r3
 8013116:	6038      	str	r0, [r7, #0]
 8013118:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801311a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801311e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013122:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8013124:	930c      	str	r3, [sp, #48]	@ 0x30
 8013126:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013128:	6963      	ldr	r3, [r4, #20]
 801312a:	440b      	add	r3, r1
 801312c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013130:	4408      	add	r0, r1
 8013132:	b200      	sxth	r0, r0
 8013134:	4283      	cmp	r3, r0
 8013136:	900d      	str	r0, [sp, #52]	@ 0x34
 8013138:	f280 80dd 	bge.w	80132f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801313c:	428b      	cmp	r3, r1
 801313e:	da08      	bge.n	8013152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013140:	2a00      	cmp	r2, #0
 8013142:	dd06      	ble.n	8013152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013144:	1acb      	subs	r3, r1, r3
 8013146:	429a      	cmp	r2, r3
 8013148:	f2c0 80e4 	blt.w	8013314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801314c:	2b00      	cmp	r3, #0
 801314e:	f300 80e2 	bgt.w	8013316 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013152:	6967      	ldr	r7, [r4, #20]
 8013154:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801315a:	443b      	add	r3, r7
 801315c:	461f      	mov	r7, r3
 801315e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013160:	1bdf      	subs	r7, r3, r7
 8013162:	4297      	cmp	r7, r2
 8013164:	bfa8      	it	ge
 8013166:	4617      	movge	r7, r2
 8013168:	2f00      	cmp	r7, #0
 801316a:	f340 8166 	ble.w	801343a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801316e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013170:	6829      	ldr	r1, [r5, #0]
 8013172:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013176:	f9bb 3000 	ldrsh.w	r3, [fp]
 801317a:	4411      	add	r1, r2
 801317c:	6820      	ldr	r0, [r4, #0]
 801317e:	4299      	cmp	r1, r3
 8013180:	dd1a      	ble.n	80131b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013182:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013186:	4402      	add	r2, r0
 8013188:	440b      	add	r3, r1
 801318a:	b21b      	sxth	r3, r3
 801318c:	429a      	cmp	r2, r3
 801318e:	dc13      	bgt.n	80131b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013190:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013192:	a912      	add	r1, sp, #72	@ 0x48
 8013194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	9206      	str	r2, [sp, #24]
 801319c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801319e:	9500      	str	r5, [sp, #0]
 80131a0:	9205      	str	r2, [sp, #20]
 80131a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80131a4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80131a8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80131aa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80131ae:	aa49      	add	r2, sp, #292	@ 0x124
 80131b0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80131b4:	4623      	mov	r3, r4
 80131b6:	47c8      	blx	r9
 80131b8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80131bc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80131c0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80131c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80131c8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80131cc:	68a1      	ldr	r1, [r4, #8]
 80131ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131d2:	ed94 6a08 	vldr	s12, [r4, #32]
 80131d6:	edd4 6a07 	vldr	s13, [r4, #28]
 80131da:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80131de:	ee76 6a86 	vadd.f32	s13, s13, s12
 80131e2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80131e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80131ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80131ee:	441a      	add	r2, r3
 80131f0:	6963      	ldr	r3, [r4, #20]
 80131f2:	3301      	adds	r3, #1
 80131f4:	6022      	str	r2, [r4, #0]
 80131f6:	6163      	str	r3, [r4, #20]
 80131f8:	69a3      	ldr	r3, [r4, #24]
 80131fa:	3b01      	subs	r3, #1
 80131fc:	61a3      	str	r3, [r4, #24]
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	440b      	add	r3, r1
 8013202:	68e1      	ldr	r1, [r4, #12]
 8013204:	428b      	cmp	r3, r1
 8013206:	6123      	str	r3, [r4, #16]
 8013208:	db15      	blt.n	8013236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801320a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801320e:	3201      	adds	r2, #1
 8013210:	1a5b      	subs	r3, r3, r1
 8013212:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013216:	6022      	str	r2, [r4, #0]
 8013218:	6123      	str	r3, [r4, #16]
 801321a:	edc4 6a07 	vstr	s13, [r4, #28]
 801321e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013222:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013226:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801322a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801322e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013232:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013236:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801323a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801323e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013246:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801324a:	68a9      	ldr	r1, [r5, #8]
 801324c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013250:	ed95 6a08 	vldr	s12, [r5, #32]
 8013254:	edd5 6a07 	vldr	s13, [r5, #28]
 8013258:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801325c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013260:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013264:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013268:	edc5 6a07 	vstr	s13, [r5, #28]
 801326c:	441a      	add	r2, r3
 801326e:	696b      	ldr	r3, [r5, #20]
 8013270:	3301      	adds	r3, #1
 8013272:	602a      	str	r2, [r5, #0]
 8013274:	616b      	str	r3, [r5, #20]
 8013276:	69ab      	ldr	r3, [r5, #24]
 8013278:	3b01      	subs	r3, #1
 801327a:	61ab      	str	r3, [r5, #24]
 801327c:	692b      	ldr	r3, [r5, #16]
 801327e:	440b      	add	r3, r1
 8013280:	68e9      	ldr	r1, [r5, #12]
 8013282:	428b      	cmp	r3, r1
 8013284:	612b      	str	r3, [r5, #16]
 8013286:	db15      	blt.n	80132b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013288:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801328c:	3201      	adds	r2, #1
 801328e:	1a5b      	subs	r3, r3, r1
 8013290:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013294:	602a      	str	r2, [r5, #0]
 8013296:	612b      	str	r3, [r5, #16]
 8013298:	edc5 6a07 	vstr	s13, [r5, #28]
 801329c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80132a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80132a4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80132a8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80132ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132b0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80132b4:	3f01      	subs	r7, #1
 80132b6:	e757      	b.n	8013168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80132b8:	4299      	cmp	r1, r3
 80132ba:	dc13      	bgt.n	80132e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80132bc:	429a      	cmp	r2, r3
 80132be:	da14      	bge.n	80132ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80132c0:	2502      	movs	r5, #2
 80132c2:	2703      	movs	r7, #3
 80132c4:	f04f 0800 	mov.w	r8, #0
 80132c8:	46a9      	mov	r9, r5
 80132ca:	f04f 0a01 	mov.w	sl, #1
 80132ce:	e6ef      	b.n	80130b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80132d0:	2501      	movs	r5, #1
 80132d2:	2700      	movs	r7, #0
 80132d4:	46a9      	mov	r9, r5
 80132d6:	46b8      	mov	r8, r7
 80132d8:	f04f 0a02 	mov.w	sl, #2
 80132dc:	e6e8      	b.n	80130b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80132de:	2501      	movs	r5, #1
 80132e0:	2702      	movs	r7, #2
 80132e2:	e6e1      	b.n	80130a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80132e4:	2500      	movs	r5, #0
 80132e6:	2701      	movs	r7, #1
 80132e8:	e7f4      	b.n	80132d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80132ea:	2702      	movs	r7, #2
 80132ec:	2503      	movs	r5, #3
 80132ee:	f04f 0900 	mov.w	r9, #0
 80132f2:	46b8      	mov	r8, r7
 80132f4:	e7e9      	b.n	80132ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80132f6:	4613      	mov	r3, r2
 80132f8:	e728      	b.n	801314c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80132fa:	bf00      	nop
 80132fc:	2402daa4 	.word	0x2402daa4
 8013300:	fffd8f01 	.word	0xfffd8f01
 8013304:	00027100 	.word	0x00027100
 8013308:	0004e1ff 	.word	0x0004e1ff
 801330c:	0004e1fe 	.word	0x0004e1fe
 8013310:	2402daac 	.word	0x2402daac
 8013314:	4613      	mov	r3, r2
 8013316:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013318:	469e      	mov	lr, r3
 801331a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801331c:	469c      	mov	ip, r3
 801331e:	9111      	str	r1, [sp, #68]	@ 0x44
 8013320:	f04f 0900 	mov.w	r9, #0
 8013324:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8013328:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801332c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8013330:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8013334:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8013338:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801333c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8013340:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8013344:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8013348:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801334c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8013350:	f1bc 0f00 	cmp.w	ip, #0
 8013354:	d147      	bne.n	80133e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8013356:	eb03 0c07 	add.w	ip, r3, r7
 801335a:	1ad7      	subs	r7, r2, r3
 801335c:	f1b9 0f00 	cmp.w	r9, #0
 8013360:	d009      	beq.n	8013376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013362:	9029      	str	r0, [sp, #164]	@ 0xa4
 8013364:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8013368:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801336c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8013370:	912d      	str	r1, [sp, #180]	@ 0xb4
 8013372:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8013376:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013378:	f04f 0800 	mov.w	r8, #0
 801337c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013380:	9111      	str	r1, [sp, #68]	@ 0x44
 8013382:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013386:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801338a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801338e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8013392:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8013396:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801339a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801339e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80133a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80133a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80133aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80133ae:	f1be 0f00 	cmp.w	lr, #0
 80133b2:	d031      	beq.n	8013418 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80133b4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80133b6:	4450      	add	r0, sl
 80133b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80133bc:	4431      	add	r1, r6
 80133be:	ee37 7a04 	vadd.f32	s14, s14, s8
 80133c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80133c6:	4549      	cmp	r1, r9
 80133c8:	db08      	blt.n	80133dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80133ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80133ce:	3001      	adds	r0, #1
 80133d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80133d4:	eba1 0109 	sub.w	r1, r1, r9
 80133d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80133dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80133e0:	f04f 0801 	mov.w	r8, #1
 80133e4:	e7e3      	b.n	80133ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80133e6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80133e8:	4450      	add	r0, sl
 80133ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 80133ee:	4431      	add	r1, r6
 80133f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80133f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80133f8:	4541      	cmp	r1, r8
 80133fa:	db08      	blt.n	801340e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80133fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013400:	3001      	adds	r0, #1
 8013402:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013406:	eba1 0108 	sub.w	r1, r1, r8
 801340a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801340e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013412:	f04f 0901 	mov.w	r9, #1
 8013416:	e79b      	b.n	8013350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8013418:	449c      	add	ip, r3
 801341a:	1aff      	subs	r7, r7, r3
 801341c:	f1b8 0f00 	cmp.w	r8, #0
 8013420:	d009      	beq.n	8013436 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013422:	9019      	str	r0, [sp, #100]	@ 0x64
 8013424:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8013428:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801342c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8013430:	911d      	str	r1, [sp, #116]	@ 0x74
 8013432:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8013436:	1ad2      	subs	r2, r2, r3
 8013438:	e68b      	b.n	8013152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801343a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801343c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801343e:	2b00      	cmp	r3, #0
 8013440:	f000 80d1 	beq.w	80135e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013444:	ad19      	add	r5, sp, #100	@ 0x64
 8013446:	ac39      	add	r4, sp, #228	@ 0xe4
 8013448:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801344a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801344e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013452:	930c      	str	r3, [sp, #48]	@ 0x30
 8013454:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013456:	6963      	ldr	r3, [r4, #20]
 8013458:	440b      	add	r3, r1
 801345a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801345e:	4408      	add	r0, r1
 8013460:	b200      	sxth	r0, r0
 8013462:	4283      	cmp	r3, r0
 8013464:	900d      	str	r0, [sp, #52]	@ 0x34
 8013466:	f280 80c1 	bge.w	80135ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801346a:	428b      	cmp	r3, r1
 801346c:	da08      	bge.n	8013480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801346e:	2a00      	cmp	r2, #0
 8013470:	dd06      	ble.n	8013480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013472:	1acb      	subs	r3, r1, r3
 8013474:	429a      	cmp	r2, r3
 8013476:	f2c0 80bb 	blt.w	80135f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801347a:	2b00      	cmp	r3, #0
 801347c:	f300 80b9 	bgt.w	80135f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013480:	6967      	ldr	r7, [r4, #20]
 8013482:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013488:	443b      	add	r3, r7
 801348a:	461f      	mov	r7, r3
 801348c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801348e:	1bdf      	subs	r7, r3, r7
 8013490:	4297      	cmp	r7, r2
 8013492:	bfa8      	it	ge
 8013494:	4617      	movge	r7, r2
 8013496:	2f00      	cmp	r7, #0
 8013498:	f340 813c 	ble.w	8013714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801349c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801349e:	6829      	ldr	r1, [r5, #0]
 80134a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80134a4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80134a8:	4411      	add	r1, r2
 80134aa:	6820      	ldr	r0, [r4, #0]
 80134ac:	4299      	cmp	r1, r3
 80134ae:	dd1a      	ble.n	80134e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80134b0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80134b4:	4402      	add	r2, r0
 80134b6:	440b      	add	r3, r1
 80134b8:	b21b      	sxth	r3, r3
 80134ba:	429a      	cmp	r2, r3
 80134bc:	dc13      	bgt.n	80134e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80134be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80134c0:	a912      	add	r1, sp, #72	@ 0x48
 80134c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	9206      	str	r2, [sp, #24]
 80134ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80134cc:	9500      	str	r5, [sp, #0]
 80134ce:	9205      	str	r2, [sp, #20]
 80134d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80134d2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80134d6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80134d8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80134dc:	aa49      	add	r2, sp, #292	@ 0x124
 80134de:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80134e2:	4623      	mov	r3, r4
 80134e4:	47c8      	blx	r9
 80134e6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80134ea:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80134ee:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80134f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134f6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80134fa:	68a1      	ldr	r1, [r4, #8]
 80134fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013500:	ed94 6a08 	vldr	s12, [r4, #32]
 8013504:	edd4 6a07 	vldr	s13, [r4, #28]
 8013508:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801350c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013510:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013514:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013518:	edc4 6a07 	vstr	s13, [r4, #28]
 801351c:	441a      	add	r2, r3
 801351e:	6963      	ldr	r3, [r4, #20]
 8013520:	3301      	adds	r3, #1
 8013522:	6022      	str	r2, [r4, #0]
 8013524:	6163      	str	r3, [r4, #20]
 8013526:	69a3      	ldr	r3, [r4, #24]
 8013528:	3b01      	subs	r3, #1
 801352a:	61a3      	str	r3, [r4, #24]
 801352c:	6923      	ldr	r3, [r4, #16]
 801352e:	440b      	add	r3, r1
 8013530:	68e1      	ldr	r1, [r4, #12]
 8013532:	428b      	cmp	r3, r1
 8013534:	6123      	str	r3, [r4, #16]
 8013536:	db15      	blt.n	8013564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013538:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801353c:	3201      	adds	r2, #1
 801353e:	1a5b      	subs	r3, r3, r1
 8013540:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013544:	6022      	str	r2, [r4, #0]
 8013546:	6123      	str	r3, [r4, #16]
 8013548:	edc4 6a07 	vstr	s13, [r4, #28]
 801354c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013550:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013554:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013558:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013560:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013564:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013568:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801356c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013574:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013578:	68a9      	ldr	r1, [r5, #8]
 801357a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801357e:	ed95 6a08 	vldr	s12, [r5, #32]
 8013582:	edd5 6a07 	vldr	s13, [r5, #28]
 8013586:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801358a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801358e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013592:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013596:	edc5 6a07 	vstr	s13, [r5, #28]
 801359a:	441a      	add	r2, r3
 801359c:	696b      	ldr	r3, [r5, #20]
 801359e:	3301      	adds	r3, #1
 80135a0:	602a      	str	r2, [r5, #0]
 80135a2:	616b      	str	r3, [r5, #20]
 80135a4:	69ab      	ldr	r3, [r5, #24]
 80135a6:	3b01      	subs	r3, #1
 80135a8:	61ab      	str	r3, [r5, #24]
 80135aa:	692b      	ldr	r3, [r5, #16]
 80135ac:	440b      	add	r3, r1
 80135ae:	68e9      	ldr	r1, [r5, #12]
 80135b0:	428b      	cmp	r3, r1
 80135b2:	612b      	str	r3, [r5, #16]
 80135b4:	db15      	blt.n	80135e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80135b6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80135ba:	3201      	adds	r2, #1
 80135bc:	1a5b      	subs	r3, r3, r1
 80135be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80135c2:	602a      	str	r2, [r5, #0]
 80135c4:	612b      	str	r3, [r5, #16]
 80135c6:	edc5 6a07 	vstr	s13, [r5, #28]
 80135ca:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80135ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80135d2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80135d6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80135da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135de:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80135e2:	3f01      	subs	r7, #1
 80135e4:	e757      	b.n	8013496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80135e6:	ad39      	add	r5, sp, #228	@ 0xe4
 80135e8:	ac19      	add	r4, sp, #100	@ 0x64
 80135ea:	e72d      	b.n	8013448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80135ec:	4613      	mov	r3, r2
 80135ee:	e744      	b.n	801347a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80135f0:	4613      	mov	r3, r2
 80135f2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80135f4:	469e      	mov	lr, r3
 80135f6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80135fa:	461f      	mov	r7, r3
 80135fc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8013600:	f04f 0900 	mov.w	r9, #0
 8013604:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8013608:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801360c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8013610:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8013614:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8013618:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801361a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801361e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8013622:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8013626:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801362a:	960e      	str	r6, [sp, #56]	@ 0x38
 801362c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8013630:	2f00      	cmp	r7, #0
 8013632:	d146      	bne.n	80136c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013634:	449c      	add	ip, r3
 8013636:	1ad7      	subs	r7, r2, r3
 8013638:	f1b9 0f00 	cmp.w	r9, #0
 801363c:	d009      	beq.n	8013652 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801363e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8013640:	913d      	str	r1, [sp, #244]	@ 0xf4
 8013642:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8013646:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801364a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801364e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8013652:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013654:	f04f 0800 	mov.w	r8, #0
 8013658:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801365c:	910e      	str	r1, [sp, #56]	@ 0x38
 801365e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013662:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013666:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801366a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801366e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8013672:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013676:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801367a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801367e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8013682:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013686:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801368a:	f1be 0f00 	cmp.w	lr, #0
 801368e:	d030      	beq.n	80136f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013690:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013692:	4450      	add	r0, sl
 8013694:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013698:	4431      	add	r1, r6
 801369a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801369e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80136a2:	4549      	cmp	r1, r9
 80136a4:	db08      	blt.n	80136b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80136a6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80136aa:	3001      	adds	r0, #1
 80136ac:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80136b0:	eba1 0109 	sub.w	r1, r1, r9
 80136b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80136b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80136bc:	f04f 0801 	mov.w	r8, #1
 80136c0:	e7e3      	b.n	801368a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80136c2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80136c4:	4450      	add	r0, sl
 80136c6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80136ca:	4431      	add	r1, r6
 80136cc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80136d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80136d4:	4541      	cmp	r1, r8
 80136d6:	db08      	blt.n	80136ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80136d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80136dc:	3001      	adds	r0, #1
 80136de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80136e2:	eba1 0108 	sub.w	r1, r1, r8
 80136e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80136ea:	3f01      	subs	r7, #1
 80136ec:	f04f 0901 	mov.w	r9, #1
 80136f0:	e79e      	b.n	8013630 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80136f2:	449c      	add	ip, r3
 80136f4:	1aff      	subs	r7, r7, r3
 80136f6:	f1b8 0f00 	cmp.w	r8, #0
 80136fa:	d009      	beq.n	8013710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80136fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80136fe:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8013702:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8013706:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801370a:	911d      	str	r1, [sp, #116]	@ 0x74
 801370c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8013710:	1ad2      	subs	r2, r2, r3
 8013712:	e6b5      	b.n	8013480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	b923      	cbnz	r3, 8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801371a:	4b04      	ldr	r3, [pc, #16]	@ (801372c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801371c:	6818      	ldr	r0, [r3, #0]
 801371e:	6803      	ldr	r3, [r0, #0]
 8013720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013722:	4798      	blx	r3
 8013724:	b05b      	add	sp, #364	@ 0x16c
 8013726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372a:	bf00      	nop
 801372c:	2402daac 	.word	0x2402daac

08013730 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8013730:	b570      	push	{r4, r5, r6, lr}
 8013732:	4604      	mov	r4, r0
 8013734:	2500      	movs	r5, #0
 8013736:	9805      	ldr	r0, [sp, #20]
 8013738:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801373c:	6061      	str	r1, [r4, #4]
 801373e:	8263      	strh	r3, [r4, #18]
 8013740:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8013744:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013748:	8025      	strh	r5, [r4, #0]
 801374a:	7221      	strb	r1, [r4, #8]
 801374c:	7266      	strb	r6, [r4, #9]
 801374e:	60e0      	str	r0, [r4, #12]
 8013750:	8222      	strh	r2, [r4, #16]
 8013752:	82a3      	strh	r3, [r4, #20]
 8013754:	82e5      	strh	r5, [r4, #22]
 8013756:	8325      	strh	r5, [r4, #24]
 8013758:	8365      	strh	r5, [r4, #26]
 801375a:	83a5      	strh	r5, [r4, #28]
 801375c:	83e5      	strh	r5, [r4, #30]
 801375e:	8425      	strh	r5, [r4, #32]
 8013760:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8013764:	b32e      	cbz	r6, 80137b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013766:	6803      	ldr	r3, [r0, #0]
 8013768:	695b      	ldr	r3, [r3, #20]
 801376a:	4798      	blx	r3
 801376c:	4606      	mov	r6, r0
 801376e:	b300      	cbz	r0, 80137b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013770:	68e0      	ldr	r0, [r4, #12]
 8013772:	4631      	mov	r1, r6
 8013774:	6803      	ldr	r3, [r0, #0]
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	4798      	blx	r3
 801377a:	4605      	mov	r5, r0
 801377c:	b1c8      	cbz	r0, 80137b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801377e:	7b43      	ldrb	r3, [r0, #13]
 8013780:	7a82      	ldrb	r2, [r0, #10]
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013788:	4313      	orrs	r3, r2
 801378a:	8423      	strh	r3, [r4, #32]
 801378c:	7a63      	ldrb	r3, [r4, #9]
 801378e:	2b06      	cmp	r3, #6
 8013790:	d10f      	bne.n	80137b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013792:	68e0      	ldr	r0, [r4, #12]
 8013794:	462a      	mov	r2, r5
 8013796:	4631      	mov	r1, r6
 8013798:	6803      	ldr	r3, [r0, #0]
 801379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801379c:	4798      	blx	r3
 801379e:	7b6b      	ldrb	r3, [r5, #13]
 80137a0:	005b      	lsls	r3, r3, #1
 80137a2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80137a6:	7aab      	ldrb	r3, [r5, #10]
 80137a8:	4313      	orrs	r3, r2
 80137aa:	4418      	add	r0, r3
 80137ac:	8c23      	ldrh	r3, [r4, #32]
 80137ae:	4418      	add	r0, r3
 80137b0:	8420      	strh	r0, [r4, #32]
 80137b2:	4620      	mov	r0, r4
 80137b4:	bd70      	pop	{r4, r5, r6, pc}

080137b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80137b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ba:	2400      	movs	r4, #0
 80137bc:	b085      	sub	sp, #20
 80137be:	4681      	mov	r9, r0
 80137c0:	4688      	mov	r8, r1
 80137c2:	4692      	mov	sl, r2
 80137c4:	469b      	mov	fp, r3
 80137c6:	4627      	mov	r7, r4
 80137c8:	4625      	mov	r5, r4
 80137ca:	4626      	mov	r6, r4
 80137cc:	4554      	cmp	r4, sl
 80137ce:	da2a      	bge.n	8013826 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80137d0:	2300      	movs	r3, #0
 80137d2:	9303      	str	r3, [sp, #12]
 80137d4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80137d8:	429d      	cmp	r5, r3
 80137da:	d004      	beq.n	80137e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80137dc:	f242 030b 	movw	r3, #8203	@ 0x200b
 80137e0:	429d      	cmp	r5, r3
 80137e2:	bf18      	it	ne
 80137e4:	462f      	movne	r7, r5
 80137e6:	ab03      	add	r3, sp, #12
 80137e8:	4642      	mov	r2, r8
 80137ea:	4659      	mov	r1, fp
 80137ec:	4648      	mov	r0, r9
 80137ee:	f003 fb33 	bl	8016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80137f2:	4605      	mov	r5, r0
 80137f4:	b1b8      	cbz	r0, 8013826 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80137f6:	280a      	cmp	r0, #10
 80137f8:	d015      	beq.n	8013826 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80137fa:	9a03      	ldr	r2, [sp, #12]
 80137fc:	b18a      	cbz	r2, 8013822 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80137fe:	7b50      	ldrb	r0, [r2, #13]
 8013800:	4639      	mov	r1, r7
 8013802:	7a93      	ldrb	r3, [r2, #10]
 8013804:	0040      	lsls	r0, r0, #1
 8013806:	8895      	ldrh	r5, [r2, #4]
 8013808:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801380c:	4303      	orrs	r3, r0
 801380e:	4640      	mov	r0, r8
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	f8d8 3000 	ldr.w	r3, [r8]
 8013816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013818:	4798      	blx	r3
 801381a:	9b01      	ldr	r3, [sp, #4]
 801381c:	4418      	add	r0, r3
 801381e:	4406      	add	r6, r0
 8013820:	b2b6      	uxth	r6, r6
 8013822:	3401      	adds	r4, #1
 8013824:	e7d2      	b.n	80137cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8013826:	4630      	mov	r0, r6
 8013828:	b005      	add	sp, #20
 801382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801382e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801382e:	2a02      	cmp	r2, #2
 8013830:	b530      	push	{r4, r5, lr}
 8013832:	d011      	beq.n	8013858 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8013834:	2a03      	cmp	r2, #3
 8013836:	d01c      	beq.n	8013872 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8013838:	2a01      	cmp	r2, #1
 801383a:	d10c      	bne.n	8013856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801383c:	888b      	ldrh	r3, [r1, #4]
 801383e:	8801      	ldrh	r1, [r0, #0]
 8013840:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013844:	1a5b      	subs	r3, r3, r1
 8013846:	8844      	ldrh	r4, [r0, #2]
 8013848:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801384c:	1a9b      	subs	r3, r3, r2
 801384e:	8004      	strh	r4, [r0, #0]
 8013850:	8081      	strh	r1, [r0, #4]
 8013852:	8043      	strh	r3, [r0, #2]
 8013854:	80c2      	strh	r2, [r0, #6]
 8013856:	bd30      	pop	{r4, r5, pc}
 8013858:	88cb      	ldrh	r3, [r1, #6]
 801385a:	8842      	ldrh	r2, [r0, #2]
 801385c:	1a9b      	subs	r3, r3, r2
 801385e:	88c2      	ldrh	r2, [r0, #6]
 8013860:	1a9b      	subs	r3, r3, r2
 8013862:	888a      	ldrh	r2, [r1, #4]
 8013864:	8801      	ldrh	r1, [r0, #0]
 8013866:	8043      	strh	r3, [r0, #2]
 8013868:	1a52      	subs	r2, r2, r1
 801386a:	8881      	ldrh	r1, [r0, #4]
 801386c:	1a52      	subs	r2, r2, r1
 801386e:	8002      	strh	r2, [r0, #0]
 8013870:	e7f1      	b.n	8013856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013872:	88cb      	ldrh	r3, [r1, #6]
 8013874:	8841      	ldrh	r1, [r0, #2]
 8013876:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801387a:	1a5b      	subs	r3, r3, r1
 801387c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013880:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8013884:	1a9b      	subs	r3, r3, r2
 8013886:	8045      	strh	r5, [r0, #2]
 8013888:	8082      	strh	r2, [r0, #4]
 801388a:	8003      	strh	r3, [r0, #0]
 801388c:	80c4      	strh	r4, [r0, #6]
 801388e:	e7e2      	b.n	8013856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08013890 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8013890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013894:	b09f      	sub	sp, #124	@ 0x7c
 8013896:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013898:	9312      	str	r3, [sp, #72]	@ 0x48
 801389a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801389c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801389e:	8812      	ldrh	r2, [r2, #0]
 80138a0:	889b      	ldrh	r3, [r3, #4]
 80138a2:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80138a4:	4413      	add	r3, r2
 80138a6:	900e      	str	r0, [sp, #56]	@ 0x38
 80138a8:	6828      	ldr	r0, [r5, #0]
 80138aa:	b21b      	sxth	r3, r3
 80138ac:	9117      	str	r1, [sp, #92]	@ 0x5c
 80138ae:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80138b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80138b4:	6803      	ldr	r3, [r0, #0]
 80138b6:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 80138ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138bc:	4798      	blx	r3
 80138be:	682b      	ldr	r3, [r5, #0]
 80138c0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80138c2:	7b1a      	ldrb	r2, [r3, #12]
 80138c4:	7adb      	ldrb	r3, [r3, #11]
 80138c6:	9215      	str	r2, [sp, #84]	@ 0x54
 80138c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80138ca:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80138ce:	2c00      	cmp	r4, #0
 80138d0:	d067      	beq.n	80139a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80138d2:	7c2b      	ldrb	r3, [r5, #16]
 80138d4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80138d6:	2b06      	cmp	r3, #6
 80138d8:	bf14      	ite	ne
 80138da:	2301      	movne	r3, #1
 80138dc:	2302      	moveq	r3, #2
 80138de:	4413      	add	r3, r2
 80138e0:	f04f 0900 	mov.w	r9, #0
 80138e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80138e6:	464c      	mov	r4, r9
 80138e8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80138ec:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80138f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80138f4:	4293      	cmp	r3, r2
 80138f6:	f280 808b 	bge.w	8013a10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80138fa:	2300      	movs	r3, #0
 80138fc:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8013900:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8013904:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013908:	429c      	cmp	r4, r3
 801390a:	d006      	beq.n	801391a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801390c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801390e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013912:	4294      	cmp	r4, r2
 8013914:	bf18      	it	ne
 8013916:	4623      	movne	r3, r4
 8013918:	930c      	str	r3, [sp, #48]	@ 0x30
 801391a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801391c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801391e:	682a      	ldr	r2, [r5, #0]
 8013920:	428b      	cmp	r3, r1
 8013922:	db40      	blt.n	80139a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8013924:	6813      	ldr	r3, [r2, #0]
 8013926:	4610      	mov	r0, r2
 8013928:	695b      	ldr	r3, [r3, #20]
 801392a:	4798      	blx	r3
 801392c:	4604      	mov	r4, r0
 801392e:	6828      	ldr	r0, [r5, #0]
 8013930:	aa1d      	add	r2, sp, #116	@ 0x74
 8013932:	4621      	mov	r1, r4
 8013934:	6803      	ldr	r3, [r0, #0]
 8013936:	689f      	ldr	r7, [r3, #8]
 8013938:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801393c:	47b8      	blx	r7
 801393e:	901c      	str	r0, [sp, #112]	@ 0x70
 8013940:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013944:	429c      	cmp	r4, r3
 8013946:	f000 80eb 	beq.w	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801394a:	f242 030b 	movw	r3, #8203	@ 0x200b
 801394e:	429c      	cmp	r4, r3
 8013950:	f000 80e6 	beq.w	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013954:	2c00      	cmp	r4, #0
 8013956:	f000 810d 	beq.w	8013b74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801395a:	2c0a      	cmp	r4, #10
 801395c:	d05e      	beq.n	8013a1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801395e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013960:	b36a      	cbz	r2, 80139be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8013962:	8894      	ldrh	r4, [r2, #4]
 8013964:	f1bb 0f00 	cmp.w	fp, #0
 8013968:	d03a      	beq.n	80139e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801396a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801396e:	f1bb 0f01 	cmp.w	fp, #1
 8013972:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013976:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801397a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801397e:	ea49 0903 	orr.w	r9, r9, r3
 8013982:	d133      	bne.n	80139ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8013984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013986:	eba6 0609 	sub.w	r6, r6, r9
 801398a:	2b00      	cmp	r3, #0
 801398c:	d14d      	bne.n	8013a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801398e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013990:	eb09 0306 	add.w	r3, r9, r6
 8013994:	4413      	add	r3, r2
 8013996:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013998:	f9b2 2000 	ldrsh.w	r2, [r2]
 801399c:	4293      	cmp	r3, r2
 801399e:	da4e      	bge.n	8013a3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80139a0:	e036      	b.n	8013a10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80139a2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80139a4:	e79c      	b.n	80138e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 80139a6:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80139aa:	4659      	mov	r1, fp
 80139ac:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80139ae:	9301      	str	r3, [sp, #4]
 80139b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	ab1c      	add	r3, sp, #112	@ 0x70
 80139b6:	f003 fa98 	bl	8016eea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80139ba:	4604      	mov	r4, r0
 80139bc:	e7c0      	b.n	8013940 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80139be:	6828      	ldr	r0, [r5, #0]
 80139c0:	6803      	ldr	r3, [r0, #0]
 80139c2:	691b      	ldr	r3, [r3, #16]
 80139c4:	4798      	blx	r3
 80139c6:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80139ca:	4298      	cmp	r0, r3
 80139cc:	f000 80a8 	beq.w	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80139d0:	f242 030b 	movw	r3, #8203	@ 0x200b
 80139d4:	4298      	cmp	r0, r3
 80139d6:	f000 80a3 	beq.w	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80139da:	f1bb 0f00 	cmp.w	fp, #0
 80139de:	d100      	bne.n	80139e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80139e0:	444e      	add	r6, r9
 80139e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80139e4:	2a00      	cmp	r2, #0
 80139e6:	d1c0      	bne.n	801396a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80139e8:	4691      	mov	r9, r2
 80139ea:	e099      	b.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80139ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f000 80c2 	beq.w	8013b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80139f4:	f1bb 0f00 	cmp.w	fp, #0
 80139f8:	d117      	bne.n	8013a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80139fa:	6828      	ldr	r0, [r5, #0]
 80139fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80139fe:	6803      	ldr	r3, [r0, #0]
 8013a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a02:	4798      	blx	r3
 8013a04:	4406      	add	r6, r0
 8013a06:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013a08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013a0a:	1af3      	subs	r3, r6, r3
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	dd16      	ble.n	8013a3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8013a10:	2c00      	cmp	r4, #0
 8013a12:	f000 80af 	beq.w	8013b74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013a16:	2c0a      	cmp	r4, #10
 8013a18:	f040 809d 	bne.w	8013b56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8013a1c:	240a      	movs	r4, #10
 8013a1e:	fab4 f084 	clz	r0, r4
 8013a22:	0940      	lsrs	r0, r0, #5
 8013a24:	b01f      	add	sp, #124	@ 0x7c
 8013a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2a:	6828      	ldr	r0, [r5, #0]
 8013a2c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013a2e:	6803      	ldr	r3, [r0, #0]
 8013a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a32:	4798      	blx	r3
 8013a34:	f1bb 0f01 	cmp.w	fp, #1
 8013a38:	eba6 0600 	sub.w	r6, r6, r0
 8013a3c:	d0a7      	beq.n	801398e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8013a3e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013a40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013a42:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8013a46:	f9b3 8000 	ldrsh.w	r8, [r3]
 8013a4a:	7b43      	ldrb	r3, [r0, #13]
 8013a4c:	4431      	add	r1, r6
 8013a4e:	015b      	lsls	r3, r3, #5
 8013a50:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013a54:	7983      	ldrb	r3, [r0, #6]
 8013a56:	4313      	orrs	r3, r2
 8013a58:	440b      	add	r3, r1
 8013a5a:	4543      	cmp	r3, r8
 8013a5c:	db60      	blt.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a60:	4299      	cmp	r1, r3
 8013a62:	da5d      	bge.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a64:	6828      	ldr	r0, [r5, #0]
 8013a66:	45b0      	cmp	r8, r6
 8013a68:	6803      	ldr	r3, [r0, #0]
 8013a6a:	bfcc      	ite	gt
 8013a6c:	eba8 0806 	subgt.w	r8, r8, r6
 8013a70:	f04f 0800 	movle.w	r8, #0
 8013a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a76:	bfc8      	it	gt
 8013a78:	fa1f f888 	uxthgt.w	r8, r8
 8013a7c:	4798      	blx	r3
 8013a7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013a80:	7b53      	ldrb	r3, [r2, #13]
 8013a82:	00d9      	lsls	r1, r3, #3
 8013a84:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8013a88:	7a11      	ldrb	r1, [r2, #8]
 8013a8a:	4339      	orrs	r1, r7
 8013a8c:	065f      	lsls	r7, r3, #25
 8013a8e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8013a90:	bf48      	it	mi
 8013a92:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8013a96:	4407      	add	r7, r0
 8013a98:	bf48      	it	mi
 8013a9a:	b209      	sxthmi	r1, r1
 8013a9c:	1a7f      	subs	r7, r7, r1
 8013a9e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8013aa0:	b2bf      	uxth	r7, r7
 8013aa2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013aa6:	fa0f fa87 	sxth.w	sl, r7
 8013aaa:	4551      	cmp	r1, sl
 8013aac:	dd3c      	ble.n	8013b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8013aae:	011b      	lsls	r3, r3, #4
 8013ab0:	79d0      	ldrb	r0, [r2, #7]
 8013ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ab6:	4303      	orrs	r3, r0
 8013ab8:	449a      	add	sl, r3
 8013aba:	4551      	cmp	r1, sl
 8013abc:	dc30      	bgt.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013abe:	1bcf      	subs	r7, r1, r7
 8013ac0:	468a      	mov	sl, r1
 8013ac2:	b23f      	sxth	r7, r7
 8013ac4:	9219      	str	r2, [sp, #100]	@ 0x64
 8013ac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013ac8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013aca:	6828      	ldr	r0, [r5, #0]
 8013acc:	2a00      	cmp	r2, #0
 8013ace:	d12d      	bne.n	8013b2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8013ad0:	9318      	str	r3, [sp, #96]	@ 0x60
 8013ad2:	b2bf      	uxth	r7, r7
 8013ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ad6:	6819      	ldr	r1, [r3, #0]
 8013ad8:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8013ada:	6801      	ldr	r1, [r0, #0]
 8013adc:	9314      	str	r3, [sp, #80]	@ 0x50
 8013ade:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013ae0:	4788      	blx	r1
 8013ae2:	79a9      	ldrb	r1, [r5, #6]
 8013ae4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013ae6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013ae8:	7ba9      	ldrb	r1, [r5, #14]
 8013aea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013aec:	910a      	str	r1, [sp, #40]	@ 0x28
 8013aee:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8013af2:	9109      	str	r1, [sp, #36]	@ 0x24
 8013af4:	68a9      	ldr	r1, [r5, #8]
 8013af6:	9306      	str	r3, [sp, #24]
 8013af8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013afa:	9205      	str	r2, [sp, #20]
 8013afc:	9304      	str	r3, [sp, #16]
 8013afe:	f8cd a004 	str.w	sl, [sp, #4]
 8013b02:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8013b06:	44b0      	add	r8, r6
 8013b08:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8013b0a:	fa0f f388 	sxth.w	r3, r8
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b12:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8013b16:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013b1c:	685b      	ldr	r3, [r3, #4]
 8013b1e:	47b8      	blx	r7
 8013b20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b22:	3301      	adds	r3, #1
 8013b24:	930d      	str	r3, [sp, #52]	@ 0x34
 8013b26:	e6e3      	b.n	80138f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8013b28:	2700      	movs	r7, #0
 8013b2a:	e7cb      	b.n	8013ac4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8013b2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b2e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8013b32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013b34:	f8dc 1000 	ldr.w	r1, [ip]
 8013b38:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8013b3c:	79aa      	ldrb	r2, [r5, #6]
 8013b3e:	9203      	str	r2, [sp, #12]
 8013b40:	7baa      	ldrb	r2, [r5, #14]
 8013b42:	9202      	str	r2, [sp, #8]
 8013b44:	68aa      	ldr	r2, [r5, #8]
 8013b46:	e9cd 0200 	strd	r0, r2, [sp]
 8013b4a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013b4c:	4660      	mov	r0, ip
 8013b4e:	688f      	ldr	r7, [r1, #8]
 8013b50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b52:	47b8      	blx	r7
 8013b54:	e7e4      	b.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013b58:	3501      	adds	r5, #1
 8013b5a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8013b5c:	429d      	cmp	r5, r3
 8013b5e:	f6bf af5e 	bge.w	8013a1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013b62:	4659      	mov	r1, fp
 8013b64:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013b66:	f7f2 fdf9 	bl	800675c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	b110      	cbz	r0, 8013b74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013b6e:	280a      	cmp	r0, #10
 8013b70:	d1f2      	bne.n	8013b58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8013b72:	e753      	b.n	8013a1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013b74:	2400      	movs	r4, #0
 8013b76:	e752      	b.n	8013a1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013b78:	f1bb 0f00 	cmp.w	fp, #0
 8013b7c:	f43f af43 	beq.w	8013a06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8013b80:	e75d      	b.n	8013a3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08013b82 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8013b82:	b530      	push	{r4, r5, lr}
 8013b84:	8ac4      	ldrh	r4, [r0, #22]
 8013b86:	8b45      	ldrh	r5, [r0, #26]
 8013b88:	8343      	strh	r3, [r0, #26]
 8013b8a:	442c      	add	r4, r5
 8013b8c:	1ae4      	subs	r4, r4, r3
 8013b8e:	8b83      	ldrh	r3, [r0, #28]
 8013b90:	82c4      	strh	r4, [r0, #22]
 8013b92:	8b04      	ldrh	r4, [r0, #24]
 8013b94:	4422      	add	r2, r4
 8013b96:	440c      	add	r4, r1
 8013b98:	1a59      	subs	r1, r3, r1
 8013b9a:	83c2      	strh	r2, [r0, #30]
 8013b9c:	8304      	strh	r4, [r0, #24]
 8013b9e:	8381      	strh	r1, [r0, #28]
 8013ba0:	bd30      	pop	{r4, r5, pc}

08013ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8013ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	8a47      	ldrh	r7, [r0, #18]
 8013baa:	68c0      	ldr	r0, [r0, #12]
 8013bac:	b085      	sub	sp, #20
 8013bae:	6803      	ldr	r3, [r0, #0]
 8013bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bb2:	4798      	blx	r3
 8013bb4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8013bb8:	7a63      	ldrb	r3, [r4, #9]
 8013bba:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8013bbe:	3b01      	subs	r3, #1
 8013bc0:	42b7      	cmp	r7, r6
 8013bc2:	bfac      	ite	ge
 8013bc4:	f04f 0900 	movge.w	r9, #0
 8013bc8:	f04f 0901 	movlt.w	r9, #1
 8013bcc:	2b05      	cmp	r3, #5
 8013bce:	d804      	bhi.n	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8013bd0:	e8df f003 	tbb	[pc, r3]
 8013bd4:	470f0854 	.word	0x470f0854
 8013bd8:	4c4c      	.short	0x4c4c
 8013bda:	2500      	movs	r5, #0
 8013bdc:	46a9      	mov	r9, r5
 8013bde:	462e      	mov	r6, r5
 8013be0:	462f      	mov	r7, r5
 8013be2:	e00e      	b.n	8013c02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013be4:	42b7      	cmp	r7, r6
 8013be6:	f04f 0500 	mov.w	r5, #0
 8013bea:	bfb4      	ite	lt
 8013bec:	2600      	movlt	r6, #0
 8013bee:	2601      	movge	r6, #1
 8013bf0:	e7f6      	b.n	8013be0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013bf2:	42b7      	cmp	r7, r6
 8013bf4:	464d      	mov	r5, r9
 8013bf6:	f04f 0900 	mov.w	r9, #0
 8013bfa:	bfb4      	ite	lt
 8013bfc:	2600      	movlt	r6, #0
 8013bfe:	2601      	movge	r6, #1
 8013c00:	464f      	mov	r7, r9
 8013c02:	f04f 0800 	mov.w	r8, #0
 8013c06:	f8a4 8016 	strh.w	r8, [r4, #22]
 8013c0a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8013c0e:	f8cd 8004 	str.w	r8, [sp, #4]
 8013c12:	2300      	movs	r3, #0
 8013c14:	9303      	str	r3, [sp, #12]
 8013c16:	8823      	ldrh	r3, [r4, #0]
 8013c18:	2b20      	cmp	r3, #32
 8013c1a:	d033      	beq.n	8013c84 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8013c1c:	f242 010b 	movw	r1, #8203	@ 0x200b
 8013c20:	1a5a      	subs	r2, r3, r1
 8013c22:	f1d2 0a00 	rsbs	sl, r2, #0
 8013c26:	eb4a 0a02 	adc.w	sl, sl, r2
 8013c2a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d008      	beq.n	8013c44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013c32:	428b      	cmp	r3, r1
 8013c34:	9a01      	ldr	r2, [sp, #4]
 8013c36:	bf0e      	itee	eq
 8013c38:	f04f 0a01 	moveq.w	sl, #1
 8013c3c:	461a      	movne	r2, r3
 8013c3e:	f04f 0a00 	movne.w	sl, #0
 8013c42:	9201      	str	r2, [sp, #4]
 8013c44:	ab03      	add	r3, sp, #12
 8013c46:	68e2      	ldr	r2, [r4, #12]
 8013c48:	7a21      	ldrb	r1, [r4, #8]
 8013c4a:	6860      	ldr	r0, [r4, #4]
 8013c4c:	f003 f904 	bl	8016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c50:	8020      	strh	r0, [r4, #0]
 8013c52:	b9d8      	cbnz	r0, 8013c8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8013c54:	8ba2      	ldrh	r2, [r4, #28]
 8013c56:	2300      	movs	r3, #0
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f7ff ff91 	bl	8013b82 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013c60:	e06e      	b.n	8013d40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013c62:	2500      	movs	r5, #0
 8013c64:	2701      	movs	r7, #1
 8013c66:	46a9      	mov	r9, r5
 8013c68:	462e      	mov	r6, r5
 8013c6a:	e7ca      	b.n	8013c02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013c6c:	42b7      	cmp	r7, r6
 8013c6e:	f04f 0500 	mov.w	r5, #0
 8013c72:	bfb4      	ite	lt
 8013c74:	2700      	movlt	r7, #0
 8013c76:	2701      	movge	r7, #1
 8013c78:	462e      	mov	r6, r5
 8013c7a:	e7c2      	b.n	8013c02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013c7c:	2500      	movs	r5, #0
 8013c7e:	2601      	movs	r6, #1
 8013c80:	46a9      	mov	r9, r5
 8013c82:	e7ad      	b.n	8013be0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013c84:	9301      	str	r3, [sp, #4]
 8013c86:	f04f 0a01 	mov.w	sl, #1
 8013c8a:	e7db      	b.n	8013c44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013c8c:	8b63      	ldrh	r3, [r4, #26]
 8013c8e:	280a      	cmp	r0, #10
 8013c90:	f103 0301 	add.w	r3, r3, #1
 8013c94:	8363      	strh	r3, [r4, #26]
 8013c96:	d0dd      	beq.n	8013c54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8013c98:	9a03      	ldr	r2, [sp, #12]
 8013c9a:	bb62      	cbnz	r2, 8013cf6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8013c9c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013ca0:	4298      	cmp	r0, r3
 8013ca2:	d003      	beq.n	8013cac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013ca4:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013ca8:	4298      	cmp	r0, r3
 8013caa:	d1b2      	bne.n	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013cac:	8823      	ldrh	r3, [r4, #0]
 8013cae:	8ba1      	ldrh	r1, [r4, #28]
 8013cb0:	2b20      	cmp	r3, #32
 8013cb2:	d003      	beq.n	8013cbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8013cb4:	f242 000b 	movw	r0, #8203	@ 0x200b
 8013cb8:	4283      	cmp	r3, r0
 8013cba:	d131      	bne.n	8013d20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8013cbc:	f1ba 0f00 	cmp.w	sl, #0
 8013cc0:	bf0a      	itet	eq
 8013cc2:	4688      	moveq	r8, r1
 8013cc4:	4650      	movne	r0, sl
 8013cc6:	2001      	moveq	r0, #1
 8013cc8:	440a      	add	r2, r1
 8013cca:	8b23      	ldrh	r3, [r4, #24]
 8013ccc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013cd0:	b292      	uxth	r2, r2
 8013cd2:	83a2      	strh	r2, [r4, #28]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	f1b9 0f00 	cmp.w	r9, #0
 8013cda:	d102      	bne.n	8013ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8013cdc:	2d00      	cmp	r5, #0
 8013cde:	d042      	beq.n	8013d66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8013ce0:	b300      	cbz	r0, 8013d24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8013ce2:	8c21      	ldrh	r1, [r4, #32]
 8013ce4:	4419      	add	r1, r3
 8013ce6:	458c      	cmp	ip, r1
 8013ce8:	da37      	bge.n	8013d5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013cea:	8ae1      	ldrh	r1, [r4, #22]
 8013cec:	2900      	cmp	r1, #0
 8013cee:	d034      	beq.n	8013d5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013cf0:	4563      	cmp	r3, ip
 8013cf2:	dd8e      	ble.n	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013cf4:	e01d      	b.n	8013d32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8013cf6:	8893      	ldrh	r3, [r2, #4]
 8013cf8:	9901      	ldr	r1, [sp, #4]
 8013cfa:	8023      	strh	r3, [r4, #0]
 8013cfc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8013d00:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8013d04:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8013d08:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8013d0c:	ea4b 0b00 	orr.w	fp, fp, r0
 8013d10:	68e0      	ldr	r0, [r4, #12]
 8013d12:	6803      	ldr	r3, [r0, #0]
 8013d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d16:	4798      	blx	r3
 8013d18:	eb0b 0200 	add.w	r2, fp, r0
 8013d1c:	b292      	uxth	r2, r2
 8013d1e:	e7c5      	b.n	8013cac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013d20:	2000      	movs	r0, #0
 8013d22:	e7d1      	b.n	8013cc8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8013d24:	4563      	cmp	r3, ip
 8013d26:	f77f af74 	ble.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d2a:	8ae3      	ldrh	r3, [r4, #22]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f43f af70 	beq.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d32:	2301      	movs	r3, #1
 8013d34:	8c22      	ldrh	r2, [r4, #32]
 8013d36:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8013d3a:	8be3      	ldrh	r3, [r4, #30]
 8013d3c:	4413      	add	r3, r2
 8013d3e:	83e3      	strh	r3, [r4, #30]
 8013d40:	68e0      	ldr	r0, [r4, #12]
 8013d42:	6803      	ldr	r3, [r0, #0]
 8013d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d46:	4798      	blx	r3
 8013d48:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8013d4c:	4418      	add	r0, r3
 8013d4e:	8a63      	ldrh	r3, [r4, #18]
 8013d50:	1a18      	subs	r0, r3, r0
 8013d52:	8260      	strh	r0, [r4, #18]
 8013d54:	b005      	add	sp, #20
 8013d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f7ff ff0f 	bl	8013b82 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013d64:	e755      	b.n	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d66:	4563      	cmp	r3, ip
 8013d68:	dd14      	ble.n	8013d94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8013d6a:	b117      	cbz	r7, 8013d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	460a      	mov	r2, r1
 8013d70:	e772      	b.n	8013c58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8013d72:	2e00      	cmp	r6, #0
 8013d74:	f43f af4d 	beq.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d78:	2800      	cmp	r0, #0
 8013d7a:	f47f af4a 	bne.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d7e:	f1ba 0f00 	cmp.w	sl, #0
 8013d82:	d002      	beq.n	8013d8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8013d84:	2301      	movs	r3, #1
 8013d86:	4642      	mov	r2, r8
 8013d88:	e767      	b.n	8013c5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8013d8a:	8ae3      	ldrh	r3, [r4, #22]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	f43f af40 	beq.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d92:	e7d5      	b.n	8013d40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	f47f af3c 	bne.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d9a:	f1ba 0f00 	cmp.w	sl, #0
 8013d9e:	f43f af38 	beq.w	8013c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013da2:	2301      	movs	r3, #1
 8013da4:	4642      	mov	r2, r8
 8013da6:	e7da      	b.n	8013d5e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08013da8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8013da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013daa:	4605      	mov	r5, r0
 8013dac:	b08f      	sub	sp, #60	@ 0x3c
 8013dae:	4617      	mov	r7, r2
 8013db0:	461c      	mov	r4, r3
 8013db2:	460e      	mov	r6, r1
 8013db4:	b1d1      	cbz	r1, 8013dec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4620      	mov	r0, r4
 8013dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dbc:	4798      	blx	r3
 8013dbe:	4240      	negs	r0, r0
 8013dc0:	9603      	str	r6, [sp, #12]
 8013dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013dc6:	b200      	sxth	r0, r0
 8013dc8:	9700      	str	r7, [sp, #0]
 8013dca:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8013dce:	4629      	mov	r1, r5
 8013dd0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8013dd4:	2401      	movs	r4, #1
 8013dd6:	a805      	add	r0, sp, #20
 8013dd8:	f7ff fcaa 	bl	8013730 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8013ddc:	a805      	add	r0, sp, #20
 8013dde:	f7ff fee0 	bl	8013ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013de2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013de6:	b163      	cbz	r3, 8013e02 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8013de8:	3401      	adds	r4, #1
 8013dea:	e7f7      	b.n	8013ddc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8013dec:	2401      	movs	r4, #1
 8013dee:	f003 f8ff 	bl	8016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013df2:	280a      	cmp	r0, #10
 8013df4:	4628      	mov	r0, r5
 8013df6:	bf08      	it	eq
 8013df8:	3401      	addeq	r4, #1
 8013dfa:	f003 f8f9 	bl	8016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	d1f7      	bne.n	8013df2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8013e02:	b2a0      	uxth	r0, r4
 8013e04:	b00f      	add	sp, #60	@ 0x3c
 8013e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8013e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e0c:	b0e3      	sub	sp, #396	@ 0x18c
 8013e0e:	461c      	mov	r4, r3
 8013e10:	4683      	mov	fp, r0
 8013e12:	4688      	mov	r8, r1
 8013e14:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	f000 8112 	beq.w	8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013e1c:	6823      	ldr	r3, [r4, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	f000 810e 	beq.w	8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013e24:	7ba3      	ldrb	r3, [r4, #14]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	f000 810a 	beq.w	8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013e2c:	ad0a      	add	r5, sp, #40	@ 0x28
 8013e2e:	6810      	ldr	r0, [r2, #0]
 8013e30:	6851      	ldr	r1, [r2, #4]
 8013e32:	462b      	mov	r3, r5
 8013e34:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8013e38:	c303      	stmia	r3!, {r0, r1}
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013e40:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013e44:	4628      	mov	r0, r5
 8013e46:	910c      	str	r1, [sp, #48]	@ 0x30
 8013e48:	a90c      	add	r1, sp, #48	@ 0x30
 8013e4a:	79a2      	ldrb	r2, [r4, #6]
 8013e4c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013e50:	f7ff fced 	bl	801382e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013e54:	a90c      	add	r1, sp, #48	@ 0x30
 8013e56:	79a2      	ldrb	r2, [r4, #6]
 8013e58:	4608      	mov	r0, r1
 8013e5a:	f7ff fce8 	bl	801382e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013e5e:	a817      	add	r0, sp, #92	@ 0x5c
 8013e60:	f002 fcb2 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 8013e64:	6820      	ldr	r0, [r4, #0]
 8013e66:	6803      	ldr	r3, [r0, #0]
 8013e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013e6a:	4798      	blx	r3
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	6820      	ldr	r0, [r4, #0]
 8013e70:	6803      	ldr	r3, [r0, #0]
 8013e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e74:	4798      	blx	r3
 8013e76:	4633      	mov	r3, r6
 8013e78:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013e7a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013e7c:	9000      	str	r0, [sp, #0]
 8013e7e:	a817      	add	r0, sp, #92	@ 0x5c
 8013e80:	f002 fcf5 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013e84:	6820      	ldr	r0, [r4, #0]
 8013e86:	f894 a004 	ldrb.w	sl, [r4, #4]
 8013e8a:	6803      	ldr	r3, [r0, #0]
 8013e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e8e:	4798      	blx	r3
 8013e90:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013e94:	6823      	ldr	r3, [r4, #0]
 8013e96:	4607      	mov	r7, r0
 8013e98:	4406      	add	r6, r0
 8013e9a:	a830      	add	r0, sp, #192	@ 0xc0
 8013e9c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8013ea0:	f002 fc92 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 8013ea4:	7c23      	ldrb	r3, [r4, #16]
 8013ea6:	b17b      	cbz	r3, 8013ec8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	6803      	ldr	r3, [r0, #0]
 8013eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013eae:	4798      	blx	r3
 8013eb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013eb2:	6820      	ldr	r0, [r4, #0]
 8013eb4:	6802      	ldr	r2, [r0, #0]
 8013eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013eb8:	4790      	blx	r2
 8013eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ebc:	9000      	str	r0, [sp, #0]
 8013ebe:	a830      	add	r0, sp, #192	@ 0xc0
 8013ec0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013ec2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013ec4:	f002 fcd3 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013ec8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8013ecc:	a80e      	add	r0, sp, #56	@ 0x38
 8013ece:	7be2      	ldrb	r2, [r4, #15]
 8013ed0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8013ed4:	1a8a      	subs	r2, r1, r2
 8013ed6:	7c21      	ldrb	r1, [r4, #16]
 8013ed8:	9103      	str	r1, [sp, #12]
 8013eda:	b292      	uxth	r2, r2
 8013edc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8013ee0:	9102      	str	r1, [sp, #8]
 8013ee2:	6821      	ldr	r1, [r4, #0]
 8013ee4:	9101      	str	r1, [sp, #4]
 8013ee6:	7961      	ldrb	r1, [r4, #5]
 8013ee8:	9100      	str	r1, [sp, #0]
 8013eea:	a930      	add	r1, sp, #192	@ 0xc0
 8013eec:	f7ff fc20 	bl	8013730 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8013ef0:	2e00      	cmp	r6, #0
 8013ef2:	dc5b      	bgt.n	8013fac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8013ef4:	af17      	add	r7, sp, #92	@ 0x5c
 8013ef6:	f04f 0900 	mov.w	r9, #0
 8013efa:	7c23      	ldrb	r3, [r4, #16]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	f000 80b1 	beq.w	8014064 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8013f02:	a80e      	add	r0, sp, #56	@ 0x38
 8013f04:	f7ff fe4d 	bl	8013ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013f08:	f1ba 0f00 	cmp.w	sl, #0
 8013f0c:	f000 80a5 	beq.w	801405a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8013f10:	7c23      	ldrb	r3, [r4, #16]
 8013f12:	2264      	movs	r2, #100	@ 0x64
 8013f14:	4639      	mov	r1, r7
 8013f16:	a849      	add	r0, sp, #292	@ 0x124
 8013f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f1a:	f00f f8fc 	bl	8023116 <memcpy>
 8013f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	f000 80a7 	beq.w	8014074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8013f26:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8013f2a:	7922      	ldrb	r2, [r4, #4]
 8013f2c:	2a01      	cmp	r2, #1
 8013f2e:	f040 808a 	bne.w	8014046 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8013f32:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8013f36:	1ac0      	subs	r0, r0, r3
 8013f38:	2302      	movs	r3, #2
 8013f3a:	fb90 f0f3 	sdiv	r0, r0, r3
 8013f3e:	b200      	sxth	r0, r0
 8013f40:	7c23      	ldrb	r3, [r4, #16]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 808b 	beq.w	801405e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8013f48:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8013f4c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8013f50:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013f54:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8013f58:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	4410      	add	r0, r2
 8013f60:	4642      	mov	r2, r8
 8013f62:	b200      	sxth	r0, r0
 8013f64:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8013f68:	9000      	str	r0, [sp, #0]
 8013f6a:	4658      	mov	r0, fp
 8013f6c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8013f70:	f7ff fc8e 	bl	8013890 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d163      	bne.n	8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f78:	b2b2      	uxth	r2, r6
 8013f7a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013f7e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013f82:	4413      	add	r3, r2
 8013f84:	1a8a      	subs	r2, r1, r2
 8013f86:	b21b      	sxth	r3, r3
 8013f88:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8013f8c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8013f90:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013f94:	2a00      	cmp	r2, #0
 8013f96:	d153      	bne.n	8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f98:	6822      	ldr	r2, [r4, #0]
 8013f9a:	8869      	ldrh	r1, [r5, #2]
 8013f9c:	7a12      	ldrb	r2, [r2, #8]
 8013f9e:	1a9b      	subs	r3, r3, r2
 8013fa0:	88ea      	ldrh	r2, [r5, #6]
 8013fa2:	440a      	add	r2, r1
 8013fa4:	b212      	sxth	r2, r2
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	dda7      	ble.n	8013efa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8013faa:	e049      	b.n	8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013fac:	7c23      	ldrb	r3, [r4, #16]
 8013fae:	444f      	add	r7, r9
 8013fb0:	b1c3      	cbz	r3, 8013fe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8013fb2:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8013fb6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013fba:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013fbe:	443b      	add	r3, r7
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	da97      	bge.n	8013ef4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013fc4:	a80e      	add	r0, sp, #56	@ 0x38
 8013fc6:	f7ff fdec 	bl	8013ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013fca:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8013fce:	3b01      	subs	r3, #1
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	454b      	cmp	r3, r9
 8013fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fd6:	d021      	beq.n	801401c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8013fd8:	7961      	ldrb	r1, [r4, #5]
 8013fda:	a817      	add	r0, sp, #92	@ 0x5c
 8013fdc:	f7f2 fbbe 	bl	800675c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fe2:	e7f4      	b.n	8013fce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8013fe4:	fa1f f986 	uxth.w	r9, r6
 8013fe8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013fec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013ff0:	443b      	add	r3, r7
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	f6bf af7e 	bge.w	8013ef4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013ff8:	a817      	add	r0, sp, #92	@ 0x5c
 8013ffa:	f002 fff9 	bl	8016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013ffe:	b1f8      	cbz	r0, 8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014000:	280a      	cmp	r0, #10
 8014002:	d1f1      	bne.n	8013fe8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8014004:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8014008:	444b      	add	r3, r9
 801400a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801400e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8014012:	eba3 0309 	sub.w	r3, r3, r9
 8014016:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801401a:	e7e5      	b.n	8013fe8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801401c:	b2b3      	uxth	r3, r6
 801401e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8014022:	441a      	add	r2, r3
 8014024:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8014028:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801402c:	1ad3      	subs	r3, r2, r3
 801402e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014032:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014036:	b11b      	cbz	r3, 8014040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014038:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801403c:	2b00      	cmp	r3, #0
 801403e:	d0ba      	beq.n	8013fb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8014040:	b063      	add	sp, #396	@ 0x18c
 8014042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014046:	2a02      	cmp	r2, #2
 8014048:	d105      	bne.n	8014056 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801404a:	7be2      	ldrb	r2, [r4, #15]
 801404c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014050:	1a80      	subs	r0, r0, r2
 8014052:	1ac0      	subs	r0, r0, r3
 8014054:	e773      	b.n	8013f3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8014056:	2000      	movs	r0, #0
 8014058:	e772      	b.n	8013f40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801405a:	7be0      	ldrb	r0, [r4, #15]
 801405c:	e770      	b.n	8013f40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801405e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014062:	e773      	b.n	8013f4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8014064:	f1ba 0f00 	cmp.w	sl, #0
 8014068:	d0f7      	beq.n	801405a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801406a:	2264      	movs	r2, #100	@ 0x64
 801406c:	4639      	mov	r1, r7
 801406e:	a849      	add	r0, sp, #292	@ 0x124
 8014070:	f00f f851 	bl	8023116 <memcpy>
 8014074:	2300      	movs	r3, #0
 8014076:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801407a:	6821      	ldr	r1, [r4, #0]
 801407c:	a849      	add	r0, sp, #292	@ 0x124
 801407e:	f7ff fb9a 	bl	80137b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014082:	b203      	sxth	r3, r0
 8014084:	e751      	b.n	8013f2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08014086 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8014086:	2b03      	cmp	r3, #3
 8014088:	d818      	bhi.n	80140bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801408a:	e8df f003 	tbb	[pc, r3]
 801408e:	0602      	.short	0x0602
 8014090:	130d      	.short	0x130d
 8014092:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014096:	1850      	adds	r0, r2, r1
 8014098:	4770      	bx	lr
 801409a:	8803      	ldrh	r3, [r0, #0]
 801409c:	8880      	ldrh	r0, [r0, #4]
 801409e:	4418      	add	r0, r3
 80140a0:	b200      	sxth	r0, r0
 80140a2:	1a80      	subs	r0, r0, r2
 80140a4:	3801      	subs	r0, #1
 80140a6:	4770      	bx	lr
 80140a8:	8803      	ldrh	r3, [r0, #0]
 80140aa:	8880      	ldrh	r0, [r0, #4]
 80140ac:	4418      	add	r0, r3
 80140ae:	b200      	sxth	r0, r0
 80140b0:	1a40      	subs	r0, r0, r1
 80140b2:	e7f7      	b.n	80140a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80140b4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80140b8:	4410      	add	r0, r2
 80140ba:	4770      	bx	lr
 80140bc:	2000      	movs	r0, #0
 80140be:	4770      	bx	lr

080140c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80140c0:	2b03      	cmp	r3, #3
 80140c2:	d817      	bhi.n	80140f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80140c4:	e8df f003 	tbb	[pc, r3]
 80140c8:	10090602 	.word	0x10090602
 80140cc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80140d0:	1850      	adds	r0, r2, r1
 80140d2:	4770      	bx	lr
 80140d4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80140d8:	e7fa      	b.n	80140d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80140da:	8843      	ldrh	r3, [r0, #2]
 80140dc:	88c0      	ldrh	r0, [r0, #6]
 80140de:	4418      	add	r0, r3
 80140e0:	b200      	sxth	r0, r0
 80140e2:	1a80      	subs	r0, r0, r2
 80140e4:	3801      	subs	r0, #1
 80140e6:	4770      	bx	lr
 80140e8:	8843      	ldrh	r3, [r0, #2]
 80140ea:	88c0      	ldrh	r0, [r0, #6]
 80140ec:	4418      	add	r0, r3
 80140ee:	b200      	sxth	r0, r0
 80140f0:	1a40      	subs	r0, r0, r1
 80140f2:	e7f7      	b.n	80140e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80140f4:	2000      	movs	r0, #0
 80140f6:	4770      	bx	lr

080140f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80140f8:	4b01      	ldr	r3, [pc, #4]	@ (8014100 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80140fa:	2200      	movs	r2, #0
 80140fc:	601a      	str	r2, [r3, #0]
 80140fe:	4770      	bx	lr
 8014100:	2402dabc 	.word	0x2402dabc

08014104 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014104:	4603      	mov	r3, r0
 8014106:	b1c8      	cbz	r0, 801413c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014108:	0c02      	lsrs	r2, r0, #16
 801410a:	0412      	lsls	r2, r2, #16
 801410c:	b9a2      	cbnz	r2, 8014138 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801410e:	0403      	lsls	r3, r0, #16
 8014110:	2010      	movs	r0, #16
 8014112:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8014116:	bf04      	itt	eq
 8014118:	021b      	lsleq	r3, r3, #8
 801411a:	3008      	addeq	r0, #8
 801411c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8014120:	bf04      	itt	eq
 8014122:	011b      	lsleq	r3, r3, #4
 8014124:	3004      	addeq	r0, #4
 8014126:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801412a:	bf04      	itt	eq
 801412c:	009b      	lsleq	r3, r3, #2
 801412e:	3002      	addeq	r0, #2
 8014130:	2b00      	cmp	r3, #0
 8014132:	db04      	blt.n	801413e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014134:	3001      	adds	r0, #1
 8014136:	4770      	bx	lr
 8014138:	2000      	movs	r0, #0
 801413a:	e7ea      	b.n	8014112 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801413c:	2020      	movs	r0, #32
 801413e:	4770      	bx	lr

08014140 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014144:	b087      	sub	sp, #28
 8014146:	460d      	mov	r5, r1
 8014148:	4616      	mov	r6, r2
 801414a:	4698      	mov	r8, r3
 801414c:	4601      	mov	r1, r0
 801414e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8014152:	b120      	cbz	r0, 801415e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014154:	b11a      	cbz	r2, 801415e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014156:	2d1f      	cmp	r5, #31
 8014158:	d801      	bhi.n	801415e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801415a:	2b1f      	cmp	r3, #31
 801415c:	d904      	bls.n	8014168 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801415e:	2000      	movs	r0, #0
 8014160:	6038      	str	r0, [r7, #0]
 8014162:	b007      	add	sp, #28
 8014164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014168:	b97d      	cbnz	r5, 801418a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801416a:	b143      	cbz	r3, 801417e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801416c:	4602      	mov	r2, r0
 801416e:	462b      	mov	r3, r5
 8014170:	4641      	mov	r1, r8
 8014172:	4630      	mov	r0, r6
 8014174:	e9cd 4700 	strd	r4, r7, [sp]
 8014178:	f7ff ffe2 	bl	8014140 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801417c:	e7f1      	b.n	8014162 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801417e:	f04f 33ff 	mov.w	r3, #4294967295
 8014182:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014186:	603b      	str	r3, [r7, #0]
 8014188:	e7eb      	b.n	8014162 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801418a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801418e:	d106      	bne.n	801419e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8014190:	4346      	muls	r6, r0
 8014192:	fbb6 f0f4 	udiv	r0, r6, r4
 8014196:	fb04 6610 	mls	r6, r4, r0, r6
 801419a:	603e      	str	r6, [r7, #0]
 801419c:	e7e1      	b.n	8014162 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801419e:	2201      	movs	r2, #1
 80141a0:	fa00 fb05 	lsl.w	fp, r0, r5
 80141a4:	40aa      	lsls	r2, r5
 80141a6:	fbbb f9f4 	udiv	r9, fp, r4
 80141aa:	3a01      	subs	r2, #1
 80141ac:	fb0a f309 	mul.w	r3, sl, r9
 80141b0:	fb04 b919 	mls	r9, r4, r9, fp
 80141b4:	4016      	ands	r6, r2
 80141b6:	9303      	str	r3, [sp, #12]
 80141b8:	4630      	mov	r0, r6
 80141ba:	f7ff ffa3 	bl	8014104 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80141be:	462b      	mov	r3, r5
 80141c0:	460a      	mov	r2, r1
 80141c2:	4601      	mov	r1, r0
 80141c4:	4630      	mov	r0, r6
 80141c6:	e9cd 4700 	strd	r4, r7, [sp]
 80141ca:	f7ff ffb9 	bl	8014140 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80141ce:	4606      	mov	r6, r0
 80141d0:	4648      	mov	r0, r9
 80141d2:	eb05 0108 	add.w	r1, r5, r8
 80141d6:	f7ff ff95 	bl	8014104 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80141da:	ab05      	add	r3, sp, #20
 80141dc:	464a      	mov	r2, r9
 80141de:	e9cd 4300 	strd	r4, r3, [sp]
 80141e2:	4603      	mov	r3, r0
 80141e4:	4650      	mov	r0, sl
 80141e6:	f7ff ffab 	bl	8014140 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80141ea:	6839      	ldr	r1, [r7, #0]
 80141ec:	9a05      	ldr	r2, [sp, #20]
 80141ee:	9b03      	ldr	r3, [sp, #12]
 80141f0:	4411      	add	r1, r2
 80141f2:	fbb1 f2f4 	udiv	r2, r1, r4
 80141f6:	18d3      	adds	r3, r2, r3
 80141f8:	fb04 1412 	mls	r4, r4, r2, r1
 80141fc:	441e      	add	r6, r3
 80141fe:	603c      	str	r4, [r7, #0]
 8014200:	4430      	add	r0, r6
 8014202:	e7ae      	b.n	8014162 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08014204 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014208:	b085      	sub	sp, #20
 801420a:	f1b0 0900 	subs.w	r9, r0, #0
 801420e:	461d      	mov	r5, r3
 8014210:	4617      	mov	r7, r2
 8014212:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014214:	bfbb      	ittet	lt
 8014216:	f1c9 0900 	rsblt	r9, r9, #0
 801421a:	f04f 36ff 	movlt.w	r6, #4294967295
 801421e:	2601      	movge	r6, #1
 8014220:	6823      	ldrlt	r3, [r4, #0]
 8014222:	bfbc      	itt	lt
 8014224:	425b      	neglt	r3, r3
 8014226:	6023      	strlt	r3, [r4, #0]
 8014228:	2a00      	cmp	r2, #0
 801422a:	da04      	bge.n	8014236 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	4257      	negs	r7, r2
 8014230:	4276      	negs	r6, r6
 8014232:	425b      	negs	r3, r3
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	2d00      	cmp	r5, #0
 8014238:	4638      	mov	r0, r7
 801423a:	bfba      	itte	lt
 801423c:	426d      	neglt	r5, r5
 801423e:	f04f 38ff 	movlt.w	r8, #4294967295
 8014242:	f04f 0801 	movge.w	r8, #1
 8014246:	f7ff ff5d 	bl	8014104 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801424a:	ab03      	add	r3, sp, #12
 801424c:	463a      	mov	r2, r7
 801424e:	e9cd 5300 	strd	r5, r3, [sp]
 8014252:	4603      	mov	r3, r0
 8014254:	4648      	mov	r0, r9
 8014256:	f7ff ff73 	bl	8014140 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	9a03      	ldr	r2, [sp, #12]
 801425e:	4546      	cmp	r6, r8
 8014260:	441a      	add	r2, r3
 8014262:	fb92 f3f5 	sdiv	r3, r2, r5
 8014266:	4418      	add	r0, r3
 8014268:	fb05 2313 	mls	r3, r5, r3, r2
 801426c:	bf18      	it	ne
 801426e:	4240      	negne	r0, r0
 8014270:	1c72      	adds	r2, r6, #1
 8014272:	6023      	str	r3, [r4, #0]
 8014274:	d105      	bne.n	8014282 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014276:	2b00      	cmp	r3, #0
 8014278:	f1c3 0200 	rsb	r2, r3, #0
 801427c:	db0b      	blt.n	8014296 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801427e:	6022      	str	r2, [r4, #0]
 8014280:	e006      	b.n	8014290 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014282:	2e01      	cmp	r6, #1
 8014284:	d104      	bne.n	8014290 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014286:	2b00      	cmp	r3, #0
 8014288:	da02      	bge.n	8014290 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801428a:	442b      	add	r3, r5
 801428c:	3801      	subs	r0, #1
 801428e:	6023      	str	r3, [r4, #0]
 8014290:	b005      	add	sp, #20
 8014292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014296:	3801      	subs	r0, #1
 8014298:	1b52      	subs	r2, r2, r5
 801429a:	e7f0      	b.n	801427e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801429c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801429c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80142a0:	4c1c      	ldr	r4, [pc, #112]	@ (8014314 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80142a2:	4605      	mov	r5, r0
 80142a4:	6807      	ldr	r7, [r0, #0]
 80142a6:	69a3      	ldr	r3, [r4, #24]
 80142a8:	b92b      	cbnz	r3, 80142b6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80142aa:	6840      	ldr	r0, [r0, #4]
 80142ac:	e9c5 7000 	strd	r7, r0, [r5]
 80142b0:	b004      	add	sp, #16
 80142b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b6:	f04f 0802 	mov.w	r8, #2
 80142ba:	68a2      	ldr	r2, [r4, #8]
 80142bc:	ae04      	add	r6, sp, #16
 80142be:	6820      	ldr	r0, [r4, #0]
 80142c0:	fb93 f1f8 	sdiv	r1, r3, r8
 80142c4:	440a      	add	r2, r1
 80142c6:	69e1      	ldr	r1, [r4, #28]
 80142c8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80142cc:	463a      	mov	r2, r7
 80142ce:	9600      	str	r6, [sp, #0]
 80142d0:	f7ff ff98 	bl	8014204 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80142d4:	69a3      	ldr	r3, [r4, #24]
 80142d6:	4607      	mov	r7, r0
 80142d8:	686a      	ldr	r2, [r5, #4]
 80142da:	6a21      	ldr	r1, [r4, #32]
 80142dc:	9600      	str	r6, [sp, #0]
 80142de:	6860      	ldr	r0, [r4, #4]
 80142e0:	f7ff ff90 	bl	8014204 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80142e4:	69a3      	ldr	r3, [r4, #24]
 80142e6:	6962      	ldr	r2, [r4, #20]
 80142e8:	4407      	add	r7, r0
 80142ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80142ec:	9600      	str	r6, [sp, #0]
 80142ee:	68e0      	ldr	r0, [r4, #12]
 80142f0:	fb93 f8f8 	sdiv	r8, r3, r8
 80142f4:	4442      	add	r2, r8
 80142f6:	9203      	str	r2, [sp, #12]
 80142f8:	682a      	ldr	r2, [r5, #0]
 80142fa:	f7ff ff83 	bl	8014204 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80142fe:	4680      	mov	r8, r0
 8014300:	9600      	str	r6, [sp, #0]
 8014302:	69a3      	ldr	r3, [r4, #24]
 8014304:	686a      	ldr	r2, [r5, #4]
 8014306:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014308:	6920      	ldr	r0, [r4, #16]
 801430a:	f7ff ff7b 	bl	8014204 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801430e:	4440      	add	r0, r8
 8014310:	e7cc      	b.n	80142ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014312:	bf00      	nop
 8014314:	2402dac0 	.word	0x2402dac0

08014318 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014318:	4b07      	ldr	r3, [pc, #28]	@ (8014338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	2b01      	cmp	r3, #1
 801431e:	d109      	bne.n	8014334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014320:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014324:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014328:	8003      	strh	r3, [r0, #0]
 801432a:	4b04      	ldr	r3, [pc, #16]	@ (801433c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801432c:	881b      	ldrh	r3, [r3, #0]
 801432e:	3b01      	subs	r3, #1
 8014330:	1a9b      	subs	r3, r3, r2
 8014332:	800b      	strh	r3, [r1, #0]
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	2402daa4 	.word	0x2402daa4
 801433c:	2402daa0 	.word	0x2402daa0

08014340 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014340:	4b07      	ldr	r3, [pc, #28]	@ (8014360 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014342:	b510      	push	{r4, lr}
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d108      	bne.n	801435c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801434a:	4b06      	ldr	r3, [pc, #24]	@ (8014364 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801434c:	880c      	ldrh	r4, [r1, #0]
 801434e:	881b      	ldrh	r3, [r3, #0]
 8014350:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014354:	3b01      	subs	r3, #1
 8014356:	1b1b      	subs	r3, r3, r4
 8014358:	8003      	strh	r3, [r0, #0]
 801435a:	800a      	strh	r2, [r1, #0]
 801435c:	bd10      	pop	{r4, pc}
 801435e:	bf00      	nop
 8014360:	2402daa4 	.word	0x2402daa4
 8014364:	2402daa0 	.word	0x2402daa0

08014368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014368:	4b0a      	ldr	r3, [pc, #40]	@ (8014394 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801436a:	b510      	push	{r4, lr}
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	2b01      	cmp	r3, #1
 8014370:	d10e      	bne.n	8014390 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014372:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014376:	8843      	ldrh	r3, [r0, #2]
 8014378:	f9b0 4000 	ldrsh.w	r4, [r0]
 801437c:	18ca      	adds	r2, r1, r3
 801437e:	4b06      	ldr	r3, [pc, #24]	@ (8014398 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014380:	8044      	strh	r4, [r0, #2]
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	1a9b      	subs	r3, r3, r2
 8014386:	8003      	strh	r3, [r0, #0]
 8014388:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801438c:	8081      	strh	r1, [r0, #4]
 801438e:	80c3      	strh	r3, [r0, #6]
 8014390:	bd10      	pop	{r4, pc}
 8014392:	bf00      	nop
 8014394:	2402daa4 	.word	0x2402daa4
 8014398:	2402daa0 	.word	0x2402daa0

0801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801439c:	4b08      	ldr	r3, [pc, #32]	@ (80143c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	2b01      	cmp	r3, #1
 80143a2:	d10c      	bne.n	80143be <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80143a4:	8803      	ldrh	r3, [r0, #0]
 80143a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80143aa:	8842      	ldrh	r2, [r0, #2]
 80143ac:	8002      	strh	r2, [r0, #0]
 80143ae:	185a      	adds	r2, r3, r1
 80143b0:	4b04      	ldr	r3, [pc, #16]	@ (80143c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80143b2:	881b      	ldrh	r3, [r3, #0]
 80143b4:	1a9b      	subs	r3, r3, r2
 80143b6:	8043      	strh	r3, [r0, #2]
 80143b8:	88c3      	ldrh	r3, [r0, #6]
 80143ba:	80c1      	strh	r1, [r0, #6]
 80143bc:	8083      	strh	r3, [r0, #4]
 80143be:	4770      	bx	lr
 80143c0:	2402daa4 	.word	0x2402daa4
 80143c4:	2402daa0 	.word	0x2402daa0

080143c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80143c8:	4b07      	ldr	r3, [pc, #28]	@ (80143e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80143ca:	b510      	push	{r4, lr}
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d108      	bne.n	80143e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80143d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80143d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80143da:	8003      	strh	r3, [r0, #0]
 80143dc:	8893      	ldrh	r3, [r2, #4]
 80143de:	3b01      	subs	r3, #1
 80143e0:	1b1b      	subs	r3, r3, r4
 80143e2:	800b      	strh	r3, [r1, #0]
 80143e4:	bd10      	pop	{r4, pc}
 80143e6:	bf00      	nop
 80143e8:	2402daa4 	.word	0x2402daa4

080143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80143ec:	4b0a      	ldr	r3, [pc, #40]	@ (8014418 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80143ee:	460a      	mov	r2, r1
 80143f0:	b510      	push	{r4, lr}
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	2b01      	cmp	r3, #1
 80143f6:	d10d      	bne.n	8014414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80143f8:	8881      	ldrh	r1, [r0, #4]
 80143fa:	8803      	ldrh	r3, [r0, #0]
 80143fc:	440b      	add	r3, r1
 80143fe:	4601      	mov	r1, r0
 8014400:	3b01      	subs	r3, #1
 8014402:	f821 3b02 	strh.w	r3, [r1], #2
 8014406:	f7ff ffdf 	bl	80143c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801440a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801440e:	88c2      	ldrh	r2, [r0, #6]
 8014410:	80c3      	strh	r3, [r0, #6]
 8014412:	8082      	strh	r2, [r0, #4]
 8014414:	bd10      	pop	{r4, pc}
 8014416:	bf00      	nop
 8014418:	2402daa4 	.word	0x2402daa4

0801441c <_ZN8touchgfx11Application13requestRedrawEv>:
 801441c:	4b06      	ldr	r3, [pc, #24]	@ (8014438 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801441e:	2100      	movs	r1, #0
 8014420:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014424:	4b05      	ldr	r3, [pc, #20]	@ (801443c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8014426:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801442a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801442e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8014432:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8014436:	4770      	bx	lr
 8014438:	2402daa0 	.word	0x2402daa0
 801443c:	2402daa2 	.word	0x2402daa2

08014440 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014440:	4b03      	ldr	r3, [pc, #12]	@ (8014450 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8014442:	6818      	ldr	r0, [r3, #0]
 8014444:	b110      	cbz	r0, 801444c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014446:	6803      	ldr	r3, [r0, #0]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	4718      	bx	r3
 801444c:	4770      	bx	lr
 801444e:	bf00      	nop
 8014450:	2402daf0 	.word	0x2402daf0

08014454 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014454:	4770      	bx	lr
	...

08014458 <_ZN8touchgfx11Application4drawEv>:
 8014458:	4b09      	ldr	r3, [pc, #36]	@ (8014480 <_ZN8touchgfx11Application4drawEv+0x28>)
 801445a:	b507      	push	{r0, r1, r2, lr}
 801445c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014460:	2100      	movs	r1, #0
 8014462:	4b08      	ldr	r3, [pc, #32]	@ (8014484 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014464:	9100      	str	r1, [sp, #0]
 8014466:	4669      	mov	r1, sp
 8014468:	f9b3 3000 	ldrsh.w	r3, [r3]
 801446c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014470:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014474:	6803      	ldr	r3, [r0, #0]
 8014476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014478:	4798      	blx	r3
 801447a:	b003      	add	sp, #12
 801447c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014480:	2402daa0 	.word	0x2402daa0
 8014484:	2402daa2 	.word	0x2402daa2

08014488 <_ZN8touchgfx11Application10invalidateEv>:
 8014488:	4b09      	ldr	r3, [pc, #36]	@ (80144b0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801448a:	b082      	sub	sp, #8
 801448c:	2100      	movs	r1, #0
 801448e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014492:	4b08      	ldr	r3, [pc, #32]	@ (80144b4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8014494:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014498:	aa02      	add	r2, sp, #8
 801449a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801449e:	9100      	str	r1, [sp, #0]
 80144a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80144a4:	6803      	ldr	r3, [r0, #0]
 80144a6:	e912 0006 	ldmdb	r2, {r1, r2}
 80144aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80144ac:	b002      	add	sp, #8
 80144ae:	4718      	bx	r3
 80144b0:	2402daa0 	.word	0x2402daa0
 80144b4:	2402daa2 	.word	0x2402daa2

080144b8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80144b8:	4b03      	ldr	r3, [pc, #12]	@ (80144c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80144ba:	6818      	ldr	r0, [r3, #0]
 80144bc:	b110      	cbz	r0, 80144c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80144be:	6803      	ldr	r3, [r0, #0]
 80144c0:	69db      	ldr	r3, [r3, #28]
 80144c2:	4718      	bx	r3
 80144c4:	4770      	bx	lr
 80144c6:	bf00      	nop
 80144c8:	2402daf0 	.word	0x2402daf0

080144cc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80144cc:	4b03      	ldr	r3, [pc, #12]	@ (80144dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80144ce:	6818      	ldr	r0, [r3, #0]
 80144d0:	b110      	cbz	r0, 80144d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80144d2:	6803      	ldr	r3, [r0, #0]
 80144d4:	6a1b      	ldr	r3, [r3, #32]
 80144d6:	4718      	bx	r3
 80144d8:	4770      	bx	lr
 80144da:	bf00      	nop
 80144dc:	2402daf0 	.word	0x2402daf0

080144e0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80144e0:	2300      	movs	r3, #0
 80144e2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80144e6:	4770      	bx	lr

080144e8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80144e8:	4b03      	ldr	r3, [pc, #12]	@ (80144f8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80144ea:	6818      	ldr	r0, [r3, #0]
 80144ec:	b110      	cbz	r0, 80144f4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80144ee:	6803      	ldr	r3, [r0, #0]
 80144f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144f2:	4718      	bx	r3
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop
 80144f8:	2402daf0 	.word	0x2402daf0

080144fc <_ZN8touchgfx11ApplicationD1Ev>:
 80144fc:	4770      	bx	lr

080144fe <_ZN8touchgfx11ApplicationD0Ev>:
 80144fe:	b510      	push	{r4, lr}
 8014500:	4604      	mov	r4, r0
 8014502:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8014506:	f00d ff51 	bl	80223ac <_ZdlPvj>
 801450a:	4620      	mov	r0, r4
 801450c:	bd10      	pop	{r4, pc}

0801450e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801450e:	b510      	push	{r4, lr}
 8014510:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014514:	888a      	ldrh	r2, [r1, #4]
 8014516:	f9b0 3000 	ldrsh.w	r3, [r0]
 801451a:	4422      	add	r2, r4
 801451c:	b212      	sxth	r2, r2
 801451e:	4293      	cmp	r3, r2
 8014520:	da15      	bge.n	801454e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014522:	8882      	ldrh	r2, [r0, #4]
 8014524:	4413      	add	r3, r2
 8014526:	b21b      	sxth	r3, r3
 8014528:	429c      	cmp	r4, r3
 801452a:	da10      	bge.n	801454e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801452c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014530:	88c9      	ldrh	r1, [r1, #6]
 8014532:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014536:	4419      	add	r1, r3
 8014538:	b209      	sxth	r1, r1
 801453a:	428a      	cmp	r2, r1
 801453c:	da07      	bge.n	801454e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801453e:	88c0      	ldrh	r0, [r0, #6]
 8014540:	4410      	add	r0, r2
 8014542:	b200      	sxth	r0, r0
 8014544:	4283      	cmp	r3, r0
 8014546:	bfac      	ite	ge
 8014548:	2000      	movge	r0, #0
 801454a:	2001      	movlt	r0, #1
 801454c:	bd10      	pop	{r4, pc}
 801454e:	2000      	movs	r0, #0
 8014550:	e7fc      	b.n	801454c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014552 <_ZN8touchgfx4Rect10restrictToEss>:
 8014552:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	b510      	push	{r4, lr}
 801455a:	da04      	bge.n	8014566 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801455c:	8884      	ldrh	r4, [r0, #4]
 801455e:	4423      	add	r3, r4
 8014560:	8083      	strh	r3, [r0, #4]
 8014562:	2300      	movs	r3, #0
 8014564:	8003      	strh	r3, [r0, #0]
 8014566:	f9b0 4000 	ldrsh.w	r4, [r0]
 801456a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801456e:	1b09      	subs	r1, r1, r4
 8014570:	428b      	cmp	r3, r1
 8014572:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014576:	bfc8      	it	gt
 8014578:	8081      	strhgt	r1, [r0, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	da04      	bge.n	8014588 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801457e:	88c1      	ldrh	r1, [r0, #6]
 8014580:	440b      	add	r3, r1
 8014582:	80c3      	strh	r3, [r0, #6]
 8014584:	2300      	movs	r3, #0
 8014586:	8043      	strh	r3, [r0, #2]
 8014588:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801458c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014590:	1a52      	subs	r2, r2, r1
 8014592:	4293      	cmp	r3, r2
 8014594:	bfc8      	it	gt
 8014596:	80c2      	strhgt	r2, [r0, #6]
 8014598:	bd10      	pop	{r4, pc}
	...

0801459c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801459c:	4b10      	ldr	r3, [pc, #64]	@ (80145e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801459e:	b510      	push	{r4, lr}
 80145a0:	460c      	mov	r4, r1
 80145a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145a6:	4b0f      	ldr	r3, [pc, #60]	@ (80145e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80145a8:	4620      	mov	r0, r4
 80145aa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80145ae:	f7ff ffd0 	bl	8014552 <_ZN8touchgfx4Rect10restrictToEss>
 80145b2:	4b0d      	ldr	r3, [pc, #52]	@ (80145e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80145b4:	6818      	ldr	r0, [r3, #0]
 80145b6:	b190      	cbz	r0, 80145de <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80145b8:	6803      	ldr	r3, [r0, #0]
 80145ba:	4621      	mov	r1, r4
 80145bc:	689b      	ldr	r3, [r3, #8]
 80145be:	4798      	blx	r3
 80145c0:	4b0a      	ldr	r3, [pc, #40]	@ (80145ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80145c2:	6818      	ldr	r0, [r3, #0]
 80145c4:	b118      	cbz	r0, 80145ce <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80145c6:	6803      	ldr	r3, [r0, #0]
 80145c8:	4621      	mov	r1, r4
 80145ca:	689b      	ldr	r3, [r3, #8]
 80145cc:	4798      	blx	r3
 80145ce:	4b08      	ldr	r3, [pc, #32]	@ (80145f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80145d0:	4621      	mov	r1, r4
 80145d2:	6818      	ldr	r0, [r3, #0]
 80145d4:	6803      	ldr	r3, [r0, #0]
 80145d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145da:	69db      	ldr	r3, [r3, #28]
 80145dc:	4718      	bx	r3
 80145de:	bd10      	pop	{r4, pc}
 80145e0:	2402daa2 	.word	0x2402daa2
 80145e4:	2402daa0 	.word	0x2402daa0
 80145e8:	2402daf0 	.word	0x2402daf0
 80145ec:	2402daec 	.word	0x2402daec
 80145f0:	2402daac 	.word	0x2402daac

080145f4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80145f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f6:	4606      	mov	r6, r0
 80145f8:	4608      	mov	r0, r1
 80145fa:	460f      	mov	r7, r1
 80145fc:	f7f9 ff35 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014600:	b9e8      	cbnz	r0, 801463e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014602:	f9b7 5000 	ldrsh.w	r5, [r7]
 8014606:	f9b6 4000 	ldrsh.w	r4, [r6]
 801460a:	42a5      	cmp	r5, r4
 801460c:	db17      	blt.n	801463e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801460e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014612:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014616:	429a      	cmp	r2, r3
 8014618:	db11      	blt.n	801463e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801461a:	88b9      	ldrh	r1, [r7, #4]
 801461c:	440d      	add	r5, r1
 801461e:	88b1      	ldrh	r1, [r6, #4]
 8014620:	440c      	add	r4, r1
 8014622:	b22d      	sxth	r5, r5
 8014624:	b224      	sxth	r4, r4
 8014626:	42a5      	cmp	r5, r4
 8014628:	dc09      	bgt.n	801463e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801462a:	88f8      	ldrh	r0, [r7, #6]
 801462c:	4410      	add	r0, r2
 801462e:	88f2      	ldrh	r2, [r6, #6]
 8014630:	4413      	add	r3, r2
 8014632:	b200      	sxth	r0, r0
 8014634:	b21b      	sxth	r3, r3
 8014636:	4298      	cmp	r0, r3
 8014638:	bfcc      	ite	gt
 801463a:	2000      	movgt	r0, #0
 801463c:	2001      	movle	r0, #1
 801463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014640 <_ZN8touchgfx11Application11getInstanceEv>:
 8014640:	4b01      	ldr	r3, [pc, #4]	@ (8014648 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014642:	6818      	ldr	r0, [r3, #0]
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	2402db00 	.word	0x2402db00

0801464c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801464c:	2300      	movs	r3, #0
 801464e:	b510      	push	{r4, lr}
 8014650:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8014654:	4604      	mov	r4, r0
 8014656:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801465a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801465e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014662:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8014666:	429a      	cmp	r2, r3
 8014668:	d90e      	bls.n	8014688 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801466a:	18e2      	adds	r2, r4, r3
 801466c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8014670:	b122      	cbz	r2, 801467c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8014672:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014676:	6803      	ldr	r3, [r0, #0]
 8014678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801467a:	4798      	blx	r3
 801467c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014680:	3301      	adds	r3, #1
 8014682:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014686:	e7ea      	b.n	801465e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8014688:	bd10      	pop	{r4, pc}

0801468a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801468a:	2300      	movs	r3, #0
 801468c:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8014690:	30a4      	adds	r0, #164	@ 0xa4
 8014692:	f820 3c24 	strh.w	r3, [r0, #-36]
 8014696:	f802 3b01 	strb.w	r3, [r2], #1
 801469a:	4282      	cmp	r2, r0
 801469c:	d1fb      	bne.n	8014696 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801469e:	4770      	bx	lr

080146a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	4c0b      	ldr	r4, [pc, #44]	@ (80146d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80146a4:	4605      	mov	r5, r0
 80146a6:	460e      	mov	r6, r1
 80146a8:	6820      	ldr	r0, [r4, #0]
 80146aa:	b110      	cbz	r0, 80146b2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80146ac:	6803      	ldr	r3, [r0, #0]
 80146ae:	695b      	ldr	r3, [r3, #20]
 80146b0:	4798      	blx	r3
 80146b2:	1d28      	adds	r0, r5, #4
 80146b4:	f7ff ffe9 	bl	801468a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80146b8:	6026      	str	r6, [r4, #0]
 80146ba:	6833      	ldr	r3, [r6, #0]
 80146bc:	4630      	mov	r0, r6
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	4798      	blx	r3
 80146c2:	682b      	ldr	r3, [r5, #0]
 80146c4:	4628      	mov	r0, r5
 80146c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146cc:	4718      	bx	r3
 80146ce:	bf00      	nop
 80146d0:	2402daf0 	.word	0x2402daf0

080146d4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80146d4:	2300      	movs	r3, #0
 80146d6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80146da:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80146de:	461a      	mov	r2, r3
 80146e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146e2:	461c      	mov	r4, r3
 80146e4:	461d      	mov	r5, r3
 80146e6:	459c      	cmp	ip, r3
 80146e8:	dd1a      	ble.n	8014720 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80146ea:	18c6      	adds	r6, r0, r3
 80146ec:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80146f0:	b16e      	cbz	r6, 801470e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d008      	beq.n	8014708 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80146f6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80146fa:	fa1f fe82 	uxth.w	lr, r2
 80146fe:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8014702:	1887      	adds	r7, r0, r2
 8014704:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8014708:	3201      	adds	r2, #1
 801470a:	3301      	adds	r3, #1
 801470c:	e7eb      	b.n	80146e6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801470e:	4299      	cmp	r1, r3
 8014710:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8014714:	bfa8      	it	ge
 8014716:	3501      	addge	r5, #1
 8014718:	429e      	cmp	r6, r3
 801471a:	bfc8      	it	gt
 801471c:	3401      	addgt	r4, #1
 801471e:	e7f4      	b.n	801470a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8014720:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8014724:	1b49      	subs	r1, r1, r5
 8014726:	1b1b      	subs	r3, r3, r4
 8014728:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801472c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014730:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014734:	4293      	cmp	r3, r2
 8014736:	dd03      	ble.n	8014740 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8014738:	3b01      	subs	r3, #1
 801473a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801473e:	e7f7      	b.n	8014730 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014744 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014744:	b570      	push	{r4, r5, r6, lr}
 8014746:	4d16      	ldr	r5, [pc, #88]	@ (80147a0 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014748:	4604      	mov	r4, r0
 801474a:	6828      	ldr	r0, [r5, #0]
 801474c:	b140      	cbz	r0, 8014760 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801474e:	7a03      	ldrb	r3, [r0, #8]
 8014750:	b933      	cbnz	r3, 8014760 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014752:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014756:	6803      	ldr	r3, [r0, #0]
 8014758:	689b      	ldr	r3, [r3, #8]
 801475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801475e:	4718      	bx	r3
 8014760:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8014764:	4e0f      	ldr	r6, [pc, #60]	@ (80147a4 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8014766:	b973      	cbnz	r3, 8014786 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014768:	b168      	cbz	r0, 8014786 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801476a:	7a03      	ldrb	r3, [r0, #8]
 801476c:	b15b      	cbz	r3, 8014786 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801476e:	6830      	ldr	r0, [r6, #0]
 8014770:	b110      	cbz	r0, 8014778 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8014772:	6803      	ldr	r3, [r0, #0]
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	4798      	blx	r3
 8014778:	6828      	ldr	r0, [r5, #0]
 801477a:	6803      	ldr	r3, [r0, #0]
 801477c:	68db      	ldr	r3, [r3, #12]
 801477e:	4798      	blx	r3
 8014780:	2301      	movs	r3, #1
 8014782:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014786:	3404      	adds	r4, #4
 8014788:	4620      	mov	r0, r4
 801478a:	f7ff ff5f 	bl	801464c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801478e:	4620      	mov	r0, r4
 8014790:	f7ff ffa0 	bl	80146d4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8014794:	6830      	ldr	r0, [r6, #0]
 8014796:	b110      	cbz	r0, 801479e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8014798:	6803      	ldr	r3, [r0, #0]
 801479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801479c:	e7dd      	b.n	801475a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801479e:	bd70      	pop	{r4, r5, r6, pc}
 80147a0:	2402daf4 	.word	0x2402daf4
 80147a4:	2402daf0 	.word	0x2402daf0

080147a8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80147a8:	4603      	mov	r3, r0
 80147aa:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80147ae:	2200      	movs	r2, #0
 80147b0:	801a      	strh	r2, [r3, #0]
 80147b2:	3308      	adds	r3, #8
 80147b4:	f823 2c06 	strh.w	r2, [r3, #-6]
 80147b8:	f823 2c04 	strh.w	r2, [r3, #-4]
 80147bc:	f823 2c02 	strh.w	r2, [r3, #-2]
 80147c0:	428b      	cmp	r3, r1
 80147c2:	d1f5      	bne.n	80147b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80147c4:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80147c8:	4770      	bx	lr
	...

080147cc <_ZN8touchgfx11ApplicationC1Ev>:
 80147cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ce:	4b1d      	ldr	r3, [pc, #116]	@ (8014844 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80147d0:	4606      	mov	r6, r0
 80147d2:	4604      	mov	r4, r0
 80147d4:	2500      	movs	r5, #0
 80147d6:	f846 3b04 	str.w	r3, [r6], #4
 80147da:	22a8      	movs	r2, #168	@ 0xa8
 80147dc:	2100      	movs	r1, #0
 80147de:	4630      	mov	r0, r6
 80147e0:	f00e fb73 	bl	8022eca <memset>
 80147e4:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80147e8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80147ec:	4f16      	ldr	r7, [pc, #88]	@ (8014848 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80147ee:	f7ff ffdb 	bl	80147a8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80147f2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80147f6:	f7ff ffd7 	bl	80147a8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80147fa:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80147fe:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8014802:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8014806:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801480a:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801480e:	490f      	ldr	r1, [pc, #60]	@ (801484c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014810:	480f      	ldr	r0, [pc, #60]	@ (8014850 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8014812:	f00c ff5b 	bl	80216cc <CRC_Lock>
 8014816:	4b0f      	ldr	r3, [pc, #60]	@ (8014854 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8014818:	b158      	cbz	r0, 8014832 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801481a:	801d      	strh	r5, [r3, #0]
 801481c:	2300      	movs	r3, #0
 801481e:	4a0e      	ldr	r2, [pc, #56]	@ (8014858 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8014820:	4630      	mov	r0, r6
 8014822:	6013      	str	r3, [r2, #0]
 8014824:	4a0d      	ldr	r2, [pc, #52]	@ (801485c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8014826:	603b      	str	r3, [r7, #0]
 8014828:	6013      	str	r3, [r2, #0]
 801482a:	f7ff ff2e 	bl	801468a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801482e:	4620      	mov	r0, r4
 8014830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014836:	2002      	movs	r0, #2
 8014838:	801a      	strh	r2, [r3, #0]
 801483a:	6038      	str	r0, [r7, #0]
 801483c:	f001 fe4a 	bl	80164d4 <_ZN8touchgfx6Screen4drawEv>
 8014840:	e7ec      	b.n	801481c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8014842:	bf00      	nop
 8014844:	08025a38 	.word	0x08025a38
 8014848:	2402daf0 	.word	0x2402daf0
 801484c:	b5e8b5cd 	.word	0xb5e8b5cd
 8014850:	f407a5c2 	.word	0xf407a5c2
 8014854:	24000080 	.word	0x24000080
 8014858:	2402db00 	.word	0x2402db00
 801485c:	2402daf4 	.word	0x2402daf4

08014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8014860:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014864:	3b01      	subs	r3, #1
 8014866:	b29b      	uxth	r3, r3
 8014868:	428b      	cmp	r3, r1
 801486a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801486e:	b510      	push	{r4, lr}
 8014870:	d908      	bls.n	8014884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8014872:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014876:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8014880:	685a      	ldr	r2, [r3, #4]
 8014882:	6062      	str	r2, [r4, #4]
 8014884:	bd10      	pop	{r4, pc}
	...

08014888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801488c:	b08f      	sub	sp, #60	@ 0x3c
 801488e:	4b8f      	ldr	r3, [pc, #572]	@ (8014acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8014890:	4683      	mov	fp, r0
 8014892:	ac0a      	add	r4, sp, #40	@ 0x28
 8014894:	e884 0006 	stmia.w	r4, {r1, r2}
 8014898:	f9b3 2000 	ldrsh.w	r2, [r3]
 801489c:	4620      	mov	r0, r4
 801489e:	4b8c      	ldr	r3, [pc, #560]	@ (8014ad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80148a0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80148a4:	f7ff fe55 	bl	8014552 <_ZN8touchgfx4Rect10restrictToEss>
 80148a8:	4620      	mov	r0, r4
 80148aa:	f7f9 fdde 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d16a      	bne.n	8014988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80148b2:	9403      	str	r4, [sp, #12]
 80148b4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80148b8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80148bc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80148c0:	9301      	str	r3, [sp, #4]
 80148c2:	35a4      	adds	r5, #164	@ 0xa4
 80148c4:	b15c      	cbz	r4, 80148de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80148c6:	4629      	mov	r1, r5
 80148c8:	9803      	ldr	r0, [sp, #12]
 80148ca:	f7ff fe93 	bl	80145f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80148ce:	3c01      	subs	r4, #1
 80148d0:	b118      	cbz	r0, 80148da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80148d2:	b2a1      	uxth	r1, r4
 80148d4:	9801      	ldr	r0, [sp, #4]
 80148d6:	f7ff ffc3 	bl	8014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80148da:	3d08      	subs	r5, #8
 80148dc:	e7f2      	b.n	80148c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80148de:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80148e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80148e6:	f8cd a010 	str.w	sl, [sp, #16]
 80148ea:	9302      	str	r3, [sp, #8]
 80148ec:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80148f0:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80148f4:	9306      	str	r3, [sp, #24]
 80148f6:	445c      	add	r4, fp
 80148f8:	2500      	movs	r5, #0
 80148fa:	4626      	mov	r6, r4
 80148fc:	f8cd a014 	str.w	sl, [sp, #20]
 8014900:	462f      	mov	r7, r5
 8014902:	9b05      	ldr	r3, [sp, #20]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d073      	beq.n	80149f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014908:	9903      	ldr	r1, [sp, #12]
 801490a:	4630      	mov	r0, r6
 801490c:	f7ff fdff 	bl	801450e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014910:	b350      	cbz	r0, 8014968 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8014912:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8014916:	f9b6 c000 	ldrsh.w	ip, [r6]
 801491a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801491e:	45e6      	cmp	lr, ip
 8014920:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014924:	db33      	blt.n	801498e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014926:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801492a:	88b3      	ldrh	r3, [r6, #4]
 801492c:	4472      	add	r2, lr
 801492e:	4463      	add	r3, ip
 8014930:	b212      	sxth	r2, r2
 8014932:	b21b      	sxth	r3, r3
 8014934:	429a      	cmp	r2, r3
 8014936:	dc2a      	bgt.n	801498e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014938:	fa1f f289 	uxth.w	r2, r9
 801493c:	88f3      	ldrh	r3, [r6, #6]
 801493e:	45c8      	cmp	r8, r9
 8014940:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014944:	4413      	add	r3, r2
 8014946:	fa1f fc88 	uxth.w	ip, r8
 801494a:	b29b      	uxth	r3, r3
 801494c:	fa0f fe83 	sxth.w	lr, r3
 8014950:	db0f      	blt.n	8014972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014952:	eba3 030c 	sub.w	r3, r3, ip
 8014956:	1ac9      	subs	r1, r1, r3
 8014958:	b209      	sxth	r1, r1
 801495a:	2900      	cmp	r1, #0
 801495c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014960:	dd12      	ble.n	8014988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014962:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8014966:	4605      	mov	r5, r0
 8014968:	9b05      	ldr	r3, [sp, #20]
 801496a:	3e08      	subs	r6, #8
 801496c:	3b01      	subs	r3, #1
 801496e:	9305      	str	r3, [sp, #20]
 8014970:	e7c7      	b.n	8014902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8014972:	4461      	add	r1, ip
 8014974:	b209      	sxth	r1, r1
 8014976:	4571      	cmp	r1, lr
 8014978:	dc38      	bgt.n	80149ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801497a:	eba2 020c 	sub.w	r2, r2, ip
 801497e:	b212      	sxth	r2, r2
 8014980:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8014984:	2a00      	cmp	r2, #0
 8014986:	dcee      	bgt.n	8014966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014988:	b00f      	add	sp, #60	@ 0x3c
 801498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801498e:	45c8      	cmp	r8, r9
 8014990:	db2c      	blt.n	80149ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014992:	88f3      	ldrh	r3, [r6, #6]
 8014994:	4499      	add	r9, r3
 8014996:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801499a:	4498      	add	r8, r3
 801499c:	fa0f f989 	sxth.w	r9, r9
 80149a0:	fa0f f888 	sxth.w	r8, r8
 80149a4:	45c1      	cmp	r9, r8
 80149a6:	db21      	blt.n	80149ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80149a8:	fa1f f28c 	uxth.w	r2, ip
 80149ac:	88b3      	ldrh	r3, [r6, #4]
 80149ae:	45e6      	cmp	lr, ip
 80149b0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80149b4:	4413      	add	r3, r2
 80149b6:	fa1f f88e 	uxth.w	r8, lr
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	fa0f f983 	sxth.w	r9, r3
 80149c0:	db0a      	blt.n	80149d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80149c2:	eba3 0308 	sub.w	r3, r3, r8
 80149c6:	1ac9      	subs	r1, r1, r3
 80149c8:	b209      	sxth	r1, r1
 80149ca:	2900      	cmp	r1, #0
 80149cc:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80149d0:	ddda      	ble.n	8014988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80149d2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80149d6:	e7c6      	b.n	8014966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80149d8:	4441      	add	r1, r8
 80149da:	b209      	sxth	r1, r1
 80149dc:	4549      	cmp	r1, r9
 80149de:	dc05      	bgt.n	80149ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80149e0:	eba2 0208 	sub.w	r2, r2, r8
 80149e4:	b212      	sxth	r2, r2
 80149e6:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80149ea:	e7cb      	b.n	8014984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80149ec:	4607      	mov	r7, r0
 80149ee:	e7bb      	b.n	8014968 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80149f0:	2d00      	cmp	r5, #0
 80149f2:	d181      	bne.n	80148f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80149f4:	2f00      	cmp	r7, #0
 80149f6:	f000 81dd 	beq.w	8014db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80149fa:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80149fe:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014a02:	b2b3      	uxth	r3, r6
 8014a04:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8014a08:	9305      	str	r3, [sp, #20]
 8014a0a:	9a05      	ldr	r2, [sp, #20]
 8014a0c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014a10:	4413      	add	r3, r2
 8014a12:	b2ba      	uxth	r2, r7
 8014a14:	4492      	add	sl, r2
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	fa1f fa8a 	uxth.w	sl, sl
 8014a1c:	fa0f f883 	sxth.w	r8, r3
 8014a20:	fa0f f98a 	sxth.w	r9, sl
 8014a24:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8014a28:	9b04      	ldr	r3, [sp, #16]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d052      	beq.n	8014ad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8014a2e:	9903      	ldr	r1, [sp, #12]
 8014a30:	4620      	mov	r0, r4
 8014a32:	f7ff fd6c 	bl	801450e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014a36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014a3a:	b1c0      	cbz	r0, 8014a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014a3c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8014a40:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014a44:	4576      	cmp	r6, lr
 8014a46:	dc22      	bgt.n	8014a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014a48:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014a4c:	44f4      	add	ip, lr
 8014a4e:	fa0f fc8c 	sxth.w	ip, ip
 8014a52:	45e0      	cmp	r8, ip
 8014a54:	db1b      	blt.n	8014a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014a56:	428f      	cmp	r7, r1
 8014a58:	fa1f fc81 	uxth.w	ip, r1
 8014a5c:	88e1      	ldrh	r1, [r4, #6]
 8014a5e:	dc0d      	bgt.n	8014a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014a60:	ebaa 0c0c 	sub.w	ip, sl, ip
 8014a64:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014a68:	eba1 010c 	sub.w	r1, r1, ip
 8014a6c:	80e1      	strh	r1, [r4, #6]
 8014a6e:	4628      	mov	r0, r5
 8014a70:	9904      	ldr	r1, [sp, #16]
 8014a72:	3c08      	subs	r4, #8
 8014a74:	4605      	mov	r5, r0
 8014a76:	3901      	subs	r1, #1
 8014a78:	9104      	str	r1, [sp, #16]
 8014a7a:	e7d3      	b.n	8014a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8014a7c:	4461      	add	r1, ip
 8014a7e:	b209      	sxth	r1, r1
 8014a80:	4549      	cmp	r1, r9
 8014a82:	dcf5      	bgt.n	8014a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014a84:	eba2 0c0c 	sub.w	ip, r2, ip
 8014a88:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014a8c:	e7ef      	b.n	8014a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014a8e:	428f      	cmp	r7, r1
 8014a90:	dcee      	bgt.n	8014a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014a92:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014a96:	4461      	add	r1, ip
 8014a98:	b209      	sxth	r1, r1
 8014a9a:	4589      	cmp	r9, r1
 8014a9c:	dbe8      	blt.n	8014a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014a9e:	4576      	cmp	r6, lr
 8014aa0:	fa1f fc8e 	uxth.w	ip, lr
 8014aa4:	88a1      	ldrh	r1, [r4, #4]
 8014aa6:	dc07      	bgt.n	8014ab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8014aa8:	eba3 0c0c 	sub.w	ip, r3, ip
 8014aac:	f8a4 8000 	strh.w	r8, [r4]
 8014ab0:	eba1 010c 	sub.w	r1, r1, ip
 8014ab4:	80a1      	strh	r1, [r4, #4]
 8014ab6:	e7da      	b.n	8014a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014ab8:	4461      	add	r1, ip
 8014aba:	b209      	sxth	r1, r1
 8014abc:	4588      	cmp	r8, r1
 8014abe:	dbd7      	blt.n	8014a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014ac0:	9905      	ldr	r1, [sp, #20]
 8014ac2:	eba1 0c0c 	sub.w	ip, r1, ip
 8014ac6:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014aca:	e7d0      	b.n	8014a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014acc:	2402daa2 	.word	0x2402daa2
 8014ad0:	2402daa0 	.word	0x2402daa0
 8014ad4:	2d00      	cmp	r5, #0
 8014ad6:	f000 816d 	beq.w	8014db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014ada:	9b06      	ldr	r3, [sp, #24]
 8014adc:	445b      	add	r3, fp
 8014ade:	461c      	mov	r4, r3
 8014ae0:	9b02      	ldr	r3, [sp, #8]
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	f000 8166 	beq.w	8014db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014ae8:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014aec:	9803      	ldr	r0, [sp, #12]
 8014aee:	4629      	mov	r1, r5
 8014af0:	f7ff fd80 	bl	80145f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014af4:	b120      	cbz	r0, 8014b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8014af6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014afa:	9801      	ldr	r0, [sp, #4]
 8014afc:	f7ff feb0 	bl	8014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014b00:	9903      	ldr	r1, [sp, #12]
 8014b02:	4628      	mov	r0, r5
 8014b04:	f7ff fd03 	bl	801450e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	f000 809c 	beq.w	8014c46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8014b0e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8014b12:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014b16:	fa1f f189 	uxth.w	r1, r9
 8014b1a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b20:	eb01 0c03 	add.w	ip, r1, r3
 8014b24:	b283      	uxth	r3, r0
 8014b26:	4548      	cmp	r0, r9
 8014b28:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014b2c:	fa1f fa8c 	uxth.w	sl, ip
 8014b30:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8014b34:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014b38:	eb03 050c 	add.w	r5, r3, ip
 8014b3c:	b2ad      	uxth	r5, r5
 8014b3e:	9505      	str	r5, [sp, #20]
 8014b40:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014b44:	9504      	str	r5, [sp, #16]
 8014b46:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014b4a:	f340 8099 	ble.w	8014c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8014b4e:	1a5b      	subs	r3, r3, r1
 8014b50:	4596      	cmp	lr, r2
 8014b52:	fa0f f08a 	sxth.w	r0, sl
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	b21e      	sxth	r6, r3
 8014b5a:	dd2e      	ble.n	8014bba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8014b5c:	9f02      	ldr	r7, [sp, #8]
 8014b5e:	fa1f fe8e 	uxth.w	lr, lr
 8014b62:	b292      	uxth	r2, r2
 8014b64:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014b68:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014b6c:	9f04      	ldr	r7, [sp, #16]
 8014b6e:	ebae 0102 	sub.w	r1, lr, r2
 8014b72:	44a6      	add	lr, r4
 8014b74:	1a3f      	subs	r7, r7, r0
 8014b76:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014b7a:	b289      	uxth	r1, r1
 8014b7c:	4402      	add	r2, r0
 8014b7e:	fa0f fe8e 	sxth.w	lr, lr
 8014b82:	b20d      	sxth	r5, r1
 8014b84:	b212      	sxth	r2, r2
 8014b86:	436f      	muls	r7, r5
 8014b88:	ebae 0202 	sub.w	r2, lr, r2
 8014b8c:	4372      	muls	r2, r6
 8014b8e:	4297      	cmp	r7, r2
 8014b90:	db09      	blt.n	8014ba6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8014b92:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014b96:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014b9a:	449c      	add	ip, r3
 8014b9c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014ba0:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014ba4:	e686      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014ba6:	4421      	add	r1, r4
 8014ba8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014bac:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8014bb0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014bb4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014bb8:	e67c      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014bba:	9f04      	ldr	r7, [sp, #16]
 8014bbc:	42b8      	cmp	r0, r7
 8014bbe:	da27      	bge.n	8014c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8014bc0:	9902      	ldr	r1, [sp, #8]
 8014bc2:	1a3f      	subs	r7, r7, r0
 8014bc4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014bc8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014bcc:	eb05 010e 	add.w	r1, r5, lr
 8014bd0:	fa1f f881 	uxth.w	r8, r1
 8014bd4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014bd8:	4411      	add	r1, r2
 8014bda:	fa0f f988 	sxth.w	r9, r8
 8014bde:	eba2 020e 	sub.w	r2, r2, lr
 8014be2:	eba1 0108 	sub.w	r1, r1, r8
 8014be6:	4372      	muls	r2, r6
 8014be8:	b289      	uxth	r1, r1
 8014bea:	fa0f f881 	sxth.w	r8, r1
 8014bee:	fb08 f707 	mul.w	r7, r8, r7
 8014bf2:	42ba      	cmp	r2, r7
 8014bf4:	dc06      	bgt.n	8014c04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8014bf6:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014bfa:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014bfe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8014c02:	e7ca      	b.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8014c04:	4429      	add	r1, r5
 8014c06:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014c0a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014c0e:	e651      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014c10:	9805      	ldr	r0, [sp, #20]
 8014c12:	2d06      	cmp	r5, #6
 8014c14:	ebaa 0000 	sub.w	r0, sl, r0
 8014c18:	b280      	uxth	r0, r0
 8014c1a:	fa0f fe80 	sxth.w	lr, r0
 8014c1e:	d817      	bhi.n	8014c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8014c20:	9b04      	ldr	r3, [sp, #16]
 8014c22:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8014c26:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014c2a:	1c6b      	adds	r3, r5, #1
 8014c2c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014c30:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014c34:	9b01      	ldr	r3, [sp, #4]
 8014c36:	9801      	ldr	r0, [sp, #4]
 8014c38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014c3c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014c40:	805a      	strh	r2, [r3, #2]
 8014c42:	809e      	strh	r6, [r3, #4]
 8014c44:	80d9      	strh	r1, [r3, #6]
 8014c46:	9b02      	ldr	r3, [sp, #8]
 8014c48:	3c08      	subs	r4, #8
 8014c4a:	3b01      	subs	r3, #1
 8014c4c:	9302      	str	r3, [sp, #8]
 8014c4e:	e747      	b.n	8014ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8014c50:	9a02      	ldr	r2, [sp, #8]
 8014c52:	45b6      	cmp	lr, r6
 8014c54:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014c58:	db0d      	blt.n	8014c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8014c5a:	449c      	add	ip, r3
 8014c5c:	445a      	add	r2, fp
 8014c5e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014c62:	fa1f fc8c 	uxth.w	ip, ip
 8014c66:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8014c6a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014c6e:	448c      	add	ip, r1
 8014c70:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8014c74:	e61e      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014c76:	445a      	add	r2, fp
 8014c78:	4484      	add	ip, r0
 8014c7a:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8014c7e:	e78f      	b.n	8014ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014c80:	fa1f f18e 	uxth.w	r1, lr
 8014c84:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8014c88:	b293      	uxth	r3, r2
 8014c8a:	4596      	cmp	lr, r2
 8014c8c:	eb01 0806 	add.w	r8, r1, r6
 8014c90:	9306      	str	r3, [sp, #24]
 8014c92:	fa1f f888 	uxth.w	r8, r8
 8014c96:	9f06      	ldr	r7, [sp, #24]
 8014c98:	fa0f f388 	sxth.w	r3, r8
 8014c9c:	9307      	str	r3, [sp, #28]
 8014c9e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014ca2:	443b      	add	r3, r7
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	9308      	str	r3, [sp, #32]
 8014ca8:	da24      	bge.n	8014cf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8014caa:	9905      	ldr	r1, [sp, #20]
 8014cac:	eba3 0308 	sub.w	r3, r3, r8
 8014cb0:	eba2 020e 	sub.w	r2, r2, lr
 8014cb4:	eba9 0000 	sub.w	r0, r9, r0
 8014cb8:	ebaa 0401 	sub.w	r4, sl, r1
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	b2a4      	uxth	r4, r4
 8014cc0:	b219      	sxth	r1, r3
 8014cc2:	b225      	sxth	r5, r4
 8014cc4:	4348      	muls	r0, r1
 8014cc6:	436a      	muls	r2, r5
 8014cc8:	4282      	cmp	r2, r0
 8014cca:	9a02      	ldr	r2, [sp, #8]
 8014ccc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014cd0:	445a      	add	r2, fp
 8014cd2:	dc06      	bgt.n	8014ce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8014cd4:	9b07      	ldr	r3, [sp, #28]
 8014cd6:	44a4      	add	ip, r4
 8014cd8:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014cdc:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8014ce0:	e75e      	b.n	8014ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014ce2:	9904      	ldr	r1, [sp, #16]
 8014ce4:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8014ce8:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8014cec:	4433      	add	r3, r6
 8014cee:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014cf2:	e5df      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014cf4:	9f06      	ldr	r7, [sp, #24]
 8014cf6:	9b04      	ldr	r3, [sp, #16]
 8014cf8:	1bc9      	subs	r1, r1, r7
 8014cfa:	fa0f f78a 	sxth.w	r7, sl
 8014cfe:	b289      	uxth	r1, r1
 8014d00:	429f      	cmp	r7, r3
 8014d02:	fa0f fe81 	sxth.w	lr, r1
 8014d06:	dd23      	ble.n	8014d50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8014d08:	9a05      	ldr	r2, [sp, #20]
 8014d0a:	eba9 0000 	sub.w	r0, r9, r0
 8014d0e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014d12:	ebaa 0202 	sub.w	r2, sl, r2
 8014d16:	9d07      	ldr	r5, [sp, #28]
 8014d18:	fb0e f000 	mul.w	r0, lr, r0
 8014d1c:	b292      	uxth	r2, r2
 8014d1e:	eba5 0a03 	sub.w	sl, r5, r3
 8014d22:	9b02      	ldr	r3, [sp, #8]
 8014d24:	b214      	sxth	r4, r2
 8014d26:	00db      	lsls	r3, r3, #3
 8014d28:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d2c:	445b      	add	r3, fp
 8014d2e:	4550      	cmp	r0, sl
 8014d30:	db03      	blt.n	8014d3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8014d32:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8014d36:	4494      	add	ip, r2
 8014d38:	e732      	b.n	8014ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014d3a:	9a04      	ldr	r2, [sp, #16]
 8014d3c:	4431      	add	r1, r6
 8014d3e:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8014d42:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014d46:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014d4a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014d4e:	e75c      	b.n	8014c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8014d50:	9b08      	ldr	r3, [sp, #32]
 8014d52:	2d06      	cmp	r5, #6
 8014d54:	eba3 0308 	sub.w	r3, r3, r8
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	b218      	sxth	r0, r3
 8014d5c:	d813      	bhi.n	8014d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8014d5e:	9b07      	ldr	r3, [sp, #28]
 8014d60:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8014d64:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8014d68:	1c6b      	adds	r3, r5, #1
 8014d6a:	9901      	ldr	r1, [sp, #4]
 8014d6c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014d70:	9b01      	ldr	r3, [sp, #4]
 8014d72:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014d76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014d7a:	805a      	strh	r2, [r3, #2]
 8014d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d7e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8014d82:	809a      	strh	r2, [r3, #4]
 8014d84:	e75f      	b.n	8014c46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8014d86:	9c02      	ldr	r4, [sp, #8]
 8014d88:	4570      	cmp	r0, lr
 8014d8a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8014d8e:	db0d      	blt.n	8014dac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8014d90:	4431      	add	r1, r6
 8014d92:	9b06      	ldr	r3, [sp, #24]
 8014d94:	445c      	add	r4, fp
 8014d96:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8014d9a:	b289      	uxth	r1, r1
 8014d9c:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8014da0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014da4:	4419      	add	r1, r3
 8014da6:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8014daa:	e583      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014dac:	445c      	add	r4, fp
 8014dae:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8014db2:	e79b      	b.n	8014cec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8014db4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014db8:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014dbc:	1e65      	subs	r5, r4, #1
 8014dbe:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014dc2:	b2ad      	uxth	r5, r5
 8014dc4:	42b5      	cmp	r5, r6
 8014dc6:	d044      	beq.n	8014e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8014dc8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8014dcc:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8014dd0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8014dd4:	4282      	cmp	r2, r0
 8014dd6:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8014dda:	d11f      	bne.n	8014e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014ddc:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8014de0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014de4:	459c      	cmp	ip, r3
 8014de6:	d119      	bne.n	8014e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014de8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8014dec:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014df0:	19d8      	adds	r0, r3, r7
 8014df2:	b200      	sxth	r0, r0
 8014df4:	4288      	cmp	r0, r1
 8014df6:	d109      	bne.n	8014e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8014df8:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8014dfc:	4413      	add	r3, r2
 8014dfe:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8014e02:	4629      	mov	r1, r5
 8014e04:	9801      	ldr	r0, [sp, #4]
 8014e06:	f7ff fd2b 	bl	8014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014e0a:	e003      	b.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014e0c:	4411      	add	r1, r2
 8014e0e:	b209      	sxth	r1, r1
 8014e10:	42b9      	cmp	r1, r7
 8014e12:	d0f3      	beq.n	8014dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8014e14:	3d01      	subs	r5, #1
 8014e16:	3c08      	subs	r4, #8
 8014e18:	b2ad      	uxth	r5, r5
 8014e1a:	e7d3      	b.n	8014dc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014e1c:	42b9      	cmp	r1, r7
 8014e1e:	d1f9      	bne.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014e20:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8014e24:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014e28:	4299      	cmp	r1, r3
 8014e2a:	d1f3      	bne.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014e2c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014e30:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014e34:	181f      	adds	r7, r3, r0
 8014e36:	b23f      	sxth	r7, r7
 8014e38:	42ba      	cmp	r2, r7
 8014e3a:	d105      	bne.n	8014e48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8014e3c:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8014e40:	440b      	add	r3, r1
 8014e42:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014e46:	e7dc      	b.n	8014e02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8014e48:	440a      	add	r2, r1
 8014e4a:	b212      	sxth	r2, r2
 8014e4c:	4290      	cmp	r0, r2
 8014e4e:	d1e1      	bne.n	8014e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014e50:	e7f6      	b.n	8014e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8014e52:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8014e56:	2e07      	cmp	r6, #7
 8014e58:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014e5c:	d812      	bhi.n	8014e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8014e5e:	1c75      	adds	r5, r6, #1
 8014e60:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014e64:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8014e68:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8014e6c:	9d01      	ldr	r5, [sp, #4]
 8014e6e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8014e72:	442c      	add	r4, r5
 8014e74:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8014e78:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8014e7c:	8061      	strh	r1, [r4, #2]
 8014e7e:	80a2      	strh	r2, [r4, #4]
 8014e80:	80e3      	strh	r3, [r4, #6]
 8014e82:	e581      	b.n	8014988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014e84:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014e88:	3e01      	subs	r6, #1
 8014e8a:	445c      	add	r4, fp
 8014e8c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8014e90:	f04f 37ff 	mov.w	r7, #4294967295
 8014e94:	2500      	movs	r5, #0
 8014e96:	9305      	str	r3, [sp, #20]
 8014e98:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014e9c:	1e72      	subs	r2, r6, #1
 8014e9e:	9302      	str	r3, [sp, #8]
 8014ea0:	4691      	mov	r9, r2
 8014ea2:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014ea6:	9304      	str	r3, [sp, #16]
 8014ea8:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8014eac:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014eb0:	6818      	ldr	r0, [r3, #0]
 8014eb2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014eb6:	9207      	str	r2, [sp, #28]
 8014eb8:	bf16      	itet	ne
 8014eba:	9905      	ldrne	r1, [sp, #20]
 8014ebc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8014ec0:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8014ec4:	9306      	str	r3, [sp, #24]
 8014ec6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014eca:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8014ece:	fb18 f801 	smulbb	r8, r8, r1
 8014ed2:	6859      	ldr	r1, [r3, #4]
 8014ed4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014ed8:	4671      	mov	r1, lr
 8014eda:	a80c      	add	r0, sp, #48	@ 0x30
 8014edc:	f7fc fa95 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014ee0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8014ee4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014ee8:	f04f 0c08 	mov.w	ip, #8
 8014eec:	9b04      	ldr	r3, [sp, #16]
 8014eee:	9a02      	ldr	r2, [sp, #8]
 8014ef0:	fb10 f001 	smulbb	r0, r0, r1
 8014ef4:	fb02 8803 	mla	r8, r2, r3, r8
 8014ef8:	eba0 0108 	sub.w	r1, r0, r8
 8014efc:	fb90 f0fc 	sdiv	r0, r0, ip
 8014f00:	4288      	cmp	r0, r1
 8014f02:	dc20      	bgt.n	8014f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8014f04:	4551      	cmp	r1, sl
 8014f06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f0a:	da03      	bge.n	8014f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8014f0c:	b1d9      	cbz	r1, 8014f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8014f0e:	468a      	mov	sl, r1
 8014f10:	464f      	mov	r7, r9
 8014f12:	4635      	mov	r5, r6
 8014f14:	f109 39ff 	add.w	r9, r9, #4294967295
 8014f18:	f119 0f02 	cmn.w	r9, #2
 8014f1c:	d1c6      	bne.n	8014eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8014f1e:	4616      	mov	r6, r2
 8014f20:	3201      	adds	r2, #1
 8014f22:	f1a4 0408 	sub.w	r4, r4, #8
 8014f26:	d1b7      	bne.n	8014e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8014f28:	9b01      	ldr	r3, [sp, #4]
 8014f2a:	b2ac      	uxth	r4, r5
 8014f2c:	00ed      	lsls	r5, r5, #3
 8014f2e:	1958      	adds	r0, r3, r5
 8014f30:	1c7b      	adds	r3, r7, #1
 8014f32:	d10b      	bne.n	8014f4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8014f34:	4601      	mov	r1, r0
 8014f36:	9803      	ldr	r0, [sp, #12]
 8014f38:	f7fc fa67 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014f3c:	4621      	mov	r1, r4
 8014f3e:	9801      	ldr	r0, [sp, #4]
 8014f40:	f7ff fc8e 	bl	8014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014f44:	e4b6      	b.n	80148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014f46:	464f      	mov	r7, r9
 8014f48:	4635      	mov	r5, r6
 8014f4a:	e7ed      	b.n	8014f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8014f4c:	9b01      	ldr	r3, [sp, #4]
 8014f4e:	00ff      	lsls	r7, r7, #3
 8014f50:	445d      	add	r5, fp
 8014f52:	19d9      	adds	r1, r3, r7
 8014f54:	445f      	add	r7, fp
 8014f56:	f7fc fa58 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014f5a:	9b03      	ldr	r3, [sp, #12]
 8014f5c:	cb03      	ldmia	r3!, {r0, r1}
 8014f5e:	9b03      	ldr	r3, [sp, #12]
 8014f60:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8014f64:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8014f68:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8014f6c:	6869      	ldr	r1, [r5, #4]
 8014f6e:	c303      	stmia	r3!, {r0, r1}
 8014f70:	e7e4      	b.n	8014f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8014f72:	bf00      	nop

08014f74 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8014f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f78:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8014f7c:	b09b      	sub	sp, #108	@ 0x6c
 8014f7e:	4604      	mov	r4, r0
 8014f80:	4630      	mov	r0, r6
 8014f82:	f7f9 fa72 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f86:	4605      	mov	r5, r0
 8014f88:	b948      	cbnz	r0, 8014f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8014f8a:	6823      	ldr	r3, [r4, #0]
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f90:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014f94:	4798      	blx	r3
 8014f96:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8014f9a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8014f9e:	4bc5      	ldr	r3, [pc, #788]	@ (80152b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d03f      	beq.n	8015026 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8014fa6:	4dc4      	ldr	r5, [pc, #784]	@ (80152b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f7f9 fa5e 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014fae:	4606      	mov	r6, r0
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d138      	bne.n	8015026 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f7ff f9d7 	bl	8014368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014fba:	6823      	ldr	r3, [r4, #0]
 8014fbc:	6829      	ldr	r1, [r5, #0]
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fc2:	686a      	ldr	r2, [r5, #4]
 8014fc4:	4798      	blx	r3
 8014fc6:	802e      	strh	r6, [r5, #0]
 8014fc8:	806e      	strh	r6, [r5, #2]
 8014fca:	80ae      	strh	r6, [r5, #4]
 8014fcc:	80ee      	strh	r6, [r5, #6]
 8014fce:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8014fd2:	4dba      	ldr	r5, [pc, #744]	@ (80152bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8014fd4:	4640      	mov	r0, r8
 8014fd6:	f7ff fbe7 	bl	80147a8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014fda:	882e      	ldrh	r6, [r5, #0]
 8014fdc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8014fe0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014fe4:	4633      	mov	r3, r6
 8014fe6:	42bb      	cmp	r3, r7
 8014fe8:	d224      	bcs.n	8015034 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8014fea:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8014fee:	2907      	cmp	r1, #7
 8014ff0:	d816      	bhi.n	8015020 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8014ff2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014ff6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8014ffa:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8014ffe:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8015002:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8015006:	1c4a      	adds	r2, r1, #1
 8015008:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801500c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8015010:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8015014:	f8a2 a002 	strh.w	sl, [r2, #2]
 8015018:	f8a2 e004 	strh.w	lr, [r2, #4]
 801501c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015020:	3301      	adds	r3, #1
 8015022:	b29b      	uxth	r3, r3
 8015024:	e7df      	b.n	8014fe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8015026:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801502a:	2b00      	cmp	r3, #0
 801502c:	d1cf      	bne.n	8014fce <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801502e:	b01b      	add	sp, #108	@ 0x6c
 8015030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015034:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8015038:	42b3      	cmp	r3, r6
 801503a:	d90c      	bls.n	8015056 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801503c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015040:	6822      	ldr	r2, [r4, #0]
 8015042:	3601      	adds	r6, #1
 8015044:	4620      	mov	r0, r4
 8015046:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8015048:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801504c:	b2b6      	uxth	r6, r6
 801504e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8015052:	47b8      	blx	r7
 8015054:	e7ee      	b.n	8015034 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8015056:	4a9a      	ldr	r2, [pc, #616]	@ (80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8015058:	6813      	ldr	r3, [r2, #0]
 801505a:	4691      	mov	r9, r2
 801505c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8015060:	2b01      	cmp	r3, #1
 8015062:	f040 80e0 	bne.w	8015226 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8015066:	8829      	ldrh	r1, [r5, #0]
 8015068:	2600      	movs	r6, #0
 801506a:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801506e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8015072:	33ae      	adds	r3, #174	@ 0xae
 8015074:	428f      	cmp	r7, r1
 8015076:	f103 0308 	add.w	r3, r3, #8
 801507a:	dd0a      	ble.n	8015092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801507c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8015080:	3101      	adds	r1, #1
 8015082:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8015086:	4402      	add	r2, r0
 8015088:	b212      	sxth	r2, r2
 801508a:	4296      	cmp	r6, r2
 801508c:	bfb8      	it	lt
 801508e:	4616      	movlt	r6, r2
 8015090:	e7f0      	b.n	8015074 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8015092:	4b8c      	ldr	r3, [pc, #560]	@ (80152c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8015094:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8015098:	881b      	ldrh	r3, [r3, #0]
 801509a:	2b0f      	cmp	r3, #15
 801509c:	bf8c      	ite	hi
 801509e:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80150a2:	f04f 0b01 	movls.w	fp, #1
 80150a6:	2300      	movs	r3, #0
 80150a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80150ac:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80150b0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80150b4:	4b82      	ldr	r3, [pc, #520]	@ (80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80150b6:	4438      	add	r0, r7
 80150b8:	b207      	sxth	r7, r0
 80150ba:	6818      	ldr	r0, [r3, #0]
 80150bc:	42b7      	cmp	r7, r6
 80150be:	6803      	ldr	r3, [r0, #0]
 80150c0:	f280 8083 	bge.w	80151ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80150c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80150c8:	4798      	blx	r3
 80150ca:	eb07 030b 	add.w	r3, r7, fp
 80150ce:	4298      	cmp	r0, r3
 80150d0:	da07      	bge.n	80150e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80150d2:	42b0      	cmp	r0, r6
 80150d4:	da05      	bge.n	80150e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80150d6:	4287      	cmp	r7, r0
 80150d8:	dd6c      	ble.n	80151b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80150da:	2f00      	cmp	r7, #0
 80150dc:	dd6a      	ble.n	80151b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80150de:	4630      	mov	r0, r6
 80150e0:	e004      	b.n	80150ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80150e2:	4287      	cmp	r7, r0
 80150e4:	dcfb      	bgt.n	80150de <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80150e6:	42b0      	cmp	r0, r6
 80150e8:	bfa8      	it	ge
 80150ea:	4630      	movge	r0, r6
 80150ec:	4b76      	ldr	r3, [pc, #472]	@ (80152c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80150ee:	1bc0      	subs	r0, r0, r7
 80150f0:	2200      	movs	r2, #0
 80150f2:	f8ad 7016 	strh.w	r7, [sp, #22]
 80150f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150fa:	882f      	ldrh	r7, [r5, #0]
 80150fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015100:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015104:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015108:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801510c:	42bb      	cmp	r3, r7
 801510e:	d9cd      	bls.n	80150ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8015110:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8015114:	ab07      	add	r3, sp, #28
 8015116:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801511a:	6851      	ldr	r1, [r2, #4]
 801511c:	c303      	stmia	r3!, {r0, r1}
 801511e:	a905      	add	r1, sp, #20
 8015120:	a807      	add	r0, sp, #28
 8015122:	f7ff f9f4 	bl	801450e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015126:	2800      	cmp	r0, #0
 8015128:	d04c      	beq.n	80151c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801512a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801512e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015132:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8015136:	4686      	mov	lr, r0
 8015138:	4290      	cmp	r0, r2
 801513a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801513e:	4450      	add	r0, sl
 8015140:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8015144:	bfb8      	it	lt
 8015146:	4696      	movlt	lr, r2
 8015148:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801514c:	4452      	add	r2, sl
 801514e:	b280      	uxth	r0, r0
 8015150:	4299      	cmp	r1, r3
 8015152:	468c      	mov	ip, r1
 8015154:	b292      	uxth	r2, r2
 8015156:	9302      	str	r3, [sp, #8]
 8015158:	bfb8      	it	lt
 801515a:	469c      	movlt	ip, r3
 801515c:	b203      	sxth	r3, r0
 801515e:	fa0f fa82 	sxth.w	sl, r2
 8015162:	f8ad e01c 	strh.w	lr, [sp, #28]
 8015166:	f8ad c01e 	strh.w	ip, [sp, #30]
 801516a:	4553      	cmp	r3, sl
 801516c:	bfb8      	it	lt
 801516e:	4602      	movlt	r2, r0
 8015170:	9b02      	ldr	r3, [sp, #8]
 8015172:	eba2 020e 	sub.w	r2, r2, lr
 8015176:	f8ad 2020 	strh.w	r2, [sp, #32]
 801517a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801517e:	4411      	add	r1, r2
 8015180:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015184:	4413      	add	r3, r2
 8015186:	b289      	uxth	r1, r1
 8015188:	b29b      	uxth	r3, r3
 801518a:	b208      	sxth	r0, r1
 801518c:	b21a      	sxth	r2, r3
 801518e:	4290      	cmp	r0, r2
 8015190:	bfb8      	it	lt
 8015192:	460b      	movlt	r3, r1
 8015194:	eba3 030c 	sub.w	r3, r3, ip
 8015198:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801519c:	a807      	add	r0, sp, #28
 801519e:	f7f9 f964 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 80151a2:	b920      	cbnz	r0, 80151ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80151a4:	6823      	ldr	r3, [r4, #0]
 80151a6:	a907      	add	r1, sp, #28
 80151a8:	4620      	mov	r0, r4
 80151aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151ac:	4798      	blx	r3
 80151ae:	3701      	adds	r7, #1
 80151b0:	b2bf      	uxth	r7, r7
 80151b2:	e7a9      	b.n	8015108 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80151b4:	f8d9 0000 	ldr.w	r0, [r9]
 80151b8:	2101      	movs	r1, #1
 80151ba:	6803      	ldr	r3, [r0, #0]
 80151bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80151c0:	4798      	blx	r3
 80151c2:	e773      	b.n	80150ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80151c4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80151c8:	e7e8      	b.n	801519c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80151ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151cc:	4798      	blx	r3
 80151ce:	4b3f      	ldr	r3, [pc, #252]	@ (80152cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80151d0:	781b      	ldrb	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f43f af2b 	beq.w	801502e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80151d8:	2300      	movs	r3, #0
 80151da:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80151de:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80151e2:	882b      	ldrh	r3, [r5, #0]
 80151e4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80151e8:	42ab      	cmp	r3, r5
 80151ea:	f4bf af20 	bcs.w	801502e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80151ee:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80151f2:	2907      	cmp	r1, #7
 80151f4:	d814      	bhi.n	8015220 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80151f6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80151fa:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80151fe:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8015202:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8015206:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801520a:	1c4a      	adds	r2, r1, #1
 801520c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8015210:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8015214:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8015218:	f8a2 c002 	strh.w	ip, [r2, #2]
 801521c:	8097      	strh	r7, [r2, #4]
 801521e:	80d6      	strh	r6, [r2, #6]
 8015220:	3301      	adds	r3, #1
 8015222:	b29b      	uxth	r3, r3
 8015224:	e7e0      	b.n	80151e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8015226:	2b02      	cmp	r3, #2
 8015228:	f040 8133 	bne.w	8015492 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801522c:	4b28      	ldr	r3, [pc, #160]	@ (80152d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801522e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	2b01      	cmp	r3, #1
 8015236:	f000 8098 	beq.w	801536a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801523a:	882a      	ldrh	r2, [r5, #0]
 801523c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8015240:	3201      	adds	r2, #1
 8015242:	b292      	uxth	r2, r2
 8015244:	2900      	cmp	r1, #0
 8015246:	d0c2      	beq.n	80151ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015248:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801524c:	4694      	mov	ip, r2
 801524e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8015252:	f04f 0900 	mov.w	r9, #0
 8015256:	441e      	add	r6, r3
 8015258:	b236      	sxth	r6, r6
 801525a:	fa1f f38c 	uxth.w	r3, ip
 801525e:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8015262:	4299      	cmp	r1, r3
 8015264:	f240 80be 	bls.w	80153e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8015268:	4427      	add	r7, r4
 801526a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801526e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8015272:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8015276:	4283      	cmp	r3, r0
 8015278:	f340 80a0 	ble.w	80153bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801527c:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8015280:	46e1      	mov	r9, ip
 8015282:	4406      	add	r6, r0
 8015284:	b236      	sxth	r6, r6
 8015286:	429e      	cmp	r6, r3
 8015288:	bfa8      	it	ge
 801528a:	461e      	movge	r6, r3
 801528c:	f10c 0c01 	add.w	ip, ip, #1
 8015290:	e7e3      	b.n	801525a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8015292:	d10a      	bne.n	80152aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8015294:	4562      	cmp	r2, ip
 8015296:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801529a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801529e:	bfb8      	it	lt
 80152a0:	4662      	movlt	r2, ip
 80152a2:	4288      	cmp	r0, r1
 80152a4:	bfb8      	it	lt
 80152a6:	461f      	movlt	r7, r3
 80152a8:	e086      	b.n	80153b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80152aa:	428a      	cmp	r2, r1
 80152ac:	bfb8      	it	lt
 80152ae:	460a      	movlt	r2, r1
 80152b0:	e082      	b.n	80153b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80152b2:	bf00      	nop
 80152b4:	2402daec 	.word	0x2402daec
 80152b8:	2402daf8 	.word	0x2402daf8
 80152bc:	24000080 	.word	0x24000080
 80152c0:	2402daac 	.word	0x2402daac
 80152c4:	2402daa2 	.word	0x2402daa2
 80152c8:	2402daa0 	.word	0x2402daa0
 80152cc:	2402daaa 	.word	0x2402daaa
 80152d0:	2402daa4 	.word	0x2402daa4
 80152d4:	19a1      	adds	r1, r4, r6
 80152d6:	ab07      	add	r3, sp, #28
 80152d8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80152dc:	6849      	ldr	r1, [r1, #4]
 80152de:	c303      	stmia	r3!, {r0, r1}
 80152e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80152e4:	a807      	add	r0, sp, #28
 80152e6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80152ea:	2b13      	cmp	r3, #19
 80152ec:	440b      	add	r3, r1
 80152ee:	bfd8      	it	le
 80152f0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80152f4:	1a9b      	subs	r3, r3, r2
 80152f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80152fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80152fe:	f7ff f84d 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015302:	a807      	add	r0, sp, #28
 8015304:	f7f9 f8b1 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015308:	bb78      	cbnz	r0, 801536a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801530a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801530e:	4426      	add	r6, r4
 8015310:	f8d9 0000 	ldr.w	r0, [r9]
 8015314:	f1bc 0f14 	cmp.w	ip, #20
 8015318:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801531c:	f8d0 e000 	ldr.w	lr, [r0]
 8015320:	bfa8      	it	ge
 8015322:	f04f 0c14 	movge.w	ip, #20
 8015326:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801532a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801532e:	fa1f fc8c 	uxth.w	ip, ip
 8015332:	f8cd c000 	str.w	ip, [sp]
 8015336:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801533a:	47d8      	blx	fp
 801533c:	4683      	mov	fp, r0
 801533e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8015342:	a807      	add	r0, sp, #28
 8015344:	f7ff f810 	bl	8014368 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015348:	6823      	ldr	r3, [r4, #0]
 801534a:	4620      	mov	r0, r4
 801534c:	a907      	add	r1, sp, #28
 801534e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015350:	4798      	blx	r3
 8015352:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8015356:	eba0 000b 	sub.w	r0, r0, fp
 801535a:	b200      	sxth	r0, r0
 801535c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8015360:	b918      	cbnz	r0, 801536a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8015362:	b2b9      	uxth	r1, r7
 8015364:	4650      	mov	r0, sl
 8015366:	f7ff fa7b 	bl	8014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801536a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801536e:	f1bb 0f00 	cmp.w	fp, #0
 8015372:	f43f af2c 	beq.w	80151ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015376:	882b      	ldrh	r3, [r5, #0]
 8015378:	2700      	movs	r7, #0
 801537a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801537e:	3301      	adds	r3, #1
 8015380:	b29b      	uxth	r3, r3
 8015382:	b299      	uxth	r1, r3
 8015384:	00fe      	lsls	r6, r7, #3
 8015386:	458b      	cmp	fp, r1
 8015388:	d9a4      	bls.n	80152d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801538a:	4426      	add	r6, r4
 801538c:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8015390:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8015394:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8015398:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801539c:	4408      	add	r0, r1
 801539e:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80153a2:	4461      	add	r1, ip
 80153a4:	b200      	sxth	r0, r0
 80153a6:	b209      	sxth	r1, r1
 80153a8:	4288      	cmp	r0, r1
 80153aa:	f6bf af72 	bge.w	8015292 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80153ae:	4584      	cmp	ip, r0
 80153b0:	4662      	mov	r2, ip
 80153b2:	461f      	mov	r7, r3
 80153b4:	bfb8      	it	lt
 80153b6:	4602      	movlt	r2, r0
 80153b8:	3301      	adds	r3, #1
 80153ba:	e7e2      	b.n	8015382 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80153bc:	d10e      	bne.n	80153dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80153be:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80153c2:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80153c6:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80153ca:	4473      	add	r3, lr
 80153cc:	b21b      	sxth	r3, r3
 80153ce:	429e      	cmp	r6, r3
 80153d0:	bfa8      	it	ge
 80153d2:	461e      	movge	r6, r3
 80153d4:	4287      	cmp	r7, r0
 80153d6:	bfb8      	it	lt
 80153d8:	46e1      	movlt	r9, ip
 80153da:	e757      	b.n	801528c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80153dc:	4286      	cmp	r6, r0
 80153de:	bfa8      	it	ge
 80153e0:	4606      	movge	r6, r0
 80153e2:	e753      	b.n	801528c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80153e4:	eb0a 0007 	add.w	r0, sl, r7
 80153e8:	4427      	add	r7, r4
 80153ea:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80153ee:	f1bb 0f13 	cmp.w	fp, #19
 80153f2:	bfdc      	itt	le
 80153f4:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80153f8:	445e      	addle	r6, fp
 80153fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80153fe:	bfd8      	it	le
 8015400:	b236      	sxthle	r6, r6
 8015402:	f7f9 f832 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015406:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801540a:	2800      	cmp	r0, #0
 801540c:	f47f af1a 	bne.w	8015244 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8015410:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8015414:	fa1f fb8b 	uxth.w	fp, fp
 8015418:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801541c:	1ab6      	subs	r6, r6, r2
 801541e:	4829      	ldr	r0, [pc, #164]	@ (80154c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8015420:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8015424:	2e14      	cmp	r6, #20
 8015426:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801542a:	6800      	ldr	r0, [r0, #0]
 801542c:	bfa8      	it	ge
 801542e:	2614      	movge	r6, #20
 8015430:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015434:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015438:	b289      	uxth	r1, r1
 801543a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801543e:	b2b6      	uxth	r6, r6
 8015440:	f8d0 c000 	ldr.w	ip, [r0]
 8015444:	b292      	uxth	r2, r2
 8015446:	455e      	cmp	r6, fp
 8015448:	bf94      	ite	ls
 801544a:	9600      	strls	r6, [sp, #0]
 801544c:	f8cd b000 	strhi.w	fp, [sp]
 8015450:	b29b      	uxth	r3, r3
 8015452:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8015456:	47b0      	blx	r6
 8015458:	6823      	ldr	r3, [r4, #0]
 801545a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801545e:	a907      	add	r1, sp, #28
 8015460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015462:	4620      	mov	r0, r4
 8015464:	4798      	blx	r3
 8015466:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801546a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801546e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8015472:	1a5b      	subs	r3, r3, r1
 8015474:	440a      	add	r2, r1
 8015476:	b21b      	sxth	r3, r3
 8015478:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801547c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8015480:	2b00      	cmp	r3, #0
 8015482:	f47f aeda 	bne.w	801523a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8015486:	fa1f f189 	uxth.w	r1, r9
 801548a:	4650      	mov	r0, sl
 801548c:	f7ff f9e8 	bl	8014860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015490:	e6d3      	b.n	801523a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8015492:	882e      	ldrh	r6, [r5, #0]
 8015494:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015498:	42b3      	cmp	r3, r6
 801549a:	f67f ae98 	bls.w	80151ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801549e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80154a2:	ab07      	add	r3, sp, #28
 80154a4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80154a8:	6851      	ldr	r1, [r2, #4]
 80154aa:	c303      	stmia	r3!, {r0, r1}
 80154ac:	a807      	add	r0, sp, #28
 80154ae:	f7f8 ffdc 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 80154b2:	b920      	cbnz	r0, 80154be <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80154b4:	6823      	ldr	r3, [r4, #0]
 80154b6:	a907      	add	r1, sp, #28
 80154b8:	4620      	mov	r0, r4
 80154ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80154bc:	4798      	blx	r3
 80154be:	3601      	adds	r6, #1
 80154c0:	b2b6      	uxth	r6, r6
 80154c2:	e7e7      	b.n	8015494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80154c4:	2402daac 	.word	0x2402daac

080154c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80154c8:	4b03      	ldr	r3, [pc, #12]	@ (80154d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80154ca:	2200      	movs	r2, #0
 80154cc:	801a      	strh	r2, [r3, #0]
 80154ce:	805a      	strh	r2, [r3, #2]
 80154d0:	809a      	strh	r2, [r3, #4]
 80154d2:	80da      	strh	r2, [r3, #6]
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop
 80154d8:	2402daf8 	.word	0x2402daf8

080154dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	b09d      	sub	sp, #116	@ 0x74
 80154e2:	4606      	mov	r6, r0
 80154e4:	4614      	mov	r4, r2
 80154e6:	468a      	mov	sl, r1
 80154e8:	a803      	add	r0, sp, #12
 80154ea:	461d      	mov	r5, r3
 80154ec:	f001 f96c 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 80154f0:	6833      	ldr	r3, [r6, #0]
 80154f2:	4630      	mov	r0, r6
 80154f4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80154f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154fa:	4798      	blx	r3
 80154fc:	6833      	ldr	r3, [r6, #0]
 80154fe:	4607      	mov	r7, r0
 8015500:	4630      	mov	r0, r6
 8015502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015504:	4798      	blx	r3
 8015506:	462a      	mov	r2, r5
 8015508:	2500      	movs	r5, #0
 801550a:	4621      	mov	r1, r4
 801550c:	9000      	str	r0, [sp, #0]
 801550e:	463b      	mov	r3, r7
 8015510:	462c      	mov	r4, r5
 8015512:	46a9      	mov	r9, r5
 8015514:	46a8      	mov	r8, r5
 8015516:	a803      	add	r0, sp, #12
 8015518:	f001 f9a9 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801551c:	2300      	movs	r3, #0
 801551e:	9302      	str	r3, [sp, #8]
 8015520:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015524:	429c      	cmp	r4, r3
 8015526:	d002      	beq.n	801552e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015528:	455c      	cmp	r4, fp
 801552a:	bf18      	it	ne
 801552c:	4625      	movne	r5, r4
 801552e:	ab02      	add	r3, sp, #8
 8015530:	4632      	mov	r2, r6
 8015532:	4651      	mov	r1, sl
 8015534:	a803      	add	r0, sp, #12
 8015536:	f001 fc8f 	bl	8016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801553a:	4604      	mov	r4, r0
 801553c:	b108      	cbz	r0, 8015542 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801553e:	280a      	cmp	r0, #10
 8015540:	d10a      	bne.n	8015558 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015542:	45c1      	cmp	r9, r8
 8015544:	bf38      	it	cc
 8015546:	46c1      	movcc	r9, r8
 8015548:	f04f 0800 	mov.w	r8, #0
 801554c:	2c00      	cmp	r4, #0
 801554e:	d1e5      	bne.n	801551c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015550:	4648      	mov	r0, r9
 8015552:	b01d      	add	sp, #116	@ 0x74
 8015554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015558:	9a02      	ldr	r2, [sp, #8]
 801555a:	2a00      	cmp	r2, #0
 801555c:	d0de      	beq.n	801551c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801555e:	7b57      	ldrb	r7, [r2, #13]
 8015560:	4629      	mov	r1, r5
 8015562:	6833      	ldr	r3, [r6, #0]
 8015564:	007f      	lsls	r7, r7, #1
 8015566:	8894      	ldrh	r4, [r2, #4]
 8015568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801556a:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801556e:	7a97      	ldrb	r7, [r2, #10]
 8015570:	4307      	orrs	r7, r0
 8015572:	4630      	mov	r0, r6
 8015574:	4798      	blx	r3
 8015576:	4438      	add	r0, r7
 8015578:	4480      	add	r8, r0
 801557a:	fa1f f888 	uxth.w	r8, r8
 801557e:	e7e5      	b.n	801554c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015580 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015580:	b508      	push	{r3, lr}
 8015582:	6803      	ldr	r3, [r0, #0]
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	4798      	blx	r3
 8015588:	b128      	cbz	r0, 8015596 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801558a:	7b43      	ldrb	r3, [r0, #13]
 801558c:	7a80      	ldrb	r0, [r0, #10]
 801558e:	005b      	lsls	r3, r3, #1
 8015590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015594:	4318      	orrs	r0, r3
 8015596:	bd08      	pop	{r3, pc}

08015598 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015598:	b40e      	push	{r1, r2, r3}
 801559a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801559c:	b09e      	sub	sp, #120	@ 0x78
 801559e:	4605      	mov	r5, r0
 80155a0:	ab23      	add	r3, sp, #140	@ 0x8c
 80155a2:	a805      	add	r0, sp, #20
 80155a4:	f853 4b04 	ldr.w	r4, [r3], #4
 80155a8:	9303      	str	r3, [sp, #12]
 80155aa:	f001 f90d 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 80155ae:	682b      	ldr	r3, [r5, #0]
 80155b0:	4628      	mov	r0, r5
 80155b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155b4:	4798      	blx	r3
 80155b6:	682b      	ldr	r3, [r5, #0]
 80155b8:	4606      	mov	r6, r0
 80155ba:	4628      	mov	r0, r5
 80155bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80155be:	4798      	blx	r3
 80155c0:	4633      	mov	r3, r6
 80155c2:	4621      	mov	r1, r4
 80155c4:	ae1e      	add	r6, sp, #120	@ 0x78
 80155c6:	2400      	movs	r4, #0
 80155c8:	9000      	str	r0, [sp, #0]
 80155ca:	9a03      	ldr	r2, [sp, #12]
 80155cc:	a805      	add	r0, sp, #20
 80155ce:	f001 f94e 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80155d2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80155d6:	462a      	mov	r2, r5
 80155d8:	4633      	mov	r3, r6
 80155da:	4621      	mov	r1, r4
 80155dc:	a805      	add	r0, sp, #20
 80155de:	f001 fc3b 	bl	8016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80155e2:	b300      	cbz	r0, 8015626 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80155e4:	280a      	cmp	r0, #10
 80155e6:	d01a      	beq.n	801561e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80155e8:	9f04      	ldr	r7, [sp, #16]
 80155ea:	b1c7      	cbz	r7, 801561e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80155ec:	7b78      	ldrb	r0, [r7, #13]
 80155ee:	7a3b      	ldrb	r3, [r7, #8]
 80155f0:	00c1      	lsls	r1, r0, #3
 80155f2:	88ea      	ldrh	r2, [r5, #6]
 80155f4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80155f8:	4319      	orrs	r1, r3
 80155fa:	0643      	lsls	r3, r0, #25
 80155fc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015600:	bf48      	it	mi
 8015602:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8015606:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801560a:	bf48      	it	mi
 801560c:	b219      	sxthmi	r1, r3
 801560e:	79fb      	ldrb	r3, [r7, #7]
 8015610:	4303      	orrs	r3, r0
 8015612:	4413      	add	r3, r2
 8015614:	1a5b      	subs	r3, r3, r1
 8015616:	b21b      	sxth	r3, r3
 8015618:	429c      	cmp	r4, r3
 801561a:	bfb8      	it	lt
 801561c:	461c      	movlt	r4, r3
 801561e:	4633      	mov	r3, r6
 8015620:	462a      	mov	r2, r5
 8015622:	2100      	movs	r1, #0
 8015624:	e7da      	b.n	80155dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8015626:	b2a0      	uxth	r0, r4
 8015628:	b01e      	add	sp, #120	@ 0x78
 801562a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801562e:	b003      	add	sp, #12
 8015630:	4770      	bx	lr

08015632 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8015632:	7a43      	ldrb	r3, [r0, #9]
 8015634:	8880      	ldrh	r0, [r0, #4]
 8015636:	4418      	add	r0, r3
 8015638:	b280      	uxth	r0, r0
 801563a:	4770      	bx	lr

0801563c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801563c:	6803      	ldr	r3, [r0, #0]
 801563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015640:	4718      	bx	r3

08015642 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015642:	b40e      	push	{r1, r2, r3}
 8015644:	b570      	push	{r4, r5, r6, lr}
 8015646:	b09d      	sub	sp, #116	@ 0x74
 8015648:	4604      	mov	r4, r0
 801564a:	ab21      	add	r3, sp, #132	@ 0x84
 801564c:	a803      	add	r0, sp, #12
 801564e:	f853 5b04 	ldr.w	r5, [r3], #4
 8015652:	9302      	str	r3, [sp, #8]
 8015654:	f001 f8b8 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 8015658:	6823      	ldr	r3, [r4, #0]
 801565a:	4620      	mov	r0, r4
 801565c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801565e:	4798      	blx	r3
 8015660:	6823      	ldr	r3, [r4, #0]
 8015662:	4606      	mov	r6, r0
 8015664:	4620      	mov	r0, r4
 8015666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015668:	2401      	movs	r4, #1
 801566a:	4798      	blx	r3
 801566c:	4633      	mov	r3, r6
 801566e:	9000      	str	r0, [sp, #0]
 8015670:	4629      	mov	r1, r5
 8015672:	9a02      	ldr	r2, [sp, #8]
 8015674:	a803      	add	r0, sp, #12
 8015676:	f001 f8fa 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801567a:	a803      	add	r0, sp, #12
 801567c:	f001 fcb8 	bl	8016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015680:	b2a3      	uxth	r3, r4
 8015682:	b138      	cbz	r0, 8015694 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015684:	280a      	cmp	r0, #10
 8015686:	a803      	add	r0, sp, #12
 8015688:	bf04      	itt	eq
 801568a:	3301      	addeq	r3, #1
 801568c:	b21c      	sxtheq	r4, r3
 801568e:	f001 fcaf 	bl	8016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015692:	e7f5      	b.n	8015680 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015694:	4618      	mov	r0, r3
 8015696:	b01d      	add	sp, #116	@ 0x74
 8015698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801569c:	b003      	add	sp, #12
 801569e:	4770      	bx	lr

080156a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80156a0:	b40e      	push	{r1, r2, r3}
 80156a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156a4:	b09e      	sub	sp, #120	@ 0x78
 80156a6:	4604      	mov	r4, r0
 80156a8:	ab23      	add	r3, sp, #140	@ 0x8c
 80156aa:	a805      	add	r0, sp, #20
 80156ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80156b0:	9303      	str	r3, [sp, #12]
 80156b2:	f001 f889 	bl	80167c8 <_ZN8touchgfx12TextProviderC1Ev>
 80156b6:	6823      	ldr	r3, [r4, #0]
 80156b8:	4620      	mov	r0, r4
 80156ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156bc:	4798      	blx	r3
 80156be:	6823      	ldr	r3, [r4, #0]
 80156c0:	4606      	mov	r6, r0
 80156c2:	4620      	mov	r0, r4
 80156c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80156c6:	4798      	blx	r3
 80156c8:	4633      	mov	r3, r6
 80156ca:	4629      	mov	r1, r5
 80156cc:	9000      	str	r0, [sp, #0]
 80156ce:	9a03      	ldr	r2, [sp, #12]
 80156d0:	a805      	add	r0, sp, #20
 80156d2:	f001 f8cc 	bl	801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80156d6:	ad1e      	add	r5, sp, #120	@ 0x78
 80156d8:	2100      	movs	r1, #0
 80156da:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80156de:	4622      	mov	r2, r4
 80156e0:	a805      	add	r0, sp, #20
 80156e2:	f845 1d68 	str.w	r1, [r5, #-104]!
 80156e6:	462b      	mov	r3, r5
 80156e8:	f001 fbb6 	bl	8016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80156ec:	b1d8      	cbz	r0, 8015726 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80156ee:	280a      	cmp	r0, #10
 80156f0:	d012      	beq.n	8015718 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80156f2:	9804      	ldr	r0, [sp, #16]
 80156f4:	b180      	cbz	r0, 8015718 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80156f6:	7b47      	ldrb	r7, [r0, #13]
 80156f8:	88e2      	ldrh	r2, [r4, #6]
 80156fa:	00fb      	lsls	r3, r7, #3
 80156fc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8015700:	7a03      	ldrb	r3, [r0, #8]
 8015702:	430b      	orrs	r3, r1
 8015704:	0679      	lsls	r1, r7, #25
 8015706:	bf44      	itt	mi
 8015708:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801570c:	b21b      	sxthmi	r3, r3
 801570e:	1ad3      	subs	r3, r2, r3
 8015710:	b21b      	sxth	r3, r3
 8015712:	429e      	cmp	r6, r3
 8015714:	bfa8      	it	ge
 8015716:	461e      	movge	r6, r3
 8015718:	462b      	mov	r3, r5
 801571a:	4622      	mov	r2, r4
 801571c:	2100      	movs	r1, #0
 801571e:	a805      	add	r0, sp, #20
 8015720:	f001 fb9a 	bl	8016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015724:	e7e2      	b.n	80156ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8015726:	4630      	mov	r0, r6
 8015728:	b01e      	add	sp, #120	@ 0x78
 801572a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801572e:	b003      	add	sp, #12
 8015730:	4770      	bx	lr

08015732 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015732:	b513      	push	{r0, r1, r4, lr}
 8015734:	6803      	ldr	r3, [r0, #0]
 8015736:	2400      	movs	r4, #0
 8015738:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801573c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015740:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015744:	4669      	mov	r1, sp
 8015746:	691b      	ldr	r3, [r3, #16]
 8015748:	9400      	str	r4, [sp, #0]
 801574a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801574e:	4798      	blx	r3
 8015750:	b002      	add	sp, #8
 8015752:	bd10      	pop	{r4, pc}

08015754 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015754:	b538      	push	{r3, r4, r5, lr}
 8015756:	680b      	ldr	r3, [r1, #0]
 8015758:	460c      	mov	r4, r1
 801575a:	4605      	mov	r5, r0
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	4798      	blx	r3
 8015760:	6823      	ldr	r3, [r4, #0]
 8015762:	4620      	mov	r0, r4
 8015764:	4629      	mov	r1, r5
 8015766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015768:	4798      	blx	r3
 801576a:	4628      	mov	r0, r5
 801576c:	bd38      	pop	{r3, r4, r5, pc}

0801576e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801576e:	b410      	push	{r4}
 8015770:	880a      	ldrh	r2, [r1, #0]
 8015772:	8884      	ldrh	r4, [r0, #4]
 8015774:	4422      	add	r2, r4
 8015776:	800a      	strh	r2, [r1, #0]
 8015778:	884a      	ldrh	r2, [r1, #2]
 801577a:	88c4      	ldrh	r4, [r0, #6]
 801577c:	4422      	add	r2, r4
 801577e:	804a      	strh	r2, [r1, #2]
 8015780:	6940      	ldr	r0, [r0, #20]
 8015782:	b120      	cbz	r0, 801578e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015784:	6803      	ldr	r3, [r0, #0]
 8015786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801578c:	4718      	bx	r3
 801578e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015792:	4770      	bx	lr

08015794 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015794:	b570      	push	{r4, r5, r6, lr}
 8015796:	8882      	ldrh	r2, [r0, #4]
 8015798:	460c      	mov	r4, r1
 801579a:	880b      	ldrh	r3, [r1, #0]
 801579c:	4605      	mov	r5, r0
 801579e:	4413      	add	r3, r2
 80157a0:	800b      	strh	r3, [r1, #0]
 80157a2:	884b      	ldrh	r3, [r1, #2]
 80157a4:	88c2      	ldrh	r2, [r0, #6]
 80157a6:	4413      	add	r3, r2
 80157a8:	804b      	strh	r3, [r1, #2]
 80157aa:	1d01      	adds	r1, r0, #4
 80157ac:	4620      	mov	r0, r4
 80157ae:	f7f8 fe19 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 80157b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	dd0b      	ble.n	80157d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80157ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	dd07      	ble.n	80157d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80157c2:	6968      	ldr	r0, [r5, #20]
 80157c4:	b128      	cbz	r0, 80157d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80157c6:	6803      	ldr	r3, [r0, #0]
 80157c8:	4621      	mov	r1, r4
 80157ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157d0:	4718      	bx	r3
 80157d2:	bd70      	pop	{r4, r5, r6, pc}

080157d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	8882      	ldrh	r2, [r0, #4]
 80157d8:	460c      	mov	r4, r1
 80157da:	880b      	ldrh	r3, [r1, #0]
 80157dc:	4605      	mov	r5, r0
 80157de:	4413      	add	r3, r2
 80157e0:	800b      	strh	r3, [r1, #0]
 80157e2:	884b      	ldrh	r3, [r1, #2]
 80157e4:	88c2      	ldrh	r2, [r0, #6]
 80157e6:	4413      	add	r3, r2
 80157e8:	804b      	strh	r3, [r1, #2]
 80157ea:	1d01      	adds	r1, r0, #4
 80157ec:	4620      	mov	r0, r4
 80157ee:	f7f8 fdf9 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 80157f2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	dd19      	ble.n	801582e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80157fa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	dd15      	ble.n	801582e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015802:	6968      	ldr	r0, [r5, #20]
 8015804:	b128      	cbz	r0, 8015812 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015806:	6803      	ldr	r3, [r0, #0]
 8015808:	4621      	mov	r1, r4
 801580a:	691b      	ldr	r3, [r3, #16]
 801580c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015810:	4718      	bx	r3
 8015812:	4b07      	ldr	r3, [pc, #28]	@ (8015830 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	3304      	adds	r3, #4
 8015818:	429d      	cmp	r5, r3
 801581a:	d108      	bne.n	801582e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801581c:	f7fe ff10 	bl	8014640 <_ZN8touchgfx11Application11getInstanceEv>
 8015820:	6803      	ldr	r3, [r0, #0]
 8015822:	6821      	ldr	r1, [r4, #0]
 8015824:	6862      	ldr	r2, [r4, #4]
 8015826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801582c:	4718      	bx	r3
 801582e:	bd70      	pop	{r4, r5, r6, pc}
 8015830:	2402daf0 	.word	0x2402daf0

08015834 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015834:	b570      	push	{r4, r5, r6, lr}
 8015836:	4604      	mov	r4, r0
 8015838:	4616      	mov	r6, r2
 801583a:	460d      	mov	r5, r1
 801583c:	b901      	cbnz	r1, 8015840 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801583e:	b192      	cbz	r2, 8015866 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015840:	6823      	ldr	r3, [r4, #0]
 8015842:	4620      	mov	r0, r4
 8015844:	699b      	ldr	r3, [r3, #24]
 8015846:	4798      	blx	r3
 8015848:	88e2      	ldrh	r2, [r4, #6]
 801584a:	88a1      	ldrh	r1, [r4, #4]
 801584c:	4620      	mov	r0, r4
 801584e:	4432      	add	r2, r6
 8015850:	4429      	add	r1, r5
 8015852:	b212      	sxth	r2, r2
 8015854:	b209      	sxth	r1, r1
 8015856:	f7ee f95e 	bl	8003b16 <_ZN8touchgfx8Drawable5setXYEss>
 801585a:	6823      	ldr	r3, [r4, #0]
 801585c:	4620      	mov	r0, r4
 801585e:	699b      	ldr	r3, [r3, #24]
 8015860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015864:	4718      	bx	r3
 8015866:	bd70      	pop	{r4, r5, r6, pc}

08015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015868:	b510      	push	{r4, lr}
 801586a:	2300      	movs	r3, #0
 801586c:	4604      	mov	r4, r0
 801586e:	4608      	mov	r0, r1
 8015870:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015874:	8023      	strh	r3, [r4, #0]
 8015876:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801587a:	8063      	strh	r3, [r4, #2]
 801587c:	6803      	ldr	r3, [r0, #0]
 801587e:	80a1      	strh	r1, [r4, #4]
 8015880:	4621      	mov	r1, r4
 8015882:	80e2      	strh	r2, [r4, #6]
 8015884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015886:	4798      	blx	r3
 8015888:	4620      	mov	r0, r4
 801588a:	bd10      	pop	{r4, pc}

0801588c <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801588c:	4770      	bx	lr

0801588e <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801588e:	b510      	push	{r4, lr}
 8015890:	4604      	mov	r4, r0
 8015892:	211c      	movs	r1, #28
 8015894:	f00c fd8a 	bl	80223ac <_ZdlPvj>
 8015898:	4620      	mov	r0, r4
 801589a:	bd10      	pop	{r4, pc}

0801589c <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801589c:	4a04      	ldr	r2, [pc, #16]	@ (80158b0 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801589e:	6002      	str	r2, [r0, #0]
 80158a0:	2200      	movs	r2, #0
 80158a2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80158a6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80158aa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80158ae:	4770      	bx	lr
 80158b0:	08025a8c 	.word	0x08025a8c

080158b4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 80158b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b8:	4604      	mov	r4, r0
 80158ba:	b087      	sub	sp, #28
 80158bc:	4696      	mov	lr, r2
 80158be:	6880      	ldr	r0, [r0, #8]
 80158c0:	8b22      	ldrh	r2, [r4, #24]
 80158c2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80158c6:	9105      	str	r1, [sp, #20]
 80158c8:	1c51      	adds	r1, r2, #1
 80158ca:	8321      	strh	r1, [r4, #24]
 80158cc:	2101      	movs	r1, #1
 80158ce:	5481      	strb	r1, [r0, r2]
 80158d0:	4689      	mov	r9, r1
 80158d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158d6:	8b60      	ldrh	r0, [r4, #26]
 80158d8:	ee06 2a90 	vmov	s13, r2
 80158dc:	68e2      	ldr	r2, [r4, #12]
 80158de:	1845      	adds	r5, r0, r1
 80158e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80158e4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80158e8:	8365      	strh	r5, [r4, #26]
 80158ea:	edc2 6a00 	vstr	s13, [r2]
 80158ee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80158f2:	8b60      	ldrh	r0, [r4, #26]
 80158f4:	ee07 2a10 	vmov	s14, r2
 80158f8:	68e2      	ldr	r2, [r4, #12]
 80158fa:	1845      	adds	r5, r0, r1
 80158fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015900:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8015904:	8365      	strh	r5, [r4, #26]
 8015906:	1d18      	adds	r0, r3, #4
 8015908:	460d      	mov	r5, r1
 801590a:	ed82 7a00 	vstr	s14, [r2]
 801590e:	f8be 2000 	ldrh.w	r2, [lr]
 8015912:	9203      	str	r2, [sp, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	4613      	mov	r3, r2
 8015918:	4694      	mov	ip, r2
 801591a:	9201      	str	r2, [sp, #4]
 801591c:	9202      	str	r2, [sp, #8]
 801591e:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8015922:	9e05      	ldr	r6, [sp, #20]
 8015924:	f108 0701 	add.w	r7, r8, #1
 8015928:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801592c:	428e      	cmp	r6, r1
 801592e:	b2bf      	uxth	r7, r7
 8015930:	eb0a 0b08 	add.w	fp, sl, r8
 8015934:	f340 80b6 	ble.w	8015aa4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8015938:	9b03      	ldr	r3, [sp, #12]
 801593a:	f9b0 c000 	ldrsh.w	ip, [r0]
 801593e:	fa43 fb05 	asr.w	fp, r3, r5
 8015942:	f00b 0b01 	and.w	fp, fp, #1
 8015946:	fa5f f38b 	uxtb.w	r3, fp
 801594a:	9304      	str	r3, [sp, #16]
 801594c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015950:	f1bb 0f00 	cmp.w	fp, #0
 8015954:	d057      	beq.n	8015a06 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8015956:	ee07 ca90 	vmov	s15, ip
 801595a:	8327      	strh	r7, [r4, #24]
 801595c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015960:	ee07 3a90 	vmov	s15, r3
 8015964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015968:	f1b9 0f00 	cmp.w	r9, #0
 801596c:	d028      	beq.n	80159c0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801596e:	f04f 0602 	mov.w	r6, #2
 8015972:	f80a 6008 	strb.w	r6, [sl, r8]
 8015976:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801597a:	68e7      	ldr	r7, [r4, #12]
 801597c:	f108 0901 	add.w	r9, r8, #1
 8015980:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015984:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015988:	edc7 5a00 	vstr	s11, [r7]
 801598c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015990:	68e7      	ldr	r7, [r4, #12]
 8015992:	f108 0901 	add.w	r9, r8, #1
 8015996:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801599a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801599e:	edc7 7a00 	vstr	s15, [r7]
 80159a2:	3501      	adds	r5, #1
 80159a4:	2d10      	cmp	r5, #16
 80159a6:	d106      	bne.n	80159b6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 80159a8:	9d02      	ldr	r5, [sp, #8]
 80159aa:	3501      	adds	r5, #1
 80159ac:	9502      	str	r5, [sp, #8]
 80159ae:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 80159b2:	9503      	str	r5, [sp, #12]
 80159b4:	2500      	movs	r5, #0
 80159b6:	3101      	adds	r1, #1
 80159b8:	3004      	adds	r0, #4
 80159ba:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80159be:	e7ae      	b.n	801591e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 80159c0:	f04f 0605 	mov.w	r6, #5
 80159c4:	ed9d 5a01 	vldr	s10, [sp, #4]
 80159c8:	f80a 6008 	strb.w	r6, [sl, r8]
 80159cc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80159d0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80159d4:	68e7      	ldr	r7, [r4, #12]
 80159d6:	f108 0901 	add.w	r9, r8, #1
 80159da:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80159de:	f8a4 901a 	strh.w	r9, [r4, #26]
 80159e2:	ed87 5a00 	vstr	s10, [r7]
 80159e6:	ee05 2a10 	vmov	s10, r2
 80159ea:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80159ee:	68e7      	ldr	r7, [r4, #12]
 80159f0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80159f4:	f108 0901 	add.w	r9, r8, #1
 80159f8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80159fc:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015a00:	ed87 5a00 	vstr	s10, [r7]
 8015a04:	e7b7      	b.n	8015976 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8015a06:	f1b9 0f00 	cmp.w	r9, #0
 8015a0a:	d147      	bne.n	8015a9c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8015a0c:	f04f 0605 	mov.w	r6, #5
 8015a10:	eddd 7a01 	vldr	s15, [sp, #4]
 8015a14:	8327      	strh	r7, [r4, #24]
 8015a16:	f80a 6008 	strb.w	r6, [sl, r8]
 8015a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a1e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015a22:	68e7      	ldr	r7, [r4, #12]
 8015a24:	f108 0901 	add.w	r9, r8, #1
 8015a28:	9e01      	ldr	r6, [sp, #4]
 8015a2a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015a2e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015a32:	4466      	add	r6, ip
 8015a34:	edc7 7a00 	vstr	s15, [r7]
 8015a38:	ee07 2a90 	vmov	s15, r2
 8015a3c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015a40:	441a      	add	r2, r3
 8015a42:	68e7      	ldr	r7, [r4, #12]
 8015a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a48:	f108 0901 	add.w	r9, r8, #1
 8015a4c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015a50:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015a54:	edc7 7a00 	vstr	s15, [r7]
 8015a58:	ee07 6a90 	vmov	s15, r6
 8015a5c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a64:	68e7      	ldr	r7, [r4, #12]
 8015a66:	f108 0901 	add.w	r9, r8, #1
 8015a6a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015a6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015a72:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015a76:	edc7 7a00 	vstr	s15, [r7]
 8015a7a:	ee07 2a90 	vmov	s15, r2
 8015a7e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a86:	68e7      	ldr	r7, [r4, #12]
 8015a88:	f108 0901 	add.w	r9, r8, #1
 8015a8c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015a90:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015a94:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015a98:	edc7 7a00 	vstr	s15, [r7]
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	f8cd c004 	str.w	ip, [sp, #4]
 8015aa2:	e77e      	b.n	80159a2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8015aa4:	f1b9 0f00 	cmp.w	r9, #0
 8015aa8:	d028      	beq.n	8015afc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8015aaa:	ee07 ca90 	vmov	s15, ip
 8015aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ab2:	eef4 6a67 	vcmp.f32	s13, s15
 8015ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aba:	d108      	bne.n	8015ace <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8015abc:	ee07 3a90 	vmov	s15, r3
 8015ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ac4:	eeb4 7a67 	vcmp.f32	s14, s15
 8015ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015acc:	d016      	beq.n	8015afc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8015ace:	2302      	movs	r3, #2
 8015ad0:	8327      	strh	r7, [r4, #24]
 8015ad2:	f88b 3000 	strb.w	r3, [fp]
 8015ad6:	8b62      	ldrh	r2, [r4, #26]
 8015ad8:	68e3      	ldr	r3, [r4, #12]
 8015ada:	1c51      	adds	r1, r2, #1
 8015adc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015ae0:	8361      	strh	r1, [r4, #26]
 8015ae2:	edc3 6a00 	vstr	s13, [r3]
 8015ae6:	8b62      	ldrh	r2, [r4, #26]
 8015ae8:	68e3      	ldr	r3, [r4, #12]
 8015aea:	1c51      	adds	r1, r2, #1
 8015aec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015af0:	8361      	strh	r1, [r4, #26]
 8015af2:	ed83 7a00 	vstr	s14, [r3]
 8015af6:	b007      	add	sp, #28
 8015af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015afc:	2305      	movs	r3, #5
 8015afe:	eddd 7a01 	vldr	s15, [sp, #4]
 8015b02:	8327      	strh	r7, [r4, #24]
 8015b04:	f88b 3000 	strb.w	r3, [fp]
 8015b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b0c:	8b61      	ldrh	r1, [r4, #26]
 8015b0e:	68e3      	ldr	r3, [r4, #12]
 8015b10:	1c4d      	adds	r5, r1, #1
 8015b12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015b16:	8365      	strh	r5, [r4, #26]
 8015b18:	edc3 7a00 	vstr	s15, [r3]
 8015b1c:	ee07 2a90 	vmov	s15, r2
 8015b20:	8b61      	ldrh	r1, [r4, #26]
 8015b22:	68e3      	ldr	r3, [r4, #12]
 8015b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b28:	1c4d      	adds	r5, r1, #1
 8015b2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015b2e:	8365      	strh	r5, [r4, #26]
 8015b30:	edc3 7a00 	vstr	s15, [r3]
 8015b34:	e7cf      	b.n	8015ad6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08015b38 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8015b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	b08e      	sub	sp, #56	@ 0x38
 8015b40:	4699      	mov	r9, r3
 8015b42:	4688      	mov	r8, r1
 8015b44:	4615      	mov	r5, r2
 8015b46:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8015b48:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8015b4c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015b4e:	f7ed f8dd 	bl	8002d0c <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8015b52:	6060      	str	r0, [r4, #4]
 8015b54:	f1b9 0f00 	cmp.w	r9, #0
 8015b58:	f000 80e8 	beq.w	8015d2c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	f000 80e5 	beq.w	8015d2c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015b62:	a805      	add	r0, sp, #20
 8015b64:	f000 f8f9 	bl	8015d5a <_ZN8touchgfx9Matrix3x3C1Ev>
 8015b68:	6833      	ldr	r3, [r6, #0]
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015b6e:	4798      	blx	r3
 8015b70:	a805      	add	r0, sp, #20
 8015b72:	eef0 0a40 	vmov.f32	s1, s0
 8015b76:	f000 f8f4 	bl	8015d62 <_ZN8touchgfx9Matrix3x35scaleEff>
 8015b7a:	6860      	ldr	r0, [r4, #4]
 8015b7c:	f1ba 0f03 	cmp.w	sl, #3
 8015b80:	d83b      	bhi.n	8015bfa <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8015b82:	e8df f00a 	tbb	[pc, sl]
 8015b86:	1002      	.short	0x1002
 8015b88:	9f71      	.short	0x9f71
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	462a      	mov	r2, r5
 8015b8e:	4641      	mov	r1, r8
 8015b90:	689b      	ldr	r3, [r3, #8]
 8015b92:	4798      	blx	r3
 8015b94:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015b98:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015b9c:	ee07 7a90 	vmov	s15, r7
 8015ba0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015ba4:	e026      	b.n	8015bf4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8015ba6:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8015baa:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015bae:	8869      	ldrh	r1, [r5, #2]
 8015bb0:	1a9b      	subs	r3, r3, r2
 8015bb2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015bb6:	aa03      	add	r2, sp, #12
 8015bb8:	1a5b      	subs	r3, r3, r1
 8015bba:	4641      	mov	r1, r8
 8015bbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015bc0:	882b      	ldrh	r3, [r5, #0]
 8015bc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015bc6:	88ab      	ldrh	r3, [r5, #4]
 8015bc8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015bcc:	6803      	ldr	r3, [r0, #0]
 8015bce:	689b      	ldr	r3, [r3, #8]
 8015bd0:	4798      	blx	r3
 8015bd2:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8015d34 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8015bd6:	a805      	add	r0, sp, #20
 8015bd8:	f000 f8e8 	bl	8015dac <_ZN8touchgfx9Matrix3x36rotateEf>
 8015bdc:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015be0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015be2:	ee07 7a90 	vmov	s15, r7
 8015be6:	1a9b      	subs	r3, r3, r2
 8015be8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015bec:	ee00 3a10 	vmov	s0, r3
 8015bf0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015bf4:	a805      	add	r0, sp, #20
 8015bf6:	f000 f927 	bl	8015e48 <_ZN8touchgfx9Matrix3x39translateEff>
 8015bfa:	6860      	ldr	r0, [r4, #4]
 8015bfc:	a905      	add	r1, sp, #20
 8015bfe:	2500      	movs	r5, #0
 8015c00:	f109 0602 	add.w	r6, r9, #2
 8015c04:	6803      	ldr	r3, [r0, #0]
 8015c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015c08:	4798      	blx	r3
 8015c0a:	6860      	ldr	r0, [r4, #4]
 8015c0c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015c0e:	6803      	ldr	r3, [r0, #0]
 8015c10:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8015c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c16:	4798      	blx	r3
 8015c18:	6860      	ldr	r0, [r4, #4]
 8015c1a:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8015c1e:	6803      	ldr	r3, [r0, #0]
 8015c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c22:	4798      	blx	r3
 8015c24:	6860      	ldr	r0, [r4, #4]
 8015c26:	2102      	movs	r1, #2
 8015c28:	6803      	ldr	r3, [r0, #0]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	4798      	blx	r3
 8015c2e:	f8b9 7000 	ldrh.w	r7, [r9]
 8015c32:	f104 0310 	add.w	r3, r4, #16
 8015c36:	61a5      	str	r5, [r4, #24]
 8015c38:	f104 0208 	add.w	r2, r4, #8
 8015c3c:	f104 0114 	add.w	r1, r4, #20
 8015c40:	f104 000c 	add.w	r0, r4, #12
 8015c44:	f7f0 fe42 	bl	80068cc <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8015c48:	42af      	cmp	r7, r5
 8015c4a:	dd60      	ble.n	8015d0e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8015c4c:	8831      	ldrh	r1, [r6, #0]
 8015c4e:	1cb2      	adds	r2, r6, #2
 8015c50:	4620      	mov	r0, r4
 8015c52:	3501      	adds	r5, #1
 8015c54:	f101 030f 	add.w	r3, r1, #15
 8015c58:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8015c5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015c60:	f7ff fe28 	bl	80158b4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8015c64:	4606      	mov	r6, r0
 8015c66:	e7ef      	b.n	8015c48 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8015c68:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015c6c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015c70:	8829      	ldrh	r1, [r5, #0]
 8015c72:	1a9b      	subs	r3, r3, r2
 8015c74:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015c78:	aa03      	add	r2, sp, #12
 8015c7a:	1a5b      	subs	r3, r3, r1
 8015c7c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015c80:	886d      	ldrh	r5, [r5, #2]
 8015c82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015c86:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015c8a:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015c8e:	1a5b      	subs	r3, r3, r1
 8015c90:	4641      	mov	r1, r8
 8015c92:	1b5b      	subs	r3, r3, r5
 8015c94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015c98:	6803      	ldr	r3, [r0, #0]
 8015c9a:	689b      	ldr	r3, [r3, #8]
 8015c9c:	4798      	blx	r3
 8015c9e:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8015d38 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8015ca2:	a805      	add	r0, sp, #20
 8015ca4:	f000 f882 	bl	8015dac <_ZN8touchgfx9Matrix3x36rotateEf>
 8015ca8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015cac:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015cae:	1a9b      	subs	r3, r3, r2
 8015cb0:	ee00 3a90 	vmov	s1, r3
 8015cb4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015cb8:	1bdb      	subs	r3, r3, r7
 8015cba:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015cbe:	ee00 3a10 	vmov	s0, r3
 8015cc2:	e795      	b.n	8015bf0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8015cc4:	886b      	ldrh	r3, [r5, #2]
 8015cc6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015cca:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015cce:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015cd2:	8829      	ldrh	r1, [r5, #0]
 8015cd4:	1a9b      	subs	r3, r3, r2
 8015cd6:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015cda:	aa03      	add	r2, sp, #12
 8015cdc:	1a5b      	subs	r3, r3, r1
 8015cde:	4641      	mov	r1, r8
 8015ce0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015ce4:	88eb      	ldrh	r3, [r5, #6]
 8015ce6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015cea:	6803      	ldr	r3, [r0, #0]
 8015cec:	689b      	ldr	r3, [r3, #8]
 8015cee:	4798      	blx	r3
 8015cf0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8015d3c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8015cf4:	a805      	add	r0, sp, #20
 8015cf6:	f000 f859 	bl	8015dac <_ZN8touchgfx9Matrix3x36rotateEf>
 8015cfa:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015cfe:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015d02:	1bdb      	subs	r3, r3, r7
 8015d04:	ee00 3a90 	vmov	s1, r3
 8015d08:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015d0c:	e748      	b.n	8015ba0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8015d0e:	6860      	ldr	r0, [r4, #4]
 8015d10:	2100      	movs	r1, #0
 8015d12:	8b22      	ldrh	r2, [r4, #24]
 8015d14:	6803      	ldr	r3, [r0, #0]
 8015d16:	9101      	str	r1, [sp, #4]
 8015d18:	8b61      	ldrh	r1, [r4, #26]
 8015d1a:	9100      	str	r1, [sp, #0]
 8015d1c:	6a1d      	ldr	r5, [r3, #32]
 8015d1e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8015d22:	47a8      	blx	r5
 8015d24:	6860      	ldr	r0, [r4, #4]
 8015d26:	6803      	ldr	r3, [r0, #0]
 8015d28:	69db      	ldr	r3, [r3, #28]
 8015d2a:	4798      	blx	r3
 8015d2c:	b00e      	add	sp, #56	@ 0x38
 8015d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d32:	bf00      	nop
 8015d34:	42b40000 	.word	0x42b40000
 8015d38:	43340000 	.word	0x43340000
 8015d3c:	43870000 	.word	0x43870000

08015d40 <_ZN8touchgfx9Matrix3x35resetEv>:
 8015d40:	2300      	movs	r3, #0
 8015d42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8015d46:	6043      	str	r3, [r0, #4]
 8015d48:	6002      	str	r2, [r0, #0]
 8015d4a:	6083      	str	r3, [r0, #8]
 8015d4c:	60c3      	str	r3, [r0, #12]
 8015d4e:	6102      	str	r2, [r0, #16]
 8015d50:	6143      	str	r3, [r0, #20]
 8015d52:	6183      	str	r3, [r0, #24]
 8015d54:	61c3      	str	r3, [r0, #28]
 8015d56:	6202      	str	r2, [r0, #32]
 8015d58:	4770      	bx	lr

08015d5a <_ZN8touchgfx9Matrix3x3C1Ev>:
 8015d5a:	b508      	push	{r3, lr}
 8015d5c:	f7ff fff0 	bl	8015d40 <_ZN8touchgfx9Matrix3x35resetEv>
 8015d60:	bd08      	pop	{r3, pc}

08015d62 <_ZN8touchgfx9Matrix3x35scaleEff>:
 8015d62:	edd0 7a00 	vldr	s15, [r0]
 8015d66:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d6a:	edc0 7a00 	vstr	s15, [r0]
 8015d6e:	edd0 7a01 	vldr	s15, [r0, #4]
 8015d72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d76:	edc0 7a01 	vstr	s15, [r0, #4]
 8015d7a:	edd0 7a02 	vldr	s15, [r0, #8]
 8015d7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d82:	edd0 7a03 	vldr	s15, [r0, #12]
 8015d86:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015d8a:	ed80 0a02 	vstr	s0, [r0, #8]
 8015d8e:	edc0 7a03 	vstr	s15, [r0, #12]
 8015d92:	edd0 7a04 	vldr	s15, [r0, #16]
 8015d96:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015d9a:	edc0 7a04 	vstr	s15, [r0, #16]
 8015d9e:	edd0 7a05 	vldr	s15, [r0, #20]
 8015da2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015da6:	edc0 0a05 	vstr	s1, [r0, #20]
 8015daa:	4770      	bx	lr

08015dac <_ZN8touchgfx9Matrix3x36rotateEf>:
 8015dac:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8015e40 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8015db0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015db4:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8015e44 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8015db8:	b510      	push	{r4, lr}
 8015dba:	ed2d 8b02 	vpush	{d8}
 8015dbe:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	eeb0 0a68 	vmov.f32	s0, s17
 8015dc8:	f00c fc26 	bl	8022618 <cosf>
 8015dcc:	eeb0 8a40 	vmov.f32	s16, s0
 8015dd0:	eeb0 0a68 	vmov.f32	s0, s17
 8015dd4:	f00c fb5c 	bl	8022490 <sinf>
 8015dd8:	edd4 6a03 	vldr	s13, [r4, #12]
 8015ddc:	edd4 4a00 	vldr	s9, [r4]
 8015de0:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8015de4:	ed94 7a04 	vldr	s14, [r4, #16]
 8015de8:	ed94 5a01 	vldr	s10, [r4, #4]
 8015dec:	ee66 6a88 	vmul.f32	s13, s13, s16
 8015df0:	edd4 5a02 	vldr	s11, [r4, #8]
 8015df4:	eee8 7a24 	vfma.f32	s15, s16, s9
 8015df8:	eee0 6a24 	vfma.f32	s13, s0, s9
 8015dfc:	edc4 7a00 	vstr	s15, [r4]
 8015e00:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8015e04:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015e08:	edc4 6a03 	vstr	s13, [r4, #12]
 8015e0c:	eee8 7a05 	vfma.f32	s15, s16, s10
 8015e10:	eea0 7a05 	vfma.f32	s14, s0, s10
 8015e14:	edc4 7a01 	vstr	s15, [r4, #4]
 8015e18:	edd4 7a05 	vldr	s15, [r4, #20]
 8015e1c:	ed84 7a04 	vstr	s14, [r4, #16]
 8015e20:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8015e24:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015e28:	eea8 6a25 	vfma.f32	s12, s16, s11
 8015e2c:	eee0 7a25 	vfma.f32	s15, s0, s11
 8015e30:	ecbd 8b02 	vpop	{d8}
 8015e34:	ed84 6a02 	vstr	s12, [r4, #8]
 8015e38:	edc4 7a05 	vstr	s15, [r4, #20]
 8015e3c:	bd10      	pop	{r4, pc}
 8015e3e:	bf00      	nop
 8015e40:	40490fdb 	.word	0x40490fdb
 8015e44:	43340000 	.word	0x43340000

08015e48 <_ZN8touchgfx9Matrix3x39translateEff>:
 8015e48:	ed90 6a06 	vldr	s12, [r0, #24]
 8015e4c:	edd0 7a00 	vldr	s15, [r0]
 8015e50:	edd0 6a07 	vldr	s13, [r0, #28]
 8015e54:	eee6 7a00 	vfma.f32	s15, s12, s0
 8015e58:	ed90 7a08 	vldr	s14, [r0, #32]
 8015e5c:	edc0 7a00 	vstr	s15, [r0]
 8015e60:	edd0 7a01 	vldr	s15, [r0, #4]
 8015e64:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015e68:	edc0 7a01 	vstr	s15, [r0, #4]
 8015e6c:	edd0 7a02 	vldr	s15, [r0, #8]
 8015e70:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015e74:	edc0 7a02 	vstr	s15, [r0, #8]
 8015e78:	edd0 7a03 	vldr	s15, [r0, #12]
 8015e7c:	eee6 7a20 	vfma.f32	s15, s12, s1
 8015e80:	edc0 7a03 	vstr	s15, [r0, #12]
 8015e84:	edd0 7a04 	vldr	s15, [r0, #16]
 8015e88:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8015e8c:	edc0 7a04 	vstr	s15, [r0, #16]
 8015e90:	edd0 7a05 	vldr	s15, [r0, #20]
 8015e94:	eee7 7a20 	vfma.f32	s15, s14, s1
 8015e98:	edc0 7a05 	vstr	s15, [r0, #20]
 8015e9c:	4770      	bx	lr

08015e9e <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8015e9e:	edd0 6a01 	vldr	s13, [r0, #4]
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	edd0 7a04 	vldr	s15, [r0, #16]
 8015ea8:	ed90 7a03 	vldr	s14, [r0, #12]
 8015eac:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8015eb0:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8015eb4:	edd0 6a00 	vldr	s13, [r0]
 8015eb8:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015ebc:	ed90 7a05 	vldr	s14, [r0, #20]
 8015ec0:	eee6 0a80 	vfma.f32	s1, s13, s0
 8015ec4:	ed90 0a02 	vldr	s0, [r0, #8]
 8015ec8:	ee30 0a80 	vadd.f32	s0, s1, s0
 8015ecc:	ee77 0a87 	vadd.f32	s1, s15, s14
 8015ed0:	b004      	add	sp, #16
 8015ed2:	4770      	bx	lr

08015ed4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8015ed4:	b530      	push	{r4, r5, lr}
 8015ed6:	8083      	strh	r3, [r0, #4]
 8015ed8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015edc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015ee0:	80c3      	strh	r3, [r0, #6]
 8015ee2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015ee6:	6141      	str	r1, [r0, #20]
 8015ee8:	7203      	strb	r3, [r0, #8]
 8015eea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015eee:	8302      	strh	r2, [r0, #24]
 8015ef0:	7243      	strb	r3, [r0, #9]
 8015ef2:	7a83      	ldrb	r3, [r0, #10]
 8015ef4:	f365 0306 	bfi	r3, r5, #0, #7
 8015ef8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8015efc:	f365 13c7 	bfi	r3, r5, #7, #1
 8015f00:	7283      	strb	r3, [r0, #10]
 8015f02:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8015f06:	72c3      	strb	r3, [r0, #11]
 8015f08:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015f0c:	7303      	strb	r3, [r0, #12]
 8015f0e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8015f12:	81c3      	strh	r3, [r0, #14]
 8015f14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015f18:	8203      	strh	r3, [r0, #16]
 8015f1a:	4b01      	ldr	r3, [pc, #4]	@ (8015f20 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8015f1c:	6003      	str	r3, [r0, #0]
 8015f1e:	bd30      	pop	{r4, r5, pc}
 8015f20:	08025aa0 	.word	0x08025aa0

08015f24 <_ZNK8touchgfx9ConstFont4findEt>:
 8015f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f26:	6944      	ldr	r4, [r0, #20]
 8015f28:	b3bc      	cbz	r4, 8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f2a:	88a3      	ldrh	r3, [r4, #4]
 8015f2c:	8b02      	ldrh	r2, [r0, #24]
 8015f2e:	1acb      	subs	r3, r1, r3
 8015f30:	f102 32ff 	add.w	r2, r2, #4294967295
 8015f34:	d431      	bmi.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f36:	4293      	cmp	r3, r2
 8015f38:	dd0c      	ble.n	8015f54 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8015f3a:	230e      	movs	r3, #14
 8015f3c:	fb03 4302 	mla	r3, r3, r2, r4
 8015f40:	889b      	ldrh	r3, [r3, #4]
 8015f42:	1a5b      	subs	r3, r3, r1
 8015f44:	1ad3      	subs	r3, r2, r3
 8015f46:	429a      	cmp	r2, r3
 8015f48:	db27      	blt.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	bfbc      	itt	lt
 8015f4e:	2302      	movlt	r3, #2
 8015f50:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015f54:	2500      	movs	r5, #0
 8015f56:	260e      	movs	r6, #14
 8015f58:	4295      	cmp	r5, r2
 8015f5a:	dc1e      	bgt.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f5c:	fb06 4003 	mla	r0, r6, r3, r4
 8015f60:	8887      	ldrh	r7, [r0, #4]
 8015f62:	42b9      	cmp	r1, r7
 8015f64:	d01a      	beq.n	8015f9c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015f66:	d20d      	bcs.n	8015f84 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015f68:	1e5a      	subs	r2, r3, #1
 8015f6a:	4295      	cmp	r5, r2
 8015f6c:	dc15      	bgt.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f6e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015f72:	1a5b      	subs	r3, r3, r1
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	429a      	cmp	r2, r3
 8015f78:	db0f      	blt.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f7a:	429d      	cmp	r5, r3
 8015f7c:	ddec      	ble.n	8015f58 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015f7e:	1953      	adds	r3, r2, r5
 8015f80:	105b      	asrs	r3, r3, #1
 8015f82:	e7e9      	b.n	8015f58 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015f84:	1c5d      	adds	r5, r3, #1
 8015f86:	42aa      	cmp	r2, r5
 8015f88:	db07      	blt.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f8a:	8a43      	ldrh	r3, [r0, #18]
 8015f8c:	1acb      	subs	r3, r1, r3
 8015f8e:	442b      	add	r3, r5
 8015f90:	429d      	cmp	r5, r3
 8015f92:	dc02      	bgt.n	8015f9a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015f94:	429a      	cmp	r2, r3
 8015f96:	dadf      	bge.n	8015f58 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015f98:	e7f1      	b.n	8015f7e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8015f9a:	2000      	movs	r0, #0
 8015f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8015f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	4617      	mov	r7, r2
 8015fa4:	461e      	mov	r6, r3
 8015fa6:	b911      	cbnz	r1, 8015fae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015fa8:	2500      	movs	r5, #0
 8015faa:	4628      	mov	r0, r5
 8015fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fae:	290a      	cmp	r1, #10
 8015fb0:	d0fa      	beq.n	8015fa8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015fb2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015fb6:	4291      	cmp	r1, r2
 8015fb8:	d0f6      	beq.n	8015fa8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015fba:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015fbe:	4291      	cmp	r1, r2
 8015fc0:	d0f2      	beq.n	8015fa8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015fc2:	f7ff ffaf 	bl	8015f24 <_ZNK8touchgfx9ConstFont4findEt>
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	b950      	cbnz	r0, 8015fe0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8015fca:	6823      	ldr	r3, [r4, #0]
 8015fcc:	4620      	mov	r0, r4
 8015fce:	691b      	ldr	r3, [r3, #16]
 8015fd0:	4798      	blx	r3
 8015fd2:	4601      	mov	r1, r0
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f7ff ffa5 	bl	8015f24 <_ZNK8touchgfx9ConstFont4findEt>
 8015fda:	4605      	mov	r5, r0
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	d0e3      	beq.n	8015fa8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015fe0:	6823      	ldr	r3, [r4, #0]
 8015fe2:	4629      	mov	r1, r5
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015fe8:	4798      	blx	r3
 8015fea:	6038      	str	r0, [r7, #0]
 8015fec:	6823      	ldr	r3, [r4, #0]
 8015fee:	4620      	mov	r0, r4
 8015ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ff2:	4798      	blx	r3
 8015ff4:	7030      	strb	r0, [r6, #0]
 8015ff6:	e7d8      	b.n	8015faa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015ff8 <_ZN8touchgfx4clzuEm>:
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	b1c8      	cbz	r0, 8016030 <_ZN8touchgfx4clzuEm+0x38>
 8015ffc:	0c02      	lsrs	r2, r0, #16
 8015ffe:	0412      	lsls	r2, r2, #16
 8016000:	b9a2      	cbnz	r2, 801602c <_ZN8touchgfx4clzuEm+0x34>
 8016002:	0403      	lsls	r3, r0, #16
 8016004:	2010      	movs	r0, #16
 8016006:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801600a:	bf04      	itt	eq
 801600c:	021b      	lsleq	r3, r3, #8
 801600e:	3008      	addeq	r0, #8
 8016010:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8016014:	bf04      	itt	eq
 8016016:	011b      	lsleq	r3, r3, #4
 8016018:	3004      	addeq	r0, #4
 801601a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801601e:	bf04      	itt	eq
 8016020:	009b      	lsleq	r3, r3, #2
 8016022:	3002      	addeq	r0, #2
 8016024:	2b00      	cmp	r3, #0
 8016026:	db04      	blt.n	8016032 <_ZN8touchgfx4clzuEm+0x3a>
 8016028:	3001      	adds	r0, #1
 801602a:	4770      	bx	lr
 801602c:	2000      	movs	r0, #0
 801602e:	e7ea      	b.n	8016006 <_ZN8touchgfx4clzuEm+0xe>
 8016030:	2020      	movs	r0, #32
 8016032:	4770      	bx	lr

08016034 <_ZN8touchgfx7muldivuEmmmRm>:
 8016034:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016038:	460f      	mov	r7, r1
 801603a:	4615      	mov	r5, r2
 801603c:	461e      	mov	r6, r3
 801603e:	4601      	mov	r1, r0
 8016040:	b100      	cbz	r0, 8016044 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 8016042:	b927      	cbnz	r7, 801604e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8016044:	2000      	movs	r0, #0
 8016046:	6030      	str	r0, [r6, #0]
 8016048:	b002      	add	sp, #8
 801604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801604e:	f7ff ffd3 	bl	8015ff8 <_ZN8touchgfx4clzuEm>
 8016052:	b980      	cbnz	r0, 8016076 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8016054:	4638      	mov	r0, r7
 8016056:	f7ff ffcf 	bl	8015ff8 <_ZN8touchgfx4clzuEm>
 801605a:	2800      	cmp	r0, #0
 801605c:	dd05      	ble.n	801606a <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801605e:	4633      	mov	r3, r6
 8016060:	462a      	mov	r2, r5
 8016062:	4638      	mov	r0, r7
 8016064:	f7ff ffe6 	bl	8016034 <_ZN8touchgfx7muldivuEmmmRm>
 8016068:	e7ee      	b.n	8016048 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801606a:	f04f 33ff 	mov.w	r3, #4294967295
 801606e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016072:	6033      	str	r3, [r6, #0]
 8016074:	e7e8      	b.n	8016048 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8016076:	fa37 f800 	lsrs.w	r8, r7, r0
 801607a:	fb07 f301 	mul.w	r3, r7, r1
 801607e:	d105      	bne.n	801608c <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8016080:	fbb3 f0f5 	udiv	r0, r3, r5
 8016084:	fb05 3510 	mls	r5, r5, r0, r3
 8016088:	6035      	str	r5, [r6, #0]
 801608a:	e7dd      	b.n	8016048 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801608c:	2301      	movs	r3, #1
 801608e:	fa01 fa00 	lsl.w	sl, r1, r0
 8016092:	462a      	mov	r2, r5
 8016094:	fa03 f000 	lsl.w	r0, r3, r0
 8016098:	4633      	mov	r3, r6
 801609a:	fbba f9f5 	udiv	r9, sl, r5
 801609e:	3801      	subs	r0, #1
 80160a0:	fb08 f409 	mul.w	r4, r8, r9
 80160a4:	4038      	ands	r0, r7
 80160a6:	f7ff ffc5 	bl	8016034 <_ZN8touchgfx7muldivuEmmmRm>
 80160aa:	462a      	mov	r2, r5
 80160ac:	4607      	mov	r7, r0
 80160ae:	ab01      	add	r3, sp, #4
 80160b0:	fb05 a119 	mls	r1, r5, r9, sl
 80160b4:	4640      	mov	r0, r8
 80160b6:	f7ff ffbd 	bl	8016034 <_ZN8touchgfx7muldivuEmmmRm>
 80160ba:	9b01      	ldr	r3, [sp, #4]
 80160bc:	6832      	ldr	r2, [r6, #0]
 80160be:	441a      	add	r2, r3
 80160c0:	fbb2 f3f5 	udiv	r3, r2, r5
 80160c4:	441c      	add	r4, r3
 80160c6:	fb05 2513 	mls	r5, r5, r3, r2
 80160ca:	443c      	add	r4, r7
 80160cc:	4420      	add	r0, r4
 80160ce:	e7db      	b.n	8016088 <_ZN8touchgfx7muldivuEmmmRm+0x54>

080160d0 <_ZN8touchgfx6muldivElllRl>:
 80160d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160d2:	2800      	cmp	r0, #0
 80160d4:	461e      	mov	r6, r3
 80160d6:	bfba      	itte	lt
 80160d8:	4240      	neglt	r0, r0
 80160da:	f04f 34ff 	movlt.w	r4, #4294967295
 80160de:	2401      	movge	r4, #1
 80160e0:	2900      	cmp	r1, #0
 80160e2:	bfbc      	itt	lt
 80160e4:	4249      	neglt	r1, r1
 80160e6:	4264      	neglt	r4, r4
 80160e8:	2a00      	cmp	r2, #0
 80160ea:	bfb6      	itet	lt
 80160ec:	4265      	neglt	r5, r4
 80160ee:	4625      	movge	r5, r4
 80160f0:	4252      	neglt	r2, r2
 80160f2:	4288      	cmp	r0, r1
 80160f4:	bfc2      	ittt	gt
 80160f6:	4603      	movgt	r3, r0
 80160f8:	4608      	movgt	r0, r1
 80160fa:	4619      	movgt	r1, r3
 80160fc:	ab01      	add	r3, sp, #4
 80160fe:	f7ff ff99 	bl	8016034 <_ZN8touchgfx7muldivuEmmmRm>
 8016102:	9b01      	ldr	r3, [sp, #4]
 8016104:	4368      	muls	r0, r5
 8016106:	435c      	muls	r4, r3
 8016108:	6034      	str	r4, [r6, #0]
 801610a:	b002      	add	sp, #8
 801610c:	bd70      	pop	{r4, r5, r6, pc}

0801610e <_ZN8touchgfx6muldivElll>:
 801610e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016110:	4606      	mov	r6, r0
 8016112:	ab01      	add	r3, sp, #4
 8016114:	460d      	mov	r5, r1
 8016116:	4614      	mov	r4, r2
 8016118:	f7ff ffda 	bl	80160d0 <_ZN8touchgfx6muldivElllRl>
 801611c:	2e00      	cmp	r6, #0
 801611e:	db20      	blt.n	8016162 <_ZN8touchgfx6muldivElll+0x54>
 8016120:	bf14      	ite	ne
 8016122:	2301      	movne	r3, #1
 8016124:	2300      	moveq	r3, #0
 8016126:	2d00      	cmp	r5, #0
 8016128:	db1e      	blt.n	8016168 <_ZN8touchgfx6muldivElll+0x5a>
 801612a:	bf14      	ite	ne
 801612c:	2201      	movne	r2, #1
 801612e:	2200      	moveq	r2, #0
 8016130:	2c00      	cmp	r4, #0
 8016132:	fb03 f202 	mul.w	r2, r3, r2
 8016136:	db1a      	blt.n	801616e <_ZN8touchgfx6muldivElll+0x60>
 8016138:	bf14      	ite	ne
 801613a:	2301      	movne	r3, #1
 801613c:	2300      	moveq	r3, #0
 801613e:	4353      	muls	r3, r2
 8016140:	2b01      	cmp	r3, #1
 8016142:	d117      	bne.n	8016174 <_ZN8touchgfx6muldivElll+0x66>
 8016144:	2c00      	cmp	r4, #0
 8016146:	9b01      	ldr	r3, [sp, #4]
 8016148:	bfb8      	it	lt
 801614a:	4264      	neglt	r4, r4
 801614c:	2b00      	cmp	r3, #0
 801614e:	f104 0401 	add.w	r4, r4, #1
 8016152:	bfb8      	it	lt
 8016154:	425b      	neglt	r3, r3
 8016156:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801615a:	db00      	blt.n	801615e <_ZN8touchgfx6muldivElll+0x50>
 801615c:	3001      	adds	r0, #1
 801615e:	b002      	add	sp, #8
 8016160:	bd70      	pop	{r4, r5, r6, pc}
 8016162:	f04f 33ff 	mov.w	r3, #4294967295
 8016166:	e7de      	b.n	8016126 <_ZN8touchgfx6muldivElll+0x18>
 8016168:	f04f 32ff 	mov.w	r2, #4294967295
 801616c:	e7e0      	b.n	8016130 <_ZN8touchgfx6muldivElll+0x22>
 801616e:	f04f 33ff 	mov.w	r3, #4294967295
 8016172:	e7e4      	b.n	801613e <_ZN8touchgfx6muldivElll+0x30>
 8016174:	3301      	adds	r3, #1
 8016176:	d1f2      	bne.n	801615e <_ZN8touchgfx6muldivElll+0x50>
 8016178:	9b01      	ldr	r3, [sp, #4]
 801617a:	2c00      	cmp	r4, #0
 801617c:	bfb8      	it	lt
 801617e:	4264      	neglt	r4, r4
 8016180:	2b00      	cmp	r3, #0
 8016182:	bfb8      	it	lt
 8016184:	425b      	neglt	r3, r3
 8016186:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801618a:	bfc8      	it	gt
 801618c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8016190:	e7e5      	b.n	801615e <_ZN8touchgfx6muldivElll+0x50>

08016192 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016192:	2000      	movs	r0, #0
 8016194:	4770      	bx	lr

08016196 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016196:	2001      	movs	r0, #1
 8016198:	4770      	bx	lr

0801619a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801619a:	2002      	movs	r0, #2
 801619c:	4770      	bx	lr

0801619e <_ZN8touchgfx6ScreenD1Ev>:
 801619e:	4770      	bx	lr

080161a0 <_ZN8touchgfx12GestureEventD1Ev>:
 80161a0:	4770      	bx	lr

080161a2 <_ZN8touchgfx9DragEventD1Ev>:
 80161a2:	4770      	bx	lr

080161a4 <_ZN8touchgfx10ClickEventD1Ev>:
 80161a4:	4770      	bx	lr

080161a6 <_ZN8touchgfx10ClickEventD0Ev>:
 80161a6:	b510      	push	{r4, lr}
 80161a8:	4604      	mov	r4, r0
 80161aa:	210c      	movs	r1, #12
 80161ac:	f00c f8fe 	bl	80223ac <_ZdlPvj>
 80161b0:	4620      	mov	r0, r4
 80161b2:	bd10      	pop	{r4, pc}

080161b4 <_ZN8touchgfx9DragEventD0Ev>:
 80161b4:	b510      	push	{r4, lr}
 80161b6:	4604      	mov	r4, r0
 80161b8:	2110      	movs	r1, #16
 80161ba:	f00c f8f7 	bl	80223ac <_ZdlPvj>
 80161be:	4620      	mov	r0, r4
 80161c0:	bd10      	pop	{r4, pc}

080161c2 <_ZN8touchgfx12GestureEventD0Ev>:
 80161c2:	b510      	push	{r4, lr}
 80161c4:	4604      	mov	r4, r0
 80161c6:	210c      	movs	r1, #12
 80161c8:	f00c f8f0 	bl	80223ac <_ZdlPvj>
 80161cc:	4620      	mov	r0, r4
 80161ce:	bd10      	pop	{r4, pc}

080161d0 <_ZN8touchgfx6ScreenD0Ev>:
 80161d0:	b510      	push	{r4, lr}
 80161d2:	4604      	mov	r4, r0
 80161d4:	213c      	movs	r1, #60	@ 0x3c
 80161d6:	f00c f8e9 	bl	80223ac <_ZdlPvj>
 80161da:	4620      	mov	r0, r4
 80161dc:	bd10      	pop	{r4, pc}
	...

080161e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80161e0:	b530      	push	{r4, r5, lr}
 80161e2:	460d      	mov	r5, r1
 80161e4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80161e6:	b087      	sub	sp, #28
 80161e8:	4604      	mov	r4, r0
 80161ea:	b301      	cbz	r1, 801622e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80161ec:	a801      	add	r0, sp, #4
 80161ee:	f7ff fb3b 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161f2:	892a      	ldrh	r2, [r5, #8]
 80161f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80161f8:	7928      	ldrb	r0, [r5, #4]
 80161fa:	1ad2      	subs	r2, r2, r3
 80161fc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80161fe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016202:	441a      	add	r2, r3
 8016204:	896b      	ldrh	r3, [r5, #10]
 8016206:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801620a:	f88d 0010 	strb.w	r0, [sp, #16]
 801620e:	1b5b      	subs	r3, r3, r5
 8016210:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8016212:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016214:	442b      	add	r3, r5
 8016216:	4d07      	ldr	r5, [pc, #28]	@ (8016234 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016218:	f8ad 1012 	strh.w	r1, [sp, #18]
 801621c:	a903      	add	r1, sp, #12
 801621e:	9503      	str	r5, [sp, #12]
 8016220:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016228:	6803      	ldr	r3, [r0, #0]
 801622a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801622c:	4798      	blx	r3
 801622e:	b007      	add	sp, #28
 8016230:	bd30      	pop	{r4, r5, pc}
 8016232:	bf00      	nop
 8016234:	08025b30 	.word	0x08025b30

08016238 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801623c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801623e:	b08a      	sub	sp, #40	@ 0x28
 8016240:	4604      	mov	r4, r0
 8016242:	460d      	mov	r5, r1
 8016244:	b113      	cbz	r3, 801624c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016246:	790b      	ldrb	r3, [r1, #4]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d044      	beq.n	80162d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801624c:	f104 0804 	add.w	r8, r4, #4
 8016250:	a803      	add	r0, sp, #12
 8016252:	4641      	mov	r1, r8
 8016254:	f7ff fb08 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016258:	792b      	ldrb	r3, [r5, #4]
 801625a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801625e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016262:	b983      	cbnz	r3, 8016286 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016264:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8016268:	892a      	ldrh	r2, [r5, #8]
 801626a:	88e9      	ldrh	r1, [r5, #6]
 801626c:	4640      	mov	r0, r8
 801626e:	1b92      	subs	r2, r2, r6
 8016270:	9301      	str	r3, [sp, #4]
 8016272:	1bc9      	subs	r1, r1, r7
 8016274:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8016278:	b212      	sxth	r2, r2
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	b209      	sxth	r1, r1
 801627e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8016282:	f7f7 ffcd 	bl	800e220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016286:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016288:	b329      	cbz	r1, 80162d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801628a:	a805      	add	r0, sp, #20
 801628c:	f7ff faec 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016290:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016294:	792b      	ldrb	r3, [r5, #4]
 8016296:	a907      	add	r1, sp, #28
 8016298:	1abf      	subs	r7, r7, r2
 801629a:	88ea      	ldrh	r2, [r5, #6]
 801629c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801629e:	4417      	add	r7, r2
 80162a0:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80162a2:	f88d 3020 	strb.w	r3, [sp, #32]
 80162a6:	4417      	add	r7, r2
 80162a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80162ac:	1ab6      	subs	r6, r6, r2
 80162ae:	892a      	ldrh	r2, [r5, #8]
 80162b0:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80162b4:	4416      	add	r6, r2
 80162b6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80162b8:	4416      	add	r6, r2
 80162ba:	4a08      	ldr	r2, [pc, #32]	@ (80162dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80162bc:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80162c0:	2600      	movs	r6, #0
 80162c2:	9207      	str	r2, [sp, #28]
 80162c4:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80162c8:	6803      	ldr	r3, [r0, #0]
 80162ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162cc:	4798      	blx	r3
 80162ce:	792b      	ldrb	r3, [r5, #4]
 80162d0:	b10b      	cbz	r3, 80162d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80162d2:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80162d6:	b00a      	add	sp, #40	@ 0x28
 80162d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162dc:	08025b08 	.word	0x08025b08

080162e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80162e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e4:	460c      	mov	r4, r1
 80162e6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80162e8:	b088      	sub	sp, #32
 80162ea:	4605      	mov	r5, r0
 80162ec:	2900      	cmp	r1, #0
 80162ee:	d06d      	beq.n	80163cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80162f0:	4668      	mov	r0, sp
 80162f2:	f7ff fab9 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162f6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80162f8:	88e3      	ldrh	r3, [r4, #6]
 80162fa:	f9bd 8000 	ldrsh.w	r8, [sp]
 80162fe:	440b      	add	r3, r1
 8016300:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016304:	b21b      	sxth	r3, r3
 8016306:	4543      	cmp	r3, r8
 8016308:	db31      	blt.n	801636e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801630a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801630e:	44c4      	add	ip, r8
 8016310:	fa0f fc8c 	sxth.w	ip, ip
 8016314:	4563      	cmp	r3, ip
 8016316:	da2a      	bge.n	801636e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016318:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801631a:	8926      	ldrh	r6, [r4, #8]
 801631c:	4416      	add	r6, r2
 801631e:	b236      	sxth	r6, r6
 8016320:	42be      	cmp	r6, r7
 8016322:	db24      	blt.n	801636e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016324:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016328:	4438      	add	r0, r7
 801632a:	b200      	sxth	r0, r0
 801632c:	4286      	cmp	r6, r0
 801632e:	da1e      	bge.n	801636e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016330:	8963      	ldrh	r3, [r4, #10]
 8016332:	4419      	add	r1, r3
 8016334:	b209      	sxth	r1, r1
 8016336:	4541      	cmp	r1, r8
 8016338:	db08      	blt.n	801634c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801633a:	4561      	cmp	r1, ip
 801633c:	da06      	bge.n	801634c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801633e:	89a3      	ldrh	r3, [r4, #12]
 8016340:	441a      	add	r2, r3
 8016342:	b212      	sxth	r2, r2
 8016344:	42ba      	cmp	r2, r7
 8016346:	db01      	blt.n	801634c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016348:	4282      	cmp	r2, r0
 801634a:	db10      	blt.n	801636e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801634c:	4b21      	ldr	r3, [pc, #132]	@ (80163d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801634e:	a904      	add	r1, sp, #16
 8016350:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016352:	9304      	str	r3, [sp, #16]
 8016354:	2302      	movs	r3, #2
 8016356:	f88d 3014 	strb.w	r3, [sp, #20]
 801635a:	2300      	movs	r3, #0
 801635c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016360:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016364:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016368:	6803      	ldr	r3, [r0, #0]
 801636a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801636c:	4798      	blx	r3
 801636e:	1d29      	adds	r1, r5, #4
 8016370:	a802      	add	r0, sp, #8
 8016372:	f7ff fa79 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016376:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801637a:	88e0      	ldrh	r0, [r4, #6]
 801637c:	eba3 0808 	sub.w	r8, r3, r8
 8016380:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016384:	7921      	ldrb	r1, [r4, #4]
 8016386:	fa1f f888 	uxth.w	r8, r8
 801638a:	1bdf      	subs	r7, r3, r7
 801638c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8016390:	b2bb      	uxth	r3, r7
 8016392:	4440      	add	r0, r8
 8016394:	8922      	ldrh	r2, [r4, #8]
 8016396:	8967      	ldrh	r7, [r4, #10]
 8016398:	4460      	add	r0, ip
 801639a:	89a4      	ldrh	r4, [r4, #12]
 801639c:	441a      	add	r2, r3
 801639e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 80163a0:	44b8      	add	r8, r7
 80163a2:	4423      	add	r3, r4
 80163a4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80163a8:	4432      	add	r2, r6
 80163aa:	44e0      	add	r8, ip
 80163ac:	4433      	add	r3, r6
 80163ae:	4c0a      	ldr	r4, [pc, #40]	@ (80163d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80163b0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80163b2:	f88d 1014 	strb.w	r1, [sp, #20]
 80163b6:	a904      	add	r1, sp, #16
 80163b8:	9404      	str	r4, [sp, #16]
 80163ba:	f8ad 2018 	strh.w	r2, [sp, #24]
 80163be:	f8ad 801a 	strh.w	r8, [sp, #26]
 80163c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80163c6:	6803      	ldr	r3, [r0, #0]
 80163c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80163ca:	4798      	blx	r3
 80163cc:	b008      	add	sp, #32
 80163ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163d2:	bf00      	nop
 80163d4:	08025b08 	.word	0x08025b08
 80163d8:	08025b1c 	.word	0x08025b1c

080163dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80163dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163de:	4604      	mov	r4, r0
 80163e0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80163e4:	3201      	adds	r2, #1
 80163e6:	d112      	bne.n	801640e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80163e8:	2500      	movs	r5, #0
 80163ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80163ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80163f2:	6803      	ldr	r3, [r0, #0]
 80163f4:	9500      	str	r5, [sp, #0]
 80163f6:	466d      	mov	r5, sp
 80163f8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80163fc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016400:	4629      	mov	r1, r5
 8016402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016404:	4798      	blx	r3
 8016406:	e895 0003 	ldmia.w	r5, {r0, r1}
 801640a:	e884 0003 	stmia.w	r4, {r0, r1}
 801640e:	4620      	mov	r0, r4
 8016410:	b003      	add	sp, #12
 8016412:	bd30      	pop	{r4, r5, pc}

08016414 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016414:	b513      	push	{r0, r1, r4, lr}
 8016416:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801641a:	4604      	mov	r4, r0
 801641c:	3301      	adds	r3, #1
 801641e:	d109      	bne.n	8016434 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016420:	4601      	mov	r1, r0
 8016422:	4668      	mov	r0, sp
 8016424:	f7ff fa20 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016428:	f8bd 3000 	ldrh.w	r3, [sp]
 801642c:	8423      	strh	r3, [r4, #32]
 801642e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016432:	8463      	strh	r3, [r4, #34]	@ 0x22
 8016434:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016438:	b002      	add	sp, #8
 801643a:	bd10      	pop	{r4, pc}

0801643c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801643c:	b513      	push	{r0, r1, r4, lr}
 801643e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8016442:	4604      	mov	r4, r0
 8016444:	3301      	adds	r3, #1
 8016446:	d109      	bne.n	801645c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016448:	4601      	mov	r1, r0
 801644a:	4668      	mov	r0, sp
 801644c:	f7ff fa0c 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016450:	f8bd 3000 	ldrh.w	r3, [sp]
 8016454:	8423      	strh	r3, [r4, #32]
 8016456:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801645a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801645c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8016460:	b002      	add	sp, #8
 8016462:	bd10      	pop	{r4, pc}

08016464 <_ZN8touchgfx6ScreenC1Ev>:
 8016464:	b570      	push	{r4, r5, r6, lr}
 8016466:	4b17      	ldr	r3, [pc, #92]	@ (80164c4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016468:	4605      	mov	r5, r0
 801646a:	4a17      	ldr	r2, [pc, #92]	@ (80164c8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801646c:	2101      	movs	r1, #1
 801646e:	f845 3b04 	str.w	r3, [r5], #4
 8016472:	2300      	movs	r3, #0
 8016474:	6042      	str	r2, [r0, #4]
 8016476:	4604      	mov	r4, r0
 8016478:	8103      	strh	r3, [r0, #8]
 801647a:	8143      	strh	r3, [r0, #10]
 801647c:	8183      	strh	r3, [r0, #12]
 801647e:	81c3      	strh	r3, [r0, #14]
 8016480:	8203      	strh	r3, [r0, #16]
 8016482:	8243      	strh	r3, [r0, #18]
 8016484:	8283      	strh	r3, [r0, #20]
 8016486:	82c3      	strh	r3, [r0, #22]
 8016488:	6203      	str	r3, [r0, #32]
 801648a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801648c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801648e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8016492:	6343      	str	r3, [r0, #52]	@ 0x34
 8016494:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8016498:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801649c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80164a0:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80164a4:	4b09      	ldr	r3, [pc, #36]	@ (80164cc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80164a6:	4628      	mov	r0, r5
 80164a8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80164ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80164ae:	4a08      	ldr	r2, [pc, #32]	@ (80164d0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80164b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80164b4:	4798      	blx	r3
 80164b6:	6863      	ldr	r3, [r4, #4]
 80164b8:	4628      	mov	r0, r5
 80164ba:	4631      	mov	r1, r6
 80164bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164be:	4798      	blx	r3
 80164c0:	4620      	mov	r0, r4
 80164c2:	bd70      	pop	{r4, r5, r6, pc}
 80164c4:	08025b44 	.word	0x08025b44
 80164c8:	08025344 	.word	0x08025344
 80164cc:	2402daa2 	.word	0x2402daa2
 80164d0:	2402daa0 	.word	0x2402daa0

080164d4 <_ZN8touchgfx6Screen4drawEv>:
 80164d4:	4b09      	ldr	r3, [pc, #36]	@ (80164fc <_ZN8touchgfx6Screen4drawEv+0x28>)
 80164d6:	b507      	push	{r0, r1, r2, lr}
 80164d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164dc:	2100      	movs	r1, #0
 80164de:	4b08      	ldr	r3, [pc, #32]	@ (8016500 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80164e0:	9100      	str	r1, [sp, #0]
 80164e2:	4669      	mov	r1, sp
 80164e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164e8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80164ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80164f0:	6803      	ldr	r3, [r0, #0]
 80164f2:	689b      	ldr	r3, [r3, #8]
 80164f4:	4798      	blx	r3
 80164f6:	b003      	add	sp, #12
 80164f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80164fc:	2402daa0 	.word	0x2402daa0
 8016500:	2402daa2 	.word	0x2402daa2

08016504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016508:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801650c:	b089      	sub	sp, #36	@ 0x24
 801650e:	4680      	mov	r8, r0
 8016510:	460c      	mov	r4, r1
 8016512:	2b00      	cmp	r3, #0
 8016514:	4615      	mov	r5, r2
 8016516:	dd0e      	ble.n	8016536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016518:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801651c:	2b00      	cmp	r3, #0
 801651e:	dd0a      	ble.n	8016536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016520:	4628      	mov	r0, r5
 8016522:	f7ff ff5b 	bl	80163dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016526:	4621      	mov	r1, r4
 8016528:	f7fd fff1 	bl	801450e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801652c:	69eb      	ldr	r3, [r5, #28]
 801652e:	b928      	cbnz	r0, 801653c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016530:	461d      	mov	r5, r3
 8016532:	2b00      	cmp	r3, #0
 8016534:	d1f4      	bne.n	8016520 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8016536:	b009      	add	sp, #36	@ 0x24
 8016538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653c:	ae04      	add	r6, sp, #16
 801653e:	2b00      	cmp	r3, #0
 8016540:	f000 80b5 	beq.w	80166ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016544:	682b      	ldr	r3, [r5, #0]
 8016546:	4629      	mov	r1, r5
 8016548:	a802      	add	r0, sp, #8
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	4798      	blx	r3
 801654e:	4628      	mov	r0, r5
 8016550:	f7ff ff60 	bl	8016414 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016554:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016558:	4407      	add	r7, r0
 801655a:	4628      	mov	r0, r5
 801655c:	f7ff ff6e 	bl	801643c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016560:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016564:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016568:	b23f      	sxth	r7, r7
 801656a:	4418      	add	r0, r3
 801656c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016570:	4621      	mov	r1, r4
 8016572:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016576:	f8ad 0012 	strh.w	r0, [sp, #18]
 801657a:	4630      	mov	r0, r6
 801657c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016580:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016584:	f7f7 ff2e 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 8016588:	4628      	mov	r0, r5
 801658a:	f7ff ff27 	bl	80163dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801658e:	ab06      	add	r3, sp, #24
 8016590:	4602      	mov	r2, r0
 8016592:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016596:	e883 0003 	stmia.w	r3, {r0, r1}
 801659a:	4611      	mov	r1, r2
 801659c:	4618      	mov	r0, r3
 801659e:	f7f7 ff21 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 80165a2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80165a6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80165aa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80165ae:	4299      	cmp	r1, r3
 80165b0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80165b4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80165b8:	d10b      	bne.n	80165d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80165ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80165be:	4552      	cmp	r2, sl
 80165c0:	d107      	bne.n	80165d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80165c2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80165c6:	455a      	cmp	r2, fp
 80165c8:	d103      	bne.n	80165d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80165ca:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80165ce:	454a      	cmp	r2, r9
 80165d0:	d06d      	beq.n	80166ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80165d2:	f1bb 0f00 	cmp.w	fp, #0
 80165d6:	dd65      	ble.n	80166a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80165d8:	f1b9 0f00 	cmp.w	r9, #0
 80165dc:	dd62      	ble.n	80166a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80165de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80165e2:	fa1f f08a 	uxth.w	r0, sl
 80165e6:	4552      	cmp	r2, sl
 80165e8:	9000      	str	r0, [sp, #0]
 80165ea:	da12      	bge.n	8016612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80165ec:	9301      	str	r3, [sp, #4]
 80165ee:	9b00      	ldr	r3, [sp, #0]
 80165f0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80165f4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80165f8:	1a9a      	subs	r2, r3, r2
 80165fa:	f8ad 1010 	strh.w	r1, [sp, #16]
 80165fe:	4631      	mov	r1, r6
 8016600:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016604:	4640      	mov	r0, r8
 8016606:	f8ad 2016 	strh.w	r2, [sp, #22]
 801660a:	69ea      	ldr	r2, [r5, #28]
 801660c:	f7ff ff7a 	bl	8016504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016610:	9b01      	ldr	r3, [sp, #4]
 8016612:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016616:	b29f      	uxth	r7, r3
 8016618:	429a      	cmp	r2, r3
 801661a:	da0d      	bge.n	8016638 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801661c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016620:	1aba      	subs	r2, r7, r2
 8016622:	f8ad a012 	strh.w	sl, [sp, #18]
 8016626:	4631      	mov	r1, r6
 8016628:	f8ad 2014 	strh.w	r2, [sp, #20]
 801662c:	4640      	mov	r0, r8
 801662e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016632:	69ea      	ldr	r2, [r5, #28]
 8016634:	f7ff ff66 	bl	8016504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016638:	8822      	ldrh	r2, [r4, #0]
 801663a:	445f      	add	r7, fp
 801663c:	88a3      	ldrh	r3, [r4, #4]
 801663e:	b2bf      	uxth	r7, r7
 8016640:	4413      	add	r3, r2
 8016642:	b23a      	sxth	r2, r7
 8016644:	b29b      	uxth	r3, r3
 8016646:	b219      	sxth	r1, r3
 8016648:	4291      	cmp	r1, r2
 801664a:	dd0d      	ble.n	8016668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801664c:	1bdb      	subs	r3, r3, r7
 801664e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016652:	f8ad a012 	strh.w	sl, [sp, #18]
 8016656:	4631      	mov	r1, r6
 8016658:	f8ad 3014 	strh.w	r3, [sp, #20]
 801665c:	4640      	mov	r0, r8
 801665e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016662:	69ea      	ldr	r2, [r5, #28]
 8016664:	f7ff ff4e 	bl	8016504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016668:	88e2      	ldrh	r2, [r4, #6]
 801666a:	8863      	ldrh	r3, [r4, #2]
 801666c:	4413      	add	r3, r2
 801666e:	9a00      	ldr	r2, [sp, #0]
 8016670:	444a      	add	r2, r9
 8016672:	b29b      	uxth	r3, r3
 8016674:	fa1f f982 	uxth.w	r9, r2
 8016678:	b219      	sxth	r1, r3
 801667a:	fa0f f289 	sxth.w	r2, r9
 801667e:	428a      	cmp	r2, r1
 8016680:	da15      	bge.n	80166ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016682:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016686:	eba3 0309 	sub.w	r3, r3, r9
 801668a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801668e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016692:	4631      	mov	r1, r6
 8016694:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016698:	f8ad 2012 	strh.w	r2, [sp, #18]
 801669c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166a0:	69ea      	ldr	r2, [r5, #28]
 80166a2:	e001      	b.n	80166a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80166a4:	69ea      	ldr	r2, [r5, #28]
 80166a6:	4621      	mov	r1, r4
 80166a8:	4640      	mov	r0, r8
 80166aa:	f7ff ff2b 	bl	8016504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80166ae:	4628      	mov	r0, r5
 80166b0:	f7ff fe94 	bl	80163dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80166b4:	6861      	ldr	r1, [r4, #4]
 80166b6:	4602      	mov	r2, r0
 80166b8:	4633      	mov	r3, r6
 80166ba:	6820      	ldr	r0, [r4, #0]
 80166bc:	c303      	stmia	r3!, {r0, r1}
 80166be:	4611      	mov	r1, r2
 80166c0:	4630      	mov	r0, r6
 80166c2:	f7f7 fe8f 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 80166c6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f77f af33 	ble.w	8016536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80166d0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f77f af2e 	ble.w	8016536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80166da:	4628      	mov	r0, r5
 80166dc:	f7ff fe9a 	bl	8016414 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80166e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80166e4:	1a18      	subs	r0, r3, r0
 80166e6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80166ea:	4628      	mov	r0, r5
 80166ec:	f7ff fea6 	bl	801643c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80166f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80166f4:	4631      	mov	r1, r6
 80166f6:	1a18      	subs	r0, r3, r0
 80166f8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80166fc:	4628      	mov	r0, r5
 80166fe:	682b      	ldr	r3, [r5, #0]
 8016700:	689b      	ldr	r3, [r3, #8]
 8016702:	4798      	blx	r3
 8016704:	e717      	b.n	8016536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016706 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016706:	b570      	push	{r4, r5, r6, lr}
 8016708:	1d06      	adds	r6, r0, #4
 801670a:	b086      	sub	sp, #24
 801670c:	460c      	mov	r4, r1
 801670e:	2300      	movs	r3, #0
 8016710:	4631      	mov	r1, r6
 8016712:	4605      	mov	r5, r0
 8016714:	a802      	add	r0, sp, #8
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	f7ff f8a6 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801671c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016720:	8822      	ldrh	r2, [r4, #0]
 8016722:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016726:	1ad2      	subs	r2, r2, r3
 8016728:	8863      	ldrh	r3, [r4, #2]
 801672a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801672e:	1a5b      	subs	r3, r3, r1
 8016730:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016734:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016738:	aa01      	add	r2, sp, #4
 801673a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801673e:	4630      	mov	r0, r6
 8016740:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016744:	a904      	add	r1, sp, #16
 8016746:	f8ad 3012 	strh.w	r3, [sp, #18]
 801674a:	f7f7 ff23 	bl	800e594 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801674e:	9a01      	ldr	r2, [sp, #4]
 8016750:	b11a      	cbz	r2, 801675a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016752:	4621      	mov	r1, r4
 8016754:	4628      	mov	r0, r5
 8016756:	f7ff fed5 	bl	8016504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801675a:	b006      	add	sp, #24
 801675c:	bd70      	pop	{r4, r5, r6, pc}

0801675e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801675e:	4602      	mov	r2, r0
 8016760:	b530      	push	{r4, r5, lr}
 8016762:	4604      	mov	r4, r0
 8016764:	b085      	sub	sp, #20
 8016766:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801676a:	460d      	mov	r5, r1
 801676c:	466b      	mov	r3, sp
 801676e:	6851      	ldr	r1, [r2, #4]
 8016770:	c303      	stmia	r3!, {r0, r1}
 8016772:	4629      	mov	r1, r5
 8016774:	4668      	mov	r0, sp
 8016776:	f7f7 fe35 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 801677a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801677e:	b12b      	cbz	r3, 801678c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016780:	4669      	mov	r1, sp
 8016782:	4620      	mov	r0, r4
 8016784:	f7ff ffbf 	bl	8016706 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016788:	b005      	add	sp, #20
 801678a:	bd30      	pop	{r4, r5, pc}
 801678c:	3404      	adds	r4, #4
 801678e:	a802      	add	r0, sp, #8
 8016790:	4621      	mov	r1, r4
 8016792:	f7ff f869 	bl	8015868 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016796:	f8bd 3000 	ldrh.w	r3, [sp]
 801679a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801679e:	4669      	mov	r1, sp
 80167a0:	4620      	mov	r0, r4
 80167a2:	1a9b      	subs	r3, r3, r2
 80167a4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80167a8:	f8ad 3000 	strh.w	r3, [sp]
 80167ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80167b0:	1a9b      	subs	r3, r3, r2
 80167b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80167b6:	f7f7 feb4 	bl	800e522 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80167ba:	e7e5      	b.n	8016788 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080167bc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80167bc:	460b      	mov	r3, r1
 80167be:	680a      	ldr	r2, [r1, #0]
 80167c0:	1d01      	adds	r1, r0, #4
 80167c2:	6992      	ldr	r2, [r2, #24]
 80167c4:	4618      	mov	r0, r3
 80167c6:	4710      	bx	r2

080167c8 <_ZN8touchgfx12TextProviderC1Ev>:
 80167c8:	b538      	push	{r3, r4, r5, lr}
 80167ca:	2500      	movs	r5, #0
 80167cc:	2302      	movs	r3, #2
 80167ce:	4604      	mov	r4, r0
 80167d0:	220e      	movs	r2, #14
 80167d2:	7403      	strb	r3, [r0, #16]
 80167d4:	4629      	mov	r1, r5
 80167d6:	6145      	str	r5, [r0, #20]
 80167d8:	7605      	strb	r5, [r0, #24]
 80167da:	83c5      	strh	r5, [r0, #30]
 80167dc:	8405      	strh	r5, [r0, #32]
 80167de:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80167e0:	8705      	strh	r5, [r0, #56]	@ 0x38
 80167e2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80167e4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80167e8:	e9c0 5500 	strd	r5, r5, [r0]
 80167ec:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80167f0:	304c      	adds	r0, #76	@ 0x4c
 80167f2:	f00c fb6a 	bl	8022eca <memset>
 80167f6:	2301      	movs	r3, #1
 80167f8:	4620      	mov	r0, r4
 80167fa:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80167fe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016802:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8016806:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801680a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801680e:	f7ef ffe7 	bl	80067e0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016812:	4620      	mov	r0, r4
 8016814:	bd38      	pop	{r3, r4, r5, pc}

08016816 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016816:	b530      	push	{r4, r5, lr}
 8016818:	2500      	movs	r5, #0
 801681a:	2401      	movs	r4, #1
 801681c:	6843      	ldr	r3, [r0, #4]
 801681e:	b913      	cbnz	r3, 8016826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016820:	6803      	ldr	r3, [r0, #0]
 8016822:	b313      	cbz	r3, 801686a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016824:	6043      	str	r3, [r0, #4]
 8016826:	7e03      	ldrb	r3, [r0, #24]
 8016828:	b143      	cbz	r3, 801683c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801682a:	6943      	ldr	r3, [r0, #20]
 801682c:	b12b      	cbz	r3, 801683a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801682e:	881a      	ldrh	r2, [r3, #0]
 8016830:	b11a      	cbz	r2, 801683a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016832:	1c9a      	adds	r2, r3, #2
 8016834:	6142      	str	r2, [r0, #20]
 8016836:	8818      	ldrh	r0, [r3, #0]
 8016838:	bd30      	pop	{r4, r5, pc}
 801683a:	7605      	strb	r5, [r0, #24]
 801683c:	6843      	ldr	r3, [r0, #4]
 801683e:	8819      	ldrh	r1, [r3, #0]
 8016840:	b199      	cbz	r1, 801686a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016842:	1c9a      	adds	r2, r3, #2
 8016844:	2902      	cmp	r1, #2
 8016846:	6042      	str	r2, [r0, #4]
 8016848:	d1f5      	bne.n	8016836 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801684a:	7c03      	ldrb	r3, [r0, #16]
 801684c:	2b01      	cmp	r3, #1
 801684e:	d8e5      	bhi.n	801681c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016850:	1c5a      	adds	r2, r3, #1
 8016852:	3302      	adds	r3, #2
 8016854:	7402      	strb	r2, [r0, #16]
 8016856:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801685a:	6143      	str	r3, [r0, #20]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d0dd      	beq.n	801681c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d0da      	beq.n	801681c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016866:	7604      	strb	r4, [r0, #24]
 8016868:	e7d8      	b.n	801681c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801686a:	2000      	movs	r0, #0
 801686c:	e7e4      	b.n	8016838 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801686e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801686e:	6001      	str	r1, [r0, #0]
 8016870:	2100      	movs	r1, #0
 8016872:	b430      	push	{r4, r5}
 8016874:	6041      	str	r1, [r0, #4]
 8016876:	6815      	ldr	r5, [r2, #0]
 8016878:	6085      	str	r5, [r0, #8]
 801687a:	6852      	ldr	r2, [r2, #4]
 801687c:	6443      	str	r3, [r0, #68]	@ 0x44
 801687e:	9b02      	ldr	r3, [sp, #8]
 8016880:	60c2      	str	r2, [r0, #12]
 8016882:	7401      	strb	r1, [r0, #16]
 8016884:	6141      	str	r1, [r0, #20]
 8016886:	7601      	strb	r1, [r0, #24]
 8016888:	8701      	strh	r1, [r0, #56]	@ 0x38
 801688a:	8401      	strh	r1, [r0, #32]
 801688c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8016890:	6483      	str	r3, [r0, #72]	@ 0x48
 8016892:	bc30      	pop	{r4, r5}
 8016894:	f7ef bfa4 	b.w	80067e0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016898 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801689a:	4605      	mov	r5, r0
 801689c:	4608      	mov	r0, r1
 801689e:	b1f1      	cbz	r1, 80168de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80168a0:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80168a4:	460b      	mov	r3, r1
 80168a6:	f101 0708 	add.w	r7, r1, #8
 80168aa:	4622      	mov	r2, r4
 80168ac:	6818      	ldr	r0, [r3, #0]
 80168ae:	3308      	adds	r3, #8
 80168b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80168b4:	4626      	mov	r6, r4
 80168b6:	42bb      	cmp	r3, r7
 80168b8:	c603      	stmia	r6!, {r0, r1}
 80168ba:	4634      	mov	r4, r6
 80168bc:	d1f6      	bne.n	80168ac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80168be:	6818      	ldr	r0, [r3, #0]
 80168c0:	6030      	str	r0, [r6, #0]
 80168c2:	4610      	mov	r0, r2
 80168c4:	889b      	ldrh	r3, [r3, #4]
 80168c6:	80b3      	strh	r3, [r6, #4]
 80168c8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80168cc:	015b      	lsls	r3, r3, #5
 80168ce:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80168d2:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80168d6:	430b      	orrs	r3, r1
 80168d8:	425b      	negs	r3, r3
 80168da:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80168de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080168e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80168e0:	b538      	push	{r3, r4, r5, lr}
 80168e2:	460c      	mov	r4, r1
 80168e4:	6811      	ldr	r1, [r2, #0]
 80168e6:	4610      	mov	r0, r2
 80168e8:	68cd      	ldr	r5, [r1, #12]
 80168ea:	4619      	mov	r1, r3
 80168ec:	47a8      	blx	r5
 80168ee:	2800      	cmp	r0, #0
 80168f0:	bf08      	it	eq
 80168f2:	4620      	moveq	r0, r4
 80168f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080168f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80168f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168fa:	4604      	mov	r4, r0
 80168fc:	4615      	mov	r5, r2
 80168fe:	4608      	mov	r0, r1
 8016900:	b93a      	cbnz	r2, 8016912 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016902:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8016906:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801690a:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801690e:	4628      	mov	r0, r5
 8016910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016912:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8016916:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801691a:	8893      	ldrh	r3, [r2, #4]
 801691c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016920:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016924:	79ee      	ldrb	r6, [r5, #7]
 8016926:	4316      	orrs	r6, r2
 8016928:	19da      	adds	r2, r3, r7
 801692a:	b291      	uxth	r1, r2
 801692c:	b2b7      	uxth	r7, r6
 801692e:	291d      	cmp	r1, #29
 8016930:	d87b      	bhi.n	8016a2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016932:	2201      	movs	r2, #1
 8016934:	10f6      	asrs	r6, r6, #3
 8016936:	408a      	lsls	r2, r1
 8016938:	4974      	ldr	r1, [pc, #464]	@ (8016b0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801693a:	420a      	tst	r2, r1
 801693c:	d12e      	bne.n	801699c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801693e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8016942:	d072      	beq.n	8016a2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016944:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8016948:	462b      	mov	r3, r5
 801694a:	f105 0e08 	add.w	lr, r5, #8
 801694e:	4615      	mov	r5, r2
 8016950:	6818      	ldr	r0, [r3, #0]
 8016952:	3308      	adds	r3, #8
 8016954:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016958:	4694      	mov	ip, r2
 801695a:	4573      	cmp	r3, lr
 801695c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016960:	4662      	mov	r2, ip
 8016962:	d1f5      	bne.n	8016950 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016964:	6818      	ldr	r0, [r3, #0]
 8016966:	f8cc 0000 	str.w	r0, [ip]
 801696a:	889b      	ldrh	r3, [r3, #4]
 801696c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016970:	b2b3      	uxth	r3, r6
 8016972:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8016976:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801697a:	1aca      	subs	r2, r1, r3
 801697c:	1bcf      	subs	r7, r1, r7
 801697e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8016982:	b292      	uxth	r2, r2
 8016984:	1afb      	subs	r3, r7, r3
 8016986:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801698a:	10d2      	asrs	r2, r2, #3
 801698c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8016990:	4302      	orrs	r2, r0
 8016992:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8016996:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801699a:	e7b8      	b.n	801690e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801699c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801699e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80169a2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80169a4:	f640 6333 	movw	r3, #3635	@ 0xe33
 80169a8:	4299      	cmp	r1, r3
 80169aa:	d110      	bne.n	80169ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80169ac:	6803      	ldr	r3, [r0, #0]
 80169ae:	68db      	ldr	r3, [r3, #12]
 80169b0:	4798      	blx	r3
 80169b2:	7b41      	ldrb	r1, [r0, #13]
 80169b4:	00cb      	lsls	r3, r1, #3
 80169b6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80169ba:	7a03      	ldrb	r3, [r0, #8]
 80169bc:	0648      	lsls	r0, r1, #25
 80169be:	ea43 0302 	orr.w	r3, r3, r2
 80169c2:	bf44      	itt	mi
 80169c4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80169c8:	b21b      	sxthmi	r3, r3
 80169ca:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80169ce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80169d2:	462a      	mov	r2, r5
 80169d4:	f105 0c08 	add.w	ip, r5, #8
 80169d8:	443b      	add	r3, r7
 80169da:	4433      	add	r3, r6
 80169dc:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 80169e0:	b29b      	uxth	r3, r3
 80169e2:	4635      	mov	r5, r6
 80169e4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80169e8:	6810      	ldr	r0, [r2, #0]
 80169ea:	3208      	adds	r2, #8
 80169ec:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80169f0:	4637      	mov	r7, r6
 80169f2:	4562      	cmp	r2, ip
 80169f4:	c703      	stmia	r7!, {r0, r1}
 80169f6:	463e      	mov	r6, r7
 80169f8:	d1f6      	bne.n	80169e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80169fa:	6810      	ldr	r0, [r2, #0]
 80169fc:	6038      	str	r0, [r7, #0]
 80169fe:	8892      	ldrh	r2, [r2, #4]
 8016a00:	80ba      	strh	r2, [r7, #4]
 8016a02:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016a06:	10db      	asrs	r3, r3, #3
 8016a08:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016a0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016a14:	4313      	orrs	r3, r2
 8016a16:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8016a1a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016a1e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8016a22:	1a9b      	subs	r3, r3, r2
 8016a24:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8016a28:	e771      	b.n	801690e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016a2a:	f023 0204 	bic.w	r2, r3, #4
 8016a2e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8016a32:	428a      	cmp	r2, r1
 8016a34:	d003      	beq.n	8016a3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8016a36:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	d120      	bne.n	8016a80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8016a3e:	3b01      	subs	r3, #1
 8016a40:	4602      	mov	r2, r0
 8016a42:	4629      	mov	r1, r5
 8016a44:	4620      	mov	r0, r4
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	f7ff ff4a 	bl	80168e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016a4c:	7b41      	ldrb	r1, [r0, #13]
 8016a4e:	00cb      	lsls	r3, r1, #3
 8016a50:	0649      	lsls	r1, r1, #25
 8016a52:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016a56:	7a03      	ldrb	r3, [r0, #8]
 8016a58:	ea43 0302 	orr.w	r3, r3, r2
 8016a5c:	bf44      	itt	mi
 8016a5e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016a62:	b21b      	sxthmi	r3, r3
 8016a64:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016a68:	7b6b      	ldrb	r3, [r5, #13]
 8016a6a:	7aaa      	ldrb	r2, [r5, #10]
 8016a6c:	005b      	lsls	r3, r3, #1
 8016a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016a72:	4313      	orrs	r3, r2
 8016a74:	115a      	asrs	r2, r3, #5
 8016a76:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016a7a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016a7e:	e035      	b.n	8016aec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8016a80:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016a84:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8016a88:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8016a8c:	7a2a      	ldrb	r2, [r5, #8]
 8016a8e:	ea42 0201 	orr.w	r2, r2, r1
 8016a92:	f640 6109 	movw	r1, #3593	@ 0xe09
 8016a96:	bf1c      	itt	ne
 8016a98:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8016a9c:	b212      	sxthne	r2, r2
 8016a9e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8016aa2:	f023 0210 	bic.w	r2, r3, #16
 8016aa6:	428a      	cmp	r2, r1
 8016aa8:	d003      	beq.n	8016ab2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016aaa:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016aae:	4293      	cmp	r3, r2
 8016ab0:	d129      	bne.n	8016b06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8016ab2:	7b6e      	ldrb	r6, [r5, #13]
 8016ab4:	4629      	mov	r1, r5
 8016ab6:	0076      	lsls	r6, r6, #1
 8016ab8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016abc:	7aae      	ldrb	r6, [r5, #10]
 8016abe:	4316      	orrs	r6, r2
 8016ac0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016ac4:	4293      	cmp	r3, r2
 8016ac6:	4602      	mov	r2, r0
 8016ac8:	4620      	mov	r0, r4
 8016aca:	bf16      	itet	ne
 8016acc:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016ad0:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016ad4:	b29b      	uxthne	r3, r3
 8016ad6:	f7ff ff03 	bl	80168e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016ada:	7b43      	ldrb	r3, [r0, #13]
 8016adc:	7a82      	ldrb	r2, [r0, #10]
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016ae4:	4313      	orrs	r3, r2
 8016ae6:	1af6      	subs	r6, r6, r3
 8016ae8:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8016aec:	7b69      	ldrb	r1, [r5, #13]
 8016aee:	00cb      	lsls	r3, r1, #3
 8016af0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016af4:	7a2b      	ldrb	r3, [r5, #8]
 8016af6:	4313      	orrs	r3, r2
 8016af8:	064a      	lsls	r2, r1, #25
 8016afa:	bf44      	itt	mi
 8016afc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016b00:	b21b      	sxthmi	r3, r3
 8016b02:	1bdb      	subs	r3, r3, r7
 8016b04:	e747      	b.n	8016996 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016b06:	2300      	movs	r3, #0
 8016b08:	e7b7      	b.n	8016a7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8016b0a:	bf00      	nop
 8016b0c:	3fc00079 	.word	0x3fc00079

08016b10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b14:	4604      	mov	r4, r0
 8016b16:	b942      	cbnz	r2, 8016b2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016b1c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016b20:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016b24:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016b28:	e047      	b.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016b2a:	7b51      	ldrb	r1, [r2, #13]
 8016b2c:	8893      	ldrh	r3, [r2, #4]
 8016b2e:	010d      	lsls	r5, r1, #4
 8016b30:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8016b34:	79d5      	ldrb	r5, [r2, #7]
 8016b36:	4305      	orrs	r5, r0
 8016b38:	2d04      	cmp	r5, #4
 8016b3a:	bfcc      	ite	gt
 8016b3c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016b40:	f04f 0e01 	movle.w	lr, #1
 8016b44:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016b48:	f200 80ab 	bhi.w	8016ca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016b4c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016b50:	4283      	cmp	r3, r0
 8016b52:	d216      	bcs.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b54:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016b58:	4283      	cmp	r3, r0
 8016b5a:	d859      	bhi.n	8016c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016b5c:	f240 6057 	movw	r0, #1623	@ 0x657
 8016b60:	4283      	cmp	r3, r0
 8016b62:	d20e      	bcs.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b64:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016b68:	d24a      	bcs.n	8016c00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016b6a:	f240 604e 	movw	r0, #1614	@ 0x64e
 8016b6e:	4283      	cmp	r3, r0
 8016b70:	d207      	bcs.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b72:	f240 601a 	movw	r0, #1562	@ 0x61a
 8016b76:	4283      	cmp	r3, r0
 8016b78:	d02a      	beq.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016b7a:	d821      	bhi.n	8016bc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016b7c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8016b80:	d35b      	bcc.n	8016c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016b82:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8016b86:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016b8a:	f040 80d0 	bne.w	8016d2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016b8e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016b92:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016b96:	f040 80ca 	bne.w	8016d2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016b9a:	00cb      	lsls	r3, r1, #3
 8016b9c:	0649      	lsls	r1, r1, #25
 8016b9e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016ba2:	7a13      	ldrb	r3, [r2, #8]
 8016ba4:	ea43 0300 	orr.w	r3, r3, r0
 8016ba8:	bf44      	itt	mi
 8016baa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016bae:	b21b      	sxthmi	r3, r3
 8016bb0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016bb4:	1b5d      	subs	r5, r3, r5
 8016bb6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016bba:	4610      	mov	r0, r2
 8016bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bc0:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016bc4:	4283      	cmp	r3, r0
 8016bc6:	d338      	bcc.n	8016c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016bc8:	f240 604c 	movw	r0, #1612	@ 0x64c
 8016bcc:	4283      	cmp	r3, r0
 8016bce:	d9d8      	bls.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bd0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016bd4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016bd8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016bdc:	f040 80f3 	bne.w	8016dc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016be0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016be4:	f040 80ef 	bne.w	8016dc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016be8:	00cb      	lsls	r3, r1, #3
 8016bea:	064e      	lsls	r6, r1, #25
 8016bec:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016bf0:	7a13      	ldrb	r3, [r2, #8]
 8016bf2:	ea43 0300 	orr.w	r3, r3, r0
 8016bf6:	bf44      	itt	mi
 8016bf8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016bfc:	b21b      	sxthmi	r3, r3
 8016bfe:	e7d9      	b.n	8016bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016c00:	f240 6054 	movw	r0, #1620	@ 0x654
 8016c04:	4283      	cmp	r3, r0
 8016c06:	d8e3      	bhi.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c08:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016c0c:	d9e0      	bls.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c0e:	e7b8      	b.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c10:	f240 6074 	movw	r0, #1652	@ 0x674
 8016c14:	4283      	cmp	r3, r0
 8016c16:	d0b4      	beq.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c18:	d82d      	bhi.n	8016c76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016c1a:	f240 605e 	movw	r0, #1630	@ 0x65e
 8016c1e:	4283      	cmp	r3, r0
 8016c20:	d804      	bhi.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016c22:	f240 605d 	movw	r0, #1629	@ 0x65d
 8016c26:	4283      	cmp	r3, r0
 8016c28:	d3d2      	bcc.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c2a:	e7aa      	b.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c2c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8016c30:	4283      	cmp	r3, r0
 8016c32:	d0cd      	beq.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c34:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8016c38:	d0a3      	beq.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c3a:	00cb      	lsls	r3, r1, #3
 8016c3c:	0649      	lsls	r1, r1, #25
 8016c3e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016c42:	7a13      	ldrb	r3, [r2, #8]
 8016c44:	ea43 0300 	orr.w	r3, r3, r0
 8016c48:	bf44      	itt	mi
 8016c4a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016c4e:	b21b      	sxthmi	r3, r3
 8016c50:	1b5d      	subs	r5, r3, r5
 8016c52:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016c56:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016c5a:	7b53      	ldrb	r3, [r2, #13]
 8016c5c:	015b      	lsls	r3, r3, #5
 8016c5e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016c62:	7993      	ldrb	r3, [r2, #6]
 8016c64:	430b      	orrs	r3, r1
 8016c66:	2105      	movs	r1, #5
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	fb93 f3f1 	sdiv	r3, r3, r1
 8016c6e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016c72:	440b      	add	r3, r1
 8016c74:	e756      	b.n	8016b24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016c76:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8016c7a:	4283      	cmp	r3, r0
 8016c7c:	d809      	bhi.n	8016c92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016c7e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8016c82:	4283      	cmp	r3, r0
 8016c84:	f4bf af7d 	bcs.w	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c88:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8016c8c:	2b05      	cmp	r3, #5
 8016c8e:	d8d4      	bhi.n	8016c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016c90:	e777      	b.n	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c92:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8016c96:	4283      	cmp	r3, r0
 8016c98:	d09a      	beq.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c9a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8016c9e:	4283      	cmp	r3, r0
 8016ca0:	e7ca      	b.n	8016c38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016ca2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8016ca6:	d22b      	bcs.n	8016d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016ca8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8016cac:	4283      	cmp	r3, r0
 8016cae:	d28f      	bcs.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cb0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8016cb4:	4283      	cmp	r3, r0
 8016cb6:	d816      	bhi.n	8016ce6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016cb8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8016cbc:	4283      	cmp	r3, r0
 8016cbe:	f4bf af60 	bcs.w	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cc2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8016cc6:	4283      	cmp	r3, r0
 8016cc8:	d80a      	bhi.n	8016ce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016cca:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8016cce:	4283      	cmp	r3, r0
 8016cd0:	f4bf af57 	bcs.w	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cd4:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8016cd8:	4283      	cmp	r3, r0
 8016cda:	f43f af79 	beq.w	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cde:	e7ac      	b.n	8016c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016ce0:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8016ce4:	e7f8      	b.n	8016cd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016ce6:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8016cea:	4283      	cmp	r3, r0
 8016cec:	d802      	bhi.n	8016cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016cee:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016cf2:	e798      	b.n	8016c26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016cf4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8016cf8:	4283      	cmp	r3, r0
 8016cfa:	f47f af42 	bne.w	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cfe:	e767      	b.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d00:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8016d04:	4283      	cmp	r3, r0
 8016d06:	f43f af63 	beq.w	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d0a:	d802      	bhi.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016d0c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8016d10:	e7f2      	b.n	8016cf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016d12:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8016d16:	4283      	cmp	r3, r0
 8016d18:	d805      	bhi.n	8016d26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016d1a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8016d1e:	4283      	cmp	r3, r0
 8016d20:	f4ff af2f 	bcc.w	8016b82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d24:	e754      	b.n	8016bd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d26:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8016d2a:	4283      	cmp	r3, r0
 8016d2c:	e7af      	b.n	8016c8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016d2e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016d32:	4617      	mov	r7, r2
 8016d34:	f102 0808 	add.w	r8, r2, #8
 8016d38:	4666      	mov	r6, ip
 8016d3a:	6838      	ldr	r0, [r7, #0]
 8016d3c:	3708      	adds	r7, #8
 8016d3e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016d42:	46e6      	mov	lr, ip
 8016d44:	4547      	cmp	r7, r8
 8016d46:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016d4a:	46f4      	mov	ip, lr
 8016d4c:	d1f5      	bne.n	8016d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016d4e:	6838      	ldr	r0, [r7, #0]
 8016d50:	f8ce 0000 	str.w	r0, [lr]
 8016d54:	88b9      	ldrh	r1, [r7, #4]
 8016d56:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016d5a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8016d5e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016d62:	d009      	beq.n	8016d78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016d64:	7b51      	ldrb	r1, [r2, #13]
 8016d66:	7992      	ldrb	r2, [r2, #6]
 8016d68:	0149      	lsls	r1, r1, #5
 8016d6a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016d6e:	4311      	orrs	r1, r2
 8016d70:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016d74:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016d78:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016d7c:	b2ad      	uxth	r5, r5
 8016d7e:	d00d      	beq.n	8016d9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016d80:	442b      	add	r3, r5
 8016d82:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016d86:	b29b      	uxth	r3, r3
 8016d88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016d8c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016d90:	10db      	asrs	r3, r3, #3
 8016d92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016d96:	4313      	orrs	r3, r2
 8016d98:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016d9c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016da0:	00cb      	lsls	r3, r1, #3
 8016da2:	064f      	lsls	r7, r1, #25
 8016da4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016da8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016dac:	ea43 0302 	orr.w	r3, r3, r2
 8016db0:	bf44      	itt	mi
 8016db2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016db6:	b21b      	sxthmi	r3, r3
 8016db8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016dbc:	1b5b      	subs	r3, r3, r5
 8016dbe:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8016dc2:	4632      	mov	r2, r6
 8016dc4:	e6f9      	b.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016dc6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016dca:	4617      	mov	r7, r2
 8016dcc:	f102 0908 	add.w	r9, r2, #8
 8016dd0:	4666      	mov	r6, ip
 8016dd2:	6838      	ldr	r0, [r7, #0]
 8016dd4:	3708      	adds	r7, #8
 8016dd6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016dda:	46e0      	mov	r8, ip
 8016ddc:	454f      	cmp	r7, r9
 8016dde:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016de2:	46c4      	mov	ip, r8
 8016de4:	d1f5      	bne.n	8016dd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016de6:	6838      	ldr	r0, [r7, #0]
 8016de8:	f8c8 0000 	str.w	r0, [r8]
 8016dec:	88b9      	ldrh	r1, [r7, #4]
 8016dee:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016df2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8016df6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016dfa:	d009      	beq.n	8016e10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016dfc:	7b51      	ldrb	r1, [r2, #13]
 8016dfe:	7992      	ldrb	r2, [r2, #6]
 8016e00:	0149      	lsls	r1, r1, #5
 8016e02:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016e06:	4311      	orrs	r1, r2
 8016e08:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016e0c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016e10:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016e14:	d00e      	beq.n	8016e34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016e16:	eba3 030e 	sub.w	r3, r3, lr
 8016e1a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016e24:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016e28:	10db      	asrs	r3, r3, #3
 8016e2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016e34:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016e38:	00cb      	lsls	r3, r1, #3
 8016e3a:	0648      	lsls	r0, r1, #25
 8016e3c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016e40:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016e44:	ea43 0302 	orr.w	r3, r3, r2
 8016e48:	bf44      	itt	mi
 8016e4a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016e4e:	b21b      	sxthmi	r3, r3
 8016e50:	1b5d      	subs	r5, r3, r5
 8016e52:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016e56:	e7b4      	b.n	8016dc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5c:	461e      	mov	r6, r3
 8016e5e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016e60:	4604      	mov	r4, r0
 8016e62:	4617      	mov	r7, r2
 8016e64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016e68:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016e6c:	f7ef fc76 	bl	800675c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e70:	4605      	mov	r5, r0
 8016e72:	b918      	cbnz	r0, 8016e7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016e74:	6030      	str	r0, [r6, #0]
 8016e76:	4628      	mov	r0, r5
 8016e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	4601      	mov	r1, r0
 8016e80:	4638      	mov	r0, r7
 8016e82:	68db      	ldr	r3, [r3, #12]
 8016e84:	4798      	blx	r3
 8016e86:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	6030      	str	r0, [r6, #0]
 8016e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016e92:	d213      	bcs.n	8016ebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016e94:	4643      	mov	r3, r8
 8016e96:	4639      	mov	r1, r7
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f7ff fe39 	bl	8016b10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016e9e:	6030      	str	r0, [r6, #0]
 8016ea0:	6833      	ldr	r3, [r6, #0]
 8016ea2:	b143      	cbz	r3, 8016eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016ea4:	7b5a      	ldrb	r2, [r3, #13]
 8016ea6:	7a9b      	ldrb	r3, [r3, #10]
 8016ea8:	0052      	lsls	r2, r2, #1
 8016eaa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016eae:	4313      	orrs	r3, r2
 8016eb0:	bf0c      	ite	eq
 8016eb2:	2301      	moveq	r3, #1
 8016eb4:	2300      	movne	r3, #0
 8016eb6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016eba:	e7dc      	b.n	8016e76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016ebc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8016ec4:	d804      	bhi.n	8016ed0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016ec6:	4639      	mov	r1, r7
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f7ff fd15 	bl	80168f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016ece:	e7e6      	b.n	8016e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016ed0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d0e3      	beq.n	8016ea0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016ed8:	f640 1302 	movw	r3, #2306	@ 0x902
 8016edc:	429d      	cmp	r5, r3
 8016ede:	d1df      	bne.n	8016ea0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016ee0:	4601      	mov	r1, r0
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f7ff fcd8 	bl	8016898 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016ee8:	e7d9      	b.n	8016e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016eea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8016eea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eee:	461e      	mov	r6, r3
 8016ef0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	4617      	mov	r7, r2
 8016ef6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016efa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016efe:	f7ef fc2d 	bl	800675c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016f02:	4605      	mov	r5, r0
 8016f04:	b918      	cbnz	r0, 8016f0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8016f06:	6030      	str	r0, [r6, #0]
 8016f08:	4628      	mov	r0, r5
 8016f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	4601      	mov	r1, r0
 8016f12:	4638      	mov	r0, r7
 8016f14:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8016f18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f1c:	47c8      	blx	r9
 8016f1e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8016f22:	4602      	mov	r2, r0
 8016f24:	6030      	str	r0, [r6, #0]
 8016f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016f2a:	d213      	bcs.n	8016f54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8016f2c:	4643      	mov	r3, r8
 8016f2e:	4639      	mov	r1, r7
 8016f30:	4620      	mov	r0, r4
 8016f32:	f7ff fded 	bl	8016b10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016f36:	6030      	str	r0, [r6, #0]
 8016f38:	6833      	ldr	r3, [r6, #0]
 8016f3a:	b143      	cbz	r3, 8016f4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8016f3c:	7b5a      	ldrb	r2, [r3, #13]
 8016f3e:	7a9b      	ldrb	r3, [r3, #10]
 8016f40:	0052      	lsls	r2, r2, #1
 8016f42:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8016f46:	4313      	orrs	r3, r2
 8016f48:	bf0c      	ite	eq
 8016f4a:	2301      	moveq	r3, #1
 8016f4c:	2300      	movne	r3, #0
 8016f4e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8016f52:	e7d9      	b.n	8016f08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8016f54:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8016f5c:	d804      	bhi.n	8016f68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8016f5e:	4639      	mov	r1, r7
 8016f60:	4620      	mov	r0, r4
 8016f62:	f7ff fcc9 	bl	80168f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016f66:	e7e6      	b.n	8016f36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8016f68:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d0e3      	beq.n	8016f38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016f70:	f640 1302 	movw	r3, #2306	@ 0x902
 8016f74:	429d      	cmp	r5, r3
 8016f76:	d1df      	bne.n	8016f38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016f78:	4601      	mov	r1, r0
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	f7ff fc8c 	bl	8016898 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016f80:	e7d9      	b.n	8016f36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08016f82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016f82:	b510      	push	{r4, lr}
 8016f84:	4604      	mov	r4, r0
 8016f86:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8016f8a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016f8c:	b1e1      	cbz	r1, 8016fc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016f8e:	2b0a      	cmp	r3, #10
 8016f90:	d02d      	beq.n	8016fee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016f92:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016f94:	3901      	subs	r1, #1
 8016f96:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016f9a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8016f9c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8016fa0:	1c51      	adds	r1, r2, #1
 8016fa2:	b289      	uxth	r1, r1
 8016fa4:	2901      	cmp	r1, #1
 8016fa6:	bf8a      	itet	hi
 8016fa8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016fac:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8016fae:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8016fb0:	1c5a      	adds	r2, r3, #1
 8016fb2:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016fb4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016fb6:	4413      	add	r3, r2
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	2b09      	cmp	r3, #9
 8016fbc:	bf88      	it	hi
 8016fbe:	3b0a      	subhi	r3, #10
 8016fc0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016fc4:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016fc6:	e7de      	b.n	8016f86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016fc8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016fca:	2b0a      	cmp	r3, #10
 8016fcc:	d00f      	beq.n	8016fee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f7ff fc21 	bl	8016816 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016fd4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016fd6:	1c5a      	adds	r2, r3, #1
 8016fd8:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016fda:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016fdc:	4413      	add	r3, r2
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	2b09      	cmp	r3, #9
 8016fe2:	bf88      	it	hi
 8016fe4:	3b0a      	subhi	r3, #10
 8016fe6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016fea:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016fec:	e7ec      	b.n	8016fc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016fee:	bd10      	pop	{r4, pc}

08016ff0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016ff0:	b538      	push	{r3, r4, r5, lr}
 8016ff2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016ffa:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8016ffc:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8016ffe:	3a01      	subs	r2, #1
 8017000:	8702      	strh	r2, [r0, #56]	@ 0x38
 8017002:	1c5a      	adds	r2, r3, #1
 8017004:	b292      	uxth	r2, r2
 8017006:	2a09      	cmp	r2, #9
 8017008:	bf8a      	itet	hi
 801700a:	3b09      	subhi	r3, #9
 801700c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801700e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8017010:	f7ff ffb7 	bl	8016f82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017014:	8c23      	ldrh	r3, [r4, #32]
 8017016:	2b01      	cmp	r3, #1
 8017018:	bf9c      	itt	ls
 801701a:	3301      	addls	r3, #1
 801701c:	8423      	strhls	r3, [r4, #32]
 801701e:	8be3      	ldrh	r3, [r4, #30]
 8017020:	b90b      	cbnz	r3, 8017026 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017022:	2302      	movs	r3, #2
 8017024:	83e3      	strh	r3, [r4, #30]
 8017026:	8be3      	ldrh	r3, [r4, #30]
 8017028:	4628      	mov	r0, r5
 801702a:	3b01      	subs	r3, #1
 801702c:	b29b      	uxth	r3, r3
 801702e:	83e3      	strh	r3, [r4, #30]
 8017030:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017034:	8365      	strh	r5, [r4, #26]
 8017036:	bd38      	pop	{r3, r4, r5, pc}

08017038 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017038:	428a      	cmp	r2, r1
 801703a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801703e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8017040:	d932      	bls.n	80170a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017042:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8017044:	1a54      	subs	r4, r2, r1
 8017046:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801704a:	19ee      	adds	r6, r5, r7
 801704c:	fa1f fe84 	uxth.w	lr, r4
 8017050:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8017054:	3e01      	subs	r6, #1
 8017056:	b2b4      	uxth	r4, r6
 8017058:	eba4 090e 	sub.w	r9, r4, lr
 801705c:	fa1f f989 	uxth.w	r9, r9
 8017060:	2c09      	cmp	r4, #9
 8017062:	4626      	mov	r6, r4
 8017064:	bf88      	it	hi
 8017066:	f1a4 060a 	subhi.w	r6, r4, #10
 801706a:	f1bc 0f00 	cmp.w	ip, #0
 801706e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017072:	bf08      	it	eq
 8017074:	f04f 0c02 	moveq.w	ip, #2
 8017078:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801707c:	b2a4      	uxth	r4, r4
 801707e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017082:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8017086:	454c      	cmp	r4, r9
 8017088:	fa1f fc8c 	uxth.w	ip, ip
 801708c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017090:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8017094:	d1e4      	bne.n	8017060 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017096:	eba5 050e 	sub.w	r5, r5, lr
 801709a:	eb0e 0408 	add.w	r4, lr, r8
 801709e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80170a2:	8705      	strh	r5, [r0, #56]	@ 0x38
 80170a4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80170a8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80170aa:	250a      	movs	r5, #10
 80170ac:	1a64      	subs	r4, r4, r1
 80170ae:	4439      	add	r1, r7
 80170b0:	b289      	uxth	r1, r1
 80170b2:	8704      	strh	r4, [r0, #56]	@ 0x38
 80170b4:	2909      	cmp	r1, #9
 80170b6:	bf88      	it	hi
 80170b8:	390a      	subhi	r1, #10
 80170ba:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80170bc:	b18a      	cbz	r2, 80170e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80170be:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80170c0:	3a01      	subs	r2, #1
 80170c2:	3101      	adds	r1, #1
 80170c4:	b292      	uxth	r2, r2
 80170c6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80170ca:	8701      	strh	r1, [r0, #56]	@ 0x38
 80170cc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80170ce:	b901      	cbnz	r1, 80170d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80170d0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80170d2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80170d4:	3901      	subs	r1, #1
 80170d6:	b289      	uxth	r1, r1
 80170d8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80170da:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80170de:	844c      	strh	r4, [r1, #34]	@ 0x22
 80170e0:	e7ec      	b.n	80170bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80170e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170e6:	f7ff bf4c 	b.w	8016f82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080170ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80170ea:	b570      	push	{r4, r5, r6, lr}
 80170ec:	2500      	movs	r5, #0
 80170ee:	4295      	cmp	r5, r2
 80170f0:	d011      	beq.n	8017116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80170f2:	8bc4      	ldrh	r4, [r0, #30]
 80170f4:	f831 6b02 	ldrh.w	r6, [r1], #2
 80170f8:	4414      	add	r4, r2
 80170fa:	3c01      	subs	r4, #1
 80170fc:	1b64      	subs	r4, r4, r5
 80170fe:	b2a4      	uxth	r4, r4
 8017100:	2c01      	cmp	r4, #1
 8017102:	bf88      	it	hi
 8017104:	3c02      	subhi	r4, #2
 8017106:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801710a:	8b64      	ldrh	r4, [r4, #26]
 801710c:	42b4      	cmp	r4, r6
 801710e:	d117      	bne.n	8017140 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017110:	3501      	adds	r5, #1
 8017112:	b2ad      	uxth	r5, r5
 8017114:	e7eb      	b.n	80170ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017116:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801711a:	2400      	movs	r4, #0
 801711c:	4413      	add	r3, r2
 801711e:	b2a2      	uxth	r2, r4
 8017120:	429a      	cmp	r2, r3
 8017122:	da0f      	bge.n	8017144 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017124:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8017126:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801712a:	3401      	adds	r4, #1
 801712c:	4432      	add	r2, r6
 801712e:	b292      	uxth	r2, r2
 8017130:	2a09      	cmp	r2, #9
 8017132:	bf88      	it	hi
 8017134:	3a0a      	subhi	r2, #10
 8017136:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801713a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801713c:	42aa      	cmp	r2, r5
 801713e:	d0ee      	beq.n	801711e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017140:	2000      	movs	r0, #0
 8017142:	bd70      	pop	{r4, r5, r6, pc}
 8017144:	2001      	movs	r0, #1
 8017146:	e7fc      	b.n	8017142 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017148 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714c:	4605      	mov	r5, r0
 801714e:	4616      	mov	r6, r2
 8017150:	1c8c      	adds	r4, r1, #2
 8017152:	8809      	ldrh	r1, [r1, #0]
 8017154:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017158:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801715c:	42b3      	cmp	r3, r6
 801715e:	d124      	bne.n	80171aa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017160:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017164:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017168:	f001 070f 	and.w	r7, r1, #15
 801716c:	4652      	mov	r2, sl
 801716e:	f8cd 8000 	str.w	r8, [sp]
 8017172:	464b      	mov	r3, r9
 8017174:	4621      	mov	r1, r4
 8017176:	4628      	mov	r0, r5
 8017178:	f7ff ffb7 	bl	80170ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801717c:	4683      	mov	fp, r0
 801717e:	b168      	cbz	r0, 801719c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017180:	eb0a 0109 	add.w	r1, sl, r9
 8017184:	463a      	mov	r2, r7
 8017186:	4628      	mov	r0, r5
 8017188:	4441      	add	r1, r8
 801718a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801718e:	4649      	mov	r1, r9
 8017190:	f7ff ff52 	bl	8017038 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017194:	4658      	mov	r0, fp
 8017196:	b003      	add	sp, #12
 8017198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719c:	eb07 010a 	add.w	r1, r7, sl
 80171a0:	4449      	add	r1, r9
 80171a2:	4441      	add	r1, r8
 80171a4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80171a8:	e7d2      	b.n	8017150 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80171aa:	f04f 0b00 	mov.w	fp, #0
 80171ae:	e7f1      	b.n	8017194 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080171b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80171b0:	b570      	push	{r4, r5, r6, lr}
 80171b2:	8810      	ldrh	r0, [r2, #0]
 80171b4:	4298      	cmp	r0, r3
 80171b6:	d817      	bhi.n	80171e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171b8:	1e48      	subs	r0, r1, #1
 80171ba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80171be:	4298      	cmp	r0, r3
 80171c0:	d312      	bcc.n	80171e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171c2:	2400      	movs	r4, #0
 80171c4:	428c      	cmp	r4, r1
 80171c6:	d20f      	bcs.n	80171e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171c8:	1860      	adds	r0, r4, r1
 80171ca:	1040      	asrs	r0, r0, #1
 80171cc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80171d0:	0085      	lsls	r5, r0, #2
 80171d2:	42b3      	cmp	r3, r6
 80171d4:	d902      	bls.n	80171dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80171d6:	3001      	adds	r0, #1
 80171d8:	b284      	uxth	r4, r0
 80171da:	e7f3      	b.n	80171c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80171dc:	d201      	bcs.n	80171e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80171de:	b281      	uxth	r1, r0
 80171e0:	e7f0      	b.n	80171c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80171e2:	442a      	add	r2, r5
 80171e4:	8850      	ldrh	r0, [r2, #2]
 80171e6:	bd70      	pop	{r4, r5, r6, pc}
 80171e8:	2000      	movs	r0, #0
 80171ea:	e7fc      	b.n	80171e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080171ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80171ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80171f2:	4604      	mov	r4, r0
 80171f4:	260b      	movs	r6, #11
 80171f6:	886f      	ldrh	r7, [r5, #2]
 80171f8:	087f      	lsrs	r7, r7, #1
 80171fa:	3e01      	subs	r6, #1
 80171fc:	d013      	beq.n	8017226 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80171fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017200:	462a      	mov	r2, r5
 8017202:	4639      	mov	r1, r7
 8017204:	4620      	mov	r0, r4
 8017206:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801720a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801720e:	4643      	mov	r3, r8
 8017210:	f7ff ffce 	bl	80171b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017214:	b138      	cbz	r0, 8017226 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017216:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801721a:	4642      	mov	r2, r8
 801721c:	4620      	mov	r0, r4
 801721e:	f7ff ff93 	bl	8017148 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017222:	2800      	cmp	r0, #0
 8017224:	d1e9      	bne.n	80171fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801722c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801722c:	b570      	push	{r4, r5, r6, lr}
 801722e:	694a      	ldr	r2, [r1, #20]
 8017230:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017232:	684b      	ldr	r3, [r1, #4]
 8017234:	1b54      	subs	r4, r2, r5
 8017236:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017238:	f000 8106 	beq.w	8017448 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801723c:	1b9b      	subs	r3, r3, r6
 801723e:	d003      	beq.n	8017248 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017240:	4363      	muls	r3, r4
 8017242:	2210      	movs	r2, #16
 8017244:	fb93 f3f2 	sdiv	r3, r3, r2
 8017248:	680c      	ldr	r4, [r1, #0]
 801724a:	698a      	ldr	r2, [r1, #24]
 801724c:	1b65      	subs	r5, r4, r5
 801724e:	f000 80fd 	beq.w	801744c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017252:	1b92      	subs	r2, r2, r6
 8017254:	d003      	beq.n	801725e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017256:	436a      	muls	r2, r5
 8017258:	2410      	movs	r4, #16
 801725a:	fb92 f2f4 	sdiv	r2, r2, r4
 801725e:	1a9b      	subs	r3, r3, r2
 8017260:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8017488 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017264:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017268:	460a      	mov	r2, r1
 801726a:	ee07 3a90 	vmov	s15, r3
 801726e:	f100 040c 	add.w	r4, r0, #12
 8017272:	4603      	mov	r3, r0
 8017274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017278:	ee67 7a84 	vmul.f32	s15, s15, s8
 801727c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017280:	eeb1 6a43 	vneg.f32	s12, s6
 8017284:	edd2 7a02 	vldr	s15, [r2, #8]
 8017288:	3214      	adds	r2, #20
 801728a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801728e:	ece3 6a01 	vstmia	r3!, {s13}
 8017292:	429c      	cmp	r4, r3
 8017294:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801729c:	edc3 7a02 	vstr	s15, [r3, #8]
 80172a0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80172a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172a8:	edc3 7a05 	vstr	s15, [r3, #20]
 80172ac:	d1ea      	bne.n	8017284 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80172ae:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80172b0:	698b      	ldr	r3, [r1, #24]
 80172b2:	edd0 4a02 	vldr	s9, [r0, #8]
 80172b6:	1a9b      	subs	r3, r3, r2
 80172b8:	edd0 3a00 	vldr	s7, [r0]
 80172bc:	edd0 6a01 	vldr	s13, [r0, #4]
 80172c0:	ee07 3a90 	vmov	s15, r3
 80172c4:	684b      	ldr	r3, [r1, #4]
 80172c6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80172ca:	ed90 5a05 	vldr	s10, [r0, #20]
 80172ce:	1a9b      	subs	r3, r3, r2
 80172d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80172d8:	ed90 2a03 	vldr	s4, [r0, #12]
 80172dc:	ee07 3a10 	vmov	s14, r3
 80172e0:	edd0 5a04 	vldr	s11, [r0, #16]
 80172e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80172e8:	ed90 1a07 	vldr	s2, [r0, #28]
 80172ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172f0:	edd0 2a06 	vldr	s5, [r0, #24]
 80172f4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80172f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80172fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017300:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017304:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017308:	ee67 7a83 	vmul.f32	s15, s15, s6
 801730c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8017310:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017312:	694a      	ldr	r2, [r1, #20]
 8017314:	1b13      	subs	r3, r2, r4
 8017316:	ee07 3a10 	vmov	s14, r3
 801731a:	680b      	ldr	r3, [r1, #0]
 801731c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017320:	1b1b      	subs	r3, r3, r4
 8017322:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017326:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801732a:	ee07 3a10 	vmov	s14, r3
 801732e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017332:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017336:	eee6 4a87 	vfma.f32	s9, s13, s14
 801733a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801733e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8017342:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017344:	698b      	ldr	r3, [r1, #24]
 8017346:	1a9b      	subs	r3, r3, r2
 8017348:	ee06 3a90 	vmov	s13, r3
 801734c:	684b      	ldr	r3, [r1, #4]
 801734e:	1a9b      	subs	r3, r3, r2
 8017350:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017354:	ee07 3a10 	vmov	s14, r3
 8017358:	ee66 6a84 	vmul.f32	s13, s13, s8
 801735c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017360:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017364:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017368:	eee5 6a87 	vfma.f32	s13, s11, s14
 801736c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017370:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8017374:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017376:	694a      	ldr	r2, [r1, #20]
 8017378:	1b13      	subs	r3, r2, r4
 801737a:	ee07 3a10 	vmov	s14, r3
 801737e:	680b      	ldr	r3, [r1, #0]
 8017380:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017384:	1b1b      	subs	r3, r3, r4
 8017386:	ee27 7a04 	vmul.f32	s14, s14, s8
 801738a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801738e:	ee07 3a10 	vmov	s14, r3
 8017392:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017396:	ee27 7a04 	vmul.f32	s14, s14, s8
 801739a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801739e:	edd0 5a08 	vldr	s11, [r0, #32]
 80173a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80173a6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80173aa:	ee25 5a06 	vmul.f32	s10, s10, s12
 80173ae:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80173b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80173b4:	698b      	ldr	r3, [r1, #24]
 80173b6:	1a9b      	subs	r3, r3, r2
 80173b8:	ee07 3a10 	vmov	s14, r3
 80173bc:	684b      	ldr	r3, [r1, #4]
 80173be:	1a9b      	subs	r3, r3, r2
 80173c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173c4:	ee01 3a90 	vmov	s3, r3
 80173c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80173d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80173d4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80173d8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80173dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80173e0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80173e4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80173e6:	694a      	ldr	r2, [r1, #20]
 80173e8:	1b13      	subs	r3, r2, r4
 80173ea:	ee03 3a10 	vmov	s6, r3
 80173ee:	680b      	ldr	r3, [r1, #0]
 80173f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80173f4:	1b1b      	subs	r3, r3, r4
 80173f6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80173fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80173fe:	ee03 3a10 	vmov	s6, r3
 8017402:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017406:	ee23 4a04 	vmul.f32	s8, s6, s8
 801740a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801740e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017412:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017416:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801741a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801741e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017426:	dd13      	ble.n	8017450 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801742c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017430:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8017432:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801743e:	dd15      	ble.n	801746c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017444:	6403      	str	r3, [r0, #64]	@ 0x40
 8017446:	bd70      	pop	{r4, r5, r6, pc}
 8017448:	4623      	mov	r3, r4
 801744a:	e6fd      	b.n	8017248 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801744c:	462a      	mov	r2, r5
 801744e:	e706      	b.n	801725e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017450:	d502      	bpl.n	8017458 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017452:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017456:	e7e9      	b.n	801742c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017458:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801745c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017460:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017468:	dade      	bge.n	8017428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801746a:	e7f2      	b.n	8017452 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801746c:	d502      	bpl.n	8017474 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801746e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017472:	e7e7      	b.n	8017444 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017474:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017478:	eee3 4a86 	vfma.f32	s9, s7, s12
 801747c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017484:	dadc      	bge.n	8017440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017486:	e7f2      	b.n	801746e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017488:	3d800000 	.word	0x3d800000

0801748c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801748c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017490:	2714      	movs	r7, #20
 8017492:	435f      	muls	r7, r3
 8017494:	eb02 0c07 	add.w	ip, r2, r7
 8017498:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801749c:	f115 0e0f 	adds.w	lr, r5, #15
 80174a0:	f100 80a2 	bmi.w	80175e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80174a4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80174a8:	9c08      	ldr	r4, [sp, #32]
 80174aa:	2614      	movs	r6, #20
 80174ac:	f8c0 e014 	str.w	lr, [r0, #20]
 80174b0:	4366      	muls	r6, r4
 80174b2:	eb02 0806 	add.w	r8, r2, r6
 80174b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80174ba:	f115 040f 	adds.w	r4, r5, #15
 80174be:	f100 809f 	bmi.w	8017600 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80174c2:	1124      	asrs	r4, r4, #4
 80174c4:	eba4 040e 	sub.w	r4, r4, lr
 80174c8:	6184      	str	r4, [r0, #24]
 80174ca:	2c00      	cmp	r4, #0
 80174cc:	f000 808a 	beq.w	80175e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80174d0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80174d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80174d8:	5995      	ldr	r5, [r2, r6]
 80174da:	eba4 0809 	sub.w	r8, r4, r9
 80174de:	59d4      	ldr	r4, [r2, r7]
 80174e0:	eba5 0a04 	sub.w	sl, r5, r4
 80174e4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80174e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80174ec:	fb0e fe05 	mul.w	lr, lr, r5
 80174f0:	fb0a ee19 	mls	lr, sl, r9, lr
 80174f4:	fb08 e404 	mla	r4, r8, r4, lr
 80174f8:	3c01      	subs	r4, #1
 80174fa:	19a4      	adds	r4, r4, r6
 80174fc:	f100 808c 	bmi.w	8017618 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8017500:	fb94 fef6 	sdiv	lr, r4, r6
 8017504:	fb06 441e 	mls	r4, r6, lr, r4
 8017508:	f8c0 e000 	str.w	lr, [r0]
 801750c:	6104      	str	r4, [r0, #16]
 801750e:	2d00      	cmp	r5, #0
 8017510:	f2c0 8095 	blt.w	801763e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8017514:	fb95 f4f6 	sdiv	r4, r5, r6
 8017518:	fb06 5514 	mls	r5, r6, r4, r5
 801751c:	6044      	str	r4, [r0, #4]
 801751e:	6085      	str	r5, [r0, #8]
 8017520:	60c6      	str	r6, [r0, #12]
 8017522:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017526:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801752a:	6945      	ldr	r5, [r0, #20]
 801752c:	59d2      	ldr	r2, [r2, r7]
 801752e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8017532:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8017660 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8017536:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801753a:	ee07 4a10 	vmov	s14, r4
 801753e:	6804      	ldr	r4, [r0, #0]
 8017540:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017548:	ee07 2a90 	vmov	s15, r2
 801754c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017558:	edd3 6a00 	vldr	s13, [r3]
 801755c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017560:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8017564:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017568:	edc0 6a07 	vstr	s13, [r0, #28]
 801756c:	edd0 6a01 	vldr	s13, [r0, #4]
 8017570:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8017574:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017578:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801757c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017580:	ed80 6a08 	vstr	s12, [r0, #32]
 8017584:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8017586:	6242      	str	r2, [r0, #36]	@ 0x24
 8017588:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801758c:	ed93 6a03 	vldr	s12, [r3, #12]
 8017590:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017594:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017598:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801759c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80175a0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80175a4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80175a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80175ac:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80175b0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80175b2:	6302      	str	r2, [r0, #48]	@ 0x30
 80175b4:	ed93 6a06 	vldr	s12, [r3, #24]
 80175b8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80175bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175c0:	eeb0 7a46 	vmov.f32	s14, s12
 80175c4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80175c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80175cc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80175d0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80175d4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80175d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80175dc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80175e0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80175e2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80175e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175e8:	2410      	movs	r4, #16
 80175ea:	f1c5 0501 	rsb	r5, r5, #1
 80175ee:	fb9e fef4 	sdiv	lr, lr, r4
 80175f2:	f015 050f 	ands.w	r5, r5, #15
 80175f6:	bf18      	it	ne
 80175f8:	2501      	movne	r5, #1
 80175fa:	ebae 0e05 	sub.w	lr, lr, r5
 80175fe:	e753      	b.n	80174a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017600:	f04f 0910 	mov.w	r9, #16
 8017604:	f1c5 0501 	rsb	r5, r5, #1
 8017608:	fb94 f4f9 	sdiv	r4, r4, r9
 801760c:	f015 050f 	ands.w	r5, r5, #15
 8017610:	bf18      	it	ne
 8017612:	2501      	movne	r5, #1
 8017614:	1b64      	subs	r4, r4, r5
 8017616:	e755      	b.n	80174c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017618:	4264      	negs	r4, r4
 801761a:	fb94 fef6 	sdiv	lr, r4, r6
 801761e:	f1ce 0800 	rsb	r8, lr, #0
 8017622:	fb06 441e 	mls	r4, r6, lr, r4
 8017626:	f8c0 8000 	str.w	r8, [r0]
 801762a:	6104      	str	r4, [r0, #16]
 801762c:	2c00      	cmp	r4, #0
 801762e:	f43f af6e 	beq.w	801750e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8017632:	ea6f 0e0e 	mvn.w	lr, lr
 8017636:	1b34      	subs	r4, r6, r4
 8017638:	f8c0 e000 	str.w	lr, [r0]
 801763c:	e766      	b.n	801750c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801763e:	426d      	negs	r5, r5
 8017640:	fb95 f4f6 	sdiv	r4, r5, r6
 8017644:	f1c4 0e00 	rsb	lr, r4, #0
 8017648:	fb06 5514 	mls	r5, r6, r4, r5
 801764c:	f8c0 e004 	str.w	lr, [r0, #4]
 8017650:	6085      	str	r5, [r0, #8]
 8017652:	2d00      	cmp	r5, #0
 8017654:	f43f af64 	beq.w	8017520 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017658:	43e4      	mvns	r4, r4
 801765a:	1b75      	subs	r5, r6, r5
 801765c:	6044      	str	r4, [r0, #4]
 801765e:	e75e      	b.n	801751e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017660:	3d800000 	.word	0x3d800000

08017664 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8017664:	4602      	mov	r2, r0
 8017666:	b148      	cbz	r0, 801767c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8017668:	2300      	movs	r3, #0
 801766a:	b298      	uxth	r0, r3
 801766c:	3301      	adds	r3, #1
 801766e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017672:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8017676:	2900      	cmp	r1, #0
 8017678:	d1f7      	bne.n	801766a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801767a:	4770      	bx	lr
 801767c:	4770      	bx	lr

0801767e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801767e:	b530      	push	{r4, r5, lr}
 8017680:	4604      	mov	r4, r0
 8017682:	b159      	cbz	r1, 801769c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8017684:	b148      	cbz	r0, 801769a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017686:	2300      	movs	r3, #0
 8017688:	b298      	uxth	r0, r3
 801768a:	4282      	cmp	r2, r0
 801768c:	d905      	bls.n	801769a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801768e:	5ccd      	ldrb	r5, [r1, r3]
 8017690:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8017694:	3301      	adds	r3, #1
 8017696:	2d00      	cmp	r5, #0
 8017698:	d1f6      	bne.n	8017688 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801769a:	bd30      	pop	{r4, r5, pc}
 801769c:	4608      	mov	r0, r1
 801769e:	e7fc      	b.n	801769a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080176a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 80176a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176a2:	b08b      	sub	sp, #44	@ 0x2c
 80176a4:	468c      	mov	ip, r1
 80176a6:	4604      	mov	r4, r0
 80176a8:	2100      	movs	r1, #0
 80176aa:	261f      	movs	r6, #31
 80176ac:	af01      	add	r7, sp, #4
 80176ae:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80176b2:	1e71      	subs	r1, r6, #1
 80176b4:	fb94 fef3 	sdiv	lr, r4, r3
 80176b8:	fb03 441e 	mls	r4, r3, lr, r4
 80176bc:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80176c0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80176c4:	b2ec      	uxtb	r4, r5
 80176c6:	2d09      	cmp	r5, #9
 80176c8:	bfd4      	ite	le
 80176ca:	3430      	addle	r4, #48	@ 0x30
 80176cc:	3457      	addgt	r4, #87	@ 0x57
 80176ce:	b2e4      	uxtb	r4, r4
 80176d0:	55bc      	strb	r4, [r7, r6]
 80176d2:	4674      	mov	r4, lr
 80176d4:	b974      	cbnz	r4, 80176f4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80176d6:	2800      	cmp	r0, #0
 80176d8:	da05      	bge.n	80176e6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80176da:	ab0a      	add	r3, sp, #40	@ 0x28
 80176dc:	4419      	add	r1, r3
 80176de:	232d      	movs	r3, #45	@ 0x2d
 80176e0:	f801 3c24 	strb.w	r3, [r1, #-36]
 80176e4:	1eb1      	subs	r1, r6, #2
 80176e6:	3101      	adds	r1, #1
 80176e8:	4660      	mov	r0, ip
 80176ea:	4439      	add	r1, r7
 80176ec:	f7ff ffc7 	bl	801767e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80176f0:	b00b      	add	sp, #44	@ 0x2c
 80176f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176f4:	460e      	mov	r6, r1
 80176f6:	e7dc      	b.n	80176b2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080176f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80176f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176fa:	468c      	mov	ip, r1
 80176fc:	b08b      	sub	sp, #44	@ 0x2c
 80176fe:	2100      	movs	r1, #0
 8017700:	ae01      	add	r6, sp, #4
 8017702:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017706:	211f      	movs	r1, #31
 8017708:	fbb0 f7f3 	udiv	r7, r0, r3
 801770c:	fb03 0517 	mls	r5, r3, r7, r0
 8017710:	4638      	mov	r0, r7
 8017712:	b2ec      	uxtb	r4, r5
 8017714:	2d09      	cmp	r5, #9
 8017716:	bfd4      	ite	le
 8017718:	3430      	addle	r4, #48	@ 0x30
 801771a:	3457      	addgt	r4, #87	@ 0x57
 801771c:	b2e4      	uxtb	r4, r4
 801771e:	558c      	strb	r4, [r1, r6]
 8017720:	1e4c      	subs	r4, r1, #1
 8017722:	b92f      	cbnz	r7, 8017730 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8017724:	4431      	add	r1, r6
 8017726:	4660      	mov	r0, ip
 8017728:	f7ff ffa9 	bl	801767e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801772c:	b00b      	add	sp, #44	@ 0x2c
 801772e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017730:	4621      	mov	r1, r4
 8017732:	e7e9      	b.n	8017708 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08017734 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8017734:	b410      	push	{r4}
 8017736:	b131      	cbz	r1, 8017746 <_ZN8touchgfx7Unicode4itoaElPtti+0x12>
 8017738:	1e9c      	subs	r4, r3, #2
 801773a:	2c22      	cmp	r4, #34	@ 0x22
 801773c:	d803      	bhi.n	8017746 <_ZN8touchgfx7Unicode4itoaElPtti+0x12>
 801773e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017742:	f7ff bfad 	b.w	80176a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8017746:	f85d 4b04 	ldr.w	r4, [sp], #4
 801774a:	4770      	bx	lr

0801774c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017750:	b085      	sub	sp, #20
 8017752:	4691      	mov	r9, r2
 8017754:	6802      	ldr	r2, [r0, #0]
 8017756:	4688      	mov	r8, r1
 8017758:	461c      	mov	r4, r3
 801775a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801775e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8017762:	4683      	mov	fp, r0
 8017764:	4610      	mov	r0, r2
 8017766:	9103      	str	r1, [sp, #12]
 8017768:	9302      	str	r3, [sp, #8]
 801776a:	9201      	str	r2, [sp, #4]
 801776c:	f7ff ff7a 	bl	8017664 <_ZN8touchgfx7Unicode6strlenEPKt>
 8017770:	f1b8 0f00 	cmp.w	r8, #0
 8017774:	bf0c      	ite	eq
 8017776:	4684      	moveq	ip, r0
 8017778:	f100 0c01 	addne.w	ip, r0, #1
 801777c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8017780:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8017784:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017786:	fa1f fc8c 	uxth.w	ip, ip
 801778a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801778c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8017790:	9903      	ldr	r1, [sp, #12]
 8017792:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017796:	d041      	beq.n	801781c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017798:	d834      	bhi.n	8017804 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801779a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801779e:	d059      	beq.n	8017854 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80177a0:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 80177a4:	d03a      	beq.n	801781c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80177a6:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 80177aa:	d034      	beq.n	8017816 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80177ac:	2400      	movs	r4, #0
 80177ae:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80177b2:	3a01      	subs	r2, #1
 80177b4:	b169      	cbz	r1, 80177d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80177b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80177b8:	458c      	cmp	ip, r1
 80177ba:	da09      	bge.n	80177d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80177bc:	eba1 010c 	sub.w	r1, r1, ip
 80177c0:	b289      	uxth	r1, r1
 80177c2:	b933      	cbnz	r3, 80177d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80177c4:	2e00      	cmp	r6, #0
 80177c6:	d051      	beq.n	801786c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	d04f      	beq.n	801786c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80177cc:	440c      	add	r4, r1
 80177ce:	b2a4      	uxth	r4, r4
 80177d0:	2100      	movs	r1, #0
 80177d2:	682b      	ldr	r3, [r5, #0]
 80177d4:	4293      	cmp	r3, r2
 80177d6:	da07      	bge.n	80177e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80177d8:	f1b8 0f00 	cmp.w	r8, #0
 80177dc:	d004      	beq.n	80177e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80177de:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80177e2:	682b      	ldr	r3, [r5, #0]
 80177e4:	3301      	adds	r3, #1
 80177e6:	602b      	str	r3, [r5, #0]
 80177e8:	2730      	movs	r7, #48	@ 0x30
 80177ea:	2c00      	cmp	r4, #0
 80177ec:	d04e      	beq.n	801788c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80177ee:	682e      	ldr	r6, [r5, #0]
 80177f0:	3c01      	subs	r4, #1
 80177f2:	42b2      	cmp	r2, r6
 80177f4:	b2a4      	uxth	r4, r4
 80177f6:	dd49      	ble.n	801788c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80177f8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80177fc:	682b      	ldr	r3, [r5, #0]
 80177fe:	3301      	adds	r3, #1
 8017800:	602b      	str	r3, [r5, #0]
 8017802:	e7f2      	b.n	80177ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8017804:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8017808:	d01d      	beq.n	8017846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801780a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801780e:	d002      	beq.n	8017816 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017810:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8017814:	e7c9      	b.n	80177aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8017816:	4684      	mov	ip, r0
 8017818:	f04f 0800 	mov.w	r8, #0
 801781c:	2c00      	cmp	r4, #0
 801781e:	d0c6      	beq.n	80177ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017820:	b947      	cbnz	r7, 8017834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017822:	2801      	cmp	r0, #1
 8017824:	d106      	bne.n	8017834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017826:	8814      	ldrh	r4, [r2, #0]
 8017828:	2c30      	cmp	r4, #48	@ 0x30
 801782a:	bf02      	ittt	eq
 801782c:	3202      	addeq	r2, #2
 801782e:	4638      	moveq	r0, r7
 8017830:	f8cb 2000 	streq.w	r2, [fp]
 8017834:	45bc      	cmp	ip, r7
 8017836:	da14      	bge.n	8017862 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8017838:	b2bf      	uxth	r7, r7
 801783a:	eba7 040c 	sub.w	r4, r7, ip
 801783e:	46bc      	mov	ip, r7
 8017840:	b2a4      	uxth	r4, r4
 8017842:	2600      	movs	r6, #0
 8017844:	e7b3      	b.n	80177ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017846:	4684      	mov	ip, r0
 8017848:	b16c      	cbz	r4, 8017866 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801784a:	42b8      	cmp	r0, r7
 801784c:	dd00      	ble.n	8017850 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801784e:	b2b8      	uxth	r0, r7
 8017850:	2400      	movs	r4, #0
 8017852:	e003      	b.n	801785c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8017854:	f04f 0c01 	mov.w	ip, #1
 8017858:	2400      	movs	r4, #0
 801785a:	4660      	mov	r0, ip
 801785c:	4626      	mov	r6, r4
 801785e:	46a0      	mov	r8, r4
 8017860:	e7a5      	b.n	80177ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017862:	2400      	movs	r4, #0
 8017864:	e7ed      	b.n	8017842 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8017866:	4626      	mov	r6, r4
 8017868:	46a0      	mov	r8, r4
 801786a:	e7a0      	b.n	80177ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801786c:	2900      	cmp	r1, #0
 801786e:	d0b0      	beq.n	80177d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017870:	2720      	movs	r7, #32
 8017872:	682e      	ldr	r6, [r5, #0]
 8017874:	2900      	cmp	r1, #0
 8017876:	d0ac      	beq.n	80177d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017878:	3901      	subs	r1, #1
 801787a:	4296      	cmp	r6, r2
 801787c:	b289      	uxth	r1, r1
 801787e:	daa7      	bge.n	80177d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017880:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017884:	682b      	ldr	r3, [r5, #0]
 8017886:	3301      	adds	r3, #1
 8017888:	602b      	str	r3, [r5, #0]
 801788a:	e7f2      	b.n	8017872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801788c:	b188      	cbz	r0, 80178b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801788e:	682b      	ldr	r3, [r5, #0]
 8017890:	3801      	subs	r0, #1
 8017892:	429a      	cmp	r2, r3
 8017894:	b280      	uxth	r0, r0
 8017896:	dd0c      	ble.n	80178b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017898:	f8db 3000 	ldr.w	r3, [fp]
 801789c:	1c9c      	adds	r4, r3, #2
 801789e:	f8cb 4000 	str.w	r4, [fp]
 80178a2:	881c      	ldrh	r4, [r3, #0]
 80178a4:	682b      	ldr	r3, [r5, #0]
 80178a6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80178aa:	682b      	ldr	r3, [r5, #0]
 80178ac:	3301      	adds	r3, #1
 80178ae:	602b      	str	r3, [r5, #0]
 80178b0:	e7ec      	b.n	801788c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80178b2:	2620      	movs	r6, #32
 80178b4:	b151      	cbz	r1, 80178cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80178b6:	6828      	ldr	r0, [r5, #0]
 80178b8:	3901      	subs	r1, #1
 80178ba:	4282      	cmp	r2, r0
 80178bc:	b289      	uxth	r1, r1
 80178be:	dd05      	ble.n	80178cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80178c0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80178c4:	682b      	ldr	r3, [r5, #0]
 80178c6:	3301      	adds	r3, #1
 80178c8:	602b      	str	r3, [r5, #0]
 80178ca:	e7f3      	b.n	80178b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80178cc:	b005      	add	sp, #20
 80178ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080178d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80178d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178d6:	2400      	movs	r4, #0
 80178d8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80178dc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 80178e0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 80178e4:	8014      	strh	r4, [r2, #0]
 80178e6:	701c      	strb	r4, [r3, #0]
 80178e8:	f888 4000 	strb.w	r4, [r8]
 80178ec:	f88c 4000 	strb.w	r4, [ip]
 80178f0:	f88e 4000 	strb.w	r4, [lr]
 80178f4:	703c      	strb	r4, [r7, #0]
 80178f6:	6804      	ldr	r4, [r0, #0]
 80178f8:	b1a4      	cbz	r4, 8017924 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80178fa:	8824      	ldrh	r4, [r4, #0]
 80178fc:	f04f 0901 	mov.w	r9, #1
 8017900:	b314      	cbz	r4, 8017948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017902:	2c2b      	cmp	r4, #43	@ 0x2b
 8017904:	d001      	beq.n	801790a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8017906:	2c20      	cmp	r4, #32
 8017908:	d110      	bne.n	801792c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801790a:	8014      	strh	r4, [r2, #0]
 801790c:	6804      	ldr	r4, [r0, #0]
 801790e:	b10c      	cbz	r4, 8017914 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8017910:	3402      	adds	r4, #2
 8017912:	6004      	str	r4, [r0, #0]
 8017914:	680c      	ldr	r4, [r1, #0]
 8017916:	b10c      	cbz	r4, 801791c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8017918:	3401      	adds	r4, #1
 801791a:	600c      	str	r4, [r1, #0]
 801791c:	6804      	ldr	r4, [r0, #0]
 801791e:	b17c      	cbz	r4, 8017940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8017920:	8824      	ldrh	r4, [r4, #0]
 8017922:	e7ed      	b.n	8017900 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017924:	680c      	ldr	r4, [r1, #0]
 8017926:	b17c      	cbz	r4, 8017948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017928:	7824      	ldrb	r4, [r4, #0]
 801792a:	e7e7      	b.n	80178fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801792c:	2c2d      	cmp	r4, #45	@ 0x2d
 801792e:	d102      	bne.n	8017936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8017930:	f883 9000 	strb.w	r9, [r3]
 8017934:	e7ea      	b.n	801790c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017936:	2c23      	cmp	r4, #35	@ 0x23
 8017938:	d107      	bne.n	801794a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801793a:	f888 9000 	strb.w	r9, [r8]
 801793e:	e7e5      	b.n	801790c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017940:	680c      	ldr	r4, [r1, #0]
 8017942:	b10c      	cbz	r4, 8017948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017944:	7824      	ldrb	r4, [r4, #0]
 8017946:	e7db      	b.n	8017900 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017948:	2400      	movs	r4, #0
 801794a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801794e:	2b09      	cmp	r3, #9
 8017950:	d901      	bls.n	8017956 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8017952:	2c2a      	cmp	r4, #42	@ 0x2a
 8017954:	d122      	bne.n	801799c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017956:	2301      	movs	r3, #1
 8017958:	2c30      	cmp	r4, #48	@ 0x30
 801795a:	f88e 3000 	strb.w	r3, [lr]
 801795e:	d10d      	bne.n	801797c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017960:	f88c 3000 	strb.w	r3, [ip]
 8017964:	6803      	ldr	r3, [r0, #0]
 8017966:	b10b      	cbz	r3, 801796c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8017968:	3302      	adds	r3, #2
 801796a:	6003      	str	r3, [r0, #0]
 801796c:	680b      	ldr	r3, [r1, #0]
 801796e:	b10b      	cbz	r3, 8017974 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8017970:	3301      	adds	r3, #1
 8017972:	600b      	str	r3, [r1, #0]
 8017974:	6803      	ldr	r3, [r0, #0]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d02f      	beq.n	80179da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801797a:	881c      	ldrh	r4, [r3, #0]
 801797c:	2c2a      	cmp	r4, #42	@ 0x2a
 801797e:	d135      	bne.n	80179ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017980:	f04f 33ff 	mov.w	r3, #4294967295
 8017984:	6033      	str	r3, [r6, #0]
 8017986:	6803      	ldr	r3, [r0, #0]
 8017988:	b10b      	cbz	r3, 801798e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801798a:	3302      	adds	r3, #2
 801798c:	6003      	str	r3, [r0, #0]
 801798e:	680b      	ldr	r3, [r1, #0]
 8017990:	b10b      	cbz	r3, 8017996 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8017992:	3301      	adds	r3, #1
 8017994:	600b      	str	r3, [r1, #0]
 8017996:	6803      	ldr	r3, [r0, #0]
 8017998:	b31b      	cbz	r3, 80179e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801799a:	881c      	ldrh	r4, [r3, #0]
 801799c:	2c2e      	cmp	r4, #46	@ 0x2e
 801799e:	d11a      	bne.n	80179d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80179a0:	2301      	movs	r3, #1
 80179a2:	703b      	strb	r3, [r7, #0]
 80179a4:	6803      	ldr	r3, [r0, #0]
 80179a6:	b10b      	cbz	r3, 80179ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80179a8:	3302      	adds	r3, #2
 80179aa:	6003      	str	r3, [r0, #0]
 80179ac:	680b      	ldr	r3, [r1, #0]
 80179ae:	b10b      	cbz	r3, 80179b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80179b0:	3301      	adds	r3, #1
 80179b2:	600b      	str	r3, [r1, #0]
 80179b4:	6803      	ldr	r3, [r0, #0]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d036      	beq.n	8017a28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80179ba:	881b      	ldrh	r3, [r3, #0]
 80179bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80179be:	d137      	bne.n	8017a30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80179c0:	f04f 33ff 	mov.w	r3, #4294967295
 80179c4:	602b      	str	r3, [r5, #0]
 80179c6:	6803      	ldr	r3, [r0, #0]
 80179c8:	b10b      	cbz	r3, 80179ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80179ca:	3302      	adds	r3, #2
 80179cc:	6003      	str	r3, [r0, #0]
 80179ce:	680b      	ldr	r3, [r1, #0]
 80179d0:	b10b      	cbz	r3, 80179d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80179d2:	3301      	adds	r3, #1
 80179d4:	600b      	str	r3, [r1, #0]
 80179d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179da:	680c      	ldr	r4, [r1, #0]
 80179dc:	b134      	cbz	r4, 80179ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80179de:	7824      	ldrb	r4, [r4, #0]
 80179e0:	e7cc      	b.n	801797c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80179e2:	680b      	ldr	r3, [r1, #0]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d0f6      	beq.n	80179d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80179e8:	781c      	ldrb	r4, [r3, #0]
 80179ea:	e7d7      	b.n	801799c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80179ec:	2300      	movs	r3, #0
 80179ee:	220a      	movs	r2, #10
 80179f0:	6033      	str	r3, [r6, #0]
 80179f2:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80179f6:	fa1f f38c 	uxth.w	r3, ip
 80179fa:	2b09      	cmp	r3, #9
 80179fc:	d8ce      	bhi.n	801799c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80179fe:	6833      	ldr	r3, [r6, #0]
 8017a00:	fb02 c303 	mla	r3, r2, r3, ip
 8017a04:	6033      	str	r3, [r6, #0]
 8017a06:	6803      	ldr	r3, [r0, #0]
 8017a08:	b10b      	cbz	r3, 8017a0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8017a0a:	3302      	adds	r3, #2
 8017a0c:	6003      	str	r3, [r0, #0]
 8017a0e:	680b      	ldr	r3, [r1, #0]
 8017a10:	b10b      	cbz	r3, 8017a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8017a12:	3301      	adds	r3, #1
 8017a14:	600b      	str	r3, [r1, #0]
 8017a16:	6803      	ldr	r3, [r0, #0]
 8017a18:	b10b      	cbz	r3, 8017a1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8017a1a:	881c      	ldrh	r4, [r3, #0]
 8017a1c:	e7e9      	b.n	80179f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017a1e:	680c      	ldr	r4, [r1, #0]
 8017a20:	2c00      	cmp	r4, #0
 8017a22:	d0e6      	beq.n	80179f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017a24:	7824      	ldrb	r4, [r4, #0]
 8017a26:	e7e4      	b.n	80179f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017a28:	680b      	ldr	r3, [r1, #0]
 8017a2a:	b10b      	cbz	r3, 8017a30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017a2c:	781b      	ldrb	r3, [r3, #0]
 8017a2e:	e7c5      	b.n	80179bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8017a30:	2200      	movs	r2, #0
 8017a32:	240a      	movs	r4, #10
 8017a34:	602a      	str	r2, [r5, #0]
 8017a36:	3b30      	subs	r3, #48	@ 0x30
 8017a38:	682a      	ldr	r2, [r5, #0]
 8017a3a:	b29e      	uxth	r6, r3
 8017a3c:	2e09      	cmp	r6, #9
 8017a3e:	d813      	bhi.n	8017a68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8017a40:	fb04 3302 	mla	r3, r4, r2, r3
 8017a44:	602b      	str	r3, [r5, #0]
 8017a46:	6803      	ldr	r3, [r0, #0]
 8017a48:	b10b      	cbz	r3, 8017a4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8017a4a:	3302      	adds	r3, #2
 8017a4c:	6003      	str	r3, [r0, #0]
 8017a4e:	680b      	ldr	r3, [r1, #0]
 8017a50:	b10b      	cbz	r3, 8017a56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8017a52:	3301      	adds	r3, #1
 8017a54:	600b      	str	r3, [r1, #0]
 8017a56:	6803      	ldr	r3, [r0, #0]
 8017a58:	b10b      	cbz	r3, 8017a5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8017a5a:	881b      	ldrh	r3, [r3, #0]
 8017a5c:	e7eb      	b.n	8017a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017a5e:	680b      	ldr	r3, [r1, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d0e8      	beq.n	8017a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	e7e6      	b.n	8017a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017a68:	2a06      	cmp	r2, #6
 8017a6a:	bfa8      	it	ge
 8017a6c:	2206      	movge	r2, #6
 8017a6e:	602a      	str	r2, [r5, #0]
 8017a70:	e7b1      	b.n	80179d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08017a72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8017a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a76:	b0a3      	sub	sp, #140	@ 0x8c
 8017a78:	2600      	movs	r6, #0
 8017a7a:	4607      	mov	r7, r0
 8017a7c:	4688      	mov	r8, r1
 8017a7e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8017a82:	4631      	mov	r1, r6
 8017a84:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8017a86:	4648      	mov	r0, r9
 8017a88:	960d      	str	r6, [sp, #52]	@ 0x34
 8017a8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017a8e:	2242      	movs	r2, #66	@ 0x42
 8017a90:	f00b fa1b 	bl	8022eca <memset>
 8017a94:	b15f      	cbz	r7, 8017aae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8017a96:	f108 3aff 	add.w	sl, r8, #4294967295
 8017a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a9e:	b152      	cbz	r2, 8017ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8017aa0:	8812      	ldrh	r2, [r2, #0]
 8017aa2:	b10a      	cbz	r2, 8017aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017aa4:	459a      	cmp	sl, r3
 8017aa6:	dc2e      	bgt.n	8017b06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017aae:	4638      	mov	r0, r7
 8017ab0:	b023      	add	sp, #140	@ 0x8c
 8017ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab6:	9a08      	ldr	r2, [sp, #32]
 8017ab8:	2a00      	cmp	r2, #0
 8017aba:	d0f5      	beq.n	8017aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017abc:	7812      	ldrb	r2, [r2, #0]
 8017abe:	e7f0      	b.n	8017aa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8017ac0:	2d00      	cmp	r5, #0
 8017ac2:	d0ea      	beq.n	8017a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017ac4:	782a      	ldrb	r2, [r5, #0]
 8017ac6:	b142      	cbz	r2, 8017ada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8017ac8:	2a25      	cmp	r2, #37	@ 0x25
 8017aca:	d001      	beq.n	8017ad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8017acc:	459a      	cmp	sl, r3
 8017ace:	dc08      	bgt.n	8017ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8017ad0:	f1bb 0f00 	cmp.w	fp, #0
 8017ad4:	d121      	bne.n	8017b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8017ad6:	2d00      	cmp	r5, #0
 8017ad8:	d0df      	beq.n	8017a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017ada:	782a      	ldrb	r2, [r5, #0]
 8017adc:	f04f 0b00 	mov.w	fp, #0
 8017ae0:	e01d      	b.n	8017b1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8017ae2:	f1bb 0f00 	cmp.w	fp, #0
 8017ae6:	d077      	beq.n	8017bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8017ae8:	f8bb 2000 	ldrh.w	r2, [fp]
 8017aec:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017af0:	f1bb 0f00 	cmp.w	fp, #0
 8017af4:	d002      	beq.n	8017afc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8017af6:	f10b 0202 	add.w	r2, fp, #2
 8017afa:	9209      	str	r2, [sp, #36]	@ 0x24
 8017afc:	b10d      	cbz	r5, 8017b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8017afe:	3501      	adds	r5, #1
 8017b00:	9508      	str	r5, [sp, #32]
 8017b02:	3301      	adds	r3, #1
 8017b04:	930d      	str	r3, [sp, #52]	@ 0x34
 8017b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017b08:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8017b0c:	f1bb 0f00 	cmp.w	fp, #0
 8017b10:	d0d6      	beq.n	8017ac0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8017b12:	f8bb 2000 	ldrh.w	r2, [fp]
 8017b16:	2a00      	cmp	r2, #0
 8017b18:	d1d6      	bne.n	8017ac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8017b1a:	f8bb 2000 	ldrh.w	r2, [fp]
 8017b1e:	2a00      	cmp	r2, #0
 8017b20:	d0bb      	beq.n	8017a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017b22:	459a      	cmp	sl, r3
 8017b24:	ddb9      	ble.n	8017a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017b26:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8017b2a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8017b2e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8017b32:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8017b36:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8017b3a:	960e      	str	r6, [sp, #56]	@ 0x38
 8017b3c:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8017b40:	960f      	str	r6, [sp, #60]	@ 0x3c
 8017b42:	f1bb 0f00 	cmp.w	fp, #0
 8017b46:	d002      	beq.n	8017b4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8017b48:	f10b 0302 	add.w	r3, fp, #2
 8017b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b4e:	b10d      	cbz	r5, 8017b54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8017b50:	1c6b      	adds	r3, r5, #1
 8017b52:	9308      	str	r3, [sp, #32]
 8017b54:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017b56:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017b5a:	a908      	add	r1, sp, #32
 8017b5c:	a809      	add	r0, sp, #36	@ 0x24
 8017b5e:	9305      	str	r3, [sp, #20]
 8017b60:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8017b64:	9304      	str	r3, [sp, #16]
 8017b66:	ab0e      	add	r3, sp, #56	@ 0x38
 8017b68:	9303      	str	r3, [sp, #12]
 8017b6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8017b6c:	9302      	str	r3, [sp, #8]
 8017b6e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017b72:	9301      	str	r3, [sp, #4]
 8017b74:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8017b78:	9300      	str	r3, [sp, #0]
 8017b7a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8017b7e:	f7ff fea8 	bl	80178d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8017b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	bfbf      	itttt	lt
 8017b88:	6823      	ldrlt	r3, [r4, #0]
 8017b8a:	3404      	addlt	r4, #4
 8017b8c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017b90:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8017b92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	bfbe      	ittt	lt
 8017b98:	6823      	ldrlt	r3, [r4, #0]
 8017b9a:	3404      	addlt	r4, #4
 8017b9c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017ba0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017ba4:	bfb8      	it	lt
 8017ba6:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8017ba8:	b1d9      	cbz	r1, 8017be2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8017baa:	880b      	ldrh	r3, [r1, #0]
 8017bac:	2b69      	cmp	r3, #105	@ 0x69
 8017bae:	d01f      	beq.n	8017bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017bb0:	d82f      	bhi.n	8017c12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8017bb2:	2b58      	cmp	r3, #88	@ 0x58
 8017bb4:	d01c      	beq.n	8017bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017bb6:	d818      	bhi.n	8017bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8017bb8:	2b25      	cmp	r3, #37	@ 0x25
 8017bba:	d034      	beq.n	8017c26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8017bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017bbe:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8017bc2:	f1bb 0f00 	cmp.w	fp, #0
 8017bc6:	f000 80b7 	beq.w	8017d38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8017bca:	f8bb 5000 	ldrh.w	r5, [fp]
 8017bce:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	930d      	str	r3, [sp, #52]	@ 0x34
 8017bd6:	e029      	b.n	8017c2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017bd8:	b10d      	cbz	r5, 8017bde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8017bda:	782a      	ldrb	r2, [r5, #0]
 8017bdc:	e786      	b.n	8017aec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017bde:	462a      	mov	r2, r5
 8017be0:	e784      	b.n	8017aec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017be2:	2a00      	cmp	r2, #0
 8017be4:	d0ea      	beq.n	8017bbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017be6:	7813      	ldrb	r3, [r2, #0]
 8017be8:	e7e0      	b.n	8017bac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8017bea:	3b63      	subs	r3, #99	@ 0x63
 8017bec:	2b01      	cmp	r3, #1
 8017bee:	d8e5      	bhi.n	8017bbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017bf0:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8017bf4:	b329      	cbz	r1, 8017c42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8017bf6:	880b      	ldrh	r3, [r1, #0]
 8017bf8:	2b69      	cmp	r3, #105	@ 0x69
 8017bfa:	d063      	beq.n	8017cc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017bfc:	d825      	bhi.n	8017c4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8017bfe:	2b63      	cmp	r3, #99	@ 0x63
 8017c00:	d038      	beq.n	8017c74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8017c02:	2b64      	cmp	r3, #100	@ 0x64
 8017c04:	d05e      	beq.n	8017cc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017c06:	2b58      	cmp	r3, #88	@ 0x58
 8017c08:	d07a      	beq.n	8017d00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8017c0a:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8017c0e:	4625      	mov	r5, r4
 8017c10:	e036      	b.n	8017c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017c12:	2b73      	cmp	r3, #115	@ 0x73
 8017c14:	d0ec      	beq.n	8017bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017c16:	d802      	bhi.n	8017c1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8017c18:	2b6f      	cmp	r3, #111	@ 0x6f
 8017c1a:	d1cf      	bne.n	8017bbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017c1c:	e7e8      	b.n	8017bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017c1e:	2b75      	cmp	r3, #117	@ 0x75
 8017c20:	d0e6      	beq.n	8017bf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017c22:	2b78      	cmp	r3, #120	@ 0x78
 8017c24:	e7f9      	b.n	8017c1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8017c26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c28:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8017c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c2e:	b10b      	cbz	r3, 8017c34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8017c30:	3302      	adds	r3, #2
 8017c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c34:	9b08      	ldr	r3, [sp, #32]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	f43f af2f 	beq.w	8017a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	9308      	str	r3, [sp, #32]
 8017c40:	e72b      	b.n	8017a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017c42:	2a00      	cmp	r2, #0
 8017c44:	d0e1      	beq.n	8017c0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017c46:	7813      	ldrb	r3, [r2, #0]
 8017c48:	e7d6      	b.n	8017bf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8017c4a:	2b73      	cmp	r3, #115	@ 0x73
 8017c4c:	d036      	beq.n	8017cbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8017c4e:	d807      	bhi.n	8017c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8017c50:	2b6f      	cmp	r3, #111	@ 0x6f
 8017c52:	d1da      	bne.n	8017c0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017c54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c56:	1d25      	adds	r5, r4, #4
 8017c58:	2308      	movs	r3, #8
 8017c5a:	eba8 0202 	sub.w	r2, r8, r2
 8017c5e:	e049      	b.n	8017cf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8017c60:	2b75      	cmp	r3, #117	@ 0x75
 8017c62:	d042      	beq.n	8017cea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8017c64:	2b78      	cmp	r3, #120	@ 0x78
 8017c66:	d1d0      	bne.n	8017c0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017c68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c6a:	1d25      	adds	r5, r4, #4
 8017c6c:	2310      	movs	r3, #16
 8017c6e:	eba8 0202 	sub.w	r2, r8, r2
 8017c72:	e03f      	b.n	8017cf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8017c74:	6823      	ldr	r3, [r4, #0]
 8017c76:	1d25      	adds	r5, r4, #4
 8017c78:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8017c7c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8017c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c82:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d051      	beq.n	8017d2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8017c8a:	881a      	ldrh	r2, [r3, #0]
 8017c8c:	a80d      	add	r0, sp, #52	@ 0x34
 8017c8e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8017c92:	462c      	mov	r4, r5
 8017c94:	9005      	str	r0, [sp, #20]
 8017c96:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8017c9a:	9004      	str	r0, [sp, #16]
 8017c9c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8017c9e:	9003      	str	r0, [sp, #12]
 8017ca0:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8017ca4:	9002      	str	r0, [sp, #8]
 8017ca6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8017ca8:	9001      	str	r0, [sp, #4]
 8017caa:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8017cae:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8017cb2:	9000      	str	r0, [sp, #0]
 8017cb4:	a810      	add	r0, sp, #64	@ 0x40
 8017cb6:	f7ff fd49 	bl	801774c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8017cba:	e7b7      	b.n	8017c2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017cbc:	1d25      	adds	r5, r4, #4
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8017cc2:	e7dd      	b.n	8017c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017cc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017cc6:	230a      	movs	r3, #10
 8017cc8:	4649      	mov	r1, r9
 8017cca:	6820      	ldr	r0, [r4, #0]
 8017ccc:	eba8 0202 	sub.w	r2, r8, r2
 8017cd0:	1d25      	adds	r5, r4, #4
 8017cd2:	b292      	uxth	r2, r2
 8017cd4:	f7ff fce4 	bl	80176a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8017cd8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8017cdc:	2b2d      	cmp	r3, #45	@ 0x2d
 8017cde:	d1cf      	bne.n	8017c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017ce0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017ce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017ce6:	3302      	adds	r3, #2
 8017ce8:	e7ea      	b.n	8017cc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8017cea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017cec:	1d25      	adds	r5, r4, #4
 8017cee:	230a      	movs	r3, #10
 8017cf0:	eba8 0202 	sub.w	r2, r8, r2
 8017cf4:	b292      	uxth	r2, r2
 8017cf6:	4649      	mov	r1, r9
 8017cf8:	6820      	ldr	r0, [r4, #0]
 8017cfa:	f7ff fcfd 	bl	80176f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017cfe:	e7bf      	b.n	8017c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017d00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017d02:	2310      	movs	r3, #16
 8017d04:	4649      	mov	r1, r9
 8017d06:	6820      	ldr	r0, [r4, #0]
 8017d08:	eba8 0202 	sub.w	r2, r8, r2
 8017d0c:	1d25      	adds	r5, r4, #4
 8017d0e:	b292      	uxth	r2, r2
 8017d10:	f7ff fcf2 	bl	80176f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017d14:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8017d18:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d0af      	beq.n	8017c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017d20:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8017d24:	2919      	cmp	r1, #25
 8017d26:	d8f7      	bhi.n	8017d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8017d28:	3b20      	subs	r3, #32
 8017d2a:	8013      	strh	r3, [r2, #0]
 8017d2c:	e7f4      	b.n	8017d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8017d2e:	9a08      	ldr	r2, [sp, #32]
 8017d30:	2a00      	cmp	r2, #0
 8017d32:	d0ab      	beq.n	8017c8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017d34:	7812      	ldrb	r2, [r2, #0]
 8017d36:	e7a9      	b.n	8017c8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017d38:	2d00      	cmp	r5, #0
 8017d3a:	f43f af48 	beq.w	8017bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8017d3e:	782d      	ldrb	r5, [r5, #0]
 8017d40:	e745      	b.n	8017bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08017d42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8017d42:	b507      	push	{r0, r1, r2, lr}
 8017d44:	9300      	str	r3, [sp, #0]
 8017d46:	4613      	mov	r3, r2
 8017d48:	2200      	movs	r2, #0
 8017d4a:	f7ff fe92 	bl	8017a72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8017d4e:	b003      	add	sp, #12
 8017d50:	f85d fb04 	ldr.w	pc, [sp], #4

08017d54 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8017d54:	b40c      	push	{r2, r3}
 8017d56:	b507      	push	{r0, r1, r2, lr}
 8017d58:	ab04      	add	r3, sp, #16
 8017d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d5e:	9301      	str	r3, [sp, #4]
 8017d60:	f7ff ffef 	bl	8017d42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8017d64:	b003      	add	sp, #12
 8017d66:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d6a:	b002      	add	sp, #8
 8017d6c:	4770      	bx	lr
	...

08017d70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 8017d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d74:	b0c5      	sub	sp, #276	@ 0x114
 8017d76:	2400      	movs	r4, #0
 8017d78:	4606      	mov	r6, r0
 8017d7a:	468a      	mov	sl, r1
 8017d7c:	af11      	add	r7, sp, #68	@ 0x44
 8017d7e:	4621      	mov	r1, r4
 8017d80:	f8dd b138 	ldr.w	fp, [sp, #312]	@ 0x138
 8017d84:	4638      	mov	r0, r7
 8017d86:	940d      	str	r4, [sp, #52]	@ 0x34
 8017d88:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017d8c:	22c8      	movs	r2, #200	@ 0xc8
 8017d8e:	f00b f89c 	bl	8022eca <memset>
 8017d92:	b16e      	cbz	r6, 8017db0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 8017d94:	ed9f 5aa7 	vldr	s10, [pc, #668]	@ 8018034 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 8017d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017d9c:	b162      	cbz	r2, 8017db8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x48>
 8017d9e:	8812      	ldrh	r2, [r2, #0]
 8017da0:	b11a      	cbz	r2, 8017daa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3a>
 8017da2:	f10a 31ff 	add.w	r1, sl, #4294967295
 8017da6:	4299      	cmp	r1, r3
 8017da8:	dc2e      	bgt.n	8017e08 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x98>
 8017daa:	2200      	movs	r2, #0
 8017dac:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017db0:	4630      	mov	r0, r6
 8017db2:	b045      	add	sp, #276	@ 0x114
 8017db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db8:	9a08      	ldr	r2, [sp, #32]
 8017dba:	2a00      	cmp	r2, #0
 8017dbc:	d0f5      	beq.n	8017daa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3a>
 8017dbe:	7812      	ldrb	r2, [r2, #0]
 8017dc0:	e7ee      	b.n	8017da0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x30>
 8017dc2:	2d00      	cmp	r5, #0
 8017dc4:	d0e8      	beq.n	8017d98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8017dc6:	782a      	ldrb	r2, [r5, #0]
 8017dc8:	b142      	cbz	r2, 8017ddc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6c>
 8017dca:	2a25      	cmp	r2, #37	@ 0x25
 8017dcc:	d001      	beq.n	8017dd2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x62>
 8017dce:	4299      	cmp	r1, r3
 8017dd0:	dc08      	bgt.n	8017de4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 8017dd2:	f1b8 0f00 	cmp.w	r8, #0
 8017dd6:	d121      	bne.n	8017e1c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xac>
 8017dd8:	2d00      	cmp	r5, #0
 8017dda:	d0dd      	beq.n	8017d98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8017ddc:	782a      	ldrb	r2, [r5, #0]
 8017dde:	f04f 0800 	mov.w	r8, #0
 8017de2:	e01d      	b.n	8017e20 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xb0>
 8017de4:	f1b8 0f00 	cmp.w	r8, #0
 8017de8:	d07f      	beq.n	8017eea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17a>
 8017dea:	f8b8 2000 	ldrh.w	r2, [r8]
 8017dee:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017df2:	f1b8 0f00 	cmp.w	r8, #0
 8017df6:	d002      	beq.n	8017dfe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 8017df8:	f108 0202 	add.w	r2, r8, #2
 8017dfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8017dfe:	b10d      	cbz	r5, 8017e04 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x94>
 8017e00:	3501      	adds	r5, #1
 8017e02:	9508      	str	r5, [sp, #32]
 8017e04:	3301      	adds	r3, #1
 8017e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8017e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017e0a:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
 8017e0e:	f1b8 0f00 	cmp.w	r8, #0
 8017e12:	d0d6      	beq.n	8017dc2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x52>
 8017e14:	f8b8 2000 	ldrh.w	r2, [r8]
 8017e18:	2a00      	cmp	r2, #0
 8017e1a:	d1d6      	bne.n	8017dca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5a>
 8017e1c:	f8b8 2000 	ldrh.w	r2, [r8]
 8017e20:	2a00      	cmp	r2, #0
 8017e22:	d0b9      	beq.n	8017d98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8017e24:	4299      	cmp	r1, r3
 8017e26:	ddb7      	ble.n	8017d98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8017e28:	2300      	movs	r3, #0
 8017e2a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017e2e:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8017e32:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8017e36:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 8017e3a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
 8017e3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8017e40:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8017e44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017e46:	f1b8 0f00 	cmp.w	r8, #0
 8017e4a:	d002      	beq.n	8017e52 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xe2>
 8017e4c:	f108 0302 	add.w	r3, r8, #2
 8017e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e52:	b10d      	cbz	r5, 8017e58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xe8>
 8017e54:	1c6b      	adds	r3, r5, #1
 8017e56:	9308      	str	r3, [sp, #32]
 8017e58:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017e5a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017e5e:	a908      	add	r1, sp, #32
 8017e60:	a809      	add	r0, sp, #36	@ 0x24
 8017e62:	9305      	str	r3, [sp, #20]
 8017e64:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8017e68:	9304      	str	r3, [sp, #16]
 8017e6a:	ab0e      	add	r3, sp, #56	@ 0x38
 8017e6c:	9303      	str	r3, [sp, #12]
 8017e6e:	ab0c      	add	r3, sp, #48	@ 0x30
 8017e70:	9302      	str	r3, [sp, #8]
 8017e72:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017e76:	9301      	str	r3, [sp, #4]
 8017e78:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8017e82:	f7ff fd26 	bl	80178d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8017e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	da0b      	bge.n	8017ea4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x134>
 8017e8c:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8017e90:	3401      	adds	r4, #1
 8017e92:	edd3 7a00 	vldr	s15, [r3]
 8017e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e9a:	ee17 3a90 	vmov	r3, s15
 8017e9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ea2:	930e      	str	r3, [sp, #56]	@ 0x38
 8017ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	da0b      	bge.n	8017ec2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x152>
 8017eaa:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8017eae:	3401      	adds	r4, #1
 8017eb0:	edd3 7a00 	vldr	s15, [r3]
 8017eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017eb8:	ee17 3a90 	vmov	r3, s15
 8017ebc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ec0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ec4:	b1b3      	cbz	r3, 8017ef4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x184>
 8017ec6:	881a      	ldrh	r2, [r3, #0]
 8017ec8:	2a25      	cmp	r2, #37	@ 0x25
 8017eca:	d018      	beq.n	8017efe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x18e>
 8017ecc:	2a66      	cmp	r2, #102	@ 0x66
 8017ece:	d01c      	beq.n	8017f0a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 8017ed0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017ed2:	e9cd 5808 	strd	r5, r8, [sp, #32]
 8017ed6:	f1b8 0f00 	cmp.w	r8, #0
 8017eda:	f000 8133 	beq.w	8018144 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3d4>
 8017ede:	f8b8 5000 	ldrh.w	r5, [r8]
 8017ee2:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	e00d      	b.n	8017f06 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x196>
 8017eea:	b10d      	cbz	r5, 8017ef0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 8017eec:	782a      	ldrb	r2, [r5, #0]
 8017eee:	e77e      	b.n	8017dee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7e>
 8017ef0:	462a      	mov	r2, r5
 8017ef2:	e77c      	b.n	8017dee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7e>
 8017ef4:	9b08      	ldr	r3, [sp, #32]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d0ea      	beq.n	8017ed0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 8017efa:	781a      	ldrb	r2, [r3, #0]
 8017efc:	e7e4      	b.n	8017ec8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 8017efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017f00:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017f04:	3302      	adds	r3, #2
 8017f06:	930d      	str	r3, [sp, #52]	@ 0x34
 8017f08:	e03f      	b.n	8017f8a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21a>
 8017f0a:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8017f0e:	9710      	str	r7, [sp, #64]	@ 0x40
 8017f10:	3401      	adds	r4, #1
 8017f12:	edd3 7a00 	vldr	s15, [r3]
 8017f16:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8017f1a:	b923      	cbnz	r3, 8017f26 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1b6>
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8017f22:	2306      	movs	r3, #6
 8017f24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f2e:	bf42      	ittt	mi
 8017f30:	eef1 7a67 	vnegmi.f32	s15, s15
 8017f34:	232d      	movmi	r3, #45	@ 0x2d
 8017f36:	f8ad 3032 	strhmi.w	r3, [sp, #50]	@ 0x32
 8017f3a:	eeb0 7ae7 	vabs.f32	s14, s15
 8017f3e:	eeb4 7a45 	vcmp.f32	s14, s10
 8017f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f46:	dd2b      	ble.n	8017fa0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x230>
 8017f48:	4b3b      	ldr	r3, [pc, #236]	@ (8018038 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c8>)
 8017f4a:	9311      	str	r3, [sp, #68]	@ 0x44
 8017f4c:	2366      	movs	r3, #102	@ 0x66
 8017f4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f52:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f000 80ee 	beq.w	8018138 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c8>
 8017f5c:	881a      	ldrh	r2, [r3, #0]
 8017f5e:	a80d      	add	r0, sp, #52	@ 0x34
 8017f60:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8017f64:	9005      	str	r0, [sp, #20]
 8017f66:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8017f6a:	9004      	str	r0, [sp, #16]
 8017f6c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8017f6e:	9003      	str	r0, [sp, #12]
 8017f70:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8017f74:	9002      	str	r0, [sp, #8]
 8017f76:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8017f78:	9001      	str	r0, [sp, #4]
 8017f7a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8017f7e:	e9cd a606 	strd	sl, r6, [sp, #24]
 8017f82:	9000      	str	r0, [sp, #0]
 8017f84:	a810      	add	r0, sp, #64	@ 0x40
 8017f86:	f7ff fbe1 	bl	801774c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8017f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f8c:	b10b      	cbz	r3, 8017f92 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x222>
 8017f8e:	3302      	adds	r3, #2
 8017f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f92:	9b08      	ldr	r3, [sp, #32]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f43f aeff 	beq.w	8017d98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8017f9a:	3301      	adds	r3, #1
 8017f9c:	9308      	str	r3, [sp, #32]
 8017f9e:	e6fb      	b.n	8017d98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x28>
 8017fa0:	eef4 7a67 	vcmp.f32	s15, s15
 8017fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa8:	d63a      	bvs.n	8018020 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b0>
 8017faa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8017fae:	f10d 0846 	add.w	r8, sp, #70	@ 0x46
 8017fb2:	eeb0 6a67 	vmov.f32	s12, s15
 8017fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017fba:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8017fbe:	eef0 5a47 	vmov.f32	s11, s14
 8017fc2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8017fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fca:	da2d      	bge.n	8018028 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 8017fcc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017fd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017fd2:	2100      	movs	r1, #0
 8017fd4:	ebaa 0202 	sub.w	r2, sl, r2
 8017fd8:	eef0 4a46 	vmov.f32	s9, s12
 8017fdc:	eef4 6ac6 	vcmpe.f32	s13, s12
 8017fe0:	b28b      	uxth	r3, r1
 8017fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe6:	db2c      	blt.n	8018042 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d2>
 8017fe8:	1a50      	subs	r0, r2, r1
 8017fea:	2800      	cmp	r0, #0
 8017fec:	dd29      	ble.n	8018042 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d2>
 8017fee:	3101      	adds	r1, #1
 8017ff0:	2964      	cmp	r1, #100	@ 0x64
 8017ff2:	d025      	beq.n	8018040 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d0>
 8017ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017ff8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017ffc:	ee17 3a10 	vmov	r3, s14
 8018000:	2b09      	cmp	r3, #9
 8018002:	bfa8      	it	ge
 8018004:	2309      	movge	r3, #9
 8018006:	ee07 3a10 	vmov	s14, r3
 801800a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801800e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018012:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 8018016:	eee7 7a66 	vfms.f32	s15, s14, s13
 801801a:	eec6 6aa5 	vdiv.f32	s13, s13, s11
 801801e:	e7dd      	b.n	8017fdc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x26c>
 8018020:	4b06      	ldr	r3, [pc, #24]	@ (801803c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2cc>)
 8018022:	9311      	str	r3, [sp, #68]	@ 0x44
 8018024:	236e      	movs	r3, #110	@ 0x6e
 8018026:	e792      	b.n	8017f4e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1de>
 8018028:	ee66 6a87 	vmul.f32	s13, s13, s14
 801802c:	ee86 6a07 	vdiv.f32	s12, s12, s14
 8018030:	e7c7      	b.n	8017fc2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x252>
 8018032:	bf00      	nop
 8018034:	7f7fffff 	.word	0x7f7fffff
 8018038:	006e0069 	.word	0x006e0069
 801803c:	0061006e 	.word	0x0061006e
 8018040:	2363      	movs	r3, #99	@ 0x63
 8018042:	2a63      	cmp	r2, #99	@ 0x63
 8018044:	bfd4      	ite	le
 8018046:	ebc3 0202 	rsble	r2, r3, r2
 801804a:	f1c3 0263 	rsbgt	r2, r3, #99	@ 0x63
 801804e:	1c5d      	adds	r5, r3, #1
 8018050:	2a00      	cmp	r2, #0
 8018052:	dd57      	ble.n	8018104 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 8018054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018056:	2900      	cmp	r1, #0
 8018058:	dd2b      	ble.n	80180b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x342>
 801805a:	f04f 0901 	mov.w	r9, #1
 801805e:	230a      	movs	r3, #10
 8018060:	f111 31ff 	adds.w	r1, r1, #4294967295
 8018064:	d30c      	bcc.n	8018080 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x310>
 8018066:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801806a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801806e:	ee17 0a10 	vmov	r0, s14
 8018072:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018076:	fb03 0909 	mla	r9, r3, r9, r0
 801807a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801807e:	e7ef      	b.n	8018060 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f0>
 8018080:	910f      	str	r1, [sp, #60]	@ 0x3c
 8018082:	230a      	movs	r3, #10
 8018084:	b292      	uxth	r2, r2
 8018086:	4648      	mov	r0, r9
 8018088:	eb07 0145 	add.w	r1, r7, r5, lsl #1
 801808c:	f7ff fb52 	bl	8017734 <_ZN8touchgfx7Unicode4itoaElPtti>
 8018090:	f1b9 0f01 	cmp.w	r9, #1
 8018094:	dc0b      	bgt.n	80180ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 8018096:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801809a:	2b00      	cmp	r3, #0
 801809c:	bf0c      	ite	eq
 801809e:	2300      	moveq	r3, #0
 80180a0:	232e      	movne	r3, #46	@ 0x2e
 80180a2:	aa44      	add	r2, sp, #272	@ 0x110
 80180a4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80180a8:	f825 3ccc 	strh.w	r3, [r5, #-204]
 80180ac:	e015      	b.n	80180da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36a>
 80180ae:	232e      	movs	r3, #46	@ 0x2e
 80180b0:	e7f7      	b.n	80180a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 80180b2:	2a01      	cmp	r2, #1
 80180b4:	d026      	beq.n	8018104 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 80180b6:	2b63      	cmp	r3, #99	@ 0x63
 80180b8:	d024      	beq.n	8018104 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 80180ba:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 80180be:	b30a      	cbz	r2, 8018104 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x394>
 80180c0:	aa44      	add	r2, sp, #272	@ 0x110
 80180c2:	3302      	adds	r3, #2
 80180c4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80180c8:	222e      	movs	r2, #46	@ 0x2e
 80180ca:	f825 2ccc 	strh.w	r2, [r5, #-204]
 80180ce:	aa44      	add	r2, sp, #272	@ 0x110
 80180d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80180d4:	2200      	movs	r2, #0
 80180d6:	f823 2ccc 	strh.w	r2, [r3, #-204]
 80180da:	eef4 7ae4 	vcmpe.f32	s15, s9
 80180de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e2:	f6ff af35 	blt.w	8017f50 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e0>
 80180e6:	2300      	movs	r3, #0
 80180e8:	f838 2b02 	ldrh.w	r2, [r8], #2
 80180ec:	1c59      	adds	r1, r3, #1
 80180ee:	b972      	cbnz	r2, 801810e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x39e>
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	2130      	movs	r1, #48	@ 0x30
 80180f4:	b96b      	cbnz	r3, 8018112 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3a2>
 80180f6:	2331      	movs	r3, #49	@ 0x31
 80180f8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80180fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80180fe:	3b02      	subs	r3, #2
 8018100:	9310      	str	r3, [sp, #64]	@ 0x40
 8018102:	e725      	b.n	8017f50 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e0>
 8018104:	ab44      	add	r3, sp, #272	@ 0x110
 8018106:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801810a:	2300      	movs	r3, #0
 801810c:	e7cc      	b.n	80180a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x338>
 801810e:	460b      	mov	r3, r1
 8018110:	e7ea      	b.n	80180e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x378>
 8018112:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 8018116:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
 801811a:	2808      	cmp	r0, #8
 801811c:	d806      	bhi.n	801812c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3bc>
 801811e:	a944      	add	r1, sp, #272	@ 0x110
 8018120:	3201      	adds	r2, #1
 8018122:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018126:	f823 2ccc 	strh.w	r2, [r3, #-204]
 801812a:	e711      	b.n	8017f50 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e0>
 801812c:	2a39      	cmp	r2, #57	@ 0x39
 801812e:	bf08      	it	eq
 8018130:	f827 1013 	strheq.w	r1, [r7, r3, lsl #1]
 8018134:	3b01      	subs	r3, #1
 8018136:	e7dd      	b.n	80180f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x384>
 8018138:	9a08      	ldr	r2, [sp, #32]
 801813a:	2a00      	cmp	r2, #0
 801813c:	f43f af0f 	beq.w	8017f5e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1ee>
 8018140:	7812      	ldrb	r2, [r2, #0]
 8018142:	e70c      	b.n	8017f5e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1ee>
 8018144:	2d00      	cmp	r5, #0
 8018146:	f43f aecc 	beq.w	8017ee2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x172>
 801814a:	782d      	ldrb	r5, [r5, #0]
 801814c:	e6c9      	b.n	8017ee2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x172>
 801814e:	bf00      	nop

08018150 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8018150:	b507      	push	{r0, r1, r2, lr}
 8018152:	9300      	str	r3, [sp, #0]
 8018154:	4613      	mov	r3, r2
 8018156:	2200      	movs	r2, #0
 8018158:	f7ff fe0a 	bl	8017d70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801815c:	b003      	add	sp, #12
 801815e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018164 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018164:	4b01      	ldr	r3, [pc, #4]	@ (801816c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018166:	6018      	str	r0, [r3, #0]
 8018168:	4770      	bx	lr
 801816a:	bf00      	nop
 801816c:	2402db14 	.word	0x2402db14

08018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8018170:	4b06      	ldr	r3, [pc, #24]	@ (801818c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8018172:	881a      	ldrh	r2, [r3, #0]
 8018174:	4282      	cmp	r2, r0
 8018176:	d807      	bhi.n	8018188 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8018178:	4b05      	ldr	r3, [pc, #20]	@ (8018190 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801817a:	881b      	ldrh	r3, [r3, #0]
 801817c:	4413      	add	r3, r2
 801817e:	4298      	cmp	r0, r3
 8018180:	bfac      	ite	ge
 8018182:	2000      	movge	r0, #0
 8018184:	2001      	movlt	r0, #1
 8018186:	4770      	bx	lr
 8018188:	2000      	movs	r0, #0
 801818a:	4770      	bx	lr
 801818c:	2402db34 	.word	0x2402db34
 8018190:	2402db38 	.word	0x2402db38

08018194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018194:	b508      	push	{r3, lr}
 8018196:	4601      	mov	r1, r0
 8018198:	f7ff ffea 	bl	8018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801819c:	b118      	cbz	r0, 80181a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801819e:	4b02      	ldr	r3, [pc, #8]	@ (80181a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80181a6:	bd08      	pop	{r3, pc}
 80181a8:	2402db18 	.word	0x2402db18

080181ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80181ac:	b538      	push	{r3, r4, r5, lr}
 80181ae:	4604      	mov	r4, r0
 80181b0:	f7ff ffde 	bl	8018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80181b4:	b188      	cbz	r0, 80181da <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80181b6:	4b09      	ldr	r3, [pc, #36]	@ (80181dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80181b8:	881a      	ldrh	r2, [r3, #0]
 80181ba:	4b09      	ldr	r3, [pc, #36]	@ (80181e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80181bc:	1aa4      	subs	r4, r4, r2
 80181be:	220e      	movs	r2, #14
 80181c0:	681d      	ldr	r5, [r3, #0]
 80181c2:	4362      	muls	r2, r4
 80181c4:	18ac      	adds	r4, r5, r2
 80181c6:	7b23      	ldrb	r3, [r4, #12]
 80181c8:	f013 0320 	ands.w	r3, r3, #32
 80181cc:	bf17      	itett	ne
 80181ce:	680b      	ldrne	r3, [r1, #0]
 80181d0:	4618      	moveq	r0, r3
 80181d2:	50ab      	strne	r3, [r5, r2]
 80181d4:	684b      	ldrne	r3, [r1, #4]
 80181d6:	bf18      	it	ne
 80181d8:	6063      	strne	r3, [r4, #4]
 80181da:	bd38      	pop	{r3, r4, r5, pc}
 80181dc:	2402db34 	.word	0x2402db34
 80181e0:	2402db1c 	.word	0x2402db1c

080181e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80181e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80181e8:	4606      	mov	r6, r0
 80181ea:	460c      	mov	r4, r1
 80181ec:	f7ff ffc0 	bl	8018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80181f0:	b918      	cbnz	r0, 80181fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80181f2:	2000      	movs	r0, #0
 80181f4:	b002      	add	sp, #8
 80181f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181fa:	4608      	mov	r0, r1
 80181fc:	f7f6 f935 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018200:	2800      	cmp	r0, #0
 8018202:	d1f6      	bne.n	80181f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018204:	4b3f      	ldr	r3, [pc, #252]	@ (8018304 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8018206:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8018308 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801820a:	881d      	ldrh	r5, [r3, #0]
 801820c:	f8d9 a000 	ldr.w	sl, [r9]
 8018210:	46c8      	mov	r8, r9
 8018212:	1b73      	subs	r3, r6, r5
 8018214:	250e      	movs	r5, #14
 8018216:	435d      	muls	r5, r3
 8018218:	eb0a 0705 	add.w	r7, sl, r5
 801821c:	7b3b      	ldrb	r3, [r7, #12]
 801821e:	f013 0f20 	tst.w	r3, #32
 8018222:	d0e6      	beq.n	80181f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018224:	4621      	mov	r1, r4
 8018226:	4638      	mov	r0, r7
 8018228:	f7fc f9e4 	bl	80145f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801822c:	2800      	cmp	r0, #0
 801822e:	d1e1      	bne.n	80181f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018230:	4639      	mov	r1, r7
 8018232:	4620      	mov	r0, r4
 8018234:	f7fc f9de 	bl	80145f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018238:	b108      	cbz	r0, 801823e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801823a:	4621      	mov	r1, r4
 801823c:	e020      	b.n	8018280 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801823e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018242:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8018246:	429a      	cmp	r2, r3
 8018248:	d11e      	bne.n	8018288 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801824a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801824e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8018252:	429a      	cmp	r2, r3
 8018254:	d118      	bne.n	8018288 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018256:	6820      	ldr	r0, [r4, #0]
 8018258:	466b      	mov	r3, sp
 801825a:	6861      	ldr	r1, [r4, #4]
 801825c:	c303      	stmia	r3!, {r0, r1}
 801825e:	4639      	mov	r1, r7
 8018260:	4668      	mov	r0, sp
 8018262:	f7f9 f8d2 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018266:	f8d9 3000 	ldr.w	r3, [r9]
 801826a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801826e:	442b      	add	r3, r5
 8018270:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018274:	4413      	add	r3, r2
 8018276:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801827a:	4293      	cmp	r3, r2
 801827c:	dc04      	bgt.n	8018288 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801827e:	4669      	mov	r1, sp
 8018280:	4630      	mov	r0, r6
 8018282:	f7ff ff93 	bl	80181ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8018286:	e7b5      	b.n	80181f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018288:	f8d8 3000 	ldr.w	r3, [r8]
 801828c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018290:	442b      	add	r3, r5
 8018292:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018296:	4291      	cmp	r1, r2
 8018298:	d119      	bne.n	80182ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801829a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801829e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80182a2:	4291      	cmp	r1, r2
 80182a4:	d113      	bne.n	80182ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80182a6:	6820      	ldr	r0, [r4, #0]
 80182a8:	466a      	mov	r2, sp
 80182aa:	6861      	ldr	r1, [r4, #4]
 80182ac:	c203      	stmia	r2!, {r0, r1}
 80182ae:	4619      	mov	r1, r3
 80182b0:	4668      	mov	r0, sp
 80182b2:	f7f9 f8aa 	bl	801140a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80182b6:	f8d8 3000 	ldr.w	r3, [r8]
 80182ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80182be:	442b      	add	r3, r5
 80182c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80182c4:	4413      	add	r3, r2
 80182c6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80182ca:	4293      	cmp	r3, r2
 80182cc:	ddd7      	ble.n	801827e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80182ce:	4620      	mov	r0, r4
 80182d0:	f7f6 f8cb 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 80182d4:	b990      	cbnz	r0, 80182fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80182d6:	88a7      	ldrh	r7, [r4, #4]
 80182d8:	88e3      	ldrh	r3, [r4, #6]
 80182da:	fb17 f703 	smulbb	r7, r7, r3
 80182de:	f8d8 3000 	ldr.w	r3, [r8]
 80182e2:	441d      	add	r5, r3
 80182e4:	4628      	mov	r0, r5
 80182e6:	f7f6 f8c0 	bl	800e46a <_ZNK8touchgfx4Rect7isEmptyEv>
 80182ea:	b948      	cbnz	r0, 8018300 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80182ec:	88ab      	ldrh	r3, [r5, #4]
 80182ee:	88ea      	ldrh	r2, [r5, #6]
 80182f0:	fb13 f302 	smulbb	r3, r3, r2
 80182f4:	42bb      	cmp	r3, r7
 80182f6:	f6bf af7c 	bge.w	80181f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80182fa:	e79e      	b.n	801823a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80182fc:	2700      	movs	r7, #0
 80182fe:	e7ee      	b.n	80182de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8018300:	2300      	movs	r3, #0
 8018302:	e7f7      	b.n	80182f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8018304:	2402db34 	.word	0x2402db34
 8018308:	2402db1c 	.word	0x2402db1c

0801830c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801830c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801830e:	4c24      	ldr	r4, [pc, #144]	@ (80183a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018310:	6823      	ldr	r3, [r4, #0]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d042      	beq.n	801839c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018316:	4a23      	ldr	r2, [pc, #140]	@ (80183a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018318:	4d23      	ldr	r5, [pc, #140]	@ (80183a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801831a:	8811      	ldrh	r1, [r2, #0]
 801831c:	f8b5 c000 	ldrh.w	ip, [r5]
 8018320:	4822      	ldr	r0, [pc, #136]	@ (80183ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018322:	4461      	add	r1, ip
 8018324:	1c4a      	adds	r2, r1, #1
 8018326:	008f      	lsls	r7, r1, #2
 8018328:	f022 0201 	bic.w	r2, r2, #1
 801832c:	19de      	adds	r6, r3, r7
 801832e:	0412      	lsls	r2, r2, #16
 8018330:	6006      	str	r6, [r0, #0]
 8018332:	4e1f      	ldr	r6, [pc, #124]	@ (80183b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018334:	0c12      	lsrs	r2, r2, #16
 8018336:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801833a:	19da      	adds	r2, r3, r7
 801833c:	6032      	str	r2, [r6, #0]
 801833e:	220e      	movs	r2, #14
 8018340:	fb02 f20c 	mul.w	r2, r2, ip
 8018344:	3203      	adds	r2, #3
 8018346:	f022 0203 	bic.w	r2, r2, #3
 801834a:	443a      	add	r2, r7
 801834c:	4f19      	ldr	r7, [pc, #100]	@ (80183b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801834e:	4413      	add	r3, r2
 8018350:	603b      	str	r3, [r7, #0]
 8018352:	2300      	movs	r3, #0
 8018354:	4f18      	ldr	r7, [pc, #96]	@ (80183b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018356:	469c      	mov	ip, r3
 8018358:	803b      	strh	r3, [r7, #0]
 801835a:	4f18      	ldr	r7, [pc, #96]	@ (80183bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801835c:	683f      	ldr	r7, [r7, #0]
 801835e:	1aba      	subs	r2, r7, r2
 8018360:	4f17      	ldr	r7, [pc, #92]	@ (80183c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018362:	603a      	str	r2, [r7, #0]
 8018364:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8018368:	4a16      	ldr	r2, [pc, #88]	@ (80183c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801836a:	8013      	strh	r3, [r2, #0]
 801836c:	428b      	cmp	r3, r1
 801836e:	d10d      	bne.n	801838c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018370:	882d      	ldrh	r5, [r5, #0]
 8018372:	2300      	movs	r3, #0
 8018374:	6830      	ldr	r0, [r6, #0]
 8018376:	240e      	movs	r4, #14
 8018378:	429d      	cmp	r5, r3
 801837a:	d90f      	bls.n	801839c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801837c:	fb04 0203 	mla	r2, r4, r3, r0
 8018380:	3301      	adds	r3, #1
 8018382:	7b11      	ldrb	r1, [r2, #12]
 8018384:	f36f 1145 	bfc	r1, #5, #1
 8018388:	7311      	strb	r1, [r2, #12]
 801838a:	e7f5      	b.n	8018378 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801838c:	6822      	ldr	r2, [r4, #0]
 801838e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018392:	6802      	ldr	r2, [r0, #0]
 8018394:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018398:	3301      	adds	r3, #1
 801839a:	e7e7      	b.n	801836c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801839e:	bf00      	nop
 80183a0:	2402db18 	.word	0x2402db18
 80183a4:	2402db34 	.word	0x2402db34
 80183a8:	2402db38 	.word	0x2402db38
 80183ac:	2402db2c 	.word	0x2402db2c
 80183b0:	2402db1c 	.word	0x2402db1c
 80183b4:	2402db24 	.word	0x2402db24
 80183b8:	2402db36 	.word	0x2402db36
 80183bc:	2402db20 	.word	0x2402db20
 80183c0:	2402db30 	.word	0x2402db30
 80183c4:	2402db28 	.word	0x2402db28

080183c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80183c8:	4b06      	ldr	r3, [pc, #24]	@ (80183e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	b943      	cbnz	r3, 80183e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80183ce:	b139      	cbz	r1, 80183e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80183d0:	4b05      	ldr	r3, [pc, #20]	@ (80183e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80183d2:	801a      	strh	r2, [r3, #0]
 80183d4:	4b05      	ldr	r3, [pc, #20]	@ (80183ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80183d6:	6019      	str	r1, [r3, #0]
 80183d8:	4b05      	ldr	r3, [pc, #20]	@ (80183f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80183da:	6018      	str	r0, [r3, #0]
 80183dc:	f7ff bf96 	b.w	801830c <_ZN8touchgfx6Bitmap10clearCacheEv>
 80183e0:	4770      	bx	lr
 80183e2:	bf00      	nop
 80183e4:	2402db24 	.word	0x2402db24
 80183e8:	2402db38 	.word	0x2402db38
 80183ec:	2402db20 	.word	0x2402db20
 80183f0:	2402db18 	.word	0x2402db18

080183f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80183f4:	b470      	push	{r4, r5, r6}
 80183f6:	4c07      	ldr	r4, [pc, #28]	@ (8018414 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80183f8:	4605      	mov	r5, r0
 80183fa:	4610      	mov	r0, r2
 80183fc:	9a03      	ldr	r2, [sp, #12]
 80183fe:	6826      	ldr	r6, [r4, #0]
 8018400:	b936      	cbnz	r6, 8018410 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018402:	6025      	str	r5, [r4, #0]
 8018404:	4c04      	ldr	r4, [pc, #16]	@ (8018418 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018406:	8021      	strh	r1, [r4, #0]
 8018408:	4619      	mov	r1, r3
 801840a:	bc70      	pop	{r4, r5, r6}
 801840c:	f7ff bfdc 	b.w	80183c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018410:	bc70      	pop	{r4, r5, r6}
 8018412:	4770      	bx	lr
 8018414:	2402db3c 	.word	0x2402db3c
 8018418:	2402db34 	.word	0x2402db34

0801841c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801841c:	4a12      	ldr	r2, [pc, #72]	@ (8018468 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801841e:	8803      	ldrh	r3, [r0, #0]
 8018420:	8812      	ldrh	r2, [r2, #0]
 8018422:	4293      	cmp	r3, r2
 8018424:	d207      	bcs.n	8018436 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018426:	4a11      	ldr	r2, [pc, #68]	@ (801846c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018428:	2114      	movs	r1, #20
 801842a:	6812      	ldr	r2, [r2, #0]
 801842c:	fb01 2303 	mla	r3, r1, r3, r2
 8018430:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018434:	4770      	bx	lr
 8018436:	490e      	ldr	r1, [pc, #56]	@ (8018470 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018438:	8809      	ldrh	r1, [r1, #0]
 801843a:	4411      	add	r1, r2
 801843c:	428b      	cmp	r3, r1
 801843e:	da04      	bge.n	801844a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018440:	1a9b      	subs	r3, r3, r2
 8018442:	4a0c      	ldr	r2, [pc, #48]	@ (8018474 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018444:	210e      	movs	r1, #14
 8018446:	6812      	ldr	r2, [r2, #0]
 8018448:	e7f0      	b.n	801842c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801844a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801844e:	4293      	cmp	r3, r2
 8018450:	d108      	bne.n	8018464 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018452:	4b09      	ldr	r3, [pc, #36]	@ (8018478 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	b91b      	cbnz	r3, 8018460 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018458:	4b08      	ldr	r3, [pc, #32]	@ (801847c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801845a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801845e:	4770      	bx	lr
 8018460:	4b07      	ldr	r3, [pc, #28]	@ (8018480 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018462:	e7fa      	b.n	801845a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018464:	2000      	movs	r0, #0
 8018466:	4770      	bx	lr
 8018468:	2402db34 	.word	0x2402db34
 801846c:	2402db3c 	.word	0x2402db3c
 8018470:	2402db38 	.word	0x2402db38
 8018474:	2402db1c 	.word	0x2402db1c
 8018478:	2402daa4 	.word	0x2402daa4
 801847c:	2402daa6 	.word	0x2402daa6
 8018480:	2402daa8 	.word	0x2402daa8

08018484 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018484:	4a12      	ldr	r2, [pc, #72]	@ (80184d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018486:	8803      	ldrh	r3, [r0, #0]
 8018488:	8812      	ldrh	r2, [r2, #0]
 801848a:	4293      	cmp	r3, r2
 801848c:	d207      	bcs.n	801849e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801848e:	4a11      	ldr	r2, [pc, #68]	@ (80184d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018490:	2114      	movs	r1, #20
 8018492:	6812      	ldr	r2, [r2, #0]
 8018494:	fb01 2303 	mla	r3, r1, r3, r2
 8018498:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801849c:	4770      	bx	lr
 801849e:	490e      	ldr	r1, [pc, #56]	@ (80184d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80184a0:	8809      	ldrh	r1, [r1, #0]
 80184a2:	4411      	add	r1, r2
 80184a4:	428b      	cmp	r3, r1
 80184a6:	da04      	bge.n	80184b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80184a8:	1a9b      	subs	r3, r3, r2
 80184aa:	4a0c      	ldr	r2, [pc, #48]	@ (80184dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80184ac:	210e      	movs	r1, #14
 80184ae:	6812      	ldr	r2, [r2, #0]
 80184b0:	e7f0      	b.n	8018494 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80184b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d108      	bne.n	80184cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80184ba:	4b09      	ldr	r3, [pc, #36]	@ (80184e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	b91b      	cbnz	r3, 80184c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80184c0:	4b08      	ldr	r3, [pc, #32]	@ (80184e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80184c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80184c6:	4770      	bx	lr
 80184c8:	4b07      	ldr	r3, [pc, #28]	@ (80184e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80184ca:	e7fa      	b.n	80184c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80184cc:	2000      	movs	r0, #0
 80184ce:	4770      	bx	lr
 80184d0:	2402db34 	.word	0x2402db34
 80184d4:	2402db3c 	.word	0x2402db3c
 80184d8:	2402db38 	.word	0x2402db38
 80184dc:	2402db1c 	.word	0x2402db1c
 80184e0:	2402daa4 	.word	0x2402daa4
 80184e4:	2402daa8 	.word	0x2402daa8
 80184e8:	2402daa6 	.word	0x2402daa6

080184ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80184ec:	4a1f      	ldr	r2, [pc, #124]	@ (801856c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80184ee:	b510      	push	{r4, lr}
 80184f0:	880b      	ldrh	r3, [r1, #0]
 80184f2:	8812      	ldrh	r2, [r2, #0]
 80184f4:	4293      	cmp	r3, r2
 80184f6:	d213      	bcs.n	8018520 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80184f8:	4a1d      	ldr	r2, [pc, #116]	@ (8018570 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80184fa:	2114      	movs	r1, #20
 80184fc:	6812      	ldr	r2, [r2, #0]
 80184fe:	fb01 2303 	mla	r3, r1, r3, r2
 8018502:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018506:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801850a:	8a1a      	ldrh	r2, [r3, #16]
 801850c:	8a5b      	ldrh	r3, [r3, #18]
 801850e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018512:	8004      	strh	r4, [r0, #0]
 8018514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018518:	8041      	strh	r1, [r0, #2]
 801851a:	8082      	strh	r2, [r0, #4]
 801851c:	80c3      	strh	r3, [r0, #6]
 801851e:	e00e      	b.n	801853e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018520:	4914      	ldr	r1, [pc, #80]	@ (8018574 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018522:	8809      	ldrh	r1, [r1, #0]
 8018524:	4411      	add	r1, r2
 8018526:	428b      	cmp	r3, r1
 8018528:	da0a      	bge.n	8018540 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801852a:	1a9b      	subs	r3, r3, r2
 801852c:	4a12      	ldr	r2, [pc, #72]	@ (8018578 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801852e:	210e      	movs	r1, #14
 8018530:	6812      	ldr	r2, [r2, #0]
 8018532:	fb01 2303 	mla	r3, r1, r3, r2
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	6002      	str	r2, [r0, #0]
 801853a:	685a      	ldr	r2, [r3, #4]
 801853c:	6042      	str	r2, [r0, #4]
 801853e:	bd10      	pop	{r4, pc}
 8018540:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018544:	4293      	cmp	r3, r2
 8018546:	d10b      	bne.n	8018560 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018548:	4b0c      	ldr	r3, [pc, #48]	@ (801857c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801854a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801854e:	4b0c      	ldr	r3, [pc, #48]	@ (8018580 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018550:	8081      	strh	r1, [r0, #4]
 8018552:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018556:	2300      	movs	r3, #0
 8018558:	80c2      	strh	r2, [r0, #6]
 801855a:	8003      	strh	r3, [r0, #0]
 801855c:	8043      	strh	r3, [r0, #2]
 801855e:	e7ee      	b.n	801853e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018560:	2300      	movs	r3, #0
 8018562:	8003      	strh	r3, [r0, #0]
 8018564:	8043      	strh	r3, [r0, #2]
 8018566:	8083      	strh	r3, [r0, #4]
 8018568:	e7d8      	b.n	801851c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801856a:	bf00      	nop
 801856c:	2402db34 	.word	0x2402db34
 8018570:	2402db3c 	.word	0x2402db3c
 8018574:	2402db38 	.word	0x2402db38
 8018578:	2402db1c 	.word	0x2402db1c
 801857c:	2402daa0 	.word	0x2402daa0
 8018580:	2402daa2 	.word	0x2402daa2

08018584 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018584:	4a12      	ldr	r2, [pc, #72]	@ (80185d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018586:	8803      	ldrh	r3, [r0, #0]
 8018588:	8811      	ldrh	r1, [r2, #0]
 801858a:	428b      	cmp	r3, r1
 801858c:	d20b      	bcs.n	80185a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801858e:	4a11      	ldr	r2, [pc, #68]	@ (80185d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018590:	6812      	ldr	r2, [r2, #0]
 8018592:	b112      	cbz	r2, 801859a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018594:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018598:	b9c0      	cbnz	r0, 80185cc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801859a:	4a0f      	ldr	r2, [pc, #60]	@ (80185d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801859c:	6811      	ldr	r1, [r2, #0]
 801859e:	2214      	movs	r2, #20
 80185a0:	4353      	muls	r3, r2
 80185a2:	58c8      	ldr	r0, [r1, r3]
 80185a4:	4770      	bx	lr
 80185a6:	4a0d      	ldr	r2, [pc, #52]	@ (80185dc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80185a8:	8812      	ldrh	r2, [r2, #0]
 80185aa:	440a      	add	r2, r1
 80185ac:	4293      	cmp	r3, r2
 80185ae:	da04      	bge.n	80185ba <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80185b0:	4a08      	ldr	r2, [pc, #32]	@ (80185d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80185b2:	6812      	ldr	r2, [r2, #0]
 80185b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80185b8:	4770      	bx	lr
 80185ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80185be:	4293      	cmp	r3, r2
 80185c0:	d103      	bne.n	80185ca <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80185c2:	4b07      	ldr	r3, [pc, #28]	@ (80185e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80185c8:	4770      	bx	lr
 80185ca:	2000      	movs	r0, #0
 80185cc:	4770      	bx	lr
 80185ce:	bf00      	nop
 80185d0:	2402db34 	.word	0x2402db34
 80185d4:	2402db18 	.word	0x2402db18
 80185d8:	2402db3c 	.word	0x2402db3c
 80185dc:	2402db38 	.word	0x2402db38
 80185e0:	2402daac 	.word	0x2402daac

080185e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80185e4:	4b24      	ldr	r3, [pc, #144]	@ (8018678 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80185e6:	8802      	ldrh	r2, [r0, #0]
 80185e8:	8818      	ldrh	r0, [r3, #0]
 80185ea:	4282      	cmp	r2, r0
 80185ec:	d221      	bcs.n	8018632 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80185ee:	4b23      	ldr	r3, [pc, #140]	@ (801867c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80185f0:	6819      	ldr	r1, [r3, #0]
 80185f2:	2314      	movs	r3, #20
 80185f4:	fb03 1302 	mla	r3, r3, r2, r1
 80185f8:	6858      	ldr	r0, [r3, #4]
 80185fa:	2800      	cmp	r0, #0
 80185fc:	d03a      	beq.n	8018674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80185fe:	4920      	ldr	r1, [pc, #128]	@ (8018680 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018600:	6809      	ldr	r1, [r1, #0]
 8018602:	2900      	cmp	r1, #0
 8018604:	d036      	beq.n	8018674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018606:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801860a:	2900      	cmp	r1, #0
 801860c:	d032      	beq.n	8018674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801860e:	891a      	ldrh	r2, [r3, #8]
 8018610:	8958      	ldrh	r0, [r3, #10]
 8018612:	4350      	muls	r0, r2
 8018614:	7c5a      	ldrb	r2, [r3, #17]
 8018616:	7cdb      	ldrb	r3, [r3, #19]
 8018618:	0952      	lsrs	r2, r2, #5
 801861a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801861e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018622:	2b0b      	cmp	r3, #11
 8018624:	bf18      	it	ne
 8018626:	0040      	lslne	r0, r0, #1
 8018628:	3003      	adds	r0, #3
 801862a:	f020 0003 	bic.w	r0, r0, #3
 801862e:	4408      	add	r0, r1
 8018630:	4770      	bx	lr
 8018632:	4b14      	ldr	r3, [pc, #80]	@ (8018684 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018634:	881b      	ldrh	r3, [r3, #0]
 8018636:	4403      	add	r3, r0
 8018638:	429a      	cmp	r2, r3
 801863a:	da1a      	bge.n	8018672 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801863c:	4b12      	ldr	r3, [pc, #72]	@ (8018688 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801863e:	1a10      	subs	r0, r2, r0
 8018640:	210e      	movs	r1, #14
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	fb01 3000 	mla	r0, r1, r0, r3
 8018648:	7b03      	ldrb	r3, [r0, #12]
 801864a:	f003 031f 	and.w	r3, r3, #31
 801864e:	2b0b      	cmp	r3, #11
 8018650:	d10b      	bne.n	801866a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018652:	8903      	ldrh	r3, [r0, #8]
 8018654:	8940      	ldrh	r0, [r0, #10]
 8018656:	4358      	muls	r0, r3
 8018658:	4b09      	ldr	r3, [pc, #36]	@ (8018680 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801865a:	3003      	adds	r0, #3
 801865c:	6819      	ldr	r1, [r3, #0]
 801865e:	f020 0303 	bic.w	r3, r0, #3
 8018662:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018666:	4418      	add	r0, r3
 8018668:	4770      	bx	lr
 801866a:	2b0d      	cmp	r3, #13
 801866c:	d101      	bne.n	8018672 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801866e:	300d      	adds	r0, #13
 8018670:	4770      	bx	lr
 8018672:	2000      	movs	r0, #0
 8018674:	4770      	bx	lr
 8018676:	bf00      	nop
 8018678:	2402db34 	.word	0x2402db34
 801867c:	2402db3c 	.word	0x2402db3c
 8018680:	2402db18 	.word	0x2402db18
 8018684:	2402db38 	.word	0x2402db38
 8018688:	2402db1c 	.word	0x2402db1c

0801868c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801868c:	4a17      	ldr	r2, [pc, #92]	@ (80186ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801868e:	b510      	push	{r4, lr}
 8018690:	8803      	ldrh	r3, [r0, #0]
 8018692:	8812      	ldrh	r2, [r2, #0]
 8018694:	4293      	cmp	r3, r2
 8018696:	d20c      	bcs.n	80186b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018698:	4a15      	ldr	r2, [pc, #84]	@ (80186f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801869a:	2114      	movs	r1, #20
 801869c:	6812      	ldr	r2, [r2, #0]
 801869e:	fb01 2303 	mla	r3, r1, r3, r2
 80186a2:	7c58      	ldrb	r0, [r3, #17]
 80186a4:	0942      	lsrs	r2, r0, #5
 80186a6:	7cd8      	ldrb	r0, [r3, #19]
 80186a8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80186ac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80186b0:	bd10      	pop	{r4, pc}
 80186b2:	4910      	ldr	r1, [pc, #64]	@ (80186f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80186b4:	8809      	ldrh	r1, [r1, #0]
 80186b6:	4411      	add	r1, r2
 80186b8:	428b      	cmp	r3, r1
 80186ba:	da09      	bge.n	80186d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80186bc:	1a9b      	subs	r3, r3, r2
 80186be:	4a0e      	ldr	r2, [pc, #56]	@ (80186f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80186c0:	210e      	movs	r1, #14
 80186c2:	6812      	ldr	r2, [r2, #0]
 80186c4:	fb01 2303 	mla	r3, r1, r3, r2
 80186c8:	7b18      	ldrb	r0, [r3, #12]
 80186ca:	f000 001f 	and.w	r0, r0, #31
 80186ce:	e7ef      	b.n	80186b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80186d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80186d4:	4293      	cmp	r3, r2
 80186d6:	d106      	bne.n	80186e6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80186d8:	f7ea fd10 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 80186dc:	6803      	ldr	r3, [r0, #0]
 80186de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186e4:	4718      	bx	r3
 80186e6:	2000      	movs	r0, #0
 80186e8:	e7e2      	b.n	80186b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80186ea:	bf00      	nop
 80186ec:	2402db34 	.word	0x2402db34
 80186f0:	2402db3c 	.word	0x2402db3c
 80186f4:	2402db38 	.word	0x2402db38
 80186f8:	2402db1c 	.word	0x2402db1c

080186fc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80186fc:	2018      	movs	r0, #24
 80186fe:	4770      	bx	lr

08018700 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8018700:	2001      	movs	r0, #1
 8018702:	4770      	bx	lr

08018704 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8018704:	4b02      	ldr	r3, [pc, #8]	@ (8018710 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8018706:	8818      	ldrh	r0, [r3, #0]
 8018708:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801870c:	b280      	uxth	r0, r0
 801870e:	4770      	bx	lr
 8018710:	2402daa6 	.word	0x2402daa6

08018714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018714:	2bff      	cmp	r3, #255	@ 0xff
 8018716:	d040      	beq.n	801879a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8018718:	2a2c      	cmp	r2, #44	@ 0x2c
 801871a:	d02a      	beq.n	8018772 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801871c:	d80f      	bhi.n	801873e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801871e:	2a08      	cmp	r2, #8
 8018720:	d037      	beq.n	8018792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018722:	d805      	bhi.n	8018730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8018724:	2a04      	cmp	r2, #4
 8018726:	d032      	beq.n	801878e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8018728:	2a05      	cmp	r2, #5
 801872a:	d02e      	beq.n	801878a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801872c:	2000      	movs	r0, #0
 801872e:	4770      	bx	lr
 8018730:	2a0a      	cmp	r2, #10
 8018732:	d02e      	beq.n	8018792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018734:	d301      	bcc.n	801873a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8018736:	2a0b      	cmp	r2, #11
 8018738:	d1f8      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801873a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801873c:	4770      	bx	lr
 801873e:	2a30      	cmp	r2, #48	@ 0x30
 8018740:	d029      	beq.n	8018796 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018742:	d808      	bhi.n	8018756 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8018744:	2a2e      	cmp	r2, #46	@ 0x2e
 8018746:	684b      	ldr	r3, [r1, #4]
 8018748:	d01a      	beq.n	8018780 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801874a:	d90b      	bls.n	8018764 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d1ec      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018752:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018754:	4770      	bx	lr
 8018756:	2a32      	cmp	r2, #50	@ 0x32
 8018758:	d01d      	beq.n	8018796 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801875a:	d301      	bcc.n	8018760 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801875c:	2a33      	cmp	r2, #51	@ 0x33
 801875e:	d1e5      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018760:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8018762:	4770      	bx	lr
 8018764:	781b      	ldrb	r3, [r3, #0]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d0f3      	beq.n	8018752 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801876a:	2b01      	cmp	r3, #1
 801876c:	d1de      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801876e:	6940      	ldr	r0, [r0, #20]
 8018770:	4770      	bx	lr
 8018772:	684b      	ldr	r3, [r1, #4]
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	b133      	cbz	r3, 8018786 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018778:	2b01      	cmp	r3, #1
 801877a:	d1d7      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801877c:	68c0      	ldr	r0, [r0, #12]
 801877e:	4770      	bx	lr
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d1d2      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018786:	69c0      	ldr	r0, [r0, #28]
 8018788:	4770      	bx	lr
 801878a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801878c:	4770      	bx	lr
 801878e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8018790:	4770      	bx	lr
 8018792:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8018794:	4770      	bx	lr
 8018796:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8018798:	4770      	bx	lr
 801879a:	2a2c      	cmp	r2, #44	@ 0x2c
 801879c:	d02a      	beq.n	80187f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801879e:	d80f      	bhi.n	80187c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 80187a0:	2a08      	cmp	r2, #8
 80187a2:	d035      	beq.n	8018810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80187a4:	d805      	bhi.n	80187b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80187a6:	2a04      	cmp	r2, #4
 80187a8:	d030      	beq.n	801880c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 80187aa:	2a05      	cmp	r2, #5
 80187ac:	d1be      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187ae:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80187b0:	4770      	bx	lr
 80187b2:	2a0a      	cmp	r2, #10
 80187b4:	d02c      	beq.n	8018810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80187b6:	d301      	bcc.n	80187bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 80187b8:	2a0b      	cmp	r2, #11
 80187ba:	d1b7      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187bc:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80187be:	4770      	bx	lr
 80187c0:	2a30      	cmp	r2, #48	@ 0x30
 80187c2:	d027      	beq.n	8018814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80187c4:	d808      	bhi.n	80187d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80187c6:	2a2e      	cmp	r2, #46	@ 0x2e
 80187c8:	684b      	ldr	r3, [r1, #4]
 80187ca:	d01a      	beq.n	8018802 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80187cc:	d90b      	bls.n	80187e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 80187ce:	781b      	ldrb	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d1ab      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187d4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80187d6:	4770      	bx	lr
 80187d8:	2a32      	cmp	r2, #50	@ 0x32
 80187da:	d01b      	beq.n	8018814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80187dc:	d301      	bcc.n	80187e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80187de:	2a33      	cmp	r2, #51	@ 0x33
 80187e0:	d1a4      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187e2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80187e4:	4770      	bx	lr
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d0f3      	beq.n	80187d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80187ec:	2b01      	cmp	r3, #1
 80187ee:	d19d      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187f0:	6980      	ldr	r0, [r0, #24]
 80187f2:	4770      	bx	lr
 80187f4:	684b      	ldr	r3, [r1, #4]
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	b133      	cbz	r3, 8018808 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	d196      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187fe:	6900      	ldr	r0, [r0, #16]
 8018800:	4770      	bx	lr
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d191      	bne.n	801872c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018808:	6a00      	ldr	r0, [r0, #32]
 801880a:	4770      	bx	lr
 801880c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801880e:	4770      	bx	lr
 8018810:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8018812:	4770      	bx	lr
 8018814:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8018816:	4770      	bx	lr

08018818 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801881c:	b085      	sub	sp, #20
 801881e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018820:	9203      	str	r2, [sp, #12]
 8018822:	6870      	ldr	r0, [r6, #4]
 8018824:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018828:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801882c:	9101      	str	r1, [sp, #4]
 801882e:	fa1f f885 	uxth.w	r8, r5
 8018832:	43ed      	mvns	r5, r5
 8018834:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018838:	b2ed      	uxtb	r5, r5
 801883a:	fb00 2404 	mla	r4, r0, r4, r2
 801883e:	6832      	ldr	r2, [r6, #0]
 8018840:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018844:	4414      	add	r4, r2
 8018846:	f8dc 2000 	ldr.w	r2, [ip]
 801884a:	9202      	str	r2, [sp, #8]
 801884c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018850:	f102 0e04 	add.w	lr, r2, #4
 8018854:	9a01      	ldr	r2, [sp, #4]
 8018856:	2a00      	cmp	r2, #0
 8018858:	dc03      	bgt.n	8018862 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801885a:	9a03      	ldr	r2, [sp, #12]
 801885c:	2a00      	cmp	r2, #0
 801885e:	f340 8116 	ble.w	8018a8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018862:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018864:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018868:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801886c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801886e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018872:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018876:	2b00      	cmp	r3, #0
 8018878:	dd0e      	ble.n	8018898 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801887a:	1406      	asrs	r6, r0, #16
 801887c:	d405      	bmi.n	801888a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801887e:	4556      	cmp	r6, sl
 8018880:	da03      	bge.n	801888a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018882:	1416      	asrs	r6, r2, #16
 8018884:	d401      	bmi.n	801888a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018886:	454e      	cmp	r6, r9
 8018888:	db07      	blt.n	801889a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801888a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801888c:	3b01      	subs	r3, #1
 801888e:	3403      	adds	r4, #3
 8018890:	4430      	add	r0, r6
 8018892:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018894:	4432      	add	r2, r6
 8018896:	e7ee      	b.n	8018876 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018898:	d063      	beq.n	8018962 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801889a:	1e5e      	subs	r6, r3, #1
 801889c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801889e:	fb07 0706 	mla	r7, r7, r6, r0
 80188a2:	143f      	asrs	r7, r7, #16
 80188a4:	d454      	bmi.n	8018950 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80188a6:	4557      	cmp	r7, sl
 80188a8:	da52      	bge.n	8018950 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80188aa:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80188ac:	fb07 2606 	mla	r6, r7, r6, r2
 80188b0:	1436      	asrs	r6, r6, #16
 80188b2:	d44d      	bmi.n	8018950 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80188b4:	454e      	cmp	r6, r9
 80188b6:	da4b      	bge.n	8018950 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80188b8:	1ce6      	adds	r6, r4, #3
 80188ba:	4699      	mov	r9, r3
 80188bc:	f1b9 0f00 	cmp.w	r9, #0
 80188c0:	f106 0603 	add.w	r6, r6, #3
 80188c4:	dd48      	ble.n	8018958 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80188c6:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80188ca:	1417      	asrs	r7, r2, #16
 80188cc:	9902      	ldr	r1, [sp, #8]
 80188ce:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80188d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80188d6:	fb0b 1707 	mla	r7, fp, r7, r1
 80188da:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80188de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80188e0:	f817 700a 	ldrb.w	r7, [r7, sl]
 80188e4:	fb1b fb05 	smulbb	fp, fp, r5
 80188e8:	4408      	add	r0, r1
 80188ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80188ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80188f0:	440a      	add	r2, r1
 80188f2:	eb0e 0a07 	add.w	sl, lr, r7
 80188f6:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80188fa:	fb07 b708 	mla	r7, r7, r8, fp
 80188fe:	b2bf      	uxth	r7, r7
 8018900:	f107 0b01 	add.w	fp, r7, #1
 8018904:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018908:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801890c:	fb1b fb05 	smulbb	fp, fp, r5
 8018910:	123f      	asrs	r7, r7, #8
 8018912:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018916:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801891a:	fb07 b708 	mla	r7, r7, r8, fp
 801891e:	b2bf      	uxth	r7, r7
 8018920:	f107 0b01 	add.w	fp, r7, #1
 8018924:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018928:	123f      	asrs	r7, r7, #8
 801892a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801892e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018932:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018936:	fb1a fa05 	smulbb	sl, sl, r5
 801893a:	fb07 a708 	mla	r7, r7, r8, sl
 801893e:	b2bf      	uxth	r7, r7
 8018940:	f107 0a01 	add.w	sl, r7, #1
 8018944:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018948:	123f      	asrs	r7, r7, #8
 801894a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801894e:	e7b5      	b.n	80188bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018950:	2700      	movs	r7, #0
 8018952:	1bde      	subs	r6, r3, r7
 8018954:	2e00      	cmp	r6, #0
 8018956:	dc42      	bgt.n	80189de <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8018958:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801895c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018960:	441c      	add	r4, r3
 8018962:	9b01      	ldr	r3, [sp, #4]
 8018964:	2b00      	cmp	r3, #0
 8018966:	f340 8092 	ble.w	8018a8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801896a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801896e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018970:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018974:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018978:	eef0 6a62 	vmov.f32	s13, s5
 801897c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018980:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018984:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018988:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801898c:	eef0 6a43 	vmov.f32	s13, s6
 8018990:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018994:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8018998:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801899c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80189a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80189a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80189a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80189ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80189b0:	ee12 2a90 	vmov	r2, s5
 80189b4:	eef0 2a47 	vmov.f32	s5, s14
 80189b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80189bc:	ee13 2a10 	vmov	r2, s6
 80189c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80189c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189c4:	eeb0 3a67 	vmov.f32	s6, s15
 80189c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80189cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80189ce:	9b01      	ldr	r3, [sp, #4]
 80189d0:	9a03      	ldr	r2, [sp, #12]
 80189d2:	3b01      	subs	r3, #1
 80189d4:	9301      	str	r3, [sp, #4]
 80189d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189d8:	bf08      	it	eq
 80189da:	4613      	moveq	r3, r2
 80189dc:	e73a      	b.n	8018854 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80189de:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80189e2:	d44e      	bmi.n	8018a82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80189e4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80189e8:	4556      	cmp	r6, sl
 80189ea:	dd4a      	ble.n	8018a82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80189ec:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80189f0:	d447      	bmi.n	8018a82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80189f2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80189f6:	4559      	cmp	r1, fp
 80189f8:	dd43      	ble.n	8018a82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80189fa:	fa0f f986 	sxth.w	r9, r6
 80189fe:	9902      	ldr	r1, [sp, #8]
 8018a00:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018a04:	fb0b 1909 	mla	r9, fp, r9, r1
 8018a08:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018a0c:	f819 900a 	ldrb.w	r9, [r9, sl]
 8018a10:	fb1b fb05 	smulbb	fp, fp, r5
 8018a14:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018a18:	eb0e 0a09 	add.w	sl, lr, r9
 8018a1c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8018a20:	fb09 b908 	mla	r9, r9, r8, fp
 8018a24:	fa1f f989 	uxth.w	r9, r9
 8018a28:	f109 0b01 	add.w	fp, r9, #1
 8018a2c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018a30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a34:	f804 9006 	strb.w	r9, [r4, r6]
 8018a38:	4426      	add	r6, r4
 8018a3a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018a3e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018a42:	fb1b fb05 	smulbb	fp, fp, r5
 8018a46:	fb09 b908 	mla	r9, r9, r8, fp
 8018a4a:	fa1f f989 	uxth.w	r9, r9
 8018a4e:	f109 0b01 	add.w	fp, r9, #1
 8018a52:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018a56:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a5a:	f886 9001 	strb.w	r9, [r6, #1]
 8018a5e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018a62:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018a66:	fb1a fa05 	smulbb	sl, sl, r5
 8018a6a:	fb09 a908 	mla	r9, r9, r8, sl
 8018a6e:	fa1f f989 	uxth.w	r9, r9
 8018a72:	f109 0a01 	add.w	sl, r9, #1
 8018a76:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018a7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a7e:	f886 9002 	strb.w	r9, [r6, #2]
 8018a82:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018a84:	3701      	adds	r7, #1
 8018a86:	4408      	add	r0, r1
 8018a88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018a8a:	440a      	add	r2, r1
 8018a8c:	e761      	b.n	8018952 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018a8e:	b005      	add	sp, #20
 8018a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a98:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018a9a:	4693      	mov	fp, r2
 8018a9c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018aa2:	6868      	ldr	r0, [r5, #4]
 8018aa4:	6877      	ldr	r7, [r6, #4]
 8018aa6:	9100      	str	r1, [sp, #0]
 8018aa8:	3704      	adds	r7, #4
 8018aaa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018aae:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8018ab2:	fb00 2404 	mla	r4, r0, r4, r2
 8018ab6:	682a      	ldr	r2, [r5, #0]
 8018ab8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018abc:	4414      	add	r4, r2
 8018abe:	6832      	ldr	r2, [r6, #0]
 8018ac0:	9201      	str	r2, [sp, #4]
 8018ac2:	9a00      	ldr	r2, [sp, #0]
 8018ac4:	2a00      	cmp	r2, #0
 8018ac6:	dc03      	bgt.n	8018ad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018ac8:	f1bb 0f00 	cmp.w	fp, #0
 8018acc:	f340 80bc 	ble.w	8018c48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018ad2:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8018ad6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018ada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018adc:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8018ae0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	dd0c      	ble.n	8018b02 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018ae8:	1405      	asrs	r5, r0, #16
 8018aea:	d405      	bmi.n	8018af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018aec:	4555      	cmp	r5, sl
 8018aee:	da03      	bge.n	8018af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018af0:	1415      	asrs	r5, r2, #16
 8018af2:	d401      	bmi.n	8018af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018af4:	454d      	cmp	r5, r9
 8018af6:	db05      	blt.n	8018b04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018af8:	4440      	add	r0, r8
 8018afa:	4472      	add	r2, lr
 8018afc:	3b01      	subs	r3, #1
 8018afe:	3403      	adds	r4, #3
 8018b00:	e7f0      	b.n	8018ae4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018b02:	d03f      	beq.n	8018b84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8018b04:	1e5d      	subs	r5, r3, #1
 8018b06:	fb08 0c05 	mla	ip, r8, r5, r0
 8018b0a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8018b0e:	d42e      	bmi.n	8018b6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b10:	45d4      	cmp	ip, sl
 8018b12:	da2c      	bge.n	8018b6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b14:	fb0e 2505 	mla	r5, lr, r5, r2
 8018b18:	142d      	asrs	r5, r5, #16
 8018b1a:	d428      	bmi.n	8018b6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b1c:	454d      	cmp	r5, r9
 8018b1e:	da26      	bge.n	8018b6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b20:	1ce5      	adds	r5, r4, #3
 8018b22:	469c      	mov	ip, r3
 8018b24:	f1bc 0f00 	cmp.w	ip, #0
 8018b28:	f105 0503 	add.w	r5, r5, #3
 8018b2c:	dd25      	ble.n	8018b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8018b2e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018b32:	ea4f 4922 	mov.w	r9, r2, asr #16
 8018b36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018b3a:	4472      	add	r2, lr
 8018b3c:	468a      	mov	sl, r1
 8018b3e:	9901      	ldr	r1, [sp, #4]
 8018b40:	fb0a 1909 	mla	r9, sl, r9, r1
 8018b44:	1401      	asrs	r1, r0, #16
 8018b46:	4440      	add	r0, r8
 8018b48:	f819 9001 	ldrb.w	r9, [r9, r1]
 8018b4c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018b50:	eb07 0a09 	add.w	sl, r7, r9
 8018b54:	f817 9009 	ldrb.w	r9, [r7, r9]
 8018b58:	f805 9c06 	strb.w	r9, [r5, #-6]
 8018b5c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018b60:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018b64:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018b68:	f805 9c04 	strb.w	r9, [r5, #-4]
 8018b6c:	e7da      	b.n	8018b24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018b6e:	2500      	movs	r5, #0
 8018b70:	eba3 0c05 	sub.w	ip, r3, r5
 8018b74:	f1bc 0f00 	cmp.w	ip, #0
 8018b78:	dc3b      	bgt.n	8018bf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018b7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b82:	441c      	add	r4, r3
 8018b84:	9b00      	ldr	r3, [sp, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	dd5e      	ble.n	8018c48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018b8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b94:	eeb0 6a62 	vmov.f32	s12, s5
 8018b98:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018b9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ba0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ba4:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018ba8:	eeb0 6a43 	vmov.f32	s12, s6
 8018bac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018bb0:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018bb4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bc0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bc4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018bc8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018bcc:	ee12 2a90 	vmov	r2, s5
 8018bd0:	eef0 2a47 	vmov.f32	s5, s14
 8018bd4:	fb92 f8f3 	sdiv	r8, r2, r3
 8018bd8:	ee13 2a10 	vmov	r2, s6
 8018bdc:	eeb0 3a67 	vmov.f32	s6, s15
 8018be0:	fb92 fef3 	sdiv	lr, r2, r3
 8018be4:	9b00      	ldr	r3, [sp, #0]
 8018be6:	3b01      	subs	r3, #1
 8018be8:	9300      	str	r3, [sp, #0]
 8018bea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bec:	bf08      	it	eq
 8018bee:	465b      	moveq	r3, fp
 8018bf0:	e767      	b.n	8018ac2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018bf2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018bf6:	d423      	bmi.n	8018c40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018bf8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8018bfc:	45cc      	cmp	ip, r9
 8018bfe:	dd1f      	ble.n	8018c40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c00:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018c04:	d41c      	bmi.n	8018c40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c06:	68f1      	ldr	r1, [r6, #12]
 8018c08:	4551      	cmp	r1, sl
 8018c0a:	dd19      	ble.n	8018c40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c0c:	fa0f fc8c 	sxth.w	ip, ip
 8018c10:	9901      	ldr	r1, [sp, #4]
 8018c12:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8018c16:	f81c c009 	ldrb.w	ip, [ip, r9]
 8018c1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018c1e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8018c22:	eb07 090c 	add.w	r9, r7, ip
 8018c26:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8018c2a:	f804 a00c 	strb.w	sl, [r4, ip]
 8018c2e:	44a4      	add	ip, r4
 8018c30:	f899 a001 	ldrb.w	sl, [r9, #1]
 8018c34:	f88c a001 	strb.w	sl, [ip, #1]
 8018c38:	f899 9002 	ldrb.w	r9, [r9, #2]
 8018c3c:	f88c 9002 	strb.w	r9, [ip, #2]
 8018c40:	4440      	add	r0, r8
 8018c42:	4472      	add	r2, lr
 8018c44:	3501      	adds	r5, #1
 8018c46:	e793      	b.n	8018b70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8018c48:	b003      	add	sp, #12
 8018c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018c4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c52:	b085      	sub	sp, #20
 8018c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018c58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018c5a:	9202      	str	r2, [sp, #8]
 8018c5c:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018c60:	6860      	ldr	r0, [r4, #4]
 8018c62:	9203      	str	r2, [sp, #12]
 8018c64:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018c68:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018c6c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018c70:	fb00 2505 	mla	r5, r0, r5, r2
 8018c74:	6822      	ldr	r2, [r4, #0]
 8018c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c7a:	4415      	add	r5, r2
 8018c7c:	f8dc 2000 	ldr.w	r2, [ip]
 8018c80:	9200      	str	r2, [sp, #0]
 8018c82:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018c86:	3204      	adds	r2, #4
 8018c88:	9201      	str	r2, [sp, #4]
 8018c8a:	2900      	cmp	r1, #0
 8018c8c:	dc03      	bgt.n	8018c96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018c8e:	9a02      	ldr	r2, [sp, #8]
 8018c90:	2a00      	cmp	r2, #0
 8018c92:	f340 8127 	ble.w	8018ee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018c96:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018c98:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018c9c:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018ca0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018ca2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018ca6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	dd0d      	ble.n	8018cca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018cae:	1422      	asrs	r2, r4, #16
 8018cb0:	d405      	bmi.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018cb2:	4542      	cmp	r2, r8
 8018cb4:	da03      	bge.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018cb6:	1402      	asrs	r2, r0, #16
 8018cb8:	d401      	bmi.n	8018cbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018cba:	42ba      	cmp	r2, r7
 8018cbc:	db06      	blt.n	8018ccc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018cbe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018cc0:	4474      	add	r4, lr
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	3503      	adds	r5, #3
 8018cc6:	4410      	add	r0, r2
 8018cc8:	e7ef      	b.n	8018caa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018cca:	d075      	beq.n	8018db8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018ccc:	1e5a      	subs	r2, r3, #1
 8018cce:	fb0e 4602 	mla	r6, lr, r2, r4
 8018cd2:	1436      	asrs	r6, r6, #16
 8018cd4:	d465      	bmi.n	8018da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018cd6:	4546      	cmp	r6, r8
 8018cd8:	da63      	bge.n	8018da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018cda:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018cdc:	fb06 0202 	mla	r2, r6, r2, r0
 8018ce0:	1412      	asrs	r2, r2, #16
 8018ce2:	d45e      	bmi.n	8018da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018ce4:	42ba      	cmp	r2, r7
 8018ce6:	da5c      	bge.n	8018da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018ce8:	1cef      	adds	r7, r5, #3
 8018cea:	4699      	mov	r9, r3
 8018cec:	f1b9 0f00 	cmp.w	r9, #0
 8018cf0:	dd5d      	ble.n	8018dae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018cf2:	1402      	asrs	r2, r0, #16
 8018cf4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018cf8:	1426      	asrs	r6, r4, #16
 8018cfa:	4692      	mov	sl, r2
 8018cfc:	9a00      	ldr	r2, [sp, #0]
 8018cfe:	fb08 220a 	mla	r2, r8, sl, r2
 8018d02:	5d92      	ldrb	r2, [r2, r6]
 8018d04:	9e01      	ldr	r6, [sp, #4]
 8018d06:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018d0a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018d0e:	d041      	beq.n	8018d94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018d10:	9a03      	ldr	r2, [sp, #12]
 8018d12:	fa5f fb86 	uxtb.w	fp, r6
 8018d16:	fb02 f808 	mul.w	r8, r2, r8
 8018d1a:	f108 0201 	add.w	r2, r8, #1
 8018d1e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018d22:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018d26:	1212      	asrs	r2, r2, #8
 8018d28:	fa1f fa82 	uxth.w	sl, r2
 8018d2c:	43d2      	mvns	r2, r2
 8018d2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018d32:	b2d2      	uxtb	r2, r2
 8018d34:	fb08 b802 	mla	r8, r8, r2, fp
 8018d38:	fa1f f888 	uxth.w	r8, r8
 8018d3c:	f108 0b01 	add.w	fp, r8, #1
 8018d40:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018d44:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018d48:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018d4c:	fb1b fb0a 	smulbb	fp, fp, sl
 8018d50:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018d54:	fb16 fa0a 	smulbb	sl, r6, sl
 8018d58:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018d5c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018d60:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018d64:	fb06 aa02 	mla	sl, r6, r2, sl
 8018d68:	fb08 b802 	mla	r8, r8, r2, fp
 8018d6c:	fa1f fa8a 	uxth.w	sl, sl
 8018d70:	fa1f f888 	uxth.w	r8, r8
 8018d74:	f10a 0601 	add.w	r6, sl, #1
 8018d78:	f108 0b01 	add.w	fp, r8, #1
 8018d7c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018d80:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018d84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018d88:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018d8c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018d90:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018d94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018d96:	4474      	add	r4, lr
 8018d98:	3703      	adds	r7, #3
 8018d9a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018d9e:	4410      	add	r0, r2
 8018da0:	e7a4      	b.n	8018cec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018da2:	f04f 0800 	mov.w	r8, #0
 8018da6:	eba3 0208 	sub.w	r2, r3, r8
 8018daa:	2a00      	cmp	r2, #0
 8018dac:	dc3b      	bgt.n	8018e26 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018dae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018db6:	441d      	add	r5, r3
 8018db8:	2900      	cmp	r1, #0
 8018dba:	f340 8093 	ble.w	8018ee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018dbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018dc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018dc8:	3901      	subs	r1, #1
 8018dca:	eeb0 6a62 	vmov.f32	s12, s5
 8018dce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018dd2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018dd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dda:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018dde:	eeb0 6a43 	vmov.f32	s12, s6
 8018de2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018de6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018dea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018dee:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018df2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018df6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018dfa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018dfe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018e02:	ee12 2a90 	vmov	r2, s5
 8018e06:	eef0 2a47 	vmov.f32	s5, s14
 8018e0a:	fb92 fef3 	sdiv	lr, r2, r3
 8018e0e:	ee13 2a10 	vmov	r2, s6
 8018e12:	eeb0 3a67 	vmov.f32	s6, s15
 8018e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e1a:	9a02      	ldr	r2, [sp, #8]
 8018e1c:	9312      	str	r3, [sp, #72]	@ 0x48
 8018e1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e20:	bf08      	it	eq
 8018e22:	4613      	moveq	r3, r2
 8018e24:	e731      	b.n	8018c8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018e26:	1427      	asrs	r7, r4, #16
 8018e28:	d456      	bmi.n	8018ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018e2a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018e2e:	42be      	cmp	r6, r7
 8018e30:	dd52      	ble.n	8018ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018e32:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018e36:	d44f      	bmi.n	8018ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018e38:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018e3c:	454a      	cmp	r2, r9
 8018e3e:	dd4b      	ble.n	8018ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018e40:	9a00      	ldr	r2, [sp, #0]
 8018e42:	b236      	sxth	r6, r6
 8018e44:	fb09 2606 	mla	r6, r9, r6, r2
 8018e48:	5df2      	ldrb	r2, [r6, r7]
 8018e4a:	9e01      	ldr	r6, [sp, #4]
 8018e4c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8018e50:	0e3a      	lsrs	r2, r7, #24
 8018e52:	d041      	beq.n	8018ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018e54:	9e03      	ldr	r6, [sp, #12]
 8018e56:	fa5f fb87 	uxtb.w	fp, r7
 8018e5a:	4372      	muls	r2, r6
 8018e5c:	1c56      	adds	r6, r2, #1
 8018e5e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018e62:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018e66:	1212      	asrs	r2, r2, #8
 8018e68:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018e6c:	fa1f fa82 	uxth.w	sl, r2
 8018e70:	43d2      	mvns	r2, r2
 8018e72:	fb1b fb0a 	smulbb	fp, fp, sl
 8018e76:	b2d2      	uxtb	r2, r2
 8018e78:	fb09 b902 	mla	r9, r9, r2, fp
 8018e7c:	fa1f f989 	uxth.w	r9, r9
 8018e80:	f109 0b01 	add.w	fp, r9, #1
 8018e84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018e88:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018e8c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018e90:	fb1b fb0a 	smulbb	fp, fp, sl
 8018e94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018e98:	fb17 fa0a 	smulbb	sl, r7, sl
 8018e9c:	f805 9006 	strb.w	r9, [r5, r6]
 8018ea0:	442e      	add	r6, r5
 8018ea2:	78b7      	ldrb	r7, [r6, #2]
 8018ea4:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018ea8:	fb07 aa02 	mla	sl, r7, r2, sl
 8018eac:	fb09 b902 	mla	r9, r9, r2, fp
 8018eb0:	fa1f fa8a 	uxth.w	sl, sl
 8018eb4:	fa1f f989 	uxth.w	r9, r9
 8018eb8:	f10a 0701 	add.w	r7, sl, #1
 8018ebc:	f109 0b01 	add.w	fp, r9, #1
 8018ec0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018ec4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ec8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ecc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ed0:	f886 a002 	strb.w	sl, [r6, #2]
 8018ed4:	f886 9001 	strb.w	r9, [r6, #1]
 8018ed8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018eda:	4474      	add	r4, lr
 8018edc:	f108 0801 	add.w	r8, r8, #1
 8018ee0:	4410      	add	r0, r2
 8018ee2:	e760      	b.n	8018da6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8018ee4:	b005      	add	sp, #20
 8018ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018eea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eee:	b085      	sub	sp, #20
 8018ef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018ef4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8018ef6:	9203      	str	r2, [sp, #12]
 8018ef8:	6868      	ldr	r0, [r5, #4]
 8018efa:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018efe:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018f02:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018f06:	fb00 2404 	mla	r4, r0, r4, r2
 8018f0a:	682a      	ldr	r2, [r5, #0]
 8018f0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018f10:	4414      	add	r4, r2
 8018f12:	f8dc 2000 	ldr.w	r2, [ip]
 8018f16:	9201      	str	r2, [sp, #4]
 8018f18:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018f1c:	3204      	adds	r2, #4
 8018f1e:	9202      	str	r2, [sp, #8]
 8018f20:	2900      	cmp	r1, #0
 8018f22:	dc03      	bgt.n	8018f2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018f24:	9a03      	ldr	r2, [sp, #12]
 8018f26:	2a00      	cmp	r2, #0
 8018f28:	f340 8137 	ble.w	801919a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018f2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018f2e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018f32:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018f36:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018f38:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018f3c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	dd0d      	ble.n	8018f60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f44:	1405      	asrs	r5, r0, #16
 8018f46:	d405      	bmi.n	8018f54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018f48:	4545      	cmp	r5, r8
 8018f4a:	da03      	bge.n	8018f54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018f4c:	1415      	asrs	r5, r2, #16
 8018f4e:	d401      	bmi.n	8018f54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018f50:	42bd      	cmp	r5, r7
 8018f52:	db06      	blt.n	8018f62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018f54:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018f56:	4470      	add	r0, lr
 8018f58:	3b01      	subs	r3, #1
 8018f5a:	3403      	adds	r4, #3
 8018f5c:	442a      	add	r2, r5
 8018f5e:	e7ef      	b.n	8018f40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018f60:	d070      	beq.n	8019044 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018f62:	1e5d      	subs	r5, r3, #1
 8018f64:	fb0e 0605 	mla	r6, lr, r5, r0
 8018f68:	1436      	asrs	r6, r6, #16
 8018f6a:	d462      	bmi.n	8019032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018f6c:	4546      	cmp	r6, r8
 8018f6e:	da60      	bge.n	8019032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018f70:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018f72:	fb06 2505 	mla	r5, r6, r5, r2
 8018f76:	142d      	asrs	r5, r5, #16
 8018f78:	d45b      	bmi.n	8019032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018f7a:	42bd      	cmp	r5, r7
 8018f7c:	da59      	bge.n	8019032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018f7e:	1ce5      	adds	r5, r4, #3
 8018f80:	469a      	mov	sl, r3
 8018f82:	f1ba 0f00 	cmp.w	sl, #0
 8018f86:	dd58      	ble.n	801903a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8018f88:	1416      	asrs	r6, r2, #16
 8018f8a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018f8e:	1407      	asrs	r7, r0, #16
 8018f90:	46b1      	mov	r9, r6
 8018f92:	9e01      	ldr	r6, [sp, #4]
 8018f94:	fb08 6609 	mla	r6, r8, r9, r6
 8018f98:	5df6      	ldrb	r6, [r6, r7]
 8018f9a:	9f02      	ldr	r7, [sp, #8]
 8018f9c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018fa0:	0e37      	lsrs	r7, r6, #24
 8018fa2:	2fff      	cmp	r7, #255	@ 0xff
 8018fa4:	f000 80f0 	beq.w	8019188 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018fa8:	fa5f f887 	uxtb.w	r8, r7
 8018fac:	b3d7      	cbz	r7, 8019024 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018fae:	fa1f f788 	uxth.w	r7, r8
 8018fb2:	ea6f 0808 	mvn.w	r8, r8
 8018fb6:	fa5f fb86 	uxtb.w	fp, r6
 8018fba:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8018fbe:	fa5f f888 	uxtb.w	r8, r8
 8018fc2:	fb1b fb07 	smulbb	fp, fp, r7
 8018fc6:	fb09 b908 	mla	r9, r9, r8, fp
 8018fca:	fa1f f989 	uxth.w	r9, r9
 8018fce:	f109 0b01 	add.w	fp, r9, #1
 8018fd2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018fd6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018fda:	fb1b fb08 	smulbb	fp, fp, r8
 8018fde:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018fe2:	f805 9c03 	strb.w	r9, [r5, #-3]
 8018fe6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8018fea:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018fee:	fb09 b907 	mla	r9, r9, r7, fp
 8018ff2:	fa1f f989 	uxth.w	r9, r9
 8018ff6:	f109 0b01 	add.w	fp, r9, #1
 8018ffa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ffe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019002:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019006:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801900a:	fb19 f808 	smulbb	r8, r9, r8
 801900e:	fb06 8607 	mla	r6, r6, r7, r8
 8019012:	b2b6      	uxth	r6, r6
 8019014:	f106 0801 	add.w	r8, r6, #1
 8019018:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801901c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019020:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019024:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8019026:	4470      	add	r0, lr
 8019028:	3503      	adds	r5, #3
 801902a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801902e:	4432      	add	r2, r6
 8019030:	e7a7      	b.n	8018f82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019032:	2600      	movs	r6, #0
 8019034:	1b9d      	subs	r5, r3, r6
 8019036:	2d00      	cmp	r5, #0
 8019038:	dc3b      	bgt.n	80190b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801903a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801903e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019042:	441c      	add	r4, r3
 8019044:	2900      	cmp	r1, #0
 8019046:	f340 80a8 	ble.w	801919a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801904a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801904e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019050:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019054:	3901      	subs	r1, #1
 8019056:	eeb0 6a62 	vmov.f32	s12, s5
 801905a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801905e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019062:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019066:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801906a:	eeb0 6a43 	vmov.f32	s12, s6
 801906e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019072:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019076:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801907a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801907e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019082:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019086:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801908a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801908e:	ee12 2a90 	vmov	r2, s5
 8019092:	eef0 2a47 	vmov.f32	s5, s14
 8019096:	fb92 fef3 	sdiv	lr, r2, r3
 801909a:	ee13 2a10 	vmov	r2, s6
 801909e:	eeb0 3a67 	vmov.f32	s6, s15
 80190a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80190a6:	9a03      	ldr	r2, [sp, #12]
 80190a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80190aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190ac:	bf08      	it	eq
 80190ae:	4613      	moveq	r3, r2
 80190b0:	e736      	b.n	8018f20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80190b2:	ea5f 4820 	movs.w	r8, r0, asr #16
 80190b6:	d457      	bmi.n	8019168 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80190b8:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80190bc:	4547      	cmp	r7, r8
 80190be:	dd53      	ble.n	8019168 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80190c0:	ea5f 4922 	movs.w	r9, r2, asr #16
 80190c4:	d450      	bmi.n	8019168 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80190c6:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80190ca:	454d      	cmp	r5, r9
 80190cc:	dd4c      	ble.n	8019168 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80190ce:	9d01      	ldr	r5, [sp, #4]
 80190d0:	b23f      	sxth	r7, r7
 80190d2:	fb09 5707 	mla	r7, r9, r7, r5
 80190d6:	f817 5008 	ldrb.w	r5, [r7, r8]
 80190da:	9f02      	ldr	r7, [sp, #8]
 80190dc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80190e0:	0e2f      	lsrs	r7, r5, #24
 80190e2:	2fff      	cmp	r7, #255	@ 0xff
 80190e4:	d045      	beq.n	8019172 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80190e6:	fa5f f987 	uxtb.w	r9, r7
 80190ea:	b3ef      	cbz	r7, 8019168 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80190ec:	fa1f f889 	uxth.w	r8, r9
 80190f0:	ea6f 0909 	mvn.w	r9, r9
 80190f4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80190f8:	fa5f fb85 	uxtb.w	fp, r5
 80190fc:	f814 a007 	ldrb.w	sl, [r4, r7]
 8019100:	fa5f f989 	uxtb.w	r9, r9
 8019104:	fb1b fb08 	smulbb	fp, fp, r8
 8019108:	fb0a ba09 	mla	sl, sl, r9, fp
 801910c:	fa1f fa8a 	uxth.w	sl, sl
 8019110:	f10a 0b01 	add.w	fp, sl, #1
 8019114:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019118:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801911c:	f804 a007 	strb.w	sl, [r4, r7]
 8019120:	4427      	add	r7, r4
 8019122:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019126:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801912a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801912e:	fb1b fb09 	smulbb	fp, fp, r9
 8019132:	fb0a ba08 	mla	sl, sl, r8, fp
 8019136:	fa1f fa8a 	uxth.w	sl, sl
 801913a:	f10a 0b01 	add.w	fp, sl, #1
 801913e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019142:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019146:	f887 a001 	strb.w	sl, [r7, #1]
 801914a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801914e:	fb1a f909 	smulbb	r9, sl, r9
 8019152:	fb05 9508 	mla	r5, r5, r8, r9
 8019156:	b2ad      	uxth	r5, r5
 8019158:	f105 0901 	add.w	r9, r5, #1
 801915c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8019160:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019164:	f887 9002 	strb.w	r9, [r7, #2]
 8019168:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801916a:	4470      	add	r0, lr
 801916c:	3601      	adds	r6, #1
 801916e:	442a      	add	r2, r5
 8019170:	e760      	b.n	8019034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019172:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019176:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801917a:	55e5      	strb	r5, [r4, r7]
 801917c:	4427      	add	r7, r4
 801917e:	0c2d      	lsrs	r5, r5, #16
 8019180:	f887 8001 	strb.w	r8, [r7, #1]
 8019184:	70bd      	strb	r5, [r7, #2]
 8019186:	e7ef      	b.n	8019168 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019188:	0a37      	lsrs	r7, r6, #8
 801918a:	f805 6c03 	strb.w	r6, [r5, #-3]
 801918e:	0c36      	lsrs	r6, r6, #16
 8019190:	f805 7c02 	strb.w	r7, [r5, #-2]
 8019194:	f805 6c01 	strb.w	r6, [r5, #-1]
 8019198:	e744      	b.n	8019024 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801919a:	b005      	add	sp, #20
 801919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80191a6:	9201      	str	r2, [sp, #4]
 80191a8:	6870      	ldr	r0, [r6, #4]
 80191aa:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80191ae:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80191b2:	fa1f fe85 	uxth.w	lr, r5
 80191b6:	43ed      	mvns	r5, r5
 80191b8:	f8dc 8000 	ldr.w	r8, [ip]
 80191bc:	b2ed      	uxtb	r5, r5
 80191be:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80191c2:	fb00 2404 	mla	r4, r0, r4, r2
 80191c6:	6832      	ldr	r2, [r6, #0]
 80191c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80191cc:	4414      	add	r4, r2
 80191ce:	2900      	cmp	r1, #0
 80191d0:	dc03      	bgt.n	80191da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80191d2:	9a01      	ldr	r2, [sp, #4]
 80191d4:	2a00      	cmp	r2, #0
 80191d6:	f340 810d 	ble.w	80193f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80191da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80191dc:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80191e0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80191e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80191e6:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80191ea:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	dd0e      	ble.n	8019210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80191f2:	1406      	asrs	r6, r0, #16
 80191f4:	d405      	bmi.n	8019202 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80191f6:	4556      	cmp	r6, sl
 80191f8:	da03      	bge.n	8019202 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80191fa:	1416      	asrs	r6, r2, #16
 80191fc:	d401      	bmi.n	8019202 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80191fe:	454e      	cmp	r6, r9
 8019200:	db07      	blt.n	8019212 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019202:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019204:	3b01      	subs	r3, #1
 8019206:	3403      	adds	r4, #3
 8019208:	4430      	add	r0, r6
 801920a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801920c:	4432      	add	r2, r6
 801920e:	e7ee      	b.n	80191ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8019210:	d060      	beq.n	80192d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8019212:	1e5e      	subs	r6, r3, #1
 8019214:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019216:	fb07 0706 	mla	r7, r7, r6, r0
 801921a:	143f      	asrs	r7, r7, #16
 801921c:	d451      	bmi.n	80192c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801921e:	4557      	cmp	r7, sl
 8019220:	da4f      	bge.n	80192c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019222:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019224:	fb07 2606 	mla	r6, r7, r6, r2
 8019228:	1436      	asrs	r6, r6, #16
 801922a:	d44a      	bmi.n	80192c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801922c:	454e      	cmp	r6, r9
 801922e:	da48      	bge.n	80192c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019230:	1ce6      	adds	r6, r4, #3
 8019232:	4699      	mov	r9, r3
 8019234:	f1b9 0f00 	cmp.w	r9, #0
 8019238:	f106 0603 	add.w	r6, r6, #3
 801923c:	dd45      	ble.n	80192ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801923e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019242:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019246:	1417      	asrs	r7, r2, #16
 8019248:	f109 39ff 	add.w	r9, r9, #4294967295
 801924c:	fb0b a707 	mla	r7, fp, r7, sl
 8019250:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019254:	fb1b fb05 	smulbb	fp, fp, r5
 8019258:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801925c:	eb08 0a07 	add.w	sl, r8, r7
 8019260:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019264:	fb07 b70e 	mla	r7, r7, lr, fp
 8019268:	b2bf      	uxth	r7, r7
 801926a:	f107 0b01 	add.w	fp, r7, #1
 801926e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019272:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019276:	fb1b fb05 	smulbb	fp, fp, r5
 801927a:	123f      	asrs	r7, r7, #8
 801927c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019280:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019284:	fb07 b70e 	mla	r7, r7, lr, fp
 8019288:	b2bf      	uxth	r7, r7
 801928a:	f107 0b01 	add.w	fp, r7, #1
 801928e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019292:	123f      	asrs	r7, r7, #8
 8019294:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019298:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801929c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80192a0:	fb1a fa05 	smulbb	sl, sl, r5
 80192a4:	fb07 a70e 	mla	r7, r7, lr, sl
 80192a8:	b2bf      	uxth	r7, r7
 80192aa:	f107 0a01 	add.w	sl, r7, #1
 80192ae:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80192b2:	123f      	asrs	r7, r7, #8
 80192b4:	f806 7c04 	strb.w	r7, [r6, #-4]
 80192b8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80192ba:	4438      	add	r0, r7
 80192bc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80192be:	443a      	add	r2, r7
 80192c0:	e7b8      	b.n	8019234 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80192c2:	2700      	movs	r7, #0
 80192c4:	1bde      	subs	r6, r3, r7
 80192c6:	2e00      	cmp	r6, #0
 80192c8:	dc3f      	bgt.n	801934a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80192ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80192ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192d2:	441c      	add	r4, r3
 80192d4:	2900      	cmp	r1, #0
 80192d6:	f340 808d 	ble.w	80193f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80192da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80192de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80192e4:	3901      	subs	r1, #1
 80192e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80192ea:	eef0 6a62 	vmov.f32	s13, s5
 80192ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80192f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80192f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80192fa:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 80192fe:	eef0 6a43 	vmov.f32	s13, s6
 8019302:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019306:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801930a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801930e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019312:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019316:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801931a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801931e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019322:	ee12 2a90 	vmov	r2, s5
 8019326:	eef0 2a47 	vmov.f32	s5, s14
 801932a:	fb92 f3f3 	sdiv	r3, r2, r3
 801932e:	ee13 2a10 	vmov	r2, s6
 8019332:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019334:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019336:	eeb0 3a67 	vmov.f32	s6, s15
 801933a:	fb92 f3f3 	sdiv	r3, r2, r3
 801933e:	9a01      	ldr	r2, [sp, #4]
 8019340:	9310      	str	r3, [sp, #64]	@ 0x40
 8019342:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019344:	bf08      	it	eq
 8019346:	4613      	moveq	r3, r2
 8019348:	e741      	b.n	80191ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801934a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801934e:	d44b      	bmi.n	80193e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019350:	f8dc b008 	ldr.w	fp, [ip, #8]
 8019354:	45cb      	cmp	fp, r9
 8019356:	dd47      	ble.n	80193e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019358:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801935c:	d444      	bmi.n	80193e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801935e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8019362:	4556      	cmp	r6, sl
 8019364:	dd40      	ble.n	80193e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019366:	fa0f f68b 	sxth.w	r6, fp
 801936a:	fb0a 9906 	mla	r9, sl, r6, r9
 801936e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019372:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019376:	f814 b006 	ldrb.w	fp, [r4, r6]
 801937a:	fb1b fb05 	smulbb	fp, fp, r5
 801937e:	eb08 0a09 	add.w	sl, r8, r9
 8019382:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019386:	fb09 b90e 	mla	r9, r9, lr, fp
 801938a:	fa1f f989 	uxth.w	r9, r9
 801938e:	f109 0b01 	add.w	fp, r9, #1
 8019392:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019396:	ea4f 2929 	mov.w	r9, r9, asr #8
 801939a:	f804 9006 	strb.w	r9, [r4, r6]
 801939e:	4426      	add	r6, r4
 80193a0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80193a4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80193a8:	fb1b fb05 	smulbb	fp, fp, r5
 80193ac:	fb09 b90e 	mla	r9, r9, lr, fp
 80193b0:	fa1f f989 	uxth.w	r9, r9
 80193b4:	f109 0b01 	add.w	fp, r9, #1
 80193b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80193bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80193c0:	f886 9001 	strb.w	r9, [r6, #1]
 80193c4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80193c8:	f896 a002 	ldrb.w	sl, [r6, #2]
 80193cc:	fb1a fa05 	smulbb	sl, sl, r5
 80193d0:	fb09 a90e 	mla	r9, r9, lr, sl
 80193d4:	fa1f f989 	uxth.w	r9, r9
 80193d8:	f109 0a01 	add.w	sl, r9, #1
 80193dc:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80193e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80193e4:	f886 9002 	strb.w	r9, [r6, #2]
 80193e8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80193ea:	3701      	adds	r7, #1
 80193ec:	4430      	add	r0, r6
 80193ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80193f0:	4432      	add	r2, r6
 80193f2:	e767      	b.n	80192c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80193f4:	b003      	add	sp, #12
 80193f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080193fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80193fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193fe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8019400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019404:	9201      	str	r2, [sp, #4]
 8019406:	6868      	ldr	r0, [r5, #4]
 8019408:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801940a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801940e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8019412:	fb00 2404 	mla	r4, r0, r4, r2
 8019416:	682a      	ldr	r2, [r5, #0]
 8019418:	f8d7 8000 	ldr.w	r8, [r7]
 801941c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019420:	4414      	add	r4, r2
 8019422:	2900      	cmp	r1, #0
 8019424:	dc03      	bgt.n	801942e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019426:	9a01      	ldr	r2, [sp, #4]
 8019428:	2a00      	cmp	r2, #0
 801942a:	f340 80af 	ble.w	801958c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801942e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019430:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8019434:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801943a:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801943e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019442:	2b00      	cmp	r3, #0
 8019444:	dd0c      	ble.n	8019460 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019446:	1405      	asrs	r5, r0, #16
 8019448:	d405      	bmi.n	8019456 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801944a:	4555      	cmp	r5, sl
 801944c:	da03      	bge.n	8019456 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801944e:	1415      	asrs	r5, r2, #16
 8019450:	d401      	bmi.n	8019456 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019452:	454d      	cmp	r5, r9
 8019454:	db05      	blt.n	8019462 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019456:	4470      	add	r0, lr
 8019458:	4462      	add	r2, ip
 801945a:	3b01      	subs	r3, #1
 801945c:	3403      	adds	r4, #3
 801945e:	e7f0      	b.n	8019442 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019460:	d038      	beq.n	80194d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019462:	1e5d      	subs	r5, r3, #1
 8019464:	fb0e 0605 	mla	r6, lr, r5, r0
 8019468:	1436      	asrs	r6, r6, #16
 801946a:	d42a      	bmi.n	80194c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801946c:	4556      	cmp	r6, sl
 801946e:	da28      	bge.n	80194c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019470:	fb0c 2505 	mla	r5, ip, r5, r2
 8019474:	142d      	asrs	r5, r5, #16
 8019476:	d424      	bmi.n	80194c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8019478:	454d      	cmp	r5, r9
 801947a:	da22      	bge.n	80194c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801947c:	1ce6      	adds	r6, r4, #3
 801947e:	4699      	mov	r9, r3
 8019480:	f1b9 0f00 	cmp.w	r9, #0
 8019484:	f106 0603 	add.w	r6, r6, #3
 8019488:	dd1f      	ble.n	80194ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801948a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801948e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019492:	1415      	asrs	r5, r2, #16
 8019494:	4470      	add	r0, lr
 8019496:	4462      	add	r2, ip
 8019498:	f109 39ff 	add.w	r9, r9, #4294967295
 801949c:	fb0b a505 	mla	r5, fp, r5, sl
 80194a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194a4:	eb08 0a05 	add.w	sl, r8, r5
 80194a8:	f818 5005 	ldrb.w	r5, [r8, r5]
 80194ac:	f806 5c06 	strb.w	r5, [r6, #-6]
 80194b0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80194b4:	f806 5c05 	strb.w	r5, [r6, #-5]
 80194b8:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80194bc:	f806 5c04 	strb.w	r5, [r6, #-4]
 80194c0:	e7de      	b.n	8019480 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80194c2:	2600      	movs	r6, #0
 80194c4:	1b9d      	subs	r5, r3, r6
 80194c6:	2d00      	cmp	r5, #0
 80194c8:	dc38      	bgt.n	801953c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80194ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194d2:	441c      	add	r4, r3
 80194d4:	2900      	cmp	r1, #0
 80194d6:	dd59      	ble.n	801958c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80194d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80194dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80194de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80194e2:	3901      	subs	r1, #1
 80194e4:	eeb0 6a62 	vmov.f32	s12, s5
 80194e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80194ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80194f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194f4:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80194f8:	eeb0 6a43 	vmov.f32	s12, s6
 80194fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019500:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8019504:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019508:	ee61 7a27 	vmul.f32	s15, s2, s15
 801950c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019510:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019514:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019518:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801951c:	ee12 2a90 	vmov	r2, s5
 8019520:	eef0 2a47 	vmov.f32	s5, s14
 8019524:	fb92 fef3 	sdiv	lr, r2, r3
 8019528:	ee13 2a10 	vmov	r2, s6
 801952c:	eeb0 3a67 	vmov.f32	s6, s15
 8019530:	fb92 fcf3 	sdiv	ip, r2, r3
 8019534:	9a01      	ldr	r2, [sp, #4]
 8019536:	bf08      	it	eq
 8019538:	4613      	moveq	r3, r2
 801953a:	e772      	b.n	8019422 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801953c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019540:	d420      	bmi.n	8019584 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019542:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8019546:	45cb      	cmp	fp, r9
 8019548:	dd1c      	ble.n	8019584 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801954a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801954e:	d419      	bmi.n	8019584 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019550:	68fd      	ldr	r5, [r7, #12]
 8019552:	4555      	cmp	r5, sl
 8019554:	dd16      	ble.n	8019584 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019556:	fa0f f58b 	sxth.w	r5, fp
 801955a:	fb0a 9505 	mla	r5, sl, r5, r9
 801955e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019562:	f818 9005 	ldrb.w	r9, [r8, r5]
 8019566:	eb08 0b05 	add.w	fp, r8, r5
 801956a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801956e:	f804 9005 	strb.w	r9, [r4, r5]
 8019572:	4425      	add	r5, r4
 8019574:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8019578:	f885 9001 	strb.w	r9, [r5, #1]
 801957c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019580:	f885 9002 	strb.w	r9, [r5, #2]
 8019584:	4470      	add	r0, lr
 8019586:	4462      	add	r2, ip
 8019588:	3601      	adds	r6, #1
 801958a:	e79b      	b.n	80194c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801958c:	b003      	add	sp, #12
 801958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019592 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019596:	b085      	sub	sp, #20
 8019598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801959c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801959e:	9202      	str	r2, [sp, #8]
 80195a0:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80195a4:	6860      	ldr	r0, [r4, #4]
 80195a6:	9203      	str	r2, [sp, #12]
 80195a8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80195ac:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80195b0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80195b4:	fb00 2505 	mla	r5, r0, r5, r2
 80195b8:	6822      	ldr	r2, [r4, #0]
 80195ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195be:	4415      	add	r5, r2
 80195c0:	f8dc 2000 	ldr.w	r2, [ip]
 80195c4:	9201      	str	r2, [sp, #4]
 80195c6:	2900      	cmp	r1, #0
 80195c8:	dc03      	bgt.n	80195d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80195ca:	9a02      	ldr	r2, [sp, #8]
 80195cc:	2a00      	cmp	r2, #0
 80195ce:	f340 8122 	ble.w	8019816 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80195d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80195d4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80195d8:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80195dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80195de:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80195e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	dd0d      	ble.n	8019606 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80195ea:	1422      	asrs	r2, r4, #16
 80195ec:	d405      	bmi.n	80195fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80195ee:	4542      	cmp	r2, r8
 80195f0:	da03      	bge.n	80195fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80195f2:	1402      	asrs	r2, r0, #16
 80195f4:	d401      	bmi.n	80195fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80195f6:	42ba      	cmp	r2, r7
 80195f8:	db06      	blt.n	8019608 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80195fc:	4474      	add	r4, lr
 80195fe:	3b01      	subs	r3, #1
 8019600:	3503      	adds	r5, #3
 8019602:	4410      	add	r0, r2
 8019604:	e7ef      	b.n	80195e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019606:	d072      	beq.n	80196ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019608:	1e5a      	subs	r2, r3, #1
 801960a:	fb0e 4602 	mla	r6, lr, r2, r4
 801960e:	1436      	asrs	r6, r6, #16
 8019610:	d462      	bmi.n	80196d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019612:	4546      	cmp	r6, r8
 8019614:	da60      	bge.n	80196d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019616:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8019618:	fb06 0202 	mla	r2, r6, r2, r0
 801961c:	1412      	asrs	r2, r2, #16
 801961e:	d45b      	bmi.n	80196d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019620:	42ba      	cmp	r2, r7
 8019622:	da59      	bge.n	80196d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019624:	1cef      	adds	r7, r5, #3
 8019626:	4699      	mov	r9, r3
 8019628:	f1b9 0f00 	cmp.w	r9, #0
 801962c:	dd5a      	ble.n	80196e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801962e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019632:	1426      	asrs	r6, r4, #16
 8019634:	1402      	asrs	r2, r0, #16
 8019636:	fb08 6202 	mla	r2, r8, r2, r6
 801963a:	9e01      	ldr	r6, [sp, #4]
 801963c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019640:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019644:	d041      	beq.n	80196ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019646:	9a03      	ldr	r2, [sp, #12]
 8019648:	fa5f fb86 	uxtb.w	fp, r6
 801964c:	fb02 f808 	mul.w	r8, r2, r8
 8019650:	f108 0201 	add.w	r2, r8, #1
 8019654:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019658:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801965c:	1212      	asrs	r2, r2, #8
 801965e:	fa1f fa82 	uxth.w	sl, r2
 8019662:	43d2      	mvns	r2, r2
 8019664:	fb1b fb0a 	smulbb	fp, fp, sl
 8019668:	b2d2      	uxtb	r2, r2
 801966a:	fb08 b802 	mla	r8, r8, r2, fp
 801966e:	fa1f f888 	uxth.w	r8, r8
 8019672:	f108 0b01 	add.w	fp, r8, #1
 8019676:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801967a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801967e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019682:	fb1b fb0a 	smulbb	fp, fp, sl
 8019686:	ea4f 2828 	mov.w	r8, r8, asr #8
 801968a:	fb16 fa0a 	smulbb	sl, r6, sl
 801968e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019692:	f807 8c03 	strb.w	r8, [r7, #-3]
 8019696:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801969a:	fb06 aa02 	mla	sl, r6, r2, sl
 801969e:	fb08 b802 	mla	r8, r8, r2, fp
 80196a2:	fa1f fa8a 	uxth.w	sl, sl
 80196a6:	fa1f f888 	uxth.w	r8, r8
 80196aa:	f10a 0601 	add.w	r6, sl, #1
 80196ae:	f108 0b01 	add.w	fp, r8, #1
 80196b2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80196b6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80196ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80196be:	ea4f 2828 	mov.w	r8, r8, asr #8
 80196c2:	f807 ac01 	strb.w	sl, [r7, #-1]
 80196c6:	f807 8c02 	strb.w	r8, [r7, #-2]
 80196ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80196cc:	4474      	add	r4, lr
 80196ce:	3703      	adds	r7, #3
 80196d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80196d4:	4410      	add	r0, r2
 80196d6:	e7a7      	b.n	8019628 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196d8:	f04f 0800 	mov.w	r8, #0
 80196dc:	eba3 0208 	sub.w	r2, r3, r8
 80196e0:	2a00      	cmp	r2, #0
 80196e2:	dc3b      	bgt.n	801975c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80196e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80196e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196ec:	441d      	add	r5, r3
 80196ee:	2900      	cmp	r1, #0
 80196f0:	f340 8091 	ble.w	8019816 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80196f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80196fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196fe:	3901      	subs	r1, #1
 8019700:	eeb0 6a62 	vmov.f32	s12, s5
 8019704:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019708:	ee31 1a05 	vadd.f32	s2, s2, s10
 801970c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019710:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8019714:	eeb0 6a43 	vmov.f32	s12, s6
 8019718:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801971c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019720:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019724:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019728:	ee77 2a62 	vsub.f32	s5, s14, s5
 801972c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019730:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019734:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019738:	ee12 2a90 	vmov	r2, s5
 801973c:	eef0 2a47 	vmov.f32	s5, s14
 8019740:	fb92 fef3 	sdiv	lr, r2, r3
 8019744:	ee13 2a10 	vmov	r2, s6
 8019748:	eeb0 3a67 	vmov.f32	s6, s15
 801974c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019750:	9a02      	ldr	r2, [sp, #8]
 8019752:	9312      	str	r3, [sp, #72]	@ 0x48
 8019754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019756:	bf08      	it	eq
 8019758:	4613      	moveq	r3, r2
 801975a:	e734      	b.n	80195c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801975c:	1427      	asrs	r7, r4, #16
 801975e:	d454      	bmi.n	801980a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019760:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019764:	42be      	cmp	r6, r7
 8019766:	dd50      	ble.n	801980a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019768:	ea5f 4920 	movs.w	r9, r0, asr #16
 801976c:	d44d      	bmi.n	801980a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801976e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019772:	454a      	cmp	r2, r9
 8019774:	dd49      	ble.n	801980a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019776:	b236      	sxth	r6, r6
 8019778:	9a01      	ldr	r2, [sp, #4]
 801977a:	fb09 7606 	mla	r6, r9, r6, r7
 801977e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019782:	0e3a      	lsrs	r2, r7, #24
 8019784:	d041      	beq.n	801980a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019786:	9e03      	ldr	r6, [sp, #12]
 8019788:	fa5f fb87 	uxtb.w	fp, r7
 801978c:	4372      	muls	r2, r6
 801978e:	1c56      	adds	r6, r2, #1
 8019790:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019794:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019798:	1212      	asrs	r2, r2, #8
 801979a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801979e:	fa1f fa82 	uxth.w	sl, r2
 80197a2:	43d2      	mvns	r2, r2
 80197a4:	fb1b fb0a 	smulbb	fp, fp, sl
 80197a8:	b2d2      	uxtb	r2, r2
 80197aa:	fb09 b902 	mla	r9, r9, r2, fp
 80197ae:	fa1f f989 	uxth.w	r9, r9
 80197b2:	f109 0b01 	add.w	fp, r9, #1
 80197b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80197ba:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80197be:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80197c2:	fb1b fb0a 	smulbb	fp, fp, sl
 80197c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80197ca:	fb17 fa0a 	smulbb	sl, r7, sl
 80197ce:	f805 9006 	strb.w	r9, [r5, r6]
 80197d2:	442e      	add	r6, r5
 80197d4:	78b7      	ldrb	r7, [r6, #2]
 80197d6:	f896 9001 	ldrb.w	r9, [r6, #1]
 80197da:	fb07 aa02 	mla	sl, r7, r2, sl
 80197de:	fb09 b902 	mla	r9, r9, r2, fp
 80197e2:	fa1f fa8a 	uxth.w	sl, sl
 80197e6:	fa1f f989 	uxth.w	r9, r9
 80197ea:	f10a 0701 	add.w	r7, sl, #1
 80197ee:	f109 0b01 	add.w	fp, r9, #1
 80197f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80197f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80197fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80197fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019802:	f886 a002 	strb.w	sl, [r6, #2]
 8019806:	f886 9001 	strb.w	r9, [r6, #1]
 801980a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801980c:	4474      	add	r4, lr
 801980e:	f108 0801 	add.w	r8, r8, #1
 8019812:	4410      	add	r0, r2
 8019814:	e762      	b.n	80196dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019816:	b005      	add	sp, #20
 8019818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801981c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801981c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019820:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019826:	9201      	str	r2, [sp, #4]
 8019828:	6860      	ldr	r0, [r4, #4]
 801982a:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801982e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8019832:	fb00 2505 	mla	r5, r0, r5, r2
 8019836:	6822      	ldr	r2, [r4, #0]
 8019838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801983c:	4415      	add	r5, r2
 801983e:	f8dc 2000 	ldr.w	r2, [ip]
 8019842:	9200      	str	r2, [sp, #0]
 8019844:	2900      	cmp	r1, #0
 8019846:	dc03      	bgt.n	8019850 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019848:	9a01      	ldr	r2, [sp, #4]
 801984a:	2a00      	cmp	r2, #0
 801984c:	f340 812b 	ble.w	8019aa6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019850:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019852:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019856:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801985a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801985c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019860:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019864:	2b00      	cmp	r3, #0
 8019866:	dd0e      	ble.n	8019886 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019868:	1422      	asrs	r2, r4, #16
 801986a:	d405      	bmi.n	8019878 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801986c:	4572      	cmp	r2, lr
 801986e:	da03      	bge.n	8019878 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019870:	1402      	asrs	r2, r0, #16
 8019872:	d401      	bmi.n	8019878 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019874:	42ba      	cmp	r2, r7
 8019876:	db07      	blt.n	8019888 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019878:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801987a:	3b01      	subs	r3, #1
 801987c:	3503      	adds	r5, #3
 801987e:	4414      	add	r4, r2
 8019880:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019882:	4410      	add	r0, r2
 8019884:	e7ee      	b.n	8019864 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019886:	d06f      	beq.n	8019968 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019888:	1e5a      	subs	r2, r3, #1
 801988a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801988c:	fb06 4602 	mla	r6, r6, r2, r4
 8019890:	1436      	asrs	r6, r6, #16
 8019892:	d45e      	bmi.n	8019952 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019894:	4576      	cmp	r6, lr
 8019896:	da5c      	bge.n	8019952 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019898:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801989a:	fb06 0202 	mla	r2, r6, r2, r0
 801989e:	1412      	asrs	r2, r2, #16
 80198a0:	d457      	bmi.n	8019952 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80198a2:	42ba      	cmp	r2, r7
 80198a4:	da55      	bge.n	8019952 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80198a6:	1cee      	adds	r6, r5, #3
 80198a8:	469a      	mov	sl, r3
 80198aa:	f1ba 0f00 	cmp.w	sl, #0
 80198ae:	dd56      	ble.n	801995e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80198b0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80198b4:	1427      	asrs	r7, r4, #16
 80198b6:	1402      	asrs	r2, r0, #16
 80198b8:	fb0e 7202 	mla	r2, lr, r2, r7
 80198bc:	9f00      	ldr	r7, [sp, #0]
 80198be:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80198c2:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80198c6:	d03c      	beq.n	8019942 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80198c8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80198cc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80198d0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80198d4:	fa5f f28e 	uxtb.w	r2, lr
 80198d8:	b2ff      	uxtb	r7, r7
 80198da:	f000 80dd 	beq.w	8019a98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80198de:	fa1f f882 	uxth.w	r8, r2
 80198e2:	43d2      	mvns	r2, r2
 80198e4:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80198e8:	fb17 f708 	smulbb	r7, r7, r8
 80198ec:	b2d2      	uxtb	r2, r2
 80198ee:	fb19 f908 	smulbb	r9, r9, r8
 80198f2:	fb0e 7702 	mla	r7, lr, r2, r7
 80198f6:	fb1b f808 	smulbb	r8, fp, r8
 80198fa:	b2bf      	uxth	r7, r7
 80198fc:	f107 0e01 	add.w	lr, r7, #1
 8019900:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019904:	123f      	asrs	r7, r7, #8
 8019906:	f806 7c03 	strb.w	r7, [r6, #-3]
 801990a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801990e:	fb07 9902 	mla	r9, r7, r2, r9
 8019912:	fa1f f989 	uxth.w	r9, r9
 8019916:	f109 0701 	add.w	r7, r9, #1
 801991a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801991e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019922:	fb07 8802 	mla	r8, r7, r2, r8
 8019926:	ea4f 2929 	mov.w	r9, r9, asr #8
 801992a:	fa1f f888 	uxth.w	r8, r8
 801992e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019932:	f108 0201 	add.w	r2, r8, #1
 8019936:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801993a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801993e:	f806 8c01 	strb.w	r8, [r6, #-1]
 8019942:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019944:	3603      	adds	r6, #3
 8019946:	f10a 3aff 	add.w	sl, sl, #4294967295
 801994a:	4414      	add	r4, r2
 801994c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801994e:	4410      	add	r0, r2
 8019950:	e7ab      	b.n	80198aa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019952:	f04f 0e00 	mov.w	lr, #0
 8019956:	eba3 020e 	sub.w	r2, r3, lr
 801995a:	2a00      	cmp	r2, #0
 801995c:	dc3d      	bgt.n	80199da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801995e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019966:	441d      	add	r5, r3
 8019968:	2900      	cmp	r1, #0
 801996a:	f340 809c 	ble.w	8019aa6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801996e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019974:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019978:	3901      	subs	r1, #1
 801997a:	eeb0 6a62 	vmov.f32	s12, s5
 801997e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019982:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019986:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801998a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801998e:	eeb0 6a43 	vmov.f32	s12, s6
 8019992:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019996:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801999a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801999e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80199a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80199a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80199aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80199ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80199b2:	ee12 2a90 	vmov	r2, s5
 80199b6:	eef0 2a47 	vmov.f32	s5, s14
 80199ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80199be:	ee13 2a10 	vmov	r2, s6
 80199c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80199c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199c6:	eeb0 3a67 	vmov.f32	s6, s15
 80199ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80199ce:	9a01      	ldr	r2, [sp, #4]
 80199d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80199d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199d4:	bf08      	it	eq
 80199d6:	4613      	moveq	r3, r2
 80199d8:	e734      	b.n	8019844 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80199da:	1427      	asrs	r7, r4, #16
 80199dc:	d44d      	bmi.n	8019a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80199de:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80199e2:	42be      	cmp	r6, r7
 80199e4:	dd49      	ble.n	8019a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80199e6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80199ea:	d446      	bmi.n	8019a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80199ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80199f0:	4542      	cmp	r2, r8
 80199f2:	dd42      	ble.n	8019a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80199f4:	b236      	sxth	r6, r6
 80199f6:	9a00      	ldr	r2, [sp, #0]
 80199f8:	fb08 7606 	mla	r6, r8, r6, r7
 80199fc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019a00:	0e3a      	lsrs	r2, r7, #24
 8019a02:	d03a      	beq.n	8019a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a04:	2aff      	cmp	r2, #255	@ 0xff
 8019a06:	b2d6      	uxtb	r6, r2
 8019a08:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019a0c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019a10:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8019a14:	b2ff      	uxtb	r7, r7
 8019a16:	d037      	beq.n	8019a88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8019a18:	fa1f f986 	uxth.w	r9, r6
 8019a1c:	4472      	add	r2, lr
 8019a1e:	43f6      	mvns	r6, r6
 8019a20:	f815 8002 	ldrb.w	r8, [r5, r2]
 8019a24:	fb17 f709 	smulbb	r7, r7, r9
 8019a28:	fb1a fa09 	smulbb	sl, sl, r9
 8019a2c:	b2f6      	uxtb	r6, r6
 8019a2e:	fb1b f909 	smulbb	r9, fp, r9
 8019a32:	fb08 7706 	mla	r7, r8, r6, r7
 8019a36:	b2bf      	uxth	r7, r7
 8019a38:	f107 0801 	add.w	r8, r7, #1
 8019a3c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8019a40:	123f      	asrs	r7, r7, #8
 8019a42:	54af      	strb	r7, [r5, r2]
 8019a44:	442a      	add	r2, r5
 8019a46:	7857      	ldrb	r7, [r2, #1]
 8019a48:	fb07 aa06 	mla	sl, r7, r6, sl
 8019a4c:	fa1f fa8a 	uxth.w	sl, sl
 8019a50:	f10a 0701 	add.w	r7, sl, #1
 8019a54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a58:	7897      	ldrb	r7, [r2, #2]
 8019a5a:	fb07 9906 	mla	r9, r7, r6, r9
 8019a5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019a62:	fa1f f989 	uxth.w	r9, r9
 8019a66:	f882 a001 	strb.w	sl, [r2, #1]
 8019a6a:	f109 0601 	add.w	r6, r9, #1
 8019a6e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019a72:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019a76:	f882 9002 	strb.w	r9, [r2, #2]
 8019a7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019a7c:	f10e 0e01 	add.w	lr, lr, #1
 8019a80:	4414      	add	r4, r2
 8019a82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019a84:	4410      	add	r0, r2
 8019a86:	e766      	b.n	8019956 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019a88:	4472      	add	r2, lr
 8019a8a:	54af      	strb	r7, [r5, r2]
 8019a8c:	442a      	add	r2, r5
 8019a8e:	f882 a001 	strb.w	sl, [r2, #1]
 8019a92:	f882 b002 	strb.w	fp, [r2, #2]
 8019a96:	e7f0      	b.n	8019a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a98:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019a9c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019aa0:	f806 bc01 	strb.w	fp, [r6, #-1]
 8019aa4:	e74d      	b.n	8019942 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019aa6:	b003      	add	sp, #12
 8019aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019aac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab0:	b087      	sub	sp, #28
 8019ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019ab6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8019ab8:	9204      	str	r2, [sp, #16]
 8019aba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019abe:	6860      	ldr	r0, [r4, #4]
 8019ac0:	9205      	str	r2, [sp, #20]
 8019ac2:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8019ac6:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8019aca:	9101      	str	r1, [sp, #4]
 8019acc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8019ad0:	fb00 2505 	mla	r5, r0, r5, r2
 8019ad4:	6822      	ldr	r2, [r4, #0]
 8019ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ada:	4415      	add	r5, r2
 8019adc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019ae0:	3201      	adds	r2, #1
 8019ae2:	f022 0201 	bic.w	r2, r2, #1
 8019ae6:	9202      	str	r2, [sp, #8]
 8019ae8:	f8dc 2000 	ldr.w	r2, [ip]
 8019aec:	9203      	str	r2, [sp, #12]
 8019aee:	9a01      	ldr	r2, [sp, #4]
 8019af0:	2a00      	cmp	r2, #0
 8019af2:	dc03      	bgt.n	8019afc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019af4:	9a04      	ldr	r2, [sp, #16]
 8019af6:	2a00      	cmp	r2, #0
 8019af8:	f340 8135 	ble.w	8019d66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019afc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019afe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019b02:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019b06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019b08:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019b0c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	dd0d      	ble.n	8019b30 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019b14:	1422      	asrs	r2, r4, #16
 8019b16:	d405      	bmi.n	8019b24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019b18:	4542      	cmp	r2, r8
 8019b1a:	da03      	bge.n	8019b24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019b1c:	1402      	asrs	r2, r0, #16
 8019b1e:	d401      	bmi.n	8019b24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019b20:	42ba      	cmp	r2, r7
 8019b22:	db06      	blt.n	8019b32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019b24:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019b26:	4474      	add	r4, lr
 8019b28:	3b01      	subs	r3, #1
 8019b2a:	3503      	adds	r5, #3
 8019b2c:	4410      	add	r0, r2
 8019b2e:	e7ef      	b.n	8019b10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019b30:	d077      	beq.n	8019c22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8019b32:	1e5a      	subs	r2, r3, #1
 8019b34:	fb0e 4602 	mla	r6, lr, r2, r4
 8019b38:	1436      	asrs	r6, r6, #16
 8019b3a:	d469      	bmi.n	8019c10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019b3c:	4546      	cmp	r6, r8
 8019b3e:	da67      	bge.n	8019c10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019b40:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019b42:	fb06 0202 	mla	r2, r6, r2, r0
 8019b46:	1412      	asrs	r2, r2, #16
 8019b48:	d462      	bmi.n	8019c10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019b4a:	42ba      	cmp	r2, r7
 8019b4c:	da60      	bge.n	8019c10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019b4e:	1cee      	adds	r6, r5, #3
 8019b50:	4699      	mov	r9, r3
 8019b52:	f1b9 0f00 	cmp.w	r9, #0
 8019b56:	dd5f      	ble.n	8019c18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019b58:	1422      	asrs	r2, r4, #16
 8019b5a:	9902      	ldr	r1, [sp, #8]
 8019b5c:	1407      	asrs	r7, r0, #16
 8019b5e:	fb01 2707 	mla	r7, r1, r7, r2
 8019b62:	9903      	ldr	r1, [sp, #12]
 8019b64:	087a      	lsrs	r2, r7, #1
 8019b66:	5c8a      	ldrb	r2, [r1, r2]
 8019b68:	07f9      	lsls	r1, r7, #31
 8019b6a:	bf54      	ite	pl
 8019b6c:	f002 020f 	andpl.w	r2, r2, #15
 8019b70:	1112      	asrmi	r2, r2, #4
 8019b72:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019b76:	b2d2      	uxtb	r2, r2
 8019b78:	2a00      	cmp	r2, #0
 8019b7a:	d042      	beq.n	8019c02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019b7c:	497b      	ldr	r1, [pc, #492]	@ (8019d6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019b7e:	680f      	ldr	r7, [r1, #0]
 8019b80:	9905      	ldr	r1, [sp, #20]
 8019b82:	fa5f fb87 	uxtb.w	fp, r7
 8019b86:	434a      	muls	r2, r1
 8019b88:	f102 0801 	add.w	r8, r2, #1
 8019b8c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019b90:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019b94:	1212      	asrs	r2, r2, #8
 8019b96:	fa1f fa82 	uxth.w	sl, r2
 8019b9a:	43d2      	mvns	r2, r2
 8019b9c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ba0:	b2d2      	uxtb	r2, r2
 8019ba2:	fb08 b802 	mla	r8, r8, r2, fp
 8019ba6:	fa1f f888 	uxth.w	r8, r8
 8019baa:	f108 0b01 	add.w	fp, r8, #1
 8019bae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019bb2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019bb6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019bba:	fb1b fb0a 	smulbb	fp, fp, sl
 8019bbe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019bc2:	fb17 fa0a 	smulbb	sl, r7, sl
 8019bc6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019bca:	f806 8c03 	strb.w	r8, [r6, #-3]
 8019bce:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8019bd2:	fb07 aa02 	mla	sl, r7, r2, sl
 8019bd6:	fb08 b802 	mla	r8, r8, r2, fp
 8019bda:	fa1f fa8a 	uxth.w	sl, sl
 8019bde:	fa1f f888 	uxth.w	r8, r8
 8019be2:	f10a 0701 	add.w	r7, sl, #1
 8019be6:	f108 0b01 	add.w	fp, r8, #1
 8019bea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019bee:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019bf2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019bf6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019bfa:	f806 ac01 	strb.w	sl, [r6, #-1]
 8019bfe:	f806 8c02 	strb.w	r8, [r6, #-2]
 8019c02:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019c04:	4474      	add	r4, lr
 8019c06:	3603      	adds	r6, #3
 8019c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c0c:	4410      	add	r0, r2
 8019c0e:	e7a0      	b.n	8019b52 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019c10:	2700      	movs	r7, #0
 8019c12:	1bda      	subs	r2, r3, r7
 8019c14:	2a00      	cmp	r2, #0
 8019c16:	dc3e      	bgt.n	8019c96 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8019c18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c20:	441d      	add	r5, r3
 8019c22:	9b01      	ldr	r3, [sp, #4]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	f340 809e 	ble.w	8019d66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019c2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019c30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c34:	eeb0 6a62 	vmov.f32	s12, s5
 8019c38:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019c3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c44:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8019c48:	eeb0 6a43 	vmov.f32	s12, s6
 8019c4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c50:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019c54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019c58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019c5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019c64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019c68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c6c:	ee12 2a90 	vmov	r2, s5
 8019c70:	eef0 2a47 	vmov.f32	s5, s14
 8019c74:	fb92 fef3 	sdiv	lr, r2, r3
 8019c78:	ee13 2a10 	vmov	r2, s6
 8019c7c:	eeb0 3a67 	vmov.f32	s6, s15
 8019c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c84:	9314      	str	r3, [sp, #80]	@ 0x50
 8019c86:	9b01      	ldr	r3, [sp, #4]
 8019c88:	9a04      	ldr	r2, [sp, #16]
 8019c8a:	3b01      	subs	r3, #1
 8019c8c:	9301      	str	r3, [sp, #4]
 8019c8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019c90:	bf08      	it	eq
 8019c92:	4613      	moveq	r3, r2
 8019c94:	e72b      	b.n	8019aee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019c96:	1426      	asrs	r6, r4, #16
 8019c98:	d460      	bmi.n	8019d5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019c9a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019c9e:	42b2      	cmp	r2, r6
 8019ca0:	dd5c      	ble.n	8019d5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019ca2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019ca6:	d459      	bmi.n	8019d5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019ca8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019cac:	4542      	cmp	r2, r8
 8019cae:	dd55      	ble.n	8019d5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019cb0:	9a02      	ldr	r2, [sp, #8]
 8019cb2:	9903      	ldr	r1, [sp, #12]
 8019cb4:	fb08 6602 	mla	r6, r8, r2, r6
 8019cb8:	0872      	lsrs	r2, r6, #1
 8019cba:	07f6      	lsls	r6, r6, #31
 8019cbc:	5c8a      	ldrb	r2, [r1, r2]
 8019cbe:	bf54      	ite	pl
 8019cc0:	f002 020f 	andpl.w	r2, r2, #15
 8019cc4:	1112      	asrmi	r2, r2, #4
 8019cc6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019cca:	b2d2      	uxtb	r2, r2
 8019ccc:	2a00      	cmp	r2, #0
 8019cce:	d045      	beq.n	8019d5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019cd0:	4926      	ldr	r1, [pc, #152]	@ (8019d6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019cd2:	f8d1 8000 	ldr.w	r8, [r1]
 8019cd6:	9905      	ldr	r1, [sp, #20]
 8019cd8:	fa5f fb88 	uxtb.w	fp, r8
 8019cdc:	434a      	muls	r2, r1
 8019cde:	1c56      	adds	r6, r2, #1
 8019ce0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019ce4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019ce8:	1212      	asrs	r2, r2, #8
 8019cea:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019cee:	fa1f fa82 	uxth.w	sl, r2
 8019cf2:	43d2      	mvns	r2, r2
 8019cf4:	fb1b fb0a 	smulbb	fp, fp, sl
 8019cf8:	b2d2      	uxtb	r2, r2
 8019cfa:	fb09 b902 	mla	r9, r9, r2, fp
 8019cfe:	fa1f f989 	uxth.w	r9, r9
 8019d02:	f109 0b01 	add.w	fp, r9, #1
 8019d06:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d0a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8019d0e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8019d12:	fb1b fb0a 	smulbb	fp, fp, sl
 8019d16:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d1a:	fb18 fa0a 	smulbb	sl, r8, sl
 8019d1e:	f805 9006 	strb.w	r9, [r5, r6]
 8019d22:	442e      	add	r6, r5
 8019d24:	f896 8002 	ldrb.w	r8, [r6, #2]
 8019d28:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019d2c:	fb08 aa02 	mla	sl, r8, r2, sl
 8019d30:	fb09 b902 	mla	r9, r9, r2, fp
 8019d34:	fa1f fa8a 	uxth.w	sl, sl
 8019d38:	fa1f f989 	uxth.w	r9, r9
 8019d3c:	f10a 0801 	add.w	r8, sl, #1
 8019d40:	f109 0b01 	add.w	fp, r9, #1
 8019d44:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8019d48:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d4c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019d50:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d54:	f886 a002 	strb.w	sl, [r6, #2]
 8019d58:	f886 9001 	strb.w	r9, [r6, #1]
 8019d5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019d5e:	4474      	add	r4, lr
 8019d60:	3701      	adds	r7, #1
 8019d62:	4410      	add	r0, r2
 8019d64:	e755      	b.n	8019c12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8019d66:	b007      	add	sp, #28
 8019d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d6c:	2402dabc 	.word	0x2402dabc

08019d70 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d74:	b085      	sub	sp, #20
 8019d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019d7a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019d7c:	9203      	str	r2, [sp, #12]
 8019d7e:	6860      	ldr	r0, [r4, #4]
 8019d80:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019d84:	9100      	str	r1, [sp, #0]
 8019d86:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8019d8a:	fb00 2606 	mla	r6, r0, r6, r2
 8019d8e:	6822      	ldr	r2, [r4, #0]
 8019d90:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019d94:	4416      	add	r6, r2
 8019d96:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019d9a:	3201      	adds	r2, #1
 8019d9c:	f022 0201 	bic.w	r2, r2, #1
 8019da0:	9201      	str	r2, [sp, #4]
 8019da2:	f8dc 2000 	ldr.w	r2, [ip]
 8019da6:	9202      	str	r2, [sp, #8]
 8019da8:	9a00      	ldr	r2, [sp, #0]
 8019daa:	2a00      	cmp	r2, #0
 8019dac:	dc03      	bgt.n	8019db6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019dae:	9a03      	ldr	r2, [sp, #12]
 8019db0:	2a00      	cmp	r2, #0
 8019db2:	f340 8140 	ble.w	801a036 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019db6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019db8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019dbc:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8019dc0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019dc2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019dc6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	dd0e      	ble.n	8019dec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019dce:	142a      	asrs	r2, r5, #16
 8019dd0:	d405      	bmi.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019dd2:	4572      	cmp	r2, lr
 8019dd4:	da03      	bge.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019dd6:	1422      	asrs	r2, r4, #16
 8019dd8:	d401      	bmi.n	8019dde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019dda:	42ba      	cmp	r2, r7
 8019ddc:	db07      	blt.n	8019dee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019dde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019de0:	3b01      	subs	r3, #1
 8019de2:	3603      	adds	r6, #3
 8019de4:	4415      	add	r5, r2
 8019de6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019de8:	4414      	add	r4, r2
 8019dea:	e7ee      	b.n	8019dca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019dec:	d072      	beq.n	8019ed4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019dee:	1e5a      	subs	r2, r3, #1
 8019df0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8019df2:	fb00 5002 	mla	r0, r0, r2, r5
 8019df6:	1400      	asrs	r0, r0, #16
 8019df8:	d463      	bmi.n	8019ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019dfa:	4570      	cmp	r0, lr
 8019dfc:	da61      	bge.n	8019ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019dfe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019e00:	fb00 4202 	mla	r2, r0, r2, r4
 8019e04:	1412      	asrs	r2, r2, #16
 8019e06:	d45c      	bmi.n	8019ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019e08:	42ba      	cmp	r2, r7
 8019e0a:	da5a      	bge.n	8019ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019e0c:	1cf0      	adds	r0, r6, #3
 8019e0e:	469a      	mov	sl, r3
 8019e10:	f1ba 0f00 	cmp.w	sl, #0
 8019e14:	dd59      	ble.n	8019eca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019e16:	142a      	asrs	r2, r5, #16
 8019e18:	9901      	ldr	r1, [sp, #4]
 8019e1a:	1427      	asrs	r7, r4, #16
 8019e1c:	fb01 2707 	mla	r7, r1, r7, r2
 8019e20:	9902      	ldr	r1, [sp, #8]
 8019e22:	087a      	lsrs	r2, r7, #1
 8019e24:	5c8a      	ldrb	r2, [r1, r2]
 8019e26:	07f9      	lsls	r1, r7, #31
 8019e28:	bf54      	ite	pl
 8019e2a:	f002 020f 	andpl.w	r2, r2, #15
 8019e2e:	1112      	asrmi	r2, r2, #4
 8019e30:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e34:	b2d2      	uxtb	r2, r2
 8019e36:	2a00      	cmp	r2, #0
 8019e38:	d03b      	beq.n	8019eb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019e3a:	4980      	ldr	r1, [pc, #512]	@ (801a03c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019e3c:	2aff      	cmp	r2, #255	@ 0xff
 8019e3e:	680f      	ldr	r7, [r1, #0]
 8019e40:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019e44:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019e48:	b2ff      	uxtb	r7, r7
 8019e4a:	f000 80ed 	beq.w	801a028 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019e4e:	fa1f f882 	uxth.w	r8, r2
 8019e52:	43d2      	mvns	r2, r2
 8019e54:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019e58:	fb17 f708 	smulbb	r7, r7, r8
 8019e5c:	b2d2      	uxtb	r2, r2
 8019e5e:	fb19 f908 	smulbb	r9, r9, r8
 8019e62:	fb0e 7702 	mla	r7, lr, r2, r7
 8019e66:	fb1b f808 	smulbb	r8, fp, r8
 8019e6a:	b2bf      	uxth	r7, r7
 8019e6c:	f107 0e01 	add.w	lr, r7, #1
 8019e70:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019e74:	123f      	asrs	r7, r7, #8
 8019e76:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019e7a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019e7e:	fb07 9902 	mla	r9, r7, r2, r9
 8019e82:	fa1f f989 	uxth.w	r9, r9
 8019e86:	f109 0701 	add.w	r7, r9, #1
 8019e8a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019e8e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019e92:	fb07 8802 	mla	r8, r7, r2, r8
 8019e96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e9a:	fa1f f888 	uxth.w	r8, r8
 8019e9e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019ea2:	f108 0201 	add.w	r2, r8, #1
 8019ea6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019eaa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019eae:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019eb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019eb4:	3003      	adds	r0, #3
 8019eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019eba:	4415      	add	r5, r2
 8019ebc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019ebe:	4414      	add	r4, r2
 8019ec0:	e7a6      	b.n	8019e10 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019ec2:	2700      	movs	r7, #0
 8019ec4:	1bda      	subs	r2, r3, r7
 8019ec6:	2a00      	cmp	r2, #0
 8019ec8:	dc40      	bgt.n	8019f4c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019eca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ed2:	441e      	add	r6, r3
 8019ed4:	9b00      	ldr	r3, [sp, #0]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	f340 80ad 	ble.w	801a036 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019edc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ee2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ee6:	eeb0 6a62 	vmov.f32	s12, s5
 8019eea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019eee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ef2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ef6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8019efa:	eeb0 6a43 	vmov.f32	s12, s6
 8019efe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f02:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019f06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f1e:	ee12 2a90 	vmov	r2, s5
 8019f22:	eef0 2a47 	vmov.f32	s5, s14
 8019f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f2a:	ee13 2a10 	vmov	r2, s6
 8019f2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8019f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f32:	eeb0 3a67 	vmov.f32	s6, s15
 8019f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f3a:	9312      	str	r3, [sp, #72]	@ 0x48
 8019f3c:	9b00      	ldr	r3, [sp, #0]
 8019f3e:	9a03      	ldr	r2, [sp, #12]
 8019f40:	3b01      	subs	r3, #1
 8019f42:	9300      	str	r3, [sp, #0]
 8019f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f46:	bf08      	it	eq
 8019f48:	4613      	moveq	r3, r2
 8019f4a:	e72d      	b.n	8019da8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019f4c:	1428      	asrs	r0, r5, #16
 8019f4e:	d45c      	bmi.n	801a00a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019f50:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019f54:	4282      	cmp	r2, r0
 8019f56:	dd58      	ble.n	801a00a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019f58:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019f5c:	d455      	bmi.n	801a00a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019f5e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019f62:	4572      	cmp	r2, lr
 8019f64:	dd51      	ble.n	801a00a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019f66:	9a01      	ldr	r2, [sp, #4]
 8019f68:	9902      	ldr	r1, [sp, #8]
 8019f6a:	fb0e 0002 	mla	r0, lr, r2, r0
 8019f6e:	0842      	lsrs	r2, r0, #1
 8019f70:	07c0      	lsls	r0, r0, #31
 8019f72:	5c8a      	ldrb	r2, [r1, r2]
 8019f74:	bf54      	ite	pl
 8019f76:	f002 020f 	andpl.w	r2, r2, #15
 8019f7a:	1112      	asrmi	r2, r2, #4
 8019f7c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019f80:	b2d2      	uxtb	r2, r2
 8019f82:	2a00      	cmp	r2, #0
 8019f84:	d041      	beq.n	801a00a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019f86:	492d      	ldr	r1, [pc, #180]	@ (801a03c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019f88:	2aff      	cmp	r2, #255	@ 0xff
 8019f8a:	6808      	ldr	r0, [r1, #0]
 8019f8c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019f90:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019f94:	fa5f fe80 	uxtb.w	lr, r0
 8019f98:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019f9c:	d03b      	beq.n	801a016 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019f9e:	fa1f f982 	uxth.w	r9, r2
 8019fa2:	4438      	add	r0, r7
 8019fa4:	43d2      	mvns	r2, r2
 8019fa6:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019faa:	fb1e fe09 	smulbb	lr, lr, r9
 8019fae:	fb1a fa09 	smulbb	sl, sl, r9
 8019fb2:	b2d2      	uxtb	r2, r2
 8019fb4:	fb1b f909 	smulbb	r9, fp, r9
 8019fb8:	fb08 ee02 	mla	lr, r8, r2, lr
 8019fbc:	fa1f fe8e 	uxth.w	lr, lr
 8019fc0:	f10e 0801 	add.w	r8, lr, #1
 8019fc4:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019fc8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019fcc:	f806 e000 	strb.w	lr, [r6, r0]
 8019fd0:	4430      	add	r0, r6
 8019fd2:	f890 e001 	ldrb.w	lr, [r0, #1]
 8019fd6:	fb0e aa02 	mla	sl, lr, r2, sl
 8019fda:	fa1f fa8a 	uxth.w	sl, sl
 8019fde:	f10a 0e01 	add.w	lr, sl, #1
 8019fe2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8019fe6:	f890 e002 	ldrb.w	lr, [r0, #2]
 8019fea:	fb0e 9902 	mla	r9, lr, r2, r9
 8019fee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019ff2:	fa1f f989 	uxth.w	r9, r9
 8019ff6:	f880 a001 	strb.w	sl, [r0, #1]
 8019ffa:	f109 0201 	add.w	r2, r9, #1
 8019ffe:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a002:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a006:	f880 9002 	strb.w	r9, [r0, #2]
 801a00a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a00c:	3701      	adds	r7, #1
 801a00e:	4415      	add	r5, r2
 801a010:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a012:	4414      	add	r4, r2
 801a014:	e756      	b.n	8019ec4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a016:	4438      	add	r0, r7
 801a018:	f806 e000 	strb.w	lr, [r6, r0]
 801a01c:	4430      	add	r0, r6
 801a01e:	f880 a001 	strb.w	sl, [r0, #1]
 801a022:	f880 b002 	strb.w	fp, [r0, #2]
 801a026:	e7f0      	b.n	801a00a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a028:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a02c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a030:	f800 bc01 	strb.w	fp, [r0, #-1]
 801a034:	e73d      	b.n	8019eb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a036:	b005      	add	sp, #20
 801a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a03c:	2402dabc 	.word	0x2402dabc

0801a040 <_ZN8touchgfx8LCD24bppD1Ev>:
 801a040:	4770      	bx	lr

0801a042 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801a042:	4770      	bx	lr

0801a044 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801a044:	4770      	bx	lr

0801a046 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801a046:	4770      	bx	lr

0801a048 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a048:	4770      	bx	lr

0801a04a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a04a:	4770      	bx	lr

0801a04c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a04c:	4770      	bx	lr

0801a04e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a04e:	4770      	bx	lr

0801a050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a050:	4770      	bx	lr

0801a052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a052:	4770      	bx	lr

0801a054 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a054:	4770      	bx	lr

0801a056 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a056:	4770      	bx	lr

0801a058 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a058:	4770      	bx	lr

0801a05a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a05a:	4770      	bx	lr

0801a05c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a05c:	4770      	bx	lr

0801a05e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a05e:	4770      	bx	lr

0801a060 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a060:	4770      	bx	lr

0801a062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a062:	4770      	bx	lr

0801a064 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a064:	4770      	bx	lr

0801a066 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a066:	4770      	bx	lr

0801a068 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a068:	4770      	bx	lr

0801a06a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a06a:	4770      	bx	lr

0801a06c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a06c:	4770      	bx	lr

0801a06e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a06e:	4770      	bx	lr

0801a070 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a070:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a072:	4606      	mov	r6, r0
 801a074:	b087      	sub	sp, #28
 801a076:	4615      	mov	r5, r2
 801a078:	461f      	mov	r7, r3
 801a07a:	b353      	cbz	r3, 801a0d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a07c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a080:	2b00      	cmp	r3, #0
 801a082:	dd26      	ble.n	801a0d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a084:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	dd22      	ble.n	801a0d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a08c:	6808      	ldr	r0, [r1, #0]
 801a08e:	aa04      	add	r2, sp, #16
 801a090:	6849      	ldr	r1, [r1, #4]
 801a092:	4c1b      	ldr	r4, [pc, #108]	@ (801a100 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a094:	c203      	stmia	r2!, {r0, r1}
 801a096:	a804      	add	r0, sp, #16
 801a098:	f7fa f980 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a09c:	6820      	ldr	r0, [r4, #0]
 801a09e:	6803      	ldr	r3, [r0, #0]
 801a0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a0a2:	4798      	blx	r3
 801a0a4:	2fff      	cmp	r7, #255	@ 0xff
 801a0a6:	d016      	beq.n	801a0d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a0a8:	f010 0f08 	tst.w	r0, #8
 801a0ac:	6820      	ldr	r0, [r4, #0]
 801a0ae:	d015      	beq.n	801a0dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801a0b0:	2400      	movs	r4, #0
 801a0b2:	6801      	ldr	r1, [r0, #0]
 801a0b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a0b8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a0bc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801a0c0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a0c4:	9401      	str	r4, [sp, #4]
 801a0c6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a0ca:	9400      	str	r4, [sp, #0]
 801a0cc:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801a0ce:	4629      	mov	r1, r5
 801a0d0:	47a0      	blx	r4
 801a0d2:	b007      	add	sp, #28
 801a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0d6:	f010 0f02 	tst.w	r0, #2
 801a0da:	e7e7      	b.n	801a0ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801a0dc:	6803      	ldr	r3, [r0, #0]
 801a0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0e0:	4798      	blx	r3
 801a0e2:	4b08      	ldr	r3, [pc, #32]	@ (801a104 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801a0e4:	4601      	mov	r1, r0
 801a0e6:	4630      	mov	r0, r6
 801a0e8:	881a      	ldrh	r2, [r3, #0]
 801a0ea:	6833      	ldr	r3, [r6, #0]
 801a0ec:	e9cd 5700 	strd	r5, r7, [sp]
 801a0f0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801a0f2:	ab04      	add	r3, sp, #16
 801a0f4:	47a8      	blx	r5
 801a0f6:	6820      	ldr	r0, [r4, #0]
 801a0f8:	6803      	ldr	r3, [r0, #0]
 801a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0fc:	4798      	blx	r3
 801a0fe:	e7e8      	b.n	801a0d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a100:	2402daac 	.word	0x2402daac
 801a104:	2402daa6 	.word	0x2402daa6

0801a108 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a10c:	b08b      	sub	sp, #44	@ 0x2c
 801a10e:	460d      	mov	r5, r1
 801a110:	4616      	mov	r6, r2
 801a112:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801a116:	f1b8 0f00 	cmp.w	r8, #0
 801a11a:	d047      	beq.n	801a1ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a11c:	6810      	ldr	r0, [r2, #0]
 801a11e:	ac06      	add	r4, sp, #24
 801a120:	6851      	ldr	r1, [r2, #4]
 801a122:	4f51      	ldr	r7, [pc, #324]	@ (801a268 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801a124:	c403      	stmia	r4!, {r0, r1}
 801a126:	6818      	ldr	r0, [r3, #0]
 801a128:	ac08      	add	r4, sp, #32
 801a12a:	6859      	ldr	r1, [r3, #4]
 801a12c:	c403      	stmia	r4!, {r0, r1}
 801a12e:	a806      	add	r0, sp, #24
 801a130:	f7fa f934 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a134:	4631      	mov	r1, r6
 801a136:	a808      	add	r0, sp, #32
 801a138:	f7fa f958 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a13c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a140:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a144:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a148:	6838      	ldr	r0, [r7, #0]
 801a14a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a14e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801a152:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801a156:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a15a:	440d      	add	r5, r1
 801a15c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a160:	440a      	add	r2, r1
 801a162:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a166:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a16a:	4413      	add	r3, r2
 801a16c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a170:	6803      	ldr	r3, [r0, #0]
 801a172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a174:	4798      	blx	r3
 801a176:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801a17a:	d01a      	beq.n	801a1b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801a17c:	f010 0f04 	tst.w	r0, #4
 801a180:	6838      	ldr	r0, [r7, #0]
 801a182:	d019      	beq.n	801a1b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801a184:	2100      	movs	r1, #0
 801a186:	6807      	ldr	r7, [r0, #0]
 801a188:	b2a4      	uxth	r4, r4
 801a18a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a18e:	b2b6      	uxth	r6, r6
 801a190:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801a194:	9401      	str	r4, [sp, #4]
 801a196:	9600      	str	r6, [sp, #0]
 801a198:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a19c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801a1a0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a1a4:	9102      	str	r1, [sp, #8]
 801a1a6:	4629      	mov	r1, r5
 801a1a8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801a1aa:	47a0      	blx	r4
 801a1ac:	b00b      	add	sp, #44	@ 0x2c
 801a1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1b2:	f010 0f01 	tst.w	r0, #1
 801a1b6:	e7e3      	b.n	801a180 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801a1b8:	6803      	ldr	r3, [r0, #0]
 801a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a1bc:	4798      	blx	r3
 801a1be:	4a2b      	ldr	r2, [pc, #172]	@ (801a26c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801a1c0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801a1c4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801a1c8:	8813      	ldrh	r3, [r2, #0]
 801a1ca:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801a1ce:	fb03 f404 	mul.w	r4, r3, r4
 801a1d2:	fb03 c101 	mla	r1, r3, r1, ip
 801a1d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a1da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a1de:	4408      	add	r0, r1
 801a1e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801a1e4:	4404      	add	r4, r0
 801a1e6:	d02e      	beq.n	801a246 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801a1e8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801a1ec:	1b9b      	subs	r3, r3, r6
 801a1ee:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801a1f2:	1b96      	subs	r6, r2, r6
 801a1f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a1fc:	42a0      	cmp	r0, r4
 801a1fe:	d22d      	bcs.n	801a25c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a200:	eb00 0e01 	add.w	lr, r0, r1
 801a204:	4570      	cmp	r0, lr
 801a206:	d210      	bcs.n	801a22a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801a208:	f890 9000 	ldrb.w	r9, [r0]
 801a20c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801a210:	fb19 f90c 	smulbb	r9, r9, ip
 801a214:	fb02 9208 	mla	r2, r2, r8, r9
 801a218:	b292      	uxth	r2, r2
 801a21a:	f102 0901 	add.w	r9, r2, #1
 801a21e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801a222:	1212      	asrs	r2, r2, #8
 801a224:	f800 2b01 	strb.w	r2, [r0], #1
 801a228:	e7ec      	b.n	801a204 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801a22a:	4418      	add	r0, r3
 801a22c:	4435      	add	r5, r6
 801a22e:	e7e5      	b.n	801a1fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801a230:	8813      	ldrh	r3, [r2, #0]
 801a232:	1b9b      	subs	r3, r3, r6
 801a234:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a238:	4418      	add	r0, r3
 801a23a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a23e:	1b9b      	subs	r3, r3, r6
 801a240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a244:	441d      	add	r5, r3
 801a246:	42a0      	cmp	r0, r4
 801a248:	d208      	bcs.n	801a25c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a24a:	eb00 0c01 	add.w	ip, r0, r1
 801a24e:	4560      	cmp	r0, ip
 801a250:	d2ee      	bcs.n	801a230 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801a252:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a256:	f800 3b01 	strb.w	r3, [r0], #1
 801a25a:	e7f8      	b.n	801a24e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801a25c:	6838      	ldr	r0, [r7, #0]
 801a25e:	6803      	ldr	r3, [r0, #0]
 801a260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a262:	4798      	blx	r3
 801a264:	e7a2      	b.n	801a1ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a266:	bf00      	nop
 801a268:	2402daac 	.word	0x2402daac
 801a26c:	2402daa6 	.word	0x2402daa6

0801a270 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801a270:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a272:	2300      	movs	r3, #0
 801a274:	b085      	sub	sp, #20
 801a276:	9300      	str	r3, [sp, #0]
 801a278:	4b41      	ldr	r3, [pc, #260]	@ (801a380 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d136      	bne.n	801a2ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801a280:	4a40      	ldr	r2, [pc, #256]	@ (801a384 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a282:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a286:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d131      	bne.n	801a2f2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801a28e:	4b3e      	ldr	r3, [pc, #248]	@ (801a388 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a290:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a294:	ac02      	add	r4, sp, #8
 801a296:	6808      	ldr	r0, [r1, #0]
 801a298:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a29c:	ab02      	add	r3, sp, #8
 801a29e:	6849      	ldr	r1, [r1, #4]
 801a2a0:	4d3a      	ldr	r5, [pc, #232]	@ (801a38c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801a2a2:	c303      	stmia	r3!, {r0, r1}
 801a2a4:	4669      	mov	r1, sp
 801a2a6:	4620      	mov	r0, r4
 801a2a8:	f7fa f8a0 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a2ac:	4668      	mov	r0, sp
 801a2ae:	f7fa f875 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a2b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a2b6:	f8bd 2000 	ldrh.w	r2, [sp]
 801a2ba:	462e      	mov	r6, r5
 801a2bc:	6828      	ldr	r0, [r5, #0]
 801a2be:	4413      	add	r3, r2
 801a2c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a2c4:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a2c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a2cc:	4413      	add	r3, r2
 801a2ce:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a2d2:	6803      	ldr	r3, [r0, #0]
 801a2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a2d6:	4798      	blx	r3
 801a2d8:	f010 0f01 	tst.w	r0, #1
 801a2dc:	d00b      	beq.n	801a2f6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801a2de:	6828      	ldr	r0, [r5, #0]
 801a2e0:	6803      	ldr	r3, [r0, #0]
 801a2e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a2e8:	4798      	blx	r3
 801a2ea:	b005      	add	sp, #20
 801a2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2ee:	4a26      	ldr	r2, [pc, #152]	@ (801a388 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a2f0:	e7c7      	b.n	801a282 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a2f2:	4b24      	ldr	r3, [pc, #144]	@ (801a384 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a2f4:	e7cc      	b.n	801a290 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a2f6:	6830      	ldr	r0, [r6, #0]
 801a2f8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801a2fc:	6803      	ldr	r3, [r0, #0]
 801a2fe:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801a302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a304:	4798      	blx	r3
 801a306:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a30a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a30e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801a312:	fb14 3402 	smlabb	r4, r4, r2, r3
 801a316:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a31a:	4404      	add	r4, r0
 801a31c:	6830      	ldr	r0, [r6, #0]
 801a31e:	6803      	ldr	r3, [r0, #0]
 801a320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a322:	4798      	blx	r3
 801a324:	4917      	ldr	r1, [pc, #92]	@ (801a384 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a326:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a32a:	880b      	ldrh	r3, [r1, #0]
 801a32c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801a330:	fb03 c202 	mla	r2, r3, r2, ip
 801a334:	437b      	muls	r3, r7
 801a336:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801a33a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a33e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a342:	4410      	add	r0, r2
 801a344:	18c2      	adds	r2, r0, r3
 801a346:	4290      	cmp	r0, r2
 801a348:	d214      	bcs.n	801a374 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801a34a:	eb00 0c07 	add.w	ip, r0, r7
 801a34e:	4560      	cmp	r0, ip
 801a350:	d204      	bcs.n	801a35c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801a352:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a356:	f800 3b01 	strb.w	r3, [r0], #1
 801a35a:	e7f8      	b.n	801a34e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801a35c:	880b      	ldrh	r3, [r1, #0]
 801a35e:	1b5b      	subs	r3, r3, r5
 801a360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a364:	4418      	add	r0, r3
 801a366:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a36a:	1b5b      	subs	r3, r3, r5
 801a36c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a370:	441c      	add	r4, r3
 801a372:	e7e8      	b.n	801a346 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801a374:	6830      	ldr	r0, [r6, #0]
 801a376:	6803      	ldr	r3, [r0, #0]
 801a378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a37a:	4798      	blx	r3
 801a37c:	e7b5      	b.n	801a2ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a37e:	bf00      	nop
 801a380:	2402daa4 	.word	0x2402daa4
 801a384:	2402daa6 	.word	0x2402daa6
 801a388:	2402daa8 	.word	0x2402daa8
 801a38c:	2402daac 	.word	0x2402daac

0801a390 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a394:	b08f      	sub	sp, #60	@ 0x3c
 801a396:	461c      	mov	r4, r3
 801a398:	9203      	str	r2, [sp, #12]
 801a39a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a39e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a3a0:	6820      	ldr	r0, [r4, #0]
 801a3a2:	9100      	str	r1, [sp, #0]
 801a3a4:	9204      	str	r2, [sp, #16]
 801a3a6:	aa0a      	add	r2, sp, #40	@ 0x28
 801a3a8:	6861      	ldr	r1, [r4, #4]
 801a3aa:	c203      	stmia	r2!, {r0, r1}
 801a3ac:	6818      	ldr	r0, [r3, #0]
 801a3ae:	aa0c      	add	r2, sp, #48	@ 0x30
 801a3b0:	6859      	ldr	r1, [r3, #4]
 801a3b2:	c203      	stmia	r2!, {r0, r1}
 801a3b4:	a80a      	add	r0, sp, #40	@ 0x28
 801a3b6:	f7f9 fff1 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a3ba:	4621      	mov	r1, r4
 801a3bc:	a80c      	add	r0, sp, #48	@ 0x30
 801a3be:	f7fa f815 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a3c2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801a3c6:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a3ca:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a3ce:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a3d2:	bfdb      	ittet	le
 801a3d4:	b2b3      	uxthle	r3, r6
 801a3d6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a3da:	2301      	movgt	r3, #1
 801a3dc:	fb92 f3f3 	sdivle	r3, r2, r3
 801a3e0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a3e4:	441d      	add	r5, r3
 801a3e6:	fb92 f1f3 	sdiv	r1, r2, r3
 801a3ea:	fa1f fc81 	uxth.w	ip, r1
 801a3ee:	3d01      	subs	r5, #1
 801a3f0:	fb0c 2413 	mls	r4, ip, r3, r2
 801a3f4:	4661      	mov	r1, ip
 801a3f6:	fb14 f406 	smulbb	r4, r4, r6
 801a3fa:	4404      	add	r4, r0
 801a3fc:	fb95 f5f3 	sdiv	r5, r5, r3
 801a400:	b2a4      	uxth	r4, r4
 801a402:	b131      	cbz	r1, 801a412 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801a404:	9b03      	ldr	r3, [sp, #12]
 801a406:	9900      	ldr	r1, [sp, #0]
 801a408:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a40c:	ba1b      	rev	r3, r3
 801a40e:	4419      	add	r1, r3
 801a410:	9100      	str	r1, [sp, #0]
 801a412:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a416:	b2ad      	uxth	r5, r5
 801a418:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801a41c:	4418      	add	r0, r3
 801a41e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a422:	00ad      	lsls	r5, r5, #2
 801a424:	441a      	add	r2, r3
 801a426:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a42a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a42e:	9301      	str	r3, [sp, #4]
 801a430:	4b79      	ldr	r3, [pc, #484]	@ (801a618 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801a432:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a436:	6818      	ldr	r0, [r3, #0]
 801a438:	6803      	ldr	r3, [r0, #0]
 801a43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a43c:	4798      	blx	r3
 801a43e:	4a77      	ldr	r2, [pc, #476]	@ (801a61c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801a440:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a444:	2c00      	cmp	r4, #0
 801a446:	8813      	ldrh	r3, [r2, #0]
 801a448:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a44c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a44e:	fb03 c101 	mla	r1, r3, r1, ip
 801a452:	fb06 f303 	mul.w	r3, r6, r3
 801a456:	bf18      	it	ne
 801a458:	2600      	movne	r6, #0
 801a45a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a45e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a462:	4408      	add	r0, r1
 801a464:	4403      	add	r3, r0
 801a466:	9306      	str	r3, [sp, #24]
 801a468:	f105 0304 	add.w	r3, r5, #4
 801a46c:	9305      	str	r3, [sp, #20]
 801a46e:	9b01      	ldr	r3, [sp, #4]
 801a470:	bf08      	it	eq
 801a472:	461e      	moveq	r6, r3
 801a474:	2300      	movs	r3, #0
 801a476:	b2b6      	uxth	r6, r6
 801a478:	9302      	str	r3, [sp, #8]
 801a47a:	9a06      	ldr	r2, [sp, #24]
 801a47c:	4290      	cmp	r0, r2
 801a47e:	f080 80c2 	bcs.w	801a606 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801a482:	b963      	cbnz	r3, 801a49e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801a484:	9b00      	ldr	r3, [sp, #0]
 801a486:	781a      	ldrb	r2, [r3, #0]
 801a488:	0993      	lsrs	r3, r2, #6
 801a48a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a48e:	9202      	str	r2, [sp, #8]
 801a490:	1e5a      	subs	r2, r3, #1
 801a492:	2a02      	cmp	r2, #2
 801a494:	d815      	bhi.n	801a4c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801a496:	9a00      	ldr	r2, [sp, #0]
 801a498:	b29b      	uxth	r3, r3
 801a49a:	3201      	adds	r2, #1
 801a49c:	9200      	str	r2, [sp, #0]
 801a49e:	b1b4      	cbz	r4, 801a4ce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801a4a0:	429c      	cmp	r4, r3
 801a4a2:	bf91      	iteee	ls
 801a4a4:	1b1c      	subls	r4, r3, r4
 801a4a6:	1ae4      	subhi	r4, r4, r3
 801a4a8:	4635      	movhi	r5, r6
 801a4aa:	f04f 0e00 	movhi.w	lr, #0
 801a4ae:	bf9b      	ittet	ls
 801a4b0:	fa1f fe84 	uxthls.w	lr, r4
 801a4b4:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801a4b8:	b2a4      	uxthhi	r4, r4
 801a4ba:	2400      	movls	r4, #0
 801a4bc:	4673      	mov	r3, lr
 801a4be:	462e      	mov	r6, r5
 801a4c0:	e7db      	b.n	801a47a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801a4c2:	9a00      	ldr	r2, [sp, #0]
 801a4c4:	9b00      	ldr	r3, [sp, #0]
 801a4c6:	3202      	adds	r2, #2
 801a4c8:	785b      	ldrb	r3, [r3, #1]
 801a4ca:	9200      	str	r2, [sp, #0]
 801a4cc:	e7e7      	b.n	801a49e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801a4ce:	2204      	movs	r2, #4
 801a4d0:	9905      	ldr	r1, [sp, #20]
 801a4d2:	429e      	cmp	r6, r3
 801a4d4:	4615      	mov	r5, r2
 801a4d6:	9a02      	ldr	r2, [sp, #8]
 801a4d8:	bf94      	ite	ls
 801a4da:	eba3 0e06 	subls.w	lr, r3, r6
 801a4de:	46a6      	movhi	lr, r4
 801a4e0:	fb15 1202 	smlabb	r2, r5, r2, r1
 801a4e4:	9903      	ldr	r1, [sp, #12]
 801a4e6:	bf8c      	ite	hi
 801a4e8:	1af5      	subhi	r5, r6, r3
 801a4ea:	fa1f fe8e 	uxthls.w	lr, lr
 801a4ee:	f851 c002 	ldr.w	ip, [r1, r2]
 801a4f2:	bf9a      	itte	ls
 801a4f4:	4625      	movls	r5, r4
 801a4f6:	4632      	movls	r2, r6
 801a4f8:	b2ad      	uxthhi	r5, r5
 801a4fa:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801a4fe:	bf88      	it	hi
 801a500:	461a      	movhi	r2, r3
 801a502:	b179      	cbz	r1, 801a524 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801a504:	29ff      	cmp	r1, #255	@ 0xff
 801a506:	fa5f f98c 	uxtb.w	r9, ip
 801a50a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801a50e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801a512:	d126      	bne.n	801a562 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801a514:	9f04      	ldr	r7, [sp, #16]
 801a516:	2fff      	cmp	r7, #255	@ 0xff
 801a518:	d123      	bne.n	801a562 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801a51a:	4682      	mov	sl, r0
 801a51c:	4611      	mov	r1, r2
 801a51e:	f10a 0a03 	add.w	sl, sl, #3
 801a522:	b9a9      	cbnz	r1, 801a550 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801a524:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a528:	429e      	cmp	r6, r3
 801a52a:	4410      	add	r0, r2
 801a52c:	d8c6      	bhi.n	801a4bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801a52e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801a532:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a538:	1b64      	subs	r4, r4, r5
 801a53a:	9a01      	ldr	r2, [sp, #4]
 801a53c:	881b      	ldrh	r3, [r3, #0]
 801a53e:	b2a4      	uxth	r4, r4
 801a540:	1a9b      	subs	r3, r3, r2
 801a542:	2c00      	cmp	r4, #0
 801a544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a548:	bf18      	it	ne
 801a54a:	2500      	movne	r5, #0
 801a54c:	4418      	add	r0, r3
 801a54e:	e7b5      	b.n	801a4bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801a550:	3901      	subs	r1, #1
 801a552:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801a556:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801a55a:	f80a cc01 	strb.w	ip, [sl, #-1]
 801a55e:	b289      	uxth	r1, r1
 801a560:	e7dd      	b.n	801a51e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801a562:	9f04      	ldr	r7, [sp, #16]
 801a564:	fb07 fa01 	mul.w	sl, r7, r1
 801a568:	f10a 0101 	add.w	r1, sl, #1
 801a56c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801a570:	1209      	asrs	r1, r1, #8
 801a572:	ea6f 0a01 	mvn.w	sl, r1
 801a576:	b289      	uxth	r1, r1
 801a578:	fb19 f901 	smulbb	r9, r9, r1
 801a57c:	fa5f fa8a 	uxtb.w	sl, sl
 801a580:	fb18 f801 	smulbb	r8, r8, r1
 801a584:	fb1c f101 	smulbb	r1, ip, r1
 801a588:	fa1f f789 	uxth.w	r7, r9
 801a58c:	4684      	mov	ip, r0
 801a58e:	4691      	mov	r9, r2
 801a590:	9707      	str	r7, [sp, #28]
 801a592:	b289      	uxth	r1, r1
 801a594:	fa1f f788 	uxth.w	r7, r8
 801a598:	9708      	str	r7, [sp, #32]
 801a59a:	f10c 0c03 	add.w	ip, ip, #3
 801a59e:	f1b9 0f00 	cmp.w	r9, #0
 801a5a2:	d0bf      	beq.n	801a524 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801a5a4:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801a5a8:	f109 39ff 	add.w	r9, r9, #4294967295
 801a5ac:	9f07      	ldr	r7, [sp, #28]
 801a5ae:	fa1f f989 	uxth.w	r9, r9
 801a5b2:	fb08 780a 	mla	r8, r8, sl, r7
 801a5b6:	9f08      	ldr	r7, [sp, #32]
 801a5b8:	fa1f f888 	uxth.w	r8, r8
 801a5bc:	f108 0b01 	add.w	fp, r8, #1
 801a5c0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a5c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a5c8:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801a5cc:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801a5d0:	fb08 780a 	mla	r8, r8, sl, r7
 801a5d4:	fa1f f888 	uxth.w	r8, r8
 801a5d8:	f108 0b01 	add.w	fp, r8, #1
 801a5dc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a5e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a5e4:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801a5e8:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801a5ec:	fb08 180a 	mla	r8, r8, sl, r1
 801a5f0:	fa1f f888 	uxth.w	r8, r8
 801a5f4:	f108 0b01 	add.w	fp, r8, #1
 801a5f8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a5fc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a600:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801a604:	e7c9      	b.n	801a59a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a606:	4b04      	ldr	r3, [pc, #16]	@ (801a618 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801a608:	6818      	ldr	r0, [r3, #0]
 801a60a:	6803      	ldr	r3, [r0, #0]
 801a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a60e:	4798      	blx	r3
 801a610:	b00f      	add	sp, #60	@ 0x3c
 801a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a616:	bf00      	nop
 801a618:	2402daac 	.word	0x2402daac
 801a61c:	2402daa6 	.word	0x2402daa6

0801a620 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a624:	b089      	sub	sp, #36	@ 0x24
 801a626:	4607      	mov	r7, r0
 801a628:	4689      	mov	r9, r1
 801a62a:	4692      	mov	sl, r2
 801a62c:	ac08      	add	r4, sp, #32
 801a62e:	461e      	mov	r6, r3
 801a630:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a634:	4620      	mov	r0, r4
 801a636:	f7fd ffa5 	bl	8018584 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	4605      	mov	r5, r0
 801a63e:	4620      	mov	r0, r4
 801a640:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a644:	f7fd feea 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a648:	4683      	mov	fp, r0
 801a64a:	4620      	mov	r0, r4
 801a64c:	f7fd ff1a 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a650:	4653      	mov	r3, sl
 801a652:	464a      	mov	r2, r9
 801a654:	4639      	mov	r1, r7
 801a656:	9500      	str	r5, [sp, #0]
 801a658:	e9cd b001 	strd	fp, r0, [sp, #4]
 801a65c:	a806      	add	r0, sp, #24
 801a65e:	47c0      	blx	r8
 801a660:	a906      	add	r1, sp, #24
 801a662:	4630      	mov	r0, r6
 801a664:	f7fd fdbe 	bl	80181e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801a668:	4628      	mov	r0, r5
 801a66a:	b009      	add	sp, #36	@ 0x24
 801a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a670 <_ZN8touchgfx8LCD24bppD0Ev>:
 801a670:	b510      	push	{r4, lr}
 801a672:	4604      	mov	r4, r0
 801a674:	2168      	movs	r1, #104	@ 0x68
 801a676:	f007 fe99 	bl	80223ac <_ZdlPvj>
 801a67a:	4620      	mov	r0, r4
 801a67c:	bd10      	pop	{r4, pc}

0801a67e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801a67e:	b510      	push	{r4, lr}
 801a680:	4604      	mov	r4, r0
 801a682:	2104      	movs	r1, #4
 801a684:	f007 fe92 	bl	80223ac <_ZdlPvj>
 801a688:	4620      	mov	r0, r4
 801a68a:	bd10      	pop	{r4, pc}

0801a68c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801a68c:	b510      	push	{r4, lr}
 801a68e:	4604      	mov	r4, r0
 801a690:	2104      	movs	r1, #4
 801a692:	f007 fe8b 	bl	80223ac <_ZdlPvj>
 801a696:	4620      	mov	r0, r4
 801a698:	bd10      	pop	{r4, pc}

0801a69a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801a69a:	b510      	push	{r4, lr}
 801a69c:	4604      	mov	r4, r0
 801a69e:	f640 0144 	movw	r1, #2116	@ 0x844
 801a6a2:	f007 fe83 	bl	80223ac <_ZdlPvj>
 801a6a6:	4620      	mov	r0, r4
 801a6a8:	bd10      	pop	{r4, pc}

0801a6aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a6aa:	b510      	push	{r4, lr}
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	2104      	movs	r1, #4
 801a6b0:	f007 fe7c 	bl	80223ac <_ZdlPvj>
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	bd10      	pop	{r4, pc}

0801a6b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a6b8:	b510      	push	{r4, lr}
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	2104      	movs	r1, #4
 801a6be:	f007 fe75 	bl	80223ac <_ZdlPvj>
 801a6c2:	4620      	mov	r0, r4
 801a6c4:	bd10      	pop	{r4, pc}

0801a6c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a6c6:	b510      	push	{r4, lr}
 801a6c8:	4604      	mov	r4, r0
 801a6ca:	2104      	movs	r1, #4
 801a6cc:	f007 fe6e 	bl	80223ac <_ZdlPvj>
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	bd10      	pop	{r4, pc}

0801a6d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a6d4:	b510      	push	{r4, lr}
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	2104      	movs	r1, #4
 801a6da:	f007 fe67 	bl	80223ac <_ZdlPvj>
 801a6de:	4620      	mov	r0, r4
 801a6e0:	bd10      	pop	{r4, pc}

0801a6e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a6e2:	b510      	push	{r4, lr}
 801a6e4:	4604      	mov	r4, r0
 801a6e6:	2104      	movs	r1, #4
 801a6e8:	f007 fe60 	bl	80223ac <_ZdlPvj>
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	bd10      	pop	{r4, pc}

0801a6f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a6f0:	b510      	push	{r4, lr}
 801a6f2:	4604      	mov	r4, r0
 801a6f4:	2104      	movs	r1, #4
 801a6f6:	f007 fe59 	bl	80223ac <_ZdlPvj>
 801a6fa:	4620      	mov	r0, r4
 801a6fc:	bd10      	pop	{r4, pc}

0801a6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a6fe:	b510      	push	{r4, lr}
 801a700:	4604      	mov	r4, r0
 801a702:	2104      	movs	r1, #4
 801a704:	f007 fe52 	bl	80223ac <_ZdlPvj>
 801a708:	4620      	mov	r0, r4
 801a70a:	bd10      	pop	{r4, pc}

0801a70c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a70c:	b510      	push	{r4, lr}
 801a70e:	4604      	mov	r4, r0
 801a710:	2104      	movs	r1, #4
 801a712:	f007 fe4b 	bl	80223ac <_ZdlPvj>
 801a716:	4620      	mov	r0, r4
 801a718:	bd10      	pop	{r4, pc}

0801a71a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a71a:	b510      	push	{r4, lr}
 801a71c:	4604      	mov	r4, r0
 801a71e:	2104      	movs	r1, #4
 801a720:	f007 fe44 	bl	80223ac <_ZdlPvj>
 801a724:	4620      	mov	r0, r4
 801a726:	bd10      	pop	{r4, pc}

0801a728 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a728:	b510      	push	{r4, lr}
 801a72a:	4604      	mov	r4, r0
 801a72c:	2104      	movs	r1, #4
 801a72e:	f007 fe3d 	bl	80223ac <_ZdlPvj>
 801a732:	4620      	mov	r0, r4
 801a734:	bd10      	pop	{r4, pc}

0801a736 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a736:	b510      	push	{r4, lr}
 801a738:	4604      	mov	r4, r0
 801a73a:	2104      	movs	r1, #4
 801a73c:	f007 fe36 	bl	80223ac <_ZdlPvj>
 801a740:	4620      	mov	r0, r4
 801a742:	bd10      	pop	{r4, pc}

0801a744 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a744:	b510      	push	{r4, lr}
 801a746:	4604      	mov	r4, r0
 801a748:	2104      	movs	r1, #4
 801a74a:	f007 fe2f 	bl	80223ac <_ZdlPvj>
 801a74e:	4620      	mov	r0, r4
 801a750:	bd10      	pop	{r4, pc}

0801a752 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a752:	b510      	push	{r4, lr}
 801a754:	4604      	mov	r4, r0
 801a756:	2104      	movs	r1, #4
 801a758:	f007 fe28 	bl	80223ac <_ZdlPvj>
 801a75c:	4620      	mov	r0, r4
 801a75e:	bd10      	pop	{r4, pc}

0801a760 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a760:	b510      	push	{r4, lr}
 801a762:	4604      	mov	r4, r0
 801a764:	2104      	movs	r1, #4
 801a766:	f007 fe21 	bl	80223ac <_ZdlPvj>
 801a76a:	4620      	mov	r0, r4
 801a76c:	bd10      	pop	{r4, pc}

0801a76e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a76e:	b510      	push	{r4, lr}
 801a770:	4604      	mov	r4, r0
 801a772:	2104      	movs	r1, #4
 801a774:	f007 fe1a 	bl	80223ac <_ZdlPvj>
 801a778:	4620      	mov	r0, r4
 801a77a:	bd10      	pop	{r4, pc}

0801a77c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a77c:	b510      	push	{r4, lr}
 801a77e:	4604      	mov	r4, r0
 801a780:	2104      	movs	r1, #4
 801a782:	f007 fe13 	bl	80223ac <_ZdlPvj>
 801a786:	4620      	mov	r0, r4
 801a788:	bd10      	pop	{r4, pc}

0801a78a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a78a:	b510      	push	{r4, lr}
 801a78c:	4604      	mov	r4, r0
 801a78e:	2104      	movs	r1, #4
 801a790:	f007 fe0c 	bl	80223ac <_ZdlPvj>
 801a794:	4620      	mov	r0, r4
 801a796:	bd10      	pop	{r4, pc}

0801a798 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a798:	b510      	push	{r4, lr}
 801a79a:	4604      	mov	r4, r0
 801a79c:	2104      	movs	r1, #4
 801a79e:	f007 fe05 	bl	80223ac <_ZdlPvj>
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	bd10      	pop	{r4, pc}

0801a7a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a7a6:	b510      	push	{r4, lr}
 801a7a8:	4604      	mov	r4, r0
 801a7aa:	2104      	movs	r1, #4
 801a7ac:	f007 fdfe 	bl	80223ac <_ZdlPvj>
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	bd10      	pop	{r4, pc}

0801a7b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a7b4:	b510      	push	{r4, lr}
 801a7b6:	4604      	mov	r4, r0
 801a7b8:	2104      	movs	r1, #4
 801a7ba:	f007 fdf7 	bl	80223ac <_ZdlPvj>
 801a7be:	4620      	mov	r0, r4
 801a7c0:	bd10      	pop	{r4, pc}
	...

0801a7c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c8:	b08f      	sub	sp, #60	@ 0x3c
 801a7ca:	461c      	mov	r4, r3
 801a7cc:	460e      	mov	r6, r1
 801a7ce:	9206      	str	r2, [sp, #24]
 801a7d0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a7d4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a7d6:	9202      	str	r2, [sp, #8]
 801a7d8:	2a00      	cmp	r2, #0
 801a7da:	f000 8128 	beq.w	801aa2e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a7de:	6820      	ldr	r0, [r4, #0]
 801a7e0:	aa0a      	add	r2, sp, #40	@ 0x28
 801a7e2:	6861      	ldr	r1, [r4, #4]
 801a7e4:	c203      	stmia	r2!, {r0, r1}
 801a7e6:	6818      	ldr	r0, [r3, #0]
 801a7e8:	aa0c      	add	r2, sp, #48	@ 0x30
 801a7ea:	6859      	ldr	r1, [r3, #4]
 801a7ec:	c203      	stmia	r2!, {r0, r1}
 801a7ee:	a80a      	add	r0, sp, #40	@ 0x28
 801a7f0:	f7f9 fdd4 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a7f4:	4621      	mov	r1, r4
 801a7f6:	a80c      	add	r0, sp, #48	@ 0x30
 801a7f8:	f7f9 fdf8 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a7fc:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801a800:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a804:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801a808:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a80c:	bfdb      	ittet	le
 801a80e:	b2bb      	uxthle	r3, r7
 801a810:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a814:	2301      	movgt	r3, #1
 801a816:	fb92 f3f3 	sdivle	r3, r2, r3
 801a81a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a81e:	441d      	add	r5, r3
 801a820:	fb92 f1f3 	sdiv	r1, r2, r3
 801a824:	fa1f fc81 	uxth.w	ip, r1
 801a828:	3d01      	subs	r5, #1
 801a82a:	fb0c 2413 	mls	r4, ip, r3, r2
 801a82e:	4661      	mov	r1, ip
 801a830:	fb14 f407 	smulbb	r4, r4, r7
 801a834:	4404      	add	r4, r0
 801a836:	fb95 f5f3 	sdiv	r5, r5, r3
 801a83a:	b2a4      	uxth	r4, r4
 801a83c:	b121      	cbz	r1, 801a848 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801a83e:	9b06      	ldr	r3, [sp, #24]
 801a840:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a844:	ba1b      	rev	r3, r3
 801a846:	441e      	add	r6, r3
 801a848:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a84c:	b2ad      	uxth	r5, r5
 801a84e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a852:	4418      	add	r0, r3
 801a854:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a858:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801a85c:	00ad      	lsls	r5, r5, #2
 801a85e:	441a      	add	r2, r3
 801a860:	4b74      	ldr	r3, [pc, #464]	@ (801aa34 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a862:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a866:	6818      	ldr	r0, [r3, #0]
 801a868:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a86c:	6803      	ldr	r3, [r0, #0]
 801a86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a870:	4798      	blx	r3
 801a872:	4a71      	ldr	r2, [pc, #452]	@ (801aa38 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a874:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a878:	2c00      	cmp	r4, #0
 801a87a:	8813      	ldrh	r3, [r2, #0]
 801a87c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a880:	9209      	str	r2, [sp, #36]	@ 0x24
 801a882:	fb03 c101 	mla	r1, r3, r1, ip
 801a886:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a88a:	fb03 f307 	mul.w	r3, r3, r7
 801a88e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a892:	9204      	str	r2, [sp, #16]
 801a894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a898:	9a02      	ldr	r2, [sp, #8]
 801a89a:	4408      	add	r0, r1
 801a89c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a8a0:	4403      	add	r3, r0
 801a8a2:	b292      	uxth	r2, r2
 801a8a4:	9307      	str	r3, [sp, #28]
 801a8a6:	f105 0304 	add.w	r3, r5, #4
 801a8aa:	bf0c      	ite	eq
 801a8ac:	4645      	moveq	r5, r8
 801a8ae:	2500      	movne	r5, #0
 801a8b0:	9308      	str	r3, [sp, #32]
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	b2ad      	uxth	r5, r5
 801a8b6:	9205      	str	r2, [sp, #20]
 801a8b8:	9303      	str	r3, [sp, #12]
 801a8ba:	9a07      	ldr	r2, [sp, #28]
 801a8bc:	4282      	cmp	r2, r0
 801a8be:	f240 80b1 	bls.w	801aa24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801a8c2:	b95b      	cbnz	r3, 801a8dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801a8c4:	7832      	ldrb	r2, [r6, #0]
 801a8c6:	0993      	lsrs	r3, r2, #6
 801a8c8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a8cc:	9203      	str	r2, [sp, #12]
 801a8ce:	1e5a      	subs	r2, r3, #1
 801a8d0:	2a02      	cmp	r2, #2
 801a8d2:	bf8d      	iteet	hi
 801a8d4:	7873      	ldrbhi	r3, [r6, #1]
 801a8d6:	3601      	addls	r6, #1
 801a8d8:	b29b      	uxthls	r3, r3
 801a8da:	3602      	addhi	r6, #2
 801a8dc:	b184      	cbz	r4, 801a900 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801a8de:	429c      	cmp	r4, r3
 801a8e0:	bf91      	iteee	ls
 801a8e2:	1b1c      	subls	r4, r3, r4
 801a8e4:	1ae4      	subhi	r4, r4, r3
 801a8e6:	4629      	movhi	r1, r5
 801a8e8:	f04f 0e00 	movhi.w	lr, #0
 801a8ec:	bf9b      	ittet	ls
 801a8ee:	fa1f fe84 	uxthls.w	lr, r4
 801a8f2:	2400      	movls	r4, #0
 801a8f4:	b2a4      	uxthhi	r4, r4
 801a8f6:	fa1f f188 	uxthls.w	r1, r8
 801a8fa:	4673      	mov	r3, lr
 801a8fc:	460d      	mov	r5, r1
 801a8fe:	e7dc      	b.n	801a8ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801a900:	2203      	movs	r2, #3
 801a902:	9908      	ldr	r1, [sp, #32]
 801a904:	42ab      	cmp	r3, r5
 801a906:	4617      	mov	r7, r2
 801a908:	9a03      	ldr	r2, [sp, #12]
 801a90a:	bf24      	itt	cs
 801a90c:	eba3 0e05 	subcs.w	lr, r3, r5
 801a910:	9501      	strcs	r5, [sp, #4]
 801a912:	fb17 1702 	smlabb	r7, r7, r2, r1
 801a916:	9a06      	ldr	r2, [sp, #24]
 801a918:	bf34      	ite	cc
 801a91a:	1ae9      	subcc	r1, r5, r3
 801a91c:	fa1f fe8e 	uxthcs.w	lr, lr
 801a920:	4417      	add	r7, r2
 801a922:	9a02      	ldr	r2, [sp, #8]
 801a924:	bf2f      	iteee	cs
 801a926:	4621      	movcs	r1, r4
 801a928:	b289      	uxthcc	r1, r1
 801a92a:	9301      	strcc	r3, [sp, #4]
 801a92c:	46a6      	movcc	lr, r4
 801a92e:	2aff      	cmp	r2, #255	@ 0xff
 801a930:	d11e      	bne.n	801a970 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801a932:	4681      	mov	r9, r0
 801a934:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a938:	f109 0903 	add.w	r9, r9, #3
 801a93c:	f1bc 0f00 	cmp.w	ip, #0
 801a940:	d15f      	bne.n	801aa02 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801a942:	9a01      	ldr	r2, [sp, #4]
 801a944:	42ab      	cmp	r3, r5
 801a946:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a94a:	4410      	add	r0, r2
 801a94c:	d3d5      	bcc.n	801a8fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a94e:	fa1f f188 	uxth.w	r1, r8
 801a952:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a958:	1a64      	subs	r4, r4, r1
 801a95a:	881b      	ldrh	r3, [r3, #0]
 801a95c:	b2a4      	uxth	r4, r4
 801a95e:	eba3 0308 	sub.w	r3, r3, r8
 801a962:	2c00      	cmp	r4, #0
 801a964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a968:	bf18      	it	ne
 801a96a:	2100      	movne	r1, #0
 801a96c:	4418      	add	r0, r3
 801a96e:	e7c4      	b.n	801a8fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a970:	4684      	mov	ip, r0
 801a972:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a976:	f10c 0c03 	add.w	ip, ip, #3
 801a97a:	f1ba 0f00 	cmp.w	sl, #0
 801a97e:	d0e0      	beq.n	801a942 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801a980:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801a984:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a988:	9a05      	ldr	r2, [sp, #20]
 801a98a:	f897 9000 	ldrb.w	r9, [r7]
 801a98e:	fa1f fa8a 	uxth.w	sl, sl
 801a992:	fb1b fb02 	smulbb	fp, fp, r2
 801a996:	9a04      	ldr	r2, [sp, #16]
 801a998:	fb09 b902 	mla	r9, r9, r2, fp
 801a99c:	9a05      	ldr	r2, [sp, #20]
 801a99e:	fa1f f989 	uxth.w	r9, r9
 801a9a2:	f109 0b01 	add.w	fp, r9, #1
 801a9a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a9aa:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801a9ae:	fb1b fb02 	smulbb	fp, fp, r2
 801a9b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a9b6:	9a04      	ldr	r2, [sp, #16]
 801a9b8:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801a9bc:	f897 9001 	ldrb.w	r9, [r7, #1]
 801a9c0:	fb09 b902 	mla	r9, r9, r2, fp
 801a9c4:	9a05      	ldr	r2, [sp, #20]
 801a9c6:	fa1f f989 	uxth.w	r9, r9
 801a9ca:	f109 0b01 	add.w	fp, r9, #1
 801a9ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a9d2:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801a9d6:	fb1b fb02 	smulbb	fp, fp, r2
 801a9da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a9de:	9a04      	ldr	r2, [sp, #16]
 801a9e0:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801a9e4:	f897 9002 	ldrb.w	r9, [r7, #2]
 801a9e8:	fb09 b902 	mla	r9, r9, r2, fp
 801a9ec:	fa1f f989 	uxth.w	r9, r9
 801a9f0:	f109 0b01 	add.w	fp, r9, #1
 801a9f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a9f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a9fc:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801aa00:	e7b9      	b.n	801a976 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801aa02:	f897 a000 	ldrb.w	sl, [r7]
 801aa06:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa0a:	f809 ac03 	strb.w	sl, [r9, #-3]
 801aa0e:	fa1f fc8c 	uxth.w	ip, ip
 801aa12:	f897 a001 	ldrb.w	sl, [r7, #1]
 801aa16:	f809 ac02 	strb.w	sl, [r9, #-2]
 801aa1a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801aa1e:	f809 ac01 	strb.w	sl, [r9, #-1]
 801aa22:	e789      	b.n	801a938 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801aa24:	4b03      	ldr	r3, [pc, #12]	@ (801aa34 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801aa26:	6818      	ldr	r0, [r3, #0]
 801aa28:	6803      	ldr	r3, [r0, #0]
 801aa2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa2c:	4798      	blx	r3
 801aa2e:	b00f      	add	sp, #60	@ 0x3c
 801aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa34:	2402daac 	.word	0x2402daac
 801aa38:	2402daa6 	.word	0x2402daa6

0801aa3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa40:	b09b      	sub	sp, #108	@ 0x6c
 801aa42:	461d      	mov	r5, r3
 801aa44:	4604      	mov	r4, r0
 801aa46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801aa48:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801aa4c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801aa50:	9208      	str	r2, [sp, #32]
 801aa52:	2a00      	cmp	r2, #0
 801aa54:	f000 81f3 	beq.w	801ae3e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801aa58:	6828      	ldr	r0, [r5, #0]
 801aa5a:	aa16      	add	r2, sp, #88	@ 0x58
 801aa5c:	6869      	ldr	r1, [r5, #4]
 801aa5e:	c203      	stmia	r2!, {r0, r1}
 801aa60:	6818      	ldr	r0, [r3, #0]
 801aa62:	aa18      	add	r2, sp, #96	@ 0x60
 801aa64:	6859      	ldr	r1, [r3, #4]
 801aa66:	c203      	stmia	r2!, {r0, r1}
 801aa68:	a816      	add	r0, sp, #88	@ 0x58
 801aa6a:	f7f9 fc97 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa6e:	4629      	mov	r1, r5
 801aa70:	a818      	add	r0, sp, #96	@ 0x60
 801aa72:	f7f9 fcbb 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa76:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801aa7a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801aa7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801aa82:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801aa86:	bfdb      	ittet	le
 801aa88:	b29a      	uxthle	r2, r3
 801aa8a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801aa8e:	f04f 0a01 	movgt.w	sl, #1
 801aa92:	fb91 faf2 	sdivle	sl, r1, r2
 801aa96:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801aa9a:	4456      	add	r6, sl
 801aa9c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801aaa0:	3e01      	subs	r6, #1
 801aaa2:	fb92 f0fa 	sdiv	r0, r2, sl
 801aaa6:	b280      	uxth	r0, r0
 801aaa8:	fb00 281a 	mls	r8, r0, sl, r2
 801aaac:	900e      	str	r0, [sp, #56]	@ 0x38
 801aaae:	fb18 f803 	smulbb	r8, r8, r3
 801aab2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801aab6:	4488      	add	r8, r1
 801aab8:	4419      	add	r1, r3
 801aaba:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801aabe:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801aac2:	fa1f f888 	uxth.w	r8, r8
 801aac6:	441a      	add	r2, r3
 801aac8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801aacc:	9303      	str	r3, [sp, #12]
 801aace:	4b9c      	ldr	r3, [pc, #624]	@ (801ad40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801aad0:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801aad4:	6818      	ldr	r0, [r3, #0]
 801aad6:	6803      	ldr	r3, [r0, #0]
 801aad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aada:	4798      	blx	r3
 801aadc:	4b99      	ldr	r3, [pc, #612]	@ (801ad44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801aade:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801aae2:	f1b8 0f00 	cmp.w	r8, #0
 801aae6:	881a      	ldrh	r2, [r3, #0]
 801aae8:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801aaec:	fb02 f505 	mul.w	r5, r2, r5
 801aaf0:	fb02 7101 	mla	r1, r2, r1, r7
 801aaf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aaf8:	9314      	str	r3, [sp, #80]	@ 0x50
 801aafa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aafe:	9b08      	ldr	r3, [sp, #32]
 801ab00:	fb96 f6fa 	sdiv	r6, r6, sl
 801ab04:	4408      	add	r0, r1
 801ab06:	f106 0601 	add.w	r6, r6, #1
 801ab0a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801ab0e:	f04f 0100 	mov.w	r1, #0
 801ab12:	eb00 0205 	add.w	r2, r0, r5
 801ab16:	b2b6      	uxth	r6, r6
 801ab18:	b29b      	uxth	r3, r3
 801ab1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ab1c:	9209      	str	r2, [sp, #36]	@ 0x24
 801ab1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ab20:	930d      	str	r3, [sp, #52]	@ 0x34
 801ab22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ab26:	4b88      	ldr	r3, [pc, #544]	@ (801ad48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801ab28:	f106 0204 	add.w	r2, r6, #4
 801ab2c:	eba3 0304 	sub.w	r3, r3, r4
 801ab30:	9205      	str	r2, [sp, #20]
 801ab32:	9a03      	ldr	r2, [sp, #12]
 801ab34:	bf18      	it	ne
 801ab36:	2200      	movne	r2, #0
 801ab38:	9315      	str	r3, [sp, #84]	@ 0x54
 801ab3a:	b292      	uxth	r2, r2
 801ab3c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ab3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab40:	fa11 f383 	uxtah	r3, r1, r3
 801ab44:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ab46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ab4a:	3304      	adds	r3, #4
 801ab4c:	9306      	str	r3, [sp, #24]
 801ab4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab50:	4283      	cmp	r3, r0
 801ab52:	f240 816f 	bls.w	801ae34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801ab56:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801ab5a:	f04f 0900 	mov.w	r9, #0
 801ab5e:	9d06      	ldr	r5, [sp, #24]
 801ab60:	fbb8 f3f3 	udiv	r3, r8, r3
 801ab64:	ebaa 0303 	sub.w	r3, sl, r3
 801ab68:	782d      	ldrb	r5, [r5, #0]
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	950f      	str	r5, [sp, #60]	@ 0x3c
 801ab6e:	3501      	adds	r5, #1
 801ab70:	9312      	str	r3, [sp, #72]	@ 0x48
 801ab72:	9b06      	ldr	r3, [sp, #24]
 801ab74:	9504      	str	r5, [sp, #16]
 801ab76:	7859      	ldrb	r1, [r3, #1]
 801ab78:	789b      	ldrb	r3, [r3, #2]
 801ab7a:	021b      	lsls	r3, r3, #8
 801ab7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ab80:	9906      	ldr	r1, [sp, #24]
 801ab82:	78c9      	ldrb	r1, [r1, #3]
 801ab84:	430b      	orrs	r3, r1
 801ab86:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ab88:	4419      	add	r1, r3
 801ab8a:	1c4d      	adds	r5, r1, #1
 801ab8c:	7849      	ldrb	r1, [r1, #1]
 801ab8e:	9502      	str	r5, [sp, #8]
 801ab90:	0209      	lsls	r1, r1, #8
 801ab92:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801ab94:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801ab98:	5ceb      	ldrb	r3, [r5, r3]
 801ab9a:	4319      	orrs	r1, r3
 801ab9c:	b28b      	uxth	r3, r1
 801ab9e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801aba2:	930a      	str	r3, [sp, #40]	@ 0x28
 801aba4:	2300      	movs	r3, #0
 801aba6:	9307      	str	r3, [sp, #28]
 801aba8:	2301      	movs	r3, #1
 801abaa:	e9cd 3300 	strd	r3, r3, [sp]
 801abae:	469c      	mov	ip, r3
 801abb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801abb4:	930c      	str	r3, [sp, #48]	@ 0x30
 801abb6:	f1b8 0f00 	cmp.w	r8, #0
 801abba:	f000 8082 	beq.w	801acc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801abbe:	45c4      	cmp	ip, r8
 801abc0:	d270      	bcs.n	801aca4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801abc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abc4:	eba8 080c 	sub.w	r8, r8, ip
 801abc8:	4611      	mov	r1, r2
 801abca:	4283      	cmp	r3, r0
 801abcc:	fa1f f888 	uxth.w	r8, r8
 801abd0:	d802      	bhi.n	801abd8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801abd2:	e074      	b.n	801acbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d15f      	bne.n	801ac98 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801abd8:	9b02      	ldr	r3, [sp, #8]
 801abda:	9a01      	ldr	r2, [sp, #4]
 801abdc:	785b      	ldrb	r3, [r3, #1]
 801abde:	f1c2 0207 	rsb	r2, r2, #7
 801abe2:	9d01      	ldr	r5, [sp, #4]
 801abe4:	4093      	lsls	r3, r2
 801abe6:	005b      	lsls	r3, r3, #1
 801abe8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801abec:	9b02      	ldr	r3, [sp, #8]
 801abee:	781b      	ldrb	r3, [r3, #0]
 801abf0:	412b      	asrs	r3, r5
 801abf2:	b2db      	uxtb	r3, r3
 801abf4:	4313      	orrs	r3, r2
 801abf6:	462a      	mov	r2, r5
 801abf8:	3201      	adds	r2, #1
 801abfa:	b29e      	uxth	r6, r3
 801abfc:	b2d2      	uxtb	r2, r2
 801abfe:	2a08      	cmp	r2, #8
 801ac00:	9201      	str	r2, [sp, #4]
 801ac02:	9a02      	ldr	r2, [sp, #8]
 801ac04:	bf09      	itett	eq
 801ac06:	3202      	addeq	r2, #2
 801ac08:	3201      	addne	r2, #1
 801ac0a:	9202      	streq	r2, [sp, #8]
 801ac0c:	2200      	moveq	r2, #0
 801ac0e:	bf14      	ite	ne
 801ac10:	9202      	strne	r2, [sp, #8]
 801ac12:	9201      	streq	r2, [sp, #4]
 801ac14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ac16:	42b2      	cmp	r2, r6
 801ac18:	d309      	bcc.n	801ac2e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801ac1a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801ac1e:	2301      	movs	r3, #1
 801ac20:	9a04      	ldr	r2, [sp, #16]
 801ac22:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801ac26:	d30e      	bcc.n	801ac46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801ac28:	9300      	str	r3, [sp, #0]
 801ac2a:	2500      	movs	r5, #0
 801ac2c:	e035      	b.n	801ac9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801ac2e:	9b04      	ldr	r3, [sp, #16]
 801ac30:	429e      	cmp	r6, r3
 801ac32:	d318      	bcc.n	801ac66 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801ac34:	9b00      	ldr	r3, [sp, #0]
 801ac36:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801ac3a:	18e3      	adds	r3, r4, r3
 801ac3c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801ac40:	9b00      	ldr	r3, [sp, #0]
 801ac42:	3301      	adds	r3, #1
 801ac44:	b29b      	uxth	r3, r3
 801ac46:	9a04      	ldr	r2, [sp, #16]
 801ac48:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801ac4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ac50:	9f00      	ldr	r7, [sp, #0]
 801ac52:	7115      	strb	r5, [r2, #4]
 801ac54:	3701      	adds	r7, #1
 801ac56:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ac58:	7157      	strb	r7, [r2, #5]
 801ac5a:	80d5      	strh	r5, [r2, #6]
 801ac5c:	9a04      	ldr	r2, [sp, #16]
 801ac5e:	3201      	adds	r2, #1
 801ac60:	b292      	uxth	r2, r2
 801ac62:	9204      	str	r2, [sp, #16]
 801ac64:	e7e0      	b.n	801ac28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801ac66:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ac6a:	4632      	mov	r2, r6
 801ac6c:	795b      	ldrb	r3, [r3, #5]
 801ac6e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801ac72:	4425      	add	r5, r4
 801ac74:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801ac76:	eb07 0c05 	add.w	ip, r7, r5
 801ac7a:	f1bc 0f00 	cmp.w	ip, #0
 801ac7e:	dd07      	ble.n	801ac90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801ac80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ac84:	f892 c004 	ldrb.w	ip, [r2, #4]
 801ac88:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801ac8c:	88d2      	ldrh	r2, [r2, #6]
 801ac8e:	e7f1      	b.n	801ac74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801ac90:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ac94:	b29b      	uxth	r3, r3
 801ac96:	e7c3      	b.n	801ac20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801ac98:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ac9a:	460a      	mov	r2, r1
 801ac9c:	960a      	str	r6, [sp, #40]	@ 0x28
 801ac9e:	46a9      	mov	r9, r5
 801aca0:	469c      	mov	ip, r3
 801aca2:	e788      	b.n	801abb6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801aca4:	ebac 0308 	sub.w	r3, ip, r8
 801aca8:	eb09 0508 	add.w	r5, r9, r8
 801acac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801acb0:	b29b      	uxth	r3, r3
 801acb2:	b2ad      	uxth	r5, r5
 801acb4:	f04f 0800 	mov.w	r8, #0
 801acb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801acba:	4282      	cmp	r2, r0
 801acbc:	d88a      	bhi.n	801abd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801acbe:	460a      	mov	r2, r1
 801acc0:	e745      	b.n	801ab4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801acc2:	4594      	cmp	ip, r2
 801acc4:	9d08      	ldr	r5, [sp, #32]
 801acc6:	4686      	mov	lr, r0
 801acc8:	bf27      	ittee	cs
 801acca:	ebac 0302 	subcs.w	r3, ip, r2
 801acce:	4616      	movcs	r6, r2
 801acd0:	eba2 010c 	subcc.w	r1, r2, ip
 801acd4:	4666      	movcc	r6, ip
 801acd6:	bf27      	ittee	cs
 801acd8:	b29b      	uxthcs	r3, r3
 801acda:	4641      	movcs	r1, r8
 801acdc:	b289      	uxthcc	r1, r1
 801acde:	4643      	movcc	r3, r8
 801ace0:	2dff      	cmp	r5, #255	@ 0xff
 801ace2:	eb09 0506 	add.w	r5, r9, r6
 801ace6:	b2ad      	uxth	r5, r5
 801ace8:	d130      	bne.n	801ad4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801acea:	45a9      	cmp	r9, r5
 801acec:	f10e 0e03 	add.w	lr, lr, #3
 801acf0:	d17a      	bne.n	801ade8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801acf2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801acf6:	4594      	cmp	ip, r2
 801acf8:	4430      	add	r0, r6
 801acfa:	d3db      	bcc.n	801acb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801acfc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801acfe:	9903      	ldr	r1, [sp, #12]
 801ad00:	8812      	ldrh	r2, [r2, #0]
 801ad02:	1a52      	subs	r2, r2, r1
 801ad04:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ad06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ad0a:	4410      	add	r0, r2
 801ad0c:	9a07      	ldr	r2, [sp, #28]
 801ad0e:	3201      	adds	r2, #1
 801ad10:	428a      	cmp	r2, r1
 801ad12:	9207      	str	r2, [sp, #28]
 801ad14:	f040 8081 	bne.w	801ae1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801ad18:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801ad1c:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801ad20:	9b03      	ldr	r3, [sp, #12]
 801ad22:	eba8 080c 	sub.w	r8, r8, ip
 801ad26:	fa1f f888 	uxth.w	r8, r8
 801ad2a:	f1b8 0f00 	cmp.w	r8, #0
 801ad2e:	bf08      	it	eq
 801ad30:	461a      	moveq	r2, r3
 801ad32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ad34:	bf18      	it	ne
 801ad36:	2200      	movne	r2, #0
 801ad38:	3301      	adds	r3, #1
 801ad3a:	b292      	uxth	r2, r2
 801ad3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad3e:	e6fd      	b.n	801ab3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801ad40:	2402daac 	.word	0x2402daac
 801ad44:	2402daa6 	.word	0x2402daa6
 801ad48:	fffff7fb 	.word	0xfffff7fb
 801ad4c:	45a9      	cmp	r9, r5
 801ad4e:	f10e 0e03 	add.w	lr, lr, #3
 801ad52:	d0ce      	beq.n	801acf2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801ad54:	f109 0701 	add.w	r7, r9, #1
 801ad58:	44a1      	add	r9, r4
 801ad5a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801ad5e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801ad62:	9713      	str	r7, [sp, #76]	@ 0x4c
 801ad64:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ad68:	9f05      	ldr	r7, [sp, #20]
 801ad6a:	eb07 0908 	add.w	r9, r7, r8
 801ad6e:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ad72:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ad74:	fb1b fb07 	smulbb	fp, fp, r7
 801ad78:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ad7a:	fb08 b807 	mla	r8, r8, r7, fp
 801ad7e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ad80:	fa1f f888 	uxth.w	r8, r8
 801ad84:	f108 0b01 	add.w	fp, r8, #1
 801ad88:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ad8c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801ad90:	fb1b fb07 	smulbb	fp, fp, r7
 801ad94:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad98:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ad9a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ad9e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ada2:	fb08 b807 	mla	r8, r8, r7, fp
 801ada6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ada8:	fa1f f888 	uxth.w	r8, r8
 801adac:	f108 0b01 	add.w	fp, r8, #1
 801adb0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801adb4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801adb8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801adbc:	f899 8002 	ldrb.w	r8, [r9, #2]
 801adc0:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801adc4:	fb19 f907 	smulbb	r9, r9, r7
 801adc8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801adca:	fb08 9807 	mla	r8, r8, r7, r9
 801adce:	fa1f f888 	uxth.w	r8, r8
 801add2:	f108 0901 	add.w	r9, r8, #1
 801add6:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801adda:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801adde:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ade2:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ade6:	e7b1      	b.n	801ad4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801ade8:	f109 0b01 	add.w	fp, r9, #1
 801adec:	44a1      	add	r9, r4
 801adee:	9f05      	ldr	r7, [sp, #20]
 801adf0:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801adf4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801adf8:	eb07 0908 	add.w	r9, r7, r8
 801adfc:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ae00:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ae04:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ae08:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ae0c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801ae10:	fa1f f98b 	uxth.w	r9, fp
 801ae14:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ae18:	e767      	b.n	801acea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801ae1a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ae1e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801ae22:	eba8 0801 	sub.w	r8, r8, r1
 801ae26:	fa1f f888 	uxth.w	r8, r8
 801ae2a:	f1b8 0f00 	cmp.w	r8, #0
 801ae2e:	bf18      	it	ne
 801ae30:	2100      	movne	r1, #0
 801ae32:	e741      	b.n	801acb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801ae34:	4b03      	ldr	r3, [pc, #12]	@ (801ae44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801ae36:	6818      	ldr	r0, [r3, #0]
 801ae38:	6803      	ldr	r3, [r0, #0]
 801ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae3c:	4798      	blx	r3
 801ae3e:	b01b      	add	sp, #108	@ 0x6c
 801ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae44:	2402daac 	.word	0x2402daac

0801ae48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae4c:	b09d      	sub	sp, #116	@ 0x74
 801ae4e:	461d      	mov	r5, r3
 801ae50:	4604      	mov	r4, r0
 801ae52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ae54:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801ae58:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801ae5c:	920c      	str	r2, [sp, #48]	@ 0x30
 801ae5e:	2a00      	cmp	r2, #0
 801ae60:	f000 81de 	beq.w	801b220 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801ae64:	6828      	ldr	r0, [r5, #0]
 801ae66:	aa18      	add	r2, sp, #96	@ 0x60
 801ae68:	6869      	ldr	r1, [r5, #4]
 801ae6a:	c203      	stmia	r2!, {r0, r1}
 801ae6c:	6818      	ldr	r0, [r3, #0]
 801ae6e:	aa1a      	add	r2, sp, #104	@ 0x68
 801ae70:	6859      	ldr	r1, [r3, #4]
 801ae72:	c203      	stmia	r2!, {r0, r1}
 801ae74:	a818      	add	r0, sp, #96	@ 0x60
 801ae76:	f7f9 fa91 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ae7a:	4629      	mov	r1, r5
 801ae7c:	a81a      	add	r0, sp, #104	@ 0x68
 801ae7e:	f7f9 fab5 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ae82:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ae86:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801ae8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ae8e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ae92:	bfdb      	ittet	le
 801ae94:	b29a      	uxthle	r2, r3
 801ae96:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ae9a:	2201      	movgt	r2, #1
 801ae9c:	fb91 f2f2 	sdivle	r2, r1, r2
 801aea0:	9201      	str	r2, [sp, #4]
 801aea2:	9801      	ldr	r0, [sp, #4]
 801aea4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801aea8:	9901      	ldr	r1, [sp, #4]
 801aeaa:	fb92 f0f0 	sdiv	r0, r2, r0
 801aeae:	b280      	uxth	r0, r0
 801aeb0:	440f      	add	r7, r1
 801aeb2:	900d      	str	r0, [sp, #52]	@ 0x34
 801aeb4:	3f01      	subs	r7, #1
 801aeb6:	9801      	ldr	r0, [sp, #4]
 801aeb8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801aeba:	fb05 2510 	mls	r5, r5, r0, r2
 801aebe:	fb97 f7f1 	sdiv	r7, r7, r1
 801aec2:	fb15 f503 	smulbb	r5, r5, r3
 801aec6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801aeca:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801aece:	3701      	adds	r7, #1
 801aed0:	440d      	add	r5, r1
 801aed2:	4419      	add	r1, r3
 801aed4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801aed8:	b2bf      	uxth	r7, r7
 801aeda:	441a      	add	r2, r3
 801aedc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801aee0:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801aee4:	00bf      	lsls	r7, r7, #2
 801aee6:	9304      	str	r3, [sp, #16]
 801aee8:	b2ad      	uxth	r5, r5
 801aeea:	4bb0      	ldr	r3, [pc, #704]	@ (801b1ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801aeec:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801aef0:	6818      	ldr	r0, [r3, #0]
 801aef2:	6803      	ldr	r3, [r0, #0]
 801aef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aef6:	4798      	blx	r3
 801aef8:	4bad      	ldr	r3, [pc, #692]	@ (801b1b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801aefa:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801aefe:	2d00      	cmp	r5, #0
 801af00:	881a      	ldrh	r2, [r3, #0]
 801af02:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801af06:	fb02 f606 	mul.w	r6, r2, r6
 801af0a:	fb02 c101 	mla	r1, r2, r1, ip
 801af0e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801af12:	9316      	str	r3, [sp, #88]	@ 0x58
 801af14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801af18:	4ba6      	ldr	r3, [pc, #664]	@ (801b1b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801af1a:	eb00 0801 	add.w	r8, r0, r1
 801af1e:	bf18      	it	ne
 801af20:	2100      	movne	r1, #0
 801af22:	eba3 0304 	sub.w	r3, r3, r4
 801af26:	eb08 0206 	add.w	r2, r8, r6
 801af2a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801af2c:	9208      	str	r2, [sp, #32]
 801af2e:	f107 0204 	add.w	r2, r7, #4
 801af32:	9211      	str	r2, [sp, #68]	@ 0x44
 801af34:	9a04      	ldr	r2, [sp, #16]
 801af36:	bf08      	it	eq
 801af38:	4611      	moveq	r1, r2
 801af3a:	2200      	movs	r2, #0
 801af3c:	b289      	uxth	r1, r1
 801af3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801af40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801af42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af44:	fa12 f383 	uxtah	r3, r2, r3
 801af48:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801af4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801af4e:	3304      	adds	r3, #4
 801af50:	9306      	str	r3, [sp, #24]
 801af52:	9b08      	ldr	r3, [sp, #32]
 801af54:	4543      	cmp	r3, r8
 801af56:	f240 815e 	bls.w	801b216 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801af5a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801af5e:	f04f 0b01 	mov.w	fp, #1
 801af62:	9a01      	ldr	r2, [sp, #4]
 801af64:	9806      	ldr	r0, [sp, #24]
 801af66:	465e      	mov	r6, fp
 801af68:	f8cd b008 	str.w	fp, [sp, #8]
 801af6c:	7800      	ldrb	r0, [r0, #0]
 801af6e:	fbb5 f3f3 	udiv	r3, r5, r3
 801af72:	1ad3      	subs	r3, r2, r3
 801af74:	900e      	str	r0, [sp, #56]	@ 0x38
 801af76:	3001      	adds	r0, #1
 801af78:	b29b      	uxth	r3, r3
 801af7a:	9005      	str	r0, [sp, #20]
 801af7c:	9312      	str	r3, [sp, #72]	@ 0x48
 801af7e:	9b06      	ldr	r3, [sp, #24]
 801af80:	785a      	ldrb	r2, [r3, #1]
 801af82:	789b      	ldrb	r3, [r3, #2]
 801af84:	021b      	lsls	r3, r3, #8
 801af86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801af8a:	9a06      	ldr	r2, [sp, #24]
 801af8c:	78d2      	ldrb	r2, [r2, #3]
 801af8e:	4313      	orrs	r3, r2
 801af90:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af92:	441a      	add	r2, r3
 801af94:	1c50      	adds	r0, r2, #1
 801af96:	7852      	ldrb	r2, [r2, #1]
 801af98:	9003      	str	r0, [sp, #12]
 801af9a:	0212      	lsls	r2, r2, #8
 801af9c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801af9e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801afa2:	5cc3      	ldrb	r3, [r0, r3]
 801afa4:	431a      	orrs	r2, r3
 801afa6:	b293      	uxth	r3, r2
 801afa8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801afac:	930a      	str	r3, [sp, #40]	@ 0x28
 801afae:	2300      	movs	r3, #0
 801afb0:	461a      	mov	r2, r3
 801afb2:	9307      	str	r3, [sp, #28]
 801afb4:	2d00      	cmp	r5, #0
 801afb6:	d07c      	beq.n	801b0b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801afb8:	42ae      	cmp	r6, r5
 801afba:	d26c      	bcs.n	801b096 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801afbc:	9b08      	ldr	r3, [sp, #32]
 801afbe:	1bad      	subs	r5, r5, r6
 801afc0:	4608      	mov	r0, r1
 801afc2:	4543      	cmp	r3, r8
 801afc4:	b2ad      	uxth	r5, r5
 801afc6:	d802      	bhi.n	801afce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801afc8:	e071      	b.n	801b0ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d15d      	bne.n	801b08a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801afce:	9b03      	ldr	r3, [sp, #12]
 801afd0:	9a02      	ldr	r2, [sp, #8]
 801afd2:	785b      	ldrb	r3, [r3, #1]
 801afd4:	f1c2 0207 	rsb	r2, r2, #7
 801afd8:	9902      	ldr	r1, [sp, #8]
 801afda:	4093      	lsls	r3, r2
 801afdc:	005b      	lsls	r3, r3, #1
 801afde:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801afe2:	9b03      	ldr	r3, [sp, #12]
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	410b      	asrs	r3, r1
 801afe8:	3101      	adds	r1, #1
 801afea:	b2c9      	uxtb	r1, r1
 801afec:	b2db      	uxtb	r3, r3
 801afee:	2908      	cmp	r1, #8
 801aff0:	9102      	str	r1, [sp, #8]
 801aff2:	9903      	ldr	r1, [sp, #12]
 801aff4:	ea43 0302 	orr.w	r3, r3, r2
 801aff8:	bf0c      	ite	eq
 801affa:	3102      	addeq	r1, #2
 801affc:	3101      	addne	r1, #1
 801affe:	b29a      	uxth	r2, r3
 801b000:	bf05      	ittet	eq
 801b002:	9103      	streq	r1, [sp, #12]
 801b004:	2100      	moveq	r1, #0
 801b006:	9103      	strne	r1, [sp, #12]
 801b008:	9102      	streq	r1, [sp, #8]
 801b00a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b00c:	4291      	cmp	r1, r2
 801b00e:	d30a      	bcc.n	801b026 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801b010:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801b014:	2301      	movs	r3, #1
 801b016:	9905      	ldr	r1, [sp, #20]
 801b018:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801b01c:	d30f      	bcc.n	801b03e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801b01e:	469b      	mov	fp, r3
 801b020:	f04f 0c00 	mov.w	ip, #0
 801b024:	e032      	b.n	801b08c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801b026:	9b05      	ldr	r3, [sp, #20]
 801b028:	429a      	cmp	r2, r3
 801b02a:	d318      	bcc.n	801b05e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801b02c:	eb04 030b 	add.w	r3, r4, fp
 801b030:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801b034:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801b038:	f10b 0301 	add.w	r3, fp, #1
 801b03c:	b29b      	uxth	r3, r3
 801b03e:	9905      	ldr	r1, [sp, #20]
 801b040:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801b044:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b048:	710e      	strb	r6, [r1, #4]
 801b04a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b04c:	80ce      	strh	r6, [r1, #6]
 801b04e:	f10b 0601 	add.w	r6, fp, #1
 801b052:	714e      	strb	r6, [r1, #5]
 801b054:	9905      	ldr	r1, [sp, #20]
 801b056:	3101      	adds	r1, #1
 801b058:	b289      	uxth	r1, r1
 801b05a:	9105      	str	r1, [sp, #20]
 801b05c:	e7df      	b.n	801b01e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801b05e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b062:	4611      	mov	r1, r2
 801b064:	795b      	ldrb	r3, [r3, #5]
 801b066:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801b06a:	4426      	add	r6, r4
 801b06c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801b06e:	4437      	add	r7, r6
 801b070:	2f00      	cmp	r7, #0
 801b072:	dd06      	ble.n	801b082 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801b074:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b078:	790f      	ldrb	r7, [r1, #4]
 801b07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b07e:	88c9      	ldrh	r1, [r1, #6]
 801b080:	e7f4      	b.n	801b06c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801b082:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801b086:	b29b      	uxth	r3, r3
 801b088:	e7c5      	b.n	801b016 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801b08a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b08c:	920a      	str	r2, [sp, #40]	@ 0x28
 801b08e:	4601      	mov	r1, r0
 801b090:	4662      	mov	r2, ip
 801b092:	461e      	mov	r6, r3
 801b094:	e78e      	b.n	801afb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801b096:	1b73      	subs	r3, r6, r5
 801b098:	eb02 0c05 	add.w	ip, r2, r5
 801b09c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801b0a0:	b29b      	uxth	r3, r3
 801b0a2:	fa1f fc8c 	uxth.w	ip, ip
 801b0a6:	2500      	movs	r5, #0
 801b0a8:	9a08      	ldr	r2, [sp, #32]
 801b0aa:	4542      	cmp	r2, r8
 801b0ac:	d88d      	bhi.n	801afca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801b0ae:	4601      	mov	r1, r0
 801b0b0:	e74f      	b.n	801af52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801b0b2:	428e      	cmp	r6, r1
 801b0b4:	bf2b      	itete	cs
 801b0b6:	468e      	movcs	lr, r1
 801b0b8:	46b6      	movcc	lr, r6
 801b0ba:	1a73      	subcs	r3, r6, r1
 801b0bc:	1b88      	subcc	r0, r1, r6
 801b0be:	eb02 0c0e 	add.w	ip, r2, lr
 801b0c2:	bf2b      	itete	cs
 801b0c4:	4628      	movcs	r0, r5
 801b0c6:	462b      	movcc	r3, r5
 801b0c8:	b29b      	uxthcs	r3, r3
 801b0ca:	b280      	uxthcc	r0, r0
 801b0cc:	f108 0503 	add.w	r5, r8, #3
 801b0d0:	fa1f fc8c 	uxth.w	ip, ip
 801b0d4:	4562      	cmp	r2, ip
 801b0d6:	d06f      	beq.n	801b1b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801b0d8:	1c57      	adds	r7, r2, #1
 801b0da:	4422      	add	r2, r4
 801b0dc:	b2bf      	uxth	r7, r7
 801b0de:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801b0e2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801b0e4:	2704      	movs	r7, #4
 801b0e6:	46b9      	mov	r9, r7
 801b0e8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801b0ea:	fb19 7202 	smlabb	r2, r9, r2, r7
 801b0ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b0f0:	58bf      	ldr	r7, [r7, r2]
 801b0f2:	0e3a      	lsrs	r2, r7, #24
 801b0f4:	9209      	str	r2, [sp, #36]	@ 0x24
 801b0f6:	d016      	beq.n	801b126 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801b0f8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b0fc:	fa5f fa87 	uxtb.w	sl, r7
 801b100:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b104:	fa5f f289 	uxtb.w	r2, r9
 801b108:	9214      	str	r2, [sp, #80]	@ 0x50
 801b10a:	b2fa      	uxtb	r2, r7
 801b10c:	9215      	str	r2, [sp, #84]	@ 0x54
 801b10e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b110:	2aff      	cmp	r2, #255	@ 0xff
 801b112:	d10b      	bne.n	801b12c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801b114:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b116:	2aff      	cmp	r2, #255	@ 0xff
 801b118:	d108      	bne.n	801b12c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801b11a:	f805 ac03 	strb.w	sl, [r5, #-3]
 801b11e:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b122:	f805 7c01 	strb.w	r7, [r5, #-1]
 801b126:	3503      	adds	r5, #3
 801b128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b12a:	e7d3      	b.n	801b0d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801b12c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801b12e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b130:	437a      	muls	r2, r7
 801b132:	1c57      	adds	r7, r2, #1
 801b134:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801b138:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801b13c:	1212      	asrs	r2, r2, #8
 801b13e:	fa1f f982 	uxth.w	r9, r2
 801b142:	43d2      	mvns	r2, r2
 801b144:	fb1a fa09 	smulbb	sl, sl, r9
 801b148:	b2d2      	uxtb	r2, r2
 801b14a:	fb07 a702 	mla	r7, r7, r2, sl
 801b14e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b150:	b2bf      	uxth	r7, r7
 801b152:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b154:	f107 0a01 	add.w	sl, r7, #1
 801b158:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b15c:	fb12 fa09 	smulbb	sl, r2, r9
 801b160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b162:	123f      	asrs	r7, r7, #8
 801b164:	f805 7c03 	strb.w	r7, [r5, #-3]
 801b168:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801b16c:	fb07 aa02 	mla	sl, r7, r2, sl
 801b170:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b172:	fb12 f909 	smulbb	r9, r2, r9
 801b176:	fa1f fa8a 	uxth.w	sl, sl
 801b17a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b17c:	f10a 0701 	add.w	r7, sl, #1
 801b180:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b184:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801b188:	fb07 9902 	mla	r9, r7, r2, r9
 801b18c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b190:	fa1f f989 	uxth.w	r9, r9
 801b194:	f805 ac02 	strb.w	sl, [r5, #-2]
 801b198:	f109 0201 	add.w	r2, r9, #1
 801b19c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b1a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b1a4:	f805 9c01 	strb.w	r9, [r5, #-1]
 801b1a8:	e7bd      	b.n	801b126 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801b1aa:	bf00      	nop
 801b1ac:	2402daac 	.word	0x2402daac
 801b1b0:	2402daa6 	.word	0x2402daa6
 801b1b4:	fffff7fb 	.word	0xfffff7fb
 801b1b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b1bc:	428e      	cmp	r6, r1
 801b1be:	44f0      	add	r8, lr
 801b1c0:	f4ff af71 	bcc.w	801b0a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801b1c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b1c6:	9904      	ldr	r1, [sp, #16]
 801b1c8:	8812      	ldrh	r2, [r2, #0]
 801b1ca:	1a52      	subs	r2, r2, r1
 801b1cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b1ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b1d2:	4490      	add	r8, r2
 801b1d4:	9a07      	ldr	r2, [sp, #28]
 801b1d6:	3201      	adds	r2, #1
 801b1d8:	428a      	cmp	r2, r1
 801b1da:	9207      	str	r2, [sp, #28]
 801b1dc:	d111      	bne.n	801b202 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801b1de:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801b1e2:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801b1e6:	9b04      	ldr	r3, [sp, #16]
 801b1e8:	eba5 050c 	sub.w	r5, r5, ip
 801b1ec:	b2ad      	uxth	r5, r5
 801b1ee:	2d00      	cmp	r5, #0
 801b1f0:	bf08      	it	eq
 801b1f2:	4619      	moveq	r1, r3
 801b1f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b1f6:	bf18      	it	ne
 801b1f8:	2100      	movne	r1, #0
 801b1fa:	3301      	adds	r3, #1
 801b1fc:	b289      	uxth	r1, r1
 801b1fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b200:	e69e      	b.n	801af40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801b202:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801b206:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801b20a:	1a2d      	subs	r5, r5, r0
 801b20c:	b2ad      	uxth	r5, r5
 801b20e:	2d00      	cmp	r5, #0
 801b210:	bf18      	it	ne
 801b212:	2000      	movne	r0, #0
 801b214:	e748      	b.n	801b0a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801b216:	4b04      	ldr	r3, [pc, #16]	@ (801b228 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801b218:	6818      	ldr	r0, [r3, #0]
 801b21a:	6803      	ldr	r3, [r0, #0]
 801b21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b21e:	4798      	blx	r3
 801b220:	b01d      	add	sp, #116	@ 0x74
 801b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b226:	bf00      	nop
 801b228:	2402daac 	.word	0x2402daac

0801b22c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b230:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b234:	9c06      	ldr	r4, [sp, #24]
 801b236:	2800      	cmp	r0, #0
 801b238:	d06e      	beq.n	801b318 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b23a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b23e:	2d00      	cmp	r5, #0
 801b240:	dd6a      	ble.n	801b318 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b242:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b246:	f1bc 0f00 	cmp.w	ip, #0
 801b24a:	dd65      	ble.n	801b318 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b24c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b250:	28ff      	cmp	r0, #255	@ 0xff
 801b252:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b256:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b25a:	fb02 3306 	mla	r3, r2, r6, r3
 801b25e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b262:	b2e4      	uxtb	r4, r4
 801b264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b268:	4419      	add	r1, r3
 801b26a:	fb02 f30c 	mul.w	r3, r2, ip
 801b26e:	eba2 0205 	sub.w	r2, r2, r5
 801b272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b27a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b27e:	440b      	add	r3, r1
 801b280:	d03e      	beq.n	801b300 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b282:	fa1f fc80 	uxth.w	ip, r0
 801b286:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801b28a:	fb06 f60c 	mul.w	r6, r6, ip
 801b28e:	b280      	uxth	r0, r0
 801b290:	fb07 f70c 	mul.w	r7, r7, ip
 801b294:	fb04 f40c 	mul.w	r4, r4, ip
 801b298:	4299      	cmp	r1, r3
 801b29a:	d23d      	bcs.n	801b318 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b29c:	eb01 0c05 	add.w	ip, r1, r5
 801b2a0:	458c      	cmp	ip, r1
 801b2a2:	f101 0e03 	add.w	lr, r1, #3
 801b2a6:	d928      	bls.n	801b2fa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801b2a8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b2ac:	fb11 f100 	smulbb	r1, r1, r0
 801b2b0:	4421      	add	r1, r4
 801b2b2:	b289      	uxth	r1, r1
 801b2b4:	f101 0801 	add.w	r8, r1, #1
 801b2b8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b2bc:	1209      	asrs	r1, r1, #8
 801b2be:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b2c2:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801b2c6:	fb11 f100 	smulbb	r1, r1, r0
 801b2ca:	4439      	add	r1, r7
 801b2cc:	b289      	uxth	r1, r1
 801b2ce:	f101 0801 	add.w	r8, r1, #1
 801b2d2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b2d6:	1209      	asrs	r1, r1, #8
 801b2d8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b2dc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b2e0:	fb11 f100 	smulbb	r1, r1, r0
 801b2e4:	4431      	add	r1, r6
 801b2e6:	b289      	uxth	r1, r1
 801b2e8:	f101 0801 	add.w	r8, r1, #1
 801b2ec:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b2f0:	1209      	asrs	r1, r1, #8
 801b2f2:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801b2f6:	4671      	mov	r1, lr
 801b2f8:	e7d2      	b.n	801b2a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801b2fa:	4411      	add	r1, r2
 801b2fc:	e7cc      	b.n	801b298 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801b2fe:	4411      	add	r1, r2
 801b300:	4299      	cmp	r1, r3
 801b302:	d209      	bcs.n	801b318 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b304:	1948      	adds	r0, r1, r5
 801b306:	4281      	cmp	r1, r0
 801b308:	d2f9      	bcs.n	801b2fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801b30a:	700c      	strb	r4, [r1, #0]
 801b30c:	3103      	adds	r1, #3
 801b30e:	f801 7c02 	strb.w	r7, [r1, #-2]
 801b312:	f801 6c01 	strb.w	r6, [r1, #-1]
 801b316:	e7f6      	b.n	801b306 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b31c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b320:	b093      	sub	sp, #76	@ 0x4c
 801b322:	4699      	mov	r9, r3
 801b324:	4617      	mov	r7, r2
 801b326:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b32a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801b32e:	4604      	mov	r4, r0
 801b330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b334:	a80c      	add	r0, sp, #48	@ 0x30
 801b336:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801b33a:	460d      	mov	r5, r1
 801b33c:	4649      	mov	r1, r9
 801b33e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b342:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b346:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801b34a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801b34e:	f7f3 f849 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 801b352:	4639      	mov	r1, r7
 801b354:	a80c      	add	r0, sp, #48	@ 0x30
 801b356:	f7f3 f845 	bl	800e3e4 <_ZN8touchgfx4RectaNERKS0_>
 801b35a:	4b78      	ldr	r3, [pc, #480]	@ (801b53c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b35c:	8818      	ldrh	r0, [r3, #0]
 801b35e:	4b78      	ldr	r3, [pc, #480]	@ (801b540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801b360:	b202      	sxth	r2, r0
 801b362:	8819      	ldrh	r1, [r3, #0]
 801b364:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b368:	b20f      	sxth	r7, r1
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	da07      	bge.n	801b37e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801b36e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801b372:	4463      	add	r3, ip
 801b374:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b378:	2300      	movs	r3, #0
 801b37a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b37e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b382:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801b386:	1ad2      	subs	r2, r2, r3
 801b388:	4594      	cmp	ip, r2
 801b38a:	bfc4      	itt	gt
 801b38c:	1ac2      	subgt	r2, r0, r3
 801b38e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801b392:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b396:	2a00      	cmp	r2, #0
 801b398:	da07      	bge.n	801b3aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801b39a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801b39e:	4462      	add	r2, ip
 801b3a0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801b3aa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b3ae:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801b3b2:	1abf      	subs	r7, r7, r2
 801b3b4:	45bc      	cmp	ip, r7
 801b3b6:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801b548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801b3ba:	bfc8      	it	gt
 801b3bc:	1a8f      	subgt	r7, r1, r2
 801b3be:	f89c c000 	ldrb.w	ip, [ip]
 801b3c2:	bfc8      	it	gt
 801b3c4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801b3c8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801b3cc:	f1bc 0f00 	cmp.w	ip, #0
 801b3d0:	d176      	bne.n	801b4c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801b3d2:	4287      	cmp	r7, r0
 801b3d4:	bf14      	ite	ne
 801b3d6:	2100      	movne	r1, #0
 801b3d8:	2101      	moveq	r1, #1
 801b3da:	2f00      	cmp	r7, #0
 801b3dc:	9107      	str	r1, [sp, #28]
 801b3de:	dd73      	ble.n	801b4c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b3e0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801b3e4:	2900      	cmp	r1, #0
 801b3e6:	9104      	str	r1, [sp, #16]
 801b3e8:	dd6e      	ble.n	801b4c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b3ea:	f8b9 1000 	ldrh.w	r1, [r9]
 801b3ee:	a80e      	add	r0, sp, #56	@ 0x38
 801b3f0:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801b3f4:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801b3f8:	1a5b      	subs	r3, r3, r1
 801b3fa:	a910      	add	r1, sp, #64	@ 0x40
 801b3fc:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b400:	b21b      	sxth	r3, r3
 801b402:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801b406:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b54c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b40a:	9305      	str	r3, [sp, #20]
 801b40c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801b410:	1ad2      	subs	r2, r2, r3
 801b412:	b213      	sxth	r3, r2
 801b414:	9306      	str	r3, [sp, #24]
 801b416:	9b05      	ldr	r3, [sp, #20]
 801b418:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b41c:	9b06      	ldr	r3, [sp, #24]
 801b41e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b422:	9b04      	ldr	r3, [sp, #16]
 801b424:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b428:	2300      	movs	r3, #0
 801b42a:	9310      	str	r3, [sp, #64]	@ 0x40
 801b42c:	f7f8 ffde 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b430:	4640      	mov	r0, r8
 801b432:	f7f8 ffb3 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b436:	a810      	add	r0, sp, #64	@ 0x40
 801b438:	f7f8 ffb0 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b43c:	4b41      	ldr	r3, [pc, #260]	@ (801b544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801b43e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b442:	4628      	mov	r0, r5
 801b444:	881b      	ldrh	r3, [r3, #0]
 801b446:	9308      	str	r3, [sp, #32]
 801b448:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b44c:	b21b      	sxth	r3, r3
 801b44e:	9303      	str	r3, [sp, #12]
 801b450:	682b      	ldr	r3, [r5, #0]
 801b452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b454:	4798      	blx	r3
 801b456:	9a03      	ldr	r2, [sp, #12]
 801b458:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801b45c:	4681      	mov	r9, r0
 801b45e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b462:	fb13 f302 	smulbb	r3, r3, r2
 801b466:	2203      	movs	r2, #3
 801b468:	f8da 0000 	ldr.w	r0, [sl]
 801b46c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b470:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801b472:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b474:	441d      	add	r5, r3
 801b476:	6803      	ldr	r3, [r0, #0]
 801b478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b47a:	4798      	blx	r3
 801b47c:	9009      	str	r0, [sp, #36]	@ 0x24
 801b47e:	f8da 0000 	ldr.w	r0, [sl]
 801b482:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801b486:	6803      	ldr	r3, [r0, #0]
 801b488:	910a      	str	r1, [sp, #40]	@ 0x28
 801b48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b48c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801b490:	4798      	blx	r3
 801b492:	f010 0f01 	tst.w	r0, #1
 801b496:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801b49a:	d01e      	beq.n	801b4da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801b49c:	f8da 0000 	ldr.w	r0, [sl]
 801b4a0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b4a4:	6803      	ldr	r3, [r0, #0]
 801b4a6:	9200      	str	r2, [sp, #0]
 801b4a8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b4b0:	47b0      	blx	r6
 801b4b2:	9b05      	ldr	r3, [sp, #20]
 801b4b4:	80a7      	strh	r7, [r4, #4]
 801b4b6:	8023      	strh	r3, [r4, #0]
 801b4b8:	9b06      	ldr	r3, [sp, #24]
 801b4ba:	8063      	strh	r3, [r4, #2]
 801b4bc:	9b04      	ldr	r3, [sp, #16]
 801b4be:	e007      	b.n	801b4d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801b4c0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801b4c4:	4288      	cmp	r0, r1
 801b4c6:	e785      	b.n	801b3d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	8023      	strh	r3, [r4, #0]
 801b4cc:	8063      	strh	r3, [r4, #2]
 801b4ce:	80a3      	strh	r3, [r4, #4]
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	80e3      	strh	r3, [r4, #6]
 801b4d4:	b013      	add	sp, #76	@ 0x4c
 801b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4da:	fb09 f606 	mul.w	r6, r9, r6
 801b4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4e0:	fb11 6602 	smlabb	r6, r1, r2, r6
 801b4e4:	9a07      	ldr	r2, [sp, #28]
 801b4e6:	4433      	add	r3, r6
 801b4e8:	461e      	mov	r6, r3
 801b4ea:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b4ee:	b16a      	cbz	r2, 801b50c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b4f0:	9a08      	ldr	r2, [sp, #32]
 801b4f2:	4593      	cmp	fp, r2
 801b4f4:	d10a      	bne.n	801b50c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b4f6:	f8da 0000 	ldr.w	r0, [sl]
 801b4fa:	fb09 f303 	mul.w	r3, r9, r3
 801b4fe:	4629      	mov	r1, r5
 801b500:	6802      	ldr	r2, [r0, #0]
 801b502:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801b506:	4632      	mov	r2, r6
 801b508:	47d0      	blx	sl
 801b50a:	e7d2      	b.n	801b4b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b50c:	9a03      	ldr	r2, [sp, #12]
 801b50e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801b54c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b512:	fb02 5803 	mla	r8, r2, r3, r5
 801b516:	4545      	cmp	r5, r8
 801b518:	d2cb      	bcs.n	801b4b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b51a:	f8db 0000 	ldr.w	r0, [fp]
 801b51e:	4629      	mov	r1, r5
 801b520:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b524:	6802      	ldr	r2, [r0, #0]
 801b526:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b52a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801b52e:	4632      	mov	r2, r6
 801b530:	47d0      	blx	sl
 801b532:	9b03      	ldr	r3, [sp, #12]
 801b534:	444e      	add	r6, r9
 801b536:	441d      	add	r5, r3
 801b538:	e7ed      	b.n	801b516 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801b53a:	bf00      	nop
 801b53c:	2402daa0 	.word	0x2402daa0
 801b540:	2402daa2 	.word	0x2402daa2
 801b544:	2402daa6 	.word	0x2402daa6
 801b548:	2402daa4 	.word	0x2402daa4
 801b54c:	2402daac 	.word	0x2402daac

0801b550 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b550:	2200      	movs	r2, #0
 801b552:	490e      	ldr	r1, [pc, #56]	@ (801b58c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801b554:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801b558:	6001      	str	r1, [r0, #0]
 801b55a:	6642      	str	r2, [r0, #100]	@ 0x64
 801b55c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b560:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b564:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801b568:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801b56c:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801b570:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801b574:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801b578:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801b57c:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801b580:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801b584:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801b588:	4770      	bx	lr
 801b58a:	bf00      	nop
 801b58c:	08025d50 	.word	0x08025d50

0801b590 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b594:	b091      	sub	sp, #68	@ 0x44
 801b596:	4607      	mov	r7, r0
 801b598:	4688      	mov	r8, r1
 801b59a:	6810      	ldr	r0, [r2, #0]
 801b59c:	6851      	ldr	r1, [r2, #4]
 801b59e:	ac0c      	add	r4, sp, #48	@ 0x30
 801b5a0:	4616      	mov	r6, r2
 801b5a2:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801b5a6:	4d64      	ldr	r5, [pc, #400]	@ (801b738 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b5a8:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801b73c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b5ac:	c403      	stmia	r4!, {r0, r1}
 801b5ae:	6818      	ldr	r0, [r3, #0]
 801b5b0:	ac0e      	add	r4, sp, #56	@ 0x38
 801b5b2:	6859      	ldr	r1, [r3, #4]
 801b5b4:	c403      	stmia	r4!, {r0, r1}
 801b5b6:	a80c      	add	r0, sp, #48	@ 0x30
 801b5b8:	f7f8 fef0 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b5bc:	4631      	mov	r1, r6
 801b5be:	a80e      	add	r0, sp, #56	@ 0x38
 801b5c0:	f7f8 ff14 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b5c4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b5c8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b5cc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b5d0:	6828      	ldr	r0, [r5, #0]
 801b5d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b5d6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801b5da:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801b5de:	440f      	add	r7, r1
 801b5e0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b5e4:	440a      	add	r2, r1
 801b5e6:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b5ea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801b5ee:	4413      	add	r3, r2
 801b5f0:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b5f4:	6803      	ldr	r3, [r0, #0]
 801b5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b5f8:	4798      	blx	r3
 801b5fa:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801b5fe:	6828      	ldr	r0, [r5, #0]
 801b600:	d01f      	beq.n	801b642 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801b602:	2201      	movs	r2, #1
 801b604:	2500      	movs	r5, #0
 801b606:	6801      	ldr	r1, [r0, #0]
 801b608:	b2a4      	uxth	r4, r4
 801b60a:	b2b6      	uxth	r6, r6
 801b60c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b610:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801b614:	250b      	movs	r5, #11
 801b616:	9507      	str	r5, [sp, #28]
 801b618:	f8ba 5000 	ldrh.w	r5, [sl]
 801b61c:	f8cd 9010 	str.w	r9, [sp, #16]
 801b620:	9602      	str	r6, [sp, #8]
 801b622:	9401      	str	r4, [sp, #4]
 801b624:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801b628:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801b62c:	9203      	str	r2, [sp, #12]
 801b62e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b632:	9200      	str	r2, [sp, #0]
 801b634:	4642      	mov	r2, r8
 801b636:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801b638:	4639      	mov	r1, r7
 801b63a:	47a0      	blx	r4
 801b63c:	b011      	add	sp, #68	@ 0x44
 801b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b642:	6803      	ldr	r3, [r0, #0]
 801b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b646:	4798      	blx	r3
 801b648:	f8ba 5000 	ldrh.w	r5, [sl]
 801b64c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b650:	f04f 0e04 	mov.w	lr, #4
 801b654:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b658:	436e      	muls	r6, r5
 801b65a:	fb05 2303 	mla	r3, r5, r3, r2
 801b65e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b662:	1b2d      	subs	r5, r5, r4
 801b664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b66c:	4418      	add	r0, r3
 801b66e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801b672:	1982      	adds	r2, r0, r6
 801b674:	1b1b      	subs	r3, r3, r4
 801b676:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b67a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b67c:	4290      	cmp	r0, r2
 801b67e:	d254      	bcs.n	801b72a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b680:	eb00 0a04 	add.w	sl, r0, r4
 801b684:	4550      	cmp	r0, sl
 801b686:	d24c      	bcs.n	801b722 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801b688:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b68c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801b690:	eb08 0c01 	add.w	ip, r8, r1
 801b694:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b698:	b173      	cbz	r3, 801b6b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b69a:	2bff      	cmp	r3, #255	@ 0xff
 801b69c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801b6a0:	d10c      	bne.n	801b6bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b6a2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801b6a6:	d109      	bne.n	801b6bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b6a8:	f880 b000 	strb.w	fp, [r0]
 801b6ac:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b6b0:	7043      	strb	r3, [r0, #1]
 801b6b2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b6b6:	7083      	strb	r3, [r0, #2]
 801b6b8:	3003      	adds	r0, #3
 801b6ba:	e7e3      	b.n	801b684 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801b6bc:	fb09 f103 	mul.w	r1, r9, r3
 801b6c0:	1c4b      	adds	r3, r1, #1
 801b6c2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b6c6:	7801      	ldrb	r1, [r0, #0]
 801b6c8:	121b      	asrs	r3, r3, #8
 801b6ca:	b29e      	uxth	r6, r3
 801b6cc:	43db      	mvns	r3, r3
 801b6ce:	fb1b fb06 	smulbb	fp, fp, r6
 801b6d2:	b2db      	uxtb	r3, r3
 801b6d4:	fb01 b103 	mla	r1, r1, r3, fp
 801b6d8:	b289      	uxth	r1, r1
 801b6da:	f101 0b01 	add.w	fp, r1, #1
 801b6de:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b6e2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b6e6:	fb1b fb03 	smulbb	fp, fp, r3
 801b6ea:	1209      	asrs	r1, r1, #8
 801b6ec:	7001      	strb	r1, [r0, #0]
 801b6ee:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b6f2:	fb01 b106 	mla	r1, r1, r6, fp
 801b6f6:	b289      	uxth	r1, r1
 801b6f8:	f101 0b01 	add.w	fp, r1, #1
 801b6fc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b700:	1209      	asrs	r1, r1, #8
 801b702:	7041      	strb	r1, [r0, #1]
 801b704:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801b708:	f890 c002 	ldrb.w	ip, [r0, #2]
 801b70c:	fb1c f303 	smulbb	r3, ip, r3
 801b710:	fb01 3606 	mla	r6, r1, r6, r3
 801b714:	b2b6      	uxth	r6, r6
 801b716:	1c73      	adds	r3, r6, #1
 801b718:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b71c:	1236      	asrs	r6, r6, #8
 801b71e:	7086      	strb	r6, [r0, #2]
 801b720:	e7ca      	b.n	801b6b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b724:	4428      	add	r0, r5
 801b726:	441f      	add	r7, r3
 801b728:	e7a8      	b.n	801b67c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801b72a:	4b03      	ldr	r3, [pc, #12]	@ (801b738 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b72c:	6818      	ldr	r0, [r3, #0]
 801b72e:	6803      	ldr	r3, [r0, #0]
 801b730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b732:	4798      	blx	r3
 801b734:	e782      	b.n	801b63c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801b736:	bf00      	nop
 801b738:	2402daac 	.word	0x2402daac
 801b73c:	2402daa6 	.word	0x2402daa6

0801b740 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b744:	b091      	sub	sp, #68	@ 0x44
 801b746:	4680      	mov	r8, r0
 801b748:	460e      	mov	r6, r1
 801b74a:	6810      	ldr	r0, [r2, #0]
 801b74c:	6851      	ldr	r1, [r2, #4]
 801b74e:	ad0c      	add	r5, sp, #48	@ 0x30
 801b750:	4614      	mov	r4, r2
 801b752:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801b756:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801b8f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801b75a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801b8f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b75e:	c503      	stmia	r5!, {r0, r1}
 801b760:	6818      	ldr	r0, [r3, #0]
 801b762:	ad0e      	add	r5, sp, #56	@ 0x38
 801b764:	6859      	ldr	r1, [r3, #4]
 801b766:	c503      	stmia	r5!, {r0, r1}
 801b768:	a80c      	add	r0, sp, #48	@ 0x30
 801b76a:	f7f8 fe17 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b76e:	4621      	mov	r1, r4
 801b770:	a80e      	add	r0, sp, #56	@ 0x38
 801b772:	f7f8 fe3b 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b776:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b77a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b77e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b782:	f8d9 0000 	ldr.w	r0, [r9]
 801b786:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b78a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801b78e:	eb08 0401 	add.w	r4, r8, r1
 801b792:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b796:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801b79a:	440a      	add	r2, r1
 801b79c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b7a0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801b7a4:	4413      	add	r3, r2
 801b7a6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b7aa:	6803      	ldr	r3, [r0, #0]
 801b7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b7ae:	4798      	blx	r3
 801b7b0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801b7b4:	f8d9 0000 	ldr.w	r0, [r9]
 801b7b8:	d022      	beq.n	801b800 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	f04f 0c01 	mov.w	ip, #1
 801b7c0:	6801      	ldr	r1, [r0, #0]
 801b7c2:	b2ad      	uxth	r5, r5
 801b7c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b7c8:	e9cd c208 	strd	ip, r2, [sp, #32]
 801b7cc:	f04f 0c0b 	mov.w	ip, #11
 801b7d0:	f8cd c01c 	str.w	ip, [sp, #28]
 801b7d4:	f8ba c000 	ldrh.w	ip, [sl]
 801b7d8:	9704      	str	r7, [sp, #16]
 801b7da:	9502      	str	r5, [sp, #8]
 801b7dc:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801b7e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801b7e4:	9203      	str	r2, [sp, #12]
 801b7e6:	fa1f f288 	uxth.w	r2, r8
 801b7ea:	9201      	str	r2, [sp, #4]
 801b7ec:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b7f0:	9200      	str	r2, [sp, #0]
 801b7f2:	4632      	mov	r2, r6
 801b7f4:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801b7f6:	4621      	mov	r1, r4
 801b7f8:	47a8      	blx	r5
 801b7fa:	b011      	add	sp, #68	@ 0x44
 801b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b800:	6803      	ldr	r3, [r0, #0]
 801b802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b804:	4798      	blx	r3
 801b806:	f8ba 2000 	ldrh.w	r2, [sl]
 801b80a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b80e:	f04f 0e03 	mov.w	lr, #3
 801b812:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801b816:	4355      	muls	r5, r2
 801b818:	fa1f fc87 	uxth.w	ip, r7
 801b81c:	fb02 1303 	mla	r3, r2, r3, r1
 801b820:	eba2 0208 	sub.w	r2, r2, r8
 801b824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b82c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b830:	4418      	add	r0, r3
 801b832:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b834:	1943      	adds	r3, r0, r5
 801b836:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801b83a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801b83e:	eba2 0208 	sub.w	r2, r2, r8
 801b842:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b846:	b2ad      	uxth	r5, r5
 801b848:	4298      	cmp	r0, r3
 801b84a:	d24a      	bcs.n	801b8e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801b84c:	eb00 0908 	add.w	r9, r0, r8
 801b850:	4621      	mov	r1, r4
 801b852:	4548      	cmp	r0, r9
 801b854:	460c      	mov	r4, r1
 801b856:	d240      	bcs.n	801b8da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b858:	f04f 0a04 	mov.w	sl, #4
 801b85c:	7824      	ldrb	r4, [r4, #0]
 801b85e:	2fff      	cmp	r7, #255	@ 0xff
 801b860:	f101 0101 	add.w	r1, r1, #1
 801b864:	fb1e a404 	smlabb	r4, lr, r4, sl
 801b868:	eb06 0a04 	add.w	sl, r6, r4
 801b86c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801b870:	d02b      	beq.n	801b8ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801b872:	7804      	ldrb	r4, [r0, #0]
 801b874:	fb14 f405 	smulbb	r4, r4, r5
 801b878:	fb0b 440c 	mla	r4, fp, ip, r4
 801b87c:	b2a4      	uxth	r4, r4
 801b87e:	f104 0b01 	add.w	fp, r4, #1
 801b882:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b886:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b88a:	fb1b fb05 	smulbb	fp, fp, r5
 801b88e:	1224      	asrs	r4, r4, #8
 801b890:	7004      	strb	r4, [r0, #0]
 801b892:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b896:	fb04 b40c 	mla	r4, r4, ip, fp
 801b89a:	b2a4      	uxth	r4, r4
 801b89c:	f104 0b01 	add.w	fp, r4, #1
 801b8a0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b8a4:	1224      	asrs	r4, r4, #8
 801b8a6:	7044      	strb	r4, [r0, #1]
 801b8a8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b8ac:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b8b0:	fb1a fa05 	smulbb	sl, sl, r5
 801b8b4:	fb04 a40c 	mla	r4, r4, ip, sl
 801b8b8:	b2a4      	uxth	r4, r4
 801b8ba:	f104 0a01 	add.w	sl, r4, #1
 801b8be:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b8c2:	1224      	asrs	r4, r4, #8
 801b8c4:	7084      	strb	r4, [r0, #2]
 801b8c6:	3003      	adds	r0, #3
 801b8c8:	e7c3      	b.n	801b852 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801b8ca:	f880 b000 	strb.w	fp, [r0]
 801b8ce:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b8d2:	7044      	strb	r4, [r0, #1]
 801b8d4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b8d8:	e7f4      	b.n	801b8c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801b8da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b8dc:	4420      	add	r0, r4
 801b8de:	188c      	adds	r4, r1, r2
 801b8e0:	e7b2      	b.n	801b848 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801b8e2:	4b03      	ldr	r3, [pc, #12]	@ (801b8f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801b8e4:	6818      	ldr	r0, [r3, #0]
 801b8e6:	6803      	ldr	r3, [r0, #0]
 801b8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8ea:	4798      	blx	r3
 801b8ec:	e785      	b.n	801b7fa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801b8ee:	bf00      	nop
 801b8f0:	2402daac 	.word	0x2402daac
 801b8f4:	2402daa6 	.word	0x2402daa6

0801b8f8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b8f8:	b4f0      	push	{r4, r5, r6, r7}
 801b8fa:	460c      	mov	r4, r1
 801b8fc:	4611      	mov	r1, r2
 801b8fe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b902:	461a      	mov	r2, r3
 801b904:	780f      	ldrb	r7, [r1, #0]
 801b906:	9b04      	ldr	r3, [sp, #16]
 801b908:	784e      	ldrb	r6, [r1, #1]
 801b90a:	b11f      	cbz	r7, 801b914 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801b90c:	2f01      	cmp	r7, #1
 801b90e:	d01d      	beq.n	801b94c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801b910:	bcf0      	pop	{r4, r5, r6, r7}
 801b912:	4770      	bx	lr
 801b914:	2e03      	cmp	r6, #3
 801b916:	d8fb      	bhi.n	801b910 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b918:	e8df f006 	tbb	[pc, r6]
 801b91c:	16140702 	.word	0x16140702
 801b920:	9504      	str	r5, [sp, #16]
 801b922:	4620      	mov	r0, r4
 801b924:	bcf0      	pop	{r4, r5, r6, r7}
 801b926:	f7ff be33 	b.w	801b590 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b92a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801b92c:	2800      	cmp	r0, #0
 801b92e:	d0ef      	beq.n	801b910 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b930:	6806      	ldr	r6, [r0, #0]
 801b932:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801b936:	68f5      	ldr	r5, [r6, #12]
 801b938:	4613      	mov	r3, r2
 801b93a:	46ac      	mov	ip, r5
 801b93c:	460a      	mov	r2, r1
 801b93e:	4621      	mov	r1, r4
 801b940:	bcf0      	pop	{r4, r5, r6, r7}
 801b942:	4760      	bx	ip
 801b944:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b946:	e7f1      	b.n	801b92c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801b948:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801b94a:	e7ef      	b.n	801b92c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801b94c:	2e03      	cmp	r6, #3
 801b94e:	d8df      	bhi.n	801b910 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b950:	e8df f006 	tbb	[pc, r6]
 801b954:	110f0702 	.word	0x110f0702
 801b958:	9504      	str	r5, [sp, #16]
 801b95a:	4620      	mov	r0, r4
 801b95c:	bcf0      	pop	{r4, r5, r6, r7}
 801b95e:	f7ff beef 	b.w	801b740 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b962:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801b964:	2800      	cmp	r0, #0
 801b966:	d0d3      	beq.n	801b910 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b968:	6806      	ldr	r6, [r0, #0]
 801b96a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801b96e:	68b5      	ldr	r5, [r6, #8]
 801b970:	e7e2      	b.n	801b938 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801b972:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b974:	e7f6      	b.n	801b964 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801b976:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801b978:	e7f4      	b.n	801b964 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801b97c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801b97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b980:	4605      	mov	r5, r0
 801b982:	b08f      	sub	sp, #60	@ 0x3c
 801b984:	460c      	mov	r4, r1
 801b986:	461f      	mov	r7, r3
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d052      	beq.n	801ba32 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b98c:	6808      	ldr	r0, [r1, #0]
 801b98e:	ab0a      	add	r3, sp, #40	@ 0x28
 801b990:	6849      	ldr	r1, [r1, #4]
 801b992:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801bb5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801b996:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801bb60 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801b99a:	c303      	stmia	r3!, {r0, r1}
 801b99c:	6810      	ldr	r0, [r2, #0]
 801b99e:	ab0c      	add	r3, sp, #48	@ 0x30
 801b9a0:	6851      	ldr	r1, [r2, #4]
 801b9a2:	c303      	stmia	r3!, {r0, r1}
 801b9a4:	a80a      	add	r0, sp, #40	@ 0x28
 801b9a6:	f7f8 fcf9 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b9aa:	4621      	mov	r1, r4
 801b9ac:	a80c      	add	r0, sp, #48	@ 0x30
 801b9ae:	f7f8 fd1d 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b9b2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801b9b6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801b9ba:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b9be:	f8d8 0000 	ldr.w	r0, [r8]
 801b9c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b9c6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801b9ca:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801b9ce:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801b9d2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801b9d6:	440a      	add	r2, r1
 801b9d8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b9dc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801b9e0:	4413      	add	r3, r2
 801b9e2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b9e6:	6803      	ldr	r3, [r0, #0]
 801b9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b9ea:	4798      	blx	r3
 801b9ec:	2fff      	cmp	r7, #255	@ 0xff
 801b9ee:	d023      	beq.n	801ba38 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801b9f0:	f010 0f04 	tst.w	r0, #4
 801b9f4:	f8d8 0000 	ldr.w	r0, [r8]
 801b9f8:	d021      	beq.n	801ba3e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801b9fa:	2100      	movs	r1, #0
 801b9fc:	f04f 0e01 	mov.w	lr, #1
 801ba00:	f8d0 c000 	ldr.w	ip, [r0]
 801ba04:	b2a4      	uxth	r4, r4
 801ba06:	9106      	str	r1, [sp, #24]
 801ba08:	b2b6      	uxth	r6, r6
 801ba0a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801ba0e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801ba12:	e9cd e107 	strd	lr, r1, [sp, #28]
 801ba16:	f8b9 e000 	ldrh.w	lr, [r9]
 801ba1a:	9703      	str	r7, [sp, #12]
 801ba1c:	9401      	str	r4, [sp, #4]
 801ba1e:	9600      	str	r6, [sp, #0]
 801ba20:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801ba24:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ba28:	9102      	str	r1, [sp, #8]
 801ba2a:	4629      	mov	r1, r5
 801ba2c:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801ba30:	47a0      	blx	r4
 801ba32:	b00f      	add	sp, #60	@ 0x3c
 801ba34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba38:	f010 0f01 	tst.w	r0, #1
 801ba3c:	e7da      	b.n	801b9f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801ba3e:	6803      	ldr	r3, [r0, #0]
 801ba40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba42:	4798      	blx	r3
 801ba44:	f8b9 1000 	ldrh.w	r1, [r9]
 801ba48:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ba4c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801ba50:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801ba54:	434c      	muls	r4, r1
 801ba56:	2fff      	cmp	r7, #255	@ 0xff
 801ba58:	fb01 2303 	mla	r3, r1, r3, r2
 801ba5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba60:	eba1 0106 	sub.w	r1, r1, r6
 801ba64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ba6c:	4418      	add	r0, r3
 801ba6e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ba72:	eba3 0606 	sub.w	r6, r3, r6
 801ba76:	4404      	add	r4, r0
 801ba78:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801ba7c:	d04a      	beq.n	801bb14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801ba7e:	43fa      	mvns	r2, r7
 801ba80:	b2bb      	uxth	r3, r7
 801ba82:	b2d7      	uxtb	r7, r2
 801ba84:	42a0      	cmp	r0, r4
 801ba86:	d263      	bcs.n	801bb50 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801ba88:	eb00 0e0c 	add.w	lr, r0, ip
 801ba8c:	4586      	cmp	lr, r0
 801ba8e:	f100 0803 	add.w	r8, r0, #3
 801ba92:	d93a      	bls.n	801bb0a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801ba94:	f835 2b02 	ldrh.w	r2, [r5], #2
 801ba98:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801ba9c:	00d0      	lsls	r0, r2, #3
 801ba9e:	fb19 f907 	smulbb	r9, r9, r7
 801baa2:	b2c0      	uxtb	r0, r0
 801baa4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801baa8:	fb00 9003 	mla	r0, r0, r3, r9
 801baac:	b280      	uxth	r0, r0
 801baae:	f100 0901 	add.w	r9, r0, #1
 801bab2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bab6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801baba:	fb19 f907 	smulbb	r9, r9, r7
 801babe:	1200      	asrs	r0, r0, #8
 801bac0:	f808 0c03 	strb.w	r0, [r8, #-3]
 801bac4:	10d0      	asrs	r0, r2, #3
 801bac6:	1212      	asrs	r2, r2, #8
 801bac8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801bacc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801bad0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801bad4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bad8:	fb00 9003 	mla	r0, r0, r3, r9
 801badc:	b280      	uxth	r0, r0
 801bade:	f100 0901 	add.w	r9, r0, #1
 801bae2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bae6:	1200      	asrs	r0, r0, #8
 801bae8:	f808 0c02 	strb.w	r0, [r8, #-2]
 801baec:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801baf0:	fb10 f007 	smulbb	r0, r0, r7
 801baf4:	fb02 0203 	mla	r2, r2, r3, r0
 801baf8:	b292      	uxth	r2, r2
 801bafa:	1c50      	adds	r0, r2, #1
 801bafc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bb00:	4640      	mov	r0, r8
 801bb02:	1212      	asrs	r2, r2, #8
 801bb04:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bb08:	e7c0      	b.n	801ba8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801bb0a:	4408      	add	r0, r1
 801bb0c:	4435      	add	r5, r6
 801bb0e:	e7b9      	b.n	801ba84 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801bb10:	4408      	add	r0, r1
 801bb12:	4435      	add	r5, r6
 801bb14:	42a0      	cmp	r0, r4
 801bb16:	d21b      	bcs.n	801bb50 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801bb18:	eb00 070c 	add.w	r7, r0, ip
 801bb1c:	42b8      	cmp	r0, r7
 801bb1e:	d2f7      	bcs.n	801bb10 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801bb20:	f835 3b02 	ldrh.w	r3, [r5], #2
 801bb24:	3003      	adds	r0, #3
 801bb26:	00da      	lsls	r2, r3, #3
 801bb28:	b2d2      	uxtb	r2, r2
 801bb2a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bb2e:	f800 2c03 	strb.w	r2, [r0, #-3]
 801bb32:	10da      	asrs	r2, r3, #3
 801bb34:	121b      	asrs	r3, r3, #8
 801bb36:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801bb3a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801bb3e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801bb42:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801bb46:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bb4a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bb4e:	e7e5      	b.n	801bb1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801bb50:	4b02      	ldr	r3, [pc, #8]	@ (801bb5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801bb52:	6818      	ldr	r0, [r3, #0]
 801bb54:	6803      	ldr	r3, [r0, #0]
 801bb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb58:	4798      	blx	r3
 801bb5a:	e76a      	b.n	801ba32 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bb5c:	2402daac 	.word	0x2402daac
 801bb60:	2402daa6 	.word	0x2402daa6

0801bb64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb68:	b08a      	sub	sp, #40	@ 0x28
 801bb6a:	460d      	mov	r5, r1
 801bb6c:	4604      	mov	r4, r0
 801bb6e:	461e      	mov	r6, r3
 801bb70:	6808      	ldr	r0, [r1, #0]
 801bb72:	ab06      	add	r3, sp, #24
 801bb74:	6849      	ldr	r1, [r1, #4]
 801bb76:	4f5d      	ldr	r7, [pc, #372]	@ (801bcec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801bb78:	c303      	stmia	r3!, {r0, r1}
 801bb7a:	6810      	ldr	r0, [r2, #0]
 801bb7c:	ab08      	add	r3, sp, #32
 801bb7e:	6851      	ldr	r1, [r2, #4]
 801bb80:	c303      	stmia	r3!, {r0, r1}
 801bb82:	a806      	add	r0, sp, #24
 801bb84:	f7f8 fc0a 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb88:	4629      	mov	r1, r5
 801bb8a:	a808      	add	r0, sp, #32
 801bb8c:	f7f8 fc2e 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb90:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bb94:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bb98:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bb9c:	6838      	ldr	r0, [r7, #0]
 801bb9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bba2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801bba6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801bbaa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bbae:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bbb2:	440a      	add	r2, r1
 801bbb4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bbb8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bbc2:	6803      	ldr	r3, [r0, #0]
 801bbc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bbc6:	4798      	blx	r3
 801bbc8:	2eff      	cmp	r6, #255	@ 0xff
 801bbca:	d119      	bne.n	801bc00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801bbcc:	f010 0f20 	tst.w	r0, #32
 801bbd0:	6838      	ldr	r0, [r7, #0]
 801bbd2:	d018      	beq.n	801bc06 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801bbd4:	b2ad      	uxth	r5, r5
 801bbd6:	2700      	movs	r7, #0
 801bbd8:	6801      	ldr	r1, [r0, #0]
 801bbda:	9501      	str	r5, [sp, #4]
 801bbdc:	fa1f f588 	uxth.w	r5, r8
 801bbe0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801bbe4:	9500      	str	r5, [sp, #0]
 801bbe6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bbea:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801bbee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bbf2:	9602      	str	r6, [sp, #8]
 801bbf4:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801bbf6:	4621      	mov	r1, r4
 801bbf8:	47a8      	blx	r5
 801bbfa:	b00a      	add	sp, #40	@ 0x28
 801bbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc00:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801bc04:	e7e4      	b.n	801bbd0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801bc06:	6803      	ldr	r3, [r0, #0]
 801bc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc0a:	4798      	blx	r3
 801bc0c:	4b38      	ldr	r3, [pc, #224]	@ (801bcf0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801bc0e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bc12:	f8b3 c000 	ldrh.w	ip, [r3]
 801bc16:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bc1a:	fb0c f505 	mul.w	r5, ip, r5
 801bc1e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801bc22:	fb0c 2303 	mla	r3, ip, r3, r2
 801bc26:	ebac 0c08 	sub.w	ip, ip, r8
 801bc2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc2e:	ebae 0e08 	sub.w	lr, lr, r8
 801bc32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc36:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bc3a:	4418      	add	r0, r3
 801bc3c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801bc40:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801bc44:	4405      	add	r5, r0
 801bc46:	42a8      	cmp	r0, r5
 801bc48:	d24a      	bcs.n	801bce0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801bc4a:	eb00 0803 	add.w	r8, r0, r3
 801bc4e:	4540      	cmp	r0, r8
 801bc50:	d243      	bcs.n	801bcda <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801bc52:	78e2      	ldrb	r2, [r4, #3]
 801bc54:	b15a      	cbz	r2, 801bc6e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801bc56:	2aff      	cmp	r2, #255	@ 0xff
 801bc58:	f894 9000 	ldrb.w	r9, [r4]
 801bc5c:	d10a      	bne.n	801bc74 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801bc5e:	2eff      	cmp	r6, #255	@ 0xff
 801bc60:	d108      	bne.n	801bc74 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801bc62:	f880 9000 	strb.w	r9, [r0]
 801bc66:	7862      	ldrb	r2, [r4, #1]
 801bc68:	7042      	strb	r2, [r0, #1]
 801bc6a:	78a2      	ldrb	r2, [r4, #2]
 801bc6c:	7082      	strb	r2, [r0, #2]
 801bc6e:	3003      	adds	r0, #3
 801bc70:	3404      	adds	r4, #4
 801bc72:	e7ec      	b.n	801bc4e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801bc74:	4372      	muls	r2, r6
 801bc76:	1c51      	adds	r1, r2, #1
 801bc78:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801bc7c:	1209      	asrs	r1, r1, #8
 801bc7e:	fa1f fa81 	uxth.w	sl, r1
 801bc82:	43c9      	mvns	r1, r1
 801bc84:	fb19 f90a 	smulbb	r9, r9, sl
 801bc88:	b2ca      	uxtb	r2, r1
 801bc8a:	7801      	ldrb	r1, [r0, #0]
 801bc8c:	fb01 9902 	mla	r9, r1, r2, r9
 801bc90:	fa1f f989 	uxth.w	r9, r9
 801bc94:	f109 0101 	add.w	r1, r9, #1
 801bc98:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801bc9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bca0:	f880 9000 	strb.w	r9, [r0]
 801bca4:	f890 9001 	ldrb.w	r9, [r0, #1]
 801bca8:	7861      	ldrb	r1, [r4, #1]
 801bcaa:	fb19 f902 	smulbb	r9, r9, r2
 801bcae:	fb01 910a 	mla	r1, r1, sl, r9
 801bcb2:	b289      	uxth	r1, r1
 801bcb4:	f101 0901 	add.w	r9, r1, #1
 801bcb8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801bcbc:	1209      	asrs	r1, r1, #8
 801bcbe:	7041      	strb	r1, [r0, #1]
 801bcc0:	7881      	ldrb	r1, [r0, #2]
 801bcc2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801bcc6:	fb11 f202 	smulbb	r2, r1, r2
 801bcca:	fb09 220a 	mla	r2, r9, sl, r2
 801bcce:	b292      	uxth	r2, r2
 801bcd0:	1c51      	adds	r1, r2, #1
 801bcd2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bcd6:	1212      	asrs	r2, r2, #8
 801bcd8:	e7c8      	b.n	801bc6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801bcda:	4460      	add	r0, ip
 801bcdc:	4474      	add	r4, lr
 801bcde:	e7b2      	b.n	801bc46 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801bce0:	6838      	ldr	r0, [r7, #0]
 801bce2:	6803      	ldr	r3, [r0, #0]
 801bce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bce6:	4798      	blx	r3
 801bce8:	e787      	b.n	801bbfa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801bcea:	bf00      	nop
 801bcec:	2402daac 	.word	0x2402daac
 801bcf0:	2402daa6 	.word	0x2402daa6

0801bcf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801bcf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bcf8:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801bcfc:	4607      	mov	r7, r0
 801bcfe:	460c      	mov	r4, r1
 801bd00:	4692      	mov	sl, r2
 801bd02:	4699      	mov	r9, r3
 801bd04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bd06:	b31d      	cbz	r5, 801bd50 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bd08:	4608      	mov	r0, r1
 801bd0a:	f7fc fb87 	bl	801841c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bd0e:	4680      	mov	r8, r0
 801bd10:	4620      	mov	r0, r4
 801bd12:	f7fc fbb7 	bl	8018484 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bd16:	f8ad 000e 	strh.w	r0, [sp, #14]
 801bd1a:	4620      	mov	r0, r4
 801bd1c:	f8ad a008 	strh.w	sl, [sp, #8]
 801bd20:	f8ad 900a 	strh.w	r9, [sp, #10]
 801bd24:	f8ad 800c 	strh.w	r8, [sp, #12]
 801bd28:	f7fc fcb0 	bl	801868c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bd2c:	280b      	cmp	r0, #11
 801bd2e:	d80f      	bhi.n	801bd50 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bd30:	e8df f000 	tbb	[pc, r0]
 801bd34:	0e062a21 	.word	0x0e062a21
 801bd38:	0e0e0e0e 	.word	0x0e0e0e0e
 801bd3c:	110e0e0e 	.word	0x110e0e0e
 801bd40:	4620      	mov	r0, r4
 801bd42:	f7fc fc1f 	bl	8018584 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd46:	462b      	mov	r3, r5
 801bd48:	4632      	mov	r2, r6
 801bd4a:	a902      	add	r1, sp, #8
 801bd4c:	f7ff ff0a 	bl	801bb64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801bd50:	b004      	add	sp, #16
 801bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd56:	4620      	mov	r0, r4
 801bd58:	f7fc fc14 	bl	8018584 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd5c:	4680      	mov	r8, r0
 801bd5e:	4620      	mov	r0, r4
 801bd60:	f7fc fc40 	bl	80185e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801bd64:	ab02      	add	r3, sp, #8
 801bd66:	4602      	mov	r2, r0
 801bd68:	4641      	mov	r1, r8
 801bd6a:	4638      	mov	r0, r7
 801bd6c:	e9cd 6500 	strd	r6, r5, [sp]
 801bd70:	f7ff fdc2 	bl	801b8f8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801bd74:	e7ec      	b.n	801bd50 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bd76:	4620      	mov	r0, r4
 801bd78:	f7fc fc04 	bl	8018584 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd7c:	462b      	mov	r3, r5
 801bd7e:	4632      	mov	r2, r6
 801bd80:	a902      	add	r1, sp, #8
 801bd82:	f7ff fdfb 	bl	801b97c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801bd86:	e7e3      	b.n	801bd50 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801bd90:	f7fc fbf8 	bl	8018584 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd94:	2300      	movs	r3, #0
 801bd96:	4601      	mov	r1, r0
 801bd98:	aa02      	add	r2, sp, #8
 801bd9a:	4638      	mov	r0, r7
 801bd9c:	e9cd 5300 	strd	r5, r3, [sp]
 801bda0:	4633      	mov	r3, r6
 801bda2:	47c0      	blx	r8
 801bda4:	e7d4      	b.n	801bd50 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801bda6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801bda6:	b4f0      	push	{r4, r5, r6, r7}
 801bda8:	4616      	mov	r6, r2
 801bdaa:	461c      	mov	r4, r3
 801bdac:	460d      	mov	r5, r1
 801bdae:	9a04      	ldr	r2, [sp, #16]
 801bdb0:	2e01      	cmp	r6, #1
 801bdb2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bdb6:	d00e      	beq.n	801bdd6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801bdb8:	d303      	bcc.n	801bdc2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801bdba:	2e02      	cmp	r6, #2
 801bdbc:	d006      	beq.n	801bdcc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801bdbe:	bcf0      	pop	{r4, r5, r6, r7}
 801bdc0:	4770      	bx	lr
 801bdc2:	4621      	mov	r1, r4
 801bdc4:	4628      	mov	r0, r5
 801bdc6:	bcf0      	pop	{r4, r5, r6, r7}
 801bdc8:	f7ff bdd8 	b.w	801b97c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801bdcc:	4621      	mov	r1, r4
 801bdce:	4628      	mov	r0, r5
 801bdd0:	bcf0      	pop	{r4, r5, r6, r7}
 801bdd2:	f7ff bec7 	b.w	801bb64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801bdd6:	6805      	ldr	r5, [r0, #0]
 801bdd8:	2600      	movs	r6, #0
 801bdda:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801bdde:	68ed      	ldr	r5, [r5, #12]
 801bde0:	4613      	mov	r3, r2
 801bde2:	4622      	mov	r2, r4
 801bde4:	46ac      	mov	ip, r5
 801bde6:	bcf0      	pop	{r4, r5, r6, r7}
 801bde8:	4760      	bx	ip
	...

0801bdec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801bdec:	b160      	cbz	r0, 801be08 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801bdee:	2903      	cmp	r1, #3
 801bdf0:	d818      	bhi.n	801be24 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801bdf2:	e8df f001 	tbb	[pc, r1]
 801bdf6:	1902      	.short	0x1902
 801bdf8:	1b06      	.short	0x1b06
 801bdfa:	4b0e      	ldr	r3, [pc, #56]	@ (801be34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801bdfc:	8818      	ldrh	r0, [r3, #0]
 801bdfe:	4240      	negs	r0, r0
 801be00:	4770      	bx	lr
 801be02:	4b0c      	ldr	r3, [pc, #48]	@ (801be34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801be04:	8818      	ldrh	r0, [r3, #0]
 801be06:	4770      	bx	lr
 801be08:	2903      	cmp	r1, #3
 801be0a:	d80b      	bhi.n	801be24 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801be0c:	a301      	add	r3, pc, #4	@ (adr r3, 801be14 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801be0e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801be12:	bf00      	nop
 801be14:	0801be29 	.word	0x0801be29
 801be18:	0801be03 	.word	0x0801be03
 801be1c:	0801be2d 	.word	0x0801be2d
 801be20:	0801bdfb 	.word	0x0801bdfb
 801be24:	2000      	movs	r0, #0
 801be26:	4770      	bx	lr
 801be28:	2001      	movs	r0, #1
 801be2a:	4770      	bx	lr
 801be2c:	f04f 30ff 	mov.w	r0, #4294967295
 801be30:	4770      	bx	lr
 801be32:	bf00      	nop
 801be34:	2402daa6 	.word	0x2402daa6

0801be38 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801be38:	b160      	cbz	r0, 801be54 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801be3a:	2903      	cmp	r1, #3
 801be3c:	d818      	bhi.n	801be70 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801be3e:	e8df f001 	tbb	[pc, r1]
 801be42:	0219      	.short	0x0219
 801be44:	051b      	.short	0x051b
 801be46:	4b0e      	ldr	r3, [pc, #56]	@ (801be80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801be48:	8818      	ldrh	r0, [r3, #0]
 801be4a:	4770      	bx	lr
 801be4c:	4b0c      	ldr	r3, [pc, #48]	@ (801be80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801be4e:	8818      	ldrh	r0, [r3, #0]
 801be50:	4240      	negs	r0, r0
 801be52:	4770      	bx	lr
 801be54:	2903      	cmp	r1, #3
 801be56:	d80b      	bhi.n	801be70 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801be58:	a301      	add	r3, pc, #4	@ (adr r3, 801be60 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801be5a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801be5e:	bf00      	nop
 801be60:	0801be47 	.word	0x0801be47
 801be64:	0801be79 	.word	0x0801be79
 801be68:	0801be4d 	.word	0x0801be4d
 801be6c:	0801be75 	.word	0x0801be75
 801be70:	2000      	movs	r0, #0
 801be72:	4770      	bx	lr
 801be74:	2001      	movs	r0, #1
 801be76:	4770      	bx	lr
 801be78:	f04f 30ff 	mov.w	r0, #4294967295
 801be7c:	4770      	bx	lr
 801be7e:	bf00      	nop
 801be80:	2402daa6 	.word	0x2402daa6

0801be84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be88:	b097      	sub	sp, #92	@ 0x5c
 801be8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801be8c:	a912      	add	r1, sp, #72	@ 0x48
 801be8e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801be92:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801be96:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801be9a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801be9e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801bea2:	e881 000c 	stmia.w	r1, {r2, r3}
 801bea6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801beaa:	930a      	str	r3, [sp, #40]	@ 0x28
 801beac:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801beb0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801beb4:	9311      	str	r3, [sp, #68]	@ 0x44
 801beb6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801beba:	798d      	ldrb	r5, [r1, #6]
 801bebc:	930c      	str	r3, [sp, #48]	@ 0x30
 801bebe:	7b4b      	ldrb	r3, [r1, #13]
 801bec0:	0158      	lsls	r0, r3, #5
 801bec2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801bec6:	4328      	orrs	r0, r5
 801bec8:	9009      	str	r0, [sp, #36]	@ 0x24
 801beca:	f000 817c 	beq.w	801c1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bece:	011b      	lsls	r3, r3, #4
 801bed0:	79c8      	ldrb	r0, [r1, #7]
 801bed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bed6:	4303      	orrs	r3, r0
 801bed8:	930e      	str	r3, [sp, #56]	@ 0x38
 801beda:	f000 8174 	beq.w	801c1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bede:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801bee2:	b29b      	uxth	r3, r3
 801bee4:	2f00      	cmp	r7, #0
 801bee6:	f000 8116 	beq.w	801c116 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801beea:	1aff      	subs	r7, r7, r3
 801beec:	b2bf      	uxth	r7, r7
 801beee:	043b      	lsls	r3, r7, #16
 801bef0:	d502      	bpl.n	801bef8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801bef2:	1bf6      	subs	r6, r6, r7
 801bef4:	2700      	movs	r7, #0
 801bef6:	b236      	sxth	r6, r6
 801bef8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801befc:	a812      	add	r0, sp, #72	@ 0x48
 801befe:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801bf02:	428e      	cmp	r6, r1
 801bf04:	b28b      	uxth	r3, r1
 801bf06:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801bf0a:	bfbf      	itttt	lt
 801bf0c:	18ff      	addlt	r7, r7, r3
 801bf0e:	1bbe      	sublt	r6, r7, r6
 801bf10:	b2b7      	uxthlt	r7, r6
 801bf12:	460e      	movlt	r6, r1
 801bf14:	8891      	ldrh	r1, [r2, #4]
 801bf16:	440b      	add	r3, r1
 801bf18:	4631      	mov	r1, r6
 801bf1a:	b21b      	sxth	r3, r3
 801bf1c:	9310      	str	r3, [sp, #64]	@ 0x40
 801bf1e:	88d3      	ldrh	r3, [r2, #6]
 801bf20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf22:	449a      	add	sl, r3
 801bf24:	fa0f f38a 	sxth.w	r3, sl
 801bf28:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801bf2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bf2e:	4bb5      	ldr	r3, [pc, #724]	@ (801c204 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801bf30:	f893 b000 	ldrb.w	fp, [r3]
 801bf34:	f10b 3cff 	add.w	ip, fp, #4294967295
 801bf38:	f1dc 0300 	rsbs	r3, ip, #0
 801bf3c:	eb43 030c 	adc.w	r3, r3, ip
 801bf40:	930d      	str	r3, [sp, #52]	@ 0x34
 801bf42:	464b      	mov	r3, r9
 801bf44:	f7f8 f89f 	bl	8014086 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801bf48:	4631      	mov	r1, r6
 801bf4a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801bf4e:	464b      	mov	r3, r9
 801bf50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf52:	a812      	add	r0, sp, #72	@ 0x48
 801bf54:	f7f8 f8b4 	bl	80140c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801bf58:	a916      	add	r1, sp, #88	@ 0x58
 801bf5a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801bf5e:	a815      	add	r0, sp, #84	@ 0x54
 801bf60:	f7f8 f9da 	bl	8014318 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801bf64:	f1b9 0f00 	cmp.w	r9, #0
 801bf68:	f040 80d8 	bne.w	801c11c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801bf6c:	f1bb 0f01 	cmp.w	fp, #1
 801bf70:	f040 80dc 	bne.w	801c12c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801bf74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bf76:	b153      	cbz	r3, 801bf8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801bf78:	2508      	movs	r5, #8
 801bf7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf7c:	fb95 f3f8 	sdiv	r3, r5, r8
 801bf80:	1e5d      	subs	r5, r3, #1
 801bf82:	4415      	add	r5, r2
 801bf84:	fb95 f5f3 	sdiv	r5, r5, r3
 801bf88:	fb15 f503 	smulbb	r5, r5, r3
 801bf8c:	b2ad      	uxth	r5, r5
 801bf8e:	b907      	cbnz	r7, 801bf92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801bf90:	b16c      	cbz	r4, 801bfae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801bf92:	fb04 7305 	mla	r3, r4, r5, r7
 801bf96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801bf98:	ebaa 0a04 	sub.w	sl, sl, r4
 801bf9c:	fb08 f303 	mul.w	r3, r8, r3
 801bfa0:	fa1f fa8a 	uxth.w	sl, sl
 801bfa4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801bfa8:	f003 0407 	and.w	r4, r3, #7
 801bfac:	9226      	str	r2, [sp, #152]	@ 0x98
 801bfae:	4649      	mov	r1, r9
 801bfb0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801bfb2:	f7ff ff1b 	bl	801bdec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801bfb6:	4683      	mov	fp, r0
 801bfb8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801bfba:	f7ff ff3d 	bl	801be38 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801bfbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bfc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfc2:	4681      	mov	r9, r0
 801bfc4:	1a9b      	subs	r3, r3, r2
 801bfc6:	459a      	cmp	sl, r3
 801bfc8:	bfa8      	it	ge
 801bfca:	469a      	movge	sl, r3
 801bfcc:	f1ba 0f00 	cmp.w	sl, #0
 801bfd0:	f340 80f9 	ble.w	801c1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bfd4:	1bf6      	subs	r6, r6, r7
 801bfd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bfd8:	1b9e      	subs	r6, r3, r6
 801bfda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfdc:	429e      	cmp	r6, r3
 801bfde:	bfd4      	ite	le
 801bfe0:	ebc7 0706 	rsble	r7, r7, r6
 801bfe4:	ebc7 0703 	rsbgt	r7, r7, r3
 801bfe8:	2f00      	cmp	r7, #0
 801bfea:	f340 80ec 	ble.w	801c1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bfee:	1bed      	subs	r5, r5, r7
 801bff0:	fb08 f305 	mul.w	r3, r8, r5
 801bff4:	930d      	str	r3, [sp, #52]	@ 0x34
 801bff6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bff8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801bffc:	930e      	str	r3, [sp, #56]	@ 0x38
 801bffe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c000:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c004:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c006:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c008:	b2db      	uxtb	r3, r3
 801c00a:	9310      	str	r3, [sp, #64]	@ 0x40
 801c00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c00e:	2b00      	cmp	r3, #0
 801c010:	f040 80de 	bne.w	801c1d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c014:	4b7c      	ldr	r3, [pc, #496]	@ (801c208 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c016:	6818      	ldr	r0, [r3, #0]
 801c018:	6803      	ldr	r3, [r0, #0]
 801c01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c01c:	4798      	blx	r3
 801c01e:	2301      	movs	r3, #1
 801c020:	4a7a      	ldr	r2, [pc, #488]	@ (801c20c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c022:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c026:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c02a:	fa03 f308 	lsl.w	r3, r3, r8
 801c02e:	8811      	ldrh	r1, [r2, #0]
 801c030:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801c034:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c038:	3b01      	subs	r3, #1
 801c03a:	fb06 bb07 	mla	fp, r6, r7, fp
 801c03e:	b2db      	uxtb	r3, r3
 801c040:	930a      	str	r3, [sp, #40]	@ 0x28
 801c042:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801c046:	fb01 2303 	mla	r3, r1, r3, r2
 801c04a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c04e:	18c3      	adds	r3, r0, r3
 801c050:	9309      	str	r3, [sp, #36]	@ 0x24
 801c052:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c054:	781a      	ldrb	r2, [r3, #0]
 801c056:	4122      	asrs	r2, r4
 801c058:	b2d2      	uxtb	r2, r2
 801c05a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c05e:	f0c0 80d7 	bcc.w	801c210 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c062:	46be      	mov	lr, r7
 801c064:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c066:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c06a:	f0c0 80ba 	bcc.w	801c1e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c06e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c070:	4013      	ands	r3, r2
 801c072:	d041      	beq.n	801c0f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c074:	20ff      	movs	r0, #255	@ 0xff
 801c076:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c078:	fb90 f5f5 	sdiv	r5, r0, r5
 801c07c:	436b      	muls	r3, r5
 801c07e:	2bfe      	cmp	r3, #254	@ 0xfe
 801c080:	dd03      	ble.n	801c08a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c082:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c084:	4285      	cmp	r5, r0
 801c086:	f000 80a5 	beq.w	801c1d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c08a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c08c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c08e:	fb15 f303 	smulbb	r3, r5, r3
 801c092:	b29b      	uxth	r3, r3
 801c094:	1c5d      	adds	r5, r3, #1
 801c096:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c09a:	780d      	ldrb	r5, [r1, #0]
 801c09c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c0a0:	fa1f fc83 	uxth.w	ip, r3
 801c0a4:	43db      	mvns	r3, r3
 801c0a6:	fb10 f90c 	smulbb	r9, r0, ip
 801c0aa:	b2db      	uxtb	r3, r3
 801c0ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c0ae:	fb05 9503 	mla	r5, r5, r3, r9
 801c0b2:	b2ad      	uxth	r5, r5
 801c0b4:	f105 0901 	add.w	r9, r5, #1
 801c0b8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c0bc:	fb10 f90c 	smulbb	r9, r0, ip
 801c0c0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c0c2:	122d      	asrs	r5, r5, #8
 801c0c4:	fb10 fc0c 	smulbb	ip, r0, ip
 801c0c8:	700d      	strb	r5, [r1, #0]
 801c0ca:	784d      	ldrb	r5, [r1, #1]
 801c0cc:	fb05 9503 	mla	r5, r5, r3, r9
 801c0d0:	b2ad      	uxth	r5, r5
 801c0d2:	f105 0901 	add.w	r9, r5, #1
 801c0d6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c0da:	122d      	asrs	r5, r5, #8
 801c0dc:	704d      	strb	r5, [r1, #1]
 801c0de:	788d      	ldrb	r5, [r1, #2]
 801c0e0:	fb05 cc03 	mla	ip, r5, r3, ip
 801c0e4:	fa1f fc8c 	uxth.w	ip, ip
 801c0e8:	f10c 0301 	add.w	r3, ip, #1
 801c0ec:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c0f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c0f4:	f881 c002 	strb.w	ip, [r1, #2]
 801c0f8:	4444      	add	r4, r8
 801c0fa:	4431      	add	r1, r6
 801c0fc:	b2a4      	uxth	r4, r4
 801c0fe:	2c07      	cmp	r4, #7
 801c100:	bf89      	itett	hi
 801c102:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801c104:	fa42 f208 	asrls.w	r2, r2, r8
 801c108:	2400      	movhi	r4, #0
 801c10a:	785a      	ldrbhi	r2, [r3, #1]
 801c10c:	bf8a      	itet	hi
 801c10e:	3301      	addhi	r3, #1
 801c110:	b2d2      	uxtbls	r2, r2
 801c112:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801c114:	e7a7      	b.n	801c066 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c116:	441e      	add	r6, r3
 801c118:	b236      	sxth	r6, r6
 801c11a:	e6ed      	b.n	801bef8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c11c:	f1b9 0f01 	cmp.w	r9, #1
 801c120:	f47f af28 	bne.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c124:	f1bb 0f01 	cmp.w	fp, #1
 801c128:	f47f af24 	bne.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c12c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801c208 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c130:	f8db 0000 	ldr.w	r0, [fp]
 801c134:	6803      	ldr	r3, [r0, #0]
 801c136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c138:	4798      	blx	r3
 801c13a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801c13e:	465a      	mov	r2, fp
 801c140:	d006      	beq.n	801c150 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c142:	f1b8 0f04 	cmp.w	r8, #4
 801c146:	d141      	bne.n	801c1cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c148:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c14a:	3300      	adds	r3, #0
 801c14c:	bf18      	it	ne
 801c14e:	2301      	movne	r3, #1
 801c150:	0580      	lsls	r0, r0, #22
 801c152:	d566      	bpl.n	801c222 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c154:	f1b8 0f08 	cmp.w	r8, #8
 801c158:	d163      	bne.n	801c222 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	bf0c      	ite	eq
 801c15e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801c162:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801c166:	2f00      	cmp	r7, #0
 801c168:	f47f af04 	bne.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c16c:	2c00      	cmp	r4, #0
 801c16e:	f47f af01 	bne.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c174:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c176:	18f3      	adds	r3, r6, r3
 801c178:	4283      	cmp	r3, r0
 801c17a:	f73f aefb 	bgt.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c17e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c182:	4403      	add	r3, r0
 801c184:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c186:	4283      	cmp	r3, r0
 801c188:	f73f aef4 	bgt.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c18c:	f1b8 0f08 	cmp.w	r8, #8
 801c190:	6810      	ldr	r0, [r2, #0]
 801c192:	f04f 0600 	mov.w	r6, #0
 801c196:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801c19a:	bf18      	it	ne
 801c19c:	3501      	addne	r5, #1
 801c19e:	6804      	ldr	r4, [r0, #0]
 801c1a0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801c1a4:	bf18      	it	ne
 801c1a6:	f025 0501 	bicne.w	r5, r5, #1
 801c1aa:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c1ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c1b0:	bf18      	it	ne
 801c1b2:	b2ad      	uxthne	r5, r5
 801c1b4:	9104      	str	r1, [sp, #16]
 801c1b6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c1b8:	e9cd 5a00 	strd	r5, sl, [sp]
 801c1bc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c1c0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801c1c2:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801c1c4:	47a0      	blx	r4
 801c1c6:	b017      	add	sp, #92	@ 0x5c
 801c1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	e7bf      	b.n	801c150 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c1d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c1d2:	e724      	b.n	801c01e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c1d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c1d6:	700b      	strb	r3, [r1, #0]
 801c1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c1da:	704b      	strb	r3, [r1, #1]
 801c1dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c1de:	708b      	strb	r3, [r1, #2]
 801c1e0:	e78a      	b.n	801c0f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c1e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c1e4:	b153      	cbz	r3, 801c1fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c1e6:	441c      	add	r4, r3
 801c1e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c1ea:	b2a4      	uxth	r4, r4
 801c1ec:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c1f0:	f004 0407 	and.w	r4, r4, #7
 801c1f4:	781a      	ldrb	r2, [r3, #0]
 801c1f6:	9326      	str	r3, [sp, #152]	@ 0x98
 801c1f8:	4122      	asrs	r2, r4
 801c1fa:	b2d2      	uxtb	r2, r2
 801c1fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1fe:	445b      	add	r3, fp
 801c200:	9309      	str	r3, [sp, #36]	@ 0x24
 801c202:	e72a      	b.n	801c05a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c204:	2402daa4 	.word	0x2402daa4
 801c208:	2402daac 	.word	0x2402daac
 801c20c:	2402daa6 	.word	0x2402daa6
 801c210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c212:	2b00      	cmp	r3, #0
 801c214:	d1d7      	bne.n	801c1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c216:	4b06      	ldr	r3, [pc, #24]	@ (801c230 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c218:	6818      	ldr	r0, [r3, #0]
 801c21a:	6803      	ldr	r3, [r0, #0]
 801c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c21e:	4798      	blx	r3
 801c220:	e7d1      	b.n	801c1c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c222:	2b00      	cmp	r3, #0
 801c224:	f43f aea6 	beq.w	801bf74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c228:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c22c:	e79b      	b.n	801c166 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c22e:	bf00      	nop
 801c230:	2402daac 	.word	0x2402daac

0801c234 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c234:	b538      	push	{r3, r4, r5, lr}
 801c236:	4c15      	ldr	r4, [pc, #84]	@ (801c28c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c238:	4605      	mov	r5, r0
 801c23a:	7823      	ldrb	r3, [r4, #0]
 801c23c:	f3bf 8f5b 	dmb	ish
 801c240:	07da      	lsls	r2, r3, #31
 801c242:	d40b      	bmi.n	801c25c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c244:	4620      	mov	r0, r4
 801c246:	f006 f8b3 	bl	80223b0 <__cxa_guard_acquire>
 801c24a:	b138      	cbz	r0, 801c25c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c24c:	4620      	mov	r0, r4
 801c24e:	f006 f8bb 	bl	80223c8 <__cxa_guard_release>
 801c252:	4a0f      	ldr	r2, [pc, #60]	@ (801c290 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c254:	490f      	ldr	r1, [pc, #60]	@ (801c294 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c256:	4810      	ldr	r0, [pc, #64]	@ (801c298 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c258:	f006 f8a3 	bl	80223a2 <__aeabi_atexit>
 801c25c:	4c0f      	ldr	r4, [pc, #60]	@ (801c29c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c25e:	7823      	ldrb	r3, [r4, #0]
 801c260:	f3bf 8f5b 	dmb	ish
 801c264:	07db      	lsls	r3, r3, #31
 801c266:	d40b      	bmi.n	801c280 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c268:	4620      	mov	r0, r4
 801c26a:	f006 f8a1 	bl	80223b0 <__cxa_guard_acquire>
 801c26e:	b138      	cbz	r0, 801c280 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c270:	4620      	mov	r0, r4
 801c272:	f006 f8a9 	bl	80223c8 <__cxa_guard_release>
 801c276:	4a06      	ldr	r2, [pc, #24]	@ (801c290 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c278:	4909      	ldr	r1, [pc, #36]	@ (801c2a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c27a:	480a      	ldr	r0, [pc, #40]	@ (801c2a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c27c:	f006 f891 	bl	80223a2 <__aeabi_atexit>
 801c280:	4b05      	ldr	r3, [pc, #20]	@ (801c298 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c282:	616b      	str	r3, [r5, #20]
 801c284:	4b07      	ldr	r3, [pc, #28]	@ (801c2a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c286:	61ab      	str	r3, [r5, #24]
 801c288:	bd38      	pop	{r3, r4, r5, pc}
 801c28a:	bf00      	nop
 801c28c:	2402db8c 	.word	0x2402db8c
 801c290:	24000000 	.word	0x24000000
 801c294:	0801a06b 	.word	0x0801a06b
 801c298:	240000cc 	.word	0x240000cc
 801c29c:	2402db90 	.word	0x2402db90
 801c2a0:	0801a069 	.word	0x0801a069
 801c2a4:	240000d0 	.word	0x240000d0

0801c2a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c2a8:	b538      	push	{r3, r4, r5, lr}
 801c2aa:	4c15      	ldr	r4, [pc, #84]	@ (801c300 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c2ac:	4605      	mov	r5, r0
 801c2ae:	7823      	ldrb	r3, [r4, #0]
 801c2b0:	f3bf 8f5b 	dmb	ish
 801c2b4:	07da      	lsls	r2, r3, #31
 801c2b6:	d40b      	bmi.n	801c2d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	f006 f879 	bl	80223b0 <__cxa_guard_acquire>
 801c2be:	b138      	cbz	r0, 801c2d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	f006 f881 	bl	80223c8 <__cxa_guard_release>
 801c2c6:	4a0f      	ldr	r2, [pc, #60]	@ (801c304 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c2c8:	490f      	ldr	r1, [pc, #60]	@ (801c308 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c2ca:	4810      	ldr	r0, [pc, #64]	@ (801c30c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c2cc:	f006 f869 	bl	80223a2 <__aeabi_atexit>
 801c2d0:	4c0f      	ldr	r4, [pc, #60]	@ (801c310 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c2d2:	7823      	ldrb	r3, [r4, #0]
 801c2d4:	f3bf 8f5b 	dmb	ish
 801c2d8:	07db      	lsls	r3, r3, #31
 801c2da:	d40b      	bmi.n	801c2f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c2dc:	4620      	mov	r0, r4
 801c2de:	f006 f867 	bl	80223b0 <__cxa_guard_acquire>
 801c2e2:	b138      	cbz	r0, 801c2f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f006 f86f 	bl	80223c8 <__cxa_guard_release>
 801c2ea:	4a06      	ldr	r2, [pc, #24]	@ (801c304 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c2ec:	4909      	ldr	r1, [pc, #36]	@ (801c314 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c2ee:	480a      	ldr	r0, [pc, #40]	@ (801c318 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c2f0:	f006 f857 	bl	80223a2 <__aeabi_atexit>
 801c2f4:	4b05      	ldr	r3, [pc, #20]	@ (801c30c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c2f6:	60eb      	str	r3, [r5, #12]
 801c2f8:	4b07      	ldr	r3, [pc, #28]	@ (801c318 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c2fa:	612b      	str	r3, [r5, #16]
 801c2fc:	bd38      	pop	{r3, r4, r5, pc}
 801c2fe:	bf00      	nop
 801c300:	2402db6c 	.word	0x2402db6c
 801c304:	24000000 	.word	0x24000000
 801c308:	0801a06f 	.word	0x0801a06f
 801c30c:	240000ac 	.word	0x240000ac
 801c310:	2402db70 	.word	0x2402db70
 801c314:	0801a06d 	.word	0x0801a06d
 801c318:	240000b0 	.word	0x240000b0

0801c31c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c31c:	b510      	push	{r4, lr}
 801c31e:	4604      	mov	r4, r0
 801c320:	f7ff ff88 	bl	801c234 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c324:	4620      	mov	r0, r4
 801c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c32a:	f7ff bfbd 	b.w	801c2a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c330 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c330:	b538      	push	{r3, r4, r5, lr}
 801c332:	4c15      	ldr	r4, [pc, #84]	@ (801c388 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c334:	4605      	mov	r5, r0
 801c336:	7823      	ldrb	r3, [r4, #0]
 801c338:	f3bf 8f5b 	dmb	ish
 801c33c:	07da      	lsls	r2, r3, #31
 801c33e:	d40b      	bmi.n	801c358 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c340:	4620      	mov	r0, r4
 801c342:	f006 f835 	bl	80223b0 <__cxa_guard_acquire>
 801c346:	b138      	cbz	r0, 801c358 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c348:	4620      	mov	r0, r4
 801c34a:	f006 f83d 	bl	80223c8 <__cxa_guard_release>
 801c34e:	4a0f      	ldr	r2, [pc, #60]	@ (801c38c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c350:	490f      	ldr	r1, [pc, #60]	@ (801c390 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c352:	4810      	ldr	r0, [pc, #64]	@ (801c394 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c354:	f006 f825 	bl	80223a2 <__aeabi_atexit>
 801c358:	4c0f      	ldr	r4, [pc, #60]	@ (801c398 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c35a:	7823      	ldrb	r3, [r4, #0]
 801c35c:	f3bf 8f5b 	dmb	ish
 801c360:	07db      	lsls	r3, r3, #31
 801c362:	d40b      	bmi.n	801c37c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c364:	4620      	mov	r0, r4
 801c366:	f006 f823 	bl	80223b0 <__cxa_guard_acquire>
 801c36a:	b138      	cbz	r0, 801c37c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c36c:	4620      	mov	r0, r4
 801c36e:	f006 f82b 	bl	80223c8 <__cxa_guard_release>
 801c372:	4a06      	ldr	r2, [pc, #24]	@ (801c38c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c374:	4909      	ldr	r1, [pc, #36]	@ (801c39c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c376:	480a      	ldr	r0, [pc, #40]	@ (801c3a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c378:	f006 f813 	bl	80223a2 <__aeabi_atexit>
 801c37c:	4b05      	ldr	r3, [pc, #20]	@ (801c394 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c37e:	626b      	str	r3, [r5, #36]	@ 0x24
 801c380:	4b07      	ldr	r3, [pc, #28]	@ (801c3a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c382:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c384:	bd38      	pop	{r3, r4, r5, pc}
 801c386:	bf00      	nop
 801c388:	2402db94 	.word	0x2402db94
 801c38c:	24000000 	.word	0x24000000
 801c390:	0801a063 	.word	0x0801a063
 801c394:	240000d4 	.word	0x240000d4
 801c398:	2402db98 	.word	0x2402db98
 801c39c:	0801a061 	.word	0x0801a061
 801c3a0:	240000d8 	.word	0x240000d8

0801c3a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c3a4:	b538      	push	{r3, r4, r5, lr}
 801c3a6:	4c15      	ldr	r4, [pc, #84]	@ (801c3fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c3a8:	4605      	mov	r5, r0
 801c3aa:	7823      	ldrb	r3, [r4, #0]
 801c3ac:	f3bf 8f5b 	dmb	ish
 801c3b0:	07da      	lsls	r2, r3, #31
 801c3b2:	d40b      	bmi.n	801c3cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c3b4:	4620      	mov	r0, r4
 801c3b6:	f005 fffb 	bl	80223b0 <__cxa_guard_acquire>
 801c3ba:	b138      	cbz	r0, 801c3cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c3bc:	4620      	mov	r0, r4
 801c3be:	f006 f803 	bl	80223c8 <__cxa_guard_release>
 801c3c2:	4a0f      	ldr	r2, [pc, #60]	@ (801c400 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c3c4:	490f      	ldr	r1, [pc, #60]	@ (801c404 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c3c6:	4810      	ldr	r0, [pc, #64]	@ (801c408 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c3c8:	f005 ffeb 	bl	80223a2 <__aeabi_atexit>
 801c3cc:	4c0f      	ldr	r4, [pc, #60]	@ (801c40c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c3ce:	7823      	ldrb	r3, [r4, #0]
 801c3d0:	f3bf 8f5b 	dmb	ish
 801c3d4:	07db      	lsls	r3, r3, #31
 801c3d6:	d40b      	bmi.n	801c3f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c3d8:	4620      	mov	r0, r4
 801c3da:	f005 ffe9 	bl	80223b0 <__cxa_guard_acquire>
 801c3de:	b138      	cbz	r0, 801c3f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c3e0:	4620      	mov	r0, r4
 801c3e2:	f005 fff1 	bl	80223c8 <__cxa_guard_release>
 801c3e6:	4a06      	ldr	r2, [pc, #24]	@ (801c400 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c3e8:	4909      	ldr	r1, [pc, #36]	@ (801c410 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c3ea:	480a      	ldr	r0, [pc, #40]	@ (801c414 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c3ec:	f005 ffd9 	bl	80223a2 <__aeabi_atexit>
 801c3f0:	4b05      	ldr	r3, [pc, #20]	@ (801c408 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c3f2:	61eb      	str	r3, [r5, #28]
 801c3f4:	4b07      	ldr	r3, [pc, #28]	@ (801c414 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c3f6:	622b      	str	r3, [r5, #32]
 801c3f8:	bd38      	pop	{r3, r4, r5, pc}
 801c3fa:	bf00      	nop
 801c3fc:	2402db74 	.word	0x2402db74
 801c400:	24000000 	.word	0x24000000
 801c404:	0801a067 	.word	0x0801a067
 801c408:	240000b4 	.word	0x240000b4
 801c40c:	2402db78 	.word	0x2402db78
 801c410:	0801a065 	.word	0x0801a065
 801c414:	240000b8 	.word	0x240000b8

0801c418 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c418:	b510      	push	{r4, lr}
 801c41a:	4604      	mov	r4, r0
 801c41c:	f7ff ff88 	bl	801c330 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c420:	4620      	mov	r0, r4
 801c422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c426:	f7ff bfbd 	b.w	801c3a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c42c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c42c:	b538      	push	{r3, r4, r5, lr}
 801c42e:	4c15      	ldr	r4, [pc, #84]	@ (801c484 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c430:	4605      	mov	r5, r0
 801c432:	7823      	ldrb	r3, [r4, #0]
 801c434:	f3bf 8f5b 	dmb	ish
 801c438:	07da      	lsls	r2, r3, #31
 801c43a:	d40b      	bmi.n	801c454 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c43c:	4620      	mov	r0, r4
 801c43e:	f005 ffb7 	bl	80223b0 <__cxa_guard_acquire>
 801c442:	b138      	cbz	r0, 801c454 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c444:	4620      	mov	r0, r4
 801c446:	f005 ffbf 	bl	80223c8 <__cxa_guard_release>
 801c44a:	4a0f      	ldr	r2, [pc, #60]	@ (801c488 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c44c:	490f      	ldr	r1, [pc, #60]	@ (801c48c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c44e:	4810      	ldr	r0, [pc, #64]	@ (801c490 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c450:	f005 ffa7 	bl	80223a2 <__aeabi_atexit>
 801c454:	4c0f      	ldr	r4, [pc, #60]	@ (801c494 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c456:	7823      	ldrb	r3, [r4, #0]
 801c458:	f3bf 8f5b 	dmb	ish
 801c45c:	07db      	lsls	r3, r3, #31
 801c45e:	d40b      	bmi.n	801c478 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c460:	4620      	mov	r0, r4
 801c462:	f005 ffa5 	bl	80223b0 <__cxa_guard_acquire>
 801c466:	b138      	cbz	r0, 801c478 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c468:	4620      	mov	r0, r4
 801c46a:	f005 ffad 	bl	80223c8 <__cxa_guard_release>
 801c46e:	4a06      	ldr	r2, [pc, #24]	@ (801c488 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c470:	4909      	ldr	r1, [pc, #36]	@ (801c498 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c472:	480a      	ldr	r0, [pc, #40]	@ (801c49c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c474:	f005 ff95 	bl	80223a2 <__aeabi_atexit>
 801c478:	4b05      	ldr	r3, [pc, #20]	@ (801c490 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c47a:	636b      	str	r3, [r5, #52]	@ 0x34
 801c47c:	4b07      	ldr	r3, [pc, #28]	@ (801c49c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c47e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801c480:	bd38      	pop	{r3, r4, r5, pc}
 801c482:	bf00      	nop
 801c484:	2402db7c 	.word	0x2402db7c
 801c488:	24000000 	.word	0x24000000
 801c48c:	0801a05b 	.word	0x0801a05b
 801c490:	240000bc 	.word	0x240000bc
 801c494:	2402db80 	.word	0x2402db80
 801c498:	0801a059 	.word	0x0801a059
 801c49c:	240000c0 	.word	0x240000c0

0801c4a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c4a0:	b538      	push	{r3, r4, r5, lr}
 801c4a2:	4c15      	ldr	r4, [pc, #84]	@ (801c4f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c4a4:	4605      	mov	r5, r0
 801c4a6:	7823      	ldrb	r3, [r4, #0]
 801c4a8:	f3bf 8f5b 	dmb	ish
 801c4ac:	07da      	lsls	r2, r3, #31
 801c4ae:	d40b      	bmi.n	801c4c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c4b0:	4620      	mov	r0, r4
 801c4b2:	f005 ff7d 	bl	80223b0 <__cxa_guard_acquire>
 801c4b6:	b138      	cbz	r0, 801c4c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	f005 ff85 	bl	80223c8 <__cxa_guard_release>
 801c4be:	4a0f      	ldr	r2, [pc, #60]	@ (801c4fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c4c0:	490f      	ldr	r1, [pc, #60]	@ (801c500 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c4c2:	4810      	ldr	r0, [pc, #64]	@ (801c504 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c4c4:	f005 ff6d 	bl	80223a2 <__aeabi_atexit>
 801c4c8:	4c0f      	ldr	r4, [pc, #60]	@ (801c508 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c4ca:	7823      	ldrb	r3, [r4, #0]
 801c4cc:	f3bf 8f5b 	dmb	ish
 801c4d0:	07db      	lsls	r3, r3, #31
 801c4d2:	d40b      	bmi.n	801c4ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f005 ff6b 	bl	80223b0 <__cxa_guard_acquire>
 801c4da:	b138      	cbz	r0, 801c4ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f005 ff73 	bl	80223c8 <__cxa_guard_release>
 801c4e2:	4a06      	ldr	r2, [pc, #24]	@ (801c4fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c4e4:	4909      	ldr	r1, [pc, #36]	@ (801c50c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c4e6:	480a      	ldr	r0, [pc, #40]	@ (801c510 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c4e8:	f005 ff5b 	bl	80223a2 <__aeabi_atexit>
 801c4ec:	4b05      	ldr	r3, [pc, #20]	@ (801c504 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c4ee:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801c4f0:	4b07      	ldr	r3, [pc, #28]	@ (801c510 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c4f2:	632b      	str	r3, [r5, #48]	@ 0x30
 801c4f4:	bd38      	pop	{r3, r4, r5, pc}
 801c4f6:	bf00      	nop
 801c4f8:	2402db54 	.word	0x2402db54
 801c4fc:	24000000 	.word	0x24000000
 801c500:	0801a05f 	.word	0x0801a05f
 801c504:	24000094 	.word	0x24000094
 801c508:	2402db58 	.word	0x2402db58
 801c50c:	0801a05d 	.word	0x0801a05d
 801c510:	24000098 	.word	0x24000098

0801c514 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c514:	b510      	push	{r4, lr}
 801c516:	4604      	mov	r4, r0
 801c518:	f7ff ff88 	bl	801c42c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c51c:	4620      	mov	r0, r4
 801c51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c522:	f7ff bfbd 	b.w	801c4a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c528 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c528:	b538      	push	{r3, r4, r5, lr}
 801c52a:	4c15      	ldr	r4, [pc, #84]	@ (801c580 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c52c:	4605      	mov	r5, r0
 801c52e:	7823      	ldrb	r3, [r4, #0]
 801c530:	f3bf 8f5b 	dmb	ish
 801c534:	07da      	lsls	r2, r3, #31
 801c536:	d40b      	bmi.n	801c550 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c538:	4620      	mov	r0, r4
 801c53a:	f005 ff39 	bl	80223b0 <__cxa_guard_acquire>
 801c53e:	b138      	cbz	r0, 801c550 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c540:	4620      	mov	r0, r4
 801c542:	f005 ff41 	bl	80223c8 <__cxa_guard_release>
 801c546:	4a0f      	ldr	r2, [pc, #60]	@ (801c584 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c548:	490f      	ldr	r1, [pc, #60]	@ (801c588 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c54a:	4810      	ldr	r0, [pc, #64]	@ (801c58c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c54c:	f005 ff29 	bl	80223a2 <__aeabi_atexit>
 801c550:	4c0f      	ldr	r4, [pc, #60]	@ (801c590 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c552:	7823      	ldrb	r3, [r4, #0]
 801c554:	f3bf 8f5b 	dmb	ish
 801c558:	07db      	lsls	r3, r3, #31
 801c55a:	d40b      	bmi.n	801c574 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c55c:	4620      	mov	r0, r4
 801c55e:	f005 ff27 	bl	80223b0 <__cxa_guard_acquire>
 801c562:	b138      	cbz	r0, 801c574 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c564:	4620      	mov	r0, r4
 801c566:	f005 ff2f 	bl	80223c8 <__cxa_guard_release>
 801c56a:	4a06      	ldr	r2, [pc, #24]	@ (801c584 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c56c:	4909      	ldr	r1, [pc, #36]	@ (801c594 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c56e:	480a      	ldr	r0, [pc, #40]	@ (801c598 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c570:	f005 ff17 	bl	80223a2 <__aeabi_atexit>
 801c574:	4b05      	ldr	r3, [pc, #20]	@ (801c58c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c576:	646b      	str	r3, [r5, #68]	@ 0x44
 801c578:	4b07      	ldr	r3, [pc, #28]	@ (801c598 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c57a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801c57c:	bd38      	pop	{r3, r4, r5, pc}
 801c57e:	bf00      	nop
 801c580:	2402db84 	.word	0x2402db84
 801c584:	24000000 	.word	0x24000000
 801c588:	0801a053 	.word	0x0801a053
 801c58c:	240000c4 	.word	0x240000c4
 801c590:	2402db88 	.word	0x2402db88
 801c594:	0801a051 	.word	0x0801a051
 801c598:	240000c8 	.word	0x240000c8

0801c59c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c59c:	b538      	push	{r3, r4, r5, lr}
 801c59e:	4c15      	ldr	r4, [pc, #84]	@ (801c5f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c5a0:	4605      	mov	r5, r0
 801c5a2:	7823      	ldrb	r3, [r4, #0]
 801c5a4:	f3bf 8f5b 	dmb	ish
 801c5a8:	07da      	lsls	r2, r3, #31
 801c5aa:	d40b      	bmi.n	801c5c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c5ac:	4620      	mov	r0, r4
 801c5ae:	f005 feff 	bl	80223b0 <__cxa_guard_acquire>
 801c5b2:	b138      	cbz	r0, 801c5c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c5b4:	4620      	mov	r0, r4
 801c5b6:	f005 ff07 	bl	80223c8 <__cxa_guard_release>
 801c5ba:	4a0f      	ldr	r2, [pc, #60]	@ (801c5f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c5bc:	490f      	ldr	r1, [pc, #60]	@ (801c5fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c5be:	4810      	ldr	r0, [pc, #64]	@ (801c600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c5c0:	f005 feef 	bl	80223a2 <__aeabi_atexit>
 801c5c4:	4c0f      	ldr	r4, [pc, #60]	@ (801c604 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c5c6:	7823      	ldrb	r3, [r4, #0]
 801c5c8:	f3bf 8f5b 	dmb	ish
 801c5cc:	07db      	lsls	r3, r3, #31
 801c5ce:	d40b      	bmi.n	801c5e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	f005 feed 	bl	80223b0 <__cxa_guard_acquire>
 801c5d6:	b138      	cbz	r0, 801c5e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c5d8:	4620      	mov	r0, r4
 801c5da:	f005 fef5 	bl	80223c8 <__cxa_guard_release>
 801c5de:	4a06      	ldr	r2, [pc, #24]	@ (801c5f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c5e0:	4909      	ldr	r1, [pc, #36]	@ (801c608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c5e2:	480a      	ldr	r0, [pc, #40]	@ (801c60c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c5e4:	f005 fedd 	bl	80223a2 <__aeabi_atexit>
 801c5e8:	4b05      	ldr	r3, [pc, #20]	@ (801c600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c5ea:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801c5ec:	4b07      	ldr	r3, [pc, #28]	@ (801c60c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c5ee:	642b      	str	r3, [r5, #64]	@ 0x40
 801c5f0:	bd38      	pop	{r3, r4, r5, pc}
 801c5f2:	bf00      	nop
 801c5f4:	2402db64 	.word	0x2402db64
 801c5f8:	24000000 	.word	0x24000000
 801c5fc:	0801a057 	.word	0x0801a057
 801c600:	240000a4 	.word	0x240000a4
 801c604:	2402db68 	.word	0x2402db68
 801c608:	0801a055 	.word	0x0801a055
 801c60c:	240000a8 	.word	0x240000a8

0801c610 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c610:	b510      	push	{r4, lr}
 801c612:	4604      	mov	r4, r0
 801c614:	f7ff ff88 	bl	801c528 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c618:	4620      	mov	r0, r4
 801c61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c61e:	f7ff bfbd 	b.w	801c59c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c624 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c624:	b538      	push	{r3, r4, r5, lr}
 801c626:	4c15      	ldr	r4, [pc, #84]	@ (801c67c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c628:	4605      	mov	r5, r0
 801c62a:	7823      	ldrb	r3, [r4, #0]
 801c62c:	f3bf 8f5b 	dmb	ish
 801c630:	07da      	lsls	r2, r3, #31
 801c632:	d40b      	bmi.n	801c64c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c634:	4620      	mov	r0, r4
 801c636:	f005 febb 	bl	80223b0 <__cxa_guard_acquire>
 801c63a:	b138      	cbz	r0, 801c64c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c63c:	4620      	mov	r0, r4
 801c63e:	f005 fec3 	bl	80223c8 <__cxa_guard_release>
 801c642:	4a0f      	ldr	r2, [pc, #60]	@ (801c680 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c644:	490f      	ldr	r1, [pc, #60]	@ (801c684 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c646:	4810      	ldr	r0, [pc, #64]	@ (801c688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c648:	f005 feab 	bl	80223a2 <__aeabi_atexit>
 801c64c:	4c0f      	ldr	r4, [pc, #60]	@ (801c68c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c64e:	7823      	ldrb	r3, [r4, #0]
 801c650:	f3bf 8f5b 	dmb	ish
 801c654:	07db      	lsls	r3, r3, #31
 801c656:	d40b      	bmi.n	801c670 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c658:	4620      	mov	r0, r4
 801c65a:	f005 fea9 	bl	80223b0 <__cxa_guard_acquire>
 801c65e:	b138      	cbz	r0, 801c670 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c660:	4620      	mov	r0, r4
 801c662:	f005 feb1 	bl	80223c8 <__cxa_guard_release>
 801c666:	4a06      	ldr	r2, [pc, #24]	@ (801c680 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c668:	4909      	ldr	r1, [pc, #36]	@ (801c690 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c66a:	480a      	ldr	r0, [pc, #40]	@ (801c694 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c66c:	f005 fe99 	bl	80223a2 <__aeabi_atexit>
 801c670:	4b05      	ldr	r3, [pc, #20]	@ (801c688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c672:	656b      	str	r3, [r5, #84]	@ 0x54
 801c674:	4b07      	ldr	r3, [pc, #28]	@ (801c694 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c676:	65ab      	str	r3, [r5, #88]	@ 0x58
 801c678:	bd38      	pop	{r3, r4, r5, pc}
 801c67a:	bf00      	nop
 801c67c:	2402db5c 	.word	0x2402db5c
 801c680:	24000000 	.word	0x24000000
 801c684:	0801a04b 	.word	0x0801a04b
 801c688:	2400009c 	.word	0x2400009c
 801c68c:	2402db60 	.word	0x2402db60
 801c690:	0801a049 	.word	0x0801a049
 801c694:	240000a0 	.word	0x240000a0

0801c698 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c698:	b538      	push	{r3, r4, r5, lr}
 801c69a:	4c15      	ldr	r4, [pc, #84]	@ (801c6f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c69c:	4605      	mov	r5, r0
 801c69e:	7823      	ldrb	r3, [r4, #0]
 801c6a0:	f3bf 8f5b 	dmb	ish
 801c6a4:	07da      	lsls	r2, r3, #31
 801c6a6:	d40b      	bmi.n	801c6c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c6a8:	4620      	mov	r0, r4
 801c6aa:	f005 fe81 	bl	80223b0 <__cxa_guard_acquire>
 801c6ae:	b138      	cbz	r0, 801c6c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c6b0:	4620      	mov	r0, r4
 801c6b2:	f005 fe89 	bl	80223c8 <__cxa_guard_release>
 801c6b6:	4a0f      	ldr	r2, [pc, #60]	@ (801c6f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c6b8:	490f      	ldr	r1, [pc, #60]	@ (801c6f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c6ba:	4810      	ldr	r0, [pc, #64]	@ (801c6fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c6bc:	f005 fe71 	bl	80223a2 <__aeabi_atexit>
 801c6c0:	4c0f      	ldr	r4, [pc, #60]	@ (801c700 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c6c2:	7823      	ldrb	r3, [r4, #0]
 801c6c4:	f3bf 8f5b 	dmb	ish
 801c6c8:	07db      	lsls	r3, r3, #31
 801c6ca:	d40b      	bmi.n	801c6e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c6cc:	4620      	mov	r0, r4
 801c6ce:	f005 fe6f 	bl	80223b0 <__cxa_guard_acquire>
 801c6d2:	b138      	cbz	r0, 801c6e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c6d4:	4620      	mov	r0, r4
 801c6d6:	f005 fe77 	bl	80223c8 <__cxa_guard_release>
 801c6da:	4a06      	ldr	r2, [pc, #24]	@ (801c6f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c6dc:	4909      	ldr	r1, [pc, #36]	@ (801c704 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c6de:	480a      	ldr	r0, [pc, #40]	@ (801c708 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c6e0:	f005 fe5f 	bl	80223a2 <__aeabi_atexit>
 801c6e4:	4b05      	ldr	r3, [pc, #20]	@ (801c6fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c6e6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801c6e8:	4b07      	ldr	r3, [pc, #28]	@ (801c708 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c6ea:	652b      	str	r3, [r5, #80]	@ 0x50
 801c6ec:	bd38      	pop	{r3, r4, r5, pc}
 801c6ee:	bf00      	nop
 801c6f0:	2402db4c 	.word	0x2402db4c
 801c6f4:	24000000 	.word	0x24000000
 801c6f8:	0801a04f 	.word	0x0801a04f
 801c6fc:	2400008c 	.word	0x2400008c
 801c700:	2402db50 	.word	0x2402db50
 801c704:	0801a04d 	.word	0x0801a04d
 801c708:	24000090 	.word	0x24000090

0801c70c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801c70c:	b510      	push	{r4, lr}
 801c70e:	4604      	mov	r4, r0
 801c710:	f7ff ff88 	bl	801c624 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c714:	4620      	mov	r0, r4
 801c716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c71a:	f7ff bfbd 	b.w	801c698 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801c71e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801c71e:	b510      	push	{r4, lr}
 801c720:	4604      	mov	r4, r0
 801c722:	f7ff fff3 	bl	801c70c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c726:	4620      	mov	r0, r4
 801c728:	f7ff ff72 	bl	801c610 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c72c:	4620      	mov	r0, r4
 801c72e:	f7ff fe73 	bl	801c418 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c732:	4620      	mov	r0, r4
 801c734:	f7ff fdf2 	bl	801c31c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c738:	4620      	mov	r0, r4
 801c73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c73e:	f7ff bee9 	b.w	801c514 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801c744 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801c744:	b538      	push	{r3, r4, r5, lr}
 801c746:	4c0b      	ldr	r4, [pc, #44]	@ (801c774 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801c748:	4605      	mov	r5, r0
 801c74a:	7823      	ldrb	r3, [r4, #0]
 801c74c:	f3bf 8f5b 	dmb	ish
 801c750:	07db      	lsls	r3, r3, #31
 801c752:	d40b      	bmi.n	801c76c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801c754:	4620      	mov	r0, r4
 801c756:	f005 fe2b 	bl	80223b0 <__cxa_guard_acquire>
 801c75a:	b138      	cbz	r0, 801c76c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801c75c:	4620      	mov	r0, r4
 801c75e:	f005 fe33 	bl	80223c8 <__cxa_guard_release>
 801c762:	4a05      	ldr	r2, [pc, #20]	@ (801c778 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801c764:	4905      	ldr	r1, [pc, #20]	@ (801c77c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801c766:	4806      	ldr	r0, [pc, #24]	@ (801c780 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801c768:	f005 fe1b 	bl	80223a2 <__aeabi_atexit>
 801c76c:	4b04      	ldr	r3, [pc, #16]	@ (801c780 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801c76e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801c770:	bd38      	pop	{r3, r4, r5, pc}
 801c772:	bf00      	nop
 801c774:	2402db40 	.word	0x2402db40
 801c778:	24000000 	.word	0x24000000
 801c77c:	0801a047 	.word	0x0801a047
 801c780:	24000084 	.word	0x24000084

0801c784 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801c784:	b538      	push	{r3, r4, r5, lr}
 801c786:	4c0b      	ldr	r4, [pc, #44]	@ (801c7b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801c788:	4605      	mov	r5, r0
 801c78a:	7823      	ldrb	r3, [r4, #0]
 801c78c:	f3bf 8f5b 	dmb	ish
 801c790:	07db      	lsls	r3, r3, #31
 801c792:	d40b      	bmi.n	801c7ac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801c794:	4620      	mov	r0, r4
 801c796:	f005 fe0b 	bl	80223b0 <__cxa_guard_acquire>
 801c79a:	b138      	cbz	r0, 801c7ac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801c79c:	4620      	mov	r0, r4
 801c79e:	f005 fe13 	bl	80223c8 <__cxa_guard_release>
 801c7a2:	4a05      	ldr	r2, [pc, #20]	@ (801c7b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801c7a4:	4905      	ldr	r1, [pc, #20]	@ (801c7bc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801c7a6:	4806      	ldr	r0, [pc, #24]	@ (801c7c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801c7a8:	f005 fdfb 	bl	80223a2 <__aeabi_atexit>
 801c7ac:	4b04      	ldr	r3, [pc, #16]	@ (801c7c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801c7ae:	662b      	str	r3, [r5, #96]	@ 0x60
 801c7b0:	bd38      	pop	{r3, r4, r5, pc}
 801c7b2:	bf00      	nop
 801c7b4:	2402db44 	.word	0x2402db44
 801c7b8:	24000000 	.word	0x24000000
 801c7bc:	0801a045 	.word	0x0801a045
 801c7c0:	24000088 	.word	0x24000088

0801c7c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801c7c4:	b570      	push	{r4, r5, r6, lr}
 801c7c6:	4d0c      	ldr	r5, [pc, #48]	@ (801c7f8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801c7c8:	4606      	mov	r6, r0
 801c7ca:	4c0c      	ldr	r4, [pc, #48]	@ (801c7fc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801c7cc:	782b      	ldrb	r3, [r5, #0]
 801c7ce:	f3bf 8f5b 	dmb	ish
 801c7d2:	f013 0f01 	tst.w	r3, #1
 801c7d6:	d10d      	bne.n	801c7f4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801c7d8:	4628      	mov	r0, r5
 801c7da:	f005 fde9 	bl	80223b0 <__cxa_guard_acquire>
 801c7de:	b148      	cbz	r0, 801c7f4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801c7e0:	4b07      	ldr	r3, [pc, #28]	@ (801c800 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801c7e2:	4628      	mov	r0, r5
 801c7e4:	6023      	str	r3, [r4, #0]
 801c7e6:	f005 fdef 	bl	80223c8 <__cxa_guard_release>
 801c7ea:	4a06      	ldr	r2, [pc, #24]	@ (801c804 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801c7ec:	4620      	mov	r0, r4
 801c7ee:	4906      	ldr	r1, [pc, #24]	@ (801c808 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801c7f0:	f005 fdd7 	bl	80223a2 <__aeabi_atexit>
 801c7f4:	6674      	str	r4, [r6, #100]	@ 0x64
 801c7f6:	bd70      	pop	{r4, r5, r6, pc}
 801c7f8:	2402db48 	.word	0x2402db48
 801c7fc:	2402db9c 	.word	0x2402db9c
 801c800:	08025ba8 	.word	0x08025ba8
 801c804:	24000000 	.word	0x24000000
 801c808:	0801a043 	.word	0x0801a043

0801c80c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801c80c:	b510      	push	{r4, lr}
 801c80e:	4604      	mov	r4, r0
 801c810:	f7ff ff98 	bl	801c744 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801c814:	4620      	mov	r0, r4
 801c816:	f7ff ffb5 	bl	801c784 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801c81a:	4620      	mov	r0, r4
 801c81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c820:	f7ff bfd0 	b.w	801c7c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801c824 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c828:	b087      	sub	sp, #28
 801c82a:	788d      	ldrb	r5, [r1, #2]
 801c82c:	f891 9000 	ldrb.w	r9, [r1]
 801c830:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801c834:	9501      	str	r5, [sp, #4]
 801c836:	784d      	ldrb	r5, [r1, #1]
 801c838:	9203      	str	r2, [sp, #12]
 801c83a:	9502      	str	r5, [sp, #8]
 801c83c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801c840:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801c844:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801c848:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801c84c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801c850:	fb06 0708 	mla	r7, r6, r8, r0
 801c854:	2e00      	cmp	r6, #0
 801c856:	eb02 0a07 	add.w	sl, r2, r7
 801c85a:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801c85e:	9d01      	ldr	r5, [sp, #4]
 801c860:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801c864:	ea45 0509 	orr.w	r5, r5, r9
 801c868:	9505      	str	r5, [sp, #20]
 801c86a:	f2c0 80b2 	blt.w	801c9d2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c86e:	45b3      	cmp	fp, r6
 801c870:	f340 80af 	ble.w	801c9d2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c874:	2800      	cmp	r0, #0
 801c876:	f2c0 80aa 	blt.w	801c9ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c87a:	4580      	cmp	r8, r0
 801c87c:	f340 80a7 	ble.w	801c9ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c880:	9a03      	ldr	r2, [sp, #12]
 801c882:	5dd7      	ldrb	r7, [r2, r7]
 801c884:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c888:	441f      	add	r7, r3
 801c88a:	1c42      	adds	r2, r0, #1
 801c88c:	f100 80a4 	bmi.w	801c9d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c890:	4590      	cmp	r8, r2
 801c892:	f340 80a1 	ble.w	801c9d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c896:	2c00      	cmp	r4, #0
 801c898:	f000 809e 	beq.w	801c9d8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c89c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c8a4:	441d      	add	r5, r3
 801c8a6:	3601      	adds	r6, #1
 801c8a8:	f100 809a 	bmi.w	801c9e0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c8ac:	45b3      	cmp	fp, r6
 801c8ae:	f340 8097 	ble.w	801c9e0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c8b2:	f1bc 0f00 	cmp.w	ip, #0
 801c8b6:	f000 8093 	beq.w	801c9e0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c8ba:	2800      	cmp	r0, #0
 801c8bc:	f2c0 808e 	blt.w	801c9dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c8c0:	4580      	cmp	r8, r0
 801c8c2:	f340 808b 	ble.w	801c9dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c8c6:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801c8ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c8ce:	441e      	add	r6, r3
 801c8d0:	3001      	adds	r0, #1
 801c8d2:	f100 8088 	bmi.w	801c9e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c8d6:	4580      	cmp	r8, r0
 801c8d8:	f340 8085 	ble.w	801c9e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c8dc:	2c00      	cmp	r4, #0
 801c8de:	f000 8082 	beq.w	801c9e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c8e2:	44d0      	add	r8, sl
 801c8e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c8e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8ec:	4413      	add	r3, r2
 801c8ee:	b2a4      	uxth	r4, r4
 801c8f0:	f895 a000 	ldrb.w	sl, [r5]
 801c8f4:	fa1f fc8c 	uxth.w	ip, ip
 801c8f8:	fb04 fb0c 	mul.w	fp, r4, ip
 801c8fc:	0124      	lsls	r4, r4, #4
 801c8fe:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801c902:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801c906:	eba4 040b 	sub.w	r4, r4, fp
 801c90a:	fa1f f08c 	uxth.w	r0, ip
 801c90e:	b2a2      	uxth	r2, r4
 801c910:	783c      	ldrb	r4, [r7, #0]
 801c912:	eba8 0800 	sub.w	r8, r8, r0
 801c916:	fa1f fc8e 	uxth.w	ip, lr
 801c91a:	fb02 fa0a 	mul.w	sl, r2, sl
 801c91e:	ea6f 0e0e 	mvn.w	lr, lr
 801c922:	fa1f f888 	uxth.w	r8, r8
 801c926:	fa5f fe8e 	uxtb.w	lr, lr
 801c92a:	fb08 aa04 	mla	sl, r8, r4, sl
 801c92e:	7834      	ldrb	r4, [r6, #0]
 801c930:	fb19 f90e 	smulbb	r9, r9, lr
 801c934:	fb00 aa04 	mla	sl, r0, r4, sl
 801c938:	781c      	ldrb	r4, [r3, #0]
 801c93a:	fb0b a404 	mla	r4, fp, r4, sl
 801c93e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c942:	fb04 990c 	mla	r9, r4, ip, r9
 801c946:	fa1f f989 	uxth.w	r9, r9
 801c94a:	f109 0401 	add.w	r4, r9, #1
 801c94e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c952:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c956:	f881 9000 	strb.w	r9, [r1]
 801c95a:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c95e:	787c      	ldrb	r4, [r7, #1]
 801c960:	fb02 f909 	mul.w	r9, r2, r9
 801c964:	fb08 9904 	mla	r9, r8, r4, r9
 801c968:	7874      	ldrb	r4, [r6, #1]
 801c96a:	fb00 9904 	mla	r9, r0, r4, r9
 801c96e:	785c      	ldrb	r4, [r3, #1]
 801c970:	fb0b 9404 	mla	r4, fp, r4, r9
 801c974:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801c978:	9c02      	ldr	r4, [sp, #8]
 801c97a:	fb14 f90e 	smulbb	r9, r4, lr
 801c97e:	fb0a 940c 	mla	r4, sl, ip, r9
 801c982:	b2a4      	uxth	r4, r4
 801c984:	f104 0901 	add.w	r9, r4, #1
 801c988:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801c98c:	1224      	asrs	r4, r4, #8
 801c98e:	704c      	strb	r4, [r1, #1]
 801c990:	78ad      	ldrb	r5, [r5, #2]
 801c992:	78bc      	ldrb	r4, [r7, #2]
 801c994:	436a      	muls	r2, r5
 801c996:	789b      	ldrb	r3, [r3, #2]
 801c998:	fb08 2204 	mla	r2, r8, r4, r2
 801c99c:	78b4      	ldrb	r4, [r6, #2]
 801c99e:	fb00 2004 	mla	r0, r0, r4, r2
 801c9a2:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c9a6:	9b01      	ldr	r3, [sp, #4]
 801c9a8:	fb13 fe0e 	smulbb	lr, r3, lr
 801c9ac:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c9b0:	fb0b ec0c 	mla	ip, fp, ip, lr
 801c9b4:	fa1f fc8c 	uxth.w	ip, ip
 801c9b8:	f10c 0e01 	add.w	lr, ip, #1
 801c9bc:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c9c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c9c4:	f881 c002 	strb.w	ip, [r1, #2]
 801c9c8:	b007      	add	sp, #28
 801c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9ce:	af05      	add	r7, sp, #20
 801c9d0:	e75b      	b.n	801c88a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801c9d2:	ad05      	add	r5, sp, #20
 801c9d4:	462f      	mov	r7, r5
 801c9d6:	e766      	b.n	801c8a6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c9d8:	ad05      	add	r5, sp, #20
 801c9da:	e764      	b.n	801c8a6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c9dc:	ae05      	add	r6, sp, #20
 801c9de:	e777      	b.n	801c8d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801c9e0:	ab05      	add	r3, sp, #20
 801c9e2:	461e      	mov	r6, r3
 801c9e4:	e783      	b.n	801c8ee <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801c9e6:	ab05      	add	r3, sp, #20
 801c9e8:	e781      	b.n	801c8ee <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801c9ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9ee:	b093      	sub	sp, #76	@ 0x4c
 801c9f0:	9210      	str	r2, [sp, #64]	@ 0x40
 801c9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c9f6:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801c9fa:	9011      	str	r0, [sp, #68]	@ 0x44
 801c9fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801c9fe:	6850      	ldr	r0, [r2, #4]
 801ca00:	910d      	str	r1, [sp, #52]	@ 0x34
 801ca02:	6812      	ldr	r2, [r2, #0]
 801ca04:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ca08:	fb00 1303 	mla	r3, r0, r3, r1
 801ca0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca10:	18d3      	adds	r3, r2, r3
 801ca12:	930a      	str	r3, [sp, #40]	@ 0x28
 801ca14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca1c:	685c      	ldr	r4, [r3, #4]
 801ca1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca20:	3404      	adds	r4, #4
 801ca22:	43db      	mvns	r3, r3
 801ca24:	b2db      	uxtb	r3, r3
 801ca26:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ca28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	dc03      	bgt.n	801ca36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ca2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	f340 8250 	ble.w	801ced6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801ca36:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ca3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ca40:	1e48      	subs	r0, r1, #1
 801ca42:	1e55      	subs	r5, r2, #1
 801ca44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	f340 80ee 	ble.w	801cc28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ca4c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801ca4e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ca50:	1436      	asrs	r6, r6, #16
 801ca52:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ca56:	d406      	bmi.n	801ca66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca58:	4286      	cmp	r6, r0
 801ca5a:	da04      	bge.n	801ca66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	db02      	blt.n	801ca66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca60:	42ab      	cmp	r3, r5
 801ca62:	f2c0 80e2 	blt.w	801cc2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ca66:	3601      	adds	r6, #1
 801ca68:	f100 80cf 	bmi.w	801cc0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ca6c:	42b1      	cmp	r1, r6
 801ca6e:	f2c0 80cc 	blt.w	801cc0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ca72:	3301      	adds	r3, #1
 801ca74:	f100 80c9 	bmi.w	801cc0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ca78:	429a      	cmp	r2, r3
 801ca7a:	f2c0 80c6 	blt.w	801cc0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ca7e:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801ca82:	f1bb 0f00 	cmp.w	fp, #0
 801ca86:	f340 80f1 	ble.w	801cc6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801ca8a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ca8c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ca8e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801ca90:	141d      	asrs	r5, r3, #16
 801ca92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ca94:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ca98:	68c7      	ldr	r7, [r0, #12]
 801ca9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ca9c:	1418      	asrs	r0, r3, #16
 801ca9e:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801caa2:	6892      	ldr	r2, [r2, #8]
 801caa4:	f100 8137 	bmi.w	801cd16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801caa8:	f102 3cff 	add.w	ip, r2, #4294967295
 801caac:	4560      	cmp	r0, ip
 801caae:	f280 8132 	bge.w	801cd16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cab2:	2d00      	cmp	r5, #0
 801cab4:	f2c0 812f 	blt.w	801cd16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cab8:	f107 3cff 	add.w	ip, r7, #4294967295
 801cabc:	4565      	cmp	r5, ip
 801cabe:	f280 812a 	bge.w	801cd16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cac2:	b212      	sxth	r2, r2
 801cac4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cac6:	fb05 0002 	mla	r0, r5, r2, r0
 801caca:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cacc:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cad0:	4405      	add	r5, r0
 801cad2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cad6:	eb04 0e0c 	add.w	lr, r4, ip
 801cada:	f1b8 0f00 	cmp.w	r8, #0
 801cade:	f000 810c 	beq.w	801ccfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801cae2:	786f      	ldrb	r7, [r5, #1]
 801cae4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cae8:	4427      	add	r7, r4
 801caea:	2900      	cmp	r1, #0
 801caec:	f000 810d 	beq.w	801cd0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801caf0:	18a8      	adds	r0, r5, r2
 801caf2:	5caa      	ldrb	r2, [r5, r2]
 801caf4:	7840      	ldrb	r0, [r0, #1]
 801caf6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cafa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cafe:	4422      	add	r2, r4
 801cb00:	4420      	add	r0, r4
 801cb02:	fa1f f388 	uxth.w	r3, r8
 801cb06:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801cb0a:	b289      	uxth	r1, r1
 801cb0c:	f897 c000 	ldrb.w	ip, [r7]
 801cb10:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801cb14:	fb03 f901 	mul.w	r9, r3, r1
 801cb18:	011b      	lsls	r3, r3, #4
 801cb1a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cb1e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801cb22:	eba3 0309 	sub.w	r3, r3, r9
 801cb26:	b289      	uxth	r1, r1
 801cb28:	b29b      	uxth	r3, r3
 801cb2a:	eba8 0801 	sub.w	r8, r8, r1
 801cb2e:	fb03 fc0c 	mul.w	ip, r3, ip
 801cb32:	fa1f f888 	uxth.w	r8, r8
 801cb36:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cb3a:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cb3e:	f892 a000 	ldrb.w	sl, [r2]
 801cb42:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cb46:	f890 a000 	ldrb.w	sl, [r0]
 801cb4a:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cb4e:	f896 a000 	ldrb.w	sl, [r6]
 801cb52:	fb1a fa03 	smulbb	sl, sl, r3
 801cb56:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cb5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb5c:	fb0c ac05 	mla	ip, ip, r5, sl
 801cb60:	fa1f fc8c 	uxth.w	ip, ip
 801cb64:	f10c 0a01 	add.w	sl, ip, #1
 801cb68:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cb6c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb70:	f886 a000 	strb.w	sl, [r6]
 801cb74:	f897 c001 	ldrb.w	ip, [r7, #1]
 801cb78:	f89e a001 	ldrb.w	sl, [lr, #1]
 801cb7c:	fb03 fc0c 	mul.w	ip, r3, ip
 801cb80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cb82:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cb86:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cb8a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cb8e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cb92:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cb96:	f896 a001 	ldrb.w	sl, [r6, #1]
 801cb9a:	fb1a fa03 	smulbb	sl, sl, r3
 801cb9e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cba4:	fb0c ac05 	mla	ip, ip, r5, sl
 801cba8:	fa1f fc8c 	uxth.w	ip, ip
 801cbac:	f10c 0a01 	add.w	sl, ip, #1
 801cbb0:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801cbb4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cbb8:	f886 c001 	strb.w	ip, [r6, #1]
 801cbbc:	78bf      	ldrb	r7, [r7, #2]
 801cbbe:	f89e c002 	ldrb.w	ip, [lr, #2]
 801cbc2:	437b      	muls	r3, r7
 801cbc4:	fb08 330c 	mla	r3, r8, ip, r3
 801cbc8:	f892 c002 	ldrb.w	ip, [r2, #2]
 801cbcc:	7882      	ldrb	r2, [r0, #2]
 801cbce:	fb01 310c 	mla	r1, r1, ip, r3
 801cbd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cbd4:	fb09 1902 	mla	r9, r9, r2, r1
 801cbd8:	78b1      	ldrb	r1, [r6, #2]
 801cbda:	fb11 f103 	smulbb	r1, r1, r3
 801cbde:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cbe2:	fb09 1505 	mla	r5, r9, r5, r1
 801cbe6:	b2ad      	uxth	r5, r5
 801cbe8:	1c6b      	adds	r3, r5, #1
 801cbea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cbee:	122d      	asrs	r5, r5, #8
 801cbf0:	70b5      	strb	r5, [r6, #2]
 801cbf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cbf4:	3603      	adds	r6, #3
 801cbf6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801cbf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cbfc:	4413      	add	r3, r2
 801cbfe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cc00:	931d      	str	r3, [sp, #116]	@ 0x74
 801cc02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cc04:	4413      	add	r3, r2
 801cc06:	931e      	str	r3, [sp, #120]	@ 0x78
 801cc08:	e73b      	b.n	801ca82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cc0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cc0c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801cc0e:	4433      	add	r3, r6
 801cc10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cc12:	931d      	str	r3, [sp, #116]	@ 0x74
 801cc14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cc16:	4433      	add	r3, r6
 801cc18:	931e      	str	r3, [sp, #120]	@ 0x78
 801cc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc1c:	3b01      	subs	r3, #1
 801cc1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc22:	3303      	adds	r3, #3
 801cc24:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc26:	e70d      	b.n	801ca44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cc28:	d028      	beq.n	801cc7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801cc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc2c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801cc2e:	3b01      	subs	r3, #1
 801cc30:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801cc32:	fb00 5003 	mla	r0, r0, r3, r5
 801cc36:	1400      	asrs	r0, r0, #16
 801cc38:	f53f af21 	bmi.w	801ca7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cc3c:	3901      	subs	r1, #1
 801cc3e:	4288      	cmp	r0, r1
 801cc40:	f6bf af1d 	bge.w	801ca7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cc44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801cc46:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801cc48:	fb01 0303 	mla	r3, r1, r3, r0
 801cc4c:	141b      	asrs	r3, r3, #16
 801cc4e:	f53f af16 	bmi.w	801ca7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cc52:	3a01      	subs	r2, #1
 801cc54:	4293      	cmp	r3, r2
 801cc56:	f6bf af12 	bge.w	801ca7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cc5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801cc60:	1cdf      	adds	r7, r3, #3
 801cc62:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801cc66:	f1b9 0f00 	cmp.w	r9, #0
 801cc6a:	dc73      	bgt.n	801cd54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801cc6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc78:	441a      	add	r2, r3
 801cc7a:	920a      	str	r2, [sp, #40]	@ 0x28
 801cc7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	f340 8129 	ble.w	801ced6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801cc84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cc88:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cc8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc92:	eef0 6a62 	vmov.f32	s13, s5
 801cc96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cc9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cca2:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801cca6:	eef0 6a43 	vmov.f32	s13, s6
 801ccaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccae:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801ccb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ccb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ccba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ccc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ccca:	ee12 2a90 	vmov	r2, s5
 801ccce:	eef0 2a47 	vmov.f32	s5, s14
 801ccd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccd6:	ee13 2a10 	vmov	r2, s6
 801ccda:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ccdc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ccde:	eeb0 3a67 	vmov.f32	s6, s15
 801cce2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cce6:	9320      	str	r3, [sp, #128]	@ 0x80
 801cce8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ccea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ccec:	3b01      	subs	r3, #1
 801ccee:	930d      	str	r3, [sp, #52]	@ 0x34
 801ccf0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ccf2:	bf08      	it	eq
 801ccf4:	4613      	moveq	r3, r2
 801ccf6:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccf8:	e696      	b.n	801ca28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ccfa:	b149      	cbz	r1, 801cd10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ccfc:	5caa      	ldrb	r2, [r5, r2]
 801ccfe:	4670      	mov	r0, lr
 801cd00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd04:	4422      	add	r2, r4
 801cd06:	4677      	mov	r7, lr
 801cd08:	e6fb      	b.n	801cb02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801cd0a:	4670      	mov	r0, lr
 801cd0c:	4672      	mov	r2, lr
 801cd0e:	e6f8      	b.n	801cb02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801cd10:	4670      	mov	r0, lr
 801cd12:	4672      	mov	r2, lr
 801cd14:	e7f7      	b.n	801cd06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801cd16:	f110 0c01 	adds.w	ip, r0, #1
 801cd1a:	f53f af6a 	bmi.w	801cbf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cd1e:	4562      	cmp	r2, ip
 801cd20:	f6ff af67 	blt.w	801cbf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cd24:	f115 0c01 	adds.w	ip, r5, #1
 801cd28:	f53f af63 	bmi.w	801cbf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cd2c:	4567      	cmp	r7, ip
 801cd2e:	f6ff af60 	blt.w	801cbf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cd32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd34:	b23f      	sxth	r7, r7
 801cd36:	b212      	sxth	r2, r2
 801cd38:	9002      	str	r0, [sp, #8]
 801cd3a:	9701      	str	r7, [sp, #4]
 801cd3c:	9200      	str	r2, [sp, #0]
 801cd3e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cd40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cd42:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801cd46:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801cd4a:	4623      	mov	r3, r4
 801cd4c:	4631      	mov	r1, r6
 801cd4e:	f7ff fd69 	bl	801c824 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801cd52:	e74e      	b.n	801cbf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cd54:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cd56:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801cd58:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cd5c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801cd5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cd60:	1400      	asrs	r0, r0, #16
 801cd62:	142d      	asrs	r5, r5, #16
 801cd64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cd66:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cd6a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cd6e:	fb02 5000 	mla	r0, r2, r0, r5
 801cd72:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cd74:	f815 e000 	ldrb.w	lr, [r5, r0]
 801cd78:	eb05 0c00 	add.w	ip, r5, r0
 801cd7c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cd80:	eb04 060e 	add.w	r6, r4, lr
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	f000 8097 	beq.w	801ceb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801cd8a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801cd8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd92:	4425      	add	r5, r4
 801cd94:	2900      	cmp	r1, #0
 801cd96:	f000 8098 	beq.w	801ceca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801cd9a:	eb0c 0002 	add.w	r0, ip, r2
 801cd9e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cda2:	7840      	ldrb	r0, [r0, #1]
 801cda4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cda8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cdac:	4422      	add	r2, r4
 801cdae:	4420      	add	r0, r4
 801cdb0:	b29b      	uxth	r3, r3
 801cdb2:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801cdb6:	b289      	uxth	r1, r1
 801cdb8:	f895 e000 	ldrb.w	lr, [r5]
 801cdbc:	3703      	adds	r7, #3
 801cdbe:	f109 39ff 	add.w	r9, r9, #4294967295
 801cdc2:	fb03 f801 	mul.w	r8, r3, r1
 801cdc6:	011b      	lsls	r3, r3, #4
 801cdc8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801cdcc:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801cdd0:	eba3 0308 	sub.w	r3, r3, r8
 801cdd4:	b289      	uxth	r1, r1
 801cdd6:	b29b      	uxth	r3, r3
 801cdd8:	ebac 0c01 	sub.w	ip, ip, r1
 801cddc:	fb03 fe0e 	mul.w	lr, r3, lr
 801cde0:	fa1f fc8c 	uxth.w	ip, ip
 801cde4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cde8:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cdec:	f892 b000 	ldrb.w	fp, [r2]
 801cdf0:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cdf4:	f890 b000 	ldrb.w	fp, [r0]
 801cdf8:	fb08 ee0b 	mla	lr, r8, fp, lr
 801cdfc:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ce00:	fb1b fb03 	smulbb	fp, fp, r3
 801ce04:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ce08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce0a:	fb0e be0a 	mla	lr, lr, sl, fp
 801ce0e:	fa1f fe8e 	uxth.w	lr, lr
 801ce12:	f10e 0b01 	add.w	fp, lr, #1
 801ce16:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ce1a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce1e:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ce22:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ce26:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ce2a:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce30:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ce34:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ce38:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce3c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ce40:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ce44:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ce48:	fb1b fb03 	smulbb	fp, fp, r3
 801ce4c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ce50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce52:	fb0e be0a 	mla	lr, lr, sl, fp
 801ce56:	fa1f fe8e 	uxth.w	lr, lr
 801ce5a:	f10e 0b01 	add.w	fp, lr, #1
 801ce5e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ce62:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce66:	f807 ec05 	strb.w	lr, [r7, #-5]
 801ce6a:	78ad      	ldrb	r5, [r5, #2]
 801ce6c:	78b6      	ldrb	r6, [r6, #2]
 801ce6e:	436b      	muls	r3, r5
 801ce70:	7895      	ldrb	r5, [r2, #2]
 801ce72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ce74:	fb0c 3306 	mla	r3, ip, r6, r3
 801ce78:	fb01 3305 	mla	r3, r1, r5, r3
 801ce7c:	7885      	ldrb	r5, [r0, #2]
 801ce7e:	fb08 3805 	mla	r8, r8, r5, r3
 801ce82:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801ce86:	fb13 f302 	smulbb	r3, r3, r2
 801ce8a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ce8e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801ce90:	fb08 380a 	mla	r8, r8, sl, r3
 801ce94:	fa1f f888 	uxth.w	r8, r8
 801ce98:	f108 0301 	add.w	r3, r8, #1
 801ce9c:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801cea0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cea2:	4413      	add	r3, r2
 801cea4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cea6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ceaa:	931d      	str	r3, [sp, #116]	@ 0x74
 801ceac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ceae:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ceb2:	4413      	add	r3, r2
 801ceb4:	931e      	str	r3, [sp, #120]	@ 0x78
 801ceb6:	e6d6      	b.n	801cc66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ceb8:	b151      	cbz	r1, 801ced0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ceba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cebe:	4630      	mov	r0, r6
 801cec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cec4:	4422      	add	r2, r4
 801cec6:	4635      	mov	r5, r6
 801cec8:	e772      	b.n	801cdb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ceca:	4630      	mov	r0, r6
 801cecc:	4632      	mov	r2, r6
 801cece:	e76f      	b.n	801cdb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ced0:	4630      	mov	r0, r6
 801ced2:	4632      	mov	r2, r6
 801ced4:	e7f7      	b.n	801cec6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ced6:	b013      	add	sp, #76	@ 0x4c
 801ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cedc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801cedc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cee0:	784c      	ldrb	r4, [r1, #1]
 801cee2:	f891 a002 	ldrb.w	sl, [r1, #2]
 801cee6:	0224      	lsls	r4, r4, #8
 801cee8:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ceec:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801cef0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801cef4:	f891 a000 	ldrb.w	sl, [r1]
 801cef8:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801cefc:	ea44 040a 	orr.w	r4, r4, sl
 801cf00:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801cf04:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801cf08:	9401      	str	r4, [sp, #4]
 801cf0a:	fb05 c70e 	mla	r7, r5, lr, ip
 801cf0e:	2d00      	cmp	r5, #0
 801cf10:	eb02 0807 	add.w	r8, r2, r7
 801cf14:	db72      	blt.n	801cffc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801cf16:	45a9      	cmp	r9, r5
 801cf18:	dd70      	ble.n	801cffc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801cf1a:	f1bc 0f00 	cmp.w	ip, #0
 801cf1e:	db6b      	blt.n	801cff8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801cf20:	45e6      	cmp	lr, ip
 801cf22:	dd69      	ble.n	801cff8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801cf24:	5dd7      	ldrb	r7, [r2, r7]
 801cf26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cf2a:	441f      	add	r7, r3
 801cf2c:	f11c 0201 	adds.w	r2, ip, #1
 801cf30:	d467      	bmi.n	801d002 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801cf32:	4596      	cmp	lr, r2
 801cf34:	dd65      	ble.n	801d002 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801cf36:	2800      	cmp	r0, #0
 801cf38:	d063      	beq.n	801d002 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801cf3a:	f898 4001 	ldrb.w	r4, [r8, #1]
 801cf3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf42:	441c      	add	r4, r3
 801cf44:	3501      	adds	r5, #1
 801cf46:	d460      	bmi.n	801d00a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801cf48:	45a9      	cmp	r9, r5
 801cf4a:	dd5e      	ble.n	801d00a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801cf4c:	2e00      	cmp	r6, #0
 801cf4e:	d05c      	beq.n	801d00a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801cf50:	f1bc 0f00 	cmp.w	ip, #0
 801cf54:	db57      	blt.n	801d006 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801cf56:	45e6      	cmp	lr, ip
 801cf58:	dd55      	ble.n	801d006 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801cf5a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801cf5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf62:	441d      	add	r5, r3
 801cf64:	f11c 0201 	adds.w	r2, ip, #1
 801cf68:	d452      	bmi.n	801d010 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801cf6a:	4596      	cmp	lr, r2
 801cf6c:	dd50      	ble.n	801d010 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801cf6e:	2800      	cmp	r0, #0
 801cf70:	d04e      	beq.n	801d010 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801cf72:	44c6      	add	lr, r8
 801cf74:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cf78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf7c:	4413      	add	r3, r2
 801cf7e:	b280      	uxth	r0, r0
 801cf80:	f897 8000 	ldrb.w	r8, [r7]
 801cf84:	b2b2      	uxth	r2, r6
 801cf86:	fb00 f602 	mul.w	r6, r0, r2
 801cf8a:	0100      	lsls	r0, r0, #4
 801cf8c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801cf90:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801cf94:	1b80      	subs	r0, r0, r6
 801cf96:	fa1f fc82 	uxth.w	ip, r2
 801cf9a:	b282      	uxth	r2, r0
 801cf9c:	7820      	ldrb	r0, [r4, #0]
 801cf9e:	ebae 0e0c 	sub.w	lr, lr, ip
 801cfa2:	4350      	muls	r0, r2
 801cfa4:	fa1f fe8e 	uxth.w	lr, lr
 801cfa8:	fb0e 0808 	mla	r8, lr, r8, r0
 801cfac:	7828      	ldrb	r0, [r5, #0]
 801cfae:	fb0c 8800 	mla	r8, ip, r0, r8
 801cfb2:	7818      	ldrb	r0, [r3, #0]
 801cfb4:	fb06 8000 	mla	r0, r6, r0, r8
 801cfb8:	1200      	asrs	r0, r0, #8
 801cfba:	7008      	strb	r0, [r1, #0]
 801cfbc:	7860      	ldrb	r0, [r4, #1]
 801cfbe:	f897 8001 	ldrb.w	r8, [r7, #1]
 801cfc2:	4350      	muls	r0, r2
 801cfc4:	fb0e 0808 	mla	r8, lr, r8, r0
 801cfc8:	7868      	ldrb	r0, [r5, #1]
 801cfca:	fb0c 8800 	mla	r8, ip, r0, r8
 801cfce:	7858      	ldrb	r0, [r3, #1]
 801cfd0:	fb06 8000 	mla	r0, r6, r0, r8
 801cfd4:	1200      	asrs	r0, r0, #8
 801cfd6:	7048      	strb	r0, [r1, #1]
 801cfd8:	78a0      	ldrb	r0, [r4, #2]
 801cfda:	78bf      	ldrb	r7, [r7, #2]
 801cfdc:	4350      	muls	r0, r2
 801cfde:	78aa      	ldrb	r2, [r5, #2]
 801cfe0:	fb0e 0007 	mla	r0, lr, r7, r0
 801cfe4:	fb0c 0c02 	mla	ip, ip, r2, r0
 801cfe8:	789a      	ldrb	r2, [r3, #2]
 801cfea:	fb06 c202 	mla	r2, r6, r2, ip
 801cfee:	1212      	asrs	r2, r2, #8
 801cff0:	708a      	strb	r2, [r1, #2]
 801cff2:	b002      	add	sp, #8
 801cff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cff8:	af01      	add	r7, sp, #4
 801cffa:	e797      	b.n	801cf2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801cffc:	ac01      	add	r4, sp, #4
 801cffe:	4627      	mov	r7, r4
 801d000:	e7a0      	b.n	801cf44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d002:	ac01      	add	r4, sp, #4
 801d004:	e79e      	b.n	801cf44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d006:	ad01      	add	r5, sp, #4
 801d008:	e7ac      	b.n	801cf64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d00a:	ab01      	add	r3, sp, #4
 801d00c:	461d      	mov	r5, r3
 801d00e:	e7b6      	b.n	801cf7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d010:	ab01      	add	r3, sp, #4
 801d012:	e7b4      	b.n	801cf7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d014 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d018:	b08d      	sub	sp, #52	@ 0x34
 801d01a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d01e:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801d022:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d024:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d026:	9306      	str	r3, [sp, #24]
 801d028:	6850      	ldr	r0, [r2, #4]
 801d02a:	6812      	ldr	r2, [r2, #0]
 801d02c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d02e:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801d032:	fb00 1303 	mla	r3, r0, r3, r1
 801d036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d03a:	18d3      	adds	r3, r2, r3
 801d03c:	9307      	str	r3, [sp, #28]
 801d03e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d040:	681b      	ldr	r3, [r3, #0]
 801d042:	9308      	str	r3, [sp, #32]
 801d044:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d046:	685d      	ldr	r5, [r3, #4]
 801d048:	3504      	adds	r5, #4
 801d04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	dc03      	bgt.n	801d058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d052:	2b00      	cmp	r3, #0
 801d054:	f340 81e6 	ble.w	801d424 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d058:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d05a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d05e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d062:	1e48      	subs	r0, r1, #1
 801d064:	1e56      	subs	r6, r2, #1
 801d066:	9b06      	ldr	r3, [sp, #24]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	f340 80bd 	ble.w	801d1e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d06e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d070:	1427      	asrs	r7, r4, #16
 801d072:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d076:	d406      	bmi.n	801d086 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d078:	4287      	cmp	r7, r0
 801d07a:	da04      	bge.n	801d086 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	db02      	blt.n	801d086 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d080:	42b3      	cmp	r3, r6
 801d082:	f2c0 80b2 	blt.w	801d1ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d086:	3701      	adds	r7, #1
 801d088:	f100 80a1 	bmi.w	801d1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d08c:	42b9      	cmp	r1, r7
 801d08e:	f2c0 809e 	blt.w	801d1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d092:	3301      	adds	r3, #1
 801d094:	f100 809b 	bmi.w	801d1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d098:	429a      	cmp	r2, r3
 801d09a:	f2c0 8098 	blt.w	801d1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d09e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d0a2:	f1bb 0f00 	cmp.w	fp, #0
 801d0a6:	f340 80bf 	ble.w	801d228 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d0aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d0ac:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d0ae:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d0b0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d0b4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d0b8:	1420      	asrs	r0, r4, #16
 801d0ba:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d0bc:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d0c0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d0c4:	6892      	ldr	r2, [r2, #8]
 801d0c6:	f100 8103 	bmi.w	801d2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d0ca:	f102 3eff 	add.w	lr, r2, #4294967295
 801d0ce:	4570      	cmp	r0, lr
 801d0d0:	f280 80fe 	bge.w	801d2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d0d4:	2f00      	cmp	r7, #0
 801d0d6:	f2c0 80fb 	blt.w	801d2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d0da:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d0de:	4577      	cmp	r7, lr
 801d0e0:	f280 80f6 	bge.w	801d2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d0e4:	b212      	sxth	r2, r2
 801d0e6:	fb07 0002 	mla	r0, r7, r2, r0
 801d0ea:	9f08      	ldr	r7, [sp, #32]
 801d0ec:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d0f0:	eb07 0e00 	add.w	lr, r7, r0
 801d0f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d0f8:	eb05 0c08 	add.w	ip, r5, r8
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	f000 80d8 	beq.w	801d2b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d102:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d106:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d10a:	442f      	add	r7, r5
 801d10c:	2900      	cmp	r1, #0
 801d10e:	f000 80d9 	beq.w	801d2c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d112:	eb0e 0002 	add.w	r0, lr, r2
 801d116:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d11a:	7840      	ldrb	r0, [r0, #1]
 801d11c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d120:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d124:	442a      	add	r2, r5
 801d126:	4428      	add	r0, r5
 801d128:	b29b      	uxth	r3, r3
 801d12a:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d12e:	b289      	uxth	r1, r1
 801d130:	f897 8000 	ldrb.w	r8, [r7]
 801d134:	fb03 f901 	mul.w	r9, r3, r1
 801d138:	011b      	lsls	r3, r3, #4
 801d13a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d13e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d142:	eba3 0309 	sub.w	r3, r3, r9
 801d146:	b289      	uxth	r1, r1
 801d148:	b29b      	uxth	r3, r3
 801d14a:	ebae 0e01 	sub.w	lr, lr, r1
 801d14e:	fb03 f808 	mul.w	r8, r3, r8
 801d152:	fa1f fe8e 	uxth.w	lr, lr
 801d156:	fb0e 880a 	mla	r8, lr, sl, r8
 801d15a:	f892 a000 	ldrb.w	sl, [r2]
 801d15e:	fb01 880a 	mla	r8, r1, sl, r8
 801d162:	f890 a000 	ldrb.w	sl, [r0]
 801d166:	fb09 880a 	mla	r8, r9, sl, r8
 801d16a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d16e:	f886 8000 	strb.w	r8, [r6]
 801d172:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d176:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d17a:	fb03 f808 	mul.w	r8, r3, r8
 801d17e:	fb0e 880a 	mla	r8, lr, sl, r8
 801d182:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d186:	fb01 880a 	mla	r8, r1, sl, r8
 801d18a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d18e:	fb09 880a 	mla	r8, r9, sl, r8
 801d192:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d196:	f886 8001 	strb.w	r8, [r6, #1]
 801d19a:	78bf      	ldrb	r7, [r7, #2]
 801d19c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d1a0:	437b      	muls	r3, r7
 801d1a2:	7892      	ldrb	r2, [r2, #2]
 801d1a4:	fb0e 330c 	mla	r3, lr, ip, r3
 801d1a8:	fb01 3102 	mla	r1, r1, r2, r3
 801d1ac:	7882      	ldrb	r2, [r0, #2]
 801d1ae:	fb09 1902 	mla	r9, r9, r2, r1
 801d1b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1b6:	f886 9002 	strb.w	r9, [r6, #2]
 801d1ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d1bc:	3603      	adds	r6, #3
 801d1be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d1c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d1c4:	441c      	add	r4, r3
 801d1c6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d1c8:	4413      	add	r3, r2
 801d1ca:	9318      	str	r3, [sp, #96]	@ 0x60
 801d1cc:	e769      	b.n	801d0a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d1ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d1d0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d1d2:	441c      	add	r4, r3
 801d1d4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d1d6:	443b      	add	r3, r7
 801d1d8:	9318      	str	r3, [sp, #96]	@ 0x60
 801d1da:	9b06      	ldr	r3, [sp, #24]
 801d1dc:	3b01      	subs	r3, #1
 801d1de:	9306      	str	r3, [sp, #24]
 801d1e0:	9b07      	ldr	r3, [sp, #28]
 801d1e2:	3303      	adds	r3, #3
 801d1e4:	9307      	str	r3, [sp, #28]
 801d1e6:	e73e      	b.n	801d066 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d1e8:	d026      	beq.n	801d238 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d1ea:	9b06      	ldr	r3, [sp, #24]
 801d1ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d1ee:	3b01      	subs	r3, #1
 801d1f0:	fb00 4003 	mla	r0, r0, r3, r4
 801d1f4:	1400      	asrs	r0, r0, #16
 801d1f6:	f53f af52 	bmi.w	801d09e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d1fa:	3901      	subs	r1, #1
 801d1fc:	4288      	cmp	r0, r1
 801d1fe:	f6bf af4e 	bge.w	801d09e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d204:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d206:	fb01 0303 	mla	r3, r1, r3, r0
 801d20a:	141b      	asrs	r3, r3, #16
 801d20c:	f53f af47 	bmi.w	801d09e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d210:	3a01      	subs	r2, #1
 801d212:	4293      	cmp	r3, r2
 801d214:	f6bf af43 	bge.w	801d09e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d218:	9b07      	ldr	r3, [sp, #28]
 801d21a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d21e:	f103 0803 	add.w	r8, r3, #3
 801d222:	f1ba 0f00 	cmp.w	sl, #0
 801d226:	dc71      	bgt.n	801d30c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d228:	9b06      	ldr	r3, [sp, #24]
 801d22a:	9a07      	ldr	r2, [sp, #28]
 801d22c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d234:	441a      	add	r2, r3
 801d236:	9207      	str	r2, [sp, #28]
 801d238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	f340 80f2 	ble.w	801d424 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d240:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d244:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d246:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d24a:	eeb0 6a62 	vmov.f32	s12, s5
 801d24e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d252:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d256:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d25a:	ee16 4a10 	vmov	r4, s12
 801d25e:	eeb0 6a43 	vmov.f32	s12, s6
 801d262:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d266:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801d26a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d26e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d272:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d276:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d27a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d27e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d282:	ee12 2a90 	vmov	r2, s5
 801d286:	eef0 2a47 	vmov.f32	s5, s14
 801d28a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d28e:	ee13 2a10 	vmov	r2, s6
 801d292:	9319      	str	r3, [sp, #100]	@ 0x64
 801d294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d296:	eeb0 3a67 	vmov.f32	s6, s15
 801d29a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d29e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d2a4:	3b01      	subs	r3, #1
 801d2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d2aa:	bf08      	it	eq
 801d2ac:	4613      	moveq	r3, r2
 801d2ae:	9306      	str	r3, [sp, #24]
 801d2b0:	e6cb      	b.n	801d04a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d2b2:	b151      	cbz	r1, 801d2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d2b4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d2b8:	4660      	mov	r0, ip
 801d2ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d2be:	442a      	add	r2, r5
 801d2c0:	4667      	mov	r7, ip
 801d2c2:	e731      	b.n	801d128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d2c4:	4660      	mov	r0, ip
 801d2c6:	4662      	mov	r2, ip
 801d2c8:	e72e      	b.n	801d128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d2ca:	4660      	mov	r0, ip
 801d2cc:	4662      	mov	r2, ip
 801d2ce:	e7f7      	b.n	801d2c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d2d0:	f110 0e01 	adds.w	lr, r0, #1
 801d2d4:	f53f af71 	bmi.w	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d2d8:	4572      	cmp	r2, lr
 801d2da:	f6ff af6e 	blt.w	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d2de:	f117 0e01 	adds.w	lr, r7, #1
 801d2e2:	f53f af6a 	bmi.w	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d2e6:	45f4      	cmp	ip, lr
 801d2e8:	f6ff af67 	blt.w	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d2ec:	b212      	sxth	r2, r2
 801d2ee:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d2f2:	fa0f f38c 	sxth.w	r3, ip
 801d2f6:	9200      	str	r2, [sp, #0]
 801d2f8:	4631      	mov	r1, r6
 801d2fa:	9a08      	ldr	r2, [sp, #32]
 801d2fc:	9301      	str	r3, [sp, #4]
 801d2fe:	462b      	mov	r3, r5
 801d300:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d304:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d306:	f7ff fde9 	bl	801cedc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d30a:	e756      	b.n	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d30c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d30e:	1426      	asrs	r6, r4, #16
 801d310:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d312:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d316:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d31a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d31c:	1400      	asrs	r0, r0, #16
 801d31e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d322:	fb02 6000 	mla	r0, r2, r0, r6
 801d326:	9e08      	ldr	r6, [sp, #32]
 801d328:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d32c:	eb06 0c00 	add.w	ip, r6, r0
 801d330:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d334:	eb05 070e 	add.w	r7, r5, lr
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d064      	beq.n	801d406 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d33c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d340:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d344:	442e      	add	r6, r5
 801d346:	2900      	cmp	r1, #0
 801d348:	d066      	beq.n	801d418 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801d34a:	eb0c 0002 	add.w	r0, ip, r2
 801d34e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d352:	7840      	ldrb	r0, [r0, #1]
 801d354:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d358:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d35c:	442a      	add	r2, r5
 801d35e:	4428      	add	r0, r5
 801d360:	b29b      	uxth	r3, r3
 801d362:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d366:	b289      	uxth	r1, r1
 801d368:	f896 e000 	ldrb.w	lr, [r6]
 801d36c:	f108 0803 	add.w	r8, r8, #3
 801d370:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d374:	fb03 f901 	mul.w	r9, r3, r1
 801d378:	011b      	lsls	r3, r3, #4
 801d37a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d37e:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d382:	eba3 0309 	sub.w	r3, r3, r9
 801d386:	b289      	uxth	r1, r1
 801d388:	b29b      	uxth	r3, r3
 801d38a:	ebac 0c01 	sub.w	ip, ip, r1
 801d38e:	fb03 fe0e 	mul.w	lr, r3, lr
 801d392:	fa1f fc8c 	uxth.w	ip, ip
 801d396:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d39a:	f892 b000 	ldrb.w	fp, [r2]
 801d39e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d3a2:	f890 b000 	ldrb.w	fp, [r0]
 801d3a6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d3aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d3ae:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d3b2:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d3b6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d3ba:	fb03 fe0e 	mul.w	lr, r3, lr
 801d3be:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d3c2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d3c6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d3ca:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d3ce:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d3d2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d3d6:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d3da:	78b6      	ldrb	r6, [r6, #2]
 801d3dc:	78bf      	ldrb	r7, [r7, #2]
 801d3de:	4373      	muls	r3, r6
 801d3e0:	7896      	ldrb	r6, [r2, #2]
 801d3e2:	7882      	ldrb	r2, [r0, #2]
 801d3e4:	fb0c 3307 	mla	r3, ip, r7, r3
 801d3e8:	fb01 3306 	mla	r3, r1, r6, r3
 801d3ec:	fb09 3902 	mla	r9, r9, r2, r3
 801d3f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d3f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d3f4:	441c      	add	r4, r3
 801d3f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d3f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3fc:	4413      	add	r3, r2
 801d3fe:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d402:	9318      	str	r3, [sp, #96]	@ 0x60
 801d404:	e70d      	b.n	801d222 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d406:	b151      	cbz	r1, 801d41e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d408:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d40c:	4638      	mov	r0, r7
 801d40e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d412:	442a      	add	r2, r5
 801d414:	463e      	mov	r6, r7
 801d416:	e7a3      	b.n	801d360 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d418:	4638      	mov	r0, r7
 801d41a:	463a      	mov	r2, r7
 801d41c:	e7a0      	b.n	801d360 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d41e:	4638      	mov	r0, r7
 801d420:	463a      	mov	r2, r7
 801d422:	e7f7      	b.n	801d414 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801d424:	b00d      	add	sp, #52	@ 0x34
 801d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d42a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d42a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d42e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801d432:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d436:	2d00      	cmp	r5, #0
 801d438:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d43c:	fb05 700c 	mla	r0, r5, ip, r7
 801d440:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801d444:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801d448:	eb02 0800 	add.w	r8, r2, r0
 801d44c:	f2c0 8118 	blt.w	801d680 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d450:	45a9      	cmp	r9, r5
 801d452:	f340 8115 	ble.w	801d680 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d456:	2f00      	cmp	r7, #0
 801d458:	f2c0 8110 	blt.w	801d67c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d45c:	45bc      	cmp	ip, r7
 801d45e:	f340 810d 	ble.w	801d67c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d462:	5c12      	ldrb	r2, [r2, r0]
 801d464:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d468:	1c7a      	adds	r2, r7, #1
 801d46a:	f100 810c 	bmi.w	801d686 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d46e:	4594      	cmp	ip, r2
 801d470:	f340 8109 	ble.w	801d686 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d474:	2c00      	cmp	r4, #0
 801d476:	f000 8108 	beq.w	801d68a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801d47a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d47e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d482:	3501      	adds	r5, #1
 801d484:	f100 8105 	bmi.w	801d692 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d488:	45a9      	cmp	r9, r5
 801d48a:	f340 8102 	ble.w	801d692 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d48e:	f1be 0f00 	cmp.w	lr, #0
 801d492:	f000 8101 	beq.w	801d698 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801d496:	2f00      	cmp	r7, #0
 801d498:	f2c0 80f9 	blt.w	801d68e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d49c:	45bc      	cmp	ip, r7
 801d49e:	f340 80f6 	ble.w	801d68e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d4a2:	f818 200c 	ldrb.w	r2, [r8, ip]
 801d4a6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d4aa:	3701      	adds	r7, #1
 801d4ac:	f100 80f7 	bmi.w	801d69e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d4b0:	45bc      	cmp	ip, r7
 801d4b2:	f340 80f4 	ble.w	801d69e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d4b6:	2c00      	cmp	r4, #0
 801d4b8:	f000 80f3 	beq.w	801d6a2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801d4bc:	44c4      	add	ip, r8
 801d4be:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d4c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d4c6:	fa1f fc84 	uxth.w	ip, r4
 801d4ca:	fa1f f48e 	uxth.w	r4, lr
 801d4ce:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d4d2:	fb04 fe0c 	mul.w	lr, r4, ip
 801d4d6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d4da:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d4de:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801d4e2:	ebac 070e 	sub.w	r7, ip, lr
 801d4e6:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d4ea:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d4ee:	b2a4      	uxth	r4, r4
 801d4f0:	b2bf      	uxth	r7, r7
 801d4f2:	1b1b      	subs	r3, r3, r4
 801d4f4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d4f8:	fb07 fc0a 	mul.w	ip, r7, sl
 801d4fc:	b29b      	uxth	r3, r3
 801d4fe:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d502:	9300      	str	r3, [sp, #0]
 801d504:	fb04 cc09 	mla	ip, r4, r9, ip
 801d508:	fb0e cc08 	mla	ip, lr, r8, ip
 801d50c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d510:	9301      	str	r3, [sp, #4]
 801d512:	2b00      	cmp	r3, #0
 801d514:	f000 80af 	beq.w	801d676 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801d518:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801d51c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d520:	fb0b fc0c 	mul.w	ip, fp, ip
 801d524:	fb0b f606 	mul.w	r6, fp, r6
 801d528:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d52c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d530:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d534:	44dc      	add	ip, fp
 801d536:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801d53a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d53e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d542:	fb0a fb0b 	mul.w	fp, sl, fp
 801d546:	fb0a fa00 	mul.w	sl, sl, r0
 801d54a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801d54e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d552:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801d556:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d55a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d55e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d562:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d566:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d56a:	0a36      	lsrs	r6, r6, #8
 801d56c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d570:	44dc      	add	ip, fp
 801d572:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801d576:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d57a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d57e:	fb09 fb0b 	mul.w	fp, r9, fp
 801d582:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d586:	fb09 f905 	mul.w	r9, r9, r5
 801d58a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d58e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d592:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801d596:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d59a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d59e:	fb0c fc07 	mul.w	ip, ip, r7
 801d5a2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d5a6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801d5aa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d5ae:	4458      	add	r0, fp
 801d5b0:	fb08 f505 	mul.w	r5, r8, r5
 801d5b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d5b8:	fb08 f802 	mul.w	r8, r8, r2
 801d5bc:	0a00      	lsrs	r0, r0, #8
 801d5be:	0a2a      	lsrs	r2, r5, #8
 801d5c0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801d5c4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d5c8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d5cc:	4415      	add	r5, r2
 801d5ce:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801d5d2:	0a2d      	lsrs	r5, r5, #8
 801d5d4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d5d8:	9a00      	ldr	r2, [sp, #0]
 801d5da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801d5de:	fb03 cc02 	mla	ip, r3, r2, ip
 801d5e2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d5e6:	9b01      	ldr	r3, [sp, #4]
 801d5e8:	fb05 c50e 	mla	r5, r5, lr, ip
 801d5ec:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801d5f0:	fb00 5004 	mla	r0, r0, r4, r5
 801d5f4:	0a00      	lsrs	r0, r0, #8
 801d5f6:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801d5fa:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801d5fe:	4378      	muls	r0, r7
 801d600:	fb02 0006 	mla	r0, r2, r6, r0
 801d604:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d608:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801d60c:	fb04 e000 	mla	r0, r4, r0, lr
 801d610:	0a00      	lsrs	r0, r0, #8
 801d612:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d616:	4328      	orrs	r0, r5
 801d618:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801d61c:	b2ad      	uxth	r5, r5
 801d61e:	b2c4      	uxtb	r4, r0
 801d620:	436b      	muls	r3, r5
 801d622:	fb14 f405 	smulbb	r4, r4, r5
 801d626:	1c5a      	adds	r2, r3, #1
 801d628:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d62c:	780b      	ldrb	r3, [r1, #0]
 801d62e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801d632:	b2d2      	uxtb	r2, r2
 801d634:	fb03 4302 	mla	r3, r3, r2, r4
 801d638:	b29b      	uxth	r3, r3
 801d63a:	1c5c      	adds	r4, r3, #1
 801d63c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d640:	784c      	ldrb	r4, [r1, #1]
 801d642:	fb14 f402 	smulbb	r4, r4, r2
 801d646:	121b      	asrs	r3, r3, #8
 801d648:	700b      	strb	r3, [r1, #0]
 801d64a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801d64e:	fb03 4305 	mla	r3, r3, r5, r4
 801d652:	b29b      	uxth	r3, r3
 801d654:	1c5c      	adds	r4, r3, #1
 801d656:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d65a:	0c04      	lsrs	r4, r0, #16
 801d65c:	7888      	ldrb	r0, [r1, #2]
 801d65e:	121b      	asrs	r3, r3, #8
 801d660:	fb10 f002 	smulbb	r0, r0, r2
 801d664:	704b      	strb	r3, [r1, #1]
 801d666:	fb04 0005 	mla	r0, r4, r5, r0
 801d66a:	b280      	uxth	r0, r0
 801d66c:	1c43      	adds	r3, r0, #1
 801d66e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d672:	1200      	asrs	r0, r0, #8
 801d674:	7088      	strb	r0, [r1, #2]
 801d676:	b003      	add	sp, #12
 801d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d67c:	2600      	movs	r6, #0
 801d67e:	e6f3      	b.n	801d468 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801d680:	2000      	movs	r0, #0
 801d682:	4606      	mov	r6, r0
 801d684:	e6fd      	b.n	801d482 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d686:	2000      	movs	r0, #0
 801d688:	e6fb      	b.n	801d482 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d68a:	4620      	mov	r0, r4
 801d68c:	e6f9      	b.n	801d482 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d68e:	2500      	movs	r5, #0
 801d690:	e70b      	b.n	801d4aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801d692:	2200      	movs	r2, #0
 801d694:	4615      	mov	r5, r2
 801d696:	e716      	b.n	801d4c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d698:	4672      	mov	r2, lr
 801d69a:	4675      	mov	r5, lr
 801d69c:	e713      	b.n	801d4c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d69e:	2200      	movs	r2, #0
 801d6a0:	e711      	b.n	801d4c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d6a2:	4622      	mov	r2, r4
 801d6a4:	e70f      	b.n	801d4c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801d6a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6aa:	b09f      	sub	sp, #124	@ 0x7c
 801d6ac:	921b      	str	r2, [sp, #108]	@ 0x6c
 801d6ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801d6b0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801d6b2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801d6b6:	901d      	str	r0, [sp, #116]	@ 0x74
 801d6b8:	931c      	str	r3, [sp, #112]	@ 0x70
 801d6ba:	6850      	ldr	r0, [r2, #4]
 801d6bc:	9119      	str	r1, [sp, #100]	@ 0x64
 801d6be:	6812      	ldr	r2, [r2, #0]
 801d6c0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801d6c2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801d6c6:	fb00 1303 	mla	r3, r0, r3, r1
 801d6ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6ce:	18d3      	adds	r3, r2, r3
 801d6d0:	930c      	str	r3, [sp, #48]	@ 0x30
 801d6d2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	9312      	str	r3, [sp, #72]	@ 0x48
 801d6d8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d6da:	685e      	ldr	r6, [r3, #4]
 801d6dc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801d6e0:	3604      	adds	r6, #4
 801d6e2:	930d      	str	r3, [sp, #52]	@ 0x34
 801d6e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	dc03      	bgt.n	801d6f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d6ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	f340 8378 	ble.w	801dde2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d6f2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d6f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d6f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d6fc:	1e48      	subs	r0, r1, #1
 801d6fe:	1e57      	subs	r7, r2, #1
 801d700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d702:	2b00      	cmp	r3, #0
 801d704:	f340 818c 	ble.w	801da20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801d708:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d70a:	142b      	asrs	r3, r5, #16
 801d70c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d710:	d406      	bmi.n	801d720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d712:	4584      	cmp	ip, r0
 801d714:	da04      	bge.n	801d720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d716:	2b00      	cmp	r3, #0
 801d718:	db02      	blt.n	801d720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d71a:	42bb      	cmp	r3, r7
 801d71c:	f2c0 8181 	blt.w	801da22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d720:	f11c 0c01 	adds.w	ip, ip, #1
 801d724:	f100 816f 	bmi.w	801da06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d728:	4561      	cmp	r1, ip
 801d72a:	f2c0 816c 	blt.w	801da06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d72e:	3301      	adds	r3, #1
 801d730:	f100 8169 	bmi.w	801da06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d734:	429a      	cmp	r2, r3
 801d736:	f2c0 8166 	blt.w	801da06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d73c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d73e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d740:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d742:	2b00      	cmp	r3, #0
 801d744:	f340 818c 	ble.w	801da60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d748:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d74a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d74e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d752:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d756:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d758:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d75c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d75e:	141b      	asrs	r3, r3, #16
 801d760:	f100 81d0 	bmi.w	801db04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d764:	f100 38ff 	add.w	r8, r0, #4294967295
 801d768:	4543      	cmp	r3, r8
 801d76a:	f280 81cb 	bge.w	801db04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d76e:	f1bc 0f00 	cmp.w	ip, #0
 801d772:	f2c0 81c7 	blt.w	801db04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d776:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d77a:	45c4      	cmp	ip, r8
 801d77c:	f280 81c2 	bge.w	801db04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d780:	b200      	sxth	r0, r0
 801d782:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d784:	fb0c 3300 	mla	r3, ip, r0, r3
 801d788:	eb04 0803 	add.w	r8, r4, r3
 801d78c:	5ce3      	ldrb	r3, [r4, r3]
 801d78e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d792:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d796:	2a00      	cmp	r2, #0
 801d798:	f000 81a9 	beq.w	801daee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801d79c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d7a0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d7a4:	940e      	str	r4, [sp, #56]	@ 0x38
 801d7a6:	0e24      	lsrs	r4, r4, #24
 801d7a8:	9415      	str	r4, [sp, #84]	@ 0x54
 801d7aa:	b179      	cbz	r1, 801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d7ac:	eb08 0c00 	add.w	ip, r8, r0
 801d7b0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d7b4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d7b8:	900a      	str	r0, [sp, #40]	@ 0x28
 801d7ba:	0e00      	lsrs	r0, r0, #24
 801d7bc:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d7be:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d7c2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d7c6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801d7c8:	0e00      	lsrs	r0, r0, #24
 801d7ca:	9016      	str	r0, [sp, #88]	@ 0x58
 801d7cc:	b292      	uxth	r2, r2
 801d7ce:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d7d0:	b289      	uxth	r1, r1
 801d7d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d7d4:	fb02 f901 	mul.w	r9, r2, r1
 801d7d8:	0112      	lsls	r2, r2, #4
 801d7da:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d7de:	eba2 0809 	sub.w	r8, r2, r9
 801d7e2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d7e6:	b289      	uxth	r1, r1
 801d7e8:	fa1f f888 	uxth.w	r8, r8
 801d7ec:	1a52      	subs	r2, r2, r1
 801d7ee:	fb08 f000 	mul.w	r0, r8, r0
 801d7f2:	b292      	uxth	r2, r2
 801d7f4:	fb02 000e 	mla	r0, r2, lr, r0
 801d7f8:	fb01 0004 	mla	r0, r1, r4, r0
 801d7fc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d7fe:	fb09 0004 	mla	r0, r9, r4, r0
 801d802:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d806:	2800      	cmp	r0, #0
 801d808:	f000 80f2 	beq.w	801d9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d80c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d810:	d01b      	beq.n	801d84a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d812:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d816:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d81a:	fb0e fa0a 	mul.w	sl, lr, sl
 801d81e:	fb0e fe03 	mul.w	lr, lr, r3
 801d822:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d826:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d82a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d82e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d832:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d836:	4453      	add	r3, sl
 801d838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d83c:	0a1b      	lsrs	r3, r3, #8
 801d83e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d842:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d846:	ea43 030c 	orr.w	r3, r3, ip
 801d84a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d84c:	2cff      	cmp	r4, #255	@ 0xff
 801d84e:	d021      	beq.n	801d894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801d850:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d852:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d856:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d858:	fb04 fb0b 	mul.w	fp, r4, fp
 801d85c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d85e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d862:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d864:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d868:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d86c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d870:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d874:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d878:	44de      	add	lr, fp
 801d87a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d87e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d882:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d886:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d88a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d88e:	ea4e 040a 	orr.w	r4, lr, sl
 801d892:	940e      	str	r4, [sp, #56]	@ 0x38
 801d894:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d896:	2cff      	cmp	r4, #255	@ 0xff
 801d898:	d021      	beq.n	801d8de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d89a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d89c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d8a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d8a2:	fb04 fb0b 	mul.w	fp, r4, fp
 801d8a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d8a8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d8ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d8ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d8b2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d8b6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d8ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d8be:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d8c2:	44de      	add	lr, fp
 801d8c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d8c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d8cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d8d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d8d4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d8d8:	ea4e 040a 	orr.w	r4, lr, sl
 801d8dc:	940a      	str	r4, [sp, #40]	@ 0x28
 801d8de:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d8e0:	2cff      	cmp	r4, #255	@ 0xff
 801d8e2:	d021      	beq.n	801d928 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d8e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d8e6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d8ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d8ec:	fb04 fb0b 	mul.w	fp, r4, fp
 801d8f0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d8f2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d8f6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d8f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d8fc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d900:	fb04 fa0a 	mul.w	sl, r4, sl
 801d904:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d908:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d90c:	44de      	add	lr, fp
 801d90e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d912:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d916:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d91a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d91e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d922:	ea4e 040a 	orr.w	r4, lr, sl
 801d926:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d928:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d92a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801d92e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d932:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d936:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d938:	fb08 fc0c 	mul.w	ip, r8, ip
 801d93c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d940:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d944:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d946:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d94a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d94e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d950:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d954:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d958:	fb08 f80e 	mul.w	r8, r8, lr
 801d95c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d960:	fb02 8303 	mla	r3, r2, r3, r8
 801d964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d966:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d96a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d96e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d970:	fb01 330a 	mla	r3, r1, sl, r3
 801d974:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801d978:	fb09 3901 	mla	r9, r9, r1, r3
 801d97c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d97e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d980:	4343      	muls	r3, r0
 801d982:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d986:	1c58      	adds	r0, r3, #1
 801d988:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d98c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d990:	ea4c 0c09 	orr.w	ip, ip, r9
 801d994:	783b      	ldrb	r3, [r7, #0]
 801d996:	fa5f f28c 	uxtb.w	r2, ip
 801d99a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d99e:	fb12 f201 	smulbb	r2, r2, r1
 801d9a2:	b2c0      	uxtb	r0, r0
 801d9a4:	fb03 2300 	mla	r3, r3, r0, r2
 801d9a8:	b29b      	uxth	r3, r3
 801d9aa:	1c5a      	adds	r2, r3, #1
 801d9ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d9b0:	787a      	ldrb	r2, [r7, #1]
 801d9b2:	fb12 f200 	smulbb	r2, r2, r0
 801d9b6:	121b      	asrs	r3, r3, #8
 801d9b8:	703b      	strb	r3, [r7, #0]
 801d9ba:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d9be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d9c2:	fb03 2301 	mla	r3, r3, r1, r2
 801d9c6:	b29b      	uxth	r3, r3
 801d9c8:	1c5a      	adds	r2, r3, #1
 801d9ca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d9ce:	121b      	asrs	r3, r3, #8
 801d9d0:	707b      	strb	r3, [r7, #1]
 801d9d2:	78bb      	ldrb	r3, [r7, #2]
 801d9d4:	fb13 f000 	smulbb	r0, r3, r0
 801d9d8:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d9dc:	fa1f fc8c 	uxth.w	ip, ip
 801d9e0:	f10c 0301 	add.w	r3, ip, #1
 801d9e4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d9e8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d9ec:	f887 c002 	strb.w	ip, [r7, #2]
 801d9f0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d9f2:	3703      	adds	r7, #3
 801d9f4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d9f6:	441a      	add	r2, r3
 801d9f8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d9fa:	441d      	add	r5, r3
 801d9fc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d9fe:	9229      	str	r2, [sp, #164]	@ 0xa4
 801da00:	3b01      	subs	r3, #1
 801da02:	931a      	str	r3, [sp, #104]	@ 0x68
 801da04:	e69c      	b.n	801d740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801da06:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801da08:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801da0a:	441c      	add	r4, r3
 801da0c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801da0e:	441d      	add	r5, r3
 801da10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da12:	9429      	str	r4, [sp, #164]	@ 0xa4
 801da14:	3b01      	subs	r3, #1
 801da16:	9309      	str	r3, [sp, #36]	@ 0x24
 801da18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da1a:	3303      	adds	r3, #3
 801da1c:	930c      	str	r3, [sp, #48]	@ 0x30
 801da1e:	e66f      	b.n	801d700 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801da20:	d026      	beq.n	801da70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801da22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da24:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801da26:	3b01      	subs	r3, #1
 801da28:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801da2a:	fb00 4003 	mla	r0, r0, r3, r4
 801da2e:	1400      	asrs	r0, r0, #16
 801da30:	f53f ae83 	bmi.w	801d73a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801da34:	3901      	subs	r1, #1
 801da36:	4288      	cmp	r0, r1
 801da38:	f6bf ae7f 	bge.w	801d73a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801da3c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801da3e:	fb01 5303 	mla	r3, r1, r3, r5
 801da42:	141b      	asrs	r3, r3, #16
 801da44:	f53f ae79 	bmi.w	801d73a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801da48:	3a01      	subs	r2, #1
 801da4a:	4293      	cmp	r3, r2
 801da4c:	f6bf ae75 	bge.w	801d73a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801da50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da52:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801da56:	f103 0e03 	add.w	lr, r3, #3
 801da5a:	f1bb 0f00 	cmp.w	fp, #0
 801da5e:	dc71      	bgt.n	801db44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801da60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da62:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801da66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801da6c:	4423      	add	r3, r4
 801da6e:	930c      	str	r3, [sp, #48]	@ 0x30
 801da70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801da72:	2b00      	cmp	r3, #0
 801da74:	f340 81b5 	ble.w	801dde2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801da78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801da7c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801da7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da86:	eef0 6a62 	vmov.f32	s13, s5
 801da8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da96:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801da9a:	eef0 6a43 	vmov.f32	s13, s6
 801da9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daa2:	ee16 5a90 	vmov	r5, s13
 801daa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801daaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801daae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dab2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dab6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801daba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dabe:	ee12 2a90 	vmov	r2, s5
 801dac2:	eef0 2a47 	vmov.f32	s5, s14
 801dac6:	fb92 f3f3 	sdiv	r3, r2, r3
 801daca:	ee13 2a10 	vmov	r2, s6
 801dace:	932b      	str	r3, [sp, #172]	@ 0xac
 801dad0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dad2:	eeb0 3a67 	vmov.f32	s6, s15
 801dad6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dada:	932c      	str	r3, [sp, #176]	@ 0xb0
 801dadc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dade:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dae0:	3b01      	subs	r3, #1
 801dae2:	9319      	str	r3, [sp, #100]	@ 0x64
 801dae4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dae6:	bf08      	it	eq
 801dae8:	4613      	moveq	r3, r2
 801daea:	9309      	str	r3, [sp, #36]	@ 0x24
 801daec:	e5fa      	b.n	801d6e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801daee:	2900      	cmp	r1, #0
 801daf0:	f43f ae6c 	beq.w	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801daf4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801daf8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dafc:	900a      	str	r0, [sp, #40]	@ 0x28
 801dafe:	0e00      	lsrs	r0, r0, #24
 801db00:	9013      	str	r0, [sp, #76]	@ 0x4c
 801db02:	e663      	b.n	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801db04:	f113 0801 	adds.w	r8, r3, #1
 801db08:	f53f af72 	bmi.w	801d9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db0c:	4540      	cmp	r0, r8
 801db0e:	f6ff af6f 	blt.w	801d9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db12:	f11c 0801 	adds.w	r8, ip, #1
 801db16:	f53f af6b 	bmi.w	801d9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db1a:	45c6      	cmp	lr, r8
 801db1c:	f6ff af68 	blt.w	801d9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db20:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801db22:	b200      	sxth	r0, r0
 801db24:	9302      	str	r3, [sp, #8]
 801db26:	fa0f f38e 	sxth.w	r3, lr
 801db2a:	9000      	str	r0, [sp, #0]
 801db2c:	9301      	str	r3, [sp, #4]
 801db2e:	4633      	mov	r3, r6
 801db30:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801db32:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801db36:	e9cd c203 	strd	ip, r2, [sp, #12]
 801db3a:	4639      	mov	r1, r7
 801db3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801db3e:	f7ff fc74 	bl	801d42a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801db42:	e755      	b.n	801d9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db44:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801db46:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801db4a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801db4c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801db50:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db52:	1427      	asrs	r7, r4, #16
 801db54:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801db56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db5a:	142b      	asrs	r3, r5, #16
 801db5c:	fb01 7303 	mla	r3, r1, r3, r7
 801db60:	18e7      	adds	r7, r4, r3
 801db62:	5ce3      	ldrb	r3, [r4, r3]
 801db64:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801db68:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801db6c:	2a00      	cmp	r2, #0
 801db6e:	f000 812e 	beq.w	801ddce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801db72:	f897 8001 	ldrb.w	r8, [r7, #1]
 801db76:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801db7a:	9410      	str	r4, [sp, #64]	@ 0x40
 801db7c:	0e24      	lsrs	r4, r4, #24
 801db7e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801db80:	b170      	cbz	r0, 801dba0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801db82:	eb07 0801 	add.w	r8, r7, r1
 801db86:	5c79      	ldrb	r1, [r7, r1]
 801db88:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801db8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801db8e:	0e09      	lsrs	r1, r1, #24
 801db90:	9114      	str	r1, [sp, #80]	@ 0x50
 801db92:	f898 1001 	ldrb.w	r1, [r8, #1]
 801db96:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801db9a:	9111      	str	r1, [sp, #68]	@ 0x44
 801db9c:	0e09      	lsrs	r1, r1, #24
 801db9e:	9118      	str	r1, [sp, #96]	@ 0x60
 801dba0:	b292      	uxth	r2, r2
 801dba2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dba4:	b280      	uxth	r0, r0
 801dba6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dba8:	fb02 f900 	mul.w	r9, r2, r0
 801dbac:	0112      	lsls	r2, r2, #4
 801dbae:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dbb2:	eba2 0809 	sub.w	r8, r2, r9
 801dbb6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dbba:	b280      	uxth	r0, r0
 801dbbc:	fa1f f888 	uxth.w	r8, r8
 801dbc0:	1a12      	subs	r2, r2, r0
 801dbc2:	fb08 f101 	mul.w	r1, r8, r1
 801dbc6:	b292      	uxth	r2, r2
 801dbc8:	fb02 110c 	mla	r1, r2, ip, r1
 801dbcc:	fb00 1104 	mla	r1, r0, r4, r1
 801dbd0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801dbd2:	fb09 1104 	mla	r1, r9, r4, r1
 801dbd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dbda:	2900      	cmp	r1, #0
 801dbdc:	f000 80ec 	beq.w	801ddb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801dbe0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801dbe4:	d019      	beq.n	801dc1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801dbe6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dbea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dbee:	fb0c fa0a 	mul.w	sl, ip, sl
 801dbf2:	fb0c fc03 	mul.w	ip, ip, r3
 801dbf6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dbfa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dbfe:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801dc02:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc06:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dc0a:	4453      	add	r3, sl
 801dc0c:	0a3f      	lsrs	r7, r7, #8
 801dc0e:	0a1b      	lsrs	r3, r3, #8
 801dc10:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801dc14:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc18:	433b      	orrs	r3, r7
 801dc1a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dc1c:	2cff      	cmp	r4, #255	@ 0xff
 801dc1e:	d020      	beq.n	801dc62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801dc20:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dc22:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801dc26:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dc28:	4367      	muls	r7, r4
 801dc2a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dc2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dc30:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dc34:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dc36:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801dc3a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dc3e:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc42:	44bc      	add	ip, r7
 801dc44:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801dc48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dc50:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dc54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc58:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dc5c:	ea4c 040a 	orr.w	r4, ip, sl
 801dc60:	9410      	str	r4, [sp, #64]	@ 0x40
 801dc62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dc64:	2cff      	cmp	r4, #255	@ 0xff
 801dc66:	d020      	beq.n	801dcaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801dc68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dc6a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801dc6e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dc70:	4367      	muls	r7, r4
 801dc72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dc74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dc78:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dc7c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dc7e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801dc82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dc86:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc8a:	44bc      	add	ip, r7
 801dc8c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801dc90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dc98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dc9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dca0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dca4:	ea4c 040a 	orr.w	r4, ip, sl
 801dca8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801dcaa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801dcac:	2cff      	cmp	r4, #255	@ 0xff
 801dcae:	d020      	beq.n	801dcf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801dcb0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dcb2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801dcb6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801dcb8:	4367      	muls	r7, r4
 801dcba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dcbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dcc0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dcc4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801dcc6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801dcca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dcce:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcd2:	44bc      	add	ip, r7
 801dcd4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801dcd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dcdc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dce0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dce4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dce8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dcec:	ea4c 040a 	orr.w	r4, ip, sl
 801dcf0:	9411      	str	r4, [sp, #68]	@ 0x44
 801dcf2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dcf4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801dcf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dcfc:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801dd00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd02:	fb08 f707 	mul.w	r7, r8, r7
 801dd06:	fb02 770c 	mla	r7, r2, ip, r7
 801dd0a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd0e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dd10:	fb00 770c 	mla	r7, r0, ip, r7
 801dd14:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd18:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dd1a:	fb09 770c 	mla	r7, r9, ip, r7
 801dd1e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801dd22:	fb08 f80c 	mul.w	r8, r8, ip
 801dd26:	0a3f      	lsrs	r7, r7, #8
 801dd28:	fb02 8303 	mla	r3, r2, r3, r8
 801dd2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dd2e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801dd32:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801dd36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dd38:	fb00 330a 	mla	r3, r0, sl, r3
 801dd3c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801dd40:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801dd42:	fb09 3c0c 	mla	ip, r9, ip, r3
 801dd46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd4c:	434b      	muls	r3, r1
 801dd4e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dd52:	1c59      	adds	r1, r3, #1
 801dd54:	ea47 070c 	orr.w	r7, r7, ip
 801dd58:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801dd5c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801dd60:	b2fa      	uxtb	r2, r7
 801dd62:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801dd66:	fb12 f200 	smulbb	r2, r2, r0
 801dd6a:	b2c9      	uxtb	r1, r1
 801dd6c:	fb03 2301 	mla	r3, r3, r1, r2
 801dd70:	b29b      	uxth	r3, r3
 801dd72:	1c5a      	adds	r2, r3, #1
 801dd74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dd78:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801dd7c:	fb12 f201 	smulbb	r2, r2, r1
 801dd80:	121b      	asrs	r3, r3, #8
 801dd82:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801dd86:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801dd8a:	0c3f      	lsrs	r7, r7, #16
 801dd8c:	fb03 2300 	mla	r3, r3, r0, r2
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	1c5a      	adds	r2, r3, #1
 801dd94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dd98:	121b      	asrs	r3, r3, #8
 801dd9a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801dd9e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801dda2:	fb13 f101 	smulbb	r1, r3, r1
 801dda6:	fb07 1700 	mla	r7, r7, r0, r1
 801ddaa:	b2bf      	uxth	r7, r7
 801ddac:	1c7b      	adds	r3, r7, #1
 801ddae:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ddb2:	123f      	asrs	r7, r7, #8
 801ddb4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ddb8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ddba:	f10e 0e03 	add.w	lr, lr, #3
 801ddbe:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801ddc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ddc4:	441a      	add	r2, r3
 801ddc6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ddc8:	9229      	str	r2, [sp, #164]	@ 0xa4
 801ddca:	441d      	add	r5, r3
 801ddcc:	e645      	b.n	801da5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801ddce:	2800      	cmp	r0, #0
 801ddd0:	f43f aee6 	beq.w	801dba0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ddd4:	5c79      	ldrb	r1, [r7, r1]
 801ddd6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ddda:	910b      	str	r1, [sp, #44]	@ 0x2c
 801dddc:	0e09      	lsrs	r1, r1, #24
 801ddde:	9114      	str	r1, [sp, #80]	@ 0x50
 801dde0:	e6de      	b.n	801dba0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801dde2:	b01f      	add	sp, #124	@ 0x7c
 801dde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dde8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801dde8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddec:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801ddf0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801ddf4:	2d00      	cmp	r5, #0
 801ddf6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ddfa:	fb05 700e 	mla	r0, r5, lr, r7
 801ddfe:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801de02:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801de06:	eb02 0800 	add.w	r8, r2, r0
 801de0a:	f2c0 8105 	blt.w	801e018 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801de0e:	45a9      	cmp	r9, r5
 801de10:	f340 8102 	ble.w	801e018 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801de14:	2f00      	cmp	r7, #0
 801de16:	f2c0 80fd 	blt.w	801e014 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801de1a:	45be      	cmp	lr, r7
 801de1c:	f340 80fa 	ble.w	801e014 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801de20:	5c12      	ldrb	r2, [r2, r0]
 801de22:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801de26:	1c7a      	adds	r2, r7, #1
 801de28:	f100 80f9 	bmi.w	801e01e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801de2c:	4596      	cmp	lr, r2
 801de2e:	f340 80f6 	ble.w	801e01e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801de32:	2c00      	cmp	r4, #0
 801de34:	f000 80f5 	beq.w	801e022 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801de38:	f898 2001 	ldrb.w	r2, [r8, #1]
 801de3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801de40:	3501      	adds	r5, #1
 801de42:	f100 80f2 	bmi.w	801e02a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801de46:	45a9      	cmp	r9, r5
 801de48:	f340 80ef 	ble.w	801e02a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801de4c:	f1bc 0f00 	cmp.w	ip, #0
 801de50:	f000 80ee 	beq.w	801e030 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801de54:	2f00      	cmp	r7, #0
 801de56:	f2c0 80e6 	blt.w	801e026 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801de5a:	45be      	cmp	lr, r7
 801de5c:	f340 80e3 	ble.w	801e026 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801de60:	f818 200e 	ldrb.w	r2, [r8, lr]
 801de64:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801de68:	3701      	adds	r7, #1
 801de6a:	f100 80e4 	bmi.w	801e036 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801de6e:	45be      	cmp	lr, r7
 801de70:	f340 80e1 	ble.w	801e036 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801de74:	2c00      	cmp	r4, #0
 801de76:	f000 80e0 	beq.w	801e03a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801de7a:	44c6      	add	lr, r8
 801de7c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801de80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801de84:	b2a3      	uxth	r3, r4
 801de86:	fa1f fc8c 	uxth.w	ip, ip
 801de8a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801de8e:	fb0c fe03 	mul.w	lr, ip, r3
 801de92:	011b      	lsls	r3, r3, #4
 801de94:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801de98:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801de9c:	eba3 070e 	sub.w	r7, r3, lr
 801dea0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801dea4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801dea8:	fa1f f48c 	uxth.w	r4, ip
 801deac:	b2bf      	uxth	r7, r7
 801deae:	1b1b      	subs	r3, r3, r4
 801deb0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801deb4:	fb07 fc0a 	mul.w	ip, r7, sl
 801deb8:	b29b      	uxth	r3, r3
 801deba:	fb03 cc0b 	mla	ip, r3, fp, ip
 801debe:	9300      	str	r3, [sp, #0]
 801dec0:	fb04 cc09 	mla	ip, r4, r9, ip
 801dec4:	fb0e cc08 	mla	ip, lr, r8, ip
 801dec8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801decc:	9301      	str	r3, [sp, #4]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	f000 809d 	beq.w	801e00e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801ded4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801ded8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801dedc:	fb0b fc0c 	mul.w	ip, fp, ip
 801dee0:	fb0b f606 	mul.w	r6, fp, r6
 801dee4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801dee8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801deec:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801def0:	44dc      	add	ip, fp
 801def2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801def6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801defa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801defe:	fb0a fb0b 	mul.w	fp, sl, fp
 801df02:	fb0a fa00 	mul.w	sl, sl, r0
 801df06:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801df0a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801df0e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801df12:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801df16:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801df1a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801df1e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801df22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df26:	0a36      	lsrs	r6, r6, #8
 801df28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df2c:	44dc      	add	ip, fp
 801df2e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801df32:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801df36:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801df3a:	fb09 fb0b 	mul.w	fp, r9, fp
 801df3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df42:	fb09 f905 	mul.w	r9, r9, r5
 801df46:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801df4a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df4e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801df52:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801df56:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801df5a:	fb0c fc07 	mul.w	ip, ip, r7
 801df5e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801df62:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801df66:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801df6a:	4458      	add	r0, fp
 801df6c:	fb08 f505 	mul.w	r5, r8, r5
 801df70:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801df74:	fb08 f802 	mul.w	r8, r8, r2
 801df78:	0a00      	lsrs	r0, r0, #8
 801df7a:	0a2a      	lsrs	r2, r5, #8
 801df7c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801df80:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801df84:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801df88:	4415      	add	r5, r2
 801df8a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801df8e:	0a2d      	lsrs	r5, r5, #8
 801df90:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801df94:	9a00      	ldr	r2, [sp, #0]
 801df96:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801df9a:	fb03 cc02 	mla	ip, r3, r2, ip
 801df9e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dfa2:	9b01      	ldr	r3, [sp, #4]
 801dfa4:	fb05 c50e 	mla	r5, r5, lr, ip
 801dfa8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801dfac:	43db      	mvns	r3, r3
 801dfae:	fb00 5004 	mla	r0, r0, r4, r5
 801dfb2:	b2db      	uxtb	r3, r3
 801dfb4:	0a00      	lsrs	r0, r0, #8
 801dfb6:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801dfba:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801dfbe:	4378      	muls	r0, r7
 801dfc0:	fb02 0006 	mla	r0, r2, r6, r0
 801dfc4:	780a      	ldrb	r2, [r1, #0]
 801dfc6:	fb0e 0e08 	mla	lr, lr, r8, r0
 801dfca:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801dfce:	fb04 e000 	mla	r0, r4, r0, lr
 801dfd2:	fb02 f403 	mul.w	r4, r2, r3
 801dfd6:	0a00      	lsrs	r0, r0, #8
 801dfd8:	1c62      	adds	r2, r4, #1
 801dfda:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801dfde:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801dfe2:	4328      	orrs	r0, r5
 801dfe4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801dfe8:	700a      	strb	r2, [r1, #0]
 801dfea:	784a      	ldrb	r2, [r1, #1]
 801dfec:	435a      	muls	r2, r3
 801dfee:	1c54      	adds	r4, r2, #1
 801dff0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801dff4:	0a02      	lsrs	r2, r0, #8
 801dff6:	0c00      	lsrs	r0, r0, #16
 801dff8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801dffc:	704a      	strb	r2, [r1, #1]
 801dffe:	788a      	ldrb	r2, [r1, #2]
 801e000:	4353      	muls	r3, r2
 801e002:	1c5a      	adds	r2, r3, #1
 801e004:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e008:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e00c:	7088      	strb	r0, [r1, #2]
 801e00e:	b003      	add	sp, #12
 801e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e014:	2600      	movs	r6, #0
 801e016:	e706      	b.n	801de26 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e018:	2000      	movs	r0, #0
 801e01a:	4606      	mov	r6, r0
 801e01c:	e710      	b.n	801de40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e01e:	2000      	movs	r0, #0
 801e020:	e70e      	b.n	801de40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e022:	4620      	mov	r0, r4
 801e024:	e70c      	b.n	801de40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e026:	2500      	movs	r5, #0
 801e028:	e71e      	b.n	801de68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e02a:	2200      	movs	r2, #0
 801e02c:	4615      	mov	r5, r2
 801e02e:	e729      	b.n	801de84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e030:	4662      	mov	r2, ip
 801e032:	4665      	mov	r5, ip
 801e034:	e726      	b.n	801de84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e036:	2200      	movs	r2, #0
 801e038:	e724      	b.n	801de84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e03a:	4622      	mov	r2, r4
 801e03c:	e722      	b.n	801de84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e03e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e03e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e042:	b09b      	sub	sp, #108	@ 0x6c
 801e044:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e048:	9218      	str	r2, [sp, #96]	@ 0x60
 801e04a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e04c:	9019      	str	r0, [sp, #100]	@ 0x64
 801e04e:	9116      	str	r1, [sp, #88]	@ 0x58
 801e050:	6850      	ldr	r0, [r2, #4]
 801e052:	9307      	str	r3, [sp, #28]
 801e054:	6812      	ldr	r2, [r2, #0]
 801e056:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801e058:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e05c:	fb00 1303 	mla	r3, r0, r3, r1
 801e060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e064:	18d3      	adds	r3, r2, r3
 801e066:	930a      	str	r3, [sp, #40]	@ 0x28
 801e068:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e06e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e070:	685e      	ldr	r6, [r3, #4]
 801e072:	3604      	adds	r6, #4
 801e074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e076:	2b00      	cmp	r3, #0
 801e078:	dc03      	bgt.n	801e082 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e07a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	f340 834f 	ble.w	801e720 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e082:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e084:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e088:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e08c:	1e48      	subs	r0, r1, #1
 801e08e:	1e57      	subs	r7, r2, #1
 801e090:	9b07      	ldr	r3, [sp, #28]
 801e092:	2b00      	cmp	r3, #0
 801e094:	f340 8178 	ble.w	801e388 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e098:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e09a:	142b      	asrs	r3, r5, #16
 801e09c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e0a0:	d406      	bmi.n	801e0b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e0a2:	4584      	cmp	ip, r0
 801e0a4:	da04      	bge.n	801e0b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	db02      	blt.n	801e0b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e0aa:	42bb      	cmp	r3, r7
 801e0ac:	f2c0 816d 	blt.w	801e38a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e0b0:	f11c 0c01 	adds.w	ip, ip, #1
 801e0b4:	f100 815b 	bmi.w	801e36e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e0b8:	4561      	cmp	r1, ip
 801e0ba:	f2c0 8158 	blt.w	801e36e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e0be:	3301      	adds	r3, #1
 801e0c0:	f100 8155 	bmi.w	801e36e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e0c4:	429a      	cmp	r2, r3
 801e0c6:	f2c0 8152 	blt.w	801e36e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e0ca:	9b07      	ldr	r3, [sp, #28]
 801e0cc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e0ce:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e0d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	f340 8178 	ble.w	801e3c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e0d8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e0da:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e0de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e0e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e0e6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e0e8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e0ec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e0ee:	141b      	asrs	r3, r3, #16
 801e0f0:	f100 81ba 	bmi.w	801e468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e0f4:	f101 38ff 	add.w	r8, r1, #4294967295
 801e0f8:	4543      	cmp	r3, r8
 801e0fa:	f280 81b5 	bge.w	801e468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e0fe:	f1bc 0f00 	cmp.w	ip, #0
 801e102:	f2c0 81b1 	blt.w	801e468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e106:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e10a:	45c4      	cmp	ip, r8
 801e10c:	f280 81ac 	bge.w	801e468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e110:	b209      	sxth	r1, r1
 801e112:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e114:	fb0c 3301 	mla	r3, ip, r1, r3
 801e118:	eb04 0803 	add.w	r8, r4, r3
 801e11c:	5ce3      	ldrb	r3, [r4, r3]
 801e11e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e122:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e126:	2a00      	cmp	r2, #0
 801e128:	f000 8193 	beq.w	801e452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e12c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e130:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e134:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e136:	0e24      	lsrs	r4, r4, #24
 801e138:	9412      	str	r4, [sp, #72]	@ 0x48
 801e13a:	b178      	cbz	r0, 801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e13c:	eb08 0c01 	add.w	ip, r8, r1
 801e140:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e144:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e148:	9108      	str	r1, [sp, #32]
 801e14a:	0e09      	lsrs	r1, r1, #24
 801e14c:	9110      	str	r1, [sp, #64]	@ 0x40
 801e14e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e152:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e156:	910c      	str	r1, [sp, #48]	@ 0x30
 801e158:	0e09      	lsrs	r1, r1, #24
 801e15a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e15c:	b292      	uxth	r2, r2
 801e15e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e160:	b280      	uxth	r0, r0
 801e162:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e164:	fb02 f900 	mul.w	r9, r2, r0
 801e168:	0112      	lsls	r2, r2, #4
 801e16a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e16e:	eba2 0809 	sub.w	r8, r2, r9
 801e172:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e176:	b280      	uxth	r0, r0
 801e178:	fa1f f888 	uxth.w	r8, r8
 801e17c:	1a12      	subs	r2, r2, r0
 801e17e:	fb08 f101 	mul.w	r1, r8, r1
 801e182:	b292      	uxth	r2, r2
 801e184:	fb02 110e 	mla	r1, r2, lr, r1
 801e188:	fb00 1104 	mla	r1, r0, r4, r1
 801e18c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e18e:	fb09 1104 	mla	r1, r9, r4, r1
 801e192:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e196:	2900      	cmp	r1, #0
 801e198:	f000 80de 	beq.w	801e358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e19c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e1a0:	d01b      	beq.n	801e1da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e1a2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e1a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e1aa:	fb0e fa0a 	mul.w	sl, lr, sl
 801e1ae:	fb0e fe03 	mul.w	lr, lr, r3
 801e1b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e1b6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e1ba:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e1be:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e1c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e1c6:	4453      	add	r3, sl
 801e1c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1cc:	0a1b      	lsrs	r3, r3, #8
 801e1ce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e1d2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e1d6:	ea43 030c 	orr.w	r3, r3, ip
 801e1da:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e1dc:	2cff      	cmp	r4, #255	@ 0xff
 801e1de:	d021      	beq.n	801e224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e1e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e1e2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e1e6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e1e8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e1ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e1ee:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e1f2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e1f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e1f8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e1fc:	fb04 fa0a 	mul.w	sl, r4, sl
 801e200:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e204:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e208:	44de      	add	lr, fp
 801e20a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e20e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e212:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e216:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e21a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e21e:	ea4e 040a 	orr.w	r4, lr, sl
 801e222:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e224:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e226:	2cff      	cmp	r4, #255	@ 0xff
 801e228:	d021      	beq.n	801e26e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e22a:	9c08      	ldr	r4, [sp, #32]
 801e22c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e230:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e232:	fb04 fb0b 	mul.w	fp, r4, fp
 801e236:	9c08      	ldr	r4, [sp, #32]
 801e238:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e23c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e23e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e242:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e246:	fb04 fa0a 	mul.w	sl, r4, sl
 801e24a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e24e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e252:	44de      	add	lr, fp
 801e254:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e258:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e25c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e260:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e264:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e268:	ea4e 040a 	orr.w	r4, lr, sl
 801e26c:	9408      	str	r4, [sp, #32]
 801e26e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e270:	2cff      	cmp	r4, #255	@ 0xff
 801e272:	d021      	beq.n	801e2b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e274:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e276:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e27a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e27c:	fb04 fb0b 	mul.w	fp, r4, fp
 801e280:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e282:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e286:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e288:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e28c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e290:	fb04 fa0a 	mul.w	sl, r4, sl
 801e294:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e298:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e29c:	44de      	add	lr, fp
 801e29e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e2a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e2ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e2b2:	ea4e 040a 	orr.w	r4, lr, sl
 801e2b6:	940c      	str	r4, [sp, #48]	@ 0x30
 801e2b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e2ba:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e2be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e2c2:	43c9      	mvns	r1, r1
 801e2c4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e2c8:	9c08      	ldr	r4, [sp, #32]
 801e2ca:	b2c9      	uxtb	r1, r1
 801e2cc:	fb08 fc0c 	mul.w	ip, r8, ip
 801e2d0:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e2d4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e2d8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e2da:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e2de:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e2e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e2e4:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e2e8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e2ec:	fb08 f80e 	mul.w	r8, r8, lr
 801e2f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2f4:	fb02 8303 	mla	r3, r2, r3, r8
 801e2f8:	9a08      	ldr	r2, [sp, #32]
 801e2fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e2fe:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e302:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e304:	fb00 330a 	mla	r3, r0, sl, r3
 801e308:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801e30c:	fb09 3900 	mla	r9, r9, r0, r3
 801e310:	783b      	ldrb	r3, [r7, #0]
 801e312:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e316:	fb03 f201 	mul.w	r2, r3, r1
 801e31a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e31e:	1c53      	adds	r3, r2, #1
 801e320:	ea4c 0c09 	orr.w	ip, ip, r9
 801e324:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e328:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e32c:	703b      	strb	r3, [r7, #0]
 801e32e:	787b      	ldrb	r3, [r7, #1]
 801e330:	434b      	muls	r3, r1
 801e332:	1c5a      	adds	r2, r3, #1
 801e334:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e338:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e33c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e340:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e344:	707b      	strb	r3, [r7, #1]
 801e346:	78bb      	ldrb	r3, [r7, #2]
 801e348:	4359      	muls	r1, r3
 801e34a:	1c4b      	adds	r3, r1, #1
 801e34c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e350:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e354:	f887 c002 	strb.w	ip, [r7, #2]
 801e358:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e35a:	3703      	adds	r7, #3
 801e35c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e35e:	441a      	add	r2, r3
 801e360:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e362:	441d      	add	r5, r3
 801e364:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e366:	9225      	str	r2, [sp, #148]	@ 0x94
 801e368:	3b01      	subs	r3, #1
 801e36a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e36c:	e6b0      	b.n	801e0d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e36e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e370:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e372:	441c      	add	r4, r3
 801e374:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e376:	441d      	add	r5, r3
 801e378:	9b07      	ldr	r3, [sp, #28]
 801e37a:	9425      	str	r4, [sp, #148]	@ 0x94
 801e37c:	3b01      	subs	r3, #1
 801e37e:	9307      	str	r3, [sp, #28]
 801e380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e382:	3303      	adds	r3, #3
 801e384:	930a      	str	r3, [sp, #40]	@ 0x28
 801e386:	e683      	b.n	801e090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e388:	d026      	beq.n	801e3d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e38a:	9b07      	ldr	r3, [sp, #28]
 801e38c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e38e:	3b01      	subs	r3, #1
 801e390:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e392:	fb00 4003 	mla	r0, r0, r3, r4
 801e396:	1400      	asrs	r0, r0, #16
 801e398:	f53f ae97 	bmi.w	801e0ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e39c:	3901      	subs	r1, #1
 801e39e:	4288      	cmp	r0, r1
 801e3a0:	f6bf ae93 	bge.w	801e0ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e3a4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e3a6:	fb01 5303 	mla	r3, r1, r3, r5
 801e3aa:	141b      	asrs	r3, r3, #16
 801e3ac:	f53f ae8d 	bmi.w	801e0ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e3b0:	3a01      	subs	r2, #1
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	f6bf ae89 	bge.w	801e0ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e3be:	f103 0e03 	add.w	lr, r3, #3
 801e3c2:	f1bb 0f00 	cmp.w	fp, #0
 801e3c6:	dc6d      	bgt.n	801e4a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801e3c8:	9b07      	ldr	r3, [sp, #28]
 801e3ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e3ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e3d4:	4423      	add	r3, r4
 801e3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	f340 81a0 	ble.w	801e720 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e3e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3ea:	eeb0 6a62 	vmov.f32	s12, s5
 801e3ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e3f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3fa:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801e3fe:	eeb0 6a43 	vmov.f32	s12, s6
 801e402:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e406:	ee16 5a10 	vmov	r5, s12
 801e40a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e40e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e412:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e416:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e41a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e41e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e422:	ee12 2a90 	vmov	r2, s5
 801e426:	eef0 2a47 	vmov.f32	s5, s14
 801e42a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e42e:	ee13 2a10 	vmov	r2, s6
 801e432:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e436:	eeb0 3a67 	vmov.f32	s6, s15
 801e43a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e43e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e440:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e442:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e444:	3b01      	subs	r3, #1
 801e446:	9316      	str	r3, [sp, #88]	@ 0x58
 801e448:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e44a:	bf08      	it	eq
 801e44c:	4613      	moveq	r3, r2
 801e44e:	9307      	str	r3, [sp, #28]
 801e450:	e610      	b.n	801e074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e452:	2800      	cmp	r0, #0
 801e454:	f43f ae82 	beq.w	801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e458:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e45c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e460:	9108      	str	r1, [sp, #32]
 801e462:	0e09      	lsrs	r1, r1, #24
 801e464:	9110      	str	r1, [sp, #64]	@ 0x40
 801e466:	e679      	b.n	801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e468:	f113 0801 	adds.w	r8, r3, #1
 801e46c:	f53f af74 	bmi.w	801e358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e470:	4541      	cmp	r1, r8
 801e472:	f6ff af71 	blt.w	801e358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e476:	f11c 0801 	adds.w	r8, ip, #1
 801e47a:	f53f af6d 	bmi.w	801e358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e47e:	45c6      	cmp	lr, r8
 801e480:	f6ff af6a 	blt.w	801e358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e484:	b209      	sxth	r1, r1
 801e486:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e48a:	fa0f f38e 	sxth.w	r3, lr
 801e48e:	9100      	str	r1, [sp, #0]
 801e490:	4639      	mov	r1, r7
 801e492:	9301      	str	r3, [sp, #4]
 801e494:	4633      	mov	r3, r6
 801e496:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e49a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e49c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e49e:	f7ff fca3 	bl	801dde8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e4a2:	e759      	b.n	801e358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e4a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e4a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e4aa:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e4ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e4b0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4b2:	1427      	asrs	r7, r4, #16
 801e4b4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e4b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e4ba:	142b      	asrs	r3, r5, #16
 801e4bc:	fb01 7303 	mla	r3, r1, r3, r7
 801e4c0:	18e7      	adds	r7, r4, r3
 801e4c2:	5ce3      	ldrb	r3, [r4, r3]
 801e4c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e4c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e4cc:	2a00      	cmp	r2, #0
 801e4ce:	f000 811d 	beq.w	801e70c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801e4d2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e4d6:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e4da:	940d      	str	r4, [sp, #52]	@ 0x34
 801e4dc:	0e24      	lsrs	r4, r4, #24
 801e4de:	9414      	str	r4, [sp, #80]	@ 0x50
 801e4e0:	b170      	cbz	r0, 801e500 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e4e2:	eb07 0801 	add.w	r8, r7, r1
 801e4e6:	5c79      	ldrb	r1, [r7, r1]
 801e4e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e4ec:	9109      	str	r1, [sp, #36]	@ 0x24
 801e4ee:	0e09      	lsrs	r1, r1, #24
 801e4f0:	9111      	str	r1, [sp, #68]	@ 0x44
 801e4f2:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e4f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e4fa:	910e      	str	r1, [sp, #56]	@ 0x38
 801e4fc:	0e09      	lsrs	r1, r1, #24
 801e4fe:	9115      	str	r1, [sp, #84]	@ 0x54
 801e500:	b292      	uxth	r2, r2
 801e502:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e504:	b280      	uxth	r0, r0
 801e506:	fb02 f900 	mul.w	r9, r2, r0
 801e50a:	0112      	lsls	r2, r2, #4
 801e50c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e510:	eba2 0809 	sub.w	r8, r2, r9
 801e514:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801e518:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e51a:	b280      	uxth	r0, r0
 801e51c:	fa1f f888 	uxth.w	r8, r8
 801e520:	1a09      	subs	r1, r1, r0
 801e522:	fb08 f202 	mul.w	r2, r8, r2
 801e526:	b289      	uxth	r1, r1
 801e528:	fb01 220c 	mla	r2, r1, ip, r2
 801e52c:	fb00 2204 	mla	r2, r0, r4, r2
 801e530:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e532:	fb09 2204 	mla	r2, r9, r4, r2
 801e536:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e53a:	2a00      	cmp	r2, #0
 801e53c:	f000 80db 	beq.w	801e6f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e540:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e544:	d019      	beq.n	801e57a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801e546:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e54a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e54e:	fb0c fa0a 	mul.w	sl, ip, sl
 801e552:	fb0c fc03 	mul.w	ip, ip, r3
 801e556:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e55a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e55e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e562:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e566:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e56a:	4453      	add	r3, sl
 801e56c:	0a3f      	lsrs	r7, r7, #8
 801e56e:	0a1b      	lsrs	r3, r3, #8
 801e570:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e574:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e578:	433b      	orrs	r3, r7
 801e57a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e57c:	2cff      	cmp	r4, #255	@ 0xff
 801e57e:	d020      	beq.n	801e5c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801e580:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e582:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e586:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e588:	4367      	muls	r7, r4
 801e58a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e58c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e590:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e594:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e596:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e59a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e59e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e5a2:	44bc      	add	ip, r7
 801e5a4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e5a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e5ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e5b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e5b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e5b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e5bc:	ea4c 040a 	orr.w	r4, ip, sl
 801e5c0:	940d      	str	r4, [sp, #52]	@ 0x34
 801e5c2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e5c4:	2cff      	cmp	r4, #255	@ 0xff
 801e5c6:	d020      	beq.n	801e60a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801e5c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e5ca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e5ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e5d0:	4367      	muls	r7, r4
 801e5d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e5d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e5d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e5dc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e5de:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e5e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e5e6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e5ea:	44bc      	add	ip, r7
 801e5ec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e5f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e5f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e5f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e5fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e600:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e604:	ea4c 040a 	orr.w	r4, ip, sl
 801e608:	9409      	str	r4, [sp, #36]	@ 0x24
 801e60a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e60c:	2cff      	cmp	r4, #255	@ 0xff
 801e60e:	d020      	beq.n	801e652 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801e610:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e612:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e616:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e618:	4367      	muls	r7, r4
 801e61a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e61c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e620:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e624:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e626:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e62a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e62e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e632:	44bc      	add	ip, r7
 801e634:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e638:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e63c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e640:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e644:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e648:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e64c:	ea4c 040a 	orr.w	r4, ip, sl
 801e650:	940e      	str	r4, [sp, #56]	@ 0x38
 801e652:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e654:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e658:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e65c:	43d2      	mvns	r2, r2
 801e65e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e662:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e664:	b2d2      	uxtb	r2, r2
 801e666:	fb08 f707 	mul.w	r7, r8, r7
 801e66a:	fb01 770c 	mla	r7, r1, ip, r7
 801e66e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e672:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e674:	fb00 770c 	mla	r7, r0, ip, r7
 801e678:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e67c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e67e:	fb09 770c 	mla	r7, r9, ip, r7
 801e682:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e686:	fb08 f80c 	mul.w	r8, r8, ip
 801e68a:	0a3f      	lsrs	r7, r7, #8
 801e68c:	fb01 8303 	mla	r3, r1, r3, r8
 801e690:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e692:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e696:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801e69a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e69c:	fb00 330a 	mla	r3, r0, sl, r3
 801e6a0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801e6a4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e6a8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e6ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6b0:	fb03 f102 	mul.w	r1, r3, r2
 801e6b4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e6b8:	1c4b      	adds	r3, r1, #1
 801e6ba:	ea47 070c 	orr.w	r7, r7, ip
 801e6be:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e6c2:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801e6c6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e6ca:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801e6ce:	4353      	muls	r3, r2
 801e6d0:	1c59      	adds	r1, r3, #1
 801e6d2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e6d6:	0a3b      	lsrs	r3, r7, #8
 801e6d8:	0c3f      	lsrs	r7, r7, #16
 801e6da:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e6de:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e6e2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e6e6:	435a      	muls	r2, r3
 801e6e8:	1c53      	adds	r3, r2, #1
 801e6ea:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e6ee:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e6f2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e6f6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e6f8:	f10e 0e03 	add.w	lr, lr, #3
 801e6fc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e6fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e702:	441a      	add	r2, r3
 801e704:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e706:	9225      	str	r2, [sp, #148]	@ 0x94
 801e708:	441d      	add	r5, r3
 801e70a:	e65a      	b.n	801e3c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801e70c:	2800      	cmp	r0, #0
 801e70e:	f43f aef7 	beq.w	801e500 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e712:	5c79      	ldrb	r1, [r7, r1]
 801e714:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e718:	9109      	str	r1, [sp, #36]	@ 0x24
 801e71a:	0e09      	lsrs	r1, r1, #24
 801e71c:	9111      	str	r1, [sp, #68]	@ 0x44
 801e71e:	e6ef      	b.n	801e500 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e720:	b01b      	add	sp, #108	@ 0x6c
 801e722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e726 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e72a:	b08d      	sub	sp, #52	@ 0x34
 801e72c:	468b      	mov	fp, r1
 801e72e:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801e732:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801e736:	fb0c 5703 	mla	r7, ip, r3, r5
 801e73a:	f1bc 0f00 	cmp.w	ip, #0
 801e73e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e740:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e744:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801e748:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801e74c:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801e750:	eb02 0607 	add.w	r6, r2, r7
 801e754:	f89b 4000 	ldrb.w	r4, [fp]
 801e758:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801e75c:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801e760:	f2c0 80c1 	blt.w	801e8e6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e764:	45e6      	cmp	lr, ip
 801e766:	f340 80be 	ble.w	801e8e6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e76a:	2d00      	cmp	r5, #0
 801e76c:	f2c0 80b7 	blt.w	801e8de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e770:	42ab      	cmp	r3, r5
 801e772:	f340 80b4 	ble.w	801e8de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e776:	5dd2      	ldrb	r2, [r2, r7]
 801e778:	9205      	str	r2, [sp, #20]
 801e77a:	7872      	ldrb	r2, [r6, #1]
 801e77c:	9206      	str	r2, [sp, #24]
 801e77e:	78b2      	ldrb	r2, [r6, #2]
 801e780:	9207      	str	r2, [sp, #28]
 801e782:	1c6a      	adds	r2, r5, #1
 801e784:	f100 80b6 	bmi.w	801e8f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e788:	4293      	cmp	r3, r2
 801e78a:	f340 80b3 	ble.w	801e8f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e78e:	f1b8 0f00 	cmp.w	r8, #0
 801e792:	f000 80af 	beq.w	801e8f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e796:	78f2      	ldrb	r2, [r6, #3]
 801e798:	9201      	str	r2, [sp, #4]
 801e79a:	7932      	ldrb	r2, [r6, #4]
 801e79c:	9202      	str	r2, [sp, #8]
 801e79e:	7972      	ldrb	r2, [r6, #5]
 801e7a0:	9203      	str	r2, [sp, #12]
 801e7a2:	f11c 0c01 	adds.w	ip, ip, #1
 801e7a6:	f100 80ad 	bmi.w	801e904 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e7aa:	45e6      	cmp	lr, ip
 801e7ac:	f340 80aa 	ble.w	801e904 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e7b0:	f1ba 0f00 	cmp.w	sl, #0
 801e7b4:	f000 80a6 	beq.w	801e904 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e7b8:	2d00      	cmp	r5, #0
 801e7ba:	f2c0 809f 	blt.w	801e8fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e7be:	42ab      	cmp	r3, r5
 801e7c0:	f340 809c 	ble.w	801e8fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e7c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e7c8:	f816 9002 	ldrb.w	r9, [r6, r2]
 801e7cc:	2203      	movs	r2, #3
 801e7ce:	fb03 6c02 	mla	ip, r3, r2, r6
 801e7d2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801e7d6:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e7da:	9704      	str	r7, [sp, #16]
 801e7dc:	3501      	adds	r5, #1
 801e7de:	f100 8098 	bmi.w	801e912 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e7e2:	42ab      	cmp	r3, r5
 801e7e4:	f340 8095 	ble.w	801e912 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e7e8:	f1b8 0f00 	cmp.w	r8, #0
 801e7ec:	f000 8091 	beq.w	801e912 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e7f0:	f04f 0c03 	mov.w	ip, #3
 801e7f4:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801e7f8:	5cb5      	ldrb	r5, [r6, r2]
 801e7fa:	fb03 620c 	mla	r2, r3, ip, r6
 801e7fe:	fb03 630c 	mla	r3, r3, ip, r6
 801e802:	7912      	ldrb	r2, [r2, #4]
 801e804:	795e      	ldrb	r6, [r3, #5]
 801e806:	fa1f f388 	uxth.w	r3, r8
 801e80a:	fa1f fc8a 	uxth.w	ip, sl
 801e80e:	fb03 f70c 	mul.w	r7, r3, ip
 801e812:	011b      	lsls	r3, r3, #4
 801e814:	9708      	str	r7, [sp, #32]
 801e816:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e81a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801e81e:	1bdb      	subs	r3, r3, r7
 801e820:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801e824:	fa1f fc8c 	uxth.w	ip, ip
 801e828:	b29b      	uxth	r3, r3
 801e82a:	9709      	str	r7, [sp, #36]	@ 0x24
 801e82c:	ebaa 0a0c 	sub.w	sl, sl, ip
 801e830:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e832:	930a      	str	r3, [sp, #40]	@ 0x28
 801e834:	fa1f fa8a 	uxth.w	sl, sl
 801e838:	ea6f 0807 	mvn.w	r8, r7
 801e83c:	9f01      	ldr	r7, [sp, #4]
 801e83e:	435f      	muls	r7, r3
 801e840:	9b05      	ldr	r3, [sp, #20]
 801e842:	fa5f f888 	uxtb.w	r8, r8
 801e846:	fb0a 7703 	mla	r7, sl, r3, r7
 801e84a:	9b08      	ldr	r3, [sp, #32]
 801e84c:	fb14 f408 	smulbb	r4, r4, r8
 801e850:	fb0c 7709 	mla	r7, ip, r9, r7
 801e854:	fb10 f008 	smulbb	r0, r0, r8
 801e858:	fb11 f108 	smulbb	r1, r1, r8
 801e85c:	fb03 7705 	mla	r7, r3, r5, r7
 801e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e862:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e866:	fb07 4703 	mla	r7, r7, r3, r4
 801e86a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e86c:	b2bf      	uxth	r7, r7
 801e86e:	1c7c      	adds	r4, r7, #1
 801e870:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801e874:	1224      	asrs	r4, r4, #8
 801e876:	f88b 4000 	strb.w	r4, [fp]
 801e87a:	9c02      	ldr	r4, [sp, #8]
 801e87c:	435c      	muls	r4, r3
 801e87e:	9b06      	ldr	r3, [sp, #24]
 801e880:	fb0a 4403 	mla	r4, sl, r3, r4
 801e884:	9b04      	ldr	r3, [sp, #16]
 801e886:	fb0c 4403 	mla	r4, ip, r3, r4
 801e88a:	9b08      	ldr	r3, [sp, #32]
 801e88c:	fb03 4402 	mla	r4, r3, r2, r4
 801e890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e894:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e898:	fb04 0403 	mla	r4, r4, r3, r0
 801e89c:	9b03      	ldr	r3, [sp, #12]
 801e89e:	435a      	muls	r2, r3
 801e8a0:	b2a4      	uxth	r4, r4
 801e8a2:	4613      	mov	r3, r2
 801e8a4:	9a07      	ldr	r2, [sp, #28]
 801e8a6:	1c60      	adds	r0, r4, #1
 801e8a8:	fb0a 3a02 	mla	sl, sl, r2, r3
 801e8ac:	9b08      	ldr	r3, [sp, #32]
 801e8ae:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801e8b2:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e8b6:	1224      	asrs	r4, r4, #8
 801e8b8:	fb03 c606 	mla	r6, r3, r6, ip
 801e8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8be:	f88b 4001 	strb.w	r4, [fp, #1]
 801e8c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e8c6:	fb06 1103 	mla	r1, r6, r3, r1
 801e8ca:	b289      	uxth	r1, r1
 801e8cc:	1c4e      	adds	r6, r1, #1
 801e8ce:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e8d2:	1209      	asrs	r1, r1, #8
 801e8d4:	f88b 1002 	strb.w	r1, [fp, #2]
 801e8d8:	b00d      	add	sp, #52	@ 0x34
 801e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e8e2:	9405      	str	r4, [sp, #20]
 801e8e4:	e74d      	b.n	801e782 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801e8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8ea:	9401      	str	r4, [sp, #4]
 801e8ec:	9405      	str	r4, [sp, #20]
 801e8ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e8f2:	e756      	b.n	801e7a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e8f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8f8:	9401      	str	r4, [sp, #4]
 801e8fa:	e752      	b.n	801e7a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e8fc:	468e      	mov	lr, r1
 801e8fe:	9004      	str	r0, [sp, #16]
 801e900:	46a1      	mov	r9, r4
 801e902:	e76b      	b.n	801e7dc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801e904:	460e      	mov	r6, r1
 801e906:	4602      	mov	r2, r0
 801e908:	4625      	mov	r5, r4
 801e90a:	468e      	mov	lr, r1
 801e90c:	9004      	str	r0, [sp, #16]
 801e90e:	46a1      	mov	r9, r4
 801e910:	e779      	b.n	801e806 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801e912:	460e      	mov	r6, r1
 801e914:	4602      	mov	r2, r0
 801e916:	4625      	mov	r5, r4
 801e918:	e775      	b.n	801e806 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801e91a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e91a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e91e:	b09f      	sub	sp, #124	@ 0x7c
 801e920:	920e      	str	r2, [sp, #56]	@ 0x38
 801e922:	9307      	str	r3, [sp, #28]
 801e924:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801e926:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801e92a:	901d      	str	r0, [sp, #116]	@ 0x74
 801e92c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e92e:	6850      	ldr	r0, [r2, #4]
 801e930:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e932:	6812      	ldr	r2, [r2, #0]
 801e934:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801e938:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801e93c:	fb00 1303 	mla	r3, r0, r3, r1
 801e940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e944:	18d3      	adds	r3, r2, r3
 801e946:	9308      	str	r3, [sp, #32]
 801e948:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e94e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e950:	43db      	mvns	r3, r3
 801e952:	b2db      	uxtb	r3, r3
 801e954:	9309      	str	r3, [sp, #36]	@ 0x24
 801e956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e958:	2b00      	cmp	r3, #0
 801e95a:	dc03      	bgt.n	801e964 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e95e:	2b00      	cmp	r3, #0
 801e960:	f340 81f5 	ble.w	801ed4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e964:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e966:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e96a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e96e:	1e48      	subs	r0, r1, #1
 801e970:	1e54      	subs	r4, r2, #1
 801e972:	9b07      	ldr	r3, [sp, #28]
 801e974:	2b00      	cmp	r3, #0
 801e976:	f340 80d5 	ble.w	801eb24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e97a:	ea5f 452a 	movs.w	r5, sl, asr #16
 801e97e:	ea4f 4328 	mov.w	r3, r8, asr #16
 801e982:	d406      	bmi.n	801e992 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e984:	4285      	cmp	r5, r0
 801e986:	da04      	bge.n	801e992 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e988:	2b00      	cmp	r3, #0
 801e98a:	db02      	blt.n	801e992 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e98c:	42a3      	cmp	r3, r4
 801e98e:	f2c0 80ca 	blt.w	801eb26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e992:	3501      	adds	r5, #1
 801e994:	f100 80bb 	bmi.w	801eb0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e998:	42a9      	cmp	r1, r5
 801e99a:	f2c0 80b8 	blt.w	801eb0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e99e:	3301      	adds	r3, #1
 801e9a0:	f100 80b5 	bmi.w	801eb0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e9a4:	429a      	cmp	r2, r3
 801e9a6:	f2c0 80b2 	blt.w	801eb0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e9aa:	9b07      	ldr	r3, [sp, #28]
 801e9ac:	9d08      	ldr	r5, [sp, #32]
 801e9ae:	930d      	str	r3, [sp, #52]	@ 0x34
 801e9b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	f340 80d6 	ble.w	801eb64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801e9b8:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801e9ba:	ea4f 4428 	mov.w	r4, r8, asr #16
 801e9be:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e9c0:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801e9c4:	68c6      	ldr	r6, [r0, #12]
 801e9c6:	ea5f 402a 	movs.w	r0, sl, asr #16
 801e9ca:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801e9ce:	689b      	ldr	r3, [r3, #8]
 801e9d0:	f100 810f 	bmi.w	801ebf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e9d4:	1e5f      	subs	r7, r3, #1
 801e9d6:	42b8      	cmp	r0, r7
 801e9d8:	f280 810b 	bge.w	801ebf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e9dc:	2c00      	cmp	r4, #0
 801e9de:	f2c0 8108 	blt.w	801ebf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e9e2:	1e77      	subs	r7, r6, #1
 801e9e4:	42bc      	cmp	r4, r7
 801e9e6:	f280 8104 	bge.w	801ebf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e9ea:	b21b      	sxth	r3, r3
 801e9ec:	fb04 0003 	mla	r0, r4, r3, r0
 801e9f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e9f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e9f6:	1826      	adds	r6, r4, r0
 801e9f8:	5c24      	ldrb	r4, [r4, r0]
 801e9fa:	78b7      	ldrb	r7, [r6, #2]
 801e9fc:	7870      	ldrb	r0, [r6, #1]
 801e9fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ea00:	7977      	ldrb	r7, [r6, #5]
 801ea02:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ea06:	f896 c004 	ldrb.w	ip, [r6, #4]
 801ea0a:	9710      	str	r7, [sp, #64]	@ 0x40
 801ea0c:	b1c9      	cbz	r1, 801ea42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ea0e:	f04f 0b03 	mov.w	fp, #3
 801ea12:	f06f 0904 	mvn.w	r9, #4
 801ea16:	3605      	adds	r6, #5
 801ea18:	fb13 930b 	smlabb	r3, r3, fp, r9
 801ea1c:	eb06 0b03 	add.w	fp, r6, r3
 801ea20:	5cf3      	ldrb	r3, [r6, r3]
 801ea22:	9311      	str	r3, [sp, #68]	@ 0x44
 801ea24:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801ea28:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ea2a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ea2e:	9315      	str	r3, [sp, #84]	@ 0x54
 801ea30:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801ea34:	9312      	str	r3, [sp, #72]	@ 0x48
 801ea36:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801ea3a:	9314      	str	r3, [sp, #80]	@ 0x50
 801ea3c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801ea40:	9316      	str	r3, [sp, #88]	@ 0x58
 801ea42:	b292      	uxth	r2, r2
 801ea44:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801ea46:	b289      	uxth	r1, r1
 801ea48:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801ea4c:	fb02 f601 	mul.w	r6, r2, r1
 801ea50:	0112      	lsls	r2, r2, #4
 801ea52:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801ea56:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801ea5a:	1b92      	subs	r2, r2, r6
 801ea5c:	b289      	uxth	r1, r1
 801ea5e:	b292      	uxth	r2, r2
 801ea60:	eba9 0901 	sub.w	r9, r9, r1
 801ea64:	fb02 fe0e 	mul.w	lr, r2, lr
 801ea68:	fa1f f989 	uxth.w	r9, r9
 801ea6c:	fb02 fc0c 	mul.w	ip, r2, ip
 801ea70:	fb09 e404 	mla	r4, r9, r4, lr
 801ea74:	f895 e000 	ldrb.w	lr, [r5]
 801ea78:	fb09 c000 	mla	r0, r9, r0, ip
 801ea7c:	fb01 4407 	mla	r4, r1, r7, r4
 801ea80:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801ea82:	fb06 4407 	mla	r4, r6, r7, r4
 801ea86:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ea88:	fb1e fe07 	smulbb	lr, lr, r7
 801ea8c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ea90:	fb04 e403 	mla	r4, r4, r3, lr
 801ea94:	b2a4      	uxth	r4, r4
 801ea96:	f104 0e01 	add.w	lr, r4, #1
 801ea9a:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801ea9e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eaa0:	fb01 0004 	mla	r0, r1, r4, r0
 801eaa4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801eaa6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eaaa:	fb06 0004 	mla	r0, r6, r4, r0
 801eaae:	786c      	ldrb	r4, [r5, #1]
 801eab0:	f885 e000 	strb.w	lr, [r5]
 801eab4:	fb14 f407 	smulbb	r4, r4, r7
 801eab8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801eabc:	fb00 4003 	mla	r0, r0, r3, r4
 801eac0:	b280      	uxth	r0, r0
 801eac2:	1c44      	adds	r4, r0, #1
 801eac4:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801eac8:	1200      	asrs	r0, r0, #8
 801eaca:	7068      	strb	r0, [r5, #1]
 801eacc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eace:	4342      	muls	r2, r0
 801ead0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ead2:	fb09 2200 	mla	r2, r9, r0, r2
 801ead6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ead8:	fb01 2100 	mla	r1, r1, r0, r2
 801eadc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eade:	fb06 1602 	mla	r6, r6, r2, r1
 801eae2:	78a9      	ldrb	r1, [r5, #2]
 801eae4:	fb11 f107 	smulbb	r1, r1, r7
 801eae8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801eaec:	fb06 1303 	mla	r3, r6, r3, r1
 801eaf0:	b29b      	uxth	r3, r3
 801eaf2:	1c5e      	adds	r6, r3, #1
 801eaf4:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801eaf8:	121b      	asrs	r3, r3, #8
 801eafa:	70ab      	strb	r3, [r5, #2]
 801eafc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801eafe:	3503      	adds	r5, #3
 801eb00:	449a      	add	sl, r3
 801eb02:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801eb04:	4498      	add	r8, r3
 801eb06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb08:	3b01      	subs	r3, #1
 801eb0a:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb0c:	e750      	b.n	801e9b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801eb0e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801eb10:	449a      	add	sl, r3
 801eb12:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801eb14:	4498      	add	r8, r3
 801eb16:	9b07      	ldr	r3, [sp, #28]
 801eb18:	3b01      	subs	r3, #1
 801eb1a:	9307      	str	r3, [sp, #28]
 801eb1c:	9b08      	ldr	r3, [sp, #32]
 801eb1e:	3303      	adds	r3, #3
 801eb20:	9308      	str	r3, [sp, #32]
 801eb22:	e726      	b.n	801e972 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801eb24:	d026      	beq.n	801eb74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801eb26:	9b07      	ldr	r3, [sp, #28]
 801eb28:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801eb2a:	3b01      	subs	r3, #1
 801eb2c:	fb00 a003 	mla	r0, r0, r3, sl
 801eb30:	1400      	asrs	r0, r0, #16
 801eb32:	f53f af3a 	bmi.w	801e9aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb36:	3901      	subs	r1, #1
 801eb38:	4288      	cmp	r0, r1
 801eb3a:	f6bf af36 	bge.w	801e9aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb3e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801eb40:	fb01 8303 	mla	r3, r1, r3, r8
 801eb44:	141b      	asrs	r3, r3, #16
 801eb46:	f53f af30 	bmi.w	801e9aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb4a:	3a01      	subs	r2, #1
 801eb4c:	4293      	cmp	r3, r2
 801eb4e:	f6bf af2c 	bge.w	801e9aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb52:	9b08      	ldr	r3, [sp, #32]
 801eb54:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801eb58:	1cdd      	adds	r5, r3, #3
 801eb5a:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801eb5e:	f1bc 0f00 	cmp.w	ip, #0
 801eb62:	dc5f      	bgt.n	801ec24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801eb64:	9b07      	ldr	r3, [sp, #28]
 801eb66:	9a08      	ldr	r2, [sp, #32]
 801eb68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb70:	441a      	add	r2, r3
 801eb72:	9208      	str	r2, [sp, #32]
 801eb74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	f340 80e9 	ble.w	801ed4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801eb7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eb80:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb8a:	eef0 6a62 	vmov.f32	s13, s5
 801eb8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eb92:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb9a:	ee16 aa90 	vmov	sl, s13
 801eb9e:	eef0 6a43 	vmov.f32	s13, s6
 801eba2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eba6:	ee16 8a90 	vmov	r8, s13
 801ebaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebc2:	ee12 2a90 	vmov	r2, s5
 801ebc6:	eef0 2a47 	vmov.f32	s5, s14
 801ebca:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebce:	ee13 2a10 	vmov	r2, s6
 801ebd2:	932b      	str	r3, [sp, #172]	@ 0xac
 801ebd4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ebd6:	eeb0 3a67 	vmov.f32	s6, s15
 801ebda:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebde:	932c      	str	r3, [sp, #176]	@ 0xb0
 801ebe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ebe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ebe4:	3b01      	subs	r3, #1
 801ebe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebe8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ebea:	bf08      	it	eq
 801ebec:	4613      	moveq	r3, r2
 801ebee:	9307      	str	r3, [sp, #28]
 801ebf0:	e6b1      	b.n	801e956 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ebf2:	1c47      	adds	r7, r0, #1
 801ebf4:	d482      	bmi.n	801eafc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ebf6:	42bb      	cmp	r3, r7
 801ebf8:	db80      	blt.n	801eafc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ebfa:	1c67      	adds	r7, r4, #1
 801ebfc:	f53f af7e 	bmi.w	801eafc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec00:	42be      	cmp	r6, r7
 801ec02:	f6ff af7b 	blt.w	801eafc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec06:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ec08:	b236      	sxth	r6, r6
 801ec0a:	9001      	str	r0, [sp, #4]
 801ec0c:	b21b      	sxth	r3, r3
 801ec0e:	9600      	str	r6, [sp, #0]
 801ec10:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ec12:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801ec16:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801ec1a:	4629      	mov	r1, r5
 801ec1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ec1e:	f7ff fd82 	bl	801e726 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801ec22:	e76b      	b.n	801eafc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec24:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801ec26:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ec2a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801ec2e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801ec32:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801ec36:	ea4f 4128 	mov.w	r1, r8, asr #16
 801ec3a:	fb07 0101 	mla	r1, r7, r1, r0
 801ec3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ec40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ec44:	1844      	adds	r4, r0, r1
 801ec46:	5c40      	ldrb	r0, [r0, r1]
 801ec48:	78a6      	ldrb	r6, [r4, #2]
 801ec4a:	7861      	ldrb	r1, [r4, #1]
 801ec4c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801ec4e:	78e6      	ldrb	r6, [r4, #3]
 801ec50:	910d      	str	r1, [sp, #52]	@ 0x34
 801ec52:	9610      	str	r6, [sp, #64]	@ 0x40
 801ec54:	f894 9004 	ldrb.w	r9, [r4, #4]
 801ec58:	f894 b005 	ldrb.w	fp, [r4, #5]
 801ec5c:	b192      	cbz	r2, 801ec84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801ec5e:	f06f 0604 	mvn.w	r6, #4
 801ec62:	2103      	movs	r1, #3
 801ec64:	3405      	adds	r4, #5
 801ec66:	fb17 6701 	smlabb	r7, r7, r1, r6
 801ec6a:	19e6      	adds	r6, r4, r7
 801ec6c:	5de4      	ldrb	r4, [r4, r7]
 801ec6e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ec70:	7874      	ldrb	r4, [r6, #1]
 801ec72:	9419      	str	r4, [sp, #100]	@ 0x64
 801ec74:	78b4      	ldrb	r4, [r6, #2]
 801ec76:	941b      	str	r4, [sp, #108]	@ 0x6c
 801ec78:	78f4      	ldrb	r4, [r6, #3]
 801ec7a:	9418      	str	r4, [sp, #96]	@ 0x60
 801ec7c:	7934      	ldrb	r4, [r6, #4]
 801ec7e:	941a      	str	r4, [sp, #104]	@ 0x68
 801ec80:	7974      	ldrb	r4, [r6, #5]
 801ec82:	941c      	str	r4, [sp, #112]	@ 0x70
 801ec84:	b29b      	uxth	r3, r3
 801ec86:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ec88:	b292      	uxth	r2, r2
 801ec8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ec8c:	3503      	adds	r5, #3
 801ec8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ec92:	fb03 f402 	mul.w	r4, r3, r2
 801ec96:	011b      	lsls	r3, r3, #4
 801ec98:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801ec9c:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801eca0:	1b1b      	subs	r3, r3, r4
 801eca2:	b292      	uxth	r2, r2
 801eca4:	b29b      	uxth	r3, r3
 801eca6:	1ab6      	subs	r6, r6, r2
 801eca8:	435f      	muls	r7, r3
 801ecaa:	b2b6      	uxth	r6, r6
 801ecac:	fb03 f909 	mul.w	r9, r3, r9
 801ecb0:	fb03 fb0b 	mul.w	fp, r3, fp
 801ecb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ecb6:	fb06 7000 	mla	r0, r6, r0, r7
 801ecba:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801ecbc:	fb06 bb03 	mla	fp, r6, r3, fp
 801ecc0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ecc2:	fb02 0007 	mla	r0, r2, r7, r0
 801ecc6:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801ecc8:	fb02 bb03 	mla	fp, r2, r3, fp
 801eccc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ecce:	fb04 0007 	mla	r0, r4, r7, r0
 801ecd2:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801ecd6:	fb17 f701 	smulbb	r7, r7, r1
 801ecda:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ecde:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ece0:	fb00 700e 	mla	r0, r0, lr, r7
 801ece4:	fb06 9101 	mla	r1, r6, r1, r9
 801ece8:	b280      	uxth	r0, r0
 801ecea:	1c47      	adds	r7, r0, #1
 801ecec:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801ecf0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ecf2:	1200      	asrs	r0, r0, #8
 801ecf4:	f805 0c06 	strb.w	r0, [r5, #-6]
 801ecf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ecfa:	fb02 1100 	mla	r1, r2, r0, r1
 801ecfe:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801ed00:	fb04 1100 	mla	r1, r4, r0, r1
 801ed04:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801ed08:	fb04 b403 	mla	r4, r4, r3, fp
 801ed0c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801ed10:	fb10 f007 	smulbb	r0, r0, r7
 801ed14:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ed18:	fb13 f307 	smulbb	r3, r3, r7
 801ed1c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ed20:	fb01 010e 	mla	r1, r1, lr, r0
 801ed24:	fb04 340e 	mla	r4, r4, lr, r3
 801ed28:	b289      	uxth	r1, r1
 801ed2a:	b2a4      	uxth	r4, r4
 801ed2c:	1c48      	adds	r0, r1, #1
 801ed2e:	1c63      	adds	r3, r4, #1
 801ed30:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ed34:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ed38:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ed3a:	1209      	asrs	r1, r1, #8
 801ed3c:	1224      	asrs	r4, r4, #8
 801ed3e:	449a      	add	sl, r3
 801ed40:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ed42:	f805 1c05 	strb.w	r1, [r5, #-5]
 801ed46:	f805 4c04 	strb.w	r4, [r5, #-4]
 801ed4a:	4498      	add	r8, r3
 801ed4c:	e707      	b.n	801eb5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ed4e:	b01f      	add	sp, #124	@ 0x7c
 801ed50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed54 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ed54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed58:	b087      	sub	sp, #28
 801ed5a:	780d      	ldrb	r5, [r1, #0]
 801ed5c:	784c      	ldrb	r4, [r1, #1]
 801ed5e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801ed62:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801ed66:	9004      	str	r0, [sp, #16]
 801ed68:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801ed6c:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801ed70:	9005      	str	r0, [sp, #20]
 801ed72:	fb06 bc03 	mla	ip, r6, r3, fp
 801ed76:	2e00      	cmp	r6, #0
 801ed78:	7888      	ldrb	r0, [r1, #2]
 801ed7a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ed7e:	eb02 090c 	add.w	r9, r2, ip
 801ed82:	f2c0 8084 	blt.w	801ee8e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ed86:	42b7      	cmp	r7, r6
 801ed88:	f340 8081 	ble.w	801ee8e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ed8c:	f1bb 0f00 	cmp.w	fp, #0
 801ed90:	db79      	blt.n	801ee86 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ed92:	455b      	cmp	r3, fp
 801ed94:	dd77      	ble.n	801ee86 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ed96:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ed9a:	9201      	str	r2, [sp, #4]
 801ed9c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eda0:	9202      	str	r2, [sp, #8]
 801eda2:	f899 2002 	ldrb.w	r2, [r9, #2]
 801eda6:	9203      	str	r2, [sp, #12]
 801eda8:	f11b 0201 	adds.w	r2, fp, #1
 801edac:	d476      	bmi.n	801ee9c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801edae:	4293      	cmp	r3, r2
 801edb0:	dd74      	ble.n	801ee9c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801edb2:	9a04      	ldr	r2, [sp, #16]
 801edb4:	2a00      	cmp	r2, #0
 801edb6:	d071      	beq.n	801ee9c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801edb8:	f899 8003 	ldrb.w	r8, [r9, #3]
 801edbc:	f899 c004 	ldrb.w	ip, [r9, #4]
 801edc0:	f899 a005 	ldrb.w	sl, [r9, #5]
 801edc4:	3601      	adds	r6, #1
 801edc6:	d471      	bmi.n	801eeac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801edc8:	42b7      	cmp	r7, r6
 801edca:	dd6f      	ble.n	801eeac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801edcc:	9a05      	ldr	r2, [sp, #20]
 801edce:	2a00      	cmp	r2, #0
 801edd0:	d06c      	beq.n	801eeac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801edd2:	f1bb 0f00 	cmp.w	fp, #0
 801edd6:	db65      	blt.n	801eea4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801edd8:	455b      	cmp	r3, fp
 801edda:	dd63      	ble.n	801eea4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801eddc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ede0:	f819 e002 	ldrb.w	lr, [r9, r2]
 801ede4:	2203      	movs	r2, #3
 801ede6:	fb03 9602 	mla	r6, r3, r2, r9
 801edea:	7877      	ldrb	r7, [r6, #1]
 801edec:	78b6      	ldrb	r6, [r6, #2]
 801edee:	f11b 0b01 	adds.w	fp, fp, #1
 801edf2:	d40c      	bmi.n	801ee0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801edf4:	455b      	cmp	r3, fp
 801edf6:	dd0a      	ble.n	801ee0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801edf8:	9a04      	ldr	r2, [sp, #16]
 801edfa:	b142      	cbz	r2, 801ee0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801edfc:	2203      	movs	r2, #3
 801edfe:	fb13 2002 	smlabb	r0, r3, r2, r2
 801ee02:	f819 5000 	ldrb.w	r5, [r9, r0]
 801ee06:	fb03 9002 	mla	r0, r3, r2, r9
 801ee0a:	7904      	ldrb	r4, [r0, #4]
 801ee0c:	7940      	ldrb	r0, [r0, #5]
 801ee0e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ee12:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ee16:	fb03 fb02 	mul.w	fp, r3, r2
 801ee1a:	011b      	lsls	r3, r3, #4
 801ee1c:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801ee20:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801ee24:	eba3 030b 	sub.w	r3, r3, fp
 801ee28:	b292      	uxth	r2, r2
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	eba9 0902 	sub.w	r9, r9, r2
 801ee30:	9304      	str	r3, [sp, #16]
 801ee32:	fa1f f989 	uxth.w	r9, r9
 801ee36:	fb03 f808 	mul.w	r8, r3, r8
 801ee3a:	9b01      	ldr	r3, [sp, #4]
 801ee3c:	fb09 8803 	mla	r8, r9, r3, r8
 801ee40:	9b04      	ldr	r3, [sp, #16]
 801ee42:	fb03 fc0c 	mul.w	ip, r3, ip
 801ee46:	9b02      	ldr	r3, [sp, #8]
 801ee48:	fb02 880e 	mla	r8, r2, lr, r8
 801ee4c:	fb09 cc03 	mla	ip, r9, r3, ip
 801ee50:	9b04      	ldr	r3, [sp, #16]
 801ee52:	fb0b 8805 	mla	r8, fp, r5, r8
 801ee56:	fb02 c707 	mla	r7, r2, r7, ip
 801ee5a:	fb03 f30a 	mul.w	r3, r3, sl
 801ee5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ee62:	fb0b 7404 	mla	r4, fp, r4, r7
 801ee66:	f881 8000 	strb.w	r8, [r1]
 801ee6a:	1224      	asrs	r4, r4, #8
 801ee6c:	704c      	strb	r4, [r1, #1]
 801ee6e:	9c03      	ldr	r4, [sp, #12]
 801ee70:	fb09 3904 	mla	r9, r9, r4, r3
 801ee74:	fb02 9206 	mla	r2, r2, r6, r9
 801ee78:	fb0b 2000 	mla	r0, fp, r0, r2
 801ee7c:	1200      	asrs	r0, r0, #8
 801ee7e:	7088      	strb	r0, [r1, #2]
 801ee80:	b007      	add	sp, #28
 801ee82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee86:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ee8a:	9501      	str	r5, [sp, #4]
 801ee8c:	e78c      	b.n	801eda8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801ee8e:	4682      	mov	sl, r0
 801ee90:	46a4      	mov	ip, r4
 801ee92:	46a8      	mov	r8, r5
 801ee94:	9501      	str	r5, [sp, #4]
 801ee96:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ee9a:	e793      	b.n	801edc4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ee9c:	4682      	mov	sl, r0
 801ee9e:	46a4      	mov	ip, r4
 801eea0:	46a8      	mov	r8, r5
 801eea2:	e78f      	b.n	801edc4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801eea4:	4606      	mov	r6, r0
 801eea6:	4627      	mov	r7, r4
 801eea8:	46ae      	mov	lr, r5
 801eeaa:	e7a0      	b.n	801edee <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801eeac:	4606      	mov	r6, r0
 801eeae:	4627      	mov	r7, r4
 801eeb0:	46ae      	mov	lr, r5
 801eeb2:	e7ac      	b.n	801ee0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801eeb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb8:	b09b      	sub	sp, #108	@ 0x6c
 801eeba:	920b      	str	r2, [sp, #44]	@ 0x2c
 801eebc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801eebe:	9019      	str	r0, [sp, #100]	@ 0x64
 801eec0:	9109      	str	r1, [sp, #36]	@ 0x24
 801eec2:	6850      	ldr	r0, [r2, #4]
 801eec4:	9306      	str	r3, [sp, #24]
 801eec6:	6812      	ldr	r2, [r2, #0]
 801eec8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801eecc:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801eed0:	fb00 1303 	mla	r3, r0, r3, r1
 801eed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eed8:	18d3      	adds	r3, r2, r3
 801eeda:	9307      	str	r3, [sp, #28]
 801eedc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	9308      	str	r3, [sp, #32]
 801eee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	dc03      	bgt.n	801eef0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	f340 81ab 	ble.w	801f246 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801eef0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801eef2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eef6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eefa:	1e48      	subs	r0, r1, #1
 801eefc:	1e55      	subs	r5, r2, #1
 801eefe:	9b06      	ldr	r3, [sp, #24]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	f340 80b1 	ble.w	801f068 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ef06:	ea5f 462b 	movs.w	r6, fp, asr #16
 801ef0a:	ea4f 4324 	mov.w	r3, r4, asr #16
 801ef0e:	d406      	bmi.n	801ef1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef10:	4286      	cmp	r6, r0
 801ef12:	da04      	bge.n	801ef1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	db02      	blt.n	801ef1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef18:	42ab      	cmp	r3, r5
 801ef1a:	f2c0 80a6 	blt.w	801f06a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ef1e:	3601      	adds	r6, #1
 801ef20:	f100 8097 	bmi.w	801f052 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ef24:	42b1      	cmp	r1, r6
 801ef26:	f2c0 8094 	blt.w	801f052 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ef2a:	3301      	adds	r3, #1
 801ef2c:	f100 8091 	bmi.w	801f052 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ef30:	429a      	cmp	r2, r3
 801ef32:	f2c0 808e 	blt.w	801f052 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ef36:	9b06      	ldr	r3, [sp, #24]
 801ef38:	9e07      	ldr	r6, [sp, #28]
 801ef3a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	f340 80b0 	ble.w	801f0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ef44:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801ef46:	1425      	asrs	r5, r4, #16
 801ef48:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef4a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801ef4e:	68c7      	ldr	r7, [r0, #12]
 801ef50:	ea5f 402b 	movs.w	r0, fp, asr #16
 801ef54:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801ef58:	689b      	ldr	r3, [r3, #8]
 801ef5a:	f100 80ea 	bmi.w	801f132 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ef5e:	f103 3cff 	add.w	ip, r3, #4294967295
 801ef62:	4560      	cmp	r0, ip
 801ef64:	f280 80e5 	bge.w	801f132 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ef68:	2d00      	cmp	r5, #0
 801ef6a:	f2c0 80e2 	blt.w	801f132 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ef6e:	f107 3cff 	add.w	ip, r7, #4294967295
 801ef72:	4565      	cmp	r5, ip
 801ef74:	f280 80dd 	bge.w	801f132 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ef78:	b21b      	sxth	r3, r3
 801ef7a:	fb05 0003 	mla	r0, r5, r3, r0
 801ef7e:	9d08      	ldr	r5, [sp, #32]
 801ef80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef84:	182f      	adds	r7, r5, r0
 801ef86:	5c2d      	ldrb	r5, [r5, r0]
 801ef88:	7878      	ldrb	r0, [r7, #1]
 801ef8a:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ef8e:	900c      	str	r0, [sp, #48]	@ 0x30
 801ef90:	f897 9003 	ldrb.w	r9, [r7, #3]
 801ef94:	f897 8004 	ldrb.w	r8, [r7, #4]
 801ef98:	f897 a005 	ldrb.w	sl, [r7, #5]
 801ef9c:	b1c9      	cbz	r1, 801efd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ef9e:	f04f 0c03 	mov.w	ip, #3
 801efa2:	f06f 0004 	mvn.w	r0, #4
 801efa6:	3705      	adds	r7, #5
 801efa8:	fb13 030c 	smlabb	r3, r3, ip, r0
 801efac:	eb07 0c03 	add.w	ip, r7, r3
 801efb0:	5cfb      	ldrb	r3, [r7, r3]
 801efb2:	930d      	str	r3, [sp, #52]	@ 0x34
 801efb4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801efb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801efba:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801efbe:	9311      	str	r3, [sp, #68]	@ 0x44
 801efc0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801efc4:	930e      	str	r3, [sp, #56]	@ 0x38
 801efc6:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801efca:	9310      	str	r3, [sp, #64]	@ 0x40
 801efcc:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801efd0:	9312      	str	r3, [sp, #72]	@ 0x48
 801efd2:	b292      	uxth	r2, r2
 801efd4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801efd6:	b289      	uxth	r1, r1
 801efd8:	fb02 f301 	mul.w	r3, r2, r1
 801efdc:	0112      	lsls	r2, r2, #4
 801efde:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801efe2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801efe6:	1ad2      	subs	r2, r2, r3
 801efe8:	b289      	uxth	r1, r1
 801efea:	b292      	uxth	r2, r2
 801efec:	1a7f      	subs	r7, r7, r1
 801efee:	fb02 f909 	mul.w	r9, r2, r9
 801eff2:	b2bf      	uxth	r7, r7
 801eff4:	fb02 f808 	mul.w	r8, r2, r8
 801eff8:	fb02 fa0a 	mul.w	sl, r2, sl
 801effc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801effe:	fb07 9905 	mla	r9, r7, r5, r9
 801f002:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f004:	fb07 8800 	mla	r8, r7, r0, r8
 801f008:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f00a:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f00e:	fb01 9905 	mla	r9, r1, r5, r9
 801f012:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f014:	fb01 8800 	mla	r8, r1, r0, r8
 801f018:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f01a:	fb01 a102 	mla	r1, r1, r2, sl
 801f01e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f020:	fb03 9905 	mla	r9, r3, r5, r9
 801f024:	fb03 8800 	mla	r8, r3, r0, r8
 801f028:	fb03 1302 	mla	r3, r3, r2, r1
 801f02c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f030:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f034:	121b      	asrs	r3, r3, #8
 801f036:	f886 9000 	strb.w	r9, [r6]
 801f03a:	f886 8001 	strb.w	r8, [r6, #1]
 801f03e:	70b3      	strb	r3, [r6, #2]
 801f040:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f042:	3603      	adds	r6, #3
 801f044:	449b      	add	fp, r3
 801f046:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f048:	441c      	add	r4, r3
 801f04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f04c:	3b01      	subs	r3, #1
 801f04e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f050:	e774      	b.n	801ef3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f052:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f054:	449b      	add	fp, r3
 801f056:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f058:	441c      	add	r4, r3
 801f05a:	9b06      	ldr	r3, [sp, #24]
 801f05c:	3b01      	subs	r3, #1
 801f05e:	9306      	str	r3, [sp, #24]
 801f060:	9b07      	ldr	r3, [sp, #28]
 801f062:	3303      	adds	r3, #3
 801f064:	9307      	str	r3, [sp, #28]
 801f066:	e74a      	b.n	801eefe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f068:	d024      	beq.n	801f0b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f06a:	9b06      	ldr	r3, [sp, #24]
 801f06c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801f06e:	3b01      	subs	r3, #1
 801f070:	fb00 b003 	mla	r0, r0, r3, fp
 801f074:	1400      	asrs	r0, r0, #16
 801f076:	f53f af5e 	bmi.w	801ef36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f07a:	3901      	subs	r1, #1
 801f07c:	4288      	cmp	r0, r1
 801f07e:	f6bf af5a 	bge.w	801ef36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f082:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f084:	fb01 4303 	mla	r3, r1, r3, r4
 801f088:	141b      	asrs	r3, r3, #16
 801f08a:	f53f af54 	bmi.w	801ef36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f08e:	3a01      	subs	r2, #1
 801f090:	4293      	cmp	r3, r2
 801f092:	f6bf af50 	bge.w	801ef36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f096:	9b07      	ldr	r3, [sp, #28]
 801f098:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f09c:	1cde      	adds	r6, r3, #3
 801f09e:	f1be 0f00 	cmp.w	lr, #0
 801f0a2:	dc5f      	bgt.n	801f164 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f0a4:	9b06      	ldr	r3, [sp, #24]
 801f0a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f0aa:	9b07      	ldr	r3, [sp, #28]
 801f0ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f0b0:	4423      	add	r3, r4
 801f0b2:	9307      	str	r3, [sp, #28]
 801f0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	f340 80c5 	ble.w	801f246 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f0bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f0c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f0c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0ca:	eef0 6a62 	vmov.f32	s13, s5
 801f0ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f0d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0da:	ee16 ba90 	vmov	fp, s13
 801f0de:	eef0 6a43 	vmov.f32	s13, s6
 801f0e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0e6:	ee16 4a90 	vmov	r4, s13
 801f0ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f102:	ee12 2a90 	vmov	r2, s5
 801f106:	eef0 2a47 	vmov.f32	s5, s14
 801f10a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f10e:	ee13 2a10 	vmov	r2, s6
 801f112:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f114:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f116:	eeb0 3a67 	vmov.f32	s6, s15
 801f11a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f11e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f122:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f124:	3b01      	subs	r3, #1
 801f126:	9309      	str	r3, [sp, #36]	@ 0x24
 801f128:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f12a:	bf08      	it	eq
 801f12c:	4613      	moveq	r3, r2
 801f12e:	9306      	str	r3, [sp, #24]
 801f130:	e6d7      	b.n	801eee2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f132:	f110 0c01 	adds.w	ip, r0, #1
 801f136:	d483      	bmi.n	801f040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f138:	4563      	cmp	r3, ip
 801f13a:	db81      	blt.n	801f040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f13c:	f115 0c01 	adds.w	ip, r5, #1
 801f140:	f53f af7e 	bmi.w	801f040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f144:	4567      	cmp	r7, ip
 801f146:	f6ff af7b 	blt.w	801f040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f14a:	b23f      	sxth	r7, r7
 801f14c:	b21b      	sxth	r3, r3
 801f14e:	9700      	str	r7, [sp, #0]
 801f150:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f154:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f158:	9a08      	ldr	r2, [sp, #32]
 801f15a:	4631      	mov	r1, r6
 801f15c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f15e:	f7ff fdf9 	bl	801ed54 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f162:	e76d      	b.n	801f040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f164:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f166:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f16a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f16e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f172:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f176:	1421      	asrs	r1, r4, #16
 801f178:	930a      	str	r3, [sp, #40]	@ 0x28
 801f17a:	fb0c 0101 	mla	r1, ip, r1, r0
 801f17e:	9808      	ldr	r0, [sp, #32]
 801f180:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f184:	1845      	adds	r5, r0, r1
 801f186:	5c40      	ldrb	r0, [r0, r1]
 801f188:	796f      	ldrb	r7, [r5, #5]
 801f18a:	7869      	ldrb	r1, [r5, #1]
 801f18c:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f190:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f194:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f198:	970c      	str	r7, [sp, #48]	@ 0x30
 801f19a:	b1a2      	cbz	r2, 801f1c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f19c:	2703      	movs	r7, #3
 801f19e:	f06f 0304 	mvn.w	r3, #4
 801f1a2:	3505      	adds	r5, #5
 801f1a4:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f1a8:	eb05 070c 	add.w	r7, r5, ip
 801f1ac:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f1b0:	9513      	str	r5, [sp, #76]	@ 0x4c
 801f1b2:	787d      	ldrb	r5, [r7, #1]
 801f1b4:	9515      	str	r5, [sp, #84]	@ 0x54
 801f1b6:	78bd      	ldrb	r5, [r7, #2]
 801f1b8:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f1ba:	78fd      	ldrb	r5, [r7, #3]
 801f1bc:	9514      	str	r5, [sp, #80]	@ 0x50
 801f1be:	793d      	ldrb	r5, [r7, #4]
 801f1c0:	9516      	str	r5, [sp, #88]	@ 0x58
 801f1c2:	797d      	ldrb	r5, [r7, #5]
 801f1c4:	9518      	str	r5, [sp, #96]	@ 0x60
 801f1c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f1ca:	b292      	uxth	r2, r2
 801f1cc:	3603      	adds	r6, #3
 801f1ce:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f1d2:	fb03 f502 	mul.w	r5, r3, r2
 801f1d6:	011b      	lsls	r3, r3, #4
 801f1d8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f1dc:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801f1e0:	1b5b      	subs	r3, r3, r5
 801f1e2:	b292      	uxth	r2, r2
 801f1e4:	b29b      	uxth	r3, r3
 801f1e6:	1abf      	subs	r7, r7, r2
 801f1e8:	fb03 f909 	mul.w	r9, r3, r9
 801f1ec:	b2bf      	uxth	r7, r7
 801f1ee:	fb03 fa0a 	mul.w	sl, r3, sl
 801f1f2:	fb07 9901 	mla	r9, r7, r1, r9
 801f1f6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f1f8:	fb07 aa00 	mla	sl, r7, r0, sl
 801f1fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f1fe:	fb02 9901 	mla	r9, r2, r1, r9
 801f202:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f204:	fb02 aa00 	mla	sl, r2, r0, sl
 801f208:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f20a:	fb05 9901 	mla	r9, r5, r1, r9
 801f20e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f210:	fb05 aa00 	mla	sl, r5, r0, sl
 801f214:	434b      	muls	r3, r1
 801f216:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f218:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f21c:	fb07 3308 	mla	r3, r7, r8, r3
 801f220:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f224:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f228:	fb02 3201 	mla	r2, r2, r1, r3
 801f22c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f22e:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f232:	fb05 2503 	mla	r5, r5, r3, r2
 801f236:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f238:	122d      	asrs	r5, r5, #8
 801f23a:	449b      	add	fp, r3
 801f23c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f23e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f242:	441c      	add	r4, r3
 801f244:	e72b      	b.n	801f09e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f246:	b01b      	add	sp, #108	@ 0x6c
 801f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f24c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f250:	b087      	sub	sp, #28
 801f252:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801f256:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f25a:	fb05 7003 	mla	r0, r5, r3, r7
 801f25e:	2d00      	cmp	r5, #0
 801f260:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801f264:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801f268:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f26c:	f2c0 811f 	blt.w	801f4ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f270:	45a8      	cmp	r8, r5
 801f272:	f340 811c 	ble.w	801f4ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f276:	2f00      	cmp	r7, #0
 801f278:	f2c0 8117 	blt.w	801f4aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f27c:	42bb      	cmp	r3, r7
 801f27e:	f340 8114 	ble.w	801f4aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f282:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f286:	1c7a      	adds	r2, r7, #1
 801f288:	f100 8114 	bmi.w	801f4b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f28c:	4293      	cmp	r3, r2
 801f28e:	f340 8111 	ble.w	801f4b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f292:	2c00      	cmp	r4, #0
 801f294:	f000 8110 	beq.w	801f4b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801f298:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f29c:	3501      	adds	r5, #1
 801f29e:	f100 810f 	bmi.w	801f4c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f2a2:	45a8      	cmp	r8, r5
 801f2a4:	f340 810c 	ble.w	801f4c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f2a8:	f1be 0f00 	cmp.w	lr, #0
 801f2ac:	f000 810b 	beq.w	801f4c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801f2b0:	2f00      	cmp	r7, #0
 801f2b2:	f2c0 8103 	blt.w	801f4bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f2b6:	42bb      	cmp	r3, r7
 801f2b8:	f340 8100 	ble.w	801f4bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f2bc:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f2c0:	3701      	adds	r7, #1
 801f2c2:	f100 8103 	bmi.w	801f4cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f2c6:	42bb      	cmp	r3, r7
 801f2c8:	f340 8100 	ble.w	801f4cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f2cc:	2c00      	cmp	r4, #0
 801f2ce:	f000 80ff 	beq.w	801f4d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801f2d2:	3301      	adds	r3, #1
 801f2d4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f2d8:	fa1f fc84 	uxth.w	ip, r4
 801f2dc:	fa1f fe8e 	uxth.w	lr, lr
 801f2e0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f2e4:	fb0c f90e 	mul.w	r9, ip, lr
 801f2e8:	0e13      	lsrs	r3, r2, #24
 801f2ea:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f2ee:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f2f2:	9302      	str	r3, [sp, #8]
 801f2f4:	ebac 0709 	sub.w	r7, ip, r9
 801f2f8:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f2fc:	fa1f f48e 	uxth.w	r4, lr
 801f300:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801f304:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f308:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f30c:	fb0a fe0e 	mul.w	lr, sl, lr
 801f310:	1b1b      	subs	r3, r3, r4
 801f312:	fb0a f606 	mul.w	r6, sl, r6
 801f316:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f31a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f31e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801f322:	b29b      	uxth	r3, r3
 801f324:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f328:	b2bf      	uxth	r7, r7
 801f32a:	9301      	str	r3, [sp, #4]
 801f32c:	44e6      	add	lr, ip
 801f32e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f332:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f336:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f33a:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801f33e:	9303      	str	r3, [sp, #12]
 801f340:	0a33      	lsrs	r3, r6, #8
 801f342:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801f346:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f34a:	9304      	str	r3, [sp, #16]
 801f34c:	fb0b f606 	mul.w	r6, fp, r6
 801f350:	fb0b f000 	mul.w	r0, fp, r0
 801f354:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f358:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f35c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f360:	44b6      	add	lr, r6
 801f362:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801f366:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f36a:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801f36e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f372:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f376:	fb08 f606 	mul.w	r6, r8, r6
 801f37a:	0a03      	lsrs	r3, r0, #8
 801f37c:	fb08 f505 	mul.w	r5, r8, r5
 801f380:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f384:	0a30      	lsrs	r0, r6, #8
 801f386:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f38a:	9305      	str	r3, [sp, #20]
 801f38c:	0e13      	lsrs	r3, r2, #24
 801f38e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f392:	fb0e fe07 	mul.w	lr, lr, r7
 801f396:	4430      	add	r0, r6
 801f398:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801f39c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f3a0:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801f3a4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f3a8:	0a00      	lsrs	r0, r0, #8
 801f3aa:	435e      	muls	r6, r3
 801f3ac:	0a2d      	lsrs	r5, r5, #8
 801f3ae:	435a      	muls	r2, r3
 801f3b0:	9b03      	ldr	r3, [sp, #12]
 801f3b2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f3b6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f3ba:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f3be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f3c2:	44b4      	add	ip, r6
 801f3c4:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801f3c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3cc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f3d0:	9e01      	ldr	r6, [sp, #4]
 801f3d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f3d6:	fb03 ee06 	mla	lr, r3, r6, lr
 801f3da:	9b04      	ldr	r3, [sp, #16]
 801f3dc:	0a12      	lsrs	r2, r2, #8
 801f3de:	fb0c ee09 	mla	lr, ip, r9, lr
 801f3e2:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801f3e6:	9b05      	ldr	r3, [sp, #20]
 801f3e8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f3ec:	fb00 ee04 	mla	lr, r0, r4, lr
 801f3f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f3f4:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801f3f8:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801f3fc:	9b01      	ldr	r3, [sp, #4]
 801f3fe:	fb07 fe0e 	mul.w	lr, r7, lr
 801f402:	fb07 f70b 	mul.w	r7, r7, fp
 801f406:	fb03 ee06 	mla	lr, r3, r6, lr
 801f40a:	fb03 730a 	mla	r3, r3, sl, r7
 801f40e:	fb09 e202 	mla	r2, r9, r2, lr
 801f412:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f416:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f41a:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801f41e:	fb04 3408 	mla	r4, r4, r8, r3
 801f422:	9b02      	ldr	r3, [sp, #8]
 801f424:	b292      	uxth	r2, r2
 801f426:	fb09 4903 	mla	r9, r9, r3, r4
 801f42a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f42e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f432:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f436:	fb09 f902 	mul.w	r9, r9, r2
 801f43a:	ea40 0e0e 	orr.w	lr, r0, lr
 801f43e:	f109 0301 	add.w	r3, r9, #1
 801f442:	fa5f f08e 	uxtb.w	r0, lr
 801f446:	fb10 f002 	smulbb	r0, r0, r2
 801f44a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f44e:	780b      	ldrb	r3, [r1, #0]
 801f450:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801f454:	fa5f f989 	uxtb.w	r9, r9
 801f458:	fb03 0309 	mla	r3, r3, r9, r0
 801f45c:	b29b      	uxth	r3, r3
 801f45e:	1c58      	adds	r0, r3, #1
 801f460:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f464:	7848      	ldrb	r0, [r1, #1]
 801f466:	fb10 f009 	smulbb	r0, r0, r9
 801f46a:	121b      	asrs	r3, r3, #8
 801f46c:	700b      	strb	r3, [r1, #0]
 801f46e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801f472:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f476:	fb03 0302 	mla	r3, r3, r2, r0
 801f47a:	b29b      	uxth	r3, r3
 801f47c:	1c58      	adds	r0, r3, #1
 801f47e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f482:	121b      	asrs	r3, r3, #8
 801f484:	704b      	strb	r3, [r1, #1]
 801f486:	788b      	ldrb	r3, [r1, #2]
 801f488:	fb13 f909 	smulbb	r9, r3, r9
 801f48c:	fb0e 9e02 	mla	lr, lr, r2, r9
 801f490:	fa1f fe8e 	uxth.w	lr, lr
 801f494:	f10e 0301 	add.w	r3, lr, #1
 801f498:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f49c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f4a0:	f881 e002 	strb.w	lr, [r1, #2]
 801f4a4:	b007      	add	sp, #28
 801f4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4aa:	2600      	movs	r6, #0
 801f4ac:	e6eb      	b.n	801f286 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801f4ae:	2000      	movs	r0, #0
 801f4b0:	4606      	mov	r6, r0
 801f4b2:	e6f3      	b.n	801f29c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f4b4:	2000      	movs	r0, #0
 801f4b6:	e6f1      	b.n	801f29c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	e6ef      	b.n	801f29c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f4bc:	2500      	movs	r5, #0
 801f4be:	e6ff      	b.n	801f2c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801f4c0:	2200      	movs	r2, #0
 801f4c2:	4615      	mov	r5, r2
 801f4c4:	e708      	b.n	801f2d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f4c6:	4672      	mov	r2, lr
 801f4c8:	4675      	mov	r5, lr
 801f4ca:	e705      	b.n	801f2d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	e703      	b.n	801f2d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f4d0:	4622      	mov	r2, r4
 801f4d2:	e701      	b.n	801f2d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801f4d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4d8:	b09d      	sub	sp, #116	@ 0x74
 801f4da:	9219      	str	r2, [sp, #100]	@ 0x64
 801f4dc:	9307      	str	r3, [sp, #28]
 801f4de:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801f4e0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801f4e4:	901b      	str	r0, [sp, #108]	@ 0x6c
 801f4e6:	931a      	str	r3, [sp, #104]	@ 0x68
 801f4e8:	6850      	ldr	r0, [r2, #4]
 801f4ea:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f4ec:	6812      	ldr	r2, [r2, #0]
 801f4ee:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801f4f2:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801f4f6:	fb00 1303 	mla	r3, r0, r3, r1
 801f4fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4fe:	18d3      	adds	r3, r2, r3
 801f500:	930a      	str	r3, [sp, #40]	@ 0x28
 801f502:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	9310      	str	r3, [sp, #64]	@ 0x40
 801f508:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f50c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f50e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f510:	2b00      	cmp	r3, #0
 801f512:	dc03      	bgt.n	801f51c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f514:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f516:	2b00      	cmp	r3, #0
 801f518:	f340 8368 	ble.w	801fbec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f51c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f51e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f522:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f526:	1e48      	subs	r0, r1, #1
 801f528:	1e57      	subs	r7, r2, #1
 801f52a:	9b07      	ldr	r3, [sp, #28]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	f340 8187 	ble.w	801f840 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801f532:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f536:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f53a:	d406      	bmi.n	801f54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f53c:	4584      	cmp	ip, r0
 801f53e:	da04      	bge.n	801f54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f540:	2b00      	cmp	r3, #0
 801f542:	db02      	blt.n	801f54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f544:	42bb      	cmp	r3, r7
 801f546:	f2c0 817c 	blt.w	801f842 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f54a:	f11c 0c01 	adds.w	ip, ip, #1
 801f54e:	f100 816c 	bmi.w	801f82a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f552:	4561      	cmp	r1, ip
 801f554:	f2c0 8169 	blt.w	801f82a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f558:	3301      	adds	r3, #1
 801f55a:	f100 8166 	bmi.w	801f82a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f55e:	429a      	cmp	r2, r3
 801f560:	f2c0 8163 	blt.w	801f82a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f564:	9b07      	ldr	r3, [sp, #28]
 801f566:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f568:	9318      	str	r3, [sp, #96]	@ 0x60
 801f56a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	f340 8186 	ble.w	801f87e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f572:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f574:	142a      	asrs	r2, r5, #16
 801f576:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f57a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f57e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f582:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f586:	f100 81cb 	bmi.w	801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f58a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f58e:	4542      	cmp	r2, r8
 801f590:	f280 81c6 	bge.w	801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f594:	2800      	cmp	r0, #0
 801f596:	f2c0 81c3 	blt.w	801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f59a:	f103 38ff 	add.w	r8, r3, #4294967295
 801f59e:	4540      	cmp	r0, r8
 801f5a0:	f280 81be 	bge.w	801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f5a4:	fa0f f38e 	sxth.w	r3, lr
 801f5a8:	fb00 2203 	mla	r2, r0, r3, r2
 801f5ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f5ae:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801f5b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f5b6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f5ba:	2900      	cmp	r1, #0
 801f5bc:	f000 81a6 	beq.w	801f90c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801f5c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f5c4:	900c      	str	r0, [sp, #48]	@ 0x30
 801f5c6:	0e00      	lsrs	r0, r0, #24
 801f5c8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f5ca:	f1bc 0f00 	cmp.w	ip, #0
 801f5ce:	d00f      	beq.n	801f5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f5d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801f5d4:	3b01      	subs	r3, #1
 801f5d6:	009b      	lsls	r3, r3, #2
 801f5d8:	3304      	adds	r3, #4
 801f5da:	eb08 0003 	add.w	r0, r8, r3
 801f5de:	f858 3003 	ldr.w	r3, [r8, r3]
 801f5e2:	9308      	str	r3, [sp, #32]
 801f5e4:	0e1b      	lsrs	r3, r3, #24
 801f5e6:	9311      	str	r3, [sp, #68]	@ 0x44
 801f5e8:	6843      	ldr	r3, [r0, #4]
 801f5ea:	930d      	str	r3, [sp, #52]	@ 0x34
 801f5ec:	0e1b      	lsrs	r3, r3, #24
 801f5ee:	9314      	str	r3, [sp, #80]	@ 0x50
 801f5f0:	b289      	uxth	r1, r1
 801f5f2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f5f4:	fa1f fc8c 	uxth.w	ip, ip
 801f5f8:	0108      	lsls	r0, r1, #4
 801f5fa:	fb01 f90c 	mul.w	r9, r1, ip
 801f5fe:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801f602:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801f606:	eba0 0809 	sub.w	r8, r0, r9
 801f60a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f60c:	fa1f f18c 	uxth.w	r1, ip
 801f610:	fa1f f888 	uxth.w	r8, r8
 801f614:	1a5b      	subs	r3, r3, r1
 801f616:	fb08 f000 	mul.w	r0, r8, r0
 801f61a:	b29b      	uxth	r3, r3
 801f61c:	fb03 000e 	mla	r0, r3, lr, r0
 801f620:	fb01 0004 	mla	r0, r1, r4, r0
 801f624:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f626:	fb09 0004 	mla	r0, r9, r4, r0
 801f62a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f62e:	2800      	cmp	r0, #0
 801f630:	f000 80f2 	beq.w	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f634:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f638:	d01b      	beq.n	801f672 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f63a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801f63e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f642:	fb0e fa0a 	mul.w	sl, lr, sl
 801f646:	fb0e fe02 	mul.w	lr, lr, r2
 801f64a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f64e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f652:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f656:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f65a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f65e:	4452      	add	r2, sl
 801f660:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f664:	0a12      	lsrs	r2, r2, #8
 801f666:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f66a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f66e:	ea42 020c 	orr.w	r2, r2, ip
 801f672:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f674:	2cff      	cmp	r4, #255	@ 0xff
 801f676:	d021      	beq.n	801f6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f678:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f67a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f67e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f680:	fb04 fb0b 	mul.w	fp, r4, fp
 801f684:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f686:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f68a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f68c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f690:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f694:	fb04 fa0a 	mul.w	sl, r4, sl
 801f698:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f69c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f6a0:	44de      	add	lr, fp
 801f6a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f6a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f6b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f6b6:	ea4e 040a 	orr.w	r4, lr, sl
 801f6ba:	940c      	str	r4, [sp, #48]	@ 0x30
 801f6bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f6be:	2cff      	cmp	r4, #255	@ 0xff
 801f6c0:	d021      	beq.n	801f706 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f6c2:	9c08      	ldr	r4, [sp, #32]
 801f6c4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f6c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f6ca:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6ce:	9c08      	ldr	r4, [sp, #32]
 801f6d0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f6d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f6d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f6da:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f6de:	fb04 fa0a 	mul.w	sl, r4, sl
 801f6e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f6e6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f6ea:	44de      	add	lr, fp
 801f6ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f6f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f6fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f700:	ea4e 040a 	orr.w	r4, lr, sl
 801f704:	9408      	str	r4, [sp, #32]
 801f706:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f708:	2cff      	cmp	r4, #255	@ 0xff
 801f70a:	d021      	beq.n	801f750 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f70c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f70e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f712:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f714:	fb04 fb0b 	mul.w	fp, r4, fp
 801f718:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f71a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f71e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f720:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f724:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f728:	fb04 fa0a 	mul.w	sl, r4, sl
 801f72c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f730:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f734:	44de      	add	lr, fp
 801f736:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f73a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f73e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f742:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f746:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f74a:	ea4e 040a 	orr.w	r4, lr, sl
 801f74e:	940d      	str	r4, [sp, #52]	@ 0x34
 801f750:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f752:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801f756:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f75a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f75e:	9c08      	ldr	r4, [sp, #32]
 801f760:	fb08 fc0c 	mul.w	ip, r8, ip
 801f764:	fb03 cc0e 	mla	ip, r3, lr, ip
 801f768:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f76c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f76e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f772:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f776:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f778:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f77c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f780:	fb08 f80e 	mul.w	r8, r8, lr
 801f784:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f788:	fb03 8202 	mla	r2, r3, r2, r8
 801f78c:	9b08      	ldr	r3, [sp, #32]
 801f78e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f792:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801f796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f798:	fb01 220a 	mla	r2, r1, sl, r2
 801f79c:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801f7a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f7a2:	fb09 2901 	mla	r9, r9, r1, r2
 801f7a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7a8:	4343      	muls	r3, r0
 801f7aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f7ae:	1c58      	adds	r0, r3, #1
 801f7b0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801f7b4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f7b8:	783b      	ldrb	r3, [r7, #0]
 801f7ba:	ea4c 0c09 	orr.w	ip, ip, r9
 801f7be:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f7c2:	fa5f f28c 	uxtb.w	r2, ip
 801f7c6:	b2c0      	uxtb	r0, r0
 801f7c8:	fb12 f201 	smulbb	r2, r2, r1
 801f7cc:	fb03 2300 	mla	r3, r3, r0, r2
 801f7d0:	b29b      	uxth	r3, r3
 801f7d2:	1c5a      	adds	r2, r3, #1
 801f7d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f7d8:	787a      	ldrb	r2, [r7, #1]
 801f7da:	fb12 f200 	smulbb	r2, r2, r0
 801f7de:	121b      	asrs	r3, r3, #8
 801f7e0:	703b      	strb	r3, [r7, #0]
 801f7e2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f7e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f7ea:	fb03 2301 	mla	r3, r3, r1, r2
 801f7ee:	b29b      	uxth	r3, r3
 801f7f0:	1c5a      	adds	r2, r3, #1
 801f7f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f7f6:	121b      	asrs	r3, r3, #8
 801f7f8:	707b      	strb	r3, [r7, #1]
 801f7fa:	78bb      	ldrb	r3, [r7, #2]
 801f7fc:	fb13 f000 	smulbb	r0, r3, r0
 801f800:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f804:	fa1f fc8c 	uxth.w	ip, ip
 801f808:	f10c 0301 	add.w	r3, ip, #1
 801f80c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f810:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f814:	f887 c002 	strb.w	ip, [r7, #2]
 801f818:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f81a:	3703      	adds	r7, #3
 801f81c:	441d      	add	r5, r3
 801f81e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f820:	441e      	add	r6, r3
 801f822:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f824:	3b01      	subs	r3, #1
 801f826:	9318      	str	r3, [sp, #96]	@ 0x60
 801f828:	e69f      	b.n	801f56a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f82a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f82c:	441d      	add	r5, r3
 801f82e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f830:	441e      	add	r6, r3
 801f832:	9b07      	ldr	r3, [sp, #28]
 801f834:	3b01      	subs	r3, #1
 801f836:	9307      	str	r3, [sp, #28]
 801f838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f83a:	3303      	adds	r3, #3
 801f83c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f83e:	e674      	b.n	801f52a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f840:	d025      	beq.n	801f88e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f842:	9b07      	ldr	r3, [sp, #28]
 801f844:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801f846:	3b01      	subs	r3, #1
 801f848:	fb00 5003 	mla	r0, r0, r3, r5
 801f84c:	1400      	asrs	r0, r0, #16
 801f84e:	f53f ae89 	bmi.w	801f564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f852:	3901      	subs	r1, #1
 801f854:	4288      	cmp	r0, r1
 801f856:	f6bf ae85 	bge.w	801f564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f85a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801f85c:	fb01 6303 	mla	r3, r1, r3, r6
 801f860:	141b      	asrs	r3, r3, #16
 801f862:	f53f ae7f 	bmi.w	801f564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f866:	3a01      	subs	r2, #1
 801f868:	4293      	cmp	r3, r2
 801f86a:	f6bf ae7b 	bge.w	801f564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f86e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f870:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f874:	f103 0e03 	add.w	lr, r3, #3
 801f878:	f1bb 0f00 	cmp.w	fp, #0
 801f87c:	dc6e      	bgt.n	801f95c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f87e:	9b07      	ldr	r3, [sp, #28]
 801f880:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f886:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f88a:	4423      	add	r3, r4
 801f88c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f88e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f890:	2b00      	cmp	r3, #0
 801f892:	f340 81ab 	ble.w	801fbec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f89a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f89c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8a4:	eef0 6a62 	vmov.f32	s13, s5
 801f8a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8b4:	ee16 5a90 	vmov	r5, s13
 801f8b8:	eef0 6a43 	vmov.f32	s13, s6
 801f8bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8c0:	ee16 6a90 	vmov	r6, s13
 801f8c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f8cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f8dc:	ee12 2a90 	vmov	r2, s5
 801f8e0:	eef0 2a47 	vmov.f32	s5, s14
 801f8e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8e8:	ee13 2a10 	vmov	r2, s6
 801f8ec:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f8ee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f8f0:	eeb0 3a67 	vmov.f32	s6, s15
 801f8f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8f8:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f8fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f8fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f8fe:	3b01      	subs	r3, #1
 801f900:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f902:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f904:	bf08      	it	eq
 801f906:	4613      	moveq	r3, r2
 801f908:	9307      	str	r3, [sp, #28]
 801f90a:	e600      	b.n	801f50e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f90c:	f1bc 0f00 	cmp.w	ip, #0
 801f910:	f43f ae6e 	beq.w	801f5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f914:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f918:	9308      	str	r3, [sp, #32]
 801f91a:	0e1b      	lsrs	r3, r3, #24
 801f91c:	9311      	str	r3, [sp, #68]	@ 0x44
 801f91e:	e667      	b.n	801f5f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f920:	f112 0801 	adds.w	r8, r2, #1
 801f924:	f53f af78 	bmi.w	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f928:	45c6      	cmp	lr, r8
 801f92a:	f6ff af75 	blt.w	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f92e:	f110 0801 	adds.w	r8, r0, #1
 801f932:	f53f af71 	bmi.w	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f936:	4543      	cmp	r3, r8
 801f938:	f6ff af6e 	blt.w	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f93c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f93e:	b21b      	sxth	r3, r3
 801f940:	9201      	str	r2, [sp, #4]
 801f942:	9300      	str	r3, [sp, #0]
 801f944:	fa0f f38e 	sxth.w	r3, lr
 801f948:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f94a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f94e:	e9cd c404 	strd	ip, r4, [sp, #16]
 801f952:	4639      	mov	r1, r7
 801f954:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801f956:	f7ff fc79 	bl	801f24c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f95a:	e75d      	b.n	801f818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f95c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f95e:	142f      	asrs	r7, r5, #16
 801f960:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f962:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f966:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f96a:	1433      	asrs	r3, r6, #16
 801f96c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f970:	fb02 7303 	mla	r3, r2, r3, r7
 801f974:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801f978:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f97c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f980:	2900      	cmp	r1, #0
 801f982:	f000 812a 	beq.w	801fbda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801f986:	687c      	ldr	r4, [r7, #4]
 801f988:	940e      	str	r4, [sp, #56]	@ 0x38
 801f98a:	0e24      	lsrs	r4, r4, #24
 801f98c:	9415      	str	r4, [sp, #84]	@ 0x54
 801f98e:	b178      	cbz	r0, 801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f990:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f994:	3a01      	subs	r2, #1
 801f996:	0092      	lsls	r2, r2, #2
 801f998:	3204      	adds	r2, #4
 801f99a:	eb07 0802 	add.w	r8, r7, r2
 801f99e:	58ba      	ldr	r2, [r7, r2]
 801f9a0:	9209      	str	r2, [sp, #36]	@ 0x24
 801f9a2:	0e12      	lsrs	r2, r2, #24
 801f9a4:	9212      	str	r2, [sp, #72]	@ 0x48
 801f9a6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f9aa:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f9ac:	0e12      	lsrs	r2, r2, #24
 801f9ae:	9216      	str	r2, [sp, #88]	@ 0x58
 801f9b0:	b289      	uxth	r1, r1
 801f9b2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f9b4:	b280      	uxth	r0, r0
 801f9b6:	fb01 f900 	mul.w	r9, r1, r0
 801f9ba:	0109      	lsls	r1, r1, #4
 801f9bc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f9c0:	eba1 0809 	sub.w	r8, r1, r9
 801f9c4:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801f9c8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f9ca:	b280      	uxth	r0, r0
 801f9cc:	fa1f f888 	uxth.w	r8, r8
 801f9d0:	1a12      	subs	r2, r2, r0
 801f9d2:	fb08 f101 	mul.w	r1, r8, r1
 801f9d6:	b292      	uxth	r2, r2
 801f9d8:	fb02 110c 	mla	r1, r2, ip, r1
 801f9dc:	fb00 1104 	mla	r1, r0, r4, r1
 801f9e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f9e2:	fb09 1104 	mla	r1, r9, r4, r1
 801f9e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f9ea:	2900      	cmp	r1, #0
 801f9ec:	f000 80ec 	beq.w	801fbc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801f9f0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801f9f4:	d019      	beq.n	801fa2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801f9f6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f9fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f9fe:	fb0c fa0a 	mul.w	sl, ip, sl
 801fa02:	fb0c fc03 	mul.w	ip, ip, r3
 801fa06:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fa0a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fa0e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801fa12:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fa16:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fa1a:	4453      	add	r3, sl
 801fa1c:	0a3f      	lsrs	r7, r7, #8
 801fa1e:	0a1b      	lsrs	r3, r3, #8
 801fa20:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fa24:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fa28:	433b      	orrs	r3, r7
 801fa2a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fa2c:	2cff      	cmp	r4, #255	@ 0xff
 801fa2e:	d020      	beq.n	801fa72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801fa30:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fa32:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fa36:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fa38:	4367      	muls	r7, r4
 801fa3a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fa3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa40:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fa44:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fa46:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fa4a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fa4e:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa52:	44bc      	add	ip, r7
 801fa54:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fa58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa60:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fa64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa68:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fa6c:	ea4c 040a 	orr.w	r4, ip, sl
 801fa70:	940e      	str	r4, [sp, #56]	@ 0x38
 801fa72:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fa74:	2cff      	cmp	r4, #255	@ 0xff
 801fa76:	d020      	beq.n	801faba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801fa78:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fa7a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fa7e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fa80:	4367      	muls	r7, r4
 801fa82:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fa84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa88:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fa8c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fa8e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fa92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fa96:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa9a:	44bc      	add	ip, r7
 801fa9c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801faa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faa4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801faa8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801faac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fab0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fab4:	ea4c 040a 	orr.w	r4, ip, sl
 801fab8:	9409      	str	r4, [sp, #36]	@ 0x24
 801faba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fabc:	2cff      	cmp	r4, #255	@ 0xff
 801fabe:	d020      	beq.n	801fb02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801fac0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fac2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fac6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fac8:	4367      	muls	r7, r4
 801faca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801facc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fad0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fad4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fad6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fada:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fade:	fb04 fa0a 	mul.w	sl, r4, sl
 801fae2:	44bc      	add	ip, r7
 801fae4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801faf0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801faf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faf8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fafc:	ea4c 040a 	orr.w	r4, ip, sl
 801fb00:	940f      	str	r4, [sp, #60]	@ 0x3c
 801fb02:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fb04:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801fb08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fb0c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fb10:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fb12:	fb08 f707 	mul.w	r7, r8, r7
 801fb16:	fb02 770c 	mla	r7, r2, ip, r7
 801fb1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fb1e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fb20:	fb00 770c 	mla	r7, r0, ip, r7
 801fb24:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fb28:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fb2a:	fb09 770c 	mla	r7, r9, ip, r7
 801fb2e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801fb32:	fb08 f80c 	mul.w	r8, r8, ip
 801fb36:	0a3f      	lsrs	r7, r7, #8
 801fb38:	fb02 8303 	mla	r3, r2, r3, r8
 801fb3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb3e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801fb42:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801fb46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fb48:	fb00 330a 	mla	r3, r0, sl, r3
 801fb4c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801fb50:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801fb52:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fb56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb5c:	434b      	muls	r3, r1
 801fb5e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fb62:	1c59      	adds	r1, r3, #1
 801fb64:	ea47 070c 	orr.w	r7, r7, ip
 801fb68:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fb6c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fb70:	b2fa      	uxtb	r2, r7
 801fb72:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fb76:	fb12 f200 	smulbb	r2, r2, r0
 801fb7a:	b2c9      	uxtb	r1, r1
 801fb7c:	fb03 2301 	mla	r3, r3, r1, r2
 801fb80:	b29b      	uxth	r3, r3
 801fb82:	1c5a      	adds	r2, r3, #1
 801fb84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fb88:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fb8c:	fb12 f201 	smulbb	r2, r2, r1
 801fb90:	121b      	asrs	r3, r3, #8
 801fb92:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fb96:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fb9a:	0c3f      	lsrs	r7, r7, #16
 801fb9c:	fb03 2300 	mla	r3, r3, r0, r2
 801fba0:	b29b      	uxth	r3, r3
 801fba2:	1c5a      	adds	r2, r3, #1
 801fba4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fba8:	121b      	asrs	r3, r3, #8
 801fbaa:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fbae:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fbb2:	fb13 f101 	smulbb	r1, r3, r1
 801fbb6:	fb07 1700 	mla	r7, r7, r0, r1
 801fbba:	b2bf      	uxth	r7, r7
 801fbbc:	1c79      	adds	r1, r7, #1
 801fbbe:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fbc2:	123f      	asrs	r7, r7, #8
 801fbc4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fbc8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fbca:	f10e 0e03 	add.w	lr, lr, #3
 801fbce:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fbd2:	441d      	add	r5, r3
 801fbd4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fbd6:	441e      	add	r6, r3
 801fbd8:	e64e      	b.n	801f878 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801fbda:	2800      	cmp	r0, #0
 801fbdc:	f43f aee8 	beq.w	801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fbe0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fbe4:	9209      	str	r2, [sp, #36]	@ 0x24
 801fbe6:	0e12      	lsrs	r2, r2, #24
 801fbe8:	9212      	str	r2, [sp, #72]	@ 0x48
 801fbea:	e6e1      	b.n	801f9b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fbec:	b01d      	add	sp, #116	@ 0x74
 801fbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801fbf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbf6:	b087      	sub	sp, #28
 801fbf8:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801fbfc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801fc00:	fb05 7003 	mla	r0, r5, r3, r7
 801fc04:	2d00      	cmp	r5, #0
 801fc06:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801fc0a:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801fc0e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801fc12:	f2c0 810a 	blt.w	801fe2a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801fc16:	45a8      	cmp	r8, r5
 801fc18:	f340 8107 	ble.w	801fe2a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801fc1c:	2f00      	cmp	r7, #0
 801fc1e:	f2c0 8102 	blt.w	801fe26 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801fc22:	42bb      	cmp	r3, r7
 801fc24:	f340 80ff 	ble.w	801fe26 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801fc28:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801fc2c:	1c7a      	adds	r2, r7, #1
 801fc2e:	f100 80ff 	bmi.w	801fe30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801fc32:	4293      	cmp	r3, r2
 801fc34:	f340 80fc 	ble.w	801fe30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801fc38:	2c00      	cmp	r4, #0
 801fc3a:	f000 80fb 	beq.w	801fe34 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801fc3e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801fc42:	3501      	adds	r5, #1
 801fc44:	f100 80fa 	bmi.w	801fe3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801fc48:	45a8      	cmp	r8, r5
 801fc4a:	f340 80f7 	ble.w	801fe3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801fc4e:	f1be 0f00 	cmp.w	lr, #0
 801fc52:	f000 80f6 	beq.w	801fe42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801fc56:	2f00      	cmp	r7, #0
 801fc58:	f2c0 80ee 	blt.w	801fe38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801fc5c:	42bb      	cmp	r3, r7
 801fc5e:	f340 80eb 	ble.w	801fe38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801fc62:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801fc66:	3701      	adds	r7, #1
 801fc68:	f100 80ee 	bmi.w	801fe48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801fc6c:	42bb      	cmp	r3, r7
 801fc6e:	f340 80eb 	ble.w	801fe48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801fc72:	2c00      	cmp	r4, #0
 801fc74:	f000 80ea 	beq.w	801fe4c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801fc78:	3301      	adds	r3, #1
 801fc7a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801fc7e:	fa1f fc84 	uxth.w	ip, r4
 801fc82:	fa1f fe8e 	uxth.w	lr, lr
 801fc86:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fc8a:	fb0c f90e 	mul.w	r9, ip, lr
 801fc8e:	0e13      	lsrs	r3, r2, #24
 801fc90:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fc94:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801fc98:	9302      	str	r3, [sp, #8]
 801fc9a:	ebac 0709 	sub.w	r7, ip, r9
 801fc9e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801fca2:	fa1f f48e 	uxth.w	r4, lr
 801fca6:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801fcaa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fcae:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801fcb2:	fb0a fe0e 	mul.w	lr, sl, lr
 801fcb6:	1b1b      	subs	r3, r3, r4
 801fcb8:	fb0a f606 	mul.w	r6, sl, r6
 801fcbc:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801fcc0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fcc4:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801fcc8:	b29b      	uxth	r3, r3
 801fcca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fcce:	b2bf      	uxth	r7, r7
 801fcd0:	9301      	str	r3, [sp, #4]
 801fcd2:	44e6      	add	lr, ip
 801fcd4:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801fcd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fcdc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fce0:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801fce4:	9303      	str	r3, [sp, #12]
 801fce6:	0a33      	lsrs	r3, r6, #8
 801fce8:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801fcec:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fcf0:	9304      	str	r3, [sp, #16]
 801fcf2:	fb0b f606 	mul.w	r6, fp, r6
 801fcf6:	fb0b f000 	mul.w	r0, fp, r0
 801fcfa:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801fcfe:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801fd02:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fd06:	44b6      	add	lr, r6
 801fd08:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801fd0c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801fd10:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801fd14:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801fd18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd1c:	fb08 f606 	mul.w	r6, r8, r6
 801fd20:	0a03      	lsrs	r3, r0, #8
 801fd22:	fb08 f505 	mul.w	r5, r8, r5
 801fd26:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fd2a:	0a30      	lsrs	r0, r6, #8
 801fd2c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801fd30:	9305      	str	r3, [sp, #20]
 801fd32:	0e13      	lsrs	r3, r2, #24
 801fd34:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fd38:	fb0e fe07 	mul.w	lr, lr, r7
 801fd3c:	4430      	add	r0, r6
 801fd3e:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801fd42:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fd46:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801fd4a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fd4e:	0a00      	lsrs	r0, r0, #8
 801fd50:	435e      	muls	r6, r3
 801fd52:	0a2d      	lsrs	r5, r5, #8
 801fd54:	435a      	muls	r2, r3
 801fd56:	9b03      	ldr	r3, [sp, #12]
 801fd58:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801fd5c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801fd60:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fd64:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fd68:	44b4      	add	ip, r6
 801fd6a:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801fd6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd72:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801fd76:	9e01      	ldr	r6, [sp, #4]
 801fd78:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fd7c:	fb03 ee06 	mla	lr, r3, r6, lr
 801fd80:	9b04      	ldr	r3, [sp, #16]
 801fd82:	0a12      	lsrs	r2, r2, #8
 801fd84:	fb0c ee09 	mla	lr, ip, r9, lr
 801fd88:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801fd8c:	9b05      	ldr	r3, [sp, #20]
 801fd8e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fd92:	fb00 ee04 	mla	lr, r0, r4, lr
 801fd96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd9a:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801fd9e:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801fda2:	9b01      	ldr	r3, [sp, #4]
 801fda4:	fb07 fe0e 	mul.w	lr, r7, lr
 801fda8:	fb07 f70b 	mul.w	r7, r7, fp
 801fdac:	fb03 ee06 	mla	lr, r3, r6, lr
 801fdb0:	fb03 730a 	mla	r3, r3, sl, r7
 801fdb4:	fb09 e202 	mla	r2, r9, r2, lr
 801fdb8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801fdbc:	fb04 2e0e 	mla	lr, r4, lr, r2
 801fdc0:	fb04 3408 	mla	r4, r4, r8, r3
 801fdc4:	9b02      	ldr	r3, [sp, #8]
 801fdc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fdca:	fb09 4903 	mla	r9, r9, r3, r4
 801fdce:	780b      	ldrb	r3, [r1, #0]
 801fdd0:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801fdd4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801fdd8:	ea40 0e0e 	orr.w	lr, r0, lr
 801fddc:	fa5f f989 	uxtb.w	r9, r9
 801fde0:	fb03 f209 	mul.w	r2, r3, r9
 801fde4:	1c53      	adds	r3, r2, #1
 801fde6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fdea:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fdee:	700b      	strb	r3, [r1, #0]
 801fdf0:	784b      	ldrb	r3, [r1, #1]
 801fdf2:	fb03 f309 	mul.w	r3, r3, r9
 801fdf6:	1c5a      	adds	r2, r3, #1
 801fdf8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fdfc:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801fe00:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801fe04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fe08:	704b      	strb	r3, [r1, #1]
 801fe0a:	788b      	ldrb	r3, [r1, #2]
 801fe0c:	fb03 f909 	mul.w	r9, r3, r9
 801fe10:	f109 0301 	add.w	r3, r9, #1
 801fe14:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801fe18:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801fe1c:	f881 e002 	strb.w	lr, [r1, #2]
 801fe20:	b007      	add	sp, #28
 801fe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe26:	2600      	movs	r6, #0
 801fe28:	e700      	b.n	801fc2c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801fe2a:	2000      	movs	r0, #0
 801fe2c:	4606      	mov	r6, r0
 801fe2e:	e708      	b.n	801fc42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801fe30:	2000      	movs	r0, #0
 801fe32:	e706      	b.n	801fc42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801fe34:	4620      	mov	r0, r4
 801fe36:	e704      	b.n	801fc42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801fe38:	2500      	movs	r5, #0
 801fe3a:	e714      	b.n	801fc66 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801fe3c:	2200      	movs	r2, #0
 801fe3e:	4615      	mov	r5, r2
 801fe40:	e71d      	b.n	801fc7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801fe42:	4672      	mov	r2, lr
 801fe44:	4675      	mov	r5, lr
 801fe46:	e71a      	b.n	801fc7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801fe48:	2200      	movs	r2, #0
 801fe4a:	e718      	b.n	801fc7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801fe4c:	4622      	mov	r2, r4
 801fe4e:	e716      	b.n	801fc7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801fe50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe54:	b099      	sub	sp, #100	@ 0x64
 801fe56:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801fe5a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801fe5c:	9017      	str	r0, [sp, #92]	@ 0x5c
 801fe5e:	9306      	str	r3, [sp, #24]
 801fe60:	6850      	ldr	r0, [r2, #4]
 801fe62:	6812      	ldr	r2, [r2, #0]
 801fe64:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801fe68:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801fe6c:	fb00 1303 	mla	r3, r0, r3, r1
 801fe70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe74:	18d3      	adds	r3, r2, r3
 801fe76:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe78:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fe7a:	681b      	ldr	r3, [r3, #0]
 801fe7c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fe7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	dc03      	bgt.n	801fe8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fe84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	f340 8360 	ble.w	802054c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801fe8c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fe8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe96:	1e48      	subs	r0, r1, #1
 801fe98:	1e57      	subs	r7, r2, #1
 801fe9a:	9b06      	ldr	r3, [sp, #24]
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	f340 817b 	ble.w	8020198 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801fea2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fea6:	ea4f 4326 	mov.w	r3, r6, asr #16
 801feaa:	d406      	bmi.n	801feba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801feac:	4584      	cmp	ip, r0
 801feae:	da04      	bge.n	801feba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	db02      	blt.n	801feba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801feb4:	42bb      	cmp	r3, r7
 801feb6:	f2c0 8170 	blt.w	802019a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801feba:	f11c 0c01 	adds.w	ip, ip, #1
 801febe:	f100 8160 	bmi.w	8020182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fec2:	4561      	cmp	r1, ip
 801fec4:	f2c0 815d 	blt.w	8020182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fec8:	3301      	adds	r3, #1
 801feca:	f100 815a 	bmi.w	8020182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fece:	429a      	cmp	r2, r3
 801fed0:	f2c0 8157 	blt.w	8020182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fed4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801fed8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801feda:	f1b8 0f00 	cmp.w	r8, #0
 801fede:	f340 8179 	ble.w	80201d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801fee2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801fee4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801fee8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801feea:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801feee:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fef2:	142a      	asrs	r2, r5, #16
 801fef4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fef8:	689b      	ldr	r3, [r3, #8]
 801fefa:	f100 81be 	bmi.w	802027a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fefe:	f103 39ff 	add.w	r9, r3, #4294967295
 801ff02:	454a      	cmp	r2, r9
 801ff04:	f280 81b9 	bge.w	802027a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff08:	f1bc 0f00 	cmp.w	ip, #0
 801ff0c:	f2c0 81b5 	blt.w	802027a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff10:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ff14:	45cc      	cmp	ip, r9
 801ff16:	f280 81b0 	bge.w	802027a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff1a:	b21b      	sxth	r3, r3
 801ff1c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff1e:	fb0c 2203 	mla	r2, ip, r3, r2
 801ff22:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ff26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ff2a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ff2e:	2900      	cmp	r1, #0
 801ff30:	f000 8197 	beq.w	8020262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ff34:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ff38:	940a      	str	r4, [sp, #40]	@ 0x28
 801ff3a:	0e24      	lsrs	r4, r4, #24
 801ff3c:	9411      	str	r4, [sp, #68]	@ 0x44
 801ff3e:	b180      	cbz	r0, 801ff62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ff40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ff44:	3b01      	subs	r3, #1
 801ff46:	009b      	lsls	r3, r3, #2
 801ff48:	3304      	adds	r3, #4
 801ff4a:	eb09 0c03 	add.w	ip, r9, r3
 801ff4e:	f859 3003 	ldr.w	r3, [r9, r3]
 801ff52:	9307      	str	r3, [sp, #28]
 801ff54:	0e1b      	lsrs	r3, r3, #24
 801ff56:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ff58:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ff5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ff5e:	0e1b      	lsrs	r3, r3, #24
 801ff60:	9312      	str	r3, [sp, #72]	@ 0x48
 801ff62:	b289      	uxth	r1, r1
 801ff64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ff66:	b280      	uxth	r0, r0
 801ff68:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff6a:	fb01 fa00 	mul.w	sl, r1, r0
 801ff6e:	0109      	lsls	r1, r1, #4
 801ff70:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ff74:	eba1 090a 	sub.w	r9, r1, sl
 801ff78:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801ff7c:	b280      	uxth	r0, r0
 801ff7e:	fa1f f989 	uxth.w	r9, r9
 801ff82:	1a09      	subs	r1, r1, r0
 801ff84:	fb09 f303 	mul.w	r3, r9, r3
 801ff88:	b289      	uxth	r1, r1
 801ff8a:	fb01 330e 	mla	r3, r1, lr, r3
 801ff8e:	fb00 3304 	mla	r3, r0, r4, r3
 801ff92:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ff94:	fb0a 3304 	mla	r3, sl, r4, r3
 801ff98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ff9c:	2b00      	cmp	r3, #0
 801ff9e:	f000 80e8 	beq.w	8020172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ffa2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ffa6:	d01b      	beq.n	801ffe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ffa8:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801ffac:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ffb0:	fb0e fb0b 	mul.w	fp, lr, fp
 801ffb4:	fb0e fe02 	mul.w	lr, lr, r2
 801ffb8:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ffbc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ffc0:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ffc4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ffc8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ffcc:	445a      	add	r2, fp
 801ffce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffd2:	0a12      	lsrs	r2, r2, #8
 801ffd4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ffd8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ffdc:	ea42 020c 	orr.w	r2, r2, ip
 801ffe0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ffe2:	2cff      	cmp	r4, #255	@ 0xff
 801ffe4:	d021      	beq.n	802002a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801ffe6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ffe8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ffec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ffee:	fb04 fc0c 	mul.w	ip, r4, ip
 801fff2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fff4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fff8:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801fffc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fffe:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020002:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020006:	fb04 fb0b 	mul.w	fp, r4, fp
 802000a:	44e6      	add	lr, ip
 802000c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020010:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020014:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020018:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802001c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020020:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020024:	ea4e 040b 	orr.w	r4, lr, fp
 8020028:	940a      	str	r4, [sp, #40]	@ 0x28
 802002a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802002c:	2cff      	cmp	r4, #255	@ 0xff
 802002e:	d021      	beq.n	8020074 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020030:	9c07      	ldr	r4, [sp, #28]
 8020032:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020036:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020038:	fb04 fc0c 	mul.w	ip, r4, ip
 802003c:	9c07      	ldr	r4, [sp, #28]
 802003e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020042:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020046:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020048:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802004c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020050:	fb04 fb0b 	mul.w	fp, r4, fp
 8020054:	44e6      	add	lr, ip
 8020056:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802005a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802005e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020062:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020066:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802006a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802006e:	ea4e 040b 	orr.w	r4, lr, fp
 8020072:	9407      	str	r4, [sp, #28]
 8020074:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020076:	2cff      	cmp	r4, #255	@ 0xff
 8020078:	d021      	beq.n	80200be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802007a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802007c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020080:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020082:	fb04 fc0c 	mul.w	ip, r4, ip
 8020086:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020088:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802008c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020090:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020092:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020096:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802009a:	fb04 fb0b 	mul.w	fp, r4, fp
 802009e:	44e6      	add	lr, ip
 80200a0:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80200a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200a8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80200ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80200b0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80200b4:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80200b8:	ea4e 040b 	orr.w	r4, lr, fp
 80200bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80200be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80200c0:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80200c4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80200c8:	2bff      	cmp	r3, #255	@ 0xff
 80200ca:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80200ce:	9c07      	ldr	r4, [sp, #28]
 80200d0:	fb09 fc0c 	mul.w	ip, r9, ip
 80200d4:	fb01 cc0e 	mla	ip, r1, lr, ip
 80200d8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80200dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80200de:	fb00 cc0e 	mla	ip, r0, lr, ip
 80200e2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80200e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80200e8:	fb0a cc0e 	mla	ip, sl, lr, ip
 80200ec:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80200f0:	fb09 f90e 	mul.w	r9, r9, lr
 80200f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200f8:	fb01 9202 	mla	r2, r1, r2, r9
 80200fc:	9907      	ldr	r1, [sp, #28]
 80200fe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020102:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8020106:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020108:	fb00 220b 	mla	r2, r0, fp, r2
 802010c:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8020110:	fb0a 2a00 	mla	sl, sl, r0, r2
 8020114:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020118:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802011c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020120:	fa5f f08c 	uxtb.w	r0, ip
 8020124:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020128:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802012c:	f000 80a2 	beq.w	8020274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020130:	43db      	mvns	r3, r3
 8020132:	783a      	ldrb	r2, [r7, #0]
 8020134:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020138:	b2db      	uxtb	r3, r3
 802013a:	fb02 fe03 	mul.w	lr, r2, r3
 802013e:	fb0a fa03 	mul.w	sl, sl, r3
 8020142:	f10e 0201 	add.w	r2, lr, #1
 8020146:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 802014a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802014e:	703a      	strb	r2, [r7, #0]
 8020150:	787a      	ldrb	r2, [r7, #1]
 8020152:	fb02 f003 	mul.w	r0, r2, r3
 8020156:	f10a 0301 	add.w	r3, sl, #1
 802015a:	1c42      	adds	r2, r0, #1
 802015c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020160:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020164:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020168:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802016c:	707a      	strb	r2, [r7, #1]
 802016e:	f887 c002 	strb.w	ip, [r7, #2]
 8020172:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020174:	3703      	adds	r7, #3
 8020176:	f108 38ff 	add.w	r8, r8, #4294967295
 802017a:	441d      	add	r5, r3
 802017c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802017e:	441e      	add	r6, r3
 8020180:	e6ab      	b.n	801feda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020182:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020184:	441d      	add	r5, r3
 8020186:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020188:	441e      	add	r6, r3
 802018a:	9b06      	ldr	r3, [sp, #24]
 802018c:	3b01      	subs	r3, #1
 802018e:	9306      	str	r3, [sp, #24]
 8020190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020192:	3303      	adds	r3, #3
 8020194:	9309      	str	r3, [sp, #36]	@ 0x24
 8020196:	e680      	b.n	801fe9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020198:	d024      	beq.n	80201e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802019a:	9b06      	ldr	r3, [sp, #24]
 802019c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802019e:	3b01      	subs	r3, #1
 80201a0:	fb00 5003 	mla	r0, r0, r3, r5
 80201a4:	1400      	asrs	r0, r0, #16
 80201a6:	f53f ae95 	bmi.w	801fed4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80201aa:	3901      	subs	r1, #1
 80201ac:	4288      	cmp	r0, r1
 80201ae:	f6bf ae91 	bge.w	801fed4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80201b2:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80201b4:	fb01 6303 	mla	r3, r1, r3, r6
 80201b8:	141b      	asrs	r3, r3, #16
 80201ba:	f53f ae8b 	bmi.w	801fed4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80201be:	3a01      	subs	r2, #1
 80201c0:	4293      	cmp	r3, r2
 80201c2:	f6bf ae87 	bge.w	801fed4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80201c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201c8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80201cc:	1cdf      	adds	r7, r3, #3
 80201ce:	f1bb 0f00 	cmp.w	fp, #0
 80201d2:	dc6e      	bgt.n	80202b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80201d4:	9b06      	ldr	r3, [sp, #24]
 80201d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80201da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201e0:	4423      	add	r3, r4
 80201e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80201e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80201e6:	2b00      	cmp	r3, #0
 80201e8:	f340 81b0 	ble.w	802054c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80201ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80201f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80201f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201fa:	eef0 6a62 	vmov.f32	s13, s5
 80201fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020202:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020206:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802020a:	ee16 5a90 	vmov	r5, s13
 802020e:	eef0 6a43 	vmov.f32	s13, s6
 8020212:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020216:	ee16 6a90 	vmov	r6, s13
 802021a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802021e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020222:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020226:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802022a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802022e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020232:	ee12 2a90 	vmov	r2, s5
 8020236:	eef0 2a47 	vmov.f32	s5, s14
 802023a:	fb92 f3f3 	sdiv	r3, r2, r3
 802023e:	ee13 2a10 	vmov	r2, s6
 8020242:	9325      	str	r3, [sp, #148]	@ 0x94
 8020244:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020246:	eeb0 3a67 	vmov.f32	s6, s15
 802024a:	fb92 f3f3 	sdiv	r3, r2, r3
 802024e:	9326      	str	r3, [sp, #152]	@ 0x98
 8020250:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020252:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020254:	3b01      	subs	r3, #1
 8020256:	9315      	str	r3, [sp, #84]	@ 0x54
 8020258:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802025a:	bf08      	it	eq
 802025c:	4613      	moveq	r3, r2
 802025e:	9306      	str	r3, [sp, #24]
 8020260:	e60d      	b.n	801fe7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020262:	2800      	cmp	r0, #0
 8020264:	f43f ae7d 	beq.w	801ff62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020268:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802026c:	9307      	str	r3, [sp, #28]
 802026e:	0e1b      	lsrs	r3, r3, #24
 8020270:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020272:	e676      	b.n	801ff62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020274:	7038      	strb	r0, [r7, #0]
 8020276:	7079      	strb	r1, [r7, #1]
 8020278:	e779      	b.n	802016e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802027a:	f112 0901 	adds.w	r9, r2, #1
 802027e:	f53f af78 	bmi.w	8020172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020282:	454b      	cmp	r3, r9
 8020284:	f6ff af75 	blt.w	8020172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020288:	f11c 0901 	adds.w	r9, ip, #1
 802028c:	f53f af71 	bmi.w	8020172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020290:	45ce      	cmp	lr, r9
 8020292:	f6ff af6e 	blt.w	8020172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020296:	b21b      	sxth	r3, r3
 8020298:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802029c:	fa0f f28e 	sxth.w	r2, lr
 80202a0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80202a4:	9200      	str	r2, [sp, #0]
 80202a6:	4639      	mov	r1, r7
 80202a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202aa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80202ac:	f7ff fca1 	bl	801fbf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80202b0:	e75f      	b.n	8020172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80202b2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80202b4:	1429      	asrs	r1, r5, #16
 80202b6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80202b8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80202bc:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80202c0:	1433      	asrs	r3, r6, #16
 80202c2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80202c6:	fb0c 1303 	mla	r3, ip, r3, r1
 80202ca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80202cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80202d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80202d4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80202d8:	2a00      	cmp	r2, #0
 80202da:	f000 8129 	beq.w	8020530 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80202de:	684c      	ldr	r4, [r1, #4]
 80202e0:	940c      	str	r4, [sp, #48]	@ 0x30
 80202e2:	0e24      	lsrs	r4, r4, #24
 80202e4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80202e6:	b198      	cbz	r0, 8020310 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80202e8:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 80202ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80202f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80202f4:	f10c 0c04 	add.w	ip, ip, #4
 80202f8:	eb01 080c 	add.w	r8, r1, ip
 80202fc:	f851 100c 	ldr.w	r1, [r1, ip]
 8020300:	9108      	str	r1, [sp, #32]
 8020302:	0e09      	lsrs	r1, r1, #24
 8020304:	9110      	str	r1, [sp, #64]	@ 0x40
 8020306:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802030a:	910d      	str	r1, [sp, #52]	@ 0x34
 802030c:	0e09      	lsrs	r1, r1, #24
 802030e:	9114      	str	r1, [sp, #80]	@ 0x50
 8020310:	b292      	uxth	r2, r2
 8020312:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020314:	b280      	uxth	r0, r0
 8020316:	fb02 f900 	mul.w	r9, r2, r0
 802031a:	0112      	lsls	r2, r2, #4
 802031c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020320:	eba2 0809 	sub.w	r8, r2, r9
 8020324:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020328:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802032a:	b280      	uxth	r0, r0
 802032c:	fa1f f888 	uxth.w	r8, r8
 8020330:	1a09      	subs	r1, r1, r0
 8020332:	fb08 f202 	mul.w	r2, r8, r2
 8020336:	b289      	uxth	r1, r1
 8020338:	fb01 220e 	mla	r2, r1, lr, r2
 802033c:	fb00 2204 	mla	r2, r0, r4, r2
 8020340:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020342:	fb09 2204 	mla	r2, r9, r4, r2
 8020346:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802034a:	2a00      	cmp	r2, #0
 802034c:	f000 80e8 	beq.w	8020520 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8020350:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020354:	d01b      	beq.n	802038e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8020356:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802035a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802035e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020362:	fb0e fe03 	mul.w	lr, lr, r3
 8020366:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802036a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802036e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020372:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020376:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802037a:	4453      	add	r3, sl
 802037c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020380:	0a1b      	lsrs	r3, r3, #8
 8020382:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020386:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802038a:	ea43 030c 	orr.w	r3, r3, ip
 802038e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020390:	2cff      	cmp	r4, #255	@ 0xff
 8020392:	d021      	beq.n	80203d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8020394:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020396:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802039a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802039c:	fb04 fc0c 	mul.w	ip, r4, ip
 80203a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80203a2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80203a6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80203aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80203ac:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80203b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80203b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80203b8:	44e6      	add	lr, ip
 80203ba:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80203be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80203c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80203ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203ce:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80203d2:	ea4e 040a 	orr.w	r4, lr, sl
 80203d6:	940c      	str	r4, [sp, #48]	@ 0x30
 80203d8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203da:	2cff      	cmp	r4, #255	@ 0xff
 80203dc:	d021      	beq.n	8020422 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80203de:	9c08      	ldr	r4, [sp, #32]
 80203e0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80203e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203e6:	fb04 fc0c 	mul.w	ip, r4, ip
 80203ea:	9c08      	ldr	r4, [sp, #32]
 80203ec:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80203f0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203f2:	fb04 fa0e 	mul.w	sl, r4, lr
 80203f6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80203fa:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80203fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020402:	44e6      	add	lr, ip
 8020404:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020408:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802040c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020410:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020414:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020418:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802041c:	ea4e 040a 	orr.w	r4, lr, sl
 8020420:	9408      	str	r4, [sp, #32]
 8020422:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020424:	2cff      	cmp	r4, #255	@ 0xff
 8020426:	d021      	beq.n	802046c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8020428:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802042a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802042e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020430:	fb04 fc0c 	mul.w	ip, r4, ip
 8020434:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020436:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802043a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802043e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020440:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020444:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020448:	fb04 fa0a 	mul.w	sl, r4, sl
 802044c:	44e6      	add	lr, ip
 802044e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020452:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020456:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802045a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802045e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020462:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020466:	ea4e 040a 	orr.w	r4, lr, sl
 802046a:	940d      	str	r4, [sp, #52]	@ 0x34
 802046c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802046e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020472:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020476:	2aff      	cmp	r2, #255	@ 0xff
 8020478:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802047c:	9c08      	ldr	r4, [sp, #32]
 802047e:	fb08 fc0c 	mul.w	ip, r8, ip
 8020482:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020486:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802048a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802048c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020490:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020494:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020496:	fb09 cc0e 	mla	ip, r9, lr, ip
 802049a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802049e:	fb08 f80e 	mul.w	r8, r8, lr
 80204a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204a6:	fb01 8303 	mla	r3, r1, r3, r8
 80204aa:	9908      	ldr	r1, [sp, #32]
 80204ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80204b0:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80204b4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80204b6:	fb00 330a 	mla	r3, r0, sl, r3
 80204ba:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80204be:	fb09 3e0e 	mla	lr, r9, lr, r3
 80204c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204c6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80204ca:	ea4c 0c0e 	orr.w	ip, ip, lr
 80204ce:	fa5f f08c 	uxtb.w	r0, ip
 80204d2:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80204d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80204da:	d032      	beq.n	8020542 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80204dc:	43d2      	mvns	r2, r2
 80204de:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80204e2:	b2d2      	uxtb	r2, r2
 80204e4:	fb0e fe02 	mul.w	lr, lr, r2
 80204e8:	f10e 0301 	add.w	r3, lr, #1
 80204ec:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80204f0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80204f4:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80204f8:	4350      	muls	r0, r2
 80204fa:	f807 3c03 	strb.w	r3, [r7, #-3]
 80204fe:	1c43      	adds	r3, r0, #1
 8020500:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020504:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020508:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 802050c:	4353      	muls	r3, r2
 802050e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020512:	1c5a      	adds	r2, r3, #1
 8020514:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020518:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 802051c:	f807 cc01 	strb.w	ip, [r7, #-1]
 8020520:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020522:	3703      	adds	r7, #3
 8020524:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020528:	441d      	add	r5, r3
 802052a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802052c:	441e      	add	r6, r3
 802052e:	e64e      	b.n	80201ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8020530:	2800      	cmp	r0, #0
 8020532:	f43f aeed 	beq.w	8020310 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020536:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802053a:	9108      	str	r1, [sp, #32]
 802053c:	0e09      	lsrs	r1, r1, #24
 802053e:	9110      	str	r1, [sp, #64]	@ 0x40
 8020540:	e6e6      	b.n	8020310 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020542:	f807 0c03 	strb.w	r0, [r7, #-3]
 8020546:	f807 1c02 	strb.w	r1, [r7, #-2]
 802054a:	e7e7      	b.n	802051c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 802054c:	b019      	add	sp, #100	@ 0x64
 802054e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8020554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020558:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 802055c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020560:	2c00      	cmp	r4, #0
 8020562:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8020566:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802056a:	fb00 4e03 	mla	lr, r0, r3, r4
 802056e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8020572:	f2c0 80b8 	blt.w	80206e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020576:	45a1      	cmp	r9, r4
 8020578:	f340 80b5 	ble.w	80206e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802057c:	2800      	cmp	r0, #0
 802057e:	f2c0 80b2 	blt.w	80206e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020582:	4580      	cmp	r8, r0
 8020584:	f340 80af 	ble.w	80206e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020588:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802058c:	f01e 0f01 	tst.w	lr, #1
 8020590:	5d56      	ldrb	r6, [r2, r5]
 8020592:	bf0c      	ite	eq
 8020594:	f006 060f 	andeq.w	r6, r6, #15
 8020598:	1136      	asrne	r6, r6, #4
 802059a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802059e:	b2f6      	uxtb	r6, r6
 80205a0:	f114 0a01 	adds.w	sl, r4, #1
 80205a4:	f100 80a1 	bmi.w	80206ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80205a8:	45d1      	cmp	r9, sl
 80205aa:	f340 809e 	ble.w	80206ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80205ae:	2800      	cmp	r0, #0
 80205b0:	f2c0 809b 	blt.w	80206ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80205b4:	4580      	cmp	r8, r0
 80205b6:	f340 8098 	ble.w	80206ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80205ba:	2f00      	cmp	r7, #0
 80205bc:	f000 8097 	beq.w	80206ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80205c0:	f10e 0b01 	add.w	fp, lr, #1
 80205c4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80205c8:	f01b 0f01 	tst.w	fp, #1
 80205cc:	5d55      	ldrb	r5, [r2, r5]
 80205ce:	bf0c      	ite	eq
 80205d0:	f005 050f 	andeq.w	r5, r5, #15
 80205d4:	112d      	asrne	r5, r5, #4
 80205d6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80205da:	b2ed      	uxtb	r5, r5
 80205dc:	f1bc 0f00 	cmp.w	ip, #0
 80205e0:	f000 8089 	beq.w	80206f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80205e4:	2c00      	cmp	r4, #0
 80205e6:	f100 0001 	add.w	r0, r0, #1
 80205ea:	f2c0 8082 	blt.w	80206f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80205ee:	45a1      	cmp	r9, r4
 80205f0:	dd7f      	ble.n	80206f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80205f2:	2800      	cmp	r0, #0
 80205f4:	db7d      	blt.n	80206f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80205f6:	4580      	cmp	r8, r0
 80205f8:	dd7b      	ble.n	80206f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80205fa:	eb03 0b0e 	add.w	fp, r3, lr
 80205fe:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020602:	f01b 0f01 	tst.w	fp, #1
 8020606:	5d14      	ldrb	r4, [r2, r4]
 8020608:	bf0c      	ite	eq
 802060a:	f004 040f 	andeq.w	r4, r4, #15
 802060e:	1124      	asrne	r4, r4, #4
 8020610:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020614:	b2e4      	uxtb	r4, r4
 8020616:	f1ba 0f00 	cmp.w	sl, #0
 802061a:	db6f      	blt.n	80206fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802061c:	45d1      	cmp	r9, sl
 802061e:	dd6d      	ble.n	80206fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020620:	2800      	cmp	r0, #0
 8020622:	db6b      	blt.n	80206fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020624:	4580      	cmp	r8, r0
 8020626:	dd69      	ble.n	80206fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020628:	2f00      	cmp	r7, #0
 802062a:	d069      	beq.n	8020700 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 802062c:	3301      	adds	r3, #1
 802062e:	449e      	add	lr, r3
 8020630:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020634:	f01e 0f01 	tst.w	lr, #1
 8020638:	5cd0      	ldrb	r0, [r2, r3]
 802063a:	bf0c      	ite	eq
 802063c:	f000 000f 	andeq.w	r0, r0, #15
 8020640:	1100      	asrne	r0, r0, #4
 8020642:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020646:	b2c3      	uxtb	r3, r0
 8020648:	b2ba      	uxth	r2, r7
 802064a:	fa1f fc8c 	uxth.w	ip, ip
 802064e:	fb02 f00c 	mul.w	r0, r2, ip
 8020652:	0112      	lsls	r2, r2, #4
 8020654:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020658:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802065c:	1a12      	subs	r2, r2, r0
 802065e:	fa1f fc8c 	uxth.w	ip, ip
 8020662:	b292      	uxth	r2, r2
 8020664:	eba7 070c 	sub.w	r7, r7, ip
 8020668:	436a      	muls	r2, r5
 802066a:	b2bf      	uxth	r7, r7
 802066c:	fb06 2207 	mla	r2, r6, r7, r2
 8020670:	fb0c 2404 	mla	r4, ip, r4, r2
 8020674:	fb00 4303 	mla	r3, r0, r3, r4
 8020678:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802067c:	b38b      	cbz	r3, 80206e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802067e:	4a21      	ldr	r2, [pc, #132]	@ (8020704 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020680:	6814      	ldr	r4, [r2, #0]
 8020682:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8020686:	b2e5      	uxtb	r5, r4
 8020688:	4353      	muls	r3, r2
 802068a:	1c5a      	adds	r2, r3, #1
 802068c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020690:	1212      	asrs	r2, r2, #8
 8020692:	b290      	uxth	r0, r2
 8020694:	43d2      	mvns	r2, r2
 8020696:	fb15 f500 	smulbb	r5, r5, r0
 802069a:	b2d3      	uxtb	r3, r2
 802069c:	780a      	ldrb	r2, [r1, #0]
 802069e:	fb02 5203 	mla	r2, r2, r3, r5
 80206a2:	b292      	uxth	r2, r2
 80206a4:	1c55      	adds	r5, r2, #1
 80206a6:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80206aa:	784d      	ldrb	r5, [r1, #1]
 80206ac:	fb15 f503 	smulbb	r5, r5, r3
 80206b0:	1212      	asrs	r2, r2, #8
 80206b2:	700a      	strb	r2, [r1, #0]
 80206b4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80206b8:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80206bc:	fb02 5200 	mla	r2, r2, r0, r5
 80206c0:	b292      	uxth	r2, r2
 80206c2:	1c55      	adds	r5, r2, #1
 80206c4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80206c8:	1212      	asrs	r2, r2, #8
 80206ca:	704a      	strb	r2, [r1, #1]
 80206cc:	788a      	ldrb	r2, [r1, #2]
 80206ce:	fb12 f303 	smulbb	r3, r2, r3
 80206d2:	fb04 3300 	mla	r3, r4, r0, r3
 80206d6:	b29b      	uxth	r3, r3
 80206d8:	1c5a      	adds	r2, r3, #1
 80206da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80206de:	121b      	asrs	r3, r3, #8
 80206e0:	708b      	strb	r3, [r1, #2]
 80206e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206e6:	2600      	movs	r6, #0
 80206e8:	e75a      	b.n	80205a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80206ea:	2500      	movs	r5, #0
 80206ec:	e776      	b.n	80205dc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80206ee:	463d      	mov	r5, r7
 80206f0:	e774      	b.n	80205dc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80206f2:	2400      	movs	r4, #0
 80206f4:	e78f      	b.n	8020616 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80206f6:	4663      	mov	r3, ip
 80206f8:	4664      	mov	r4, ip
 80206fa:	e7a5      	b.n	8020648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80206fc:	2300      	movs	r3, #0
 80206fe:	e7a3      	b.n	8020648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020700:	463b      	mov	r3, r7
 8020702:	e7a1      	b.n	8020648 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020704:	2402dabc 	.word	0x2402dabc

08020708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802070c:	b097      	sub	sp, #92	@ 0x5c
 802070e:	9214      	str	r2, [sp, #80]	@ 0x50
 8020710:	9309      	str	r3, [sp, #36]	@ 0x24
 8020712:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020714:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020718:	9015      	str	r0, [sp, #84]	@ 0x54
 802071a:	910c      	str	r1, [sp, #48]	@ 0x30
 802071c:	6850      	ldr	r0, [r2, #4]
 802071e:	930e      	str	r3, [sp, #56]	@ 0x38
 8020720:	6812      	ldr	r2, [r2, #0]
 8020722:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8020726:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 802072a:	fb00 1303 	mla	r3, r0, r3, r1
 802072e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020732:	eb02 0a03 	add.w	sl, r2, r3
 8020736:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020738:	689b      	ldr	r3, [r3, #8]
 802073a:	3301      	adds	r3, #1
 802073c:	f023 0301 	bic.w	r3, r3, #1
 8020740:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020742:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020744:	681f      	ldr	r7, [r3, #0]
 8020746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020748:	2b00      	cmp	r3, #0
 802074a:	dc03      	bgt.n	8020754 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802074c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802074e:	2b00      	cmp	r3, #0
 8020750:	f340 8247 	ble.w	8020be2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020754:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020756:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802075a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802075e:	1e48      	subs	r0, r1, #1
 8020760:	f102 3cff 	add.w	ip, r2, #4294967295
 8020764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020766:	2b00      	cmp	r3, #0
 8020768:	f340 80e5 	ble.w	8020936 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802076c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020770:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020774:	d406      	bmi.n	8020784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020776:	4586      	cmp	lr, r0
 8020778:	da04      	bge.n	8020784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802077a:	2b00      	cmp	r3, #0
 802077c:	db02      	blt.n	8020784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802077e:	4563      	cmp	r3, ip
 8020780:	f2c0 80da 	blt.w	8020938 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020784:	f11e 0e01 	adds.w	lr, lr, #1
 8020788:	f100 80cb 	bmi.w	8020922 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802078c:	4571      	cmp	r1, lr
 802078e:	f2c0 80c8 	blt.w	8020922 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020792:	3301      	adds	r3, #1
 8020794:	f100 80c5 	bmi.w	8020922 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020798:	429a      	cmp	r2, r3
 802079a:	f2c0 80c2 	blt.w	8020922 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802079e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207a0:	46d0      	mov	r8, sl
 80207a2:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80207a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80207a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	f340 80e3 	ble.w	8020976 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80207b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80207b2:	1430      	asrs	r0, r6, #16
 80207b4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80207b8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80207bc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80207c0:	142b      	asrs	r3, r5, #16
 80207c2:	f100 812e 	bmi.w	8020a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80207c6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80207ca:	455b      	cmp	r3, fp
 80207cc:	f280 8129 	bge.w	8020a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80207d0:	2800      	cmp	r0, #0
 80207d2:	f2c0 8126 	blt.w	8020a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80207d6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80207da:	4558      	cmp	r0, fp
 80207dc:	f280 8121 	bge.w	8020a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80207e0:	fb00 3309 	mla	r3, r0, r9, r3
 80207e4:	0858      	lsrs	r0, r3, #1
 80207e6:	07dc      	lsls	r4, r3, #31
 80207e8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80207ec:	bf54      	ite	pl
 80207ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 80207f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80207f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80207fa:	fa5f fc8c 	uxtb.w	ip, ip
 80207fe:	2a00      	cmp	r2, #0
 8020800:	f000 80fe 	beq.w	8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020804:	1c58      	adds	r0, r3, #1
 8020806:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802080a:	07c0      	lsls	r0, r0, #31
 802080c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020810:	bf54      	ite	pl
 8020812:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020816:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802081a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802081e:	fa5f f08e 	uxtb.w	r0, lr
 8020822:	9010      	str	r0, [sp, #64]	@ 0x40
 8020824:	b1d9      	cbz	r1, 802085e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020826:	444b      	add	r3, r9
 8020828:	0858      	lsrs	r0, r3, #1
 802082a:	07dc      	lsls	r4, r3, #31
 802082c:	f103 0301 	add.w	r3, r3, #1
 8020830:	5c38      	ldrb	r0, [r7, r0]
 8020832:	bf54      	ite	pl
 8020834:	f000 000f 	andpl.w	r0, r0, #15
 8020838:	1100      	asrmi	r0, r0, #4
 802083a:	07dc      	lsls	r4, r3, #31
 802083c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020840:	b2c0      	uxtb	r0, r0
 8020842:	900a      	str	r0, [sp, #40]	@ 0x28
 8020844:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020848:	f817 e000 	ldrb.w	lr, [r7, r0]
 802084c:	bf54      	ite	pl
 802084e:	f00e 030f 	andpl.w	r3, lr, #15
 8020852:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020856:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802085a:	b2db      	uxtb	r3, r3
 802085c:	9311      	str	r3, [sp, #68]	@ 0x44
 802085e:	b292      	uxth	r2, r2
 8020860:	b289      	uxth	r1, r1
 8020862:	0113      	lsls	r3, r2, #4
 8020864:	fb02 f001 	mul.w	r0, r2, r1
 8020868:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802086a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802086e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020872:	1a1b      	subs	r3, r3, r0
 8020874:	b289      	uxth	r1, r1
 8020876:	b29b      	uxth	r3, r3
 8020878:	ebae 0e01 	sub.w	lr, lr, r1
 802087c:	4353      	muls	r3, r2
 802087e:	fa1f fe8e 	uxth.w	lr, lr
 8020882:	fb0c 320e 	mla	r2, ip, lr, r3
 8020886:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020888:	fb01 2203 	mla	r2, r1, r3, r2
 802088c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802088e:	fb00 2203 	mla	r2, r0, r3, r2
 8020892:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020896:	2a00      	cmp	r2, #0
 8020898:	d039      	beq.n	802090e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802089a:	4bc7      	ldr	r3, [pc, #796]	@ (8020bb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802089c:	6819      	ldr	r1, [r3, #0]
 802089e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208a0:	fa5f fc81 	uxtb.w	ip, r1
 80208a4:	435a      	muls	r2, r3
 80208a6:	1c53      	adds	r3, r2, #1
 80208a8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80208ac:	1212      	asrs	r2, r2, #8
 80208ae:	b290      	uxth	r0, r2
 80208b0:	43d2      	mvns	r2, r2
 80208b2:	fb1c fc00 	smulbb	ip, ip, r0
 80208b6:	b2d3      	uxtb	r3, r2
 80208b8:	f898 2000 	ldrb.w	r2, [r8]
 80208bc:	fb02 c203 	mla	r2, r2, r3, ip
 80208c0:	b292      	uxth	r2, r2
 80208c2:	f102 0c01 	add.w	ip, r2, #1
 80208c6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80208ca:	f898 c001 	ldrb.w	ip, [r8, #1]
 80208ce:	fb1c fc03 	smulbb	ip, ip, r3
 80208d2:	1212      	asrs	r2, r2, #8
 80208d4:	f888 2000 	strb.w	r2, [r8]
 80208d8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80208dc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80208e0:	fb02 c200 	mla	r2, r2, r0, ip
 80208e4:	b292      	uxth	r2, r2
 80208e6:	f102 0c01 	add.w	ip, r2, #1
 80208ea:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80208ee:	1212      	asrs	r2, r2, #8
 80208f0:	f888 2001 	strb.w	r2, [r8, #1]
 80208f4:	f898 2002 	ldrb.w	r2, [r8, #2]
 80208f8:	fb12 f303 	smulbb	r3, r2, r3
 80208fc:	fb01 3300 	mla	r3, r1, r0, r3
 8020900:	b29b      	uxth	r3, r3
 8020902:	1c5a      	adds	r2, r3, #1
 8020904:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020908:	121b      	asrs	r3, r3, #8
 802090a:	f888 3002 	strb.w	r3, [r8, #2]
 802090e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020910:	f108 0803 	add.w	r8, r8, #3
 8020914:	441d      	add	r5, r3
 8020916:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020918:	441e      	add	r6, r3
 802091a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802091c:	3b01      	subs	r3, #1
 802091e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020920:	e742      	b.n	80207a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020924:	f10a 0a03 	add.w	sl, sl, #3
 8020928:	441d      	add	r5, r3
 802092a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802092c:	441e      	add	r6, r3
 802092e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020930:	3b01      	subs	r3, #1
 8020932:	9309      	str	r3, [sp, #36]	@ 0x24
 8020934:	e716      	b.n	8020764 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020936:	d024      	beq.n	8020982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802093a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802093c:	3b01      	subs	r3, #1
 802093e:	fb00 5003 	mla	r0, r0, r3, r5
 8020942:	1400      	asrs	r0, r0, #16
 8020944:	f53f af2b 	bmi.w	802079e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020948:	3901      	subs	r1, #1
 802094a:	4288      	cmp	r0, r1
 802094c:	f6bf af27 	bge.w	802079e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020950:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8020952:	fb01 6303 	mla	r3, r1, r3, r6
 8020956:	141b      	asrs	r3, r3, #16
 8020958:	f53f af21 	bmi.w	802079e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802095c:	3a01      	subs	r2, #1
 802095e:	4293      	cmp	r3, r2
 8020960:	f6bf af1d 	bge.w	802079e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020964:	f10a 0e03 	add.w	lr, sl, #3
 8020968:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 802096c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020970:	f1b8 0f00 	cmp.w	r8, #0
 8020974:	dc76      	bgt.n	8020a64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020978:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802097c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020980:	44a2      	add	sl, r4
 8020982:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020984:	2b00      	cmp	r3, #0
 8020986:	f340 812c 	ble.w	8020be2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802098a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802098e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020990:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020994:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020998:	eef0 6a62 	vmov.f32	s13, s5
 802099c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80209a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209a8:	ee16 5a90 	vmov	r5, s13
 80209ac:	eef0 6a43 	vmov.f32	s13, s6
 80209b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209b4:	ee16 6a90 	vmov	r6, s13
 80209b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209d0:	ee12 2a90 	vmov	r2, s5
 80209d4:	eef0 2a47 	vmov.f32	s5, s14
 80209d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80209dc:	ee13 2a10 	vmov	r2, s6
 80209e0:	9323      	str	r3, [sp, #140]	@ 0x8c
 80209e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80209e4:	eeb0 3a67 	vmov.f32	s6, s15
 80209e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80209ec:	9324      	str	r3, [sp, #144]	@ 0x90
 80209ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80209f2:	3b01      	subs	r3, #1
 80209f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80209f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80209f8:	bf08      	it	eq
 80209fa:	4613      	moveq	r3, r2
 80209fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80209fe:	e6a2      	b.n	8020746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020a00:	2900      	cmp	r1, #0
 8020a02:	f43f af2c 	beq.w	802085e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020a06:	eb09 0003 	add.w	r0, r9, r3
 8020a0a:	0843      	lsrs	r3, r0, #1
 8020a0c:	07c0      	lsls	r0, r0, #31
 8020a0e:	5cfb      	ldrb	r3, [r7, r3]
 8020a10:	bf54      	ite	pl
 8020a12:	f003 030f 	andpl.w	r3, r3, #15
 8020a16:	111b      	asrmi	r3, r3, #4
 8020a18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020a1c:	b2db      	uxtb	r3, r3
 8020a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020a20:	e71d      	b.n	802085e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020a22:	f113 0b01 	adds.w	fp, r3, #1
 8020a26:	f53f af72 	bmi.w	802090e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020a2a:	45dc      	cmp	ip, fp
 8020a2c:	f6ff af6f 	blt.w	802090e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020a30:	f110 0b01 	adds.w	fp, r0, #1
 8020a34:	f53f af6b 	bmi.w	802090e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020a38:	45de      	cmp	lr, fp
 8020a3a:	f6ff af68 	blt.w	802090e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020a3e:	9302      	str	r3, [sp, #8]
 8020a40:	fa0f f38e 	sxth.w	r3, lr
 8020a44:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020a46:	9301      	str	r3, [sp, #4]
 8020a48:	fa0f f38c 	sxth.w	r3, ip
 8020a4c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020a50:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020a54:	9300      	str	r3, [sp, #0]
 8020a56:	463a      	mov	r2, r7
 8020a58:	464b      	mov	r3, r9
 8020a5a:	4641      	mov	r1, r8
 8020a5c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020a5e:	f7ff fd79 	bl	8020554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020a62:	e754      	b.n	802090e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020a64:	142a      	asrs	r2, r5, #16
 8020a66:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020a6a:	1433      	asrs	r3, r6, #16
 8020a6c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020a70:	fb09 2303 	mla	r3, r9, r3, r2
 8020a74:	085a      	lsrs	r2, r3, #1
 8020a76:	07dc      	lsls	r4, r3, #31
 8020a78:	5cba      	ldrb	r2, [r7, r2]
 8020a7a:	bf54      	ite	pl
 8020a7c:	f002 020f 	andpl.w	r2, r2, #15
 8020a80:	1112      	asrmi	r2, r2, #4
 8020a82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020a86:	b2d2      	uxtb	r2, r2
 8020a88:	2900      	cmp	r1, #0
 8020a8a:	f000 8097 	beq.w	8020bbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020a8e:	f103 0b01 	add.w	fp, r3, #1
 8020a92:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8020a96:	f01b 0f01 	tst.w	fp, #1
 8020a9a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020a9e:	bf0c      	ite	eq
 8020aa0:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020aa4:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020aa8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020aac:	fa5f f48c 	uxtb.w	r4, ip
 8020ab0:	9412      	str	r4, [sp, #72]	@ 0x48
 8020ab2:	b300      	cbz	r0, 8020af6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020ab4:	444b      	add	r3, r9
 8020ab6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020aba:	07dc      	lsls	r4, r3, #31
 8020abc:	f103 0301 	add.w	r3, r3, #1
 8020ac0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020ac4:	bf54      	ite	pl
 8020ac6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020aca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020ace:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ad2:	fa5f f48c 	uxtb.w	r4, ip
 8020ad6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020ada:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020adc:	07dc      	lsls	r4, r3, #31
 8020ade:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020ae2:	bf54      	ite	pl
 8020ae4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020ae8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020aec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020af0:	fa5f f38c 	uxtb.w	r3, ip
 8020af4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020af6:	b289      	uxth	r1, r1
 8020af8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020afa:	b280      	uxth	r0, r0
 8020afc:	fb01 f300 	mul.w	r3, r1, r0
 8020b00:	0109      	lsls	r1, r1, #4
 8020b02:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020b06:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8020b0a:	1ac9      	subs	r1, r1, r3
 8020b0c:	b280      	uxth	r0, r0
 8020b0e:	b289      	uxth	r1, r1
 8020b10:	ebac 0c00 	sub.w	ip, ip, r0
 8020b14:	4361      	muls	r1, r4
 8020b16:	fa1f fc8c 	uxth.w	ip, ip
 8020b1a:	fb02 120c 	mla	r2, r2, ip, r1
 8020b1e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020b20:	fb00 2001 	mla	r0, r0, r1, r2
 8020b24:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020b26:	fb03 0302 	mla	r3, r3, r2, r0
 8020b2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d039      	beq.n	8020ba6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020b32:	4a21      	ldr	r2, [pc, #132]	@ (8020bb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020b34:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020b38:	6810      	ldr	r0, [r2, #0]
 8020b3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020b3c:	fa5f fc80 	uxtb.w	ip, r0
 8020b40:	4353      	muls	r3, r2
 8020b42:	1c5a      	adds	r2, r3, #1
 8020b44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b48:	121b      	asrs	r3, r3, #8
 8020b4a:	b29a      	uxth	r2, r3
 8020b4c:	43db      	mvns	r3, r3
 8020b4e:	fb1c fc02 	smulbb	ip, ip, r2
 8020b52:	b2db      	uxtb	r3, r3
 8020b54:	fb01 c103 	mla	r1, r1, r3, ip
 8020b58:	b289      	uxth	r1, r1
 8020b5a:	f101 0c01 	add.w	ip, r1, #1
 8020b5e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020b62:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020b66:	fb1c fc03 	smulbb	ip, ip, r3
 8020b6a:	1209      	asrs	r1, r1, #8
 8020b6c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020b70:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020b74:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020b78:	fb01 c102 	mla	r1, r1, r2, ip
 8020b7c:	b289      	uxth	r1, r1
 8020b7e:	f101 0c01 	add.w	ip, r1, #1
 8020b82:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020b86:	1209      	asrs	r1, r1, #8
 8020b88:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020b8c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020b90:	fb11 f303 	smulbb	r3, r1, r3
 8020b94:	fb00 3002 	mla	r0, r0, r2, r3
 8020b98:	b280      	uxth	r0, r0
 8020b9a:	1c42      	adds	r2, r0, #1
 8020b9c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020ba0:	1200      	asrs	r0, r0, #8
 8020ba2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020ba6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ba8:	f10e 0e03 	add.w	lr, lr, #3
 8020bac:	f108 38ff 	add.w	r8, r8, #4294967295
 8020bb0:	441d      	add	r5, r3
 8020bb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020bb4:	441e      	add	r6, r3
 8020bb6:	e6db      	b.n	8020970 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8020bb8:	2402dabc 	.word	0x2402dabc
 8020bbc:	2800      	cmp	r0, #0
 8020bbe:	d09a      	beq.n	8020af6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020bc0:	444b      	add	r3, r9
 8020bc2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020bc6:	07db      	lsls	r3, r3, #31
 8020bc8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020bcc:	bf54      	ite	pl
 8020bce:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020bd2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020bd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020bda:	fa5f f38c 	uxtb.w	r3, ip
 8020bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020be0:	e789      	b.n	8020af6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020be2:	b017      	add	sp, #92	@ 0x5c
 8020be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020be8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bec:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8020bf0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020bf4:	2d00      	cmp	r5, #0
 8020bf6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8020bfa:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8020bfe:	fb04 5e03 	mla	lr, r4, r3, r5
 8020c02:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8020c06:	f2c0 80b1 	blt.w	8020d6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020c0a:	45a9      	cmp	r9, r5
 8020c0c:	f340 80ae 	ble.w	8020d6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020c10:	2c00      	cmp	r4, #0
 8020c12:	f2c0 80ab 	blt.w	8020d6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020c16:	45a0      	cmp	r8, r4
 8020c18:	f340 80a8 	ble.w	8020d6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020c1c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8020c20:	f01e 0f01 	tst.w	lr, #1
 8020c24:	5d97      	ldrb	r7, [r2, r6]
 8020c26:	bf0c      	ite	eq
 8020c28:	f007 070f 	andeq.w	r7, r7, #15
 8020c2c:	113f      	asrne	r7, r7, #4
 8020c2e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8020c32:	b2ff      	uxtb	r7, r7
 8020c34:	f115 0a01 	adds.w	sl, r5, #1
 8020c38:	f100 809a 	bmi.w	8020d70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020c3c:	45d1      	cmp	r9, sl
 8020c3e:	f340 8097 	ble.w	8020d70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020c42:	2c00      	cmp	r4, #0
 8020c44:	f2c0 8094 	blt.w	8020d70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020c48:	45a0      	cmp	r8, r4
 8020c4a:	f340 8091 	ble.w	8020d70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020c4e:	2800      	cmp	r0, #0
 8020c50:	f000 8090 	beq.w	8020d74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8020c54:	f10e 0b01 	add.w	fp, lr, #1
 8020c58:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8020c5c:	f01b 0f01 	tst.w	fp, #1
 8020c60:	5d96      	ldrb	r6, [r2, r6]
 8020c62:	bf0c      	ite	eq
 8020c64:	f006 060f 	andeq.w	r6, r6, #15
 8020c68:	1136      	asrne	r6, r6, #4
 8020c6a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020c6e:	b2f6      	uxtb	r6, r6
 8020c70:	f1bc 0f00 	cmp.w	ip, #0
 8020c74:	f000 8082 	beq.w	8020d7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8020c78:	2d00      	cmp	r5, #0
 8020c7a:	f104 0401 	add.w	r4, r4, #1
 8020c7e:	db7b      	blt.n	8020d78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020c80:	45a9      	cmp	r9, r5
 8020c82:	dd79      	ble.n	8020d78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020c84:	2c00      	cmp	r4, #0
 8020c86:	db77      	blt.n	8020d78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020c88:	45a0      	cmp	r8, r4
 8020c8a:	dd75      	ble.n	8020d78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020c8c:	eb03 0b0e 	add.w	fp, r3, lr
 8020c90:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020c94:	f01b 0f01 	tst.w	fp, #1
 8020c98:	5d55      	ldrb	r5, [r2, r5]
 8020c9a:	bf0c      	ite	eq
 8020c9c:	f005 050f 	andeq.w	r5, r5, #15
 8020ca0:	112d      	asrne	r5, r5, #4
 8020ca2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020ca6:	b2ed      	uxtb	r5, r5
 8020ca8:	f1ba 0f00 	cmp.w	sl, #0
 8020cac:	db69      	blt.n	8020d82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020cae:	45d1      	cmp	r9, sl
 8020cb0:	dd67      	ble.n	8020d82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020cb2:	2c00      	cmp	r4, #0
 8020cb4:	db65      	blt.n	8020d82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020cb6:	45a0      	cmp	r8, r4
 8020cb8:	dd63      	ble.n	8020d82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020cba:	2800      	cmp	r0, #0
 8020cbc:	d063      	beq.n	8020d86 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8020cbe:	3301      	adds	r3, #1
 8020cc0:	449e      	add	lr, r3
 8020cc2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020cc6:	f01e 0f01 	tst.w	lr, #1
 8020cca:	5cd4      	ldrb	r4, [r2, r3]
 8020ccc:	bf0c      	ite	eq
 8020cce:	f004 040f 	andeq.w	r4, r4, #15
 8020cd2:	1124      	asrne	r4, r4, #4
 8020cd4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020cd8:	b2e3      	uxtb	r3, r4
 8020cda:	b282      	uxth	r2, r0
 8020cdc:	fa1f fc8c 	uxth.w	ip, ip
 8020ce0:	fb02 f40c 	mul.w	r4, r2, ip
 8020ce4:	0112      	lsls	r2, r2, #4
 8020ce6:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8020cea:	fa1f f08c 	uxth.w	r0, ip
 8020cee:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8020cf2:	1b12      	subs	r2, r2, r4
 8020cf4:	ebac 0c00 	sub.w	ip, ip, r0
 8020cf8:	b292      	uxth	r2, r2
 8020cfa:	fa1f fc8c 	uxth.w	ip, ip
 8020cfe:	4372      	muls	r2, r6
 8020d00:	fb07 220c 	mla	r2, r7, ip, r2
 8020d04:	fb00 2005 	mla	r0, r0, r5, r2
 8020d08:	fb04 0303 	mla	r3, r4, r3, r0
 8020d0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020d10:	b353      	cbz	r3, 8020d68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8020d12:	4a1e      	ldr	r2, [pc, #120]	@ (8020d8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8020d14:	7808      	ldrb	r0, [r1, #0]
 8020d16:	6814      	ldr	r4, [r2, #0]
 8020d18:	b29a      	uxth	r2, r3
 8020d1a:	43db      	mvns	r3, r3
 8020d1c:	b2e5      	uxtb	r5, r4
 8020d1e:	b2db      	uxtb	r3, r3
 8020d20:	fb15 f502 	smulbb	r5, r5, r2
 8020d24:	fb00 5003 	mla	r0, r0, r3, r5
 8020d28:	b280      	uxth	r0, r0
 8020d2a:	1c45      	adds	r5, r0, #1
 8020d2c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020d30:	784d      	ldrb	r5, [r1, #1]
 8020d32:	fb15 f503 	smulbb	r5, r5, r3
 8020d36:	1200      	asrs	r0, r0, #8
 8020d38:	7008      	strb	r0, [r1, #0]
 8020d3a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8020d3e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020d42:	fb00 5002 	mla	r0, r0, r2, r5
 8020d46:	b280      	uxth	r0, r0
 8020d48:	1c45      	adds	r5, r0, #1
 8020d4a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020d4e:	1200      	asrs	r0, r0, #8
 8020d50:	7048      	strb	r0, [r1, #1]
 8020d52:	7888      	ldrb	r0, [r1, #2]
 8020d54:	fb10 f303 	smulbb	r3, r0, r3
 8020d58:	fb04 3202 	mla	r2, r4, r2, r3
 8020d5c:	b292      	uxth	r2, r2
 8020d5e:	1c53      	adds	r3, r2, #1
 8020d60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020d64:	1212      	asrs	r2, r2, #8
 8020d66:	708a      	strb	r2, [r1, #2]
 8020d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d6c:	2700      	movs	r7, #0
 8020d6e:	e761      	b.n	8020c34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8020d70:	2600      	movs	r6, #0
 8020d72:	e77d      	b.n	8020c70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8020d74:	4606      	mov	r6, r0
 8020d76:	e77b      	b.n	8020c70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8020d78:	2500      	movs	r5, #0
 8020d7a:	e795      	b.n	8020ca8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8020d7c:	4663      	mov	r3, ip
 8020d7e:	4665      	mov	r5, ip
 8020d80:	e7ab      	b.n	8020cda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020d82:	2300      	movs	r3, #0
 8020d84:	e7a9      	b.n	8020cda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020d86:	4603      	mov	r3, r0
 8020d88:	e7a7      	b.n	8020cda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020d8a:	bf00      	nop
 8020d8c:	2402dabc 	.word	0x2402dabc

08020d90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d94:	b093      	sub	sp, #76	@ 0x4c
 8020d96:	461c      	mov	r4, r3
 8020d98:	920c      	str	r2, [sp, #48]	@ 0x30
 8020d9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020d9c:	9011      	str	r0, [sp, #68]	@ 0x44
 8020d9e:	9107      	str	r1, [sp, #28]
 8020da0:	6850      	ldr	r0, [r2, #4]
 8020da2:	6812      	ldr	r2, [r2, #0]
 8020da4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8020da8:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8020dac:	fb00 1303 	mla	r3, r0, r3, r1
 8020db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020db4:	eb02 0b03 	add.w	fp, r2, r3
 8020db8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020dba:	689b      	ldr	r3, [r3, #8]
 8020dbc:	3301      	adds	r3, #1
 8020dbe:	f023 0301 	bic.w	r3, r3, #1
 8020dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8020dc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020dc6:	f8d3 8000 	ldr.w	r8, [r3]
 8020dca:	9b07      	ldr	r3, [sp, #28]
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	dc03      	bgt.n	8020dd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020dd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	f340 822b 	ble.w	802122e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020dd8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020dda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020dde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020de2:	1e48      	subs	r0, r1, #1
 8020de4:	1e57      	subs	r7, r2, #1
 8020de6:	2c00      	cmp	r4, #0
 8020de8:	f340 80d7 	ble.w	8020f9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020dec:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020df0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020df4:	d406      	bmi.n	8020e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020df6:	4584      	cmp	ip, r0
 8020df8:	da04      	bge.n	8020e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	db02      	blt.n	8020e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020dfe:	42bb      	cmp	r3, r7
 8020e00:	f2c0 80cc 	blt.w	8020f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020e04:	f11c 0c01 	adds.w	ip, ip, #1
 8020e08:	f100 80bf 	bmi.w	8020f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020e0c:	4561      	cmp	r1, ip
 8020e0e:	f2c0 80bc 	blt.w	8020f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020e12:	3301      	adds	r3, #1
 8020e14:	f100 80b9 	bmi.w	8020f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020e18:	429a      	cmp	r2, r3
 8020e1a:	f2c0 80b6 	blt.w	8020f8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020e1e:	46a2      	mov	sl, r4
 8020e20:	465f      	mov	r7, fp
 8020e22:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020e26:	f1ba 0f00 	cmp.w	sl, #0
 8020e2a:	f340 80d4 	ble.w	8020fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8020e2e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8020e32:	1430      	asrs	r0, r6, #16
 8020e34:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020e38:	9308      	str	r3, [sp, #32]
 8020e3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020e3c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020e40:	142b      	asrs	r3, r5, #16
 8020e42:	f100 8124 	bmi.w	802108e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020e46:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020e4a:	4293      	cmp	r3, r2
 8020e4c:	f280 811f 	bge.w	802108e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020e50:	2800      	cmp	r0, #0
 8020e52:	f2c0 811c 	blt.w	802108e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020e56:	f10e 32ff 	add.w	r2, lr, #4294967295
 8020e5a:	4290      	cmp	r0, r2
 8020e5c:	f280 8117 	bge.w	802108e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020e60:	fb00 3309 	mla	r3, r0, r9, r3
 8020e64:	0858      	lsrs	r0, r3, #1
 8020e66:	07da      	lsls	r2, r3, #31
 8020e68:	9a08      	ldr	r2, [sp, #32]
 8020e6a:	f818 c000 	ldrb.w	ip, [r8, r0]
 8020e6e:	bf54      	ite	pl
 8020e70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020e74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020e78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020e7c:	fa5f fc8c 	uxtb.w	ip, ip
 8020e80:	2a00      	cmp	r2, #0
 8020e82:	f000 80ed 	beq.w	8021060 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020e86:	1c58      	adds	r0, r3, #1
 8020e88:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020e8c:	07c0      	lsls	r0, r0, #31
 8020e8e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8020e92:	bf54      	ite	pl
 8020e94:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020e98:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020e9c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020ea0:	fa5f fe8e 	uxtb.w	lr, lr
 8020ea4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8020ea8:	b1c9      	cbz	r1, 8020ede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020eaa:	444b      	add	r3, r9
 8020eac:	0858      	lsrs	r0, r3, #1
 8020eae:	07da      	lsls	r2, r3, #31
 8020eb0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020eb4:	bf54      	ite	pl
 8020eb6:	f000 000f 	andpl.w	r0, r0, #15
 8020eba:	1100      	asrmi	r0, r0, #4
 8020ebc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020ec0:	b2c0      	uxtb	r0, r0
 8020ec2:	900a      	str	r0, [sp, #40]	@ 0x28
 8020ec4:	1c58      	adds	r0, r3, #1
 8020ec6:	0843      	lsrs	r3, r0, #1
 8020ec8:	07c2      	lsls	r2, r0, #31
 8020eca:	f818 3003 	ldrb.w	r3, [r8, r3]
 8020ece:	bf54      	ite	pl
 8020ed0:	f003 030f 	andpl.w	r3, r3, #15
 8020ed4:	111b      	asrmi	r3, r3, #4
 8020ed6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020eda:	b2db      	uxtb	r3, r3
 8020edc:	930e      	str	r3, [sp, #56]	@ 0x38
 8020ede:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020ee2:	b289      	uxth	r1, r1
 8020ee4:	fb02 f301 	mul.w	r3, r2, r1
 8020ee8:	0112      	lsls	r2, r2, #4
 8020eea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020eee:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8020ef2:	1ad2      	subs	r2, r2, r3
 8020ef4:	b289      	uxth	r1, r1
 8020ef6:	b292      	uxth	r2, r2
 8020ef8:	1a40      	subs	r0, r0, r1
 8020efa:	fa1f fe80 	uxth.w	lr, r0
 8020efe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020f00:	4342      	muls	r2, r0
 8020f02:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8020f06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020f08:	fb01 c102 	mla	r1, r1, r2, ip
 8020f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f0e:	fb03 1302 	mla	r3, r3, r2, r1
 8020f12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020f16:	b383      	cbz	r3, 8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020f18:	4ac6      	ldr	r2, [pc, #792]	@ (8021234 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020f1a:	2bff      	cmp	r3, #255	@ 0xff
 8020f1c:	6812      	ldr	r2, [r2, #0]
 8020f1e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8020f22:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8020f26:	b2d2      	uxtb	r2, r2
 8020f28:	f000 80ac 	beq.w	8021084 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020f2c:	b299      	uxth	r1, r3
 8020f2e:	43db      	mvns	r3, r3
 8020f30:	f897 c000 	ldrb.w	ip, [r7]
 8020f34:	fb12 f201 	smulbb	r2, r2, r1
 8020f38:	b2db      	uxtb	r3, r3
 8020f3a:	fb10 f001 	smulbb	r0, r0, r1
 8020f3e:	fb0c 2203 	mla	r2, ip, r3, r2
 8020f42:	fb1e f101 	smulbb	r1, lr, r1
 8020f46:	b292      	uxth	r2, r2
 8020f48:	f102 0c01 	add.w	ip, r2, #1
 8020f4c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020f50:	1212      	asrs	r2, r2, #8
 8020f52:	703a      	strb	r2, [r7, #0]
 8020f54:	787a      	ldrb	r2, [r7, #1]
 8020f56:	fb02 0003 	mla	r0, r2, r3, r0
 8020f5a:	b280      	uxth	r0, r0
 8020f5c:	1c42      	adds	r2, r0, #1
 8020f5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020f62:	78ba      	ldrb	r2, [r7, #2]
 8020f64:	fb02 1303 	mla	r3, r2, r3, r1
 8020f68:	1200      	asrs	r0, r0, #8
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	7078      	strb	r0, [r7, #1]
 8020f6e:	f103 0e01 	add.w	lr, r3, #1
 8020f72:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020f76:	121b      	asrs	r3, r3, #8
 8020f78:	70bb      	strb	r3, [r7, #2]
 8020f7a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020f7c:	3703      	adds	r7, #3
 8020f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f82:	441d      	add	r5, r3
 8020f84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020f86:	441e      	add	r6, r3
 8020f88:	e74d      	b.n	8020e26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f8a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020f8c:	3c01      	subs	r4, #1
 8020f8e:	f10b 0b03 	add.w	fp, fp, #3
 8020f92:	441d      	add	r5, r3
 8020f94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020f96:	441e      	add	r6, r3
 8020f98:	e725      	b.n	8020de6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020f9a:	d021      	beq.n	8020fe0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020f9c:	1e63      	subs	r3, r4, #1
 8020f9e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8020fa0:	fb00 5003 	mla	r0, r0, r3, r5
 8020fa4:	1400      	asrs	r0, r0, #16
 8020fa6:	f53f af3a 	bmi.w	8020e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020faa:	3901      	subs	r1, #1
 8020fac:	4288      	cmp	r0, r1
 8020fae:	f6bf af36 	bge.w	8020e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020fb2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8020fb4:	fb01 6303 	mla	r3, r1, r3, r6
 8020fb8:	141b      	asrs	r3, r3, #16
 8020fba:	f53f af30 	bmi.w	8020e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020fbe:	3a01      	subs	r2, #1
 8020fc0:	4293      	cmp	r3, r2
 8020fc2:	f6bf af2c 	bge.w	8020e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020fc6:	f10b 0c03 	add.w	ip, fp, #3
 8020fca:	46a6      	mov	lr, r4
 8020fcc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020fd0:	f1be 0f00 	cmp.w	lr, #0
 8020fd4:	dc79      	bgt.n	80210ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8020fd6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8020fda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020fde:	44a3      	add	fp, r4
 8020fe0:	9b07      	ldr	r3, [sp, #28]
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	f340 8123 	ble.w	802122e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020fec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020fee:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ff2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ff6:	eef0 6a62 	vmov.f32	s13, s5
 8020ffa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020ffe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021002:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021006:	ee16 5a90 	vmov	r5, s13
 802100a:	eef0 6a43 	vmov.f32	s13, s6
 802100e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021012:	ee16 6a90 	vmov	r6, s13
 8021016:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802101a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802101e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021022:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021026:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802102a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802102e:	ee12 2a90 	vmov	r2, s5
 8021032:	eef0 2a47 	vmov.f32	s5, s14
 8021036:	fb92 f3f3 	sdiv	r3, r2, r3
 802103a:	ee13 2a10 	vmov	r2, s6
 802103e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021040:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021042:	eeb0 3a67 	vmov.f32	s6, s15
 8021046:	fb92 f3f3 	sdiv	r3, r2, r3
 802104a:	9320      	str	r3, [sp, #128]	@ 0x80
 802104c:	9b07      	ldr	r3, [sp, #28]
 802104e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021050:	3b01      	subs	r3, #1
 8021052:	9307      	str	r3, [sp, #28]
 8021054:	bf08      	it	eq
 8021056:	4614      	moveq	r4, r2
 8021058:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802105a:	bf18      	it	ne
 802105c:	461c      	movne	r4, r3
 802105e:	e6b4      	b.n	8020dca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021060:	2900      	cmp	r1, #0
 8021062:	f43f af3c 	beq.w	8020ede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021066:	eb09 0003 	add.w	r0, r9, r3
 802106a:	0843      	lsrs	r3, r0, #1
 802106c:	07c0      	lsls	r0, r0, #31
 802106e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021072:	bf54      	ite	pl
 8021074:	f003 030f 	andpl.w	r3, r3, #15
 8021078:	111b      	asrmi	r3, r3, #4
 802107a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802107e:	b2db      	uxtb	r3, r3
 8021080:	930a      	str	r3, [sp, #40]	@ 0x28
 8021082:	e72c      	b.n	8020ede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021084:	703a      	strb	r2, [r7, #0]
 8021086:	7078      	strb	r0, [r7, #1]
 8021088:	f887 e002 	strb.w	lr, [r7, #2]
 802108c:	e775      	b.n	8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802108e:	1c5a      	adds	r2, r3, #1
 8021090:	f53f af73 	bmi.w	8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021094:	4594      	cmp	ip, r2
 8021096:	f6ff af70 	blt.w	8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802109a:	1c42      	adds	r2, r0, #1
 802109c:	f53f af6d 	bmi.w	8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80210a0:	4596      	cmp	lr, r2
 80210a2:	f6ff af6a 	blt.w	8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80210a6:	9302      	str	r3, [sp, #8]
 80210a8:	fa0f f38e 	sxth.w	r3, lr
 80210ac:	9a08      	ldr	r2, [sp, #32]
 80210ae:	9301      	str	r3, [sp, #4]
 80210b0:	fa0f f38c 	sxth.w	r3, ip
 80210b4:	9105      	str	r1, [sp, #20]
 80210b6:	4639      	mov	r1, r7
 80210b8:	9300      	str	r3, [sp, #0]
 80210ba:	464b      	mov	r3, r9
 80210bc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80210c0:	4642      	mov	r2, r8
 80210c2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80210c4:	f7ff fd90 	bl	8020be8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80210c8:	e757      	b.n	8020f7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80210ca:	142a      	asrs	r2, r5, #16
 80210cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80210d0:	1433      	asrs	r3, r6, #16
 80210d2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80210d6:	fb09 2303 	mla	r3, r9, r3, r2
 80210da:	085a      	lsrs	r2, r3, #1
 80210dc:	07d9      	lsls	r1, r3, #31
 80210de:	f818 2002 	ldrb.w	r2, [r8, r2]
 80210e2:	bf54      	ite	pl
 80210e4:	f002 020f 	andpl.w	r2, r2, #15
 80210e8:	1112      	asrmi	r2, r2, #4
 80210ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80210ee:	b2d2      	uxtb	r2, r2
 80210f0:	2800      	cmp	r0, #0
 80210f2:	f000 8085 	beq.w	8021200 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80210f6:	f103 0a01 	add.w	sl, r3, #1
 80210fa:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80210fe:	f01a 0f01 	tst.w	sl, #1
 8021102:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021106:	bf0c      	ite	eq
 8021108:	f001 010f 	andeq.w	r1, r1, #15
 802110c:	1109      	asrne	r1, r1, #4
 802110e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021112:	b2c9      	uxtb	r1, r1
 8021114:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021116:	b1df      	cbz	r7, 8021150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021118:	444b      	add	r3, r9
 802111a:	0859      	lsrs	r1, r3, #1
 802111c:	f013 0f01 	tst.w	r3, #1
 8021120:	f103 0301 	add.w	r3, r3, #1
 8021124:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021128:	bf0c      	ite	eq
 802112a:	f001 010f 	andeq.w	r1, r1, #15
 802112e:	1109      	asrne	r1, r1, #4
 8021130:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021134:	b2c9      	uxtb	r1, r1
 8021136:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021138:	0859      	lsrs	r1, r3, #1
 802113a:	07db      	lsls	r3, r3, #31
 802113c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021140:	bf54      	ite	pl
 8021142:	f001 010f 	andpl.w	r1, r1, #15
 8021146:	1109      	asrmi	r1, r1, #4
 8021148:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802114c:	b2c9      	uxtb	r1, r1
 802114e:	9110      	str	r1, [sp, #64]	@ 0x40
 8021150:	b280      	uxth	r0, r0
 8021152:	b2bf      	uxth	r7, r7
 8021154:	fb00 f307 	mul.w	r3, r0, r7
 8021158:	0100      	lsls	r0, r0, #4
 802115a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802115e:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8021162:	1ac0      	subs	r0, r0, r3
 8021164:	b2bf      	uxth	r7, r7
 8021166:	b280      	uxth	r0, r0
 8021168:	1bc9      	subs	r1, r1, r7
 802116a:	fa1f fa81 	uxth.w	sl, r1
 802116e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021170:	4348      	muls	r0, r1
 8021172:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021174:	fb02 020a 	mla	r2, r2, sl, r0
 8021178:	fb07 2701 	mla	r7, r7, r1, r2
 802117c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802117e:	fb03 7302 	mla	r3, r3, r2, r7
 8021182:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021186:	b393      	cbz	r3, 80211ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021188:	4a2a      	ldr	r2, [pc, #168]	@ (8021234 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802118a:	2bff      	cmp	r3, #255	@ 0xff
 802118c:	6811      	ldr	r1, [r2, #0]
 802118e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8021192:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8021196:	b2c9      	uxtb	r1, r1
 8021198:	d042      	beq.n	8021220 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802119a:	b298      	uxth	r0, r3
 802119c:	43db      	mvns	r3, r3
 802119e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80211a2:	fb11 f100 	smulbb	r1, r1, r0
 80211a6:	b2db      	uxtb	r3, r3
 80211a8:	fb17 f700 	smulbb	r7, r7, r0
 80211ac:	fb02 1103 	mla	r1, r2, r3, r1
 80211b0:	fb1a f000 	smulbb	r0, sl, r0
 80211b4:	b289      	uxth	r1, r1
 80211b6:	1c4a      	adds	r2, r1, #1
 80211b8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80211bc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80211c0:	fb02 7703 	mla	r7, r2, r3, r7
 80211c4:	1209      	asrs	r1, r1, #8
 80211c6:	b2bf      	uxth	r7, r7
 80211c8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80211cc:	1c7a      	adds	r2, r7, #1
 80211ce:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80211d2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80211d6:	fb02 0303 	mla	r3, r2, r3, r0
 80211da:	123f      	asrs	r7, r7, #8
 80211dc:	b29b      	uxth	r3, r3
 80211de:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80211e2:	1c5a      	adds	r2, r3, #1
 80211e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80211e8:	121b      	asrs	r3, r3, #8
 80211ea:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80211ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80211f0:	f10c 0c03 	add.w	ip, ip, #3
 80211f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80211f8:	441d      	add	r5, r3
 80211fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80211fc:	441e      	add	r6, r3
 80211fe:	e6e7      	b.n	8020fd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8021200:	2f00      	cmp	r7, #0
 8021202:	d0a5      	beq.n	8021150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021204:	444b      	add	r3, r9
 8021206:	0859      	lsrs	r1, r3, #1
 8021208:	07db      	lsls	r3, r3, #31
 802120a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802120e:	bf54      	ite	pl
 8021210:	f001 010f 	andpl.w	r1, r1, #15
 8021214:	1109      	asrmi	r1, r1, #4
 8021216:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802121a:	b2c9      	uxtb	r1, r1
 802121c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802121e:	e797      	b.n	8021150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021220:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021224:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021228:	f80c ac01 	strb.w	sl, [ip, #-1]
 802122c:	e7df      	b.n	80211ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802122e:	b013      	add	sp, #76	@ 0x4c
 8021230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021234:	2402dabc 	.word	0x2402dabc

08021238 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8021238:	b530      	push	{r4, r5, lr}
 802123a:	b29d      	uxth	r5, r3
 802123c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8021240:	780c      	ldrb	r4, [r1, #0]
 8021242:	b298      	uxth	r0, r3
 8021244:	7813      	ldrb	r3, [r2, #0]
 8021246:	fb14 f405 	smulbb	r4, r4, r5
 802124a:	fb13 f300 	smulbb	r3, r3, r0
 802124e:	441c      	add	r4, r3
 8021250:	b2a4      	uxth	r4, r4
 8021252:	1c63      	adds	r3, r4, #1
 8021254:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021258:	7853      	ldrb	r3, [r2, #1]
 802125a:	fb13 f300 	smulbb	r3, r3, r0
 802125e:	1224      	asrs	r4, r4, #8
 8021260:	7014      	strb	r4, [r2, #0]
 8021262:	784c      	ldrb	r4, [r1, #1]
 8021264:	fb14 f405 	smulbb	r4, r4, r5
 8021268:	441c      	add	r4, r3
 802126a:	b2a4      	uxth	r4, r4
 802126c:	1c63      	adds	r3, r4, #1
 802126e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021272:	1224      	asrs	r4, r4, #8
 8021274:	7054      	strb	r4, [r2, #1]
 8021276:	788b      	ldrb	r3, [r1, #2]
 8021278:	7891      	ldrb	r1, [r2, #2]
 802127a:	fb13 f305 	smulbb	r3, r3, r5
 802127e:	fb11 f000 	smulbb	r0, r1, r0
 8021282:	4403      	add	r3, r0
 8021284:	b29b      	uxth	r3, r3
 8021286:	1c59      	adds	r1, r3, #1
 8021288:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802128c:	121b      	asrs	r3, r3, #8
 802128e:	7093      	strb	r3, [r2, #2]
 8021290:	bd30      	pop	{r4, r5, pc}
	...

08021294 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021298:	461c      	mov	r4, r3
 802129a:	b08b      	sub	sp, #44	@ 0x2c
 802129c:	460e      	mov	r6, r1
 802129e:	4615      	mov	r5, r2
 80212a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80212a2:	4682      	mov	sl, r0
 80212a4:	6861      	ldr	r1, [r4, #4]
 80212a6:	aa06      	add	r2, sp, #24
 80212a8:	6820      	ldr	r0, [r4, #0]
 80212aa:	2702      	movs	r7, #2
 80212ac:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80212b0:	3504      	adds	r5, #4
 80212b2:	c203      	stmia	r2!, {r0, r1}
 80212b4:	6818      	ldr	r0, [r3, #0]
 80212b6:	aa08      	add	r2, sp, #32
 80212b8:	6859      	ldr	r1, [r3, #4]
 80212ba:	c203      	stmia	r2!, {r0, r1}
 80212bc:	a806      	add	r0, sp, #24
 80212be:	f7f3 f86d 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80212c2:	4621      	mov	r1, r4
 80212c4:	a808      	add	r0, sp, #32
 80212c6:	f7f3 f891 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80212ca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80212ce:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 80212d2:	f002 0301 	and.w	r3, r2, #1
 80212d6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80212da:	9302      	str	r3, [sp, #8]
 80212dc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80212e0:	f003 0101 	and.w	r1, r3, #1
 80212e4:	9101      	str	r1, [sp, #4]
 80212e6:	9801      	ldr	r0, [sp, #4]
 80212e8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80212ec:	4403      	add	r3, r0
 80212ee:	fb01 2303 	mla	r3, r1, r3, r2
 80212f2:	fb93 f3f7 	sdiv	r3, r3, r7
 80212f6:	441e      	add	r6, r3
 80212f8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80212fc:	441a      	add	r2, r3
 80212fe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8021302:	4419      	add	r1, r3
 8021304:	4b70      	ldr	r3, [pc, #448]	@ (80214c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8021306:	f8ad 2020 	strh.w	r2, [sp, #32]
 802130a:	6818      	ldr	r0, [r3, #0]
 802130c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8021310:	6803      	ldr	r3, [r0, #0]
 8021312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021314:	4798      	blx	r3
 8021316:	4a6d      	ldr	r2, [pc, #436]	@ (80214cc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8021318:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802131c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021320:	8813      	ldrh	r3, [r2, #0]
 8021322:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8021326:	fb03 1404 	mla	r4, r3, r4, r1
 802132a:	4611      	mov	r1, r2
 802132c:	fb0b f303 	mul.w	r3, fp, r3
 8021330:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021338:	4404      	add	r4, r0
 802133a:	4423      	add	r3, r4
 802133c:	d073      	beq.n	8021426 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802133e:	9705      	str	r7, [sp, #20]
 8021340:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021344:	9b03      	ldr	r3, [sp, #12]
 8021346:	429c      	cmp	r4, r3
 8021348:	f080 80b5 	bcs.w	80214b6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802134c:	9b02      	ldr	r3, [sp, #8]
 802134e:	b35b      	cbz	r3, 80213a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8021350:	7831      	ldrb	r1, [r6, #0]
 8021352:	4622      	mov	r2, r4
 8021354:	1c77      	adds	r7, r6, #1
 8021356:	3403      	adds	r4, #3
 8021358:	f001 010f 	and.w	r1, r1, #15
 802135c:	f108 3bff 	add.w	fp, r8, #4294967295
 8021360:	464b      	mov	r3, r9
 8021362:	4650      	mov	r0, sl
 8021364:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021368:	4429      	add	r1, r5
 802136a:	f7ff ff65 	bl	8021238 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802136e:	f1bb 0f01 	cmp.w	fp, #1
 8021372:	dd1c      	ble.n	80213ae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021374:	7839      	ldrb	r1, [r7, #0]
 8021376:	4622      	mov	r2, r4
 8021378:	464b      	mov	r3, r9
 802137a:	4650      	mov	r0, sl
 802137c:	0909      	lsrs	r1, r1, #4
 802137e:	f1ab 0b02 	sub.w	fp, fp, #2
 8021382:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021386:	4429      	add	r1, r5
 8021388:	f7ff ff56 	bl	8021238 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802138c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021390:	1ce2      	adds	r2, r4, #3
 8021392:	464b      	mov	r3, r9
 8021394:	f001 010f 	and.w	r1, r1, #15
 8021398:	4650      	mov	r0, sl
 802139a:	3406      	adds	r4, #6
 802139c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213a0:	4429      	add	r1, r5
 80213a2:	f7ff ff49 	bl	8021238 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80213a6:	e7e2      	b.n	802136e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80213a8:	4637      	mov	r7, r6
 80213aa:	46c3      	mov	fp, r8
 80213ac:	e7df      	b.n	802136e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80213ae:	d10a      	bne.n	80213c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80213b0:	7839      	ldrb	r1, [r7, #0]
 80213b2:	4622      	mov	r2, r4
 80213b4:	3403      	adds	r4, #3
 80213b6:	464b      	mov	r3, r9
 80213b8:	0909      	lsrs	r1, r1, #4
 80213ba:	4650      	mov	r0, sl
 80213bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213c0:	4429      	add	r1, r5
 80213c2:	f7ff ff39 	bl	8021238 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80213c6:	9b04      	ldr	r3, [sp, #16]
 80213c8:	9a01      	ldr	r2, [sp, #4]
 80213ca:	881b      	ldrh	r3, [r3, #0]
 80213cc:	eba3 0308 	sub.w	r3, r3, r8
 80213d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213d4:	441c      	add	r4, r3
 80213d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80213da:	4413      	add	r3, r2
 80213dc:	9a05      	ldr	r2, [sp, #20]
 80213de:	fb93 f3f2 	sdiv	r3, r3, r2
 80213e2:	441e      	add	r6, r3
 80213e4:	e7ae      	b.n	8021344 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80213e6:	4632      	mov	r2, r6
 80213e8:	46c4      	mov	ip, r8
 80213ea:	e037      	b.n	802145c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80213ec:	d10e      	bne.n	802140c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80213ee:	7812      	ldrb	r2, [r2, #0]
 80213f0:	3003      	adds	r0, #3
 80213f2:	0912      	lsrs	r2, r2, #4
 80213f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80213f8:	18ac      	adds	r4, r5, r2
 80213fa:	5caa      	ldrb	r2, [r5, r2]
 80213fc:	f800 2c03 	strb.w	r2, [r0, #-3]
 8021400:	7862      	ldrb	r2, [r4, #1]
 8021402:	f800 2c02 	strb.w	r2, [r0, #-2]
 8021406:	78a2      	ldrb	r2, [r4, #2]
 8021408:	f800 2c01 	strb.w	r2, [r0, #-1]
 802140c:	880c      	ldrh	r4, [r1, #0]
 802140e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021412:	eba4 0408 	sub.w	r4, r4, r8
 8021416:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802141a:	4404      	add	r4, r0
 802141c:	9801      	ldr	r0, [sp, #4]
 802141e:	4402      	add	r2, r0
 8021420:	fb92 f2f7 	sdiv	r2, r2, r7
 8021424:	4416      	add	r6, r2
 8021426:	429c      	cmp	r4, r3
 8021428:	d245      	bcs.n	80214b6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802142a:	9a02      	ldr	r2, [sp, #8]
 802142c:	2a00      	cmp	r2, #0
 802142e:	d0da      	beq.n	80213e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8021430:	7830      	ldrb	r0, [r6, #0]
 8021432:	1c72      	adds	r2, r6, #1
 8021434:	3403      	adds	r4, #3
 8021436:	f000 000f 	and.w	r0, r0, #15
 802143a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802143e:	eb05 0c00 	add.w	ip, r5, r0
 8021442:	5c28      	ldrb	r0, [r5, r0]
 8021444:	f804 0c03 	strb.w	r0, [r4, #-3]
 8021448:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802144c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8021450:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8021454:	f108 3cff 	add.w	ip, r8, #4294967295
 8021458:	f804 0c01 	strb.w	r0, [r4, #-1]
 802145c:	f1bc 0f01 	cmp.w	ip, #1
 8021460:	4620      	mov	r0, r4
 8021462:	f104 0406 	add.w	r4, r4, #6
 8021466:	ddc1      	ble.n	80213ec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8021468:	7810      	ldrb	r0, [r2, #0]
 802146a:	f1ac 0c02 	sub.w	ip, ip, #2
 802146e:	0900      	lsrs	r0, r0, #4
 8021470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021474:	eb05 0e00 	add.w	lr, r5, r0
 8021478:	5c28      	ldrb	r0, [r5, r0]
 802147a:	f804 0c06 	strb.w	r0, [r4, #-6]
 802147e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021482:	f804 0c05 	strb.w	r0, [r4, #-5]
 8021486:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802148a:	f804 0c04 	strb.w	r0, [r4, #-4]
 802148e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8021492:	f000 000f 	and.w	r0, r0, #15
 8021496:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802149a:	eb05 0e00 	add.w	lr, r5, r0
 802149e:	5c28      	ldrb	r0, [r5, r0]
 80214a0:	f804 0c03 	strb.w	r0, [r4, #-3]
 80214a4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80214a8:	f804 0c02 	strb.w	r0, [r4, #-2]
 80214ac:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80214b0:	f804 0c01 	strb.w	r0, [r4, #-1]
 80214b4:	e7d2      	b.n	802145c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80214b6:	4b04      	ldr	r3, [pc, #16]	@ (80214c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80214b8:	6818      	ldr	r0, [r3, #0]
 80214ba:	6803      	ldr	r3, [r0, #0]
 80214bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214be:	4798      	blx	r3
 80214c0:	b00b      	add	sp, #44	@ 0x2c
 80214c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214c6:	bf00      	nop
 80214c8:	2402daac 	.word	0x2402daac
 80214cc:	2402daa6 	.word	0x2402daa6

080214d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 80214d0:	b530      	push	{r4, r5, lr}
 80214d2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80214d6:	780d      	ldrb	r5, [r1, #0]
 80214d8:	28ff      	cmp	r0, #255	@ 0xff
 80214da:	d107      	bne.n	80214ec <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80214dc:	2bff      	cmp	r3, #255	@ 0xff
 80214de:	d105      	bne.n	80214ec <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80214e0:	7015      	strb	r5, [r2, #0]
 80214e2:	784b      	ldrb	r3, [r1, #1]
 80214e4:	7053      	strb	r3, [r2, #1]
 80214e6:	788b      	ldrb	r3, [r1, #2]
 80214e8:	7093      	strb	r3, [r2, #2]
 80214ea:	bd30      	pop	{r4, r5, pc}
 80214ec:	fb10 f003 	smulbb	r0, r0, r3
 80214f0:	b283      	uxth	r3, r0
 80214f2:	1c58      	adds	r0, r3, #1
 80214f4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80214f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80214fc:	b284      	uxth	r4, r0
 80214fe:	43c0      	mvns	r0, r0
 8021500:	fb15 f504 	smulbb	r5, r5, r4
 8021504:	b2c3      	uxtb	r3, r0
 8021506:	7810      	ldrb	r0, [r2, #0]
 8021508:	fb00 5003 	mla	r0, r0, r3, r5
 802150c:	b280      	uxth	r0, r0
 802150e:	1c45      	adds	r5, r0, #1
 8021510:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021514:	7855      	ldrb	r5, [r2, #1]
 8021516:	fb15 f503 	smulbb	r5, r5, r3
 802151a:	1200      	asrs	r0, r0, #8
 802151c:	7010      	strb	r0, [r2, #0]
 802151e:	7848      	ldrb	r0, [r1, #1]
 8021520:	fb00 5004 	mla	r0, r0, r4, r5
 8021524:	b280      	uxth	r0, r0
 8021526:	1c45      	adds	r5, r0, #1
 8021528:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802152c:	1200      	asrs	r0, r0, #8
 802152e:	7050      	strb	r0, [r2, #1]
 8021530:	7888      	ldrb	r0, [r1, #2]
 8021532:	7891      	ldrb	r1, [r2, #2]
 8021534:	fb11 f303 	smulbb	r3, r1, r3
 8021538:	fb00 3304 	mla	r3, r0, r4, r3
 802153c:	b29b      	uxth	r3, r3
 802153e:	1c59      	adds	r1, r3, #1
 8021540:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021544:	121b      	asrs	r3, r3, #8
 8021546:	e7cf      	b.n	80214e8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08021548 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802154c:	461d      	mov	r5, r3
 802154e:	b08f      	sub	sp, #60	@ 0x3c
 8021550:	460c      	mov	r4, r1
 8021552:	4616      	mov	r6, r2
 8021554:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021556:	4680      	mov	r8, r0
 8021558:	6869      	ldr	r1, [r5, #4]
 802155a:	aa0a      	add	r2, sp, #40	@ 0x28
 802155c:	6828      	ldr	r0, [r5, #0]
 802155e:	3604      	adds	r6, #4
 8021560:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8021564:	4f57      	ldr	r7, [pc, #348]	@ (80216c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8021566:	c203      	stmia	r2!, {r0, r1}
 8021568:	6818      	ldr	r0, [r3, #0]
 802156a:	aa0c      	add	r2, sp, #48	@ 0x30
 802156c:	6859      	ldr	r1, [r3, #4]
 802156e:	c203      	stmia	r2!, {r0, r1}
 8021570:	a80a      	add	r0, sp, #40	@ 0x28
 8021572:	f7f2 ff13 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021576:	4629      	mov	r1, r5
 8021578:	a80c      	add	r0, sp, #48	@ 0x30
 802157a:	2502      	movs	r5, #2
 802157c:	f7f2 ff36 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021580:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021584:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8021588:	f002 0301 	and.w	r3, r2, #1
 802158c:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8021590:	9304      	str	r3, [sp, #16]
 8021592:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021596:	f003 0101 	and.w	r1, r3, #1
 802159a:	9103      	str	r1, [sp, #12]
 802159c:	9803      	ldr	r0, [sp, #12]
 802159e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80215a2:	4403      	add	r3, r0
 80215a4:	6838      	ldr	r0, [r7, #0]
 80215a6:	fb01 2303 	mla	r3, r1, r3, r2
 80215aa:	fb93 f3f5 	sdiv	r3, r3, r5
 80215ae:	18e5      	adds	r5, r4, r3
 80215b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80215b4:	441a      	add	r2, r3
 80215b6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80215ba:	4419      	add	r1, r3
 80215bc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80215c0:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80215c4:	6803      	ldr	r3, [r0, #0]
 80215c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80215c8:	4798      	blx	r3
 80215ca:	4a3f      	ldr	r2, [pc, #252]	@ (80216c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80215cc:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80215d0:	8813      	ldrh	r3, [r2, #0]
 80215d2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80215d6:	9207      	str	r2, [sp, #28]
 80215d8:	fb03 1404 	mla	r4, r3, r4, r1
 80215dc:	fb0a f303 	mul.w	r3, sl, r3
 80215e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80215e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80215e8:	4404      	add	r4, r0
 80215ea:	18e3      	adds	r3, r4, r3
 80215ec:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80215f0:	9b05      	ldr	r3, [sp, #20]
 80215f2:	429c      	cmp	r4, r3
 80215f4:	d25d      	bcs.n	80216b2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80215f6:	9b04      	ldr	r3, [sp, #16]
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d037      	beq.n	802166c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80215fc:	782b      	ldrb	r3, [r5, #0]
 80215fe:	1c6f      	adds	r7, r5, #1
 8021600:	f003 030f 	and.w	r3, r3, #15
 8021604:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021608:	9309      	str	r3, [sp, #36]	@ 0x24
 802160a:	0e1b      	lsrs	r3, r3, #24
 802160c:	d006      	beq.n	802161c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802160e:	9300      	str	r3, [sp, #0]
 8021610:	4622      	mov	r2, r4
 8021612:	464b      	mov	r3, r9
 8021614:	a909      	add	r1, sp, #36	@ 0x24
 8021616:	4640      	mov	r0, r8
 8021618:	f7ff ff5a 	bl	80214d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802161c:	3403      	adds	r4, #3
 802161e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8021622:	f1ba 0f01 	cmp.w	sl, #1
 8021626:	dd24      	ble.n	8021672 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021628:	783b      	ldrb	r3, [r7, #0]
 802162a:	091b      	lsrs	r3, r3, #4
 802162c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021630:	9308      	str	r3, [sp, #32]
 8021632:	0e1b      	lsrs	r3, r3, #24
 8021634:	d006      	beq.n	8021644 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021636:	9300      	str	r3, [sp, #0]
 8021638:	4622      	mov	r2, r4
 802163a:	464b      	mov	r3, r9
 802163c:	a908      	add	r1, sp, #32
 802163e:	4640      	mov	r0, r8
 8021640:	f7ff ff46 	bl	80214d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021644:	f817 3b01 	ldrb.w	r3, [r7], #1
 8021648:	f003 030f 	and.w	r3, r3, #15
 802164c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021650:	9309      	str	r3, [sp, #36]	@ 0x24
 8021652:	0e1b      	lsrs	r3, r3, #24
 8021654:	d006      	beq.n	8021664 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021656:	9300      	str	r3, [sp, #0]
 8021658:	1ce2      	adds	r2, r4, #3
 802165a:	464b      	mov	r3, r9
 802165c:	a909      	add	r1, sp, #36	@ 0x24
 802165e:	4640      	mov	r0, r8
 8021660:	f7ff ff36 	bl	80214d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021664:	3406      	adds	r4, #6
 8021666:	f1aa 0a02 	sub.w	sl, sl, #2
 802166a:	e7da      	b.n	8021622 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802166c:	462f      	mov	r7, r5
 802166e:	46da      	mov	sl, fp
 8021670:	e7d7      	b.n	8021622 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021672:	d10e      	bne.n	8021692 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021674:	783b      	ldrb	r3, [r7, #0]
 8021676:	091b      	lsrs	r3, r3, #4
 8021678:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802167c:	9309      	str	r3, [sp, #36]	@ 0x24
 802167e:	0e1b      	lsrs	r3, r3, #24
 8021680:	d006      	beq.n	8021690 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8021682:	9300      	str	r3, [sp, #0]
 8021684:	4622      	mov	r2, r4
 8021686:	464b      	mov	r3, r9
 8021688:	a909      	add	r1, sp, #36	@ 0x24
 802168a:	4640      	mov	r0, r8
 802168c:	f7ff ff20 	bl	80214d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021690:	3403      	adds	r4, #3
 8021692:	9b07      	ldr	r3, [sp, #28]
 8021694:	9a03      	ldr	r2, [sp, #12]
 8021696:	881b      	ldrh	r3, [r3, #0]
 8021698:	eba3 030b 	sub.w	r3, r3, fp
 802169c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216a0:	441c      	add	r4, r3
 80216a2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80216a6:	4413      	add	r3, r2
 80216a8:	2202      	movs	r2, #2
 80216aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80216ae:	441d      	add	r5, r3
 80216b0:	e79e      	b.n	80215f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80216b2:	9b06      	ldr	r3, [sp, #24]
 80216b4:	6818      	ldr	r0, [r3, #0]
 80216b6:	6803      	ldr	r3, [r0, #0]
 80216b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80216ba:	4798      	blx	r3
 80216bc:	b00f      	add	sp, #60	@ 0x3c
 80216be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216c2:	bf00      	nop
 80216c4:	2402daac 	.word	0x2402daac
 80216c8:	2402daa6 	.word	0x2402daa6

080216cc <CRC_Lock>:
 80216cc:	4a20      	ldr	r2, [pc, #128]	@ (8021750 <CRC_Lock+0x84>)
 80216ce:	b530      	push	{r4, r5, lr}
 80216d0:	6813      	ldr	r3, [r2, #0]
 80216d2:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 80216d6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80216da:	f023 0301 	bic.w	r3, r3, #1
 80216de:	6013      	str	r3, [r2, #0]
 80216e0:	4b1c      	ldr	r3, [pc, #112]	@ (8021754 <CRC_Lock+0x88>)
 80216e2:	681a      	ldr	r2, [r3, #0]
 80216e4:	4022      	ands	r2, r4
 80216e6:	42aa      	cmp	r2, r5
 80216e8:	d005      	beq.n	80216f6 <CRC_Lock+0x2a>
 80216ea:	681b      	ldr	r3, [r3, #0]
 80216ec:	f24c 2270 	movw	r2, #49776	@ 0xc270
 80216f0:	4023      	ands	r3, r4
 80216f2:	4293      	cmp	r3, r2
 80216f4:	d124      	bne.n	8021740 <CRC_Lock+0x74>
 80216f6:	4b18      	ldr	r3, [pc, #96]	@ (8021758 <CRC_Lock+0x8c>)
 80216f8:	681b      	ldr	r3, [r3, #0]
 80216fa:	bb0b      	cbnz	r3, 8021740 <CRC_Lock+0x74>
 80216fc:	4b17      	ldr	r3, [pc, #92]	@ (802175c <CRC_Lock+0x90>)
 80216fe:	681a      	ldr	r2, [r3, #0]
 8021700:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021704:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8021708:	d00d      	beq.n	8021726 <CRC_Lock+0x5a>
 802170a:	681a      	ldr	r2, [r3, #0]
 802170c:	f240 4483 	movw	r4, #1155	@ 0x483
 8021710:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021714:	42a2      	cmp	r2, r4
 8021716:	d006      	beq.n	8021726 <CRC_Lock+0x5a>
 8021718:	681b      	ldr	r3, [r3, #0]
 802171a:	f240 4285 	movw	r2, #1157	@ 0x485
 802171e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021722:	4293      	cmp	r3, r2
 8021724:	d10c      	bne.n	8021740 <CRC_Lock+0x74>
 8021726:	4b0e      	ldr	r3, [pc, #56]	@ (8021760 <CRC_Lock+0x94>)
 8021728:	2201      	movs	r2, #1
 802172a:	601a      	str	r2, [r3, #0]
 802172c:	681a      	ldr	r2, [r3, #0]
 802172e:	2a00      	cmp	r2, #0
 8021730:	d1fc      	bne.n	802172c <CRC_Lock+0x60>
 8021732:	4b0c      	ldr	r3, [pc, #48]	@ (8021764 <CRC_Lock+0x98>)
 8021734:	6018      	str	r0, [r3, #0]
 8021736:	6818      	ldr	r0, [r3, #0]
 8021738:	1a43      	subs	r3, r0, r1
 802173a:	4258      	negs	r0, r3
 802173c:	4158      	adcs	r0, r3
 802173e:	bd30      	pop	{r4, r5, pc}
 8021740:	4b09      	ldr	r3, [pc, #36]	@ (8021768 <CRC_Lock+0x9c>)
 8021742:	2201      	movs	r2, #1
 8021744:	601a      	str	r2, [r3, #0]
 8021746:	681a      	ldr	r2, [r3, #0]
 8021748:	2a00      	cmp	r2, #0
 802174a:	d1fc      	bne.n	8021746 <CRC_Lock+0x7a>
 802174c:	4b07      	ldr	r3, [pc, #28]	@ (802176c <CRC_Lock+0xa0>)
 802174e:	e7f1      	b.n	8021734 <CRC_Lock+0x68>
 8021750:	e0002000 	.word	0xe0002000
 8021754:	e000ed00 	.word	0xe000ed00
 8021758:	e0042000 	.word	0xe0042000
 802175c:	5c001000 	.word	0x5c001000
 8021760:	58024c08 	.word	0x58024c08
 8021764:	58024c00 	.word	0x58024c00
 8021768:	40023008 	.word	0x40023008
 802176c:	40023000 	.word	0x40023000

08021770 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021770:	6101      	str	r1, [r0, #16]
 8021772:	4770      	bx	lr

08021774 <_ZN8touchgfx8Gestures4tickEv>:
 8021774:	7b83      	ldrb	r3, [r0, #14]
 8021776:	b14b      	cbz	r3, 802178c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021778:	8903      	ldrh	r3, [r0, #8]
 802177a:	3301      	adds	r3, #1
 802177c:	b29b      	uxth	r3, r3
 802177e:	2b07      	cmp	r3, #7
 8021780:	8103      	strh	r3, [r0, #8]
 8021782:	bf81      	itttt	hi
 8021784:	2300      	movhi	r3, #0
 8021786:	8143      	strhhi	r3, [r0, #10]
 8021788:	8183      	strhhi	r3, [r0, #12]
 802178a:	7383      	strbhi	r3, [r0, #14]
 802178c:	4770      	bx	lr
	...

08021790 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021794:	4698      	mov	r8, r3
 8021796:	8883      	ldrh	r3, [r0, #4]
 8021798:	4604      	mov	r4, r0
 802179a:	4617      	mov	r7, r2
 802179c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80217a0:	eba8 0303 	sub.w	r3, r8, r3
 80217a4:	4a19      	ldr	r2, [pc, #100]	@ (802180c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80217a6:	460e      	mov	r6, r1
 80217a8:	b21b      	sxth	r3, r3
 80217aa:	88c1      	ldrh	r1, [r0, #6]
 80217ac:	9200      	str	r2, [sp, #0]
 80217ae:	2000      	movs	r0, #0
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	8aa2      	ldrh	r2, [r4, #20]
 80217b4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80217b8:	bfb8      	it	lt
 80217ba:	425b      	neglt	r3, r3
 80217bc:	f88d 0004 	strb.w	r0, [sp, #4]
 80217c0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80217c4:	b21b      	sxth	r3, r3
 80217c6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80217ca:	f8ad 500c 	strh.w	r5, [sp, #12]
 80217ce:	4293      	cmp	r3, r2
 80217d0:	dc07      	bgt.n	80217e2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80217d2:	1a69      	subs	r1, r5, r1
 80217d4:	b209      	sxth	r1, r1
 80217d6:	2900      	cmp	r1, #0
 80217d8:	bfb8      	it	lt
 80217da:	4249      	neglt	r1, r1
 80217dc:	b209      	sxth	r1, r1
 80217de:	428a      	cmp	r2, r1
 80217e0:	da10      	bge.n	8021804 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80217e2:	6920      	ldr	r0, [r4, #16]
 80217e4:	4669      	mov	r1, sp
 80217e6:	eba8 0606 	sub.w	r6, r8, r6
 80217ea:	1bef      	subs	r7, r5, r7
 80217ec:	6803      	ldr	r3, [r0, #0]
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	4798      	blx	r3
 80217f2:	2300      	movs	r3, #0
 80217f4:	2001      	movs	r0, #1
 80217f6:	8166      	strh	r6, [r4, #10]
 80217f8:	8123      	strh	r3, [r4, #8]
 80217fa:	81a7      	strh	r7, [r4, #12]
 80217fc:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021800:	80e5      	strh	r5, [r4, #6]
 8021802:	73a0      	strb	r0, [r4, #14]
 8021804:	b004      	add	sp, #16
 8021806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802180a:	bf00      	nop
 802180c:	08025b1c 	.word	0x08025b1c

08021810 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021812:	461e      	mov	r6, r3
 8021814:	1e4b      	subs	r3, r1, #1
 8021816:	b085      	sub	sp, #20
 8021818:	4604      	mov	r4, r0
 802181a:	2b01      	cmp	r3, #1
 802181c:	460d      	mov	r5, r1
 802181e:	4617      	mov	r7, r2
 8021820:	d84b      	bhi.n	80218ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021822:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021826:	1cd3      	adds	r3, r2, #3
 8021828:	b29b      	uxth	r3, r3
 802182a:	2b06      	cmp	r3, #6
 802182c:	d916      	bls.n	802185c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802182e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80218d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021832:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021836:	f8cd c004 	str.w	ip, [sp, #4]
 802183a:	f04f 0c00 	mov.w	ip, #0
 802183e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021842:	6900      	ldr	r0, [r0, #16]
 8021844:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021848:	a901      	add	r1, sp, #4
 802184a:	f88d c008 	strb.w	ip, [sp, #8]
 802184e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021852:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021856:	6803      	ldr	r3, [r0, #0]
 8021858:	689b      	ldr	r3, [r3, #8]
 802185a:	4798      	blx	r3
 802185c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021860:	1cd3      	adds	r3, r2, #3
 8021862:	b29b      	uxth	r3, r3
 8021864:	2b06      	cmp	r3, #6
 8021866:	d916      	bls.n	8021896 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021868:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80218d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802186c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021870:	f8cd c004 	str.w	ip, [sp, #4]
 8021874:	f04f 0c01 	mov.w	ip, #1
 8021878:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802187c:	6920      	ldr	r0, [r4, #16]
 802187e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021882:	a901      	add	r1, sp, #4
 8021884:	f88d c008 	strb.w	ip, [sp, #8]
 8021888:	f8ad 200a 	strh.w	r2, [sp, #10]
 802188c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021890:	6803      	ldr	r3, [r0, #0]
 8021892:	689b      	ldr	r3, [r3, #8]
 8021894:	4798      	blx	r3
 8021896:	4b0d      	ldr	r3, [pc, #52]	@ (80218cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021898:	a901      	add	r1, sp, #4
 802189a:	6920      	ldr	r0, [r4, #16]
 802189c:	9301      	str	r3, [sp, #4]
 802189e:	2300      	movs	r3, #0
 80218a0:	f88d 5008 	strb.w	r5, [sp, #8]
 80218a4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80218a8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80218ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80218b0:	6803      	ldr	r3, [r0, #0]
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	4798      	blx	r3
 80218b6:	b005      	add	sp, #20
 80218b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218ba:	2900      	cmp	r1, #0
 80218bc:	d1eb      	bne.n	8021896 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80218be:	80a2      	strh	r2, [r4, #4]
 80218c0:	80c6      	strh	r6, [r0, #6]
 80218c2:	60a1      	str	r1, [r4, #8]
 80218c4:	81a1      	strh	r1, [r4, #12]
 80218c6:	73a1      	strb	r1, [r4, #14]
 80218c8:	e7e5      	b.n	8021896 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80218ca:	bf00      	nop
 80218cc:	08025b08 	.word	0x08025b08
 80218d0:	08025b30 	.word	0x08025b30

080218d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 80218d4:	10c9      	asrs	r1, r1, #3
 80218d6:	2900      	cmp	r1, #0
 80218d8:	bfb8      	it	lt
 80218da:	4249      	neglt	r1, r1
 80218dc:	2801      	cmp	r0, #1
 80218de:	d108      	bne.n	80218f2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80218e0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80218e4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80218e8:	4601      	mov	r1, r0
 80218ea:	dd02      	ble.n	80218f2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80218ec:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 80218f0:	4770      	bx	lr
 80218f2:	29ff      	cmp	r1, #255	@ 0xff
 80218f4:	bfa8      	it	ge
 80218f6:	21ff      	movge	r1, #255	@ 0xff
 80218f8:	4608      	mov	r0, r1
 80218fa:	4770      	bx	lr

080218fc <_ZN8touchgfx10Rasterizer6lineToEii>:
 80218fc:	b410      	push	{r4}
 80218fe:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8021902:	429c      	cmp	r4, r3
 8021904:	d803      	bhi.n	802190e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8021906:	f85d 4b04 	ldr.w	r4, [sp], #4
 802190a:	f7f1 b83d 	b.w	8012988 <_ZN8touchgfx7Outline6lineToEii>
 802190e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021912:	4770      	bx	lr

08021914 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021918:	b08b      	sub	sp, #44	@ 0x2c
 802191a:	4606      	mov	r6, r0
 802191c:	468a      	mov	sl, r1
 802191e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021922:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8021926:	9308      	str	r3, [sp, #32]
 8021928:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802192c:	9309      	str	r3, [sp, #36]	@ 0x24
 802192e:	f7f1 f996 	bl	8012c5e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8021932:	68b5      	ldr	r5, [r6, #8]
 8021934:	4604      	mov	r4, r0
 8021936:	2d00      	cmp	r5, #0
 8021938:	d044      	beq.n	80219c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802193a:	6873      	ldr	r3, [r6, #4]
 802193c:	42ab      	cmp	r3, r5
 802193e:	d33d      	bcc.n	80219bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8021940:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021944:	f04f 0800 	mov.w	r8, #0
 8021948:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802194c:	eb02 0b03 	add.w	fp, r2, r3
 8021950:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021954:	fb02 1203 	mla	r2, r2, r3, r1
 8021958:	9205      	str	r2, [sp, #20]
 802195a:	1e6a      	subs	r2, r5, #1
 802195c:	9204      	str	r2, [sp, #16]
 802195e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8021962:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021966:	454b      	cmp	r3, r9
 8021968:	463a      	mov	r2, r7
 802196a:	d008      	beq.n	802197e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802196c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8021970:	eb03 0b09 	add.w	fp, r3, r9
 8021974:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8021978:	fb03 1309 	mla	r3, r3, r9, r1
 802197c:	9305      	str	r3, [sp, #20]
 802197e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021982:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021986:	4498      	add	r8, r3
 8021988:	9b04      	ldr	r3, [sp, #16]
 802198a:	3b01      	subs	r3, #1
 802198c:	9304      	str	r3, [sp, #16]
 802198e:	9b04      	ldr	r3, [sp, #16]
 8021990:	3301      	adds	r3, #1
 8021992:	d015      	beq.n	80219c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021994:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021998:	42bb      	cmp	r3, r7
 802199a:	d117      	bne.n	80219cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802199c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80219a0:	9b04      	ldr	r3, [sp, #16]
 80219a2:	4548      	cmp	r0, r9
 80219a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80219a8:	d17d      	bne.n	8021aa6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80219aa:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80219ae:	4401      	add	r1, r0
 80219b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80219b4:	4480      	add	r8, r0
 80219b6:	e7e9      	b.n	802198c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80219b8:	461f      	mov	r7, r3
 80219ba:	e042      	b.n	8021a42 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80219bc:	2000      	movs	r0, #0
 80219be:	e002      	b.n	80219c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80219c0:	2900      	cmp	r1, #0
 80219c2:	d16d      	bne.n	8021aa0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80219c4:	2001      	movs	r0, #1
 80219c6:	b00b      	add	sp, #44	@ 0x2c
 80219c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219cc:	b379      	cbz	r1, 8021a2e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80219ce:	2f00      	cmp	r7, #0
 80219d0:	db29      	blt.n	8021a26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80219d2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80219d6:	42bb      	cmp	r3, r7
 80219d8:	dd25      	ble.n	8021a26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80219da:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80219de:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80219e2:	f7ff ff77 	bl	80218d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80219e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219e8:	fb10 f003 	smulbb	r0, r0, r3
 80219ec:	b280      	uxth	r0, r0
 80219ee:	1c41      	adds	r1, r0, #1
 80219f0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80219f4:	1209      	asrs	r1, r1, #8
 80219f6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80219fa:	d014      	beq.n	8021a26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80219fc:	b2c9      	uxtb	r1, r1
 80219fe:	9808      	ldr	r0, [sp, #32]
 8021a00:	b2ba      	uxth	r2, r7
 8021a02:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021a04:	9102      	str	r1, [sp, #8]
 8021a06:	2101      	movs	r1, #1
 8021a08:	4413      	add	r3, r2
 8021a0a:	4402      	add	r2, r0
 8021a0c:	9101      	str	r1, [sp, #4]
 8021a0e:	fa0f f18b 	sxth.w	r1, fp
 8021a12:	f8da 0000 	ldr.w	r0, [sl]
 8021a16:	b21b      	sxth	r3, r3
 8021a18:	9100      	str	r1, [sp, #0]
 8021a1a:	b212      	sxth	r2, r2
 8021a1c:	6941      	ldr	r1, [r0, #20]
 8021a1e:	4650      	mov	r0, sl
 8021a20:	460d      	mov	r5, r1
 8021a22:	9905      	ldr	r1, [sp, #20]
 8021a24:	47a8      	blx	r5
 8021a26:	9b04      	ldr	r3, [sp, #16]
 8021a28:	1c7a      	adds	r2, r7, #1
 8021a2a:	3301      	adds	r3, #1
 8021a2c:	d0ca      	beq.n	80219c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021a2e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021a32:	1abb      	subs	r3, r7, r2
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	dd31      	ble.n	8021a9c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021a38:	2a00      	cmp	r2, #0
 8021a3a:	dabd      	bge.n	80219b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8021a3c:	2f00      	cmp	r7, #0
 8021a3e:	dd2d      	ble.n	8021a9c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021a40:	2200      	movs	r2, #0
 8021a42:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021a46:	19d1      	adds	r1, r2, r7
 8021a48:	4299      	cmp	r1, r3
 8021a4a:	db02      	blt.n	8021a52 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8021a4c:	1a9f      	subs	r7, r3, r2
 8021a4e:	2f00      	cmp	r7, #0
 8021a50:	dd24      	ble.n	8021a9c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021a52:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8021a56:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021a5a:	f7ff ff3b 	bl	80218d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a60:	fb10 f003 	smulbb	r0, r0, r3
 8021a64:	b280      	uxth	r0, r0
 8021a66:	1c41      	adds	r1, r0, #1
 8021a68:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021a6c:	1209      	asrs	r1, r1, #8
 8021a6e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021a72:	d013      	beq.n	8021a9c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021a74:	b292      	uxth	r2, r2
 8021a76:	9808      	ldr	r0, [sp, #32]
 8021a78:	b2c9      	uxtb	r1, r1
 8021a7a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021a7c:	b23f      	sxth	r7, r7
 8021a7e:	4413      	add	r3, r2
 8021a80:	9102      	str	r1, [sp, #8]
 8021a82:	4402      	add	r2, r0
 8021a84:	fa0f f18b 	sxth.w	r1, fp
 8021a88:	f8da 0000 	ldr.w	r0, [sl]
 8021a8c:	b21b      	sxth	r3, r3
 8021a8e:	9100      	str	r1, [sp, #0]
 8021a90:	b212      	sxth	r2, r2
 8021a92:	9701      	str	r7, [sp, #4]
 8021a94:	9905      	ldr	r1, [sp, #20]
 8021a96:	6947      	ldr	r7, [r0, #20]
 8021a98:	4650      	mov	r0, sl
 8021a9a:	47b8      	blx	r7
 8021a9c:	464b      	mov	r3, r9
 8021a9e:	e75e      	b.n	802195e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021aa0:	2f00      	cmp	r7, #0
 8021aa2:	da96      	bge.n	80219d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8021aa4:	e78e      	b.n	80219c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021aa6:	2900      	cmp	r1, #0
 8021aa8:	d0f8      	beq.n	8021a9c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021aaa:	e790      	b.n	80219ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021aac <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8021aac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021ab0:	461e      	mov	r6, r3
 8021ab2:	4b36      	ldr	r3, [pc, #216]	@ (8021b8c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8021ab4:	2500      	movs	r5, #0
 8021ab6:	f100 0814 	add.w	r8, r0, #20
 8021aba:	4604      	mov	r4, r0
 8021abc:	4617      	mov	r7, r2
 8021abe:	e9c0 3100 	strd	r3, r1, [r0]
 8021ac2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8021ac6:	8185      	strh	r5, [r0, #12]
 8021ac8:	8103      	strh	r3, [r0, #8]
 8021aca:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021ace:	81c5      	strh	r5, [r0, #14]
 8021ad0:	7283      	strb	r3, [r0, #10]
 8021ad2:	8205      	strh	r5, [r0, #16]
 8021ad4:	8245      	strh	r5, [r0, #18]
 8021ad6:	4640      	mov	r0, r8
 8021ad8:	f7f0 fa9c 	bl	8012014 <_ZN8touchgfx7OutlineC1Ev>
 8021adc:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8021ae0:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8021ae4:	466b      	mov	r3, sp
 8021ae6:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8021aea:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8021aee:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8021af2:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8021af6:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8021afa:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8021afe:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8021b02:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8021b06:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8021b0a:	6830      	ldr	r0, [r6, #0]
 8021b0c:	6871      	ldr	r1, [r6, #4]
 8021b0e:	8872      	ldrh	r2, [r6, #2]
 8021b10:	8835      	ldrh	r5, [r6, #0]
 8021b12:	c303      	stmia	r3!, {r0, r1}
 8021b14:	887b      	ldrh	r3, [r7, #2]
 8021b16:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8021b1a:	4413      	add	r3, r2
 8021b1c:	883a      	ldrh	r2, [r7, #0]
 8021b1e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8021b22:	442a      	add	r2, r5
 8021b24:	81e3      	strh	r3, [r4, #14]
 8021b26:	8220      	strh	r0, [r4, #16]
 8021b28:	4668      	mov	r0, sp
 8021b2a:	81a2      	strh	r2, [r4, #12]
 8021b2c:	8261      	strh	r1, [r4, #18]
 8021b2e:	4639      	mov	r1, r7
 8021b30:	f7f2 fc5c 	bl	80143ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b34:	f104 000c 	add.w	r0, r4, #12
 8021b38:	f7f2 fc30 	bl	801439c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b3c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021b40:	f8bd 2000 	ldrh.w	r2, [sp]
 8021b44:	4640      	mov	r0, r8
 8021b46:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8021b4a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8021b4e:	f7f0 fa45 	bl	8011fdc <_ZN8touchgfx7Outline5resetEv>
 8021b52:	f9bd 3000 	ldrsh.w	r3, [sp]
 8021b56:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8021b5a:	4620      	mov	r0, r4
 8021b5c:	015b      	lsls	r3, r3, #5
 8021b5e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8021b60:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021b64:	015b      	lsls	r3, r3, #5
 8021b66:	6523      	str	r3, [r4, #80]	@ 0x50
 8021b68:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021b6c:	015b      	lsls	r3, r3, #5
 8021b6e:	6563      	str	r3, [r4, #84]	@ 0x54
 8021b70:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8021b74:	015b      	lsls	r3, r3, #5
 8021b76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021b78:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8021b7c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8021b80:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8021b84:	b002      	add	sp, #8
 8021b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b8a:	bf00      	nop
 8021b8c:	08025da8 	.word	0x08025da8

08021b90 <_ZN8touchgfx6Canvas5closeEv>:
 8021b90:	b538      	push	{r3, r4, r5, lr}
 8021b92:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8021b96:	4604      	mov	r4, r0
 8021b98:	b193      	cbz	r3, 8021bc0 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021b9a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8021b9e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8021ba2:	4213      	tst	r3, r2
 8021ba4:	d10c      	bne.n	8021bc0 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021ba6:	f100 0514 	add.w	r5, r0, #20
 8021baa:	b123      	cbz	r3, 8021bb6 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8021bac:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8021bb0:	4628      	mov	r0, r5
 8021bb2:	f7ff fea3 	bl	80218fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021bb6:	4628      	mov	r0, r5
 8021bb8:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8021bbc:	f7ff fe9e 	bl	80218fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021bc0:	2300      	movs	r3, #0
 8021bc2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8021bc6:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8021bca:	4298      	cmp	r0, r3
 8021bcc:	bf34      	ite	cc
 8021bce:	2000      	movcc	r0, #0
 8021bd0:	2001      	movcs	r0, #1
 8021bd2:	bd38      	pop	{r3, r4, r5, pc}

08021bd4 <_ZN8touchgfx6Canvas6renderEh>:
 8021bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021bd8:	7a85      	ldrb	r5, [r0, #10]
 8021bda:	4604      	mov	r4, r0
 8021bdc:	4369      	muls	r1, r5
 8021bde:	1c4d      	adds	r5, r1, #1
 8021be0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8021be4:	122d      	asrs	r5, r5, #8
 8021be6:	f000 8098 	beq.w	8021d1a <_ZN8touchgfx6Canvas6renderEh+0x146>
 8021bea:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	f000 8093 	beq.w	8021d1a <_ZN8touchgfx6Canvas6renderEh+0x146>
 8021bf4:	f7ff ffcc 	bl	8021b90 <_ZN8touchgfx6Canvas5closeEv>
 8021bf8:	4607      	mov	r7, r0
 8021bfa:	2800      	cmp	r0, #0
 8021bfc:	d045      	beq.n	8021c8a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8021bfe:	6860      	ldr	r0, [r4, #4]
 8021c00:	4e47      	ldr	r6, [pc, #284]	@ (8021d20 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8021c02:	6803      	ldr	r3, [r0, #0]
 8021c04:	6837      	ldr	r7, [r6, #0]
 8021c06:	689b      	ldr	r3, [r3, #8]
 8021c08:	4798      	blx	r3
 8021c0a:	4601      	mov	r1, r0
 8021c0c:	4638      	mov	r0, r7
 8021c0e:	f7ed faef 	bl	800f1f0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8021c12:	4607      	mov	r7, r0
 8021c14:	f7e1 fa72 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 8021c18:	6803      	ldr	r3, [r0, #0]
 8021c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021c1c:	4798      	blx	r3
 8021c1e:	4680      	mov	r8, r0
 8021c20:	f7e1 fa6c 	bl	80030fc <_ZN8touchgfx3HAL3lcdEv>
 8021c24:	6803      	ldr	r3, [r0, #0]
 8021c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c28:	4798      	blx	r3
 8021c2a:	280b      	cmp	r0, #11
 8021c2c:	d85a      	bhi.n	8021ce4 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8021c2e:	e8df f000 	tbb	[pc, r0]
 8021c32:	5b50      	.short	0x5b50
 8021c34:	3059066b 	.word	0x3059066b
 8021c38:	64646440 	.word	0x64646440
 8021c3c:	6464      	.short	0x6464
 8021c3e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8021c42:	2208      	movs	r2, #8
 8021c44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021c48:	fb91 f2f2 	sdiv	r2, r1, r2
 8021c4c:	fb08 2303 	mla	r3, r8, r3, r2
 8021c50:	441f      	add	r7, r3
 8021c52:	424b      	negs	r3, r1
 8021c54:	f001 0107 	and.w	r1, r1, #7
 8021c58:	f003 0307 	and.w	r3, r3, #7
 8021c5c:	bf58      	it	pl
 8021c5e:	4259      	negpl	r1, r3
 8021c60:	b2c9      	uxtb	r1, r1
 8021c62:	b2ed      	uxtb	r5, r5
 8021c64:	463a      	mov	r2, r7
 8021c66:	fa0f f388 	sxth.w	r3, r8
 8021c6a:	f104 0014 	add.w	r0, r4, #20
 8021c6e:	e9cd 1500 	strd	r1, r5, [sp]
 8021c72:	6861      	ldr	r1, [r4, #4]
 8021c74:	f7ff fe4e 	bl	8021914 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8021c78:	4607      	mov	r7, r0
 8021c7a:	6860      	ldr	r0, [r4, #4]
 8021c7c:	6803      	ldr	r3, [r0, #0]
 8021c7e:	691b      	ldr	r3, [r3, #16]
 8021c80:	4798      	blx	r3
 8021c82:	6830      	ldr	r0, [r6, #0]
 8021c84:	6803      	ldr	r3, [r0, #0]
 8021c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c88:	4798      	blx	r3
 8021c8a:	4638      	mov	r0, r7
 8021c8c:	b002      	add	sp, #8
 8021c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c92:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8021c96:	2204      	movs	r2, #4
 8021c98:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021c9c:	fb91 f2f2 	sdiv	r2, r1, r2
 8021ca0:	fb08 2303 	mla	r3, r8, r3, r2
 8021ca4:	441f      	add	r7, r3
 8021ca6:	424b      	negs	r3, r1
 8021ca8:	f001 0103 	and.w	r1, r1, #3
 8021cac:	f003 0303 	and.w	r3, r3, #3
 8021cb0:	e7d4      	b.n	8021c5c <_ZN8touchgfx6Canvas6renderEh+0x88>
 8021cb2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8021cb6:	2202      	movs	r2, #2
 8021cb8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021cbc:	2900      	cmp	r1, #0
 8021cbe:	fb91 f2f2 	sdiv	r2, r1, r2
 8021cc2:	f001 0101 	and.w	r1, r1, #1
 8021cc6:	fb08 2303 	mla	r3, r8, r3, r2
 8021cca:	bfb8      	it	lt
 8021ccc:	4249      	neglt	r1, r1
 8021cce:	441f      	add	r7, r3
 8021cd0:	e7c6      	b.n	8021c60 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8021cd2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021cda:	fb08 f303 	mul.w	r3, r8, r3
 8021cde:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021ce2:	441f      	add	r7, r3
 8021ce4:	2100      	movs	r1, #0
 8021ce6:	e7bc      	b.n	8021c62 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8021ce8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021cec:	2103      	movs	r1, #3
 8021cee:	fb08 f203 	mul.w	r2, r8, r3
 8021cf2:	89a3      	ldrh	r3, [r4, #12]
 8021cf4:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021cf8:	e7f3      	b.n	8021ce2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8021cfa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021cfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021d02:	fb08 2303 	mla	r3, r8, r3, r2
 8021d06:	e7ec      	b.n	8021ce2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8021d08:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021d10:	fb08 f303 	mul.w	r3, r8, r3
 8021d14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021d18:	e7e3      	b.n	8021ce2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8021d1a:	2701      	movs	r7, #1
 8021d1c:	e7b5      	b.n	8021c8a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8021d1e:	bf00      	nop
 8021d20:	2402daac 	.word	0x2402daac

08021d24 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021d24:	4b06      	ldr	r3, [pc, #24]	@ (8021d40 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8021d26:	b510      	push	{r4, lr}
 8021d28:	781b      	ldrb	r3, [r3, #0]
 8021d2a:	2b01      	cmp	r3, #1
 8021d2c:	d107      	bne.n	8021d3e <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8021d2e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8021d32:	680b      	ldr	r3, [r1, #0]
 8021d34:	6814      	ldr	r4, [r2, #0]
 8021d36:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8021d3a:	6013      	str	r3, [r2, #0]
 8021d3c:	600c      	str	r4, [r1, #0]
 8021d3e:	bd10      	pop	{r4, pc}
 8021d40:	2402daa4 	.word	0x2402daa4

08021d44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8021d44:	b513      	push	{r0, r1, r4, lr}
 8021d46:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8021d4a:	4604      	mov	r4, r0
 8021d4c:	e9cd 2100 	strd	r2, r1, [sp]
 8021d50:	b9a3      	cbnz	r3, 8021d7c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8021d52:	466a      	mov	r2, sp
 8021d54:	a901      	add	r1, sp, #4
 8021d56:	4620      	mov	r0, r4
 8021d58:	f7ff ffe4 	bl	8021d24 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021d5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021d5e:	9901      	ldr	r1, [sp, #4]
 8021d60:	9a00      	ldr	r2, [sp, #0]
 8021d62:	1ac9      	subs	r1, r1, r3
 8021d64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8021d66:	1ad2      	subs	r2, r2, r3
 8021d68:	9101      	str	r1, [sp, #4]
 8021d6a:	2a00      	cmp	r2, #0
 8021d6c:	9200      	str	r2, [sp, #0]
 8021d6e:	da0b      	bge.n	8021d88 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8021d70:	2301      	movs	r3, #1
 8021d72:	2900      	cmp	r1, #0
 8021d74:	da0e      	bge.n	8021d94 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8021d76:	f043 0304 	orr.w	r3, r3, #4
 8021d7a:	e013      	b.n	8021da4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8021d7c:	f7ff ff08 	bl	8021b90 <_ZN8touchgfx6Canvas5closeEv>
 8021d80:	2800      	cmp	r0, #0
 8021d82:	d1e6      	bne.n	8021d52 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8021d84:	b002      	add	sp, #8
 8021d86:	bd10      	pop	{r4, pc}
 8021d88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021d8a:	429a      	cmp	r2, r3
 8021d8c:	bfac      	ite	ge
 8021d8e:	2302      	movge	r3, #2
 8021d90:	2300      	movlt	r3, #0
 8021d92:	e7ee      	b.n	8021d72 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8021d94:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8021d96:	4281      	cmp	r1, r0
 8021d98:	bfac      	ite	ge
 8021d9a:	2008      	movge	r0, #8
 8021d9c:	2000      	movlt	r0, #0
 8021d9e:	4318      	orrs	r0, r3
 8021da0:	b2c3      	uxtb	r3, r0
 8021da2:	b158      	cbz	r0, 8021dbc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8021da4:	2200      	movs	r2, #0
 8021da6:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8021daa:	9901      	ldr	r1, [sp, #4]
 8021dac:	9a00      	ldr	r2, [sp, #0]
 8021dae:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8021db0:	6722      	str	r2, [r4, #112]	@ 0x70
 8021db2:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8021db6:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8021dba:	e7e3      	b.n	8021d84 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8021dbc:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8021dc0:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8021dc4:	4298      	cmp	r0, r3
 8021dc6:	d803      	bhi.n	8021dd0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8021dc8:	f104 0014 	add.w	r0, r4, #20
 8021dcc:	f7f0 fdf6 	bl	80129bc <_ZN8touchgfx7Outline6moveToEii>
 8021dd0:	2301      	movs	r3, #1
 8021dd2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8021dd6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8021dda:	2300      	movs	r3, #0
 8021ddc:	e7e5      	b.n	8021daa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08021dde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021de0:	ab02      	add	r3, sp, #8
 8021de2:	4604      	mov	r4, r0
 8021de4:	9101      	str	r1, [sp, #4]
 8021de6:	a901      	add	r1, sp, #4
 8021de8:	f843 2d08 	str.w	r2, [r3, #-8]!
 8021dec:	461a      	mov	r2, r3
 8021dee:	f7ff ff99 	bl	8021d24 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021df2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021df4:	9901      	ldr	r1, [sp, #4]
 8021df6:	9a00      	ldr	r2, [sp, #0]
 8021df8:	1ac9      	subs	r1, r1, r3
 8021dfa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8021dfc:	1ad2      	subs	r2, r2, r3
 8021dfe:	9101      	str	r1, [sp, #4]
 8021e00:	2a00      	cmp	r2, #0
 8021e02:	9200      	str	r2, [sp, #0]
 8021e04:	db1c      	blt.n	8021e40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8021e06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021e08:	429a      	cmp	r2, r3
 8021e0a:	bfac      	ite	ge
 8021e0c:	2002      	movge	r0, #2
 8021e0e:	2000      	movlt	r0, #0
 8021e10:	2900      	cmp	r1, #0
 8021e12:	db17      	blt.n	8021e44 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8021e14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8021e16:	4299      	cmp	r1, r3
 8021e18:	bfac      	ite	ge
 8021e1a:	2308      	movge	r3, #8
 8021e1c:	2300      	movlt	r3, #0
 8021e1e:	4303      	orrs	r3, r0
 8021e20:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8021e24:	b2dd      	uxtb	r5, r3
 8021e26:	b978      	cbnz	r0, 8021e48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8021e28:	f104 0014 	add.w	r0, r4, #20
 8021e2c:	f7ff fd66 	bl	80218fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021e30:	9b01      	ldr	r3, [sp, #4]
 8021e32:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8021e36:	6623      	str	r3, [r4, #96]	@ 0x60
 8021e38:	9b00      	ldr	r3, [sp, #0]
 8021e3a:	6663      	str	r3, [r4, #100]	@ 0x64
 8021e3c:	b002      	add	sp, #8
 8021e3e:	bd70      	pop	{r4, r5, r6, pc}
 8021e40:	2001      	movs	r0, #1
 8021e42:	e7e5      	b.n	8021e10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8021e44:	2304      	movs	r3, #4
 8021e46:	e7ea      	b.n	8021e1e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8021e48:	b113      	cbz	r3, 8021e50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8021e4a:	ea10 0305 	ands.w	r3, r0, r5
 8021e4e:	d11c      	bne.n	8021e8a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8021e50:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8021e54:	f104 0614 	add.w	r6, r4, #20
 8021e58:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8021e5c:	b98b      	cbnz	r3, 8021e82 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8021e5e:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8021e62:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8021e66:	4298      	cmp	r0, r3
 8021e68:	d802      	bhi.n	8021e70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8021e6a:	4630      	mov	r0, r6
 8021e6c:	f7f0 fda6 	bl	80129bc <_ZN8touchgfx7Outline6moveToEii>
 8021e70:	2301      	movs	r3, #1
 8021e72:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8021e76:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8021e7a:	4630      	mov	r0, r6
 8021e7c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8021e80:	e7d4      	b.n	8021e2c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8021e82:	4630      	mov	r0, r6
 8021e84:	f7ff fd3a 	bl	80218fc <_ZN8touchgfx10Rasterizer6lineToEii>
 8021e88:	e7f7      	b.n	8021e7a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8021e8a:	461d      	mov	r5, r3
 8021e8c:	e7d0      	b.n	8021e30 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08021e90 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8021e90:	b538      	push	{r3, r4, r5, lr}
 8021e92:	ed2d 8b10 	vpush	{d8-d15}
 8021e96:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8021e9a:	4605      	mov	r5, r0
 8021e9c:	eeb0 ca40 	vmov.f32	s24, s0
 8021ea0:	460c      	mov	r4, r1
 8021ea2:	eef0 ca60 	vmov.f32	s25, s1
 8021ea6:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8022004 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8021eaa:	eeb0 da41 	vmov.f32	s26, s2
 8021eae:	eef0 da61 	vmov.f32	s27, s3
 8021eb2:	eeb0 ea42 	vmov.f32	s28, s4
 8021eb6:	eef0 ea62 	vmov.f32	s29, s5
 8021eba:	eef0 aa6b 	vmov.f32	s21, s23
 8021ebe:	2c08      	cmp	r4, #8
 8021ec0:	d86e      	bhi.n	8021fa0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8021ec2:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8021ec6:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8021eca:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8021ece:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8021ed2:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8021ed6:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8021eda:	ee7c faad 	vadd.f32	s31, s25, s27
 8021ede:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021ee2:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8021ee6:	ee3d aaae 	vadd.f32	s20, s27, s29
 8021eea:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8021eee:	ee6f faab 	vmul.f32	s31, s31, s23
 8021ef2:	ee69 9aab 	vmul.f32	s19, s19, s23
 8021ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021efa:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8021efe:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8021f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f06:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8021f0a:	ee68 8aab 	vmul.f32	s17, s17, s23
 8021f0e:	bf48      	it	mi
 8021f10:	eef1 7a67 	vnegmi.f32	s15, s15
 8021f14:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8021f18:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8021f1c:	eef4 7acb 	vcmpe.f32	s15, s22
 8021f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f24:	dd3f      	ble.n	8021fa6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8021f26:	ee27 7a07 	vmul.f32	s14, s14, s14
 8021f2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021f2e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8021f32:	ee27 7a06 	vmul.f32	s14, s14, s12
 8021f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f3e:	d847      	bhi.n	8021fd0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8021f40:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8021f44:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8021f48:	f000 fa57 	bl	80223fa <atan2f>
 8021f4c:	eeb0 8a40 	vmov.f32	s16, s0
 8021f50:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8021f54:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8021f58:	f000 fa4f 	bl	80223fa <atan2f>
 8021f5c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8021f60:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8022008 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8021f64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f6c:	bf48      	it	mi
 8021f6e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8021f72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f7a:	bfa4      	itt	ge
 8021f7c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802200c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8021f80:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8021f84:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8022010 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8021f88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f90:	d51e      	bpl.n	8021fd0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8021f92:	eef0 0a49 	vmov.f32	s1, s18
 8021f96:	4628      	mov	r0, r5
 8021f98:	eeb0 0a68 	vmov.f32	s0, s17
 8021f9c:	f7ed ffba 	bl	800ff14 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021fa0:	ecbd 8b10 	vpop	{d8-d15}
 8021fa4:	bd38      	pop	{r3, r4, r5, pc}
 8021fa6:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8021faa:	eeb0 7a68 	vmov.f32	s14, s17
 8021fae:	eef0 6a49 	vmov.f32	s13, s18
 8021fb2:	eea7 7aea 	vfms.f32	s14, s15, s21
 8021fb6:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8021fba:	eee7 6aea 	vfms.f32	s13, s15, s21
 8021fbe:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8021fc2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8021fc6:	eef4 7ac6 	vcmpe.f32	s15, s12
 8021fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fce:	d9e0      	bls.n	8021f92 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8021fd0:	3401      	adds	r4, #1
 8021fd2:	eef0 0a6c 	vmov.f32	s1, s25
 8021fd6:	eeb0 0a4c 	vmov.f32	s0, s24
 8021fda:	4628      	mov	r0, r5
 8021fdc:	4621      	mov	r1, r4
 8021fde:	eef0 2a49 	vmov.f32	s5, s18
 8021fe2:	eeb0 2a68 	vmov.f32	s4, s17
 8021fe6:	eef0 1a6f 	vmov.f32	s3, s31
 8021fea:	eeb0 1a4f 	vmov.f32	s2, s30
 8021fee:	f7ff ff4f 	bl	8021e90 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8021ff2:	eef0 da4a 	vmov.f32	s27, s20
 8021ff6:	eeb0 da69 	vmov.f32	s26, s19
 8021ffa:	eef0 ca49 	vmov.f32	s25, s18
 8021ffe:	eeb0 ca68 	vmov.f32	s24, s17
 8022002:	e75c      	b.n	8021ebe <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8022004:	2edbe6ff 	.word	0x2edbe6ff
 8022008:	40490fdb 	.word	0x40490fdb
 802200c:	40c90fdb 	.word	0x40c90fdb
 8022010:	3dcccccd 	.word	0x3dcccccd

08022014 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8022014:	b530      	push	{r4, r5, lr}
 8022016:	ed2d 8b10 	vpush	{d8-d15}
 802201a:	eef0 8a40 	vmov.f32	s17, s0
 802201e:	b085      	sub	sp, #20
 8022020:	eef0 9a60 	vmov.f32	s19, s1
 8022024:	4604      	mov	r4, r0
 8022026:	eef0 fa41 	vmov.f32	s31, s2
 802202a:	460d      	mov	r5, r1
 802202c:	eeb0 fa61 	vmov.f32	s30, s3
 8022030:	eef0 ba42 	vmov.f32	s23, s4
 8022034:	eeb0 ca62 	vmov.f32	s24, s5
 8022038:	eef0 aa43 	vmov.f32	s21, s6
 802203c:	eeb0 ba63 	vmov.f32	s22, s7
 8022040:	2d08      	cmp	r5, #8
 8022042:	f200 8113 	bhi.w	802226c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8022046:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802204a:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802204e:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8022052:	ee38 daaf 	vadd.f32	s26, s17, s31
 8022056:	ee26 6a27 	vmul.f32	s12, s12, s15
 802205a:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802205e:	ee2d da27 	vmul.f32	s26, s26, s15
 8022062:	ed8d 6a01 	vstr	s12, [sp, #4]
 8022066:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802206a:	ee6c caa7 	vmul.f32	s25, s25, s15
 802206e:	eeb0 ea4d 	vmov.f32	s28, s26
 8022072:	ee79 da8f 	vadd.f32	s27, s19, s30
 8022076:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802207a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802207e:	ee66 6a27 	vmul.f32	s13, s12, s15
 8022082:	ee6d daa7 	vmul.f32	s27, s27, s15
 8022086:	edcd 6a03 	vstr	s13, [sp, #12]
 802208a:	eef0 6a6c 	vmov.f32	s13, s25
 802208e:	eef0 ea6d 	vmov.f32	s29, s27
 8022092:	ee2e ea27 	vmul.f32	s28, s28, s15
 8022096:	eee7 6a27 	vfma.f32	s13, s14, s15
 802209a:	eee7 ea27 	vfma.f32	s29, s14, s15
 802209e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80220a2:	ee6e eaa7 	vmul.f32	s29, s29, s15
 80220a6:	eef0 6a67 	vmov.f32	s13, s15
 80220aa:	ed8d 7a02 	vstr	s14, [sp, #8]
 80220ae:	ed9d 7a03 	vldr	s14, [sp, #12]
 80220b2:	ee3e 9a07 	vadd.f32	s18, s28, s14
 80220b6:	ed9d 7a02 	vldr	s14, [sp, #8]
 80220ba:	ee3e aa87 	vadd.f32	s20, s29, s14
 80220be:	ee29 9a27 	vmul.f32	s18, s18, s15
 80220c2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80220c6:	2d00      	cmp	r5, #0
 80220c8:	f000 810b 	beq.w	80222e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80220cc:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 80220d0:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8022328 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80220d4:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 80220d8:	ee7b 7a69 	vsub.f32	s15, s22, s19
 80220dc:	ee3f 6aea 	vsub.f32	s12, s31, s21
 80220e0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80220e4:	ee3b 5aea 	vsub.f32	s10, s23, s21
 80220e8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80220ec:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 80220f0:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 80220f4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80220f8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80220fc:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8022100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022104:	bf48      	it	mi
 8022106:	eeb1 7a47 	vnegmi.f32	s14, s14
 802210a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022112:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8022116:	bf48      	it	mi
 8022118:	eeb1 6a46 	vnegmi.f32	s12, s12
 802211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022120:	f340 80a8 	ble.w	8022274 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8022124:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8022128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802212c:	dd5a      	ble.n	80221e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802212e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8022132:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022136:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802213a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802213e:	ee65 7a85 	vmul.f32	s15, s11, s10
 8022142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802214a:	f200 80ca 	bhi.w	80222e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802214e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022152:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022156:	f000 f950 	bl	80223fa <atan2f>
 802215a:	eeb0 8a40 	vmov.f32	s16, s0
 802215e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8022162:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8022166:	f000 f948 	bl	80223fa <atan2f>
 802216a:	ee38 fa40 	vsub.f32	s30, s16, s0
 802216e:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022172:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022176:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802217e:	bf48      	it	mi
 8022180:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8022184:	f000 f939 	bl	80223fa <atan2f>
 8022188:	ee30 0a48 	vsub.f32	s0, s0, s16
 802218c:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802232c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022190:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022198:	eeb4 fae7 	vcmpe.f32	s30, s15
 802219c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 802232c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80221a0:	bf48      	it	mi
 80221a2:	eeb1 0a40 	vnegmi.f32	s0, s0
 80221a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80221ae:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8022330 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80221b2:	bfa4      	itt	ge
 80221b4:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8022334 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80221b8:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 80221bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221c0:	bfa4      	itt	ge
 80221c2:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8022334 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80221c6:	ee37 0a40 	vsubge.f32	s0, s14, s0
 80221ca:	ee3f 0a00 	vadd.f32	s0, s30, s0
 80221ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80221d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221d6:	f140 8084 	bpl.w	80222e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80221da:	eef0 0a4a 	vmov.f32	s1, s20
 80221de:	eeb0 0a49 	vmov.f32	s0, s18
 80221e2:	e040      	b.n	8022266 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 80221e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80221e8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80221ec:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80221f0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80221f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80221f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221fc:	d871      	bhi.n	80222e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80221fe:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022202:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022206:	f000 f8f8 	bl	80223fa <atan2f>
 802220a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802220e:	eeb0 8a40 	vmov.f32	s16, s0
 8022212:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8022216:	f000 f8f0 	bl	80223fa <atan2f>
 802221a:	ee38 0a40 	vsub.f32	s0, s16, s0
 802221e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 802232c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022222:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802222a:	bf48      	it	mi
 802222c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022230:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022238:	bfa4      	itt	ge
 802223a:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8022334 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802223e:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8022242:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8022330 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8022246:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802224e:	d548      	bpl.n	80222e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022250:	eef0 0a4f 	vmov.f32	s1, s30
 8022254:	4620      	mov	r0, r4
 8022256:	eeb0 0a6f 	vmov.f32	s0, s31
 802225a:	f7ed fe5b 	bl	800ff14 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802225e:	eef0 0a4c 	vmov.f32	s1, s24
 8022262:	eeb0 0a6b 	vmov.f32	s0, s23
 8022266:	4620      	mov	r0, r4
 8022268:	f7ed fe54 	bl	800ff14 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802226c:	b005      	add	sp, #20
 802226e:	ecbd 8b10 	vpop	{d8-d15}
 8022272:	bd30      	pop	{r4, r5, pc}
 8022274:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8022328 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022278:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022280:	dd19      	ble.n	80222b6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8022282:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022286:	ee26 7a06 	vmul.f32	s14, s12, s12
 802228a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802228e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802229a:	d822      	bhi.n	80222e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802229c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80222a0:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80222a4:	f000 f8a9 	bl	80223fa <atan2f>
 80222a8:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80222ac:	eeb0 8a40 	vmov.f32	s16, s0
 80222b0:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80222b4:	e7af      	b.n	8022216 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 80222b6:	ee78 7aaa 	vadd.f32	s15, s17, s21
 80222ba:	eeb0 7a49 	vmov.f32	s14, s18
 80222be:	eeb0 6a4a 	vmov.f32	s12, s20
 80222c2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80222c6:	ee79 7a8b 	vadd.f32	s15, s19, s22
 80222ca:	eea7 6ae6 	vfms.f32	s12, s15, s13
 80222ce:	ee66 7a06 	vmul.f32	s15, s12, s12
 80222d2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80222d6:	eef4 7ac5 	vcmpe.f32	s15, s10
 80222da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222de:	f67f af7c 	bls.w	80221da <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 80222e2:	3501      	adds	r5, #1
 80222e4:	eef0 0a69 	vmov.f32	s1, s19
 80222e8:	eeb0 0a68 	vmov.f32	s0, s17
 80222ec:	4620      	mov	r0, r4
 80222ee:	4629      	mov	r1, r5
 80222f0:	eef0 3a4a 	vmov.f32	s7, s20
 80222f4:	eeb0 3a49 	vmov.f32	s6, s18
 80222f8:	eef0 2a6e 	vmov.f32	s5, s29
 80222fc:	eeb0 2a4e 	vmov.f32	s4, s28
 8022300:	eef0 1a6d 	vmov.f32	s3, s27
 8022304:	eeb0 1a4d 	vmov.f32	s2, s26
 8022308:	f7ff fe84 	bl	8022014 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802230c:	eeb0 ca6c 	vmov.f32	s24, s25
 8022310:	eddd ba01 	vldr	s23, [sp, #4]
 8022314:	eef0 9a4a 	vmov.f32	s19, s20
 8022318:	ed9d fa02 	vldr	s30, [sp, #8]
 802231c:	eef0 8a49 	vmov.f32	s17, s18
 8022320:	eddd fa03 	vldr	s31, [sp, #12]
 8022324:	e68c      	b.n	8022040 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8022326:	bf00      	nop
 8022328:	2edbe6ff 	.word	0x2edbe6ff
 802232c:	40490fdb 	.word	0x40490fdb
 8022330:	3dcccccd 	.word	0x3dcccccd
 8022334:	40c90fdb 	.word	0x40c90fdb

08022338 <_ZN8touchgfx6CanvasD1Ev>:
 8022338:	4b04      	ldr	r3, [pc, #16]	@ (802234c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802233a:	b510      	push	{r4, lr}
 802233c:	4604      	mov	r4, r0
 802233e:	f840 3b14 	str.w	r3, [r0], #20
 8022342:	f7ef fe43 	bl	8011fcc <_ZN8touchgfx7OutlineD1Ev>
 8022346:	4620      	mov	r0, r4
 8022348:	bd10      	pop	{r4, pc}
 802234a:	bf00      	nop
 802234c:	08025da8 	.word	0x08025da8

08022350 <_ZN8touchgfx6CanvasD0Ev>:
 8022350:	b510      	push	{r4, lr}
 8022352:	4604      	mov	r4, r0
 8022354:	f7ff fff0 	bl	8022338 <_ZN8touchgfx6CanvasD1Ev>
 8022358:	2174      	movs	r1, #116	@ 0x74
 802235a:	4620      	mov	r0, r4
 802235c:	f000 f826 	bl	80223ac <_ZdlPvj>
 8022360:	4620      	mov	r0, r4
 8022362:	bd10      	pop	{r4, pc}

08022364 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8022364:	790b      	ldrb	r3, [r1, #4]
 8022366:	2b00      	cmp	r3, #0
 8022368:	bf0c      	ite	eq
 802236a:	2301      	moveq	r3, #1
 802236c:	2300      	movne	r3, #0
 802236e:	b570      	push	{r4, r5, r6, lr}
 8022370:	4604      	mov	r4, r0
 8022372:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8022376:	460e      	mov	r6, r1
 8022378:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 802237c:	d109      	bne.n	8022392 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802237e:	b14d      	cbz	r5, 8022394 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8022380:	7933      	ldrb	r3, [r6, #4]
 8022382:	2b01      	cmp	r3, #1
 8022384:	d10c      	bne.n	80223a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8022386:	6823      	ldr	r3, [r4, #0]
 8022388:	4620      	mov	r0, r4
 802238a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802238c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022390:	4718      	bx	r3
 8022392:	b12d      	cbz	r5, 80223a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8022394:	6823      	ldr	r3, [r4, #0]
 8022396:	4620      	mov	r0, r4
 8022398:	695b      	ldr	r3, [r3, #20]
 802239a:	4798      	blx	r3
 802239c:	2d00      	cmp	r5, #0
 802239e:	d1ef      	bne.n	8022380 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80223a0:	bd70      	pop	{r4, r5, r6, pc}

080223a2 <__aeabi_atexit>:
 80223a2:	460b      	mov	r3, r1
 80223a4:	4601      	mov	r1, r0
 80223a6:	4618      	mov	r0, r3
 80223a8:	f000 bc58 	b.w	8022c5c <__cxa_atexit>

080223ac <_ZdlPvj>:
 80223ac:	f000 b812 	b.w	80223d4 <_ZdlPv>

080223b0 <__cxa_guard_acquire>:
 80223b0:	6802      	ldr	r2, [r0, #0]
 80223b2:	07d2      	lsls	r2, r2, #31
 80223b4:	4603      	mov	r3, r0
 80223b6:	d405      	bmi.n	80223c4 <__cxa_guard_acquire+0x14>
 80223b8:	7842      	ldrb	r2, [r0, #1]
 80223ba:	b102      	cbz	r2, 80223be <__cxa_guard_acquire+0xe>
 80223bc:	deff      	udf	#255	@ 0xff
 80223be:	2001      	movs	r0, #1
 80223c0:	7058      	strb	r0, [r3, #1]
 80223c2:	4770      	bx	lr
 80223c4:	2000      	movs	r0, #0
 80223c6:	4770      	bx	lr

080223c8 <__cxa_guard_release>:
 80223c8:	2301      	movs	r3, #1
 80223ca:	6003      	str	r3, [r0, #0]
 80223cc:	4770      	bx	lr

080223ce <__cxa_pure_virtual>:
 80223ce:	b508      	push	{r3, lr}
 80223d0:	f000 f80e 	bl	80223f0 <_ZSt9terminatev>

080223d4 <_ZdlPv>:
 80223d4:	f000 bb8c 	b.w	8022af0 <free>

080223d8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80223d8:	b508      	push	{r3, lr}
 80223da:	4780      	blx	r0
 80223dc:	f000 fb55 	bl	8022a8a <abort>

080223e0 <_ZSt13get_terminatev>:
 80223e0:	4b02      	ldr	r3, [pc, #8]	@ (80223ec <_ZSt13get_terminatev+0xc>)
 80223e2:	6818      	ldr	r0, [r3, #0]
 80223e4:	f3bf 8f5b 	dmb	ish
 80223e8:	4770      	bx	lr
 80223ea:	bf00      	nop
 80223ec:	240000dc 	.word	0x240000dc

080223f0 <_ZSt9terminatev>:
 80223f0:	b508      	push	{r3, lr}
 80223f2:	f7ff fff5 	bl	80223e0 <_ZSt13get_terminatev>
 80223f6:	f7ff ffef 	bl	80223d8 <_ZN10__cxxabiv111__terminateEPFvvE>

080223fa <atan2f>:
 80223fa:	f000 b9cd 	b.w	8022798 <__ieee754_atan2f>
	...

08022400 <sqrtf>:
 8022400:	b508      	push	{r3, lr}
 8022402:	ed2d 8b02 	vpush	{d8}
 8022406:	eeb0 8a40 	vmov.f32	s16, s0
 802240a:	f000 f9c2 	bl	8022792 <__ieee754_sqrtf>
 802240e:	eeb4 8a48 	vcmp.f32	s16, s16
 8022412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022416:	d60c      	bvs.n	8022432 <sqrtf+0x32>
 8022418:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8022438 <sqrtf+0x38>
 802241c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8022420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022424:	d505      	bpl.n	8022432 <sqrtf+0x32>
 8022426:	f000 fe49 	bl	80230bc <__errno>
 802242a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802242e:	2321      	movs	r3, #33	@ 0x21
 8022430:	6003      	str	r3, [r0, #0]
 8022432:	ecbd 8b02 	vpop	{d8}
 8022436:	bd08      	pop	{r3, pc}
 8022438:	00000000 	.word	0x00000000

0802243c <sinf_poly>:
 802243c:	07cb      	lsls	r3, r1, #31
 802243e:	d412      	bmi.n	8022466 <sinf_poly+0x2a>
 8022440:	ee21 5b00 	vmul.f64	d5, d1, d0
 8022444:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8022448:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 802244c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8022450:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8022454:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022458:	eea6 0b05 	vfma.f64	d0, d6, d5
 802245c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8022460:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022464:	4770      	bx	lr
 8022466:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802246a:	ee21 5b01 	vmul.f64	d5, d1, d1
 802246e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8022472:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8022476:	eea1 7b06 	vfma.f64	d7, d1, d6
 802247a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802247e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022482:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8022486:	ee21 1b05 	vmul.f64	d1, d1, d5
 802248a:	eea5 0b06 	vfma.f64	d0, d5, d6
 802248e:	e7e5      	b.n	802245c <sinf_poly+0x20>

08022490 <sinf>:
 8022490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022492:	ee10 4a10 	vmov	r4, s0
 8022496:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802249a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802249e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80224a2:	eef0 7a40 	vmov.f32	s15, s0
 80224a6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80224aa:	d218      	bcs.n	80224de <sinf+0x4e>
 80224ac:	ee26 1b06 	vmul.f64	d1, d6, d6
 80224b0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80224b4:	d20a      	bcs.n	80224cc <sinf+0x3c>
 80224b6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 80224ba:	d103      	bne.n	80224c4 <sinf+0x34>
 80224bc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80224c0:	ed8d 1a01 	vstr	s2, [sp, #4]
 80224c4:	eeb0 0a67 	vmov.f32	s0, s15
 80224c8:	b003      	add	sp, #12
 80224ca:	bd30      	pop	{r4, r5, pc}
 80224cc:	483a      	ldr	r0, [pc, #232]	@ (80225b8 <sinf+0x128>)
 80224ce:	eeb0 0b46 	vmov.f64	d0, d6
 80224d2:	2100      	movs	r1, #0
 80224d4:	b003      	add	sp, #12
 80224d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80224da:	f7ff bfaf 	b.w	802243c <sinf_poly>
 80224de:	f240 422e 	movw	r2, #1070	@ 0x42e
 80224e2:	4293      	cmp	r3, r2
 80224e4:	d824      	bhi.n	8022530 <sinf+0xa0>
 80224e6:	4b34      	ldr	r3, [pc, #208]	@ (80225b8 <sinf+0x128>)
 80224e8:	ed93 7b08 	vldr	d7, [r3, #32]
 80224ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80224f0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80224f4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80224f8:	ee17 1a90 	vmov	r1, s15
 80224fc:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022500:	1609      	asrs	r1, r1, #24
 8022502:	ee07 1a90 	vmov	s15, r1
 8022506:	f001 0203 	and.w	r2, r1, #3
 802250a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802250e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022512:	ed92 0b00 	vldr	d0, [r2]
 8022516:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802251a:	f011 0f02 	tst.w	r1, #2
 802251e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8022522:	bf08      	it	eq
 8022524:	4618      	moveq	r0, r3
 8022526:	ee26 1b06 	vmul.f64	d1, d6, d6
 802252a:	ee20 0b06 	vmul.f64	d0, d0, d6
 802252e:	e7d1      	b.n	80224d4 <sinf+0x44>
 8022530:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8022534:	d237      	bcs.n	80225a6 <sinf+0x116>
 8022536:	4921      	ldr	r1, [pc, #132]	@ (80225bc <sinf+0x12c>)
 8022538:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802253c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8022540:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8022544:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8022548:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802254c:	6a10      	ldr	r0, [r2, #32]
 802254e:	6912      	ldr	r2, [r2, #16]
 8022550:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8022554:	40ab      	lsls	r3, r5
 8022556:	fba0 5003 	umull	r5, r0, r0, r3
 802255a:	4359      	muls	r1, r3
 802255c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8022560:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8022564:	0f9d      	lsrs	r5, r3, #30
 8022566:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802256a:	1ac9      	subs	r1, r1, r3
 802256c:	f7de f8ae 	bl	80006cc <__aeabi_l2d>
 8022570:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022574:	4b10      	ldr	r3, [pc, #64]	@ (80225b8 <sinf+0x128>)
 8022576:	f004 0203 	and.w	r2, r4, #3
 802257a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802257e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80225b0 <sinf+0x120>
 8022582:	ed92 0b00 	vldr	d0, [r2]
 8022586:	ec41 0b17 	vmov	d7, r0, r1
 802258a:	f014 0f02 	tst.w	r4, #2
 802258e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022592:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022596:	4629      	mov	r1, r5
 8022598:	bf08      	it	eq
 802259a:	4618      	moveq	r0, r3
 802259c:	ee27 1b07 	vmul.f64	d1, d7, d7
 80225a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80225a4:	e796      	b.n	80224d4 <sinf+0x44>
 80225a6:	b003      	add	sp, #12
 80225a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80225ac:	f000 b8e2 	b.w	8022774 <__math_invalidf>
 80225b0:	54442d18 	.word	0x54442d18
 80225b4:	3c1921fb 	.word	0x3c1921fb
 80225b8:	08025e18 	.word	0x08025e18
 80225bc:	08025db4 	.word	0x08025db4

080225c0 <sinf_poly>:
 80225c0:	07cb      	lsls	r3, r1, #31
 80225c2:	d412      	bmi.n	80225ea <sinf_poly+0x2a>
 80225c4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80225c8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80225cc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80225d0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80225d4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80225d8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80225dc:	eea6 0b05 	vfma.f64	d0, d6, d5
 80225e0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80225e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80225e8:	4770      	bx	lr
 80225ea:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80225ee:	ee21 5b01 	vmul.f64	d5, d1, d1
 80225f2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80225f6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80225fa:	eea1 7b06 	vfma.f64	d7, d1, d6
 80225fe:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8022602:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022606:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802260a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802260e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022612:	e7e5      	b.n	80225e0 <sinf_poly+0x20>
 8022614:	0000      	movs	r0, r0
	...

08022618 <cosf>:
 8022618:	b538      	push	{r3, r4, r5, lr}
 802261a:	ee10 4a10 	vmov	r4, s0
 802261e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022622:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022626:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802262a:	d21f      	bcs.n	802266c <cosf+0x54>
 802262c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8022630:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022634:	f0c0 8082 	bcc.w	802273c <cosf+0x124>
 8022638:	ee27 4b07 	vmul.f64	d4, d7, d7
 802263c:	4b44      	ldr	r3, [pc, #272]	@ (8022750 <cosf+0x138>)
 802263e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8022642:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8022646:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802264a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802264e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8022652:	eea7 0b05 	vfma.f64	d0, d7, d5
 8022656:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802265a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802265e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8022662:	eea6 0b07 	vfma.f64	d0, d6, d7
 8022666:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802266a:	bd38      	pop	{r3, r4, r5, pc}
 802266c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022670:	4293      	cmp	r3, r2
 8022672:	d829      	bhi.n	80226c8 <cosf+0xb0>
 8022674:	4b36      	ldr	r3, [pc, #216]	@ (8022750 <cosf+0x138>)
 8022676:	ed93 6b08 	vldr	d6, [r3, #32]
 802267a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802267e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8022682:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022686:	ee16 1a90 	vmov	r1, s13
 802268a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802268e:	1609      	asrs	r1, r1, #24
 8022690:	ee06 1a90 	vmov	s13, r1
 8022694:	f001 0203 	and.w	r2, r1, #3
 8022698:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802269c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80226a0:	ed92 0b00 	vldr	d0, [r2]
 80226a4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80226a8:	f011 0f02 	tst.w	r1, #2
 80226ac:	f081 0101 	eor.w	r1, r1, #1
 80226b0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80226b4:	bf08      	it	eq
 80226b6:	4618      	moveq	r0, r3
 80226b8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80226bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80226c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80226c4:	f7ff bf7c 	b.w	80225c0 <sinf_poly>
 80226c8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80226cc:	d232      	bcs.n	8022734 <cosf+0x11c>
 80226ce:	4921      	ldr	r1, [pc, #132]	@ (8022754 <cosf+0x13c>)
 80226d0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80226d4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80226d8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80226dc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80226e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80226e4:	6a10      	ldr	r0, [r2, #32]
 80226e6:	6912      	ldr	r2, [r2, #16]
 80226e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80226ec:	40ab      	lsls	r3, r5
 80226ee:	fba0 5003 	umull	r5, r0, r0, r3
 80226f2:	4359      	muls	r1, r3
 80226f4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80226f8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80226fc:	0f9d      	lsrs	r5, r3, #30
 80226fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8022702:	1ac9      	subs	r1, r1, r3
 8022704:	f7dd ffe2 	bl	80006cc <__aeabi_l2d>
 8022708:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802270c:	4b10      	ldr	r3, [pc, #64]	@ (8022750 <cosf+0x138>)
 802270e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8022748 <cosf+0x130>
 8022712:	ec41 0b17 	vmov	d7, r0, r1
 8022716:	f004 0203 	and.w	r2, r4, #3
 802271a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802271e:	ed92 0b00 	vldr	d0, [r2]
 8022722:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022726:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802272a:	f014 0f02 	tst.w	r4, #2
 802272e:	f085 0101 	eor.w	r1, r5, #1
 8022732:	e7bf      	b.n	80226b4 <cosf+0x9c>
 8022734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022738:	f000 b81c 	b.w	8022774 <__math_invalidf>
 802273c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8022740:	e793      	b.n	802266a <cosf+0x52>
 8022742:	bf00      	nop
 8022744:	f3af 8000 	nop.w
 8022748:	54442d18 	.word	0x54442d18
 802274c:	3c1921fb 	.word	0x3c1921fb
 8022750:	08025e18 	.word	0x08025e18
 8022754:	08025db4 	.word	0x08025db4

08022758 <with_errnof>:
 8022758:	b510      	push	{r4, lr}
 802275a:	ed2d 8b02 	vpush	{d8}
 802275e:	eeb0 8a40 	vmov.f32	s16, s0
 8022762:	4604      	mov	r4, r0
 8022764:	f000 fcaa 	bl	80230bc <__errno>
 8022768:	eeb0 0a48 	vmov.f32	s0, s16
 802276c:	ecbd 8b02 	vpop	{d8}
 8022770:	6004      	str	r4, [r0, #0]
 8022772:	bd10      	pop	{r4, pc}

08022774 <__math_invalidf>:
 8022774:	eef0 7a40 	vmov.f32	s15, s0
 8022778:	ee30 7a40 	vsub.f32	s14, s0, s0
 802277c:	eef4 7a67 	vcmp.f32	s15, s15
 8022780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022784:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8022788:	d602      	bvs.n	8022790 <__math_invalidf+0x1c>
 802278a:	2021      	movs	r0, #33	@ 0x21
 802278c:	f7ff bfe4 	b.w	8022758 <with_errnof>
 8022790:	4770      	bx	lr

08022792 <__ieee754_sqrtf>:
 8022792:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022796:	4770      	bx	lr

08022798 <__ieee754_atan2f>:
 8022798:	ee10 2a90 	vmov	r2, s1
 802279c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80227a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80227a4:	b510      	push	{r4, lr}
 80227a6:	eef0 7a40 	vmov.f32	s15, s0
 80227aa:	d806      	bhi.n	80227ba <__ieee754_atan2f+0x22>
 80227ac:	ee10 0a10 	vmov	r0, s0
 80227b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80227b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80227b8:	d904      	bls.n	80227c4 <__ieee754_atan2f+0x2c>
 80227ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80227be:	eeb0 0a67 	vmov.f32	s0, s15
 80227c2:	bd10      	pop	{r4, pc}
 80227c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80227c8:	d103      	bne.n	80227d2 <__ieee754_atan2f+0x3a>
 80227ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227ce:	f000 b881 	b.w	80228d4 <atanf>
 80227d2:	1794      	asrs	r4, r2, #30
 80227d4:	f004 0402 	and.w	r4, r4, #2
 80227d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80227dc:	b93b      	cbnz	r3, 80227ee <__ieee754_atan2f+0x56>
 80227de:	2c02      	cmp	r4, #2
 80227e0:	d05c      	beq.n	802289c <__ieee754_atan2f+0x104>
 80227e2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80228b0 <__ieee754_atan2f+0x118>
 80227e6:	2c03      	cmp	r4, #3
 80227e8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80227ec:	e7e7      	b.n	80227be <__ieee754_atan2f+0x26>
 80227ee:	b939      	cbnz	r1, 8022800 <__ieee754_atan2f+0x68>
 80227f0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80228b4 <__ieee754_atan2f+0x11c>
 80227f4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80228b8 <__ieee754_atan2f+0x120>
 80227f8:	2800      	cmp	r0, #0
 80227fa:	fe67 7a87 	vselge.f32	s15, s15, s14
 80227fe:	e7de      	b.n	80227be <__ieee754_atan2f+0x26>
 8022800:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022804:	d110      	bne.n	8022828 <__ieee754_atan2f+0x90>
 8022806:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802280a:	f104 34ff 	add.w	r4, r4, #4294967295
 802280e:	d107      	bne.n	8022820 <__ieee754_atan2f+0x88>
 8022810:	2c02      	cmp	r4, #2
 8022812:	d846      	bhi.n	80228a2 <__ieee754_atan2f+0x10a>
 8022814:	4b29      	ldr	r3, [pc, #164]	@ (80228bc <__ieee754_atan2f+0x124>)
 8022816:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802281a:	edd3 7a00 	vldr	s15, [r3]
 802281e:	e7ce      	b.n	80227be <__ieee754_atan2f+0x26>
 8022820:	2c02      	cmp	r4, #2
 8022822:	d841      	bhi.n	80228a8 <__ieee754_atan2f+0x110>
 8022824:	4b26      	ldr	r3, [pc, #152]	@ (80228c0 <__ieee754_atan2f+0x128>)
 8022826:	e7f6      	b.n	8022816 <__ieee754_atan2f+0x7e>
 8022828:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802282c:	d0e0      	beq.n	80227f0 <__ieee754_atan2f+0x58>
 802282e:	1a5b      	subs	r3, r3, r1
 8022830:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8022834:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022838:	da1a      	bge.n	8022870 <__ieee754_atan2f+0xd8>
 802283a:	2a00      	cmp	r2, #0
 802283c:	da01      	bge.n	8022842 <__ieee754_atan2f+0xaa>
 802283e:	313c      	adds	r1, #60	@ 0x3c
 8022840:	db19      	blt.n	8022876 <__ieee754_atan2f+0xde>
 8022842:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022846:	f000 f919 	bl	8022a7c <fabsf>
 802284a:	f000 f843 	bl	80228d4 <atanf>
 802284e:	eef0 7a40 	vmov.f32	s15, s0
 8022852:	2c01      	cmp	r4, #1
 8022854:	d012      	beq.n	802287c <__ieee754_atan2f+0xe4>
 8022856:	2c02      	cmp	r4, #2
 8022858:	d017      	beq.n	802288a <__ieee754_atan2f+0xf2>
 802285a:	2c00      	cmp	r4, #0
 802285c:	d0af      	beq.n	80227be <__ieee754_atan2f+0x26>
 802285e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80228c4 <__ieee754_atan2f+0x12c>
 8022862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022866:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80228c8 <__ieee754_atan2f+0x130>
 802286a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802286e:	e7a6      	b.n	80227be <__ieee754_atan2f+0x26>
 8022870:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80228b4 <__ieee754_atan2f+0x11c>
 8022874:	e7ed      	b.n	8022852 <__ieee754_atan2f+0xba>
 8022876:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80228cc <__ieee754_atan2f+0x134>
 802287a:	e7ea      	b.n	8022852 <__ieee754_atan2f+0xba>
 802287c:	ee17 3a90 	vmov	r3, s15
 8022880:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8022884:	ee07 3a90 	vmov	s15, r3
 8022888:	e799      	b.n	80227be <__ieee754_atan2f+0x26>
 802288a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80228c4 <__ieee754_atan2f+0x12c>
 802288e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022892:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80228c8 <__ieee754_atan2f+0x130>
 8022896:	ee77 7a67 	vsub.f32	s15, s14, s15
 802289a:	e790      	b.n	80227be <__ieee754_atan2f+0x26>
 802289c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80228c8 <__ieee754_atan2f+0x130>
 80228a0:	e78d      	b.n	80227be <__ieee754_atan2f+0x26>
 80228a2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80228d0 <__ieee754_atan2f+0x138>
 80228a6:	e78a      	b.n	80227be <__ieee754_atan2f+0x26>
 80228a8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80228cc <__ieee754_atan2f+0x134>
 80228ac:	e787      	b.n	80227be <__ieee754_atan2f+0x26>
 80228ae:	bf00      	nop
 80228b0:	c0490fdb 	.word	0xc0490fdb
 80228b4:	3fc90fdb 	.word	0x3fc90fdb
 80228b8:	bfc90fdb 	.word	0xbfc90fdb
 80228bc:	08025f04 	.word	0x08025f04
 80228c0:	08025ef8 	.word	0x08025ef8
 80228c4:	33bbbd2e 	.word	0x33bbbd2e
 80228c8:	40490fdb 	.word	0x40490fdb
 80228cc:	00000000 	.word	0x00000000
 80228d0:	3f490fdb 	.word	0x3f490fdb

080228d4 <atanf>:
 80228d4:	b538      	push	{r3, r4, r5, lr}
 80228d6:	ee10 5a10 	vmov	r5, s0
 80228da:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80228de:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80228e2:	eef0 7a40 	vmov.f32	s15, s0
 80228e6:	d30f      	bcc.n	8022908 <atanf+0x34>
 80228e8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80228ec:	d904      	bls.n	80228f8 <atanf+0x24>
 80228ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80228f2:	eeb0 0a67 	vmov.f32	s0, s15
 80228f6:	bd38      	pop	{r3, r4, r5, pc}
 80228f8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022a30 <atanf+0x15c>
 80228fc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8022a34 <atanf+0x160>
 8022900:	2d00      	cmp	r5, #0
 8022902:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8022906:	e7f4      	b.n	80228f2 <atanf+0x1e>
 8022908:	4b4b      	ldr	r3, [pc, #300]	@ (8022a38 <atanf+0x164>)
 802290a:	429c      	cmp	r4, r3
 802290c:	d810      	bhi.n	8022930 <atanf+0x5c>
 802290e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8022912:	d20a      	bcs.n	802292a <atanf+0x56>
 8022914:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8022a3c <atanf+0x168>
 8022918:	ee30 7a07 	vadd.f32	s14, s0, s14
 802291c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022920:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8022924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022928:	dce3      	bgt.n	80228f2 <atanf+0x1e>
 802292a:	f04f 33ff 	mov.w	r3, #4294967295
 802292e:	e013      	b.n	8022958 <atanf+0x84>
 8022930:	f000 f8a4 	bl	8022a7c <fabsf>
 8022934:	4b42      	ldr	r3, [pc, #264]	@ (8022a40 <atanf+0x16c>)
 8022936:	429c      	cmp	r4, r3
 8022938:	d84f      	bhi.n	80229da <atanf+0x106>
 802293a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802293e:	429c      	cmp	r4, r3
 8022940:	d841      	bhi.n	80229c6 <atanf+0xf2>
 8022942:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8022946:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802294a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802294e:	2300      	movs	r3, #0
 8022950:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022954:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022958:	1c5a      	adds	r2, r3, #1
 802295a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802295e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8022a44 <atanf+0x170>
 8022962:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022a48 <atanf+0x174>
 8022966:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8022a4c <atanf+0x178>
 802296a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802296e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8022972:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8022a50 <atanf+0x17c>
 8022976:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802297a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8022a54 <atanf+0x180>
 802297e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022982:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8022a58 <atanf+0x184>
 8022986:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802298a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8022a5c <atanf+0x188>
 802298e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022992:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022a60 <atanf+0x18c>
 8022996:	eea6 5a87 	vfma.f32	s10, s13, s14
 802299a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8022a64 <atanf+0x190>
 802299e:	eea5 7a26 	vfma.f32	s14, s10, s13
 80229a2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8022a68 <atanf+0x194>
 80229a6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80229aa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022a6c <atanf+0x198>
 80229ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 80229b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80229b6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80229ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80229be:	d121      	bne.n	8022a04 <atanf+0x130>
 80229c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229c4:	e795      	b.n	80228f2 <atanf+0x1e>
 80229c6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80229ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 80229ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80229d2:	2301      	movs	r3, #1
 80229d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80229d8:	e7be      	b.n	8022958 <atanf+0x84>
 80229da:	4b25      	ldr	r3, [pc, #148]	@ (8022a70 <atanf+0x19c>)
 80229dc:	429c      	cmp	r4, r3
 80229de:	d80b      	bhi.n	80229f8 <atanf+0x124>
 80229e0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80229e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80229e8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80229ec:	2302      	movs	r3, #2
 80229ee:	ee70 6a67 	vsub.f32	s13, s0, s15
 80229f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80229f6:	e7af      	b.n	8022958 <atanf+0x84>
 80229f8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80229fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a00:	2303      	movs	r3, #3
 8022a02:	e7a9      	b.n	8022958 <atanf+0x84>
 8022a04:	4a1b      	ldr	r2, [pc, #108]	@ (8022a74 <atanf+0x1a0>)
 8022a06:	491c      	ldr	r1, [pc, #112]	@ (8022a78 <atanf+0x1a4>)
 8022a08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022a0c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022a10:	edd3 6a00 	vldr	s13, [r3]
 8022a14:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022a18:	2d00      	cmp	r5, #0
 8022a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022a1e:	edd2 7a00 	vldr	s15, [r2]
 8022a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a26:	bfb8      	it	lt
 8022a28:	eef1 7a67 	vneglt.f32	s15, s15
 8022a2c:	e761      	b.n	80228f2 <atanf+0x1e>
 8022a2e:	bf00      	nop
 8022a30:	bfc90fdb 	.word	0xbfc90fdb
 8022a34:	3fc90fdb 	.word	0x3fc90fdb
 8022a38:	3edfffff 	.word	0x3edfffff
 8022a3c:	7149f2ca 	.word	0x7149f2ca
 8022a40:	3f97ffff 	.word	0x3f97ffff
 8022a44:	3c8569d7 	.word	0x3c8569d7
 8022a48:	3d4bda59 	.word	0x3d4bda59
 8022a4c:	bd6ef16b 	.word	0xbd6ef16b
 8022a50:	3d886b35 	.word	0x3d886b35
 8022a54:	3dba2e6e 	.word	0x3dba2e6e
 8022a58:	3e124925 	.word	0x3e124925
 8022a5c:	3eaaaaab 	.word	0x3eaaaaab
 8022a60:	bd15a221 	.word	0xbd15a221
 8022a64:	bd9d8795 	.word	0xbd9d8795
 8022a68:	bde38e38 	.word	0xbde38e38
 8022a6c:	be4ccccd 	.word	0xbe4ccccd
 8022a70:	401bffff 	.word	0x401bffff
 8022a74:	08025f20 	.word	0x08025f20
 8022a78:	08025f10 	.word	0x08025f10

08022a7c <fabsf>:
 8022a7c:	ee10 3a10 	vmov	r3, s0
 8022a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022a84:	ee00 3a10 	vmov	s0, r3
 8022a88:	4770      	bx	lr

08022a8a <abort>:
 8022a8a:	b508      	push	{r3, lr}
 8022a8c:	2006      	movs	r0, #6
 8022a8e:	f000 fa4d 	bl	8022f2c <raise>
 8022a92:	2001      	movs	r0, #1
 8022a94:	f7df f976 	bl	8001d84 <_exit>

08022a98 <__assert_func>:
 8022a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022a9a:	4614      	mov	r4, r2
 8022a9c:	461a      	mov	r2, r3
 8022a9e:	4b09      	ldr	r3, [pc, #36]	@ (8022ac4 <__assert_func+0x2c>)
 8022aa0:	681b      	ldr	r3, [r3, #0]
 8022aa2:	4605      	mov	r5, r0
 8022aa4:	68d8      	ldr	r0, [r3, #12]
 8022aa6:	b954      	cbnz	r4, 8022abe <__assert_func+0x26>
 8022aa8:	4b07      	ldr	r3, [pc, #28]	@ (8022ac8 <__assert_func+0x30>)
 8022aaa:	461c      	mov	r4, r3
 8022aac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022ab0:	9100      	str	r1, [sp, #0]
 8022ab2:	462b      	mov	r3, r5
 8022ab4:	4905      	ldr	r1, [pc, #20]	@ (8022acc <__assert_func+0x34>)
 8022ab6:	f000 f983 	bl	8022dc0 <fiprintf>
 8022aba:	f7ff ffe6 	bl	8022a8a <abort>
 8022abe:	4b04      	ldr	r3, [pc, #16]	@ (8022ad0 <__assert_func+0x38>)
 8022ac0:	e7f4      	b.n	8022aac <__assert_func+0x14>
 8022ac2:	bf00      	nop
 8022ac4:	240000ec 	.word	0x240000ec
 8022ac8:	08023c16 	.word	0x08023c16
 8022acc:	08025f3d 	.word	0x08025f3d
 8022ad0:	08025f30 	.word	0x08025f30

08022ad4 <atexit>:
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	4601      	mov	r1, r0
 8022ad8:	461a      	mov	r2, r3
 8022ada:	4618      	mov	r0, r3
 8022adc:	f000 bb2a 	b.w	8023134 <__register_exitproc>

08022ae0 <malloc>:
 8022ae0:	4b02      	ldr	r3, [pc, #8]	@ (8022aec <malloc+0xc>)
 8022ae2:	4601      	mov	r1, r0
 8022ae4:	6818      	ldr	r0, [r3, #0]
 8022ae6:	f000 b82d 	b.w	8022b44 <_malloc_r>
 8022aea:	bf00      	nop
 8022aec:	240000ec 	.word	0x240000ec

08022af0 <free>:
 8022af0:	4b02      	ldr	r3, [pc, #8]	@ (8022afc <free+0xc>)
 8022af2:	4601      	mov	r1, r0
 8022af4:	6818      	ldr	r0, [r3, #0]
 8022af6:	f000 bb79 	b.w	80231ec <_free_r>
 8022afa:	bf00      	nop
 8022afc:	240000ec 	.word	0x240000ec

08022b00 <sbrk_aligned>:
 8022b00:	b570      	push	{r4, r5, r6, lr}
 8022b02:	4e0f      	ldr	r6, [pc, #60]	@ (8022b40 <sbrk_aligned+0x40>)
 8022b04:	460c      	mov	r4, r1
 8022b06:	6831      	ldr	r1, [r6, #0]
 8022b08:	4605      	mov	r5, r0
 8022b0a:	b911      	cbnz	r1, 8022b12 <sbrk_aligned+0x12>
 8022b0c:	f000 fab4 	bl	8023078 <_sbrk_r>
 8022b10:	6030      	str	r0, [r6, #0]
 8022b12:	4621      	mov	r1, r4
 8022b14:	4628      	mov	r0, r5
 8022b16:	f000 faaf 	bl	8023078 <_sbrk_r>
 8022b1a:	1c43      	adds	r3, r0, #1
 8022b1c:	d103      	bne.n	8022b26 <sbrk_aligned+0x26>
 8022b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8022b22:	4620      	mov	r0, r4
 8022b24:	bd70      	pop	{r4, r5, r6, pc}
 8022b26:	1cc4      	adds	r4, r0, #3
 8022b28:	f024 0403 	bic.w	r4, r4, #3
 8022b2c:	42a0      	cmp	r0, r4
 8022b2e:	d0f8      	beq.n	8022b22 <sbrk_aligned+0x22>
 8022b30:	1a21      	subs	r1, r4, r0
 8022b32:	4628      	mov	r0, r5
 8022b34:	f000 faa0 	bl	8023078 <_sbrk_r>
 8022b38:	3001      	adds	r0, #1
 8022b3a:	d1f2      	bne.n	8022b22 <sbrk_aligned+0x22>
 8022b3c:	e7ef      	b.n	8022b1e <sbrk_aligned+0x1e>
 8022b3e:	bf00      	nop
 8022b40:	2402e3e0 	.word	0x2402e3e0

08022b44 <_malloc_r>:
 8022b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b48:	1ccd      	adds	r5, r1, #3
 8022b4a:	f025 0503 	bic.w	r5, r5, #3
 8022b4e:	3508      	adds	r5, #8
 8022b50:	2d0c      	cmp	r5, #12
 8022b52:	bf38      	it	cc
 8022b54:	250c      	movcc	r5, #12
 8022b56:	2d00      	cmp	r5, #0
 8022b58:	4606      	mov	r6, r0
 8022b5a:	db01      	blt.n	8022b60 <_malloc_r+0x1c>
 8022b5c:	42a9      	cmp	r1, r5
 8022b5e:	d904      	bls.n	8022b6a <_malloc_r+0x26>
 8022b60:	230c      	movs	r3, #12
 8022b62:	6033      	str	r3, [r6, #0]
 8022b64:	2000      	movs	r0, #0
 8022b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022c40 <_malloc_r+0xfc>
 8022b6e:	f000 f869 	bl	8022c44 <__malloc_lock>
 8022b72:	f8d8 3000 	ldr.w	r3, [r8]
 8022b76:	461c      	mov	r4, r3
 8022b78:	bb44      	cbnz	r4, 8022bcc <_malloc_r+0x88>
 8022b7a:	4629      	mov	r1, r5
 8022b7c:	4630      	mov	r0, r6
 8022b7e:	f7ff ffbf 	bl	8022b00 <sbrk_aligned>
 8022b82:	1c43      	adds	r3, r0, #1
 8022b84:	4604      	mov	r4, r0
 8022b86:	d158      	bne.n	8022c3a <_malloc_r+0xf6>
 8022b88:	f8d8 4000 	ldr.w	r4, [r8]
 8022b8c:	4627      	mov	r7, r4
 8022b8e:	2f00      	cmp	r7, #0
 8022b90:	d143      	bne.n	8022c1a <_malloc_r+0xd6>
 8022b92:	2c00      	cmp	r4, #0
 8022b94:	d04b      	beq.n	8022c2e <_malloc_r+0xea>
 8022b96:	6823      	ldr	r3, [r4, #0]
 8022b98:	4639      	mov	r1, r7
 8022b9a:	4630      	mov	r0, r6
 8022b9c:	eb04 0903 	add.w	r9, r4, r3
 8022ba0:	f000 fa6a 	bl	8023078 <_sbrk_r>
 8022ba4:	4581      	cmp	r9, r0
 8022ba6:	d142      	bne.n	8022c2e <_malloc_r+0xea>
 8022ba8:	6821      	ldr	r1, [r4, #0]
 8022baa:	1a6d      	subs	r5, r5, r1
 8022bac:	4629      	mov	r1, r5
 8022bae:	4630      	mov	r0, r6
 8022bb0:	f7ff ffa6 	bl	8022b00 <sbrk_aligned>
 8022bb4:	3001      	adds	r0, #1
 8022bb6:	d03a      	beq.n	8022c2e <_malloc_r+0xea>
 8022bb8:	6823      	ldr	r3, [r4, #0]
 8022bba:	442b      	add	r3, r5
 8022bbc:	6023      	str	r3, [r4, #0]
 8022bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8022bc2:	685a      	ldr	r2, [r3, #4]
 8022bc4:	bb62      	cbnz	r2, 8022c20 <_malloc_r+0xdc>
 8022bc6:	f8c8 7000 	str.w	r7, [r8]
 8022bca:	e00f      	b.n	8022bec <_malloc_r+0xa8>
 8022bcc:	6822      	ldr	r2, [r4, #0]
 8022bce:	1b52      	subs	r2, r2, r5
 8022bd0:	d420      	bmi.n	8022c14 <_malloc_r+0xd0>
 8022bd2:	2a0b      	cmp	r2, #11
 8022bd4:	d917      	bls.n	8022c06 <_malloc_r+0xc2>
 8022bd6:	1961      	adds	r1, r4, r5
 8022bd8:	42a3      	cmp	r3, r4
 8022bda:	6025      	str	r5, [r4, #0]
 8022bdc:	bf18      	it	ne
 8022bde:	6059      	strne	r1, [r3, #4]
 8022be0:	6863      	ldr	r3, [r4, #4]
 8022be2:	bf08      	it	eq
 8022be4:	f8c8 1000 	streq.w	r1, [r8]
 8022be8:	5162      	str	r2, [r4, r5]
 8022bea:	604b      	str	r3, [r1, #4]
 8022bec:	4630      	mov	r0, r6
 8022bee:	f000 f82f 	bl	8022c50 <__malloc_unlock>
 8022bf2:	f104 000b 	add.w	r0, r4, #11
 8022bf6:	1d23      	adds	r3, r4, #4
 8022bf8:	f020 0007 	bic.w	r0, r0, #7
 8022bfc:	1ac2      	subs	r2, r0, r3
 8022bfe:	bf1c      	itt	ne
 8022c00:	1a1b      	subne	r3, r3, r0
 8022c02:	50a3      	strne	r3, [r4, r2]
 8022c04:	e7af      	b.n	8022b66 <_malloc_r+0x22>
 8022c06:	6862      	ldr	r2, [r4, #4]
 8022c08:	42a3      	cmp	r3, r4
 8022c0a:	bf0c      	ite	eq
 8022c0c:	f8c8 2000 	streq.w	r2, [r8]
 8022c10:	605a      	strne	r2, [r3, #4]
 8022c12:	e7eb      	b.n	8022bec <_malloc_r+0xa8>
 8022c14:	4623      	mov	r3, r4
 8022c16:	6864      	ldr	r4, [r4, #4]
 8022c18:	e7ae      	b.n	8022b78 <_malloc_r+0x34>
 8022c1a:	463c      	mov	r4, r7
 8022c1c:	687f      	ldr	r7, [r7, #4]
 8022c1e:	e7b6      	b.n	8022b8e <_malloc_r+0x4a>
 8022c20:	461a      	mov	r2, r3
 8022c22:	685b      	ldr	r3, [r3, #4]
 8022c24:	42a3      	cmp	r3, r4
 8022c26:	d1fb      	bne.n	8022c20 <_malloc_r+0xdc>
 8022c28:	2300      	movs	r3, #0
 8022c2a:	6053      	str	r3, [r2, #4]
 8022c2c:	e7de      	b.n	8022bec <_malloc_r+0xa8>
 8022c2e:	230c      	movs	r3, #12
 8022c30:	6033      	str	r3, [r6, #0]
 8022c32:	4630      	mov	r0, r6
 8022c34:	f000 f80c 	bl	8022c50 <__malloc_unlock>
 8022c38:	e794      	b.n	8022b64 <_malloc_r+0x20>
 8022c3a:	6005      	str	r5, [r0, #0]
 8022c3c:	e7d6      	b.n	8022bec <_malloc_r+0xa8>
 8022c3e:	bf00      	nop
 8022c40:	2402e3e4 	.word	0x2402e3e4

08022c44 <__malloc_lock>:
 8022c44:	4801      	ldr	r0, [pc, #4]	@ (8022c4c <__malloc_lock+0x8>)
 8022c46:	f000 ba64 	b.w	8023112 <__retarget_lock_acquire_recursive>
 8022c4a:	bf00      	nop
 8022c4c:	2402e528 	.word	0x2402e528

08022c50 <__malloc_unlock>:
 8022c50:	4801      	ldr	r0, [pc, #4]	@ (8022c58 <__malloc_unlock+0x8>)
 8022c52:	f000 ba5f 	b.w	8023114 <__retarget_lock_release_recursive>
 8022c56:	bf00      	nop
 8022c58:	2402e528 	.word	0x2402e528

08022c5c <__cxa_atexit>:
 8022c5c:	b510      	push	{r4, lr}
 8022c5e:	4604      	mov	r4, r0
 8022c60:	4804      	ldr	r0, [pc, #16]	@ (8022c74 <__cxa_atexit+0x18>)
 8022c62:	4613      	mov	r3, r2
 8022c64:	b120      	cbz	r0, 8022c70 <__cxa_atexit+0x14>
 8022c66:	460a      	mov	r2, r1
 8022c68:	2002      	movs	r0, #2
 8022c6a:	4621      	mov	r1, r4
 8022c6c:	f000 fa62 	bl	8023134 <__register_exitproc>
 8022c70:	bd10      	pop	{r4, pc}
 8022c72:	bf00      	nop
 8022c74:	08023135 	.word	0x08023135

08022c78 <std>:
 8022c78:	2300      	movs	r3, #0
 8022c7a:	b510      	push	{r4, lr}
 8022c7c:	4604      	mov	r4, r0
 8022c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8022c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022c86:	6083      	str	r3, [r0, #8]
 8022c88:	8181      	strh	r1, [r0, #12]
 8022c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8022c8c:	81c2      	strh	r2, [r0, #14]
 8022c8e:	6183      	str	r3, [r0, #24]
 8022c90:	4619      	mov	r1, r3
 8022c92:	2208      	movs	r2, #8
 8022c94:	305c      	adds	r0, #92	@ 0x5c
 8022c96:	f000 f918 	bl	8022eca <memset>
 8022c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8022cd0 <std+0x58>)
 8022c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8022c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8022cd4 <std+0x5c>)
 8022ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8022cd8 <std+0x60>)
 8022ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8022cdc <std+0x64>)
 8022ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8022caa:	4b0d      	ldr	r3, [pc, #52]	@ (8022ce0 <std+0x68>)
 8022cac:	6224      	str	r4, [r4, #32]
 8022cae:	429c      	cmp	r4, r3
 8022cb0:	d006      	beq.n	8022cc0 <std+0x48>
 8022cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022cb6:	4294      	cmp	r4, r2
 8022cb8:	d002      	beq.n	8022cc0 <std+0x48>
 8022cba:	33d0      	adds	r3, #208	@ 0xd0
 8022cbc:	429c      	cmp	r4, r3
 8022cbe:	d105      	bne.n	8022ccc <std+0x54>
 8022cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022cc8:	f000 ba22 	b.w	8023110 <__retarget_lock_init_recursive>
 8022ccc:	bd10      	pop	{r4, pc}
 8022cce:	bf00      	nop
 8022cd0:	08022e45 	.word	0x08022e45
 8022cd4:	08022e67 	.word	0x08022e67
 8022cd8:	08022e9f 	.word	0x08022e9f
 8022cdc:	08022ec3 	.word	0x08022ec3
 8022ce0:	2402e3e8 	.word	0x2402e3e8

08022ce4 <stdio_exit_handler>:
 8022ce4:	4a02      	ldr	r2, [pc, #8]	@ (8022cf0 <stdio_exit_handler+0xc>)
 8022ce6:	4903      	ldr	r1, [pc, #12]	@ (8022cf4 <stdio_exit_handler+0x10>)
 8022ce8:	4803      	ldr	r0, [pc, #12]	@ (8022cf8 <stdio_exit_handler+0x14>)
 8022cea:	f000 b87b 	b.w	8022de4 <_fwalk_sglue>
 8022cee:	bf00      	nop
 8022cf0:	240000e0 	.word	0x240000e0
 8022cf4:	08023929 	.word	0x08023929
 8022cf8:	240000f0 	.word	0x240000f0

08022cfc <cleanup_stdio>:
 8022cfc:	6841      	ldr	r1, [r0, #4]
 8022cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8022d30 <cleanup_stdio+0x34>)
 8022d00:	4299      	cmp	r1, r3
 8022d02:	b510      	push	{r4, lr}
 8022d04:	4604      	mov	r4, r0
 8022d06:	d001      	beq.n	8022d0c <cleanup_stdio+0x10>
 8022d08:	f000 fe0e 	bl	8023928 <_fflush_r>
 8022d0c:	68a1      	ldr	r1, [r4, #8]
 8022d0e:	4b09      	ldr	r3, [pc, #36]	@ (8022d34 <cleanup_stdio+0x38>)
 8022d10:	4299      	cmp	r1, r3
 8022d12:	d002      	beq.n	8022d1a <cleanup_stdio+0x1e>
 8022d14:	4620      	mov	r0, r4
 8022d16:	f000 fe07 	bl	8023928 <_fflush_r>
 8022d1a:	68e1      	ldr	r1, [r4, #12]
 8022d1c:	4b06      	ldr	r3, [pc, #24]	@ (8022d38 <cleanup_stdio+0x3c>)
 8022d1e:	4299      	cmp	r1, r3
 8022d20:	d004      	beq.n	8022d2c <cleanup_stdio+0x30>
 8022d22:	4620      	mov	r0, r4
 8022d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d28:	f000 bdfe 	b.w	8023928 <_fflush_r>
 8022d2c:	bd10      	pop	{r4, pc}
 8022d2e:	bf00      	nop
 8022d30:	2402e3e8 	.word	0x2402e3e8
 8022d34:	2402e450 	.word	0x2402e450
 8022d38:	2402e4b8 	.word	0x2402e4b8

08022d3c <global_stdio_init.part.0>:
 8022d3c:	b510      	push	{r4, lr}
 8022d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8022d6c <global_stdio_init.part.0+0x30>)
 8022d40:	4c0b      	ldr	r4, [pc, #44]	@ (8022d70 <global_stdio_init.part.0+0x34>)
 8022d42:	4a0c      	ldr	r2, [pc, #48]	@ (8022d74 <global_stdio_init.part.0+0x38>)
 8022d44:	601a      	str	r2, [r3, #0]
 8022d46:	4620      	mov	r0, r4
 8022d48:	2200      	movs	r2, #0
 8022d4a:	2104      	movs	r1, #4
 8022d4c:	f7ff ff94 	bl	8022c78 <std>
 8022d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022d54:	2201      	movs	r2, #1
 8022d56:	2109      	movs	r1, #9
 8022d58:	f7ff ff8e 	bl	8022c78 <std>
 8022d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022d60:	2202      	movs	r2, #2
 8022d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d66:	2112      	movs	r1, #18
 8022d68:	f7ff bf86 	b.w	8022c78 <std>
 8022d6c:	2402e520 	.word	0x2402e520
 8022d70:	2402e3e8 	.word	0x2402e3e8
 8022d74:	08022ce5 	.word	0x08022ce5

08022d78 <__sfp_lock_acquire>:
 8022d78:	4801      	ldr	r0, [pc, #4]	@ (8022d80 <__sfp_lock_acquire+0x8>)
 8022d7a:	f000 b9ca 	b.w	8023112 <__retarget_lock_acquire_recursive>
 8022d7e:	bf00      	nop
 8022d80:	2402e52a 	.word	0x2402e52a

08022d84 <__sfp_lock_release>:
 8022d84:	4801      	ldr	r0, [pc, #4]	@ (8022d8c <__sfp_lock_release+0x8>)
 8022d86:	f000 b9c5 	b.w	8023114 <__retarget_lock_release_recursive>
 8022d8a:	bf00      	nop
 8022d8c:	2402e52a 	.word	0x2402e52a

08022d90 <__sinit>:
 8022d90:	b510      	push	{r4, lr}
 8022d92:	4604      	mov	r4, r0
 8022d94:	f7ff fff0 	bl	8022d78 <__sfp_lock_acquire>
 8022d98:	6a23      	ldr	r3, [r4, #32]
 8022d9a:	b11b      	cbz	r3, 8022da4 <__sinit+0x14>
 8022d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022da0:	f7ff bff0 	b.w	8022d84 <__sfp_lock_release>
 8022da4:	4b04      	ldr	r3, [pc, #16]	@ (8022db8 <__sinit+0x28>)
 8022da6:	6223      	str	r3, [r4, #32]
 8022da8:	4b04      	ldr	r3, [pc, #16]	@ (8022dbc <__sinit+0x2c>)
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	d1f5      	bne.n	8022d9c <__sinit+0xc>
 8022db0:	f7ff ffc4 	bl	8022d3c <global_stdio_init.part.0>
 8022db4:	e7f2      	b.n	8022d9c <__sinit+0xc>
 8022db6:	bf00      	nop
 8022db8:	08022cfd 	.word	0x08022cfd
 8022dbc:	2402e520 	.word	0x2402e520

08022dc0 <fiprintf>:
 8022dc0:	b40e      	push	{r1, r2, r3}
 8022dc2:	b503      	push	{r0, r1, lr}
 8022dc4:	4601      	mov	r1, r0
 8022dc6:	ab03      	add	r3, sp, #12
 8022dc8:	4805      	ldr	r0, [pc, #20]	@ (8022de0 <fiprintf+0x20>)
 8022dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dce:	6800      	ldr	r0, [r0, #0]
 8022dd0:	9301      	str	r3, [sp, #4]
 8022dd2:	f000 fa7f 	bl	80232d4 <_vfiprintf_r>
 8022dd6:	b002      	add	sp, #8
 8022dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ddc:	b003      	add	sp, #12
 8022dde:	4770      	bx	lr
 8022de0:	240000ec 	.word	0x240000ec

08022de4 <_fwalk_sglue>:
 8022de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022de8:	4607      	mov	r7, r0
 8022dea:	4688      	mov	r8, r1
 8022dec:	4614      	mov	r4, r2
 8022dee:	2600      	movs	r6, #0
 8022df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022df4:	f1b9 0901 	subs.w	r9, r9, #1
 8022df8:	d505      	bpl.n	8022e06 <_fwalk_sglue+0x22>
 8022dfa:	6824      	ldr	r4, [r4, #0]
 8022dfc:	2c00      	cmp	r4, #0
 8022dfe:	d1f7      	bne.n	8022df0 <_fwalk_sglue+0xc>
 8022e00:	4630      	mov	r0, r6
 8022e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e06:	89ab      	ldrh	r3, [r5, #12]
 8022e08:	2b01      	cmp	r3, #1
 8022e0a:	d907      	bls.n	8022e1c <_fwalk_sglue+0x38>
 8022e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022e10:	3301      	adds	r3, #1
 8022e12:	d003      	beq.n	8022e1c <_fwalk_sglue+0x38>
 8022e14:	4629      	mov	r1, r5
 8022e16:	4638      	mov	r0, r7
 8022e18:	47c0      	blx	r8
 8022e1a:	4306      	orrs	r6, r0
 8022e1c:	3568      	adds	r5, #104	@ 0x68
 8022e1e:	e7e9      	b.n	8022df4 <_fwalk_sglue+0x10>

08022e20 <iprintf>:
 8022e20:	b40f      	push	{r0, r1, r2, r3}
 8022e22:	b507      	push	{r0, r1, r2, lr}
 8022e24:	4906      	ldr	r1, [pc, #24]	@ (8022e40 <iprintf+0x20>)
 8022e26:	ab04      	add	r3, sp, #16
 8022e28:	6808      	ldr	r0, [r1, #0]
 8022e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e2e:	6881      	ldr	r1, [r0, #8]
 8022e30:	9301      	str	r3, [sp, #4]
 8022e32:	f000 fa4f 	bl	80232d4 <_vfiprintf_r>
 8022e36:	b003      	add	sp, #12
 8022e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e3c:	b004      	add	sp, #16
 8022e3e:	4770      	bx	lr
 8022e40:	240000ec 	.word	0x240000ec

08022e44 <__sread>:
 8022e44:	b510      	push	{r4, lr}
 8022e46:	460c      	mov	r4, r1
 8022e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e4c:	f000 f8ee 	bl	802302c <_read_r>
 8022e50:	2800      	cmp	r0, #0
 8022e52:	bfab      	itete	ge
 8022e54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022e56:	89a3      	ldrhlt	r3, [r4, #12]
 8022e58:	181b      	addge	r3, r3, r0
 8022e5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022e5e:	bfac      	ite	ge
 8022e60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022e62:	81a3      	strhlt	r3, [r4, #12]
 8022e64:	bd10      	pop	{r4, pc}

08022e66 <__swrite>:
 8022e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e6a:	461f      	mov	r7, r3
 8022e6c:	898b      	ldrh	r3, [r1, #12]
 8022e6e:	05db      	lsls	r3, r3, #23
 8022e70:	4605      	mov	r5, r0
 8022e72:	460c      	mov	r4, r1
 8022e74:	4616      	mov	r6, r2
 8022e76:	d505      	bpl.n	8022e84 <__swrite+0x1e>
 8022e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e7c:	2302      	movs	r3, #2
 8022e7e:	2200      	movs	r2, #0
 8022e80:	f000 f8c2 	bl	8023008 <_lseek_r>
 8022e84:	89a3      	ldrh	r3, [r4, #12]
 8022e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022e8e:	81a3      	strh	r3, [r4, #12]
 8022e90:	4632      	mov	r2, r6
 8022e92:	463b      	mov	r3, r7
 8022e94:	4628      	mov	r0, r5
 8022e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022e9a:	f000 b8fd 	b.w	8023098 <_write_r>

08022e9e <__sseek>:
 8022e9e:	b510      	push	{r4, lr}
 8022ea0:	460c      	mov	r4, r1
 8022ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ea6:	f000 f8af 	bl	8023008 <_lseek_r>
 8022eaa:	1c43      	adds	r3, r0, #1
 8022eac:	89a3      	ldrh	r3, [r4, #12]
 8022eae:	bf15      	itete	ne
 8022eb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022eb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022eb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022eba:	81a3      	strheq	r3, [r4, #12]
 8022ebc:	bf18      	it	ne
 8022ebe:	81a3      	strhne	r3, [r4, #12]
 8022ec0:	bd10      	pop	{r4, pc}

08022ec2 <__sclose>:
 8022ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ec6:	f000 b839 	b.w	8022f3c <_close_r>

08022eca <memset>:
 8022eca:	4402      	add	r2, r0
 8022ecc:	4603      	mov	r3, r0
 8022ece:	4293      	cmp	r3, r2
 8022ed0:	d100      	bne.n	8022ed4 <memset+0xa>
 8022ed2:	4770      	bx	lr
 8022ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8022ed8:	e7f9      	b.n	8022ece <memset+0x4>

08022eda <_raise_r>:
 8022eda:	291f      	cmp	r1, #31
 8022edc:	b538      	push	{r3, r4, r5, lr}
 8022ede:	4605      	mov	r5, r0
 8022ee0:	460c      	mov	r4, r1
 8022ee2:	d904      	bls.n	8022eee <_raise_r+0x14>
 8022ee4:	2316      	movs	r3, #22
 8022ee6:	6003      	str	r3, [r0, #0]
 8022ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8022eec:	bd38      	pop	{r3, r4, r5, pc}
 8022eee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022ef0:	b112      	cbz	r2, 8022ef8 <_raise_r+0x1e>
 8022ef2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022ef6:	b94b      	cbnz	r3, 8022f0c <_raise_r+0x32>
 8022ef8:	4628      	mov	r0, r5
 8022efa:	f000 f8bb 	bl	8023074 <_getpid_r>
 8022efe:	4622      	mov	r2, r4
 8022f00:	4601      	mov	r1, r0
 8022f02:	4628      	mov	r0, r5
 8022f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f08:	f000 b8a2 	b.w	8023050 <_kill_r>
 8022f0c:	2b01      	cmp	r3, #1
 8022f0e:	d00a      	beq.n	8022f26 <_raise_r+0x4c>
 8022f10:	1c59      	adds	r1, r3, #1
 8022f12:	d103      	bne.n	8022f1c <_raise_r+0x42>
 8022f14:	2316      	movs	r3, #22
 8022f16:	6003      	str	r3, [r0, #0]
 8022f18:	2001      	movs	r0, #1
 8022f1a:	e7e7      	b.n	8022eec <_raise_r+0x12>
 8022f1c:	2100      	movs	r1, #0
 8022f1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022f22:	4620      	mov	r0, r4
 8022f24:	4798      	blx	r3
 8022f26:	2000      	movs	r0, #0
 8022f28:	e7e0      	b.n	8022eec <_raise_r+0x12>
	...

08022f2c <raise>:
 8022f2c:	4b02      	ldr	r3, [pc, #8]	@ (8022f38 <raise+0xc>)
 8022f2e:	4601      	mov	r1, r0
 8022f30:	6818      	ldr	r0, [r3, #0]
 8022f32:	f7ff bfd2 	b.w	8022eda <_raise_r>
 8022f36:	bf00      	nop
 8022f38:	240000ec 	.word	0x240000ec

08022f3c <_close_r>:
 8022f3c:	b538      	push	{r3, r4, r5, lr}
 8022f3e:	4d06      	ldr	r5, [pc, #24]	@ (8022f58 <_close_r+0x1c>)
 8022f40:	2300      	movs	r3, #0
 8022f42:	4604      	mov	r4, r0
 8022f44:	4608      	mov	r0, r1
 8022f46:	602b      	str	r3, [r5, #0]
 8022f48:	f7de ff30 	bl	8001dac <_close>
 8022f4c:	1c43      	adds	r3, r0, #1
 8022f4e:	d102      	bne.n	8022f56 <_close_r+0x1a>
 8022f50:	682b      	ldr	r3, [r5, #0]
 8022f52:	b103      	cbz	r3, 8022f56 <_close_r+0x1a>
 8022f54:	6023      	str	r3, [r4, #0]
 8022f56:	bd38      	pop	{r3, r4, r5, pc}
 8022f58:	2402e524 	.word	0x2402e524

08022f5c <_reclaim_reent>:
 8022f5c:	4b29      	ldr	r3, [pc, #164]	@ (8023004 <_reclaim_reent+0xa8>)
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	4283      	cmp	r3, r0
 8022f62:	b570      	push	{r4, r5, r6, lr}
 8022f64:	4604      	mov	r4, r0
 8022f66:	d04b      	beq.n	8023000 <_reclaim_reent+0xa4>
 8022f68:	69c3      	ldr	r3, [r0, #28]
 8022f6a:	b1ab      	cbz	r3, 8022f98 <_reclaim_reent+0x3c>
 8022f6c:	68db      	ldr	r3, [r3, #12]
 8022f6e:	b16b      	cbz	r3, 8022f8c <_reclaim_reent+0x30>
 8022f70:	2500      	movs	r5, #0
 8022f72:	69e3      	ldr	r3, [r4, #28]
 8022f74:	68db      	ldr	r3, [r3, #12]
 8022f76:	5959      	ldr	r1, [r3, r5]
 8022f78:	2900      	cmp	r1, #0
 8022f7a:	d13b      	bne.n	8022ff4 <_reclaim_reent+0x98>
 8022f7c:	3504      	adds	r5, #4
 8022f7e:	2d80      	cmp	r5, #128	@ 0x80
 8022f80:	d1f7      	bne.n	8022f72 <_reclaim_reent+0x16>
 8022f82:	69e3      	ldr	r3, [r4, #28]
 8022f84:	4620      	mov	r0, r4
 8022f86:	68d9      	ldr	r1, [r3, #12]
 8022f88:	f000 f930 	bl	80231ec <_free_r>
 8022f8c:	69e3      	ldr	r3, [r4, #28]
 8022f8e:	6819      	ldr	r1, [r3, #0]
 8022f90:	b111      	cbz	r1, 8022f98 <_reclaim_reent+0x3c>
 8022f92:	4620      	mov	r0, r4
 8022f94:	f000 f92a 	bl	80231ec <_free_r>
 8022f98:	6961      	ldr	r1, [r4, #20]
 8022f9a:	b111      	cbz	r1, 8022fa2 <_reclaim_reent+0x46>
 8022f9c:	4620      	mov	r0, r4
 8022f9e:	f000 f925 	bl	80231ec <_free_r>
 8022fa2:	69e1      	ldr	r1, [r4, #28]
 8022fa4:	b111      	cbz	r1, 8022fac <_reclaim_reent+0x50>
 8022fa6:	4620      	mov	r0, r4
 8022fa8:	f000 f920 	bl	80231ec <_free_r>
 8022fac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022fae:	b111      	cbz	r1, 8022fb6 <_reclaim_reent+0x5a>
 8022fb0:	4620      	mov	r0, r4
 8022fb2:	f000 f91b 	bl	80231ec <_free_r>
 8022fb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022fb8:	b111      	cbz	r1, 8022fc0 <_reclaim_reent+0x64>
 8022fba:	4620      	mov	r0, r4
 8022fbc:	f000 f916 	bl	80231ec <_free_r>
 8022fc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8022fc2:	b111      	cbz	r1, 8022fca <_reclaim_reent+0x6e>
 8022fc4:	4620      	mov	r0, r4
 8022fc6:	f000 f911 	bl	80231ec <_free_r>
 8022fca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8022fcc:	b111      	cbz	r1, 8022fd4 <_reclaim_reent+0x78>
 8022fce:	4620      	mov	r0, r4
 8022fd0:	f000 f90c 	bl	80231ec <_free_r>
 8022fd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8022fd6:	b111      	cbz	r1, 8022fde <_reclaim_reent+0x82>
 8022fd8:	4620      	mov	r0, r4
 8022fda:	f000 f907 	bl	80231ec <_free_r>
 8022fde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022fe0:	b111      	cbz	r1, 8022fe8 <_reclaim_reent+0x8c>
 8022fe2:	4620      	mov	r0, r4
 8022fe4:	f000 f902 	bl	80231ec <_free_r>
 8022fe8:	6a23      	ldr	r3, [r4, #32]
 8022fea:	b14b      	cbz	r3, 8023000 <_reclaim_reent+0xa4>
 8022fec:	4620      	mov	r0, r4
 8022fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022ff2:	4718      	bx	r3
 8022ff4:	680e      	ldr	r6, [r1, #0]
 8022ff6:	4620      	mov	r0, r4
 8022ff8:	f000 f8f8 	bl	80231ec <_free_r>
 8022ffc:	4631      	mov	r1, r6
 8022ffe:	e7bb      	b.n	8022f78 <_reclaim_reent+0x1c>
 8023000:	bd70      	pop	{r4, r5, r6, pc}
 8023002:	bf00      	nop
 8023004:	240000ec 	.word	0x240000ec

08023008 <_lseek_r>:
 8023008:	b538      	push	{r3, r4, r5, lr}
 802300a:	4d07      	ldr	r5, [pc, #28]	@ (8023028 <_lseek_r+0x20>)
 802300c:	4604      	mov	r4, r0
 802300e:	4608      	mov	r0, r1
 8023010:	4611      	mov	r1, r2
 8023012:	2200      	movs	r2, #0
 8023014:	602a      	str	r2, [r5, #0]
 8023016:	461a      	mov	r2, r3
 8023018:	f7de fed2 	bl	8001dc0 <_lseek>
 802301c:	1c43      	adds	r3, r0, #1
 802301e:	d102      	bne.n	8023026 <_lseek_r+0x1e>
 8023020:	682b      	ldr	r3, [r5, #0]
 8023022:	b103      	cbz	r3, 8023026 <_lseek_r+0x1e>
 8023024:	6023      	str	r3, [r4, #0]
 8023026:	bd38      	pop	{r3, r4, r5, pc}
 8023028:	2402e524 	.word	0x2402e524

0802302c <_read_r>:
 802302c:	b538      	push	{r3, r4, r5, lr}
 802302e:	4d07      	ldr	r5, [pc, #28]	@ (802304c <_read_r+0x20>)
 8023030:	4604      	mov	r4, r0
 8023032:	4608      	mov	r0, r1
 8023034:	4611      	mov	r1, r2
 8023036:	2200      	movs	r2, #0
 8023038:	602a      	str	r2, [r5, #0]
 802303a:	461a      	mov	r2, r3
 802303c:	f7de fea8 	bl	8001d90 <_read>
 8023040:	1c43      	adds	r3, r0, #1
 8023042:	d102      	bne.n	802304a <_read_r+0x1e>
 8023044:	682b      	ldr	r3, [r5, #0]
 8023046:	b103      	cbz	r3, 802304a <_read_r+0x1e>
 8023048:	6023      	str	r3, [r4, #0]
 802304a:	bd38      	pop	{r3, r4, r5, pc}
 802304c:	2402e524 	.word	0x2402e524

08023050 <_kill_r>:
 8023050:	b538      	push	{r3, r4, r5, lr}
 8023052:	4d07      	ldr	r5, [pc, #28]	@ (8023070 <_kill_r+0x20>)
 8023054:	2300      	movs	r3, #0
 8023056:	4604      	mov	r4, r0
 8023058:	4608      	mov	r0, r1
 802305a:	4611      	mov	r1, r2
 802305c:	602b      	str	r3, [r5, #0]
 802305e:	f7de fe89 	bl	8001d74 <_kill>
 8023062:	1c43      	adds	r3, r0, #1
 8023064:	d102      	bne.n	802306c <_kill_r+0x1c>
 8023066:	682b      	ldr	r3, [r5, #0]
 8023068:	b103      	cbz	r3, 802306c <_kill_r+0x1c>
 802306a:	6023      	str	r3, [r4, #0]
 802306c:	bd38      	pop	{r3, r4, r5, pc}
 802306e:	bf00      	nop
 8023070:	2402e524 	.word	0x2402e524

08023074 <_getpid_r>:
 8023074:	f7de be7c 	b.w	8001d70 <_getpid>

08023078 <_sbrk_r>:
 8023078:	b538      	push	{r3, r4, r5, lr}
 802307a:	4d06      	ldr	r5, [pc, #24]	@ (8023094 <_sbrk_r+0x1c>)
 802307c:	2300      	movs	r3, #0
 802307e:	4604      	mov	r4, r0
 8023080:	4608      	mov	r0, r1
 8023082:	602b      	str	r3, [r5, #0]
 8023084:	f7de fe9e 	bl	8001dc4 <_sbrk>
 8023088:	1c43      	adds	r3, r0, #1
 802308a:	d102      	bne.n	8023092 <_sbrk_r+0x1a>
 802308c:	682b      	ldr	r3, [r5, #0]
 802308e:	b103      	cbz	r3, 8023092 <_sbrk_r+0x1a>
 8023090:	6023      	str	r3, [r4, #0]
 8023092:	bd38      	pop	{r3, r4, r5, pc}
 8023094:	2402e524 	.word	0x2402e524

08023098 <_write_r>:
 8023098:	b538      	push	{r3, r4, r5, lr}
 802309a:	4d07      	ldr	r5, [pc, #28]	@ (80230b8 <_write_r+0x20>)
 802309c:	4604      	mov	r4, r0
 802309e:	4608      	mov	r0, r1
 80230a0:	4611      	mov	r1, r2
 80230a2:	2200      	movs	r2, #0
 80230a4:	602a      	str	r2, [r5, #0]
 80230a6:	461a      	mov	r2, r3
 80230a8:	f7de f8bc 	bl	8001224 <_write>
 80230ac:	1c43      	adds	r3, r0, #1
 80230ae:	d102      	bne.n	80230b6 <_write_r+0x1e>
 80230b0:	682b      	ldr	r3, [r5, #0]
 80230b2:	b103      	cbz	r3, 80230b6 <_write_r+0x1e>
 80230b4:	6023      	str	r3, [r4, #0]
 80230b6:	bd38      	pop	{r3, r4, r5, pc}
 80230b8:	2402e524 	.word	0x2402e524

080230bc <__errno>:
 80230bc:	4b01      	ldr	r3, [pc, #4]	@ (80230c4 <__errno+0x8>)
 80230be:	6818      	ldr	r0, [r3, #0]
 80230c0:	4770      	bx	lr
 80230c2:	bf00      	nop
 80230c4:	240000ec 	.word	0x240000ec

080230c8 <__libc_init_array>:
 80230c8:	b570      	push	{r4, r5, r6, lr}
 80230ca:	4d0d      	ldr	r5, [pc, #52]	@ (8023100 <__libc_init_array+0x38>)
 80230cc:	4c0d      	ldr	r4, [pc, #52]	@ (8023104 <__libc_init_array+0x3c>)
 80230ce:	1b64      	subs	r4, r4, r5
 80230d0:	10a4      	asrs	r4, r4, #2
 80230d2:	2600      	movs	r6, #0
 80230d4:	42a6      	cmp	r6, r4
 80230d6:	d109      	bne.n	80230ec <__libc_init_array+0x24>
 80230d8:	4d0b      	ldr	r5, [pc, #44]	@ (8023108 <__libc_init_array+0x40>)
 80230da:	4c0c      	ldr	r4, [pc, #48]	@ (802310c <__libc_init_array+0x44>)
 80230dc:	f000 fd64 	bl	8023ba8 <_init>
 80230e0:	1b64      	subs	r4, r4, r5
 80230e2:	10a4      	asrs	r4, r4, #2
 80230e4:	2600      	movs	r6, #0
 80230e6:	42a6      	cmp	r6, r4
 80230e8:	d105      	bne.n	80230f6 <__libc_init_array+0x2e>
 80230ea:	bd70      	pop	{r4, r5, r6, pc}
 80230ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80230f0:	4798      	blx	r3
 80230f2:	3601      	adds	r6, #1
 80230f4:	e7ee      	b.n	80230d4 <__libc_init_array+0xc>
 80230f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80230fa:	4798      	blx	r3
 80230fc:	3601      	adds	r6, #1
 80230fe:	e7f2      	b.n	80230e6 <__libc_init_array+0x1e>
 8023100:	08099798 	.word	0x08099798
 8023104:	08099798 	.word	0x08099798
 8023108:	08099798 	.word	0x08099798
 802310c:	080997b0 	.word	0x080997b0

08023110 <__retarget_lock_init_recursive>:
 8023110:	4770      	bx	lr

08023112 <__retarget_lock_acquire_recursive>:
 8023112:	4770      	bx	lr

08023114 <__retarget_lock_release_recursive>:
 8023114:	4770      	bx	lr

08023116 <memcpy>:
 8023116:	440a      	add	r2, r1
 8023118:	4291      	cmp	r1, r2
 802311a:	f100 33ff 	add.w	r3, r0, #4294967295
 802311e:	d100      	bne.n	8023122 <memcpy+0xc>
 8023120:	4770      	bx	lr
 8023122:	b510      	push	{r4, lr}
 8023124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023128:	f803 4f01 	strb.w	r4, [r3, #1]!
 802312c:	4291      	cmp	r1, r2
 802312e:	d1f9      	bne.n	8023124 <memcpy+0xe>
 8023130:	bd10      	pop	{r4, pc}
	...

08023134 <__register_exitproc>:
 8023134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023138:	4d27      	ldr	r5, [pc, #156]	@ (80231d8 <__register_exitproc+0xa4>)
 802313a:	4607      	mov	r7, r0
 802313c:	6828      	ldr	r0, [r5, #0]
 802313e:	4691      	mov	r9, r2
 8023140:	460e      	mov	r6, r1
 8023142:	4698      	mov	r8, r3
 8023144:	f7ff ffe5 	bl	8023112 <__retarget_lock_acquire_recursive>
 8023148:	4a24      	ldr	r2, [pc, #144]	@ (80231dc <__register_exitproc+0xa8>)
 802314a:	6814      	ldr	r4, [r2, #0]
 802314c:	b93c      	cbnz	r4, 802315e <__register_exitproc+0x2a>
 802314e:	4b24      	ldr	r3, [pc, #144]	@ (80231e0 <__register_exitproc+0xac>)
 8023150:	6013      	str	r3, [r2, #0]
 8023152:	4a24      	ldr	r2, [pc, #144]	@ (80231e4 <__register_exitproc+0xb0>)
 8023154:	b112      	cbz	r2, 802315c <__register_exitproc+0x28>
 8023156:	6812      	ldr	r2, [r2, #0]
 8023158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802315c:	4c20      	ldr	r4, [pc, #128]	@ (80231e0 <__register_exitproc+0xac>)
 802315e:	6863      	ldr	r3, [r4, #4]
 8023160:	2b1f      	cmp	r3, #31
 8023162:	dd06      	ble.n	8023172 <__register_exitproc+0x3e>
 8023164:	6828      	ldr	r0, [r5, #0]
 8023166:	f7ff ffd5 	bl	8023114 <__retarget_lock_release_recursive>
 802316a:	f04f 30ff 	mov.w	r0, #4294967295
 802316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023172:	b32f      	cbz	r7, 80231c0 <__register_exitproc+0x8c>
 8023174:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8023178:	b968      	cbnz	r0, 8023196 <__register_exitproc+0x62>
 802317a:	4b1b      	ldr	r3, [pc, #108]	@ (80231e8 <__register_exitproc+0xb4>)
 802317c:	2b00      	cmp	r3, #0
 802317e:	d0f1      	beq.n	8023164 <__register_exitproc+0x30>
 8023180:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8023184:	f7ff fcac 	bl	8022ae0 <malloc>
 8023188:	2800      	cmp	r0, #0
 802318a:	d0eb      	beq.n	8023164 <__register_exitproc+0x30>
 802318c:	2300      	movs	r3, #0
 802318e:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8023192:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8023196:	6863      	ldr	r3, [r4, #4]
 8023198:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802319c:	2201      	movs	r2, #1
 802319e:	409a      	lsls	r2, r3
 80231a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80231a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80231a8:	4313      	orrs	r3, r2
 80231aa:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80231ae:	2f02      	cmp	r7, #2
 80231b0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80231b4:	bf02      	ittt	eq
 80231b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80231ba:	4313      	orreq	r3, r2
 80231bc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80231c0:	6863      	ldr	r3, [r4, #4]
 80231c2:	6828      	ldr	r0, [r5, #0]
 80231c4:	1c5a      	adds	r2, r3, #1
 80231c6:	3302      	adds	r3, #2
 80231c8:	6062      	str	r2, [r4, #4]
 80231ca:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80231ce:	f7ff ffa1 	bl	8023114 <__retarget_lock_release_recursive>
 80231d2:	2000      	movs	r0, #0
 80231d4:	e7cb      	b.n	802316e <__register_exitproc+0x3a>
 80231d6:	bf00      	nop
 80231d8:	2400013c 	.word	0x2400013c
 80231dc:	2402e5b8 	.word	0x2402e5b8
 80231e0:	2402e52c 	.word	0x2402e52c
 80231e4:	08025f6c 	.word	0x08025f6c
 80231e8:	08022ae1 	.word	0x08022ae1

080231ec <_free_r>:
 80231ec:	b538      	push	{r3, r4, r5, lr}
 80231ee:	4605      	mov	r5, r0
 80231f0:	2900      	cmp	r1, #0
 80231f2:	d041      	beq.n	8023278 <_free_r+0x8c>
 80231f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80231f8:	1f0c      	subs	r4, r1, #4
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	bfb8      	it	lt
 80231fe:	18e4      	addlt	r4, r4, r3
 8023200:	f7ff fd20 	bl	8022c44 <__malloc_lock>
 8023204:	4a1d      	ldr	r2, [pc, #116]	@ (802327c <_free_r+0x90>)
 8023206:	6813      	ldr	r3, [r2, #0]
 8023208:	b933      	cbnz	r3, 8023218 <_free_r+0x2c>
 802320a:	6063      	str	r3, [r4, #4]
 802320c:	6014      	str	r4, [r2, #0]
 802320e:	4628      	mov	r0, r5
 8023210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023214:	f7ff bd1c 	b.w	8022c50 <__malloc_unlock>
 8023218:	42a3      	cmp	r3, r4
 802321a:	d908      	bls.n	802322e <_free_r+0x42>
 802321c:	6820      	ldr	r0, [r4, #0]
 802321e:	1821      	adds	r1, r4, r0
 8023220:	428b      	cmp	r3, r1
 8023222:	bf01      	itttt	eq
 8023224:	6819      	ldreq	r1, [r3, #0]
 8023226:	685b      	ldreq	r3, [r3, #4]
 8023228:	1809      	addeq	r1, r1, r0
 802322a:	6021      	streq	r1, [r4, #0]
 802322c:	e7ed      	b.n	802320a <_free_r+0x1e>
 802322e:	461a      	mov	r2, r3
 8023230:	685b      	ldr	r3, [r3, #4]
 8023232:	b10b      	cbz	r3, 8023238 <_free_r+0x4c>
 8023234:	42a3      	cmp	r3, r4
 8023236:	d9fa      	bls.n	802322e <_free_r+0x42>
 8023238:	6811      	ldr	r1, [r2, #0]
 802323a:	1850      	adds	r0, r2, r1
 802323c:	42a0      	cmp	r0, r4
 802323e:	d10b      	bne.n	8023258 <_free_r+0x6c>
 8023240:	6820      	ldr	r0, [r4, #0]
 8023242:	4401      	add	r1, r0
 8023244:	1850      	adds	r0, r2, r1
 8023246:	4283      	cmp	r3, r0
 8023248:	6011      	str	r1, [r2, #0]
 802324a:	d1e0      	bne.n	802320e <_free_r+0x22>
 802324c:	6818      	ldr	r0, [r3, #0]
 802324e:	685b      	ldr	r3, [r3, #4]
 8023250:	6053      	str	r3, [r2, #4]
 8023252:	4408      	add	r0, r1
 8023254:	6010      	str	r0, [r2, #0]
 8023256:	e7da      	b.n	802320e <_free_r+0x22>
 8023258:	d902      	bls.n	8023260 <_free_r+0x74>
 802325a:	230c      	movs	r3, #12
 802325c:	602b      	str	r3, [r5, #0]
 802325e:	e7d6      	b.n	802320e <_free_r+0x22>
 8023260:	6820      	ldr	r0, [r4, #0]
 8023262:	1821      	adds	r1, r4, r0
 8023264:	428b      	cmp	r3, r1
 8023266:	bf04      	itt	eq
 8023268:	6819      	ldreq	r1, [r3, #0]
 802326a:	685b      	ldreq	r3, [r3, #4]
 802326c:	6063      	str	r3, [r4, #4]
 802326e:	bf04      	itt	eq
 8023270:	1809      	addeq	r1, r1, r0
 8023272:	6021      	streq	r1, [r4, #0]
 8023274:	6054      	str	r4, [r2, #4]
 8023276:	e7ca      	b.n	802320e <_free_r+0x22>
 8023278:	bd38      	pop	{r3, r4, r5, pc}
 802327a:	bf00      	nop
 802327c:	2402e3e4 	.word	0x2402e3e4

08023280 <__sfputc_r>:
 8023280:	6893      	ldr	r3, [r2, #8]
 8023282:	3b01      	subs	r3, #1
 8023284:	2b00      	cmp	r3, #0
 8023286:	b410      	push	{r4}
 8023288:	6093      	str	r3, [r2, #8]
 802328a:	da08      	bge.n	802329e <__sfputc_r+0x1e>
 802328c:	6994      	ldr	r4, [r2, #24]
 802328e:	42a3      	cmp	r3, r4
 8023290:	db01      	blt.n	8023296 <__sfputc_r+0x16>
 8023292:	290a      	cmp	r1, #10
 8023294:	d103      	bne.n	802329e <__sfputc_r+0x1e>
 8023296:	f85d 4b04 	ldr.w	r4, [sp], #4
 802329a:	f000 bb6d 	b.w	8023978 <__swbuf_r>
 802329e:	6813      	ldr	r3, [r2, #0]
 80232a0:	1c58      	adds	r0, r3, #1
 80232a2:	6010      	str	r0, [r2, #0]
 80232a4:	7019      	strb	r1, [r3, #0]
 80232a6:	4608      	mov	r0, r1
 80232a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232ac:	4770      	bx	lr

080232ae <__sfputs_r>:
 80232ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232b0:	4606      	mov	r6, r0
 80232b2:	460f      	mov	r7, r1
 80232b4:	4614      	mov	r4, r2
 80232b6:	18d5      	adds	r5, r2, r3
 80232b8:	42ac      	cmp	r4, r5
 80232ba:	d101      	bne.n	80232c0 <__sfputs_r+0x12>
 80232bc:	2000      	movs	r0, #0
 80232be:	e007      	b.n	80232d0 <__sfputs_r+0x22>
 80232c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232c4:	463a      	mov	r2, r7
 80232c6:	4630      	mov	r0, r6
 80232c8:	f7ff ffda 	bl	8023280 <__sfputc_r>
 80232cc:	1c43      	adds	r3, r0, #1
 80232ce:	d1f3      	bne.n	80232b8 <__sfputs_r+0xa>
 80232d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080232d4 <_vfiprintf_r>:
 80232d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232d8:	460d      	mov	r5, r1
 80232da:	b09d      	sub	sp, #116	@ 0x74
 80232dc:	4614      	mov	r4, r2
 80232de:	4698      	mov	r8, r3
 80232e0:	4606      	mov	r6, r0
 80232e2:	b118      	cbz	r0, 80232ec <_vfiprintf_r+0x18>
 80232e4:	6a03      	ldr	r3, [r0, #32]
 80232e6:	b90b      	cbnz	r3, 80232ec <_vfiprintf_r+0x18>
 80232e8:	f7ff fd52 	bl	8022d90 <__sinit>
 80232ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80232ee:	07d9      	lsls	r1, r3, #31
 80232f0:	d405      	bmi.n	80232fe <_vfiprintf_r+0x2a>
 80232f2:	89ab      	ldrh	r3, [r5, #12]
 80232f4:	059a      	lsls	r2, r3, #22
 80232f6:	d402      	bmi.n	80232fe <_vfiprintf_r+0x2a>
 80232f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80232fa:	f7ff ff0a 	bl	8023112 <__retarget_lock_acquire_recursive>
 80232fe:	89ab      	ldrh	r3, [r5, #12]
 8023300:	071b      	lsls	r3, r3, #28
 8023302:	d501      	bpl.n	8023308 <_vfiprintf_r+0x34>
 8023304:	692b      	ldr	r3, [r5, #16]
 8023306:	b99b      	cbnz	r3, 8023330 <_vfiprintf_r+0x5c>
 8023308:	4629      	mov	r1, r5
 802330a:	4630      	mov	r0, r6
 802330c:	f000 fb72 	bl	80239f4 <__swsetup_r>
 8023310:	b170      	cbz	r0, 8023330 <_vfiprintf_r+0x5c>
 8023312:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023314:	07dc      	lsls	r4, r3, #31
 8023316:	d504      	bpl.n	8023322 <_vfiprintf_r+0x4e>
 8023318:	f04f 30ff 	mov.w	r0, #4294967295
 802331c:	b01d      	add	sp, #116	@ 0x74
 802331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023322:	89ab      	ldrh	r3, [r5, #12]
 8023324:	0598      	lsls	r0, r3, #22
 8023326:	d4f7      	bmi.n	8023318 <_vfiprintf_r+0x44>
 8023328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802332a:	f7ff fef3 	bl	8023114 <__retarget_lock_release_recursive>
 802332e:	e7f3      	b.n	8023318 <_vfiprintf_r+0x44>
 8023330:	2300      	movs	r3, #0
 8023332:	9309      	str	r3, [sp, #36]	@ 0x24
 8023334:	2320      	movs	r3, #32
 8023336:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802333a:	f8cd 800c 	str.w	r8, [sp, #12]
 802333e:	2330      	movs	r3, #48	@ 0x30
 8023340:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80234f0 <_vfiprintf_r+0x21c>
 8023344:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023348:	f04f 0901 	mov.w	r9, #1
 802334c:	4623      	mov	r3, r4
 802334e:	469a      	mov	sl, r3
 8023350:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023354:	b10a      	cbz	r2, 802335a <_vfiprintf_r+0x86>
 8023356:	2a25      	cmp	r2, #37	@ 0x25
 8023358:	d1f9      	bne.n	802334e <_vfiprintf_r+0x7a>
 802335a:	ebba 0b04 	subs.w	fp, sl, r4
 802335e:	d00b      	beq.n	8023378 <_vfiprintf_r+0xa4>
 8023360:	465b      	mov	r3, fp
 8023362:	4622      	mov	r2, r4
 8023364:	4629      	mov	r1, r5
 8023366:	4630      	mov	r0, r6
 8023368:	f7ff ffa1 	bl	80232ae <__sfputs_r>
 802336c:	3001      	adds	r0, #1
 802336e:	f000 80a7 	beq.w	80234c0 <_vfiprintf_r+0x1ec>
 8023372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023374:	445a      	add	r2, fp
 8023376:	9209      	str	r2, [sp, #36]	@ 0x24
 8023378:	f89a 3000 	ldrb.w	r3, [sl]
 802337c:	2b00      	cmp	r3, #0
 802337e:	f000 809f 	beq.w	80234c0 <_vfiprintf_r+0x1ec>
 8023382:	2300      	movs	r3, #0
 8023384:	f04f 32ff 	mov.w	r2, #4294967295
 8023388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802338c:	f10a 0a01 	add.w	sl, sl, #1
 8023390:	9304      	str	r3, [sp, #16]
 8023392:	9307      	str	r3, [sp, #28]
 8023394:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023398:	931a      	str	r3, [sp, #104]	@ 0x68
 802339a:	4654      	mov	r4, sl
 802339c:	2205      	movs	r2, #5
 802339e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233a2:	4853      	ldr	r0, [pc, #332]	@ (80234f0 <_vfiprintf_r+0x21c>)
 80233a4:	f7dc ffb4 	bl	8000310 <memchr>
 80233a8:	9a04      	ldr	r2, [sp, #16]
 80233aa:	b9d8      	cbnz	r0, 80233e4 <_vfiprintf_r+0x110>
 80233ac:	06d1      	lsls	r1, r2, #27
 80233ae:	bf44      	itt	mi
 80233b0:	2320      	movmi	r3, #32
 80233b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233b6:	0713      	lsls	r3, r2, #28
 80233b8:	bf44      	itt	mi
 80233ba:	232b      	movmi	r3, #43	@ 0x2b
 80233bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233c0:	f89a 3000 	ldrb.w	r3, [sl]
 80233c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80233c6:	d015      	beq.n	80233f4 <_vfiprintf_r+0x120>
 80233c8:	9a07      	ldr	r2, [sp, #28]
 80233ca:	4654      	mov	r4, sl
 80233cc:	2000      	movs	r0, #0
 80233ce:	f04f 0c0a 	mov.w	ip, #10
 80233d2:	4621      	mov	r1, r4
 80233d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233d8:	3b30      	subs	r3, #48	@ 0x30
 80233da:	2b09      	cmp	r3, #9
 80233dc:	d94b      	bls.n	8023476 <_vfiprintf_r+0x1a2>
 80233de:	b1b0      	cbz	r0, 802340e <_vfiprintf_r+0x13a>
 80233e0:	9207      	str	r2, [sp, #28]
 80233e2:	e014      	b.n	802340e <_vfiprintf_r+0x13a>
 80233e4:	eba0 0308 	sub.w	r3, r0, r8
 80233e8:	fa09 f303 	lsl.w	r3, r9, r3
 80233ec:	4313      	orrs	r3, r2
 80233ee:	9304      	str	r3, [sp, #16]
 80233f0:	46a2      	mov	sl, r4
 80233f2:	e7d2      	b.n	802339a <_vfiprintf_r+0xc6>
 80233f4:	9b03      	ldr	r3, [sp, #12]
 80233f6:	1d19      	adds	r1, r3, #4
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	9103      	str	r1, [sp, #12]
 80233fc:	2b00      	cmp	r3, #0
 80233fe:	bfbb      	ittet	lt
 8023400:	425b      	neglt	r3, r3
 8023402:	f042 0202 	orrlt.w	r2, r2, #2
 8023406:	9307      	strge	r3, [sp, #28]
 8023408:	9307      	strlt	r3, [sp, #28]
 802340a:	bfb8      	it	lt
 802340c:	9204      	strlt	r2, [sp, #16]
 802340e:	7823      	ldrb	r3, [r4, #0]
 8023410:	2b2e      	cmp	r3, #46	@ 0x2e
 8023412:	d10a      	bne.n	802342a <_vfiprintf_r+0x156>
 8023414:	7863      	ldrb	r3, [r4, #1]
 8023416:	2b2a      	cmp	r3, #42	@ 0x2a
 8023418:	d132      	bne.n	8023480 <_vfiprintf_r+0x1ac>
 802341a:	9b03      	ldr	r3, [sp, #12]
 802341c:	1d1a      	adds	r2, r3, #4
 802341e:	681b      	ldr	r3, [r3, #0]
 8023420:	9203      	str	r2, [sp, #12]
 8023422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023426:	3402      	adds	r4, #2
 8023428:	9305      	str	r3, [sp, #20]
 802342a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023500 <_vfiprintf_r+0x22c>
 802342e:	7821      	ldrb	r1, [r4, #0]
 8023430:	2203      	movs	r2, #3
 8023432:	4650      	mov	r0, sl
 8023434:	f7dc ff6c 	bl	8000310 <memchr>
 8023438:	b138      	cbz	r0, 802344a <_vfiprintf_r+0x176>
 802343a:	9b04      	ldr	r3, [sp, #16]
 802343c:	eba0 000a 	sub.w	r0, r0, sl
 8023440:	2240      	movs	r2, #64	@ 0x40
 8023442:	4082      	lsls	r2, r0
 8023444:	4313      	orrs	r3, r2
 8023446:	3401      	adds	r4, #1
 8023448:	9304      	str	r3, [sp, #16]
 802344a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802344e:	4829      	ldr	r0, [pc, #164]	@ (80234f4 <_vfiprintf_r+0x220>)
 8023450:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023454:	2206      	movs	r2, #6
 8023456:	f7dc ff5b 	bl	8000310 <memchr>
 802345a:	2800      	cmp	r0, #0
 802345c:	d03f      	beq.n	80234de <_vfiprintf_r+0x20a>
 802345e:	4b26      	ldr	r3, [pc, #152]	@ (80234f8 <_vfiprintf_r+0x224>)
 8023460:	bb1b      	cbnz	r3, 80234aa <_vfiprintf_r+0x1d6>
 8023462:	9b03      	ldr	r3, [sp, #12]
 8023464:	3307      	adds	r3, #7
 8023466:	f023 0307 	bic.w	r3, r3, #7
 802346a:	3308      	adds	r3, #8
 802346c:	9303      	str	r3, [sp, #12]
 802346e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023470:	443b      	add	r3, r7
 8023472:	9309      	str	r3, [sp, #36]	@ 0x24
 8023474:	e76a      	b.n	802334c <_vfiprintf_r+0x78>
 8023476:	fb0c 3202 	mla	r2, ip, r2, r3
 802347a:	460c      	mov	r4, r1
 802347c:	2001      	movs	r0, #1
 802347e:	e7a8      	b.n	80233d2 <_vfiprintf_r+0xfe>
 8023480:	2300      	movs	r3, #0
 8023482:	3401      	adds	r4, #1
 8023484:	9305      	str	r3, [sp, #20]
 8023486:	4619      	mov	r1, r3
 8023488:	f04f 0c0a 	mov.w	ip, #10
 802348c:	4620      	mov	r0, r4
 802348e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023492:	3a30      	subs	r2, #48	@ 0x30
 8023494:	2a09      	cmp	r2, #9
 8023496:	d903      	bls.n	80234a0 <_vfiprintf_r+0x1cc>
 8023498:	2b00      	cmp	r3, #0
 802349a:	d0c6      	beq.n	802342a <_vfiprintf_r+0x156>
 802349c:	9105      	str	r1, [sp, #20]
 802349e:	e7c4      	b.n	802342a <_vfiprintf_r+0x156>
 80234a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80234a4:	4604      	mov	r4, r0
 80234a6:	2301      	movs	r3, #1
 80234a8:	e7f0      	b.n	802348c <_vfiprintf_r+0x1b8>
 80234aa:	ab03      	add	r3, sp, #12
 80234ac:	9300      	str	r3, [sp, #0]
 80234ae:	462a      	mov	r2, r5
 80234b0:	4b12      	ldr	r3, [pc, #72]	@ (80234fc <_vfiprintf_r+0x228>)
 80234b2:	a904      	add	r1, sp, #16
 80234b4:	4630      	mov	r0, r6
 80234b6:	f3af 8000 	nop.w
 80234ba:	4607      	mov	r7, r0
 80234bc:	1c78      	adds	r0, r7, #1
 80234be:	d1d6      	bne.n	802346e <_vfiprintf_r+0x19a>
 80234c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80234c2:	07d9      	lsls	r1, r3, #31
 80234c4:	d405      	bmi.n	80234d2 <_vfiprintf_r+0x1fe>
 80234c6:	89ab      	ldrh	r3, [r5, #12]
 80234c8:	059a      	lsls	r2, r3, #22
 80234ca:	d402      	bmi.n	80234d2 <_vfiprintf_r+0x1fe>
 80234cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80234ce:	f7ff fe21 	bl	8023114 <__retarget_lock_release_recursive>
 80234d2:	89ab      	ldrh	r3, [r5, #12]
 80234d4:	065b      	lsls	r3, r3, #25
 80234d6:	f53f af1f 	bmi.w	8023318 <_vfiprintf_r+0x44>
 80234da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80234dc:	e71e      	b.n	802331c <_vfiprintf_r+0x48>
 80234de:	ab03      	add	r3, sp, #12
 80234e0:	9300      	str	r3, [sp, #0]
 80234e2:	462a      	mov	r2, r5
 80234e4:	4b05      	ldr	r3, [pc, #20]	@ (80234fc <_vfiprintf_r+0x228>)
 80234e6:	a904      	add	r1, sp, #16
 80234e8:	4630      	mov	r0, r6
 80234ea:	f000 f879 	bl	80235e0 <_printf_i>
 80234ee:	e7e4      	b.n	80234ba <_vfiprintf_r+0x1e6>
 80234f0:	08025f70 	.word	0x08025f70
 80234f4:	08025f7a 	.word	0x08025f7a
 80234f8:	00000000 	.word	0x00000000
 80234fc:	080232af 	.word	0x080232af
 8023500:	08025f76 	.word	0x08025f76

08023504 <_printf_common>:
 8023504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023508:	4616      	mov	r6, r2
 802350a:	4698      	mov	r8, r3
 802350c:	688a      	ldr	r2, [r1, #8]
 802350e:	690b      	ldr	r3, [r1, #16]
 8023510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023514:	4293      	cmp	r3, r2
 8023516:	bfb8      	it	lt
 8023518:	4613      	movlt	r3, r2
 802351a:	6033      	str	r3, [r6, #0]
 802351c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023520:	4607      	mov	r7, r0
 8023522:	460c      	mov	r4, r1
 8023524:	b10a      	cbz	r2, 802352a <_printf_common+0x26>
 8023526:	3301      	adds	r3, #1
 8023528:	6033      	str	r3, [r6, #0]
 802352a:	6823      	ldr	r3, [r4, #0]
 802352c:	0699      	lsls	r1, r3, #26
 802352e:	bf42      	ittt	mi
 8023530:	6833      	ldrmi	r3, [r6, #0]
 8023532:	3302      	addmi	r3, #2
 8023534:	6033      	strmi	r3, [r6, #0]
 8023536:	6825      	ldr	r5, [r4, #0]
 8023538:	f015 0506 	ands.w	r5, r5, #6
 802353c:	d106      	bne.n	802354c <_printf_common+0x48>
 802353e:	f104 0a19 	add.w	sl, r4, #25
 8023542:	68e3      	ldr	r3, [r4, #12]
 8023544:	6832      	ldr	r2, [r6, #0]
 8023546:	1a9b      	subs	r3, r3, r2
 8023548:	42ab      	cmp	r3, r5
 802354a:	dc26      	bgt.n	802359a <_printf_common+0x96>
 802354c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023550:	6822      	ldr	r2, [r4, #0]
 8023552:	3b00      	subs	r3, #0
 8023554:	bf18      	it	ne
 8023556:	2301      	movne	r3, #1
 8023558:	0692      	lsls	r2, r2, #26
 802355a:	d42b      	bmi.n	80235b4 <_printf_common+0xb0>
 802355c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023560:	4641      	mov	r1, r8
 8023562:	4638      	mov	r0, r7
 8023564:	47c8      	blx	r9
 8023566:	3001      	adds	r0, #1
 8023568:	d01e      	beq.n	80235a8 <_printf_common+0xa4>
 802356a:	6823      	ldr	r3, [r4, #0]
 802356c:	6922      	ldr	r2, [r4, #16]
 802356e:	f003 0306 	and.w	r3, r3, #6
 8023572:	2b04      	cmp	r3, #4
 8023574:	bf02      	ittt	eq
 8023576:	68e5      	ldreq	r5, [r4, #12]
 8023578:	6833      	ldreq	r3, [r6, #0]
 802357a:	1aed      	subeq	r5, r5, r3
 802357c:	68a3      	ldr	r3, [r4, #8]
 802357e:	bf0c      	ite	eq
 8023580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023584:	2500      	movne	r5, #0
 8023586:	4293      	cmp	r3, r2
 8023588:	bfc4      	itt	gt
 802358a:	1a9b      	subgt	r3, r3, r2
 802358c:	18ed      	addgt	r5, r5, r3
 802358e:	2600      	movs	r6, #0
 8023590:	341a      	adds	r4, #26
 8023592:	42b5      	cmp	r5, r6
 8023594:	d11a      	bne.n	80235cc <_printf_common+0xc8>
 8023596:	2000      	movs	r0, #0
 8023598:	e008      	b.n	80235ac <_printf_common+0xa8>
 802359a:	2301      	movs	r3, #1
 802359c:	4652      	mov	r2, sl
 802359e:	4641      	mov	r1, r8
 80235a0:	4638      	mov	r0, r7
 80235a2:	47c8      	blx	r9
 80235a4:	3001      	adds	r0, #1
 80235a6:	d103      	bne.n	80235b0 <_printf_common+0xac>
 80235a8:	f04f 30ff 	mov.w	r0, #4294967295
 80235ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235b0:	3501      	adds	r5, #1
 80235b2:	e7c6      	b.n	8023542 <_printf_common+0x3e>
 80235b4:	18e1      	adds	r1, r4, r3
 80235b6:	1c5a      	adds	r2, r3, #1
 80235b8:	2030      	movs	r0, #48	@ 0x30
 80235ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80235be:	4422      	add	r2, r4
 80235c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80235c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80235c8:	3302      	adds	r3, #2
 80235ca:	e7c7      	b.n	802355c <_printf_common+0x58>
 80235cc:	2301      	movs	r3, #1
 80235ce:	4622      	mov	r2, r4
 80235d0:	4641      	mov	r1, r8
 80235d2:	4638      	mov	r0, r7
 80235d4:	47c8      	blx	r9
 80235d6:	3001      	adds	r0, #1
 80235d8:	d0e6      	beq.n	80235a8 <_printf_common+0xa4>
 80235da:	3601      	adds	r6, #1
 80235dc:	e7d9      	b.n	8023592 <_printf_common+0x8e>
	...

080235e0 <_printf_i>:
 80235e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80235e4:	7e0f      	ldrb	r7, [r1, #24]
 80235e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80235e8:	2f78      	cmp	r7, #120	@ 0x78
 80235ea:	4691      	mov	r9, r2
 80235ec:	4680      	mov	r8, r0
 80235ee:	460c      	mov	r4, r1
 80235f0:	469a      	mov	sl, r3
 80235f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80235f6:	d807      	bhi.n	8023608 <_printf_i+0x28>
 80235f8:	2f62      	cmp	r7, #98	@ 0x62
 80235fa:	d80a      	bhi.n	8023612 <_printf_i+0x32>
 80235fc:	2f00      	cmp	r7, #0
 80235fe:	f000 80d2 	beq.w	80237a6 <_printf_i+0x1c6>
 8023602:	2f58      	cmp	r7, #88	@ 0x58
 8023604:	f000 80b9 	beq.w	802377a <_printf_i+0x19a>
 8023608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802360c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023610:	e03a      	b.n	8023688 <_printf_i+0xa8>
 8023612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023616:	2b15      	cmp	r3, #21
 8023618:	d8f6      	bhi.n	8023608 <_printf_i+0x28>
 802361a:	a101      	add	r1, pc, #4	@ (adr r1, 8023620 <_printf_i+0x40>)
 802361c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023620:	08023679 	.word	0x08023679
 8023624:	0802368d 	.word	0x0802368d
 8023628:	08023609 	.word	0x08023609
 802362c:	08023609 	.word	0x08023609
 8023630:	08023609 	.word	0x08023609
 8023634:	08023609 	.word	0x08023609
 8023638:	0802368d 	.word	0x0802368d
 802363c:	08023609 	.word	0x08023609
 8023640:	08023609 	.word	0x08023609
 8023644:	08023609 	.word	0x08023609
 8023648:	08023609 	.word	0x08023609
 802364c:	0802378d 	.word	0x0802378d
 8023650:	080236b7 	.word	0x080236b7
 8023654:	08023747 	.word	0x08023747
 8023658:	08023609 	.word	0x08023609
 802365c:	08023609 	.word	0x08023609
 8023660:	080237af 	.word	0x080237af
 8023664:	08023609 	.word	0x08023609
 8023668:	080236b7 	.word	0x080236b7
 802366c:	08023609 	.word	0x08023609
 8023670:	08023609 	.word	0x08023609
 8023674:	0802374f 	.word	0x0802374f
 8023678:	6833      	ldr	r3, [r6, #0]
 802367a:	1d1a      	adds	r2, r3, #4
 802367c:	681b      	ldr	r3, [r3, #0]
 802367e:	6032      	str	r2, [r6, #0]
 8023680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023688:	2301      	movs	r3, #1
 802368a:	e09d      	b.n	80237c8 <_printf_i+0x1e8>
 802368c:	6833      	ldr	r3, [r6, #0]
 802368e:	6820      	ldr	r0, [r4, #0]
 8023690:	1d19      	adds	r1, r3, #4
 8023692:	6031      	str	r1, [r6, #0]
 8023694:	0606      	lsls	r6, r0, #24
 8023696:	d501      	bpl.n	802369c <_printf_i+0xbc>
 8023698:	681d      	ldr	r5, [r3, #0]
 802369a:	e003      	b.n	80236a4 <_printf_i+0xc4>
 802369c:	0645      	lsls	r5, r0, #25
 802369e:	d5fb      	bpl.n	8023698 <_printf_i+0xb8>
 80236a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80236a4:	2d00      	cmp	r5, #0
 80236a6:	da03      	bge.n	80236b0 <_printf_i+0xd0>
 80236a8:	232d      	movs	r3, #45	@ 0x2d
 80236aa:	426d      	negs	r5, r5
 80236ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236b0:	4859      	ldr	r0, [pc, #356]	@ (8023818 <_printf_i+0x238>)
 80236b2:	230a      	movs	r3, #10
 80236b4:	e011      	b.n	80236da <_printf_i+0xfa>
 80236b6:	6821      	ldr	r1, [r4, #0]
 80236b8:	6833      	ldr	r3, [r6, #0]
 80236ba:	0608      	lsls	r0, r1, #24
 80236bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80236c0:	d402      	bmi.n	80236c8 <_printf_i+0xe8>
 80236c2:	0649      	lsls	r1, r1, #25
 80236c4:	bf48      	it	mi
 80236c6:	b2ad      	uxthmi	r5, r5
 80236c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80236ca:	4853      	ldr	r0, [pc, #332]	@ (8023818 <_printf_i+0x238>)
 80236cc:	6033      	str	r3, [r6, #0]
 80236ce:	bf14      	ite	ne
 80236d0:	230a      	movne	r3, #10
 80236d2:	2308      	moveq	r3, #8
 80236d4:	2100      	movs	r1, #0
 80236d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80236da:	6866      	ldr	r6, [r4, #4]
 80236dc:	60a6      	str	r6, [r4, #8]
 80236de:	2e00      	cmp	r6, #0
 80236e0:	bfa2      	ittt	ge
 80236e2:	6821      	ldrge	r1, [r4, #0]
 80236e4:	f021 0104 	bicge.w	r1, r1, #4
 80236e8:	6021      	strge	r1, [r4, #0]
 80236ea:	b90d      	cbnz	r5, 80236f0 <_printf_i+0x110>
 80236ec:	2e00      	cmp	r6, #0
 80236ee:	d04b      	beq.n	8023788 <_printf_i+0x1a8>
 80236f0:	4616      	mov	r6, r2
 80236f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80236f6:	fb03 5711 	mls	r7, r3, r1, r5
 80236fa:	5dc7      	ldrb	r7, [r0, r7]
 80236fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023700:	462f      	mov	r7, r5
 8023702:	42bb      	cmp	r3, r7
 8023704:	460d      	mov	r5, r1
 8023706:	d9f4      	bls.n	80236f2 <_printf_i+0x112>
 8023708:	2b08      	cmp	r3, #8
 802370a:	d10b      	bne.n	8023724 <_printf_i+0x144>
 802370c:	6823      	ldr	r3, [r4, #0]
 802370e:	07df      	lsls	r7, r3, #31
 8023710:	d508      	bpl.n	8023724 <_printf_i+0x144>
 8023712:	6923      	ldr	r3, [r4, #16]
 8023714:	6861      	ldr	r1, [r4, #4]
 8023716:	4299      	cmp	r1, r3
 8023718:	bfde      	ittt	le
 802371a:	2330      	movle	r3, #48	@ 0x30
 802371c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023724:	1b92      	subs	r2, r2, r6
 8023726:	6122      	str	r2, [r4, #16]
 8023728:	f8cd a000 	str.w	sl, [sp]
 802372c:	464b      	mov	r3, r9
 802372e:	aa03      	add	r2, sp, #12
 8023730:	4621      	mov	r1, r4
 8023732:	4640      	mov	r0, r8
 8023734:	f7ff fee6 	bl	8023504 <_printf_common>
 8023738:	3001      	adds	r0, #1
 802373a:	d14a      	bne.n	80237d2 <_printf_i+0x1f2>
 802373c:	f04f 30ff 	mov.w	r0, #4294967295
 8023740:	b004      	add	sp, #16
 8023742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023746:	6823      	ldr	r3, [r4, #0]
 8023748:	f043 0320 	orr.w	r3, r3, #32
 802374c:	6023      	str	r3, [r4, #0]
 802374e:	4833      	ldr	r0, [pc, #204]	@ (802381c <_printf_i+0x23c>)
 8023750:	2778      	movs	r7, #120	@ 0x78
 8023752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023756:	6823      	ldr	r3, [r4, #0]
 8023758:	6831      	ldr	r1, [r6, #0]
 802375a:	061f      	lsls	r7, r3, #24
 802375c:	f851 5b04 	ldr.w	r5, [r1], #4
 8023760:	d402      	bmi.n	8023768 <_printf_i+0x188>
 8023762:	065f      	lsls	r7, r3, #25
 8023764:	bf48      	it	mi
 8023766:	b2ad      	uxthmi	r5, r5
 8023768:	6031      	str	r1, [r6, #0]
 802376a:	07d9      	lsls	r1, r3, #31
 802376c:	bf44      	itt	mi
 802376e:	f043 0320 	orrmi.w	r3, r3, #32
 8023772:	6023      	strmi	r3, [r4, #0]
 8023774:	b11d      	cbz	r5, 802377e <_printf_i+0x19e>
 8023776:	2310      	movs	r3, #16
 8023778:	e7ac      	b.n	80236d4 <_printf_i+0xf4>
 802377a:	4827      	ldr	r0, [pc, #156]	@ (8023818 <_printf_i+0x238>)
 802377c:	e7e9      	b.n	8023752 <_printf_i+0x172>
 802377e:	6823      	ldr	r3, [r4, #0]
 8023780:	f023 0320 	bic.w	r3, r3, #32
 8023784:	6023      	str	r3, [r4, #0]
 8023786:	e7f6      	b.n	8023776 <_printf_i+0x196>
 8023788:	4616      	mov	r6, r2
 802378a:	e7bd      	b.n	8023708 <_printf_i+0x128>
 802378c:	6833      	ldr	r3, [r6, #0]
 802378e:	6825      	ldr	r5, [r4, #0]
 8023790:	6961      	ldr	r1, [r4, #20]
 8023792:	1d18      	adds	r0, r3, #4
 8023794:	6030      	str	r0, [r6, #0]
 8023796:	062e      	lsls	r6, r5, #24
 8023798:	681b      	ldr	r3, [r3, #0]
 802379a:	d501      	bpl.n	80237a0 <_printf_i+0x1c0>
 802379c:	6019      	str	r1, [r3, #0]
 802379e:	e002      	b.n	80237a6 <_printf_i+0x1c6>
 80237a0:	0668      	lsls	r0, r5, #25
 80237a2:	d5fb      	bpl.n	802379c <_printf_i+0x1bc>
 80237a4:	8019      	strh	r1, [r3, #0]
 80237a6:	2300      	movs	r3, #0
 80237a8:	6123      	str	r3, [r4, #16]
 80237aa:	4616      	mov	r6, r2
 80237ac:	e7bc      	b.n	8023728 <_printf_i+0x148>
 80237ae:	6833      	ldr	r3, [r6, #0]
 80237b0:	1d1a      	adds	r2, r3, #4
 80237b2:	6032      	str	r2, [r6, #0]
 80237b4:	681e      	ldr	r6, [r3, #0]
 80237b6:	6862      	ldr	r2, [r4, #4]
 80237b8:	2100      	movs	r1, #0
 80237ba:	4630      	mov	r0, r6
 80237bc:	f7dc fda8 	bl	8000310 <memchr>
 80237c0:	b108      	cbz	r0, 80237c6 <_printf_i+0x1e6>
 80237c2:	1b80      	subs	r0, r0, r6
 80237c4:	6060      	str	r0, [r4, #4]
 80237c6:	6863      	ldr	r3, [r4, #4]
 80237c8:	6123      	str	r3, [r4, #16]
 80237ca:	2300      	movs	r3, #0
 80237cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80237d0:	e7aa      	b.n	8023728 <_printf_i+0x148>
 80237d2:	6923      	ldr	r3, [r4, #16]
 80237d4:	4632      	mov	r2, r6
 80237d6:	4649      	mov	r1, r9
 80237d8:	4640      	mov	r0, r8
 80237da:	47d0      	blx	sl
 80237dc:	3001      	adds	r0, #1
 80237de:	d0ad      	beq.n	802373c <_printf_i+0x15c>
 80237e0:	6823      	ldr	r3, [r4, #0]
 80237e2:	079b      	lsls	r3, r3, #30
 80237e4:	d413      	bmi.n	802380e <_printf_i+0x22e>
 80237e6:	68e0      	ldr	r0, [r4, #12]
 80237e8:	9b03      	ldr	r3, [sp, #12]
 80237ea:	4298      	cmp	r0, r3
 80237ec:	bfb8      	it	lt
 80237ee:	4618      	movlt	r0, r3
 80237f0:	e7a6      	b.n	8023740 <_printf_i+0x160>
 80237f2:	2301      	movs	r3, #1
 80237f4:	4632      	mov	r2, r6
 80237f6:	4649      	mov	r1, r9
 80237f8:	4640      	mov	r0, r8
 80237fa:	47d0      	blx	sl
 80237fc:	3001      	adds	r0, #1
 80237fe:	d09d      	beq.n	802373c <_printf_i+0x15c>
 8023800:	3501      	adds	r5, #1
 8023802:	68e3      	ldr	r3, [r4, #12]
 8023804:	9903      	ldr	r1, [sp, #12]
 8023806:	1a5b      	subs	r3, r3, r1
 8023808:	42ab      	cmp	r3, r5
 802380a:	dcf2      	bgt.n	80237f2 <_printf_i+0x212>
 802380c:	e7eb      	b.n	80237e6 <_printf_i+0x206>
 802380e:	2500      	movs	r5, #0
 8023810:	f104 0619 	add.w	r6, r4, #25
 8023814:	e7f5      	b.n	8023802 <_printf_i+0x222>
 8023816:	bf00      	nop
 8023818:	08025f81 	.word	0x08025f81
 802381c:	08025f92 	.word	0x08025f92

08023820 <__sflush_r>:
 8023820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023828:	0716      	lsls	r6, r2, #28
 802382a:	4605      	mov	r5, r0
 802382c:	460c      	mov	r4, r1
 802382e:	d454      	bmi.n	80238da <__sflush_r+0xba>
 8023830:	684b      	ldr	r3, [r1, #4]
 8023832:	2b00      	cmp	r3, #0
 8023834:	dc02      	bgt.n	802383c <__sflush_r+0x1c>
 8023836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023838:	2b00      	cmp	r3, #0
 802383a:	dd48      	ble.n	80238ce <__sflush_r+0xae>
 802383c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802383e:	2e00      	cmp	r6, #0
 8023840:	d045      	beq.n	80238ce <__sflush_r+0xae>
 8023842:	2300      	movs	r3, #0
 8023844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023848:	682f      	ldr	r7, [r5, #0]
 802384a:	6a21      	ldr	r1, [r4, #32]
 802384c:	602b      	str	r3, [r5, #0]
 802384e:	d030      	beq.n	80238b2 <__sflush_r+0x92>
 8023850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023852:	89a3      	ldrh	r3, [r4, #12]
 8023854:	0759      	lsls	r1, r3, #29
 8023856:	d505      	bpl.n	8023864 <__sflush_r+0x44>
 8023858:	6863      	ldr	r3, [r4, #4]
 802385a:	1ad2      	subs	r2, r2, r3
 802385c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802385e:	b10b      	cbz	r3, 8023864 <__sflush_r+0x44>
 8023860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023862:	1ad2      	subs	r2, r2, r3
 8023864:	2300      	movs	r3, #0
 8023866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023868:	6a21      	ldr	r1, [r4, #32]
 802386a:	4628      	mov	r0, r5
 802386c:	47b0      	blx	r6
 802386e:	1c43      	adds	r3, r0, #1
 8023870:	89a3      	ldrh	r3, [r4, #12]
 8023872:	d106      	bne.n	8023882 <__sflush_r+0x62>
 8023874:	6829      	ldr	r1, [r5, #0]
 8023876:	291d      	cmp	r1, #29
 8023878:	d82b      	bhi.n	80238d2 <__sflush_r+0xb2>
 802387a:	4a2a      	ldr	r2, [pc, #168]	@ (8023924 <__sflush_r+0x104>)
 802387c:	410a      	asrs	r2, r1
 802387e:	07d6      	lsls	r6, r2, #31
 8023880:	d427      	bmi.n	80238d2 <__sflush_r+0xb2>
 8023882:	2200      	movs	r2, #0
 8023884:	6062      	str	r2, [r4, #4]
 8023886:	04d9      	lsls	r1, r3, #19
 8023888:	6922      	ldr	r2, [r4, #16]
 802388a:	6022      	str	r2, [r4, #0]
 802388c:	d504      	bpl.n	8023898 <__sflush_r+0x78>
 802388e:	1c42      	adds	r2, r0, #1
 8023890:	d101      	bne.n	8023896 <__sflush_r+0x76>
 8023892:	682b      	ldr	r3, [r5, #0]
 8023894:	b903      	cbnz	r3, 8023898 <__sflush_r+0x78>
 8023896:	6560      	str	r0, [r4, #84]	@ 0x54
 8023898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802389a:	602f      	str	r7, [r5, #0]
 802389c:	b1b9      	cbz	r1, 80238ce <__sflush_r+0xae>
 802389e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80238a2:	4299      	cmp	r1, r3
 80238a4:	d002      	beq.n	80238ac <__sflush_r+0x8c>
 80238a6:	4628      	mov	r0, r5
 80238a8:	f7ff fca0 	bl	80231ec <_free_r>
 80238ac:	2300      	movs	r3, #0
 80238ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80238b0:	e00d      	b.n	80238ce <__sflush_r+0xae>
 80238b2:	2301      	movs	r3, #1
 80238b4:	4628      	mov	r0, r5
 80238b6:	47b0      	blx	r6
 80238b8:	4602      	mov	r2, r0
 80238ba:	1c50      	adds	r0, r2, #1
 80238bc:	d1c9      	bne.n	8023852 <__sflush_r+0x32>
 80238be:	682b      	ldr	r3, [r5, #0]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d0c6      	beq.n	8023852 <__sflush_r+0x32>
 80238c4:	2b1d      	cmp	r3, #29
 80238c6:	d001      	beq.n	80238cc <__sflush_r+0xac>
 80238c8:	2b16      	cmp	r3, #22
 80238ca:	d11e      	bne.n	802390a <__sflush_r+0xea>
 80238cc:	602f      	str	r7, [r5, #0]
 80238ce:	2000      	movs	r0, #0
 80238d0:	e022      	b.n	8023918 <__sflush_r+0xf8>
 80238d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80238d6:	b21b      	sxth	r3, r3
 80238d8:	e01b      	b.n	8023912 <__sflush_r+0xf2>
 80238da:	690f      	ldr	r7, [r1, #16]
 80238dc:	2f00      	cmp	r7, #0
 80238de:	d0f6      	beq.n	80238ce <__sflush_r+0xae>
 80238e0:	0793      	lsls	r3, r2, #30
 80238e2:	680e      	ldr	r6, [r1, #0]
 80238e4:	bf08      	it	eq
 80238e6:	694b      	ldreq	r3, [r1, #20]
 80238e8:	600f      	str	r7, [r1, #0]
 80238ea:	bf18      	it	ne
 80238ec:	2300      	movne	r3, #0
 80238ee:	eba6 0807 	sub.w	r8, r6, r7
 80238f2:	608b      	str	r3, [r1, #8]
 80238f4:	f1b8 0f00 	cmp.w	r8, #0
 80238f8:	dde9      	ble.n	80238ce <__sflush_r+0xae>
 80238fa:	6a21      	ldr	r1, [r4, #32]
 80238fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80238fe:	4643      	mov	r3, r8
 8023900:	463a      	mov	r2, r7
 8023902:	4628      	mov	r0, r5
 8023904:	47b0      	blx	r6
 8023906:	2800      	cmp	r0, #0
 8023908:	dc08      	bgt.n	802391c <__sflush_r+0xfc>
 802390a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802390e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023912:	81a3      	strh	r3, [r4, #12]
 8023914:	f04f 30ff 	mov.w	r0, #4294967295
 8023918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802391c:	4407      	add	r7, r0
 802391e:	eba8 0800 	sub.w	r8, r8, r0
 8023922:	e7e7      	b.n	80238f4 <__sflush_r+0xd4>
 8023924:	dfbffffe 	.word	0xdfbffffe

08023928 <_fflush_r>:
 8023928:	b538      	push	{r3, r4, r5, lr}
 802392a:	690b      	ldr	r3, [r1, #16]
 802392c:	4605      	mov	r5, r0
 802392e:	460c      	mov	r4, r1
 8023930:	b913      	cbnz	r3, 8023938 <_fflush_r+0x10>
 8023932:	2500      	movs	r5, #0
 8023934:	4628      	mov	r0, r5
 8023936:	bd38      	pop	{r3, r4, r5, pc}
 8023938:	b118      	cbz	r0, 8023942 <_fflush_r+0x1a>
 802393a:	6a03      	ldr	r3, [r0, #32]
 802393c:	b90b      	cbnz	r3, 8023942 <_fflush_r+0x1a>
 802393e:	f7ff fa27 	bl	8022d90 <__sinit>
 8023942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023946:	2b00      	cmp	r3, #0
 8023948:	d0f3      	beq.n	8023932 <_fflush_r+0xa>
 802394a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802394c:	07d0      	lsls	r0, r2, #31
 802394e:	d404      	bmi.n	802395a <_fflush_r+0x32>
 8023950:	0599      	lsls	r1, r3, #22
 8023952:	d402      	bmi.n	802395a <_fflush_r+0x32>
 8023954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023956:	f7ff fbdc 	bl	8023112 <__retarget_lock_acquire_recursive>
 802395a:	4628      	mov	r0, r5
 802395c:	4621      	mov	r1, r4
 802395e:	f7ff ff5f 	bl	8023820 <__sflush_r>
 8023962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023964:	07da      	lsls	r2, r3, #31
 8023966:	4605      	mov	r5, r0
 8023968:	d4e4      	bmi.n	8023934 <_fflush_r+0xc>
 802396a:	89a3      	ldrh	r3, [r4, #12]
 802396c:	059b      	lsls	r3, r3, #22
 802396e:	d4e1      	bmi.n	8023934 <_fflush_r+0xc>
 8023970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023972:	f7ff fbcf 	bl	8023114 <__retarget_lock_release_recursive>
 8023976:	e7dd      	b.n	8023934 <_fflush_r+0xc>

08023978 <__swbuf_r>:
 8023978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802397a:	460e      	mov	r6, r1
 802397c:	4614      	mov	r4, r2
 802397e:	4605      	mov	r5, r0
 8023980:	b118      	cbz	r0, 802398a <__swbuf_r+0x12>
 8023982:	6a03      	ldr	r3, [r0, #32]
 8023984:	b90b      	cbnz	r3, 802398a <__swbuf_r+0x12>
 8023986:	f7ff fa03 	bl	8022d90 <__sinit>
 802398a:	69a3      	ldr	r3, [r4, #24]
 802398c:	60a3      	str	r3, [r4, #8]
 802398e:	89a3      	ldrh	r3, [r4, #12]
 8023990:	071a      	lsls	r2, r3, #28
 8023992:	d501      	bpl.n	8023998 <__swbuf_r+0x20>
 8023994:	6923      	ldr	r3, [r4, #16]
 8023996:	b943      	cbnz	r3, 80239aa <__swbuf_r+0x32>
 8023998:	4621      	mov	r1, r4
 802399a:	4628      	mov	r0, r5
 802399c:	f000 f82a 	bl	80239f4 <__swsetup_r>
 80239a0:	b118      	cbz	r0, 80239aa <__swbuf_r+0x32>
 80239a2:	f04f 37ff 	mov.w	r7, #4294967295
 80239a6:	4638      	mov	r0, r7
 80239a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80239aa:	6823      	ldr	r3, [r4, #0]
 80239ac:	6922      	ldr	r2, [r4, #16]
 80239ae:	1a98      	subs	r0, r3, r2
 80239b0:	6963      	ldr	r3, [r4, #20]
 80239b2:	b2f6      	uxtb	r6, r6
 80239b4:	4283      	cmp	r3, r0
 80239b6:	4637      	mov	r7, r6
 80239b8:	dc05      	bgt.n	80239c6 <__swbuf_r+0x4e>
 80239ba:	4621      	mov	r1, r4
 80239bc:	4628      	mov	r0, r5
 80239be:	f7ff ffb3 	bl	8023928 <_fflush_r>
 80239c2:	2800      	cmp	r0, #0
 80239c4:	d1ed      	bne.n	80239a2 <__swbuf_r+0x2a>
 80239c6:	68a3      	ldr	r3, [r4, #8]
 80239c8:	3b01      	subs	r3, #1
 80239ca:	60a3      	str	r3, [r4, #8]
 80239cc:	6823      	ldr	r3, [r4, #0]
 80239ce:	1c5a      	adds	r2, r3, #1
 80239d0:	6022      	str	r2, [r4, #0]
 80239d2:	701e      	strb	r6, [r3, #0]
 80239d4:	6962      	ldr	r2, [r4, #20]
 80239d6:	1c43      	adds	r3, r0, #1
 80239d8:	429a      	cmp	r2, r3
 80239da:	d004      	beq.n	80239e6 <__swbuf_r+0x6e>
 80239dc:	89a3      	ldrh	r3, [r4, #12]
 80239de:	07db      	lsls	r3, r3, #31
 80239e0:	d5e1      	bpl.n	80239a6 <__swbuf_r+0x2e>
 80239e2:	2e0a      	cmp	r6, #10
 80239e4:	d1df      	bne.n	80239a6 <__swbuf_r+0x2e>
 80239e6:	4621      	mov	r1, r4
 80239e8:	4628      	mov	r0, r5
 80239ea:	f7ff ff9d 	bl	8023928 <_fflush_r>
 80239ee:	2800      	cmp	r0, #0
 80239f0:	d0d9      	beq.n	80239a6 <__swbuf_r+0x2e>
 80239f2:	e7d6      	b.n	80239a2 <__swbuf_r+0x2a>

080239f4 <__swsetup_r>:
 80239f4:	b538      	push	{r3, r4, r5, lr}
 80239f6:	4b29      	ldr	r3, [pc, #164]	@ (8023a9c <__swsetup_r+0xa8>)
 80239f8:	4605      	mov	r5, r0
 80239fa:	6818      	ldr	r0, [r3, #0]
 80239fc:	460c      	mov	r4, r1
 80239fe:	b118      	cbz	r0, 8023a08 <__swsetup_r+0x14>
 8023a00:	6a03      	ldr	r3, [r0, #32]
 8023a02:	b90b      	cbnz	r3, 8023a08 <__swsetup_r+0x14>
 8023a04:	f7ff f9c4 	bl	8022d90 <__sinit>
 8023a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a0c:	0719      	lsls	r1, r3, #28
 8023a0e:	d422      	bmi.n	8023a56 <__swsetup_r+0x62>
 8023a10:	06da      	lsls	r2, r3, #27
 8023a12:	d407      	bmi.n	8023a24 <__swsetup_r+0x30>
 8023a14:	2209      	movs	r2, #9
 8023a16:	602a      	str	r2, [r5, #0]
 8023a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023a1c:	81a3      	strh	r3, [r4, #12]
 8023a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8023a22:	e033      	b.n	8023a8c <__swsetup_r+0x98>
 8023a24:	0758      	lsls	r0, r3, #29
 8023a26:	d512      	bpl.n	8023a4e <__swsetup_r+0x5a>
 8023a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023a2a:	b141      	cbz	r1, 8023a3e <__swsetup_r+0x4a>
 8023a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023a30:	4299      	cmp	r1, r3
 8023a32:	d002      	beq.n	8023a3a <__swsetup_r+0x46>
 8023a34:	4628      	mov	r0, r5
 8023a36:	f7ff fbd9 	bl	80231ec <_free_r>
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8023a3e:	89a3      	ldrh	r3, [r4, #12]
 8023a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023a44:	81a3      	strh	r3, [r4, #12]
 8023a46:	2300      	movs	r3, #0
 8023a48:	6063      	str	r3, [r4, #4]
 8023a4a:	6923      	ldr	r3, [r4, #16]
 8023a4c:	6023      	str	r3, [r4, #0]
 8023a4e:	89a3      	ldrh	r3, [r4, #12]
 8023a50:	f043 0308 	orr.w	r3, r3, #8
 8023a54:	81a3      	strh	r3, [r4, #12]
 8023a56:	6923      	ldr	r3, [r4, #16]
 8023a58:	b94b      	cbnz	r3, 8023a6e <__swsetup_r+0x7a>
 8023a5a:	89a3      	ldrh	r3, [r4, #12]
 8023a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023a64:	d003      	beq.n	8023a6e <__swsetup_r+0x7a>
 8023a66:	4621      	mov	r1, r4
 8023a68:	4628      	mov	r0, r5
 8023a6a:	f000 f83f 	bl	8023aec <__smakebuf_r>
 8023a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a72:	f013 0201 	ands.w	r2, r3, #1
 8023a76:	d00a      	beq.n	8023a8e <__swsetup_r+0x9a>
 8023a78:	2200      	movs	r2, #0
 8023a7a:	60a2      	str	r2, [r4, #8]
 8023a7c:	6962      	ldr	r2, [r4, #20]
 8023a7e:	4252      	negs	r2, r2
 8023a80:	61a2      	str	r2, [r4, #24]
 8023a82:	6922      	ldr	r2, [r4, #16]
 8023a84:	b942      	cbnz	r2, 8023a98 <__swsetup_r+0xa4>
 8023a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023a8a:	d1c5      	bne.n	8023a18 <__swsetup_r+0x24>
 8023a8c:	bd38      	pop	{r3, r4, r5, pc}
 8023a8e:	0799      	lsls	r1, r3, #30
 8023a90:	bf58      	it	pl
 8023a92:	6962      	ldrpl	r2, [r4, #20]
 8023a94:	60a2      	str	r2, [r4, #8]
 8023a96:	e7f4      	b.n	8023a82 <__swsetup_r+0x8e>
 8023a98:	2000      	movs	r0, #0
 8023a9a:	e7f7      	b.n	8023a8c <__swsetup_r+0x98>
 8023a9c:	240000ec 	.word	0x240000ec

08023aa0 <__swhatbuf_r>:
 8023aa0:	b570      	push	{r4, r5, r6, lr}
 8023aa2:	460c      	mov	r4, r1
 8023aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aa8:	2900      	cmp	r1, #0
 8023aaa:	b096      	sub	sp, #88	@ 0x58
 8023aac:	4615      	mov	r5, r2
 8023aae:	461e      	mov	r6, r3
 8023ab0:	da0d      	bge.n	8023ace <__swhatbuf_r+0x2e>
 8023ab2:	89a3      	ldrh	r3, [r4, #12]
 8023ab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023ab8:	f04f 0100 	mov.w	r1, #0
 8023abc:	bf14      	ite	ne
 8023abe:	2340      	movne	r3, #64	@ 0x40
 8023ac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023ac4:	2000      	movs	r0, #0
 8023ac6:	6031      	str	r1, [r6, #0]
 8023ac8:	602b      	str	r3, [r5, #0]
 8023aca:	b016      	add	sp, #88	@ 0x58
 8023acc:	bd70      	pop	{r4, r5, r6, pc}
 8023ace:	466a      	mov	r2, sp
 8023ad0:	f000 f848 	bl	8023b64 <_fstat_r>
 8023ad4:	2800      	cmp	r0, #0
 8023ad6:	dbec      	blt.n	8023ab2 <__swhatbuf_r+0x12>
 8023ad8:	9901      	ldr	r1, [sp, #4]
 8023ada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023ade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023ae2:	4259      	negs	r1, r3
 8023ae4:	4159      	adcs	r1, r3
 8023ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023aea:	e7eb      	b.n	8023ac4 <__swhatbuf_r+0x24>

08023aec <__smakebuf_r>:
 8023aec:	898b      	ldrh	r3, [r1, #12]
 8023aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023af0:	079d      	lsls	r5, r3, #30
 8023af2:	4606      	mov	r6, r0
 8023af4:	460c      	mov	r4, r1
 8023af6:	d507      	bpl.n	8023b08 <__smakebuf_r+0x1c>
 8023af8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023afc:	6023      	str	r3, [r4, #0]
 8023afe:	6123      	str	r3, [r4, #16]
 8023b00:	2301      	movs	r3, #1
 8023b02:	6163      	str	r3, [r4, #20]
 8023b04:	b003      	add	sp, #12
 8023b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b08:	ab01      	add	r3, sp, #4
 8023b0a:	466a      	mov	r2, sp
 8023b0c:	f7ff ffc8 	bl	8023aa0 <__swhatbuf_r>
 8023b10:	9f00      	ldr	r7, [sp, #0]
 8023b12:	4605      	mov	r5, r0
 8023b14:	4639      	mov	r1, r7
 8023b16:	4630      	mov	r0, r6
 8023b18:	f7ff f814 	bl	8022b44 <_malloc_r>
 8023b1c:	b948      	cbnz	r0, 8023b32 <__smakebuf_r+0x46>
 8023b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b22:	059a      	lsls	r2, r3, #22
 8023b24:	d4ee      	bmi.n	8023b04 <__smakebuf_r+0x18>
 8023b26:	f023 0303 	bic.w	r3, r3, #3
 8023b2a:	f043 0302 	orr.w	r3, r3, #2
 8023b2e:	81a3      	strh	r3, [r4, #12]
 8023b30:	e7e2      	b.n	8023af8 <__smakebuf_r+0xc>
 8023b32:	89a3      	ldrh	r3, [r4, #12]
 8023b34:	6020      	str	r0, [r4, #0]
 8023b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023b3a:	81a3      	strh	r3, [r4, #12]
 8023b3c:	9b01      	ldr	r3, [sp, #4]
 8023b3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023b42:	b15b      	cbz	r3, 8023b5c <__smakebuf_r+0x70>
 8023b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023b48:	4630      	mov	r0, r6
 8023b4a:	f000 f81d 	bl	8023b88 <_isatty_r>
 8023b4e:	b128      	cbz	r0, 8023b5c <__smakebuf_r+0x70>
 8023b50:	89a3      	ldrh	r3, [r4, #12]
 8023b52:	f023 0303 	bic.w	r3, r3, #3
 8023b56:	f043 0301 	orr.w	r3, r3, #1
 8023b5a:	81a3      	strh	r3, [r4, #12]
 8023b5c:	89a3      	ldrh	r3, [r4, #12]
 8023b5e:	431d      	orrs	r5, r3
 8023b60:	81a5      	strh	r5, [r4, #12]
 8023b62:	e7cf      	b.n	8023b04 <__smakebuf_r+0x18>

08023b64 <_fstat_r>:
 8023b64:	b538      	push	{r3, r4, r5, lr}
 8023b66:	4d07      	ldr	r5, [pc, #28]	@ (8023b84 <_fstat_r+0x20>)
 8023b68:	2300      	movs	r3, #0
 8023b6a:	4604      	mov	r4, r0
 8023b6c:	4608      	mov	r0, r1
 8023b6e:	4611      	mov	r1, r2
 8023b70:	602b      	str	r3, [r5, #0]
 8023b72:	f7de f91e 	bl	8001db2 <_fstat>
 8023b76:	1c43      	adds	r3, r0, #1
 8023b78:	d102      	bne.n	8023b80 <_fstat_r+0x1c>
 8023b7a:	682b      	ldr	r3, [r5, #0]
 8023b7c:	b103      	cbz	r3, 8023b80 <_fstat_r+0x1c>
 8023b7e:	6023      	str	r3, [r4, #0]
 8023b80:	bd38      	pop	{r3, r4, r5, pc}
 8023b82:	bf00      	nop
 8023b84:	2402e524 	.word	0x2402e524

08023b88 <_isatty_r>:
 8023b88:	b538      	push	{r3, r4, r5, lr}
 8023b8a:	4d06      	ldr	r5, [pc, #24]	@ (8023ba4 <_isatty_r+0x1c>)
 8023b8c:	2300      	movs	r3, #0
 8023b8e:	4604      	mov	r4, r0
 8023b90:	4608      	mov	r0, r1
 8023b92:	602b      	str	r3, [r5, #0]
 8023b94:	f7de f912 	bl	8001dbc <_isatty>
 8023b98:	1c43      	adds	r3, r0, #1
 8023b9a:	d102      	bne.n	8023ba2 <_isatty_r+0x1a>
 8023b9c:	682b      	ldr	r3, [r5, #0]
 8023b9e:	b103      	cbz	r3, 8023ba2 <_isatty_r+0x1a>
 8023ba0:	6023      	str	r3, [r4, #0]
 8023ba2:	bd38      	pop	{r3, r4, r5, pc}
 8023ba4:	2402e524 	.word	0x2402e524

08023ba8 <_init>:
 8023ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023baa:	bf00      	nop
 8023bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023bae:	bc08      	pop	{r3}
 8023bb0:	469e      	mov	lr, r3
 8023bb2:	4770      	bx	lr

08023bb4 <_fini>:
 8023bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bb6:	bf00      	nop
 8023bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023bba:	bc08      	pop	{r3}
 8023bbc:	469e      	mov	lr, r3
 8023bbe:	4770      	bx	lr
