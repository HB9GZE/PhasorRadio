
CustomSTM32HTestRamFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b0  080072b0  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  080072b0  080072b0  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072b0  080072b0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b0  080072b0  000082b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072b4  080072b4  000082b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080072b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  24000074  0800732c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  24000220  0800732c  00009220  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00000000  90000000  90000000  000090a2  2**0
                  CONTENTS
 13 BufferSection 00000000  70000000  70000000  000090a2  2**0
                  CONTENTS
 14 .debug_info   00010350  00000000  00000000  000090a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020d3  00000000  00000000  000193f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bc8  00000000  00000000  0001b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000090a  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003304d  00000000  00000000  0001c99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fe7c  00000000  00000000  0004f9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001464f9  00000000  00000000  0005f863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a5d5c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002fec  00000000  00000000  001a5da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000077  00000000  00000000  001a8d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000074 	.word	0x24000074
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007288 	.word	0x08007288

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000078 	.word	0x24000078
 8000308:	08007288 	.word	0x08007288

0800030c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000310:	f000 fa86 	bl	8000820 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000314:	f002 fc38 	bl	8002b88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000318:	f000 f838 	bl	800038c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800031c:	f000 f8a4 	bl	8000468 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000320:	f000 fa0a 	bl	8000738 <MX_GPIO_Init>
	MX_OCTOSPI2_Init();
 8000324:	f000 f950 	bl	80005c8 <MX_OCTOSPI2_Init>
	MX_OCTOSPI1_Init();
 8000328:	f000 f8cc 	bl	80004c4 <MX_OCTOSPI1_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (counter < 100)
 800032c:	4b13      	ldr	r3, [pc, #76]	@ (800037c <main+0x70>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b63      	cmp	r3, #99	@ 0x63
 8000332:	d805      	bhi.n	8000340 <main+0x34>
		{
			counter++;
 8000334:	4b11      	ldr	r3, [pc, #68]	@ (800037c <main+0x70>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a10      	ldr	r2, [pc, #64]	@ (800037c <main+0x70>)
 800033c:	6013      	str	r3, [r2, #0]
 800033e:	e002      	b.n	8000346 <main+0x3a>
		}
		else
		{
			counter = 0;
 8000340:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <main+0x70>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(10);
 8000346:	200a      	movs	r0, #10
 8000348:	f002 fcb0 	bl	8002cac <HAL_Delay>

		//ospi_ram_test();
		//ospi_flash_test();

		//int32_t BSP_OSPI_NOR_Write(uint32_t Instance, uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
		infoOfMemory = BSP_OSPI_NOR_Write(0, writeData, 0x90000000, 100);
 800034c:	2364      	movs	r3, #100	@ 0x64
 800034e:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8000352:	490b      	ldr	r1, [pc, #44]	@ (8000380 <main+0x74>)
 8000354:	2000      	movs	r0, #0
 8000356:	f001 fda5 	bl	8001ea4 <BSP_OSPI_NOR_Write>
 800035a:	4603      	mov	r3, r0
 800035c:	4a09      	ldr	r2, [pc, #36]	@ (8000384 <main+0x78>)
 800035e:	6013      	str	r3, [r2, #0]
		HAL_Delay(10);
 8000360:	200a      	movs	r0, #10
 8000362:	f002 fca3 	bl	8002cac <HAL_Delay>
		//int32_t BSP_OSPI_NOR_Read(uint32_t Instance, uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
		infoOfMemory = BSP_OSPI_NOR_Read(0,dataFromMemory,0x9000000,100);
 8000366:	2364      	movs	r3, #100	@ 0x64
 8000368:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 800036c:	4906      	ldr	r1, [pc, #24]	@ (8000388 <main+0x7c>)
 800036e:	2000      	movs	r0, #0
 8000370:	f001 fd4c 	bl	8001e0c <BSP_OSPI_NOR_Read>
 8000374:	4603      	mov	r3, r0
 8000376:	4a03      	ldr	r2, [pc, #12]	@ (8000384 <main+0x78>)
 8000378:	6013      	str	r3, [r2, #0]
		if (counter < 100)
 800037a:	e7d7      	b.n	800032c <main+0x20>
 800037c:	24000148 	.word	0x24000148
 8000380:	24000000 	.word	0x24000000
 8000384:	2400014c 	.word	0x2400014c
 8000388:	24000150 	.word	0x24000150

0800038c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09c      	sub	sp, #112	@ 0x70
 8000390:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000396:	224c      	movs	r2, #76	@ 0x4c
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f006 ff48 	bl	8007230 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2220      	movs	r2, #32
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f006 ff42 	bl	8007230 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003ac:	2004      	movs	r0, #4
 80003ae:	f004 fcd7 	bl	8004d60 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <SystemClock_Config+0xd8>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000464 <SystemClock_Config+0xd8>)
 80003bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <SystemClock_Config+0xd8>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80003ce:	bf00      	nop
 80003d0:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <SystemClock_Config+0xd8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003dc:	d1f8      	bne.n	80003d0 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003de:	2301      	movs	r3, #1
 80003e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e8:	2302      	movs	r3, #2
 80003ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ec:	2302      	movs	r3, #2
 80003ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 80003f0:	2302      	movs	r3, #2
 80003f2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 80003f4:	232c      	movs	r3, #44	@ 0x2c
 80003f6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80003f8:	2301      	movs	r3, #1
 80003fa:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80003fc:	2302      	movs	r3, #2
 80003fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000400:	2302      	movs	r3, #2
 8000402:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000404:	230c      	movs	r3, #12
 8000406:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000408:	2300      	movs	r3, #0
 800040a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000414:	4618      	mov	r0, r3
 8000416:	f004 fcfd 	bl	8004e14 <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000420:	f000 fa48 	bl	80008b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000424:	233f      	movs	r3, #63	@ 0x3f
 8000426:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	2303      	movs	r3, #3
 800042a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000430:	2308      	movs	r3, #8
 8000432:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000434:	2340      	movs	r3, #64	@ 0x40
 8000436:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000438:	2340      	movs	r3, #64	@ 0x40
 800043a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000440:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000442:	2340      	movs	r3, #64	@ 0x40
 8000444:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2103      	movs	r1, #3
 800044a:	4618      	mov	r0, r3
 800044c:	f005 f8bc 	bl	80055c8 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0xce>
	{
		Error_Handler();
 8000456:	f000 fa2d 	bl	80008b4 <Error_Handler>
	}
}
 800045a:	bf00      	nop
 800045c:	3770      	adds	r7, #112	@ 0x70
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	58024800 	.word	0x58024800

08000468 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b0ae      	sub	sp, #184	@ 0xb8
 800046c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 800046e:	463b      	mov	r3, r7
 8000470:	22b8      	movs	r2, #184	@ 0xb8
 8000472:	2100      	movs	r1, #0
 8000474:	4618      	mov	r0, r3
 8000476:	f006 fedb 	bl	8007230 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800047a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800047e:	f04f 0300 	mov.w	r3, #0
 8000482:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000486:	2305      	movs	r3, #5
 8000488:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 80;
 800048a:	2350      	movs	r3, #80	@ 0x50
 800048c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 800048e:	2302      	movs	r3, #2
 8000490:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800049a:	2380      	movs	r3, #128	@ 0x80
 800049c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80004a6:	2320      	movs	r3, #32
 80004a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004aa:	463b      	mov	r3, r7
 80004ac:	4618      	mov	r0, r3
 80004ae:	f005 fbbb 	bl	8005c28 <HAL_RCCEx_PeriphCLKConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <PeriphCommonClock_Config+0x54>
	{
		Error_Handler();
 80004b8:	f000 f9fc 	bl	80008b4 <Error_Handler>
	}
}
 80004bc:	bf00      	nop
 80004be:	37b8      	adds	r7, #184	@ 0xb8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_OCTOSPI1_Init>:
 * @brief OCTOSPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OCTOSPI1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN OCTOSPI1_Init 0 */
	BSP_OSPI_NOR_Init_t ospi_nor_int;
	/* USER CODE END OCTOSPI1_Init 0 */

	OSPIM_CfgTypeDef sOspiManagerCfg =
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN OCTOSPI1_Init 1 */

	/* USER CODE END OCTOSPI1_Init 1 */
	/* OCTOSPI1 parameter configuration*/
	hospi1.Instance = OCTOSPI1;
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 80004dc:	4a38      	ldr	r2, [pc, #224]	@ (80005c0 <MX_OCTOSPI1_Init+0xfc>)
 80004de:	601a      	str	r2, [r3, #0]
	hospi1.Init.FifoThreshold = 4;
 80004e0:	4b36      	ldr	r3, [pc, #216]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80004e6:	4b35      	ldr	r3, [pc, #212]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80004ec:	4b33      	ldr	r3, [pc, #204]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 80004ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80004f2:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 32;
 80004f4:	4b31      	ldr	r3, [pc, #196]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 80004f6:	2220      	movs	r2, #32
 80004f8:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 2;
 80004fa:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 80004fc:	2202      	movs	r2, #2
 80004fe:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000500:	4b2e      	ldr	r3, [pc, #184]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000506:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000508:	2200      	movs	r2, #0
 800050a:	61da      	str	r2, [r3, #28]
	hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800050c:	4b2b      	ldr	r3, [pc, #172]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 800050e:	2200      	movs	r2, #0
 8000510:	621a      	str	r2, [r3, #32]
	hospi1.Init.ClockPrescaler = 2;
 8000512:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000514:	2202      	movs	r2, #2
 8000516:	625a      	str	r2, [r3, #36]	@ 0x24
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000518:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	@ 0x28
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800051e:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	@ 0x2c
	hospi1.Init.ChipSelectBoundary = 0;
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000526:	2200      	movs	r2, #0
 8000528:	631a      	str	r2, [r3, #48]	@ 0x30
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800052a:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 800052c:	2208      	movs	r2, #8
 800052e:	635a      	str	r2, [r3, #52]	@ 0x34
	hospi1.Init.MaxTran = 0;
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000532:	2200      	movs	r2, #0
 8000534:	639a      	str	r2, [r3, #56]	@ 0x38
	hospi1.Init.Refresh = 0;
 8000536:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 8000538:	2200      	movs	r2, #0
 800053a:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800053c:	481f      	ldr	r0, [pc, #124]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 800053e:	f003 f83b 	bl	80035b8 <HAL_OSPI_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_OCTOSPI1_Init+0x88>
	{
		Error_Handler();
 8000548:	f000 f9b4 	bl	80008b4 <Error_Handler>
	}
	sOspiManagerCfg.ClkPort = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
	sOspiManagerCfg.DQSPort = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
	sOspiManagerCfg.NCSPort = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000558:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800055c:	613b      	str	r3, [r7, #16]
	sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800055e:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <MX_OCTOSPI1_Init+0x100>)
 8000560:	617b      	str	r3, [r7, #20]
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg,
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000568:	4619      	mov	r1, r3
 800056a:	4814      	ldr	r0, [pc, #80]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 800056c:	f003 fca4 	bl	8003eb8 <HAL_OSPIM_Config>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_OCTOSPI1_Init+0xb6>
			HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
	{
		Error_Handler();
 8000576:	f000 f99d 	bl	80008b4 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI1_Init 2 */
	HAL_OSPI_DeInit(&hospi1);
 800057a:	4810      	ldr	r0, [pc, #64]	@ (80005bc <MX_OCTOSPI1_Init+0xf8>)
 800057c:	f003 f8d8 	bl	8003730 <HAL_OSPI_DeInit>
	ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000580:	2301      	movs	r3, #1
 8000582:	773b      	strb	r3, [r7, #28]
	ospi_nor_int.TransferRate = BSP_OSPI_NOR_DTR_TRANSFER;
 8000584:	2301      	movs	r3, #1
 8000586:	777b      	strb	r3, [r7, #29]
	BSP_OSPI_NOR_DeInit(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f001 fbab 	bl	8001ce4 <BSP_OSPI_NOR_DeInit>
	if (BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	4619      	mov	r1, r3
 8000594:	2000      	movs	r0, #0
 8000596:	f001 fb07 	bl	8001ba8 <BSP_OSPI_NOR_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_OCTOSPI1_Init+0xe0>
	{
		Error_Handler();
 80005a0:	f000 f988 	bl	80008b4 <Error_Handler>
	}
	if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80005a4:	2000      	movs	r0, #0
 80005a6:	f001 fd4b 	bl	8002040 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_OCTOSPI1_Init+0xf0>
	{
		Error_Handler();
 80005b0:	f000 f980 	bl	80008b4 <Error_Handler>
	}
	/* USER CODE END OCTOSPI1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	24000090 	.word	0x24000090
 80005c0:	52005000 	.word	0x52005000
 80005c4:	01000001 	.word	0x01000001

080005c8 <MX_OCTOSPI2_Init>:
 * @brief OCTOSPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OCTOSPI2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b092      	sub	sp, #72	@ 0x48
 80005cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN OCTOSPI2_Init 0 */
	BSP_OSPI_RAM_Init_t ospi_ram_init;
	/* USER CODE END OCTOSPI2_Init 0 */

	OSPIM_CfgTypeDef sOspiManagerCfg =
 80005ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]
 80005de:	615a      	str	r2, [r3, #20]
	{ 0 };
	OSPI_HyperbusCfgTypeDef sHyperBusCfg =
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* USER CODE BEGIN OCTOSPI2_Init 1 */
	OSPI_HyperbusCmdTypeDef sCommand =
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
	{ 0 };
	OSPI_MemoryMappedTypeDef sMemMappedCfg =
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
	{ 0 };
	/* USER CODE END OCTOSPI2_Init 1 */
	/* OCTOSPI2 parameter configuration*/
	hospi2.Instance = OCTOSPI2;
 8000606:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000608:	4a48      	ldr	r2, [pc, #288]	@ (800072c <MX_OCTOSPI2_Init+0x164>)
 800060a:	601a      	str	r2, [r3, #0]
	hospi2.Init.FifoThreshold = 4;
 800060c:	4b46      	ldr	r3, [pc, #280]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800060e:	2204      	movs	r2, #4
 8000610:	605a      	str	r2, [r3, #4]
	hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000612:	4b45      	ldr	r3, [pc, #276]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
	hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000618:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800061a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800061e:	60da      	str	r2, [r3, #12]
	hospi2.Init.DeviceSize = 24;
 8000620:	4b41      	ldr	r3, [pc, #260]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000622:	2218      	movs	r2, #24
 8000624:	611a      	str	r2, [r3, #16]
	hospi2.Init.ChipSelectHighTime = 4;
 8000626:	4b40      	ldr	r3, [pc, #256]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000628:	2204      	movs	r2, #4
 800062a:	615a      	str	r2, [r3, #20]
	hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800062c:	4b3e      	ldr	r3, [pc, #248]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
	hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
	hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000638:	4b3b      	ldr	r3, [pc, #236]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
	hospi2.Init.ClockPrescaler = 2;
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000640:	2202      	movs	r2, #2
 8000642:	625a      	str	r2, [r3, #36]	@ 0x24
	hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000644:	4b38      	ldr	r3, [pc, #224]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
	hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800064c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000650:	62da      	str	r2, [r3, #44]	@ 0x2c
	hospi2.Init.ChipSelectBoundary = 23;
 8000652:	4b35      	ldr	r3, [pc, #212]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000654:	2217      	movs	r2, #23
 8000656:	631a      	str	r2, [r3, #48]	@ 0x30
	hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000658:	4b33      	ldr	r3, [pc, #204]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800065a:	2200      	movs	r2, #0
 800065c:	635a      	str	r2, [r3, #52]	@ 0x34
	hospi2.Init.MaxTran = 0;
 800065e:	4b32      	ldr	r3, [pc, #200]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000660:	2200      	movs	r2, #0
 8000662:	639a      	str	r2, [r3, #56]	@ 0x38
	hospi2.Init.Refresh = 400;
 8000664:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000666:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800066a:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800066c:	482e      	ldr	r0, [pc, #184]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800066e:	f002 ffa3 	bl	80035b8 <HAL_OSPI_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_OCTOSPI2_Init+0xb4>
	{
		Error_Handler();
 8000678:	f000 f91c 	bl	80008b4 <Error_Handler>
	}
	sOspiManagerCfg.ClkPort = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sOspiManagerCfg.DQSPort = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
	sOspiManagerCfg.NCSPort = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <MX_OCTOSPI2_Init+0x168>)
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800068c:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <MX_OCTOSPI2_Init+0x16c>)
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg,
 8000690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000698:	4619      	mov	r1, r3
 800069a:	4823      	ldr	r0, [pc, #140]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 800069c:	f003 fc0c 	bl	8003eb8 <HAL_OSPIM_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_OCTOSPI2_Init+0xe2>
			HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
	{
		Error_Handler();
 80006a6:	f000 f905 	bl	80008b4 <Error_Handler>
	}
	sHyperBusCfg.RWRecoveryTime = 3;
 80006aa:	2303      	movs	r3, #3
 80006ac:	61fb      	str	r3, [r7, #28]
	sHyperBusCfg.AccessTime = 6;
 80006ae:	2306      	movs	r3, #6
 80006b0:	623b      	str	r3, [r7, #32]
	sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
	sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 80006b6:	2301      	movs	r3, #1
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg,
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006c2:	4619      	mov	r1, r3
 80006c4:	4818      	ldr	r0, [pc, #96]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 80006c6:	f003 f8e7 	bl	8003898 <HAL_OSPI_HyperbusCfg>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_OCTOSPI2_Init+0x10c>
			HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
	{
		Error_Handler();
 80006d0:	f000 f8f0 	bl	80008b4 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI2_Init 2 */
	sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS;
 80006d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80006dc:	613b      	str	r3, [r7, #16]
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 80006de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006e2:	61bb      	str	r3, [r7, #24]
	sCommand.Address = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]

	if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 80006f8:	f003 f90d 	bl	8003916 <HAL_OSPI_HyperbusCmd>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_OCTOSPI2_Init+0x13e>
			!= HAL_OK)
	{
		Error_Handler();
 8000702:	f000 f8d7 	bl	80008b4 <Error_Handler>
	}

	sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]

	if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_OCTOSPI2_Init+0x160>)
 8000710:	f003 fb00 	bl	8003d14 <HAL_OSPI_MemoryMapped>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_OCTOSPI2_Init+0x156>
	{
		Error_Handler();
 800071a:	f000 f8cb 	bl	80008b4 <Error_Handler>
	}
	/* USER CODE END OCTOSPI2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3748      	adds	r7, #72	@ 0x48
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	240000ec 	.word	0x240000ec
 800072c:	5200a000 	.word	0x5200a000
 8000730:	00010002 	.word	0x00010002
 8000734:	01000002 	.word	0x01000002

08000738 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <MX_GPIO_Init+0xe4>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	4a35      	ldr	r2, [pc, #212]	@ (800081c <MX_GPIO_Init+0xe4>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074e:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_GPIO_Init+0xe4>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_GPIO_Init+0xe4>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000762:	4a2e      	ldr	r2, [pc, #184]	@ (800081c <MX_GPIO_Init+0xe4>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076c:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <MX_GPIO_Init+0xe4>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000772:	f003 0320 	and.w	r3, r3, #32
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <MX_GPIO_Init+0xe4>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <MX_GPIO_Init+0xe4>)
 8000782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078a:	4b24      	ldr	r3, [pc, #144]	@ (800081c <MX_GPIO_Init+0xe4>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_GPIO_Init+0xe4>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079e:	4a1f      	ldr	r2, [pc, #124]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	4a17      	ldr	r2, [pc, #92]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	4a10      	ldr	r2, [pc, #64]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	4a08      	ldr	r2, [pc, #32]	@ (800081c <MX_GPIO_Init+0xe4>)
 80007fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_GPIO_Init+0xe4>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3724      	adds	r7, #36	@ 0x24
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	58024400 	.word	0x58024400

08000820 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000832:	f002 fb43 	bl	8002ebc <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800083a:	2300      	movs	r3, #0
 800083c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x24000000;
 800083e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000842:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000844:	2312      	movs	r3, #18
 8000846:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 8000848:	2300      	movs	r3, #0
 800084a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800084c:	2300      	movs	r3, #0
 800084e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000850:	2303      	movs	r3, #3
 8000852:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000854:	2301      	movs	r3, #1
 8000856:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800085c:	2301      	movs	r3, #1
 800085e:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb60 	bl	8002f2c <HAL_MPU_ConfigRegion>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800086c:	2301      	movs	r3, #1
 800086e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
 8000870:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000874:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000876:	231c      	movs	r3, #28
 8000878:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800087a:	2300      	movs	r3, #0
 800087c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000886:	463b      	mov	r3, r7
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fb4f 	bl	8002f2c <HAL_MPU_ConfigRegion>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800088e:	2302      	movs	r3, #2
 8000890:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000892:	2319      	movs	r3, #25
 8000894:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000896:	2303      	movs	r3, #3
 8000898:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800089a:	2301      	movs	r3, #1
 800089c:	73bb      	strb	r3, [r7, #14]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fb43 	bl	8002f2c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008a6:	2004      	movs	r0, #4
 80008a8:	f002 fb20 	bl	8002eec <HAL_MPU_Enable>

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_MspInit+0x30>)
 80008c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x30>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x30>)
 80008d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	58024400 	.word	0x58024400

080008f4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a83      	ldr	r2, [pc, #524]	@ (8000b20 <HAL_OSPI_MspInit+0x22c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	f040 8116 	bne.w	8000b44 <HAL_OSPI_MspInit+0x250>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000918:	4b82      	ldr	r3, [pc, #520]	@ (8000b24 <HAL_OSPI_MspInit+0x230>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	4a81      	ldr	r2, [pc, #516]	@ (8000b24 <HAL_OSPI_MspInit+0x230>)
 8000920:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000922:	4b80      	ldr	r3, [pc, #512]	@ (8000b24 <HAL_OSPI_MspInit+0x230>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d10e      	bne.n	8000948 <HAL_OSPI_MspInit+0x54>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800092a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 800092c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000930:	4a7d      	ldr	r2, [pc, #500]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000936:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800093a:	4b7b      	ldr	r3, [pc, #492]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 800093c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000944:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000948:	4b77      	ldr	r3, [pc, #476]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 800094a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800094e:	4a76      	ldr	r2, [pc, #472]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000958:	4b73      	ldr	r3, [pc, #460]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 800095a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	637b      	str	r3, [r7, #52]	@ 0x34
 8000964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	4b70      	ldr	r3, [pc, #448]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	4a6e      	ldr	r2, [pc, #440]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000976:	4b6c      	ldr	r3, [pc, #432]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
 8000982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000984:	4b68      	ldr	r3, [pc, #416]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	4a67      	ldr	r2, [pc, #412]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000994:	4b64      	ldr	r3, [pc, #400]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b61      	ldr	r3, [pc, #388]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a5f      	ldr	r2, [pc, #380]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b59      	ldr	r3, [pc, #356]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a58      	ldr	r2, [pc, #352]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b55      	ldr	r3, [pc, #340]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
 80009dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b52      	ldr	r3, [pc, #328]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a50      	ldr	r2, [pc, #320]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	4a49      	ldr	r2, [pc, #292]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0c:	4b46      	ldr	r3, [pc, #280]	@ (8000b28 <HAL_OSPI_MspInit+0x234>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a32:	4619      	mov	r1, r3
 8000a34:	483d      	ldr	r0, [pc, #244]	@ (8000b2c <HAL_OSPI_MspInit+0x238>)
 8000a36:	f002 fab9 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a54:	4619      	mov	r1, r3
 8000a56:	4836      	ldr	r0, [pc, #216]	@ (8000b30 <HAL_OSPI_MspInit+0x23c>)
 8000a58:	f002 faa8 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a74:	4619      	mov	r1, r3
 8000a76:	482f      	ldr	r0, [pc, #188]	@ (8000b34 <HAL_OSPI_MspInit+0x240>)
 8000a78:	f002 fa98 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a7c:	2340      	movs	r3, #64	@ 0x40
 8000a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 8000a8c:	2306      	movs	r3, #6
 8000a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a94:	4619      	mov	r1, r3
 8000a96:	4828      	ldr	r0, [pc, #160]	@ (8000b38 <HAL_OSPI_MspInit+0x244>)
 8000a98:	f002 fa88 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000aac:	230a      	movs	r3, #10
 8000aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <HAL_OSPI_MspInit+0x240>)
 8000ab8:	f002 fa78 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000abc:	2304      	movs	r3, #4
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000acc:	2309      	movs	r3, #9
 8000ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4819      	ldr	r0, [pc, #100]	@ (8000b3c <HAL_OSPI_MspInit+0x248>)
 8000ad8:	f002 fa68 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8000adc:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8000ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000aee:	230a      	movs	r3, #10
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <HAL_OSPI_MspInit+0x238>)
 8000afa:	f002 fa57 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b12:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <HAL_OSPI_MspInit+0x24c>)
 8000b1a:	f002 fa47 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8000b1e:	e08e      	b.n	8000c3e <HAL_OSPI_MspInit+0x34a>
 8000b20:	52005000 	.word	0x52005000
 8000b24:	240001b4 	.word	0x240001b4
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	58021000 	.word	0x58021000
 8000b30:	58021400 	.word	0x58021400
 8000b34:	58020800 	.word	0x58020800
 8000b38:	58020000 	.word	0x58020000
 8000b3c:	58020400 	.word	0x58020400
 8000b40:	58021800 	.word	0x58021800
  else if(hospi->Instance==OCTOSPI2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a3f      	ldr	r2, [pc, #252]	@ (8000c48 <HAL_OSPI_MspInit+0x354>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d177      	bne.n	8000c3e <HAL_OSPI_MspInit+0x34a>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c4c <HAL_OSPI_MspInit+0x358>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a3d      	ldr	r2, [pc, #244]	@ (8000c4c <HAL_OSPI_MspInit+0x358>)
 8000b56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000b58:	4b3c      	ldr	r3, [pc, #240]	@ (8000c4c <HAL_OSPI_MspInit+0x358>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10e      	bne.n	8000b7e <HAL_OSPI_MspInit+0x28a>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000b60:	4b3b      	ldr	r3, [pc, #236]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b66:	4a3a      	ldr	r2, [pc, #232]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000b70:	4b37      	ldr	r3, [pc, #220]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000b7e:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b84:	4a32      	ldr	r2, [pc, #200]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b8a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000b8e:	4b30      	ldr	r3, [pc, #192]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a23      	ldr	r2, [pc, #140]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_OSPI_MspInit+0x35c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bd8:	f241 031f 	movw	r3, #4127	@ 0x101f
 8000bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000bea:	2309      	movs	r3, #9
 8000bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4817      	ldr	r0, [pc, #92]	@ (8000c54 <HAL_OSPI_MspInit+0x360>)
 8000bf6:	f002 f9d9 	bl	8002fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8000bfa:	f640 0303 	movw	r3, #2051	@ 0x803
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000c0c:	2309      	movs	r3, #9
 8000c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c14:	4619      	mov	r1, r3
 8000c16:	4810      	ldr	r0, [pc, #64]	@ (8000c58 <HAL_OSPI_MspInit+0x364>)
 8000c18:	f002 f9c8 	bl	8002fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <HAL_OSPI_MspInit+0x364>)
 8000c3a:	f002 f9b7 	bl	8002fac <HAL_GPIO_Init>
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	@ 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	5200a000 	.word	0x5200a000
 8000c4c:	240001b4 	.word	0x240001b4
 8000c50:	58024400 	.word	0x58024400
 8000c54:	58021400 	.word	0x58021400
 8000c58:	58021800 	.word	0x58021800

08000c5c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <HAL_OSPI_MspDeInit+0xd4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d133      	bne.n	8000cd6 <HAL_OSPI_MspDeInit+0x7a>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_OSPI_MspDeInit+0xd8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <HAL_OSPI_MspDeInit+0xd8>)
 8000c76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000c78:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <HAL_OSPI_MspDeInit+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d107      	bne.n	8000c90 <HAL_OSPI_MspDeInit+0x34>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000c82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c86:	4a2c      	ldr	r2, [pc, #176]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000c88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000c90:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000c92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c96:	4a28      	ldr	r2, [pc, #160]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10);
 8000ca0:	f240 5184 	movw	r1, #1412	@ 0x584
 8000ca4:	4825      	ldr	r0, [pc, #148]	@ (8000d3c <HAL_OSPI_MspDeInit+0xe0>)
 8000ca6:	f002 fb29 	bl	80032fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_8|GPIO_PIN_9);
 8000caa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000cae:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <HAL_OSPI_MspDeInit+0xe4>)
 8000cb0:	f002 fb24 	bl	80032fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3|GPIO_PIN_5);
 8000cb4:	2128      	movs	r1, #40	@ 0x28
 8000cb6:	4823      	ldr	r0, [pc, #140]	@ (8000d44 <HAL_OSPI_MspDeInit+0xe8>)
 8000cb8:	f002 fb20 	bl	80032fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8000cbc:	2140      	movs	r1, #64	@ 0x40
 8000cbe:	4822      	ldr	r0, [pc, #136]	@ (8000d48 <HAL_OSPI_MspDeInit+0xec>)
 8000cc0:	f002 fb1c 	bl	80032fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4821      	ldr	r0, [pc, #132]	@ (8000d4c <HAL_OSPI_MspDeInit+0xf0>)
 8000cc8:	f002 fb18 	bl	80032fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 8000ccc:	2140      	movs	r1, #64	@ 0x40
 8000cce:	4820      	ldr	r0, [pc, #128]	@ (8000d50 <HAL_OSPI_MspDeInit+0xf4>)
 8000cd0:	f002 fb14 	bl	80032fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8000cd4:	e027      	b.n	8000d26 <HAL_OSPI_MspDeInit+0xca>
  else if(hospi->Instance==OCTOSPI2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <HAL_OSPI_MspDeInit+0xf8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d122      	bne.n	8000d26 <HAL_OSPI_MspDeInit+0xca>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_OSPI_MspDeInit+0xd8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <HAL_OSPI_MspDeInit+0xd8>)
 8000ce8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_OSPI_MspDeInit+0xd8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <HAL_OSPI_MspDeInit+0xa6>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000cf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000cfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000cfe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000d04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d08:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <HAL_OSPI_MspDeInit+0xdc>)
 8000d0a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000d0e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d12:	f241 011f 	movw	r1, #4127	@ 0x101f
 8000d16:	480a      	ldr	r0, [pc, #40]	@ (8000d40 <HAL_OSPI_MspDeInit+0xe4>)
 8000d18:	f002 faf0 	bl	80032fc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000d1c:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8000d20:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <HAL_OSPI_MspDeInit+0xf4>)
 8000d22:	f002 faeb 	bl	80032fc <HAL_GPIO_DeInit>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	52005000 	.word	0x52005000
 8000d34:	240001b4 	.word	0x240001b4
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58021000 	.word	0x58021000
 8000d40:	58021400 	.word	0x58021400
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58020000 	.word	0x58020000
 8000d4c:	58020400 	.word	0x58020400
 8000d50:	58021800 	.word	0x58021800
 8000d54:	5200a000 	.word	0x5200a000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f001 ff5d 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b32      	ldr	r3, [pc, #200]	@ (8000e88 <SystemInit+0xd0>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a31      	ldr	r2, [pc, #196]	@ (8000e88 <SystemInit+0xd0>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <SystemInit+0xd4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	2b06      	cmp	r3, #6
 8000dd6:	d807      	bhi.n	8000de8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <SystemInit+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 030f 	bic.w	r3, r3, #15
 8000de0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e8c <SystemInit+0xd4>)
 8000de2:	f043 0307 	orr.w	r3, r3, #7
 8000de6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000de8:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <SystemInit+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <SystemInit+0xd8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000df4:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <SystemInit+0xd8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <SystemInit+0xd8>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4924      	ldr	r1, [pc, #144]	@ (8000e90 <SystemInit+0xd8>)
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <SystemInit+0xdc>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <SystemInit+0xd4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <SystemInit+0xd4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 030f 	bic.w	r3, r3, #15
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <SystemInit+0xd4>)
 8000e1c:	f043 0307 	orr.w	r3, r3, #7
 8000e20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <SystemInit+0xd8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e28:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <SystemInit+0xd8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <SystemInit+0xd8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <SystemInit+0xd8>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <SystemInit+0xe0>)
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <SystemInit+0xd8>)
 8000e3c:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <SystemInit+0xe4>)
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <SystemInit+0xd8>)
 8000e42:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <SystemInit+0xe8>)
 8000e44:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <SystemInit+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <SystemInit+0xd8>)
 8000e4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <SystemInit+0xe8>)
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <SystemInit+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <SystemInit+0xd8>)
 8000e5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <SystemInit+0xe8>)
 8000e5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <SystemInit+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <SystemInit+0xd8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a09      	ldr	r2, [pc, #36]	@ (8000e90 <SystemInit+0xd8>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <SystemInit+0xd8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <SystemInit+0xec>)
 8000e78:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	52002000 	.word	0x52002000
 8000e90:	58024400 	.word	0x58024400
 8000e94:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e98:	02020200 	.word	0x02020200
 8000e9c:	01ff0000 	.word	0x01ff0000
 8000ea0:	01010280 	.word	0x01010280
 8000ea4:	52004000 	.word	0x52004000

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eac:	f7ff ff84 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f006 f9b3 	bl	8007240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fa17 	bl	800030c <main>
  bx  lr
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ee4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ee8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000eec:	080072b8 	.word	0x080072b8
  ldr r2, =_sbss
 8000ef0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000ef4:	24000220 	.word	0x24000220

08000ef8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC3_IRQHandler>

08000efa <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f08:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f10:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f18:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f20:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f28:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f30:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f38:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f40:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f48:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8000f4a:	2300      	movs	r3, #0
};
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09c      	sub	sp, #112	@ 0x70
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2250      	movs	r2, #80	@ 0x50
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 f95d 	bl	8007230 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d105      	bne.n	8000f98 <MX25LM51245G_AutoPollingMemReady+0x40>
 8000f8c:	78bb      	ldrb	r3, [r7, #2]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d102      	bne.n	8000f98 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e088      	b.n	80010aa <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <MX25LM51245G_AutoPollingMemReady+0x52>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <MX25LM51245G_AutoPollingMemReady+0x54>
 8000faa:	2304      	movs	r3, #4
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000fae:	78bb      	ldrb	r3, [r7, #2]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <MX25LM51245G_AutoPollingMemReady+0x60>
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	e000      	b.n	8000fba <MX25LM51245G_AutoPollingMemReady+0x62>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <MX25LM51245G_AutoPollingMemReady+0x70>
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	e001      	b.n	8000fd8 <MX25LM51245G_AutoPollingMemReady+0x80>
 8000fd4:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e001      	b.n	8000fe8 <MX25LM51245G_AutoPollingMemReady+0x90>
 8000fe4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000fea:	78bb      	ldrb	r3, [r7, #2]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8000ff0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ff4:	e000      	b.n	8000ff8 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8000ffa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800100e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001012:	e001      	b.n	8001018 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8001014:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001018:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800101a:	78bb      	ldrb	r3, [r7, #2]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d102      	bne.n	8001026 <MX25LM51245G_AutoPollingMemReady+0xce>
 8001020:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001024:	e000      	b.n	8001028 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8001026:	2300      	movs	r3, #0
 8001028:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <MX25LM51245G_AutoPollingMemReady+0xdc>
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <MX25LM51245G_AutoPollingMemReady+0xde>
 8001034:	2305      	movs	r3, #5
 8001036:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <MX25LM51245G_AutoPollingMemReady+0xea>
 800103e:	2302      	movs	r3, #2
 8001040:	e000      	b.n	8001044 <MX25LM51245G_AutoPollingMemReady+0xec>
 8001042:	2301      	movs	r3, #1
 8001044:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d102      	bne.n	8001052 <MX25LM51245G_AutoPollingMemReady+0xfa>
 800104c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001050:	e000      	b.n	8001054 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8001052:	2300      	movs	r3, #0
 8001054:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001056:	2300      	movs	r3, #0
 8001058:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.Match         = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8001066:	2310      	movs	r3, #16
 8001068:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800106a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800106e:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f002 fb7f 	bl	800377e <HAL_OSPI_Command>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e00e      	b.n	80010aa <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f002 fdb4 	bl	8003c04 <HAL_OSPI_AutoPolling>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e000      	b.n	80010aa <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3770      	adds	r7, #112	@ 0x70
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <MX25LM51245G_ReadSTR>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b098      	sub	sp, #96	@ 0x60
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	72fb      	strb	r3, [r7, #11]
 80010c0:	4613      	mov	r3, r2
 80010c2:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2250      	movs	r2, #80	@ 0x50
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 f8af 	bl	8007230 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <MX25LM51245G_ReadSTR+0x32>
 80010d8:	7abb      	ldrb	r3, [r7, #10]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <MX25LM51245G_ReadSTR+0x32>
  {
    return MX25LM51245G_ERROR;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e06b      	b.n	80011bc <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <MX25LM51245G_ReadSTR+0x44>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <MX25LM51245G_ReadSTR+0x46>
 80010f6:	2304      	movs	r3, #4
 80010f8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <MX25LM51245G_ReadSTR+0x56>
 8001104:	2300      	movs	r3, #0
 8001106:	e000      	b.n	800110a <MX25LM51245G_ReadSTR+0x58>
 8001108:	2310      	movs	r3, #16
 800110a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <MX25LM51245G_ReadSTR+0x6e>
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <MX25LM51245G_ReadSTR+0x6a>
 8001118:	230b      	movs	r3, #11
 800111a:	e003      	b.n	8001124 <MX25LM51245G_ReadSTR+0x72>
 800111c:	230c      	movs	r3, #12
 800111e:	e001      	b.n	8001124 <MX25LM51245G_ReadSTR+0x72>
 8001120:	f64e 4313 	movw	r3, #60435	@ 0xec13
 8001124:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <MX25LM51245G_ReadSTR+0x80>
 800112c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001130:	e001      	b.n	8001136 <MX25LM51245G_ReadSTR+0x84>
 8001132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800113c:	7abb      	ldrb	r3, [r7, #10]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <MX25LM51245G_ReadSTR+0x96>
 8001142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001146:	e001      	b.n	800114c <MX25LM51245G_ReadSTR+0x9a>
 8001148:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 800114e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001152:	2300      	movs	r3, #0
 8001154:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <MX25LM51245G_ReadSTR+0xb0>
 800115c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001160:	e001      	b.n	8001166 <MX25LM51245G_ReadSTR+0xb4>
 8001162:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001166:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <MX25LM51245G_ReadSTR+0xc4>
 8001172:	2308      	movs	r3, #8
 8001174:	e000      	b.n	8001178 <MX25LM51245G_ReadSTR+0xc6>
 8001176:	2306      	movs	r3, #6
 8001178:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = Size;
 800117a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800118e:	4619      	mov	r1, r3
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f002 faf4 	bl	800377e <HAL_OSPI_Command>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <MX25LM51245G_ReadSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	e00c      	b.n	80011bc <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f002 fc88 	bl	8003abe <HAL_OSPI_Receive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <MX25LM51245G_ReadSTR+0x108>
  {
    return MX25LM51245G_ERROR;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e000      	b.n	80011bc <MX25LM51245G_ReadSTR+0x10a>
  }

  return MX25LM51245G_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3760      	adds	r7, #96	@ 0x60
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <MX25LM51245G_ReadDTR>:
  * @param  Size Size of data to read
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadDTR(OSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b098      	sub	sp, #96	@ 0x60
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef s_command = {0};
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	2250      	movs	r2, #80	@ 0x50
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 f828 	bl	8007230 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80011e8:	2304      	movs	r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80011ec:	2308      	movs	r3, #8
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80011f0:	2310      	movs	r3, #16
 80011f2:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80011f4:	f64e 6311 	movw	r3, #60945	@ 0xee11
 80011f8:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80011fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001200:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001206:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8001214:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001218:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800121a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800121e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8001220:	2306      	movs	r3, #6
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = Size;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001228:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800122c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123a:	4619      	mov	r1, r3
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f002 fa9e 	bl	800377e <HAL_OSPI_Command>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <MX25LM51245G_ReadDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	e00c      	b.n	8001268 <MX25LM51245G_ReadDTR+0xa4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800124e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f002 fc32 	bl	8003abe <HAL_OSPI_Receive>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <MX25LM51245G_ReadDTR+0xa2>
  {
    return MX25LM51245G_ERROR;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	e000      	b.n	8001268 <MX25LM51245G_ReadDTR+0xa4>
  }

  return MX25LM51245G_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3760      	adds	r7, #96	@ 0x60
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MX25LM51245G_PageProgram>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgram(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b098      	sub	sp, #96	@ 0x60
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	72fb      	strb	r3, [r7, #11]
 800127e:	4613      	mov	r3, r2
 8001280:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	2250      	movs	r2, #80	@ 0x50
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f005 ffd0 	bl	8007230 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d105      	bne.n	80012a2 <MX25LM51245G_PageProgram+0x32>
 8001296:	7abb      	ldrb	r3, [r7, #10]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <MX25LM51245G_PageProgram+0x32>
  {
    return MX25LM51245G_ERROR;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e066      	b.n	8001370 <MX25LM51245G_PageProgram+0x100>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <MX25LM51245G_PageProgram+0x44>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <MX25LM51245G_PageProgram+0x46>
 80012b4:	2304      	movs	r3, #4
 80012b6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <MX25LM51245G_PageProgram+0x56>
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <MX25LM51245G_PageProgram+0x58>
 80012c6:	2310      	movs	r3, #16
 80012c8:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <MX25LM51245G_PageProgram+0x6e>
 80012d0:	7abb      	ldrb	r3, [r7, #10]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <MX25LM51245G_PageProgram+0x6a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e003      	b.n	80012e2 <MX25LM51245G_PageProgram+0x72>
 80012da:	2312      	movs	r3, #18
 80012dc:	e001      	b.n	80012e2 <MX25LM51245G_PageProgram+0x72>
 80012de:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 80012e2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <MX25LM51245G_PageProgram+0x80>
 80012ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ee:	e001      	b.n	80012f4 <MX25LM51245G_PageProgram+0x84>
 80012f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80012fa:	7abb      	ldrb	r3, [r7, #10]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <MX25LM51245G_PageProgram+0x96>
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	e001      	b.n	800130a <MX25LM51245G_PageProgram+0x9a>
 8001306:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 800130c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <MX25LM51245G_PageProgram+0xb0>
 800131a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800131e:	e001      	b.n	8001324 <MX25LM51245G_PageProgram+0xb4>
 8001320:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001324:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = Size;
 800132e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001342:	4619      	mov	r1, r3
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f002 fa1a 	bl	800377e <HAL_OSPI_Command>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <MX25LM51245G_PageProgram+0xe6>
  {
    return MX25LM51245G_ERROR;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	e00c      	b.n	8001370 <MX25LM51245G_PageProgram+0x100>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f002 fb3b 	bl	80039d8 <HAL_OSPI_Transmit>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <MX25LM51245G_PageProgram+0xfe>
  {
    return MX25LM51245G_ERROR;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	e000      	b.n	8001370 <MX25LM51245G_PageProgram+0x100>
  }

  return MX25LM51245G_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3760      	adds	r7, #96	@ 0x60
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <MX25LM51245G_PageProgramDTR>:
  * @param  Size Size of data to write. Range 1 ~ MX25LM51245G_PAGE_SIZE
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgramDTR(OSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b098      	sub	sp, #96	@ 0x60
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef s_command = {0};
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	2250      	movs	r2, #80	@ 0x50
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f005 ff4e 	bl	8007230 <memset>

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800139c:	2304      	movs	r3, #4
 800139e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80013a0:	2308      	movs	r3, #8
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80013a4:	2310      	movs	r3, #16
 80013a6:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80013a8:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 80013ac:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80013ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80013b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013b8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80013ba:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80013c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80013cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80013ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80013d2:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = Size;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80013e0:	2300      	movs	r3, #0
 80013e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f002 f9c5 	bl	800377e <HAL_OSPI_Command>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <MX25LM51245G_PageProgramDTR+0x88>
  {
    return MX25LM51245G_ERROR;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e00c      	b.n	800141a <MX25LM51245G_PageProgramDTR+0xa2>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f002 fae6 	bl	80039d8 <HAL_OSPI_Transmit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <MX25LM51245G_PageProgramDTR+0xa0>
  {
    return MX25LM51245G_ERROR;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e000      	b.n	800141a <MX25LM51245G_PageProgramDTR+0xa2>
  }

  return MX25LM51245G_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3760      	adds	r7, #96	@ 0x60
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b098      	sub	sp, #96	@ 0x60
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
 800142e:	4613      	mov	r3, r2
 8001430:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2250      	movs	r2, #80	@ 0x50
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fef8 	bl	8007230 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25LM51245G_ERROR;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e088      	b.n	800156e <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800145c:	2301      	movs	r3, #1
 800145e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4e>
 800146e:	2304      	movs	r3, #4
 8001470:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <MX25LM51245G_EnableSTRMemoryMappedMode+0x5e>
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <MX25LM51245G_EnableSTRMemoryMappedMode+0x60>
 8001480:	2310      	movs	r3, #16
 8001482:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <MX25LM51245G_EnableSTRMemoryMappedMode+0x76>
 800148a:	78bb      	ldrb	r3, [r7, #2]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <MX25LM51245G_EnableSTRMemoryMappedMode+0x72>
 8001490:	230b      	movs	r3, #11
 8001492:	e003      	b.n	800149c <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 8001494:	230c      	movs	r3, #12
 8001496:	e001      	b.n	800149c <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 8001498:	f64e 4313 	movw	r3, #60435	@ 0xec13
 800149c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <MX25LM51245G_EnableSTRMemoryMappedMode+0x88>
 80014a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a8:	e001      	b.n	80014ae <MX25LM51245G_EnableSTRMemoryMappedMode+0x8c>
 80014aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x9e>
 80014ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014be:	e001      	b.n	80014c4 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa2>
 80014c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014c4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <MX25LM51245G_EnableSTRMemoryMappedMode+0xb4>
 80014d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014d4:	e001      	b.n	80014da <MX25LM51245G_EnableSTRMemoryMappedMode+0xb8>
 80014d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014da:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <MX25LM51245G_EnableSTRMemoryMappedMode+0xc8>
 80014e6:	2308      	movs	r3, #8
 80014e8:	e000      	b.n	80014ec <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
 80014ea:	2306      	movs	r3, #6
 80014ec:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80014f2:	2300      	movs	r3, #0
 80014f4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f002 f93c 	bl	800377e <HAL_OSPI_Command>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <MX25LM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25LM51245G_ERROR;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	e02d      	b.n	800156e <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001512:	2302      	movs	r3, #2
 8001514:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d106      	bne.n	800152a <MX25LM51245G_EnableSTRMemoryMappedMode+0x108>
 800151c:	78bb      	ldrb	r3, [r7, #2]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <MX25LM51245G_EnableSTRMemoryMappedMode+0x104>
 8001522:	2302      	movs	r3, #2
 8001524:	e003      	b.n	800152e <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 8001526:	2312      	movs	r3, #18
 8001528:	e001      	b.n	800152e <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 800152a:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 800152e:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f002 f91d 	bl	800377e <HAL_OSPI_Command>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <MX25LM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25LM51245G_ERROR;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e00e      	b.n	800156e <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f002 fbda 	bl	8003d14 <HAL_OSPI_MemoryMapped>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <MX25LM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25LM51245G_ERROR;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e000      	b.n	800156e <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25LM51245G_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3760      	adds	r7, #96	@ 0x60
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b098      	sub	sp, #96	@ 0x60
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2250      	movs	r2, #80	@ 0x50
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fe50 	bl	8007230 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800159a:	2301      	movs	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80015a2:	2304      	movs	r3, #4
 80015a4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80015a6:	2308      	movs	r3, #8
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80015aa:	2310      	movs	r3, #16
 80015ac:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80015ae:	f64e 6311 	movw	r3, #60945	@ 0xee11
 80015b2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80015b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80015ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80015c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80015ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80015d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80015d4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80015d6:	2306      	movs	r3, #6
 80015d8:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80015da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80015de:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80015e0:	2300      	movs	r3, #0
 80015e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f002 f8c5 	bl	800377e <HAL_OSPI_Command>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <MX25LM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25LM51245G_ERROR;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e025      	b.n	800164c <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001600:	2302      	movs	r3, #2
 8001602:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001604:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001608:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f002 f8ae 	bl	800377e <HAL_OSPI_Command>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <MX25LM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25LM51245G_ERROR;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	e00e      	b.n	800164c <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f002 fb6b 	bl	8003d14 <HAL_OSPI_MemoryMapped>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <MX25LM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25LM51245G_ERROR;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e000      	b.n	800164c <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25LM51245G_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3760      	adds	r7, #96	@ 0x60
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09c      	sub	sp, #112	@ 0x70
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
 8001660:	4613      	mov	r3, r2
 8001662:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	2250      	movs	r2, #80	@ 0x50
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f005 fddf 	bl	8007230 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <MX25LM51245G_WriteEnable+0x40>
 8001688:	78bb      	ldrb	r3, [r7, #2]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e0a6      	b.n	80017e2 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <MX25LM51245G_WriteEnable+0x52>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <MX25LM51245G_WriteEnable+0x54>
 80016a6:	2304      	movs	r3, #4
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80016aa:	78bb      	ldrb	r3, [r7, #2]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <MX25LM51245G_WriteEnable+0x60>
 80016b0:	2308      	movs	r3, #8
 80016b2:	e000      	b.n	80016b6 <MX25LM51245G_WriteEnable+0x62>
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <MX25LM51245G_WriteEnable+0x6e>
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <MX25LM51245G_WriteEnable+0x70>
 80016c2:	2310      	movs	r3, #16
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <MX25LM51245G_WriteEnable+0x7c>
 80016cc:	2306      	movs	r3, #6
 80016ce:	e001      	b.n	80016d4 <MX25LM51245G_WriteEnable+0x80>
 80016d0:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80016de:	2300      	movs	r3, #0
 80016e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80016ea:	2300      	movs	r3, #0
 80016ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f002 f840 	bl	800377e <HAL_OSPI_Command>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	e06b      	b.n	80017e2 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <MX25LM51245G_WriteEnable+0xc0>
 8001710:	2305      	movs	r3, #5
 8001712:	e001      	b.n	8001718 <MX25LM51245G_WriteEnable+0xc4>
 8001714:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <MX25LM51245G_WriteEnable+0xd0>
 8001720:	2300      	movs	r3, #0
 8001722:	e001      	b.n	8001728 <MX25LM51245G_WriteEnable+0xd4>
 8001724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800172a:	78bb      	ldrb	r3, [r7, #2]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d102      	bne.n	8001736 <MX25LM51245G_WriteEnable+0xe2>
 8001730:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001734:	e000      	b.n	8001738 <MX25LM51245G_WriteEnable+0xe4>
 8001736:	2300      	movs	r3, #0
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800173a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800173e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <MX25LM51245G_WriteEnable+0xfc>
 800174a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800174e:	e001      	b.n	8001754 <MX25LM51245G_WriteEnable+0x100>
 8001750:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001754:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d102      	bne.n	8001762 <MX25LM51245G_WriteEnable+0x10e>
 800175c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001760:	e000      	b.n	8001764 <MX25LM51245G_WriteEnable+0x110>
 8001762:	2300      	movs	r3, #0
 8001764:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <MX25LM51245G_WriteEnable+0x11c>
 800176c:	2300      	movs	r3, #0
 800176e:	e000      	b.n	8001772 <MX25LM51245G_WriteEnable+0x11e>
 8001770:	2305      	movs	r3, #5
 8001772:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001774:	78bb      	ldrb	r3, [r7, #2]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <MX25LM51245G_WriteEnable+0x12a>
 800177a:	2302      	movs	r3, #2
 800177c:	e000      	b.n	8001780 <MX25LM51245G_WriteEnable+0x12c>
 800177e:	2301      	movs	r3, #1
 8001780:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8001782:	78bb      	ldrb	r3, [r7, #2]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <MX25LM51245G_WriteEnable+0x13a>
 8001788:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800178c:	e000      	b.n	8001790 <MX25LM51245G_WriteEnable+0x13c>
 800178e:	2300      	movs	r3, #0
 8001790:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 ffee 	bl	800377e <HAL_OSPI_Command>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	e019      	b.n	80017e2 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 80017ae:	2302      	movs	r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 80017b2:	2302      	movs	r3, #2
 80017b4:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80017ba:	2310      	movs	r3, #16
 80017bc:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80017be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017c2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f002 fa18 	bl	8003c04 <HAL_OSPI_AutoPolling>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e000      	b.n	80017e2 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3770      	adds	r7, #112	@ 0x70
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b098      	sub	sp, #96	@ 0x60
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	72fb      	strb	r3, [r7, #11]
 80017f8:	4613      	mov	r3, r2
 80017fa:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2250      	movs	r2, #80	@ 0x50
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f005 fd13 	bl	8007230 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <MX25LM51245G_WriteCfg2Register+0x32>
 8001810:	7abb      	ldrb	r3, [r7, #10]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d102      	bne.n	800181c <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e077      	b.n	800190c <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001824:	7afb      	ldrb	r3, [r7, #11]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <MX25LM51245G_WriteCfg2Register+0x44>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <MX25LM51245G_WriteCfg2Register+0x46>
 800182e:	2304      	movs	r3, #4
 8001830:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001832:	7abb      	ldrb	r3, [r7, #10]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <MX25LM51245G_WriteCfg2Register+0x52>
 8001838:	2308      	movs	r3, #8
 800183a:	e000      	b.n	800183e <MX25LM51245G_WriteCfg2Register+0x54>
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <MX25LM51245G_WriteCfg2Register+0x60>
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <MX25LM51245G_WriteCfg2Register+0x62>
 800184a:	2310      	movs	r3, #16
 800184c:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <MX25LM51245G_WriteCfg2Register+0x6e>
 8001854:	2372      	movs	r3, #114	@ 0x72
 8001856:	e001      	b.n	800185c <MX25LM51245G_WriteCfg2Register+0x72>
 8001858:	f247 238d 	movw	r3, #29325	@ 0x728d
 800185c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <MX25LM51245G_WriteCfg2Register+0x80>
 8001864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001868:	e001      	b.n	800186e <MX25LM51245G_WriteCfg2Register+0x84>
 800186a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001870:	7abb      	ldrb	r3, [r7, #10]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <MX25LM51245G_WriteCfg2Register+0x92>
 8001876:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800187a:	e000      	b.n	800187e <MX25LM51245G_WriteCfg2Register+0x94>
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001880:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <MX25LM51245G_WriteCfg2Register+0xb0>
 8001894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001898:	e001      	b.n	800189e <MX25LM51245G_WriteCfg2Register+0xb4>
 800189a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80018a0:	7abb      	ldrb	r3, [r7, #10]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <MX25LM51245G_WriteCfg2Register+0xc2>
 80018a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80018aa:	e000      	b.n	80018ae <MX25LM51245G_WriteCfg2Register+0xc4>
 80018ac:	2300      	movs	r3, #0
 80018ae:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80018b4:	7afb      	ldrb	r3, [r7, #11]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <MX25LM51245G_WriteCfg2Register+0xde>
 80018ba:	7abb      	ldrb	r3, [r7, #10]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <MX25LM51245G_WriteCfg2Register+0xda>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <MX25LM51245G_WriteCfg2Register+0xe0>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <MX25LM51245G_WriteCfg2Register+0xe0>
 80018c8:	2301      	movs	r3, #1
 80018ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80018d0:	2300      	movs	r3, #0
 80018d2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018dc:	4619      	mov	r1, r3
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f001 ff4d 	bl	800377e <HAL_OSPI_Command>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e00d      	b.n	800190c <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f4:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f002 f86d 	bl	80039d8 <HAL_OSPI_Transmit>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	e000      	b.n	800190c <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3760      	adds	r7, #96	@ 0x60
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b098      	sub	sp, #96	@ 0x60
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	72fb      	strb	r3, [r7, #11]
 8001922:	4613      	mov	r3, r2
 8001924:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2250      	movs	r2, #80	@ 0x50
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f005 fc7e 	bl	8007230 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <MX25LM51245G_ReadCfg2Register+0x32>
 800193a:	7abb      	ldrb	r3, [r7, #10]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d102      	bne.n	8001946 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	e07c      	b.n	8001a40 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <MX25LM51245G_ReadCfg2Register+0x44>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <MX25LM51245G_ReadCfg2Register+0x46>
 8001958:	2304      	movs	r3, #4
 800195a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800195c:	7abb      	ldrb	r3, [r7, #10]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <MX25LM51245G_ReadCfg2Register+0x52>
 8001962:	2308      	movs	r3, #8
 8001964:	e000      	b.n	8001968 <MX25LM51245G_ReadCfg2Register+0x54>
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <MX25LM51245G_ReadCfg2Register+0x60>
 8001970:	2300      	movs	r3, #0
 8001972:	e000      	b.n	8001976 <MX25LM51245G_ReadCfg2Register+0x62>
 8001974:	2310      	movs	r3, #16
 8001976:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <MX25LM51245G_ReadCfg2Register+0x6e>
 800197e:	2371      	movs	r3, #113	@ 0x71
 8001980:	e001      	b.n	8001986 <MX25LM51245G_ReadCfg2Register+0x72>
 8001982:	f247 138e 	movw	r3, #29070	@ 0x718e
 8001986:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <MX25LM51245G_ReadCfg2Register+0x80>
 800198e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001992:	e001      	b.n	8001998 <MX25LM51245G_ReadCfg2Register+0x84>
 8001994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800199a:	7abb      	ldrb	r3, [r7, #10]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d102      	bne.n	80019a6 <MX25LM51245G_ReadCfg2Register+0x92>
 80019a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019a4:	e000      	b.n	80019a8 <MX25LM51245G_ReadCfg2Register+0x94>
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80019aa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <MX25LM51245G_ReadCfg2Register+0xb0>
 80019be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019c2:	e001      	b.n	80019c8 <MX25LM51245G_ReadCfg2Register+0xb4>
 80019c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d102      	bne.n	80019d6 <MX25LM51245G_ReadCfg2Register+0xc2>
 80019d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80019d4:	e000      	b.n	80019d8 <MX25LM51245G_ReadCfg2Register+0xc4>
 80019d6:	2300      	movs	r3, #0
 80019d8:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80019da:	7afb      	ldrb	r3, [r7, #11]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <MX25LM51245G_ReadCfg2Register+0xd0>
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <MX25LM51245G_ReadCfg2Register+0xd2>
 80019e4:	2305      	movs	r3, #5
 80019e6:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <MX25LM51245G_ReadCfg2Register+0xde>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e000      	b.n	80019f4 <MX25LM51245G_ReadCfg2Register+0xe0>
 80019f2:	2301      	movs	r3, #1
 80019f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80019f6:	7abb      	ldrb	r3, [r7, #10]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d102      	bne.n	8001a02 <MX25LM51245G_ReadCfg2Register+0xee>
 80019fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a00:	e000      	b.n	8001a04 <MX25LM51245G_ReadCfg2Register+0xf0>
 8001a02:	2300      	movs	r3, #0
 8001a04:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001a06:	2300      	movs	r3, #0
 8001a08:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4619      	mov	r1, r3
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f001 feb2 	bl	800377e <HAL_OSPI_Command>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	e00c      	b.n	8001a40 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f002 f846 	bl	8003abe <HAL_OSPI_Receive>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	e000      	b.n	8001a40 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3760      	adds	r7, #96	@ 0x60
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b096      	sub	sp, #88	@ 0x58
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
 8001a54:	4613      	mov	r3, r2
 8001a56:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	2250      	movs	r2, #80	@ 0x50
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f005 fbe5 	bl	8007230 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <MX25LM51245G_ResetEnable+0x30>
 8001a6c:	78bb      	ldrb	r3, [r7, #2]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e03b      	b.n	8001af0 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <MX25LM51245G_ResetEnable+0x42>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <MX25LM51245G_ResetEnable+0x44>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001a8e:	78bb      	ldrb	r3, [r7, #2]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <MX25LM51245G_ResetEnable+0x50>
 8001a94:	2308      	movs	r3, #8
 8001a96:	e000      	b.n	8001a9a <MX25LM51245G_ResetEnable+0x52>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <MX25LM51245G_ResetEnable+0x5e>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <MX25LM51245G_ResetEnable+0x60>
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <MX25LM51245G_ResetEnable+0x6c>
 8001ab0:	2366      	movs	r3, #102	@ 0x66
 8001ab2:	e001      	b.n	8001ab8 <MX25LM51245G_ResetEnable+0x70>
 8001ab4:	f246 6399 	movw	r3, #26265	@ 0x6699
 8001ab8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f001 fe4e 	bl	800377e <HAL_OSPI_Command>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e000      	b.n	8001af0 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3758      	adds	r7, #88	@ 0x58
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b096      	sub	sp, #88	@ 0x58
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	4613      	mov	r3, r2
 8001b06:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2250      	movs	r2, #80	@ 0x50
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fb8d 	bl	8007230 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <MX25LM51245G_ResetMemory+0x30>
 8001b1c:	78bb      	ldrb	r3, [r7, #2]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e03b      	b.n	8001ba0 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <MX25LM51245G_ResetMemory+0x42>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <MX25LM51245G_ResetMemory+0x44>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001b3e:	78bb      	ldrb	r3, [r7, #2]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <MX25LM51245G_ResetMemory+0x50>
 8001b44:	2308      	movs	r3, #8
 8001b46:	e000      	b.n	8001b4a <MX25LM51245G_ResetMemory+0x52>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <MX25LM51245G_ResetMemory+0x5e>
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <MX25LM51245G_ResetMemory+0x60>
 8001b56:	2310      	movs	r3, #16
 8001b58:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <MX25LM51245G_ResetMemory+0x6c>
 8001b60:	2399      	movs	r3, #153	@ 0x99
 8001b62:	e001      	b.n	8001b68 <MX25LM51245G_ResetMemory+0x70>
 8001b64:	f649 1366 	movw	r3, #39270	@ 0x9966
 8001b68:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f001 fdf6 	bl	800377e <HAL_OSPI_Command>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	e000      	b.n	8001ba0 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3758      	adds	r7, #88	@ 0x58
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	@ 0x50
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bb8:	f06f 0301 	mvn.w	r3, #1
 8001bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bbe:	e087      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8001bc0:	4a46      	ldr	r2, [pc, #280]	@ (8001cdc <BSP_OSPI_NOR_Init+0x134>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d17f      	bne.n	8001ccc <BSP_OSPI_NOR_Init+0x124>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	225c      	movs	r2, #92	@ 0x5c
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <BSP_OSPI_NOR_Init+0x138>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fb57 	bl	800228c <OSPI_NOR_MspInit>
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Get Flash informations of one memory */
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f989 	bl	8000efa <MX25LM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_config.ClockPrescaler = 2U;
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <BSP_OSPI_NOR_Init+0x5e>
  {
    return 32U;
 8001c02:	2320      	movs	r3, #32
 8001c04:	e003      	b.n	8001c0e <BSP_OSPI_NOR_Init+0x66>
  }
  return __builtin_clz(value);
 8001c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
      ospi_config.TransferRate   = Init->TransferRate;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	785b      	ldrb	r3, [r3, #1]
 8001c18:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI Clock configuration */
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	225c      	movs	r2, #92	@ 0x5c
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce0 <BSP_OSPI_NOR_Init+0x138>)
 8001c24:	4413      	add	r3, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fb0a 	bl	8002240 <MX_OSPI_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <BSP_OSPI_NOR_Init+0x92>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001c32:	f06f 0303 	mvn.w	r3, #3
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c38:	e04a      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
      }
       /* STM32 OSPI interface initialization */
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	225c      	movs	r2, #92	@ 0x5c
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	4a27      	ldr	r2, [pc, #156]	@ (8001ce0 <BSP_OSPI_NOR_Init+0x138>)
 8001c44:	4413      	add	r3, r2
 8001c46:	f107 020c 	add.w	r2, r7, #12
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f897 	bl	8001d80 <MX_OSPI_NOR_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <BSP_OSPI_NOR_Init+0xb8>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001c58:	f06f 0303 	mvn.w	r3, #3
 8001c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c5e:	e037      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fcbf 	bl	80025e4 <OSPI_NOR_ResetMemory>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <BSP_OSPI_NOR_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c6c:	f06f 0304 	mvn.w	r3, #4
 8001c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c72:	e02d      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
      }
      /* Check if memory is ready */
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	225c      	movs	r2, #92	@ 0x5c
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ce0 <BSP_OSPI_NOR_Init+0x138>)
 8001c7e:	1898      	adds	r0, r3, r2
 8001c80:	4a16      	ldr	r2, [pc, #88]	@ (8001cdc <BSP_OSPI_NOR_Init+0x134>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	7859      	ldrb	r1, [r3, #1]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <BSP_OSPI_NOR_Init+0x134>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f7ff f95f 	bl	8000f58 <MX25LM51245G_AutoPollingMemReady>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <BSP_OSPI_NOR_Init+0x100>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ca0:	f06f 0304 	mvn.w	r3, #4
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca6:	e013      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7819      	ldrb	r1, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa4e 	bl	8002154 <BSP_OSPI_NOR_ConfigFlash>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <BSP_OSPI_NOR_Init+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cbe:	f06f 0304 	mvn.w	r3, #4
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc4:	e004      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cca:	e001      	b.n	8001cd0 <BSP_OSPI_NOR_Init+0x128>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  /* Return BSP status */
  return ret;
 8001cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3750      	adds	r7, #80	@ 0x50
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	24000214 	.word	0x24000214
 8001ce0:	240001b8 	.word	0x240001b8

08001ce4 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cf6:	f06f 0301 	mvn.w	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e037      	b.n	8001d6e <BSP_OSPI_NOR_DeInit+0x8a>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <BSP_OSPI_NOR_DeInit+0x94>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d108      	bne.n	8001d1c <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9ec 	bl	80020e8 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <BSP_OSPI_NOR_DeInit+0x38>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8001d16:	f06f 0304 	mvn.w	r3, #4
 8001d1a:	e029      	b.n	8001d70 <BSP_OSPI_NOR_DeInit+0x8c>
      }
    }

    /* Set default Ospi_Nor_Ctx values */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8001d1c:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <BSP_OSPI_NOR_DeInit+0x94>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2100      	movs	r1, #0
 8001d22:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8001d26:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <BSP_OSPI_NOR_DeInit+0x94>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8001d32:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <BSP_OSPI_NOR_DeInit+0x94>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
    OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	225c      	movs	r2, #92	@ 0x5c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <BSP_OSPI_NOR_DeInit+0x98>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fbf0 	bl	8002530 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

    /* Call the DeInit function to reset the driver */
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	225c      	movs	r2, #92	@ 0x5c
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	4a08      	ldr	r2, [pc, #32]	@ (8001d7c <BSP_OSPI_NOR_DeInit+0x98>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 fce7 	bl	8003730 <HAL_OSPI_DeInit>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <BSP_OSPI_NOR_DeInit+0x8a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d68:	f06f 0303 	mvn.w	r3, #3
 8001d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	24000214 	.word	0x24000214
 8001d7c:	240001b8 	.word	0x240001b8

08001d80 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Config)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <MX_OSPI_NOR_Init+0x88>)
 8001d8e:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2204      	movs	r2, #4
 8001d94:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	@ 0x30

  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <MX_OSPI_NOR_Init+0x6c>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001de0:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dea:	e005      	b.n	8001df8 <MX_OSPI_NOR_Init+0x78>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f001 fbdd 	bl	80035b8 <HAL_OSPI_Init>
 8001dfe:	4603      	mov	r3, r0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	52005000 	.word	0x52005000

08001e0c <BSP_OSPI_NOR_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Read(uint32_t Instance, uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <BSP_OSPI_NOR_Read+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e24:	f06f 0301 	mvn.w	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e031      	b.n	8001e90 <BSP_OSPI_NOR_Read+0x84>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <BSP_OSPI_NOR_Read+0x90>)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <BSP_OSPI_NOR_Read+0x62>
    {
      if(MX25LM51245G_ReadSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE, pData, ReadAddr, Size) != MX25LM51245G_OK)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	225c      	movs	r2, #92	@ 0x5c
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <BSP_OSPI_NOR_Read+0x94>)
 8001e44:	1898      	adds	r0, r3, r2
 8001e46:	4a15      	ldr	r2, [pc, #84]	@ (8001e9c <BSP_OSPI_NOR_Read+0x90>)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	7859      	ldrb	r1, [r3, #1]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f7ff f929 	bl	80010b2 <MX25LM51245G_ReadSTR>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d014      	beq.n	8001e90 <BSP_OSPI_NOR_Read+0x84>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e66:	f06f 0304 	mvn.w	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e010      	b.n	8001e90 <BSP_OSPI_NOR_Read+0x84>
      }
    }
    else
    {
      if(MX25LM51245G_ReadDTR(&hospi_nor[Instance], pData, ReadAddr, Size) != MX25LM51245G_OK)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	225c      	movs	r2, #92	@ 0x5c
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <BSP_OSPI_NOR_Read+0x94>)
 8001e78:	1898      	adds	r0, r3, r2
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	f7ff f9a0 	bl	80011c4 <MX25LM51245G_ReadDTR>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <BSP_OSPI_NOR_Read+0x84>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e8a:	f06f 0304 	mvn.w	r3, #4
 8001e8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001e90:	697b      	ldr	r3, [r7, #20]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24000214 	.word	0x24000214
 8001ea0:	240001b8 	.word	0x240001b8

08001ea4 <BSP_OSPI_NOR_Write>:
  * @param  WriteAddr Write start address
  * @param  Size      Size of data to write
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Write(uint32_t Instance, uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t end_addr, current_size, current_addr;
  uint32_t data_addr;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <BSP_OSPI_NOR_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ebc:	f06f 0301 	mvn.w	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec2:	e0b3      	b.n	800202c <BSP_OSPI_NOR_Write+0x188>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MX25LM51245G_PAGE_SIZE - (WriteAddr % MX25LM51245G_PAGE_SIZE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001ecc:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 8001ece:	6a3a      	ldr	r2, [r7, #32]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d901      	bls.n	8001eda <BSP_OSPI_NOR_Write+0x36>
    {
      current_size = Size;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
    data_addr = (uint32_t)pData;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if(MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	225c      	movs	r2, #92	@ 0x5c
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	4a51      	ldr	r2, [pc, #324]	@ (8002038 <BSP_OSPI_NOR_Write+0x194>)
 8001ef4:	1898      	adds	r0, r3, r2
 8001ef6:	4a51      	ldr	r2, [pc, #324]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	7859      	ldrb	r1, [r3, #1]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	789b      	ldrb	r3, [r3, #2]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff f824 	bl	8000f58 <MX25LM51245G_AutoPollingMemReady>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <BSP_OSPI_NOR_Write+0x7a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f16:	f06f 0304 	mvn.w	r3, #4
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1c:	e07e      	b.n	800201c <BSP_OSPI_NOR_Write+0x178>
      }/* Enable write operations */
      else if(MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	225c      	movs	r2, #92	@ 0x5c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a44      	ldr	r2, [pc, #272]	@ (8002038 <BSP_OSPI_NOR_Write+0x194>)
 8001f28:	1898      	adds	r0, r3, r2
 8001f2a:	4a44      	ldr	r2, [pc, #272]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	7859      	ldrb	r1, [r3, #1]
 8001f34:	4a41      	ldr	r2, [pc, #260]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	789b      	ldrb	r3, [r3, #2]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f7ff fb88 	bl	8001654 <MX25LM51245G_WriteEnable>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <BSP_OSPI_NOR_Write+0xae>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f4a:	f06f 0304 	mvn.w	r3, #4
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	e064      	b.n	800201c <BSP_OSPI_NOR_Write+0x178>
      }
      else
      {
        if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8001f52:	4a3a      	ldr	r2, [pc, #232]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	789b      	ldrb	r3, [r3, #2]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d11a      	bne.n	8001f96 <BSP_OSPI_NOR_Write+0xf2>
        {
          /* Issue page program command */
          if(MX25LM51245G_PageProgram(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE, (uint8_t*)data_addr, current_addr, current_size) != MX25LM51245G_OK)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	225c      	movs	r2, #92	@ 0x5c
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	4a33      	ldr	r2, [pc, #204]	@ (8002038 <BSP_OSPI_NOR_Write+0x194>)
 8001f6a:	1898      	adds	r0, r3, r2
 8001f6c:	4a33      	ldr	r2, [pc, #204]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	7859      	ldrb	r1, [r3, #1]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	2201      	movs	r2, #1
 8001f84:	f7ff f974 	bl	8001270 <MX25LM51245G_PageProgram>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d014      	beq.n	8001fb8 <BSP_OSPI_NOR_Write+0x114>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f8e:	f06f 0304 	mvn.w	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f94:	e010      	b.n	8001fb8 <BSP_OSPI_NOR_Write+0x114>
          }
        }
        else
        {
          /* Issue page program command */
          if(MX25LM51245G_PageProgramDTR(&hospi_nor[Instance], (uint8_t*)data_addr, current_addr, current_size) != MX25LM51245G_OK)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	225c      	movs	r2, #92	@ 0x5c
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	4a26      	ldr	r2, [pc, #152]	@ (8002038 <BSP_OSPI_NOR_Write+0x194>)
 8001fa0:	1898      	adds	r0, r3, r2
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	f7ff f9e6 	bl	8001378 <MX25LM51245G_PageProgramDTR>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <BSP_OSPI_NOR_Write+0x114>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001fb2:	f06f 0304 	mvn.w	r3, #4
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
          }
        }

        if (ret == BSP_ERROR_NONE)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d12e      	bne.n	800201c <BSP_OSPI_NOR_Write+0x178>
        {
          /* Configure automatic polling mode to wait for end of program */
          if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	225c      	movs	r2, #92	@ 0x5c
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <BSP_OSPI_NOR_Write+0x194>)
 8001fc8:	1898      	adds	r0, r3, r2
 8001fca:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	7859      	ldrb	r1, [r3, #1]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	@ (800203c <BSP_OSPI_NOR_Write+0x198>)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f7fe ffba 	bl	8000f58 <MX25LM51245G_AutoPollingMemReady>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <BSP_OSPI_NOR_Write+0x14e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001fea:	f06f 0304 	mvn.w	r3, #4
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff0:	e014      	b.n	800201c <BSP_OSPI_NOR_Write+0x178>
          }
          else
          {
            /* Update the address and size variables for next page programming */
            current_addr += current_size;
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
            data_addr += current_size;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	4413      	add	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25LM51245G_PAGE_SIZE;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	429a      	cmp	r2, r3
 800200c:	d203      	bcs.n	8002016 <BSP_OSPI_NOR_Write+0x172>
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	e001      	b.n	800201a <BSP_OSPI_NOR_Write+0x176>
 8002016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800201a:	623b      	str	r3, [r7, #32]
          }
        }
      }
    } while ((current_addr < end_addr) && (ret == BSP_ERROR_NONE));
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d203      	bcs.n	800202c <BSP_OSPI_NOR_Write+0x188>
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	f43f af5f 	beq.w	8001eea <BSP_OSPI_NOR_Write+0x46>
  }

  /* Return BSP status */
  return ret;
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800202e:	4618      	mov	r0, r3
 8002030:	3728      	adds	r7, #40	@ 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	240001b8 	.word	0x240001b8
 800203c:	24000214 	.word	0x24000214

08002040 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002052:	f06f 0301 	mvn.w	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e03d      	b.n	80020d6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800205a:	4a21      	ldr	r2, [pc, #132]	@ (80020e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	789b      	ldrb	r3, [r3, #2]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11b      	bne.n	80020a0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
    {
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	225c      	movs	r2, #92	@ 0x5c
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8002072:	1898      	adds	r0, r3, r2
 8002074:	4a1a      	ldr	r2, [pc, #104]	@ (80020e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	2201      	movs	r2, #1
 8002080:	4619      	mov	r1, r3
 8002082:	f7ff f9ce 	bl	8001422 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800208c:	f06f 0304 	mvn.w	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e020      	b.n	80020d6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2102      	movs	r1, #2
 800209a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800209e:	e01a      	b.n	80020d6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
    }
    else
    {
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	225c      	movs	r2, #92	@ 0x5c
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	4a0e      	ldr	r2, [pc, #56]	@ (80020e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80020aa:	441a      	add	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f7ff fa5c 	bl	8001576 <MX25LM51245G_EnableDTRMemoryMappedMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80020c4:	f06f 0304 	mvn.w	r3, #4
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e004      	b.n	80020d6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2102      	movs	r1, #2
 80020d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	24000214 	.word	0x24000214
 80020e4:	240001b8 	.word	0x240001b8

080020e8 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80020fa:	f06f 0301 	mvn.w	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e01e      	b.n	8002140 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8002102:	4a12      	ldr	r2, [pc, #72]	@ (800214c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
    {
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800210e:	f06f 031a 	mvn.w	r3, #26
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e014      	b.n	8002140 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
    }/* Abort MMP back to indirect mode */
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	225c      	movs	r2, #92	@ 0x5c
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 8002120:	4413      	add	r3, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f001 fe44 	bl	8003db0 <HAL_OSPI_Abort>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800212e:	f06f 0303 	mvn.w	r3, #3
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e004      	b.n	8002140 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
    }
    else /* Update OSPI NOR context if all operations are well done */
    {
      /* Update OSPI context if all operations are well done */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2101      	movs	r1, #1
 800213c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8002140:	68fb      	ldr	r3, [r7, #12]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	24000214 	.word	0x24000214
 8002150:	240001b8 	.word	0x240001b8

08002154 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
 8002160:	4613      	mov	r3, r2
 8002162:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800216e:	f06f 0301 	mvn.w	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e05d      	b.n	8002232 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8002176:	4a31      	ldr	r2, [pc, #196]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d103      	bne.n	800218a <BSP_OSPI_NOR_ConfigFlash+0x36>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8002182:	f06f 0319 	mvn.w	r3, #25
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e053      	b.n	8002232 <BSP_OSPI_NOR_ConfigFlash+0xde>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800218a:	4a2c      	ldr	r2, [pc, #176]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d125      	bne.n	80021e4 <BSP_OSPI_NOR_ConfigFlash+0x90>
      {
      case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800219e:	4a27      	ldr	r2, [pc, #156]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	789b      	ldrb	r3, [r3, #2]
 80021a8:	78ba      	ldrb	r2, [r7, #2]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d02a      	beq.n	8002204 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {
          /* Exit OPI mode */
          ret = OSPI_NOR_ExitOPIMode(Instance);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fc3e 	bl	8002a30 <OSPI_NOR_ExitOPIMode>
 80021b4:	60f8      	str	r0, [r7, #12]

          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d123      	bne.n	8002204 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d120      	bne.n	8002204 <BSP_OSPI_NOR_ConfigFlash+0xb0>
          {

            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80021c2:	4a1e      	ldr	r2, [pc, #120]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	789b      	ldrb	r3, [r3, #2]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <BSP_OSPI_NOR_ConfigFlash+0x86>
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fa9d 	bl	8002710 <OSPI_NOR_EnterDOPIMode>
 80021d6:	60f8      	str	r0, [r7, #12]
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
            }
          }
        }
        break;
 80021d8:	e014      	b.n	8002204 <BSP_OSPI_NOR_ConfigFlash+0xb0>
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb72 	bl	80028c4 <OSPI_NOR_EnterSOPIMode>
 80021e0:	60f8      	str	r0, [r7, #12]
        break;
 80021e2:	e00f      	b.n	8002204 <BSP_OSPI_NOR_ConfigFlash+0xb0>

      case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
      default :
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10e      	bne.n	8002208 <BSP_OSPI_NOR_ConfigFlash+0xb4>
        {
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80021ea:	78bb      	ldrb	r3, [r7, #2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <BSP_OSPI_NOR_ConfigFlash+0xa6>
          {
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fb67 	bl	80028c4 <OSPI_NOR_EnterSOPIMode>
 80021f6:	60f8      	str	r0, [r7, #12]
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
          }
        }
        break;
 80021f8:	e006      	b.n	8002208 <BSP_OSPI_NOR_ConfigFlash+0xb4>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa88 	bl	8002710 <OSPI_NOR_EnterDOPIMode>
 8002200:	60f8      	str	r0, [r7, #12]
        break;
 8002202:	e001      	b.n	8002208 <BSP_OSPI_NOR_ConfigFlash+0xb4>
        break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <BSP_OSPI_NOR_ConfigFlash+0xb6>
        break;
 8002208:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if(ret == BSP_ERROR_NONE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d110      	bne.n	8002232 <BSP_OSPI_NOR_ConfigFlash+0xde>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8002210:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2101      	movs	r1, #1
 8002216:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800221a:	4a08      	ldr	r2, [pc, #32]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	705a      	strb	r2, [r3, #1]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	78ba      	ldrb	r2, [r7, #2]
 8002230:	709a      	strb	r2, [r3, #2]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	24000214 	.word	0x24000214

08002240 <MX_OSPI_ClockConfig>:
  * @param  hospi  OSPI Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_OSPI_ClockConfig(OSPI_HandleTypeDef *hospi)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b0b0      	sub	sp, #192	@ 0xc0
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* OSPI clock configuration */
  /* PLL2_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL2_VCO Output = PLL2_VCO Input * PLL3N = 400 Mhz */
  /* PLLOSPICLK = PLL2_VCO Output/PLL2R = 400/2 = 200 Mhz */
  /* OSPI clock frequency = PLLOSPICLK = 200 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8002248:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8002254:	2320      	movs	r3, #32
 8002256:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8002258:	2305      	movs	r3, #5
 800225a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 800225c:	2350      	movs	r3, #80	@ 0x50
 800225e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8002260:	2305      	movs	r3, #5
 8002262:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fcd3 	bl	8005c28 <HAL_RCCEx_PeriphCLKConfig>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	37c0      	adds	r7, #192	@ 0xc0
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	@ 0x50
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_ENABLE();
 8002294:	4b9f      	ldr	r3, [pc, #636]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002296:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800229a:	4a9e      	ldr	r2, [pc, #632]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80022a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 80022b2:	4b98      	ldr	r3, [pc, #608]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022b6:	4a97      	ldr	r2, [pc, #604]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022bc:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 80022be:	4b95      	ldr	r3, [pc, #596]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022c2:	4a94      	ldr	r2, [pc, #592]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c8:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Enable GPIO clocks */
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 80022ca:	4b92      	ldr	r3, [pc, #584]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d0:	4a90      	ldr	r2, [pc, #576]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022d2:	f043 0320 	orr.w	r3, r3, #32
 80022d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022da:	4b8e      	ldr	r3, [pc, #568]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 80022e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	4a89      	ldr	r2, [pc, #548]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f8:	4b86      	ldr	r3, [pc, #536]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8002306:	4b83      	ldr	r3, [pc, #524]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230c:	4a81      	ldr	r2, [pc, #516]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 800230e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002316:	4b7f      	ldr	r3, [pc, #508]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8002324:	4b7b      	ldr	r3, [pc, #492]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232a:	4a7a      	ldr	r2, [pc, #488]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002334:	4b77      	ldr	r3, [pc, #476]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8002342:	4b74      	ldr	r3, [pc, #464]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002348:	4a72      	ldr	r2, [pc, #456]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8002360:	4b6c      	ldr	r3, [pc, #432]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002366:	4a6b      	ldr	r2, [pc, #428]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002370:	4b68      	ldr	r3, [pc, #416]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 800237e:	4b65      	ldr	r3, [pc, #404]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002384:	4a63      	ldr	r2, [pc, #396]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800238e:	4b61      	ldr	r3, [pc, #388]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	69fb      	ldr	r3, [r7, #28]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 800239c:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 80023ba:	4b56      	ldr	r3, [pc, #344]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	4a54      	ldr	r2, [pc, #336]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ca:	4b52      	ldr	r3, [pc, #328]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 80023d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	4a4d      	ldr	r2, [pc, #308]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	4a45      	ldr	r2, [pc, #276]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002406:	4b43      	ldr	r3, [pc, #268]	@ (8002514 <OSPI_NOR_MspInit+0x288>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CS_PIN;
 8002414:	2340      	movs	r3, #64	@ 0x40
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800241c:	2301      	movs	r3, #1
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8002424:	230a      	movs	r3, #10
 8002426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8002428:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800242c:	4619      	mov	r1, r3
 800242e:	483a      	ldr	r0, [pc, #232]	@ (8002518 <OSPI_NOR_MspInit+0x28c>)
 8002430:	f000 fdbc 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8002434:	2320      	movs	r3, #32
 8002436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 800243c:	230a      	movs	r3, #10
 800243e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8002440:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002444:	4619      	mov	r1, r3
 8002446:	4835      	ldr	r0, [pc, #212]	@ (800251c <OSPI_NOR_MspInit+0x290>)
 8002448:	f000 fdb0 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 800244c:	2304      	movs	r3, #4
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8002454:	2309      	movs	r3, #9
 8002456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8002458:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800245c:	4619      	mov	r1, r3
 800245e:	4830      	ldr	r0, [pc, #192]	@ (8002520 <OSPI_NOR_MspInit+0x294>)
 8002460:	f000 fda4 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8002464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 800246a:	230a      	movs	r3, #10
 800246c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 800246e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002472:	4619      	mov	r1, r3
 8002474:	482b      	ldr	r0, [pc, #172]	@ (8002524 <OSPI_NOR_MspInit+0x298>)
 8002476:	f000 fd99 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 800247a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8002480:	230a      	movs	r3, #10
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8002484:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002488:	4619      	mov	r1, r3
 800248a:	4826      	ldr	r0, [pc, #152]	@ (8002524 <OSPI_NOR_MspInit+0x298>)
 800248c:	f000 fd8e 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8002490:	2304      	movs	r3, #4
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8002494:	2309      	movs	r3, #9
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8002498:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800249c:	4619      	mov	r1, r3
 800249e:	4822      	ldr	r0, [pc, #136]	@ (8002528 <OSPI_NOR_MspInit+0x29c>)
 80024a0:	f000 fd84 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 80024a4:	2340      	movs	r3, #64	@ 0x40
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 80024a8:	2306      	movs	r3, #6
 80024aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 80024ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024b0:	4619      	mov	r1, r3
 80024b2:	481e      	ldr	r0, [pc, #120]	@ (800252c <OSPI_NOR_MspInit+0x2a0>)
 80024b4:	f000 fd7a 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 80024bc:	230a      	movs	r3, #10
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 80024c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4818      	ldr	r0, [pc, #96]	@ (8002528 <OSPI_NOR_MspInit+0x29c>)
 80024c8:	f000 fd70 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 80024cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 80024d2:	230a      	movs	r3, #10
 80024d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 80024d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024da:	4619      	mov	r1, r3
 80024dc:	4812      	ldr	r0, [pc, #72]	@ (8002528 <OSPI_NOR_MspInit+0x29c>)
 80024de:	f000 fd65 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 80024e2:	2308      	movs	r3, #8
 80024e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 80024e6:	2304      	movs	r3, #4
 80024e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 80024ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024ee:	4619      	mov	r1, r3
 80024f0:	480a      	ldr	r0, [pc, #40]	@ (800251c <OSPI_NOR_MspInit+0x290>)
 80024f2:	f000 fd5b 	bl	8002fac <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 80024f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 80024fc:	230a      	movs	r3, #10
 80024fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8002500:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002504:	4619      	mov	r1, r3
 8002506:	4808      	ldr	r0, [pc, #32]	@ (8002528 <OSPI_NOR_MspInit+0x29c>)
 8002508:	f000 fd50 	bl	8002fac <HAL_GPIO_Init>
}
 800250c:	bf00      	nop
 800250e:	3750      	adds	r7, #80	@ 0x50
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58024400 	.word	0x58024400
 8002518:	58021800 	.word	0x58021800
 800251c:	58020800 	.word	0x58020800
 8002520:	58020400 	.word	0x58020400
 8002524:	58021400 	.word	0x58021400
 8002528:	58021000 	.word	0x58021000
 800252c:	58020000 	.word	0x58020000

08002530 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8002538:	2104      	movs	r1, #4
 800253a:	4823      	ldr	r0, [pc, #140]	@ (80025c8 <OSPI_NOR_MspDeInit+0x98>)
 800253c:	f000 fede 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8002540:	2120      	movs	r1, #32
 8002542:	4822      	ldr	r0, [pc, #136]	@ (80025cc <OSPI_NOR_MspDeInit+0x9c>)
 8002544:	f000 feda 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8002548:	2140      	movs	r1, #64	@ 0x40
 800254a:	4821      	ldr	r0, [pc, #132]	@ (80025d0 <OSPI_NOR_MspDeInit+0xa0>)
 800254c:	f000 fed6 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8002550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002554:	481f      	ldr	r0, [pc, #124]	@ (80025d4 <OSPI_NOR_MspDeInit+0xa4>)
 8002556:	f000 fed1 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 800255a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800255e:	481d      	ldr	r0, [pc, #116]	@ (80025d4 <OSPI_NOR_MspDeInit+0xa4>)
 8002560:	f000 fecc 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8002564:	2104      	movs	r1, #4
 8002566:	481c      	ldr	r0, [pc, #112]	@ (80025d8 <OSPI_NOR_MspDeInit+0xa8>)
 8002568:	f000 fec8 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 800256c:	2140      	movs	r1, #64	@ 0x40
 800256e:	481b      	ldr	r0, [pc, #108]	@ (80025dc <OSPI_NOR_MspDeInit+0xac>)
 8002570:	f000 fec4 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	4818      	ldr	r0, [pc, #96]	@ (80025d8 <OSPI_NOR_MspDeInit+0xa8>)
 8002578:	f000 fec0 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 800257c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002580:	4815      	ldr	r0, [pc, #84]	@ (80025d8 <OSPI_NOR_MspDeInit+0xa8>)
 8002582:	f000 febb 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8002586:	2108      	movs	r1, #8
 8002588:	4810      	ldr	r0, [pc, #64]	@ (80025cc <OSPI_NOR_MspDeInit+0x9c>)
 800258a:	f000 feb7 	bl	80032fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 800258e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002592:	4811      	ldr	r0, [pc, #68]	@ (80025d8 <OSPI_NOR_MspDeInit+0xa8>)
 8002594:	f000 feb2 	bl	80032fc <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <OSPI_NOR_MspDeInit+0xb0>)
 800259a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259c:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <OSPI_NOR_MspDeInit+0xb0>)
 800259e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <OSPI_NOR_MspDeInit+0xb0>)
 80025a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <OSPI_NOR_MspDeInit+0xb0>)
 80025aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025ae:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_DISABLE();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <OSPI_NOR_MspDeInit+0xb0>)
 80025b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <OSPI_NOR_MspDeInit+0xb0>)
 80025b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	58020400 	.word	0x58020400
 80025cc:	58020800 	.word	0x58020800
 80025d0:	58021800 	.word	0x58021800
 80025d4:	58021400 	.word	0x58021400
 80025d8:	58021000 	.word	0x58021000
 80025dc:	58020000 	.word	0x58020000
 80025e0:	58024400 	.word	0x58024400

080025e4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025f6:	f06f 0301 	mvn.w	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e07f      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	225c      	movs	r2, #92	@ 0x5c
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	4a40      	ldr	r2, [pc, #256]	@ (8002708 <OSPI_NOR_ResetMemory+0x124>)
 8002608:	4413      	add	r3, r2
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fa1a 	bl	8001a48 <MX25LM51245G_ResetEnable>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <OSPI_NOR_ResetMemory+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800261a:	f06f 0304 	mvn.w	r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e06d      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	225c      	movs	r2, #92	@ 0x5c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a37      	ldr	r2, [pc, #220]	@ (8002708 <OSPI_NOR_ResetMemory+0x124>)
 800262c:	4413      	add	r3, r2
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fa60 	bl	8001af8 <MX25LM51245G_ResetMemory>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <OSPI_NOR_ResetMemory+0x62>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800263e:	f06f 0304 	mvn.w	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e05b      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	225c      	movs	r2, #92	@ 0x5c
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	4a2e      	ldr	r2, [pc, #184]	@ (8002708 <OSPI_NOR_ResetMemory+0x124>)
 8002650:	4413      	add	r3, r2
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f9f6 	bl	8001a48 <MX25LM51245G_ResetEnable>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <OSPI_NOR_ResetMemory+0x86>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002662:	f06f 0304 	mvn.w	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e049      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	225c      	movs	r2, #92	@ 0x5c
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a25      	ldr	r2, [pc, #148]	@ (8002708 <OSPI_NOR_ResetMemory+0x124>)
 8002674:	4413      	add	r3, r2
 8002676:	2200      	movs	r2, #0
 8002678:	2101      	movs	r1, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fa3c 	bl	8001af8 <MX25LM51245G_ResetMemory>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <OSPI_NOR_ResetMemory+0xaa>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002686:	f06f 0304 	mvn.w	r3, #4
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e037      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	225c      	movs	r2, #92	@ 0x5c
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <OSPI_NOR_ResetMemory+0x124>)
 8002698:	4413      	add	r3, r2
 800269a:	2201      	movs	r2, #1
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f9d2 	bl	8001a48 <MX25LM51245G_ResetEnable>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <OSPI_NOR_ResetMemory+0xce>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80026aa:	f06f 0304 	mvn.w	r3, #4
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e025      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	225c      	movs	r2, #92	@ 0x5c
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <OSPI_NOR_ResetMemory+0x124>)
 80026bc:	4413      	add	r3, r2
 80026be:	2201      	movs	r2, #1
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fa18 	bl	8001af8 <MX25LM51245G_ResetMemory>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <OSPI_NOR_ResetMemory+0xf2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80026ce:	f06f 0304 	mvn.w	r3, #4
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e013      	b.n	80026fe <OSPI_NOR_ResetMemory+0x11a>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80026d6:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <OSPI_NOR_ResetMemory+0x128>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2101      	movs	r1, #1
 80026dc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <OSPI_NOR_ResetMemory+0x128>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <OSPI_NOR_ResetMemory+0x128>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80026f8:	2064      	movs	r0, #100	@ 0x64
 80026fa:	f000 fad7 	bl	8002cac <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	240001b8 	.word	0x240001b8
 800270c:	24000214 	.word	0x24000214

08002710 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <OSPI_NOR_EnterDOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002722:	f06f 0301 	mvn.w	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e0c3      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	225c      	movs	r2, #92	@ 0x5c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	4a62      	ldr	r2, [pc, #392]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8002734:	1898      	adds	r0, r3, r2
 8002736:	4a62      	ldr	r2, [pc, #392]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	7859      	ldrb	r1, [r3, #1]
 8002740:	4a5f      	ldr	r2, [pc, #380]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	789b      	ldrb	r3, [r3, #2]
 800274a:	461a      	mov	r2, r3
 800274c:	f7fe ff82 	bl	8001654 <MX25LM51245G_WriteEnable>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <OSPI_NOR_EnterDOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002756:	f06f 0304 	mvn.w	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e0a9      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	225c      	movs	r2, #92	@ 0x5c
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	4a55      	ldr	r2, [pc, #340]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8002768:	1898      	adds	r0, r3, r2
 800276a:	4a55      	ldr	r2, [pc, #340]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	7859      	ldrb	r1, [r3, #1]
 8002774:	4a52      	ldr	r2, [pc, #328]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	789a      	ldrb	r2, [r3, #2]
 800277e:	2303      	movs	r3, #3
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002786:	f7ff f830 	bl	80017ea <MX25LM51245G_WriteCfg2Register>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <OSPI_NOR_EnterDOPIMode+0x88>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002790:	f06f 0304 	mvn.w	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e08c      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	225c      	movs	r2, #92	@ 0x5c
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	4a46      	ldr	r2, [pc, #280]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80027a2:	1898      	adds	r0, r3, r2
 80027a4:	4a46      	ldr	r2, [pc, #280]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	7859      	ldrb	r1, [r3, #1]
 80027ae:	4a44      	ldr	r2, [pc, #272]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7fe ff4b 	bl	8001654 <MX25LM51245G_WriteEnable>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <OSPI_NOR_EnterDOPIMode+0xbc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80027c4:	f06f 0304 	mvn.w	r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e072      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	225c      	movs	r2, #92	@ 0x5c
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	4a39      	ldr	r2, [pc, #228]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80027d6:	1898      	adds	r0, r3, r2
 80027d8:	4a39      	ldr	r2, [pc, #228]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	7859      	ldrb	r1, [r3, #1]
 80027e2:	4a37      	ldr	r2, [pc, #220]	@ (80028c0 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	789a      	ldrb	r2, [r3, #2]
 80027ec:	2302      	movs	r3, #2
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	f7fe fffa 	bl	80017ea <MX25LM51245G_WriteCfg2Register>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <OSPI_NOR_EnterDOPIMode+0xf4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80027fc:	f06f 0304 	mvn.w	r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e056      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8002804:	2028      	movs	r0, #40	@ 0x28
 8002806:	f000 fa51 	bl	8002cac <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800280a:	4a2c      	ldr	r2, [pc, #176]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	215c      	movs	r1, #92	@ 0x5c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	330c      	adds	r3, #12
 8002818:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800281c:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800281e:	4a27      	ldr	r2, [pc, #156]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	215c      	movs	r1, #92	@ 0x5c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	332c      	adds	r3, #44	@ 0x2c
 800282c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	225c      	movs	r2, #92	@ 0x5c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a20      	ldr	r2, [pc, #128]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800283c:	4413      	add	r3, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f000 feba 	bl	80035b8 <HAL_OSPI_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <OSPI_NOR_EnterDOPIMode+0x142>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800284a:	f06f 0303 	mvn.w	r3, #3
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e02f      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	225c      	movs	r2, #92	@ 0x5c
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800285c:	4413      	add	r3, r2
 800285e:	2201      	movs	r2, #1
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb78 	bl	8000f58 <MX25LM51245G_AutoPollingMemReady>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <OSPI_NOR_EnterDOPIMode+0x166>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800286e:	f06f 0304 	mvn.w	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e01d      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	225c      	movs	r2, #92	@ 0x5c
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a0f      	ldr	r2, [pc, #60]	@ (80028bc <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8002880:	1898      	adds	r0, r3, r2
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2300      	movs	r3, #0
 800288a:	2201      	movs	r2, #1
 800288c:	2101      	movs	r1, #1
 800288e:	f7ff f841 	bl	8001914 <MX25LM51245G_ReadCfg2Register>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <OSPI_NOR_EnterDOPIMode+0x190>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002898:	f06f 0304 	mvn.w	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	e008      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 80028a0:	7a3b      	ldrb	r3, [r7, #8]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <OSPI_NOR_EnterDOPIMode+0x19e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80028a6:	f06f 0304 	mvn.w	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e001      	b.n	80028b2 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	240001b8 	.word	0x240001b8
 80028c0:	24000214 	.word	0x24000214

080028c4 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <OSPI_NOR_EnterSOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028d6:	f06f 0301 	mvn.w	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e09f      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	225c      	movs	r2, #92	@ 0x5c
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	4a50      	ldr	r2, [pc, #320]	@ (8002a28 <OSPI_NOR_EnterSOPIMode+0x164>)
 80028e8:	1898      	adds	r0, r3, r2
 80028ea:	4a50      	ldr	r2, [pc, #320]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	7859      	ldrb	r1, [r3, #1]
 80028f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	789b      	ldrb	r3, [r3, #2]
 80028fe:	461a      	mov	r2, r3
 8002900:	f7fe fea8 	bl	8001654 <MX25LM51245G_WriteEnable>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <OSPI_NOR_EnterSOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800290a:	f06f 0304 	mvn.w	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e085      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	225c      	movs	r2, #92	@ 0x5c
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	4a43      	ldr	r2, [pc, #268]	@ (8002a28 <OSPI_NOR_EnterSOPIMode+0x164>)
 800291c:	1898      	adds	r0, r3, r2
 800291e:	4a43      	ldr	r2, [pc, #268]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	7859      	ldrb	r1, [r3, #1]
 8002928:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	789a      	ldrb	r2, [r3, #2]
 8002932:	2303      	movs	r3, #3
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800293a:	f7fe ff56 	bl	80017ea <MX25LM51245G_WriteCfg2Register>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <OSPI_NOR_EnterSOPIMode+0x88>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002944:	f06f 0304 	mvn.w	r3, #4
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e068      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	225c      	movs	r2, #92	@ 0x5c
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	4a34      	ldr	r2, [pc, #208]	@ (8002a28 <OSPI_NOR_EnterSOPIMode+0x164>)
 8002956:	1898      	adds	r0, r3, r2
 8002958:	4a34      	ldr	r2, [pc, #208]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	7859      	ldrb	r1, [r3, #1]
 8002962:	4a32      	ldr	r2, [pc, #200]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	789b      	ldrb	r3, [r3, #2]
 800296c:	461a      	mov	r2, r3
 800296e:	f7fe fe71 	bl	8001654 <MX25LM51245G_WriteEnable>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <OSPI_NOR_EnterSOPIMode+0xbc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002978:	f06f 0304 	mvn.w	r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e04e      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	225c      	movs	r2, #92	@ 0x5c
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4a27      	ldr	r2, [pc, #156]	@ (8002a28 <OSPI_NOR_EnterSOPIMode+0x164>)
 800298a:	1898      	adds	r0, r3, r2
 800298c:	4a27      	ldr	r2, [pc, #156]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	7859      	ldrb	r1, [r3, #1]
 8002996:	4a25      	ldr	r2, [pc, #148]	@ (8002a2c <OSPI_NOR_EnterSOPIMode+0x168>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	789a      	ldrb	r2, [r3, #2]
 80029a0:	2301      	movs	r3, #1
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	f7fe ff20 	bl	80017ea <MX25LM51245G_WriteCfg2Register>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <OSPI_NOR_EnterSOPIMode+0xf4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80029b0:	f06f 0304 	mvn.w	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e032      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80029b8:	2028      	movs	r0, #40	@ 0x28
 80029ba:	f000 f977 	bl	8002cac <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	225c      	movs	r2, #92	@ 0x5c
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	4a18      	ldr	r2, [pc, #96]	@ (8002a28 <OSPI_NOR_EnterSOPIMode+0x164>)
 80029c8:	4413      	add	r3, r2
 80029ca:	2200      	movs	r2, #0
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fac2 	bl	8000f58 <MX25LM51245G_AutoPollingMemReady>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <OSPI_NOR_EnterSOPIMode+0x11e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80029da:	f06f 0304 	mvn.w	r3, #4
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e01d      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	225c      	movs	r2, #92	@ 0x5c
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <OSPI_NOR_EnterSOPIMode+0x164>)
 80029ec:	1898      	adds	r0, r3, r2
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	2200      	movs	r2, #0
 80029f8:	2101      	movs	r1, #1
 80029fa:	f7fe ff8b 	bl	8001914 <MX25LM51245G_ReadCfg2Register>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <OSPI_NOR_EnterSOPIMode+0x148>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a04:	f06f 0304 	mvn.w	r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e008      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8002a0c:	7a3b      	ldrb	r3, [r7, #8]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d003      	beq.n	8002a1a <OSPI_NOR_EnterSOPIMode+0x156>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a12:	f06f 0304 	mvn.w	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e001      	b.n	8002a1e <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	240001b8 	.word	0x240001b8
 8002a2c:	24000214 	.word	0x24000214

08002a30 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a42:	f06f 0301 	mvn.w	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e094      	b.n	8002b74 <OSPI_NOR_ExitOPIMode+0x144>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	225c      	movs	r2, #92	@ 0x5c
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	4a4b      	ldr	r2, [pc, #300]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002a54:	1898      	adds	r0, r3, r2
 8002a56:	4a4b      	ldr	r2, [pc, #300]	@ (8002b84 <OSPI_NOR_ExitOPIMode+0x154>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	7859      	ldrb	r1, [r3, #1]
 8002a60:	4a48      	ldr	r2, [pc, #288]	@ (8002b84 <OSPI_NOR_ExitOPIMode+0x154>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	789b      	ldrb	r3, [r3, #2]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7fe fdf2 	bl	8001654 <MX25LM51245G_WriteEnable>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <OSPI_NOR_ExitOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a76:	f06f 0304 	mvn.w	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e07a      	b.n	8002b74 <OSPI_NOR_ExitOPIMode+0x144>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	225c      	movs	r2, #92	@ 0x5c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002a90:	1898      	adds	r0, r3, r2
 8002a92:	4a3c      	ldr	r2, [pc, #240]	@ (8002b84 <OSPI_NOR_ExitOPIMode+0x154>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	7859      	ldrb	r1, [r3, #1]
 8002a9c:	4a39      	ldr	r2, [pc, #228]	@ (8002b84 <OSPI_NOR_ExitOPIMode+0x154>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	789a      	ldrb	r2, [r3, #2]
 8002aa6:	7a3b      	ldrb	r3, [r7, #8]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f7fe fe9d 	bl	80017ea <MX25LM51245G_WriteCfg2Register>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <OSPI_NOR_ExitOPIMode+0x8e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ab6:	f06f 0304 	mvn.w	r3, #4
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e05a      	b.n	8002b74 <OSPI_NOR_ExitOPIMode+0x144>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8002abe:	2028      	movs	r0, #40	@ 0x28
 8002ac0:	f000 f8f4 	bl	8002cac <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8002b84 <OSPI_NOR_ExitOPIMode+0x154>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	789b      	ldrb	r3, [r3, #2]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d120      	bne.n	8002b14 <OSPI_NOR_ExitOPIMode+0xe4>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	215c      	movs	r1, #92	@ 0x5c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	330c      	adds	r3, #12
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002ae4:	4a26      	ldr	r2, [pc, #152]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	215c      	movs	r1, #92	@ 0x5c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	332c      	adds	r3, #44	@ 0x2c
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	225c      	movs	r2, #92	@ 0x5c
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	4a20      	ldr	r2, [pc, #128]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002b00:	4413      	add	r3, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd58 	bl	80035b8 <HAL_OSPI_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <OSPI_NOR_ExitOPIMode+0xe4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8002b0e:	f06f 0303 	mvn.w	r3, #3
 8002b12:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	225c      	movs	r2, #92	@ 0x5c
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002b1e:	4413      	add	r3, r2
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fa17 	bl	8000f58 <MX25LM51245G_AutoPollingMemReady>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <OSPI_NOR_ExitOPIMode+0x108>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b30:	f06f 0304 	mvn.w	r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e01d      	b.n	8002b74 <OSPI_NOR_ExitOPIMode+0x144>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	225c      	movs	r2, #92	@ 0x5c
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <OSPI_NOR_ExitOPIMode+0x150>)
 8002b42:	1898      	adds	r0, r3, r2
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f7fe fee0 	bl	8001914 <MX25LM51245G_ReadCfg2Register>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <OSPI_NOR_ExitOPIMode+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b5a:	f06f 0304 	mvn.w	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e008      	b.n	8002b74 <OSPI_NOR_ExitOPIMode+0x144>
      }
      else if (reg[0] != 0)
 8002b62:	7a3b      	ldrb	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <OSPI_NOR_ExitOPIMode+0x140>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b68:	f06f 0304 	mvn.w	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e001      	b.n	8002b74 <OSPI_NOR_ExitOPIMode+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	240001b8 	.word	0x240001b8
 8002b84:	24000214 	.word	0x24000214

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8e:	2003      	movs	r0, #3
 8002b90:	f000 f962 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b94:	f002 fece 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_Init+0x68>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	4913      	ldr	r1, [pc, #76]	@ (8002bf4 <HAL_Init+0x6c>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <HAL_Init+0x68>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <HAL_Init+0x6c>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf8 <HAL_Init+0x70>)
 8002bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002bfc <HAL_Init+0x74>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bd2:	200f      	movs	r0, #15
 8002bd4:	f000 f814 	bl	8002c00 <HAL_InitTick>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e002      	b.n	8002be8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002be2:	f7fd fe6d 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	080072a0 	.word	0x080072a0
 8002bf8:	24000068 	.word	0x24000068
 8002bfc:	24000064 	.word	0x24000064

08002c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_InitTick+0x60>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e021      	b.n	8002c58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c14:	4b13      	ldr	r3, [pc, #76]	@ (8002c64 <HAL_InitTick+0x64>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_InitTick+0x60>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f939 	bl	8002ea2 <HAL_SYSTICK_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00e      	b.n	8002c58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d80a      	bhi.n	8002c56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c40:	2200      	movs	r2, #0
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f000 f911 	bl	8002e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c4c:	4a06      	ldr	r2, [pc, #24]	@ (8002c68 <HAL_InitTick+0x68>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	24000070 	.word	0x24000070
 8002c64:	24000064 	.word	0x24000064
 8002c68:	2400006c 	.word	0x2400006c

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_IncTick+0x20>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_IncTick+0x24>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <HAL_IncTick+0x24>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	24000070 	.word	0x24000070
 8002c90:	2400021c 	.word	0x2400021c

08002c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return uwTick;
 8002c98:	4b03      	ldr	r3, [pc, #12]	@ (8002ca8 <HAL_GetTick+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2400021c 	.word	0x2400021c

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff ffee 	bl	8002c94 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d005      	beq.n	8002cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_Delay+0x44>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cd2:	bf00      	nop
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f7      	bhi.n	8002cd4 <HAL_Delay+0x28>
  {
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	24000070 	.word	0x24000070

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <__NVIC_SetPriorityGrouping+0x40>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	@ (8002d34 <__NVIC_SetPriorityGrouping+0x40>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00
 8002d38:	05fa0000 	.word	0x05fa0000

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	db0a      	blt.n	8002d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	490c      	ldr	r1, [pc, #48]	@ (8002da4 <__NVIC_SetPriority+0x4c>)
 8002d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d80:	e00a      	b.n	8002d98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4908      	ldr	r1, [pc, #32]	@ (8002da8 <__NVIC_SetPriority+0x50>)
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	761a      	strb	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f1c3 0307 	rsb	r3, r3, #7
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	bf28      	it	cs
 8002dca:	2304      	movcs	r3, #4
 8002dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d902      	bls.n	8002ddc <NVIC_EncodePriority+0x30>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3b03      	subs	r3, #3
 8002dda:	e000      	b.n	8002dde <NVIC_EncodePriority+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	401a      	ands	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	4313      	orrs	r3, r2
         );
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	@ 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e24:	d301      	bcc.n	8002e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <SysTick_Config+0x40>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e32:	210f      	movs	r1, #15
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f7ff ff8e 	bl	8002d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <SysTick_Config+0x40>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e42:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <SysTick_Config+0x40>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000e010 	.word	0xe000e010

08002e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff47 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7c:	f7ff ff5e 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7ff ff90 	bl	8002dac <NVIC_EncodePriority>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff5f 	bl	8002d58 <__NVIC_SetPriority>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffb2 	bl	8002e14 <SysTick_Config>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002ec0:	f3bf 8f5f 	dmb	sy
}
 8002ec4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ec6:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <HAL_MPU_Disable+0x28>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	4a06      	ldr	r2, [pc, #24]	@ (8002ee4 <HAL_MPU_Disable+0x28>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_MPU_Disable+0x2c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	e000ed90 	.word	0xe000ed90

08002eec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f24 <HAL_MPU_Enable+0x38>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <HAL_MPU_Enable+0x3c>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_MPU_Enable+0x3c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f0a:	f3bf 8f4f 	dsb	sy
}
 8002f0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f10:	f3bf 8f6f 	isb	sy
}
 8002f14:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed90 	.word	0xe000ed90
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	785a      	ldrb	r2, [r3, #1]
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	4a19      	ldr	r2, [pc, #100]	@ (8002fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <HAL_MPU_ConfigRegion+0x7c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7b1b      	ldrb	r3, [r3, #12]
 8002f54:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7adb      	ldrb	r3, [r3, #11]
 8002f5a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7a9b      	ldrb	r3, [r3, #10]
 8002f62:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7b5b      	ldrb	r3, [r3, #13]
 8002f6a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7b9b      	ldrb	r3, [r3, #14]
 8002f72:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7bdb      	ldrb	r3, [r3, #15]
 8002f7a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7a5b      	ldrb	r3, [r3, #9]
 8002f82:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a1b      	ldrb	r3, [r3, #8]
 8002f8a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f8c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	7812      	ldrb	r2, [r2, #0]
 8002f92:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f96:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f98:	6113      	str	r3, [r2, #16]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000ed90 	.word	0xe000ed90

08002fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fba:	4b86      	ldr	r3, [pc, #536]	@ (80031d4 <HAL_GPIO_Init+0x228>)
 8002fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fbe:	e18c      	b.n	80032da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 817e 	beq.w	80032d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d005      	beq.n	8002ff0 <HAL_GPIO_Init+0x44>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d130      	bne.n	8003052 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003026:	2201      	movs	r2, #1
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 0201 	and.w	r2, r3, #1
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b03      	cmp	r3, #3
 800305c:	d017      	beq.n	800308e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d123      	bne.n	80030e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	08da      	lsrs	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3208      	adds	r2, #8
 80030a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0203 	and.w	r2, r3, #3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80d8 	beq.w	80032d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003124:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <HAL_GPIO_Init+0x22c>)
 8003126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800312a:	4a2b      	ldr	r2, [pc, #172]	@ (80031d8 <HAL_GPIO_Init+0x22c>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003134:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <HAL_GPIO_Init+0x22c>)
 8003136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003142:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_GPIO_Init+0x230>)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1d      	ldr	r2, [pc, #116]	@ (80031e0 <HAL_GPIO_Init+0x234>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_GPIO_Init+0x258>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_GPIO_Init+0x238>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <HAL_GPIO_Init+0x222>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <HAL_GPIO_Init+0x23c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d025      	beq.n	80031ca <HAL_GPIO_Init+0x21e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_GPIO_Init+0x240>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <HAL_GPIO_Init+0x21a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_GPIO_Init+0x244>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <HAL_GPIO_Init+0x216>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_GPIO_Init+0x248>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0x212>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a17      	ldr	r2, [pc, #92]	@ (80031f8 <HAL_GPIO_Init+0x24c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_GPIO_Init+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a16      	ldr	r2, [pc, #88]	@ (80031fc <HAL_GPIO_Init+0x250>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <HAL_GPIO_Init+0x20a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <HAL_GPIO_Init+0x254>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_GPIO_Init+0x206>
 80031ae:	2309      	movs	r3, #9
 80031b0:	e029      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031b2:	230a      	movs	r3, #10
 80031b4:	e027      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e025      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031ba:	2306      	movs	r3, #6
 80031bc:	e023      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031be:	2305      	movs	r3, #5
 80031c0:	e021      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031c2:	2304      	movs	r3, #4
 80031c4:	e01f      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031c6:	2303      	movs	r3, #3
 80031c8:	e01d      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e01b      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e019      	b.n	8003206 <HAL_GPIO_Init+0x25a>
 80031d2:	bf00      	nop
 80031d4:	58000080 	.word	0x58000080
 80031d8:	58024400 	.word	0x58024400
 80031dc:	58000400 	.word	0x58000400
 80031e0:	58020000 	.word	0x58020000
 80031e4:	58020400 	.word	0x58020400
 80031e8:	58020800 	.word	0x58020800
 80031ec:	58020c00 	.word	0x58020c00
 80031f0:	58021000 	.word	0x58021000
 80031f4:	58021400 	.word	0x58021400
 80031f8:	58021800 	.word	0x58021800
 80031fc:	58021c00 	.word	0x58021c00
 8003200:	58022400 	.word	0x58022400
 8003204:	2300      	movs	r3, #0
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	f002 0203 	and.w	r2, r2, #3
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	4093      	lsls	r3, r2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003216:	4938      	ldr	r1, [pc, #224]	@ (80032f8 <HAL_GPIO_Init+0x34c>)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800324a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f ae6b 	bne.w	8002fc0 <HAL_GPIO_Init+0x14>
  }
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	3724      	adds	r7, #36	@ 0x24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	58000400 	.word	0x58000400

080032fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800330a:	4b72      	ldr	r3, [pc, #456]	@ (80034d4 <HAL_GPIO_DeInit+0x1d8>)
 800330c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800330e:	e0d3      	b.n	80034b8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003310:	2201      	movs	r2, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80c6 	beq.w	80034b2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003326:	4a6c      	ldr	r2, [pc, #432]	@ (80034d8 <HAL_GPIO_DeInit+0x1dc>)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	3302      	adds	r3, #2
 800332e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003332:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	220f      	movs	r2, #15
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a64      	ldr	r2, [pc, #400]	@ (80034dc <HAL_GPIO_DeInit+0x1e0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d031      	beq.n	80033b4 <HAL_GPIO_DeInit+0xb8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a63      	ldr	r2, [pc, #396]	@ (80034e0 <HAL_GPIO_DeInit+0x1e4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d02b      	beq.n	80033b0 <HAL_GPIO_DeInit+0xb4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a62      	ldr	r2, [pc, #392]	@ (80034e4 <HAL_GPIO_DeInit+0x1e8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d025      	beq.n	80033ac <HAL_GPIO_DeInit+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a61      	ldr	r2, [pc, #388]	@ (80034e8 <HAL_GPIO_DeInit+0x1ec>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01f      	beq.n	80033a8 <HAL_GPIO_DeInit+0xac>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a60      	ldr	r2, [pc, #384]	@ (80034ec <HAL_GPIO_DeInit+0x1f0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d019      	beq.n	80033a4 <HAL_GPIO_DeInit+0xa8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a5f      	ldr	r2, [pc, #380]	@ (80034f0 <HAL_GPIO_DeInit+0x1f4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_GPIO_DeInit+0xa4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <HAL_GPIO_DeInit+0x1f8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00d      	beq.n	800339c <HAL_GPIO_DeInit+0xa0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a5d      	ldr	r2, [pc, #372]	@ (80034f8 <HAL_GPIO_DeInit+0x1fc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <HAL_GPIO_DeInit+0x9c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a5c      	ldr	r2, [pc, #368]	@ (80034fc <HAL_GPIO_DeInit+0x200>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_GPIO_DeInit+0x98>
 8003390:	2309      	movs	r3, #9
 8003392:	e010      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 8003394:	230a      	movs	r3, #10
 8003396:	e00e      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 8003398:	2307      	movs	r3, #7
 800339a:	e00c      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 800339c:	2306      	movs	r3, #6
 800339e:	e00a      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 80033a0:	2305      	movs	r3, #5
 80033a2:	e008      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 80033a4:	2304      	movs	r3, #4
 80033a6:	e006      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 80033a8:	2303      	movs	r3, #3
 80033aa:	e004      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e002      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_GPIO_DeInit+0xba>
 80033b4:	2300      	movs	r3, #0
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	f002 0203 	and.w	r2, r2, #3
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	4093      	lsls	r3, r2
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d136      	bne.n	8003434 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	401a      	ands	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033f0:	4013      	ands	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003402:	4013      	ands	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003416:	4a30      	ldr	r2, [pc, #192]	@ (80034d8 <HAL_GPIO_DeInit+0x1dc>)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	43da      	mvns	r2, r3
 8003426:	482c      	ldr	r0, [pc, #176]	@ (80034d8 <HAL_GPIO_DeInit+0x1dc>)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	400a      	ands	r2, r1
 800342e:	3302      	adds	r3, #2
 8003430:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2103      	movs	r1, #3
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	08d2      	lsrs	r2, r2, #3
 8003468:	4019      	ands	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2103      	movs	r1, #3
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	2101      	movs	r1, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2103      	movs	r1, #3
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f af25 	bne.w	8003310 <HAL_GPIO_DeInit+0x14>
  }
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	58000080 	.word	0x58000080
 80034d8:	58000400 	.word	0x58000400
 80034dc:	58020000 	.word	0x58020000
 80034e0:	58020400 	.word	0x58020400
 80034e4:	58020800 	.word	0x58020800
 80034e8:	58020c00 	.word	0x58020c00
 80034ec:	58021000 	.word	0x58021000
 80034f0:	58021400 	.word	0x58021400
 80034f4:	58021800 	.word	0x58021800
 80034f8:	58021c00 	.word	0x58021c00
 80034fc:	58022400 	.word	0x58022400

08003500 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8003508:	f7ff fbc4 	bl	8002c94 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e04a      	b.n	80035ae <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d008      	beq.n	8003536 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e03b      	b.n	80035ae <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003544:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003556:	e016      	b.n	8003586 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003558:	f7ff fb9c 	bl	8002c94 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b05      	cmp	r3, #5
 8003564:	d90f      	bls.n	8003586 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800356a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e013      	b.n	80035ae <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e1      	bne.n	8003558 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	221f      	movs	r2, #31
 800359a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff fb66 	bl	8002c94 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e0a5      	b.n	8003722 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 809e 	bne.w	8003722 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd f984 	bl	80008f4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80035ec:	f241 3188 	movw	r1, #5000	@ 0x1388
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fc52 	bl	8003e9a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b4b      	ldr	r3, [pc, #300]	@ (800372c <HAL_OSPI_Init+0x174>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68d1      	ldr	r1, [r2, #12]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6912      	ldr	r2, [r2, #16]
 8003608:	3a01      	subs	r2, #1
 800360a:	0412      	lsls	r2, r2, #16
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6952      	ldr	r2, [r2, #20]
 8003612:	3a01      	subs	r2, #1
 8003614:	0212      	lsls	r2, r2, #8
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	69d2      	ldr	r2, [r2, #28]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800365c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	3b01      	subs	r3, #1
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2200      	movs	r2, #0
 8003682:	2120      	movs	r1, #32
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f001 f8ff 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d146      	bne.n	8003722 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80036ca:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d107      	bne.n	800370a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0202 	orr.w	r2, r2, #2
 8003708:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003712:	d103      	bne.n	800371c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	651a      	str	r2, [r3, #80]	@ 0x50
 800371a:	e002      	b.n	8003722 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	f8e0f8f4 	.word	0xf8e0f8f4

08003730 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e015      	b.n	8003774 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0202 	bic.w	r2, r2, #2
 8003766:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd fa77 	bl	8000c5c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08a      	sub	sp, #40	@ 0x28
 8003782:	af02      	add	r7, sp, #8
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800378a:	f7ff fa83 	bl	8002c94 <HAL_GetTick>
 800378e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d104      	bne.n	80037ac <HAL_OSPI_Command+0x2e>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037aa:	d115      	bne.n	80037d8 <HAL_OSPI_Command+0x5a>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b14      	cmp	r3, #20
 80037b0:	d107      	bne.n	80037c2 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d00e      	beq.n	80037d8 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d00a      	beq.n	80037d8 <HAL_OSPI_Command+0x5a>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b24      	cmp	r3, #36	@ 0x24
 80037c6:	d15b      	bne.n	8003880 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d003      	beq.n	80037d8 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d153      	bne.n	8003880 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2200      	movs	r2, #0
 80037e0:	2120      	movs	r1, #32
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f001 f850 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d14c      	bne.n	800388c <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 f87c 	bl	80048f8 <OSPI_ConfigCmd>
 8003800:	4603      	mov	r3, r0
 8003802:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d140      	bne.n	800388c <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2201      	movs	r2, #1
 800381a:	2102      	movs	r1, #2
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f001 f833 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800382e:	e02d      	b.n	800388c <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2204      	movs	r2, #4
 800383c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800383e:	e025      	b.n	800388c <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10b      	bne.n	8003860 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384c:	2b24      	cmp	r3, #36	@ 0x24
 800384e:	d103      	bne.n	8003858 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2204      	movs	r2, #4
 8003854:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8003856:	e019      	b.n	800388c <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2214      	movs	r2, #20
 800385c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800385e:	e015      	b.n	800388c <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d111      	bne.n	800388c <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	2b14      	cmp	r3, #20
 800386e:	d103      	bne.n	8003878 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2204      	movs	r2, #4
 8003874:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8003876:	e009      	b.n	800388c <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800387e:	e005      	b.n	800388c <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2210      	movs	r2, #16
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
 800388a:	e000      	b.n	800388e <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800388c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800388e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff f9f6 	bl	8002c94 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ae:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d002      	beq.n	80038bc <HAL_OSPI_HyperbusCfg+0x24>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d122      	bne.n	8003902 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2120      	movs	r1, #32
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 ffde 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80038d0:	7ffb      	ldrb	r3, [r7, #31]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11a      	bne.n	800390c <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	041a      	lsls	r2, r3, #16
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	ea42 0103 	orr.w	r1, r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2202      	movs	r2, #2
 80038fe:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8003900:	e004      	b.n	800390c <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2210      	movs	r2, #16
 800390a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 800390c:	7ffb      	ldrb	r3, [r7, #31]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b088      	sub	sp, #32
 800391a:	af02      	add	r7, sp, #8
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003922:	f7ff f9b7 	bl	8002c94 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE(cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA(cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392c:	2b02      	cmp	r3, #2
 800392e:	d149      	bne.n	80039c4 <HAL_OSPI_HyperbusCmd+0xae>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003938:	d144      	bne.n	80039c4 <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2200      	movs	r2, #0
 8003942:	2120      	movs	r1, #32
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 ff9f 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13c      	bne.n	80039ce <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003962:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800398c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 80039a2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3a01      	subs	r2, #1
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	6852      	ldr	r2, [r2, #4]
 80039ba:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2204      	movs	r2, #4
 80039c0:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80039c2:	e004      	b.n	80039ce <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2210      	movs	r2, #16
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff f956 	bl	8002c94 <HAL_GetTick>
 80039e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3350      	adds	r3, #80	@ 0x50
 80039f0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2208      	movs	r2, #8
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a02:	e057      	b.n	8003ab4 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d14e      	bne.n	8003aaa <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a34:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2104      	movs	r1, #4
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 ff21 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003a4a:	7ffb      	ldrb	r3, [r7, #31]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1df      	bne.n	8003a36 <HAL_OSPI_Transmit+0x5e>
 8003a76:	e000      	b.n	8003a7a <HAL_OSPI_Transmit+0xa2>
          break;
 8003a78:	bf00      	nop

      if (status == HAL_OK)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d119      	bne.n	8003ab4 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2201      	movs	r2, #1
 8003a88:	2102      	movs	r1, #2
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fefc 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003a94:	7ffb      	ldrb	r3, [r7, #31]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10c      	bne.n	8003ab4 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	651a      	str	r2, [r3, #80]	@ 0x50
 8003aa8:	e004      	b.n	8003ab4 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8003ab4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08c      	sub	sp, #48	@ 0x30
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003aca:	f7ff f8e3 	bl	8002c94 <HAL_GetTick>
 8003ace:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3350      	adds	r3, #80	@ 0x50
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ade:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2208      	movs	r2, #8
 8003afa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003afc:	e07c      	b.n	8003bf8 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d172      	bne.n	8003bec <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b3c:	d104      	bne.n	8003b48 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	649a      	str	r2, [r3, #72]	@ 0x48
 8003b46:	e011      	b.n	8003b6c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003b60:	e004      	b.n	8003b6c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	2201      	movs	r2, #1
 8003b74:	2106      	movs	r1, #6
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fe86 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8003b82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d114      	bne.n	8003bb4 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1dc      	bne.n	8003b6c <HAL_OSPI_Receive+0xae>
 8003bb2:	e000      	b.n	8003bb6 <HAL_OSPI_Receive+0xf8>
          break;
 8003bb4:	bf00      	nop

      if (status == HAL_OK)
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fe5d 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8003bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2202      	movs	r2, #2
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2202      	movs	r2, #2
 8003be8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bea:	e005      	b.n	8003bf8 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8003bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff f840 	bl	8002c94 <HAL_GetTick>
 8003c14:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003c26:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d164      	bne.n	8003cfa <HAL_OSPI_AutoPolling+0xf6>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c38:	d15f      	bne.n	8003cfa <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2120      	movs	r1, #32
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fe1f 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003c4e:	7ffb      	ldrb	r3, [r7, #31]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d158      	bne.n	8003d06 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	6852      	ldr	r2, [r2, #4]
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003c96:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ca0:	d104      	bne.n	8003cac <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	649a      	str	r2, [r3, #72]	@ 0x48
 8003caa:	e011      	b.n	8003cd0 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003cb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	649a      	str	r2, [r3, #72]	@ 0x48
 8003cc4:	e004      	b.n	8003cd0 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	2108      	movs	r1, #8
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fdd4 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2208      	movs	r2, #8
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8003cf8:	e005      	b.n	8003d06 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2210      	movs	r2, #16
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d04:	e000      	b.n	8003d08 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003d06:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d1e:	f7fe ffb9 	bl	8002c94 <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d134      	bne.n	8003d96 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2120      	movs	r1, #32
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fda5 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d12b      	bne.n	8003da0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2288      	movs	r2, #136	@ 0x88
 8003d4c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d111      	bne.n	8003d7a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6852      	ldr	r2, [r2, #4]
 8003d5e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2210      	movs	r2, #16
 8003d68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003d78:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_OSPI_MemoryMapped+0x98>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e004      	b.n	8003da0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	cffffff7 	.word	0xcffffff7

08003db0 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003dbc:	f7fe ff6a 	bl	8002c94 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc6:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d104      	bne.n	8003ddc <HAL_OSPI_Abort+0x2c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d052      	beq.n	8003e82 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d014      	beq.n	8003e14 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fb7e 	bl	8003500 <HAL_MDMA_Abort>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02b      	beq.n	8003e7a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0202 	orr.w	r2, r2, #2
 8003e30:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fd22 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11f      	bne.n	8003e8e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2202      	movs	r2, #2
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2120      	movs	r1, #32
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fd10 	bl	8004888 <OSPI_WaitFlagStateUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003e78:	e009      	b.n	8003e8e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003e80:	e005      	b.n	8003e8e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2210      	movs	r2, #16
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e8c:	e000      	b.n	8003e90 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003e8e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b094      	sub	sp, #80	@ 0x50
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a9d      	ldr	r2, [pc, #628]	@ (800414c <HAL_OSPIM_Config+0x294>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d105      	bne.n	8003ee6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003ee4:	e004      	b.n	8003ef0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003ef6:	e01d      	b.n	8003f34 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003ef8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003efc:	3301      	adds	r3, #1
 8003efe:	b2d8      	uxtb	r0, r3
 8003f00:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003f04:	f107 0114 	add.w	r1, r7, #20
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	4619      	mov	r1, r3
 8003f14:	f000 fe6a 	bl	8004bec <OSPIM_GetConfig>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2208      	movs	r2, #8
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003f34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d9dd      	bls.n	8003ef8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003f3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 8495 	bne.w	8004870 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f46:	4b81      	ldr	r3, [pc, #516]	@ (800414c <HAL_OSPIM_Config+0x294>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f52:	4b7e      	ldr	r3, [pc, #504]	@ (800414c <HAL_OSPIM_Config+0x294>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7d      	ldr	r2, [pc, #500]	@ (800414c <HAL_OSPIM_Config+0x294>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f5e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003f6a:	4b79      	ldr	r3, [pc, #484]	@ (8004150 <HAL_OSPIM_Config+0x298>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f76:	4b76      	ldr	r3, [pc, #472]	@ (8004150 <HAL_OSPIM_Config+0x298>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a75      	ldr	r2, [pc, #468]	@ (8004150 <HAL_OSPIM_Config+0x298>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003f82:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003f8e:	4971      	ldr	r1, [pc, #452]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8003f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	3350      	adds	r3, #80	@ 0x50
 8003f9c:	443b      	add	r3, r7
 8003f9e:	3b34      	subs	r3, #52	@ 0x34
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	486a      	ldr	r0, [pc, #424]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8003fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	3350      	adds	r3, #80	@ 0x50
 8003fb8:	443b      	add	r3, r7
 8003fba:	3b34      	subs	r3, #52	@ 0x34
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4403      	add	r3, r0
 8003fc8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003fca:	4b62      	ldr	r3, [pc, #392]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80c0 	beq.w	8004158 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003fe4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 8162 	bne.w	80042b2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8003fee:	4959      	ldr	r1, [pc, #356]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8003ff0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	3350      	adds	r3, #80	@ 0x50
 8003ffe:	443b      	add	r3, r7
 8004000:	3b3c      	subs	r3, #60	@ 0x3c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	4851      	ldr	r0, [pc, #324]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 800400e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	3350      	adds	r3, #80	@ 0x50
 800401c:	443b      	add	r3, r7
 800401e:	3b3c      	subs	r3, #60	@ 0x3c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	f041 0202 	orr.w	r2, r1, #2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800402e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	3350      	adds	r3, #80	@ 0x50
 800403c:	443b      	add	r3, r7
 800403e:	3b38      	subs	r3, #56	@ 0x38
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01f      	beq.n	8004086 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8004046:	4943      	ldr	r1, [pc, #268]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8004048:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3350      	adds	r3, #80	@ 0x50
 8004056:	443b      	add	r3, r7
 8004058:	3b38      	subs	r3, #56	@ 0x38
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	483b      	ldr	r0, [pc, #236]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8004066:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	3350      	adds	r3, #80	@ 0x50
 8004074:	443b      	add	r3, r7
 8004076:	3b38      	subs	r3, #56	@ 0x38
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	f041 0220 	orr.w	r2, r1, #32
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4403      	add	r3, r0
 8004084:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004086:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	3350      	adds	r3, #80	@ 0x50
 8004094:	443b      	add	r3, r7
 8004096:	3b30      	subs	r3, #48	@ 0x30
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d023      	beq.n	80040e6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800409e:	492d      	ldr	r1, [pc, #180]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 80040a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	3350      	adds	r3, #80	@ 0x50
 80040ae:	443b      	add	r3, r7
 80040b0:	3b30      	subs	r3, #48	@ 0x30
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	4824      	ldr	r0, [pc, #144]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 80040c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	3350      	adds	r3, #80	@ 0x50
 80040d0:	443b      	add	r3, r7
 80040d2:	3b30      	subs	r3, #48	@ 0x30
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4403      	add	r3, r0
 80040e4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	3350      	adds	r3, #80	@ 0x50
 80040f4:	443b      	add	r3, r7
 80040f6:	3b2c      	subs	r3, #44	@ 0x2c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80d9 	beq.w	80042b2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004100:	4914      	ldr	r1, [pc, #80]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8004102:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	3350      	adds	r3, #80	@ 0x50
 8004110:	443b      	add	r3, r7
 8004112:	3b2c      	subs	r3, #44	@ 0x2c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3b01      	subs	r3, #1
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	480c      	ldr	r0, [pc, #48]	@ (8004154 <HAL_OSPIM_Config+0x29c>)
 8004124:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	3350      	adds	r3, #80	@ 0x50
 8004132:	443b      	add	r3, r7
 8004134:	3b2c      	subs	r3, #44	@ 0x2c
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4403      	add	r3, r0
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	e0b3      	b.n	80042b2 <HAL_OSPIM_Config+0x3fa>
 800414a:	bf00      	nop
 800414c:	52005000 	.word	0x52005000
 8004150:	5200a000 	.word	0x5200a000
 8004154:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	3350      	adds	r3, #80	@ 0x50
 8004164:	443b      	add	r3, r7
 8004166:	3b3c      	subs	r3, #60	@ 0x3c
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80a1 	beq.w	80042b2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004170:	4993      	ldr	r1, [pc, #588]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 8004172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	3350      	adds	r3, #80	@ 0x50
 800417e:	443b      	add	r3, r7
 8004180:	3b3c      	subs	r3, #60	@ 0x3c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3b01      	subs	r3, #1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	488c      	ldr	r0, [pc, #560]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 800418e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3350      	adds	r3, #80	@ 0x50
 800419a:	443b      	add	r3, r7
 800419c:	3b3c      	subs	r3, #60	@ 0x3c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	f021 0201 	bic.w	r2, r1, #1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4403      	add	r3, r0
 80041aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80041ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	3350      	adds	r3, #80	@ 0x50
 80041b8:	443b      	add	r3, r7
 80041ba:	3b38      	subs	r3, #56	@ 0x38
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01d      	beq.n	80041fe <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80041c2:	497f      	ldr	r1, [pc, #508]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 80041c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	3350      	adds	r3, #80	@ 0x50
 80041d0:	443b      	add	r3, r7
 80041d2:	3b38      	subs	r3, #56	@ 0x38
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	4878      	ldr	r0, [pc, #480]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 80041e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	3350      	adds	r3, #80	@ 0x50
 80041ec:	443b      	add	r3, r7
 80041ee:	3b38      	subs	r3, #56	@ 0x38
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	f021 0210 	bic.w	r2, r1, #16
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4403      	add	r3, r0
 80041fc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80041fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	3350      	adds	r3, #80	@ 0x50
 800420a:	443b      	add	r3, r7
 800420c:	3b30      	subs	r3, #48	@ 0x30
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d021      	beq.n	8004258 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004214:	496a      	ldr	r1, [pc, #424]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 8004216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3350      	adds	r3, #80	@ 0x50
 8004222:	443b      	add	r3, r7
 8004224:	3b30      	subs	r3, #48	@ 0x30
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3b01      	subs	r3, #1
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	4862      	ldr	r0, [pc, #392]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 8004236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	3350      	adds	r3, #80	@ 0x50
 8004242:	443b      	add	r3, r7
 8004244:	3b30      	subs	r3, #48	@ 0x30
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4403      	add	r3, r0
 8004256:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	3350      	adds	r3, #80	@ 0x50
 8004264:	443b      	add	r3, r7
 8004266:	3b2c      	subs	r3, #44	@ 0x2c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d021      	beq.n	80042b2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800426e:	4954      	ldr	r1, [pc, #336]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 8004270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	3350      	adds	r3, #80	@ 0x50
 800427c:	443b      	add	r3, r7
 800427e:	3b2c      	subs	r3, #44	@ 0x2c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3b01      	subs	r3, #1
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	484c      	ldr	r0, [pc, #304]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 8004290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	3350      	adds	r3, #80	@ 0x50
 800429c:	443b      	add	r3, r7
 800429e:	3b2c      	subs	r3, #44	@ 0x2c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4403      	add	r3, r0
 80042b0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	3350      	adds	r3, #80	@ 0x50
 80042c4:	443b      	add	r3, r7
 80042c6:	3b3c      	subs	r3, #60	@ 0x3c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4299      	cmp	r1, r3
 80042cc:	d038      	beq.n	8004340 <HAL_OSPIM_Config+0x488>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80042d6:	4613      	mov	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	3350      	adds	r3, #80	@ 0x50
 80042e0:	443b      	add	r3, r7
 80042e2:	3b38      	subs	r3, #56	@ 0x38
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4299      	cmp	r1, r3
 80042e8:	d02a      	beq.n	8004340 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6899      	ldr	r1, [r3, #8]
 80042ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	3350      	adds	r3, #80	@ 0x50
 80042fc:	443b      	add	r3, r7
 80042fe:	3b34      	subs	r3, #52	@ 0x34
 8004300:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004302:	4299      	cmp	r1, r3
 8004304:	d01c      	beq.n	8004340 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	68d9      	ldr	r1, [r3, #12]
 800430a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	3350      	adds	r3, #80	@ 0x50
 8004318:	443b      	add	r3, r7
 800431a:	3b30      	subs	r3, #48	@ 0x30
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4299      	cmp	r1, r3
 8004320:	d00e      	beq.n	8004340 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	3350      	adds	r3, #80	@ 0x50
 8004334:	443b      	add	r3, r7
 8004336:	3b2c      	subs	r3, #44	@ 0x2c
 8004338:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800433a:	4299      	cmp	r1, r3
 800433c:	f040 810e 	bne.w	800455c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3350      	adds	r3, #80	@ 0x50
 8004352:	443b      	add	r3, r7
 8004354:	3b3c      	subs	r3, #60	@ 0x3c
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4299      	cmp	r1, r3
 800435a:	d133      	bne.n	80043c4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	3350      	adds	r3, #80	@ 0x50
 800436e:	443b      	add	r3, r7
 8004370:	3b38      	subs	r3, #56	@ 0x38
 8004372:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004374:	4299      	cmp	r1, r3
 8004376:	d125      	bne.n	80043c4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68d9      	ldr	r1, [r3, #12]
 800437c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3350      	adds	r3, #80	@ 0x50
 800438a:	443b      	add	r3, r7
 800438c:	3b30      	subs	r3, #48	@ 0x30
 800438e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004390:	4299      	cmp	r1, r3
 8004392:	d117      	bne.n	80043c4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6919      	ldr	r1, [r3, #16]
 8004398:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	3350      	adds	r3, #80	@ 0x50
 80043a6:	443b      	add	r3, r7
 80043a8:	3b2c      	subs	r3, #44	@ 0x2c
 80043aa:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80043ac:	4299      	cmp	r1, r3
 80043ae:	d109      	bne.n	80043c4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a02      	ldr	r2, [pc, #8]	@ (80043c0 <HAL_OSPIM_Config+0x508>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e0ce      	b.n	800455c <HAL_OSPIM_Config+0x6a4>
 80043be:	bf00      	nop
 80043c0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80043c4:	49bb      	ldr	r1, [pc, #748]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80043c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80043ca:	4613      	mov	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	3350      	adds	r3, #80	@ 0x50
 80043d4:	443b      	add	r3, r7
 80043d6:	3b3c      	subs	r3, #60	@ 0x3c
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	48b4      	ldr	r0, [pc, #720]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80043e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3350      	adds	r3, #80	@ 0x50
 80043f2:	443b      	add	r3, r7
 80043f4:	3b3c      	subs	r3, #60	@ 0x3c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	f021 0201 	bic.w	r2, r1, #1
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4403      	add	r3, r0
 8004402:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004404:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	3350      	adds	r3, #80	@ 0x50
 8004412:	443b      	add	r3, r7
 8004414:	3b38      	subs	r3, #56	@ 0x38
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01f      	beq.n	800445c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800441c:	49a5      	ldr	r1, [pc, #660]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800441e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004422:	4613      	mov	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	3350      	adds	r3, #80	@ 0x50
 800442c:	443b      	add	r3, r7
 800442e:	3b38      	subs	r3, #56	@ 0x38
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	489e      	ldr	r0, [pc, #632]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800443c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3350      	adds	r3, #80	@ 0x50
 800444a:	443b      	add	r3, r7
 800444c:	3b38      	subs	r3, #56	@ 0x38
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	f021 0210 	bic.w	r2, r1, #16
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4403      	add	r3, r0
 800445a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800445c:	4995      	ldr	r1, [pc, #596]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800445e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	3350      	adds	r3, #80	@ 0x50
 800446c:	443b      	add	r3, r7
 800446e:	3b34      	subs	r3, #52	@ 0x34
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	6859      	ldr	r1, [r3, #4]
 800447a:	488e      	ldr	r0, [pc, #568]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800447c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	3350      	adds	r3, #80	@ 0x50
 800448a:	443b      	add	r3, r7
 800448c:	3b34      	subs	r3, #52	@ 0x34
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4403      	add	r3, r0
 800449a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800449c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	3350      	adds	r3, #80	@ 0x50
 80044aa:	443b      	add	r3, r7
 80044ac:	3b30      	subs	r3, #48	@ 0x30
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d023      	beq.n	80044fc <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044b4:	497f      	ldr	r1, [pc, #508]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80044b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	3350      	adds	r3, #80	@ 0x50
 80044c4:	443b      	add	r3, r7
 80044c6:	3b30      	subs	r3, #48	@ 0x30
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	4877      	ldr	r0, [pc, #476]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80044d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80044dc:	4613      	mov	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	3350      	adds	r3, #80	@ 0x50
 80044e6:	443b      	add	r3, r7
 80044e8:	3b30      	subs	r3, #48	@ 0x30
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4403      	add	r3, r0
 80044fa:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	3350      	adds	r3, #80	@ 0x50
 800450a:	443b      	add	r3, r7
 800450c:	3b2c      	subs	r3, #44	@ 0x2c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d023      	beq.n	800455c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004514:	4967      	ldr	r1, [pc, #412]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004516:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	3350      	adds	r3, #80	@ 0x50
 8004524:	443b      	add	r3, r7
 8004526:	3b2c      	subs	r3, #44	@ 0x2c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	485f      	ldr	r0, [pc, #380]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004538:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	3350      	adds	r3, #80	@ 0x50
 8004546:	443b      	add	r3, r7
 8004548:	3b2c      	subs	r3, #44	@ 0x2c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4403      	add	r3, r0
 800455a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800455c:	4a55      	ldr	r2, [pc, #340]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	3b01      	subs	r3, #1
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800456e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004570:	025b      	lsls	r3, r3, #9
 8004572:	431a      	orrs	r2, r3
 8004574:	494f      	ldr	r1, [pc, #316]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	b2db      	uxtb	r3, r3
 8004594:	429a      	cmp	r2, r3
 8004596:	d90a      	bls.n	80045ae <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004598:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	4942      	ldr	r1, [pc, #264]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80045ae:	4b41      	ldr	r3, [pc, #260]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 809a 	beq.w	80046f0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80045bc:	4a3d      	ldr	r2, [pc, #244]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	4939      	ldr	r1, [pc, #228]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d011      	beq.n	800460c <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80045e8:	4a32      	ldr	r2, [pc, #200]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045fa:	492e      	ldr	r1, [pc, #184]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	3b01      	subs	r3, #1
 8004602:	f042 0210 	orr.w	r2, r2, #16
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d016      	beq.n	8004646 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004618:	4a26      	ldr	r2, [pc, #152]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	3b01      	subs	r3, #1
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800462e:	4921      	ldr	r1, [pc, #132]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	3b01      	subs	r3, #1
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e019      	b.n	800467a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800464e:	4a19      	ldr	r2, [pc, #100]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	3b01      	subs	r3, #1
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004664:	4913      	ldr	r1, [pc, #76]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004686:	4a0b      	ldr	r2, [pc, #44]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	3b01      	subs	r3, #1
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800469c:	4905      	ldr	r1, [pc, #20]	@ (80046b4 <HAL_OSPIM_Config+0x7fc>)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	e0c5      	b.n	8004840 <HAL_OSPIM_Config+0x988>
 80046b4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80bf 	beq.w	8004840 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80046c2:	4a6e      	ldr	r2, [pc, #440]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80046d8:	4968      	ldr	r1, [pc, #416]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	3b01      	subs	r3, #1
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	e0a7      	b.n	8004840 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80046f0:	4a62      	ldr	r2, [pc, #392]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	431a      	orrs	r2, r3
 8004708:	495c      	ldr	r1, [pc, #368]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d014      	beq.n	800474c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004722:	4a56      	ldr	r2, [pc, #344]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	3b01      	subs	r3, #1
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	431a      	orrs	r2, r3
 800473a:	4950      	ldr	r1, [pc, #320]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	3b01      	subs	r3, #1
 8004742:	f042 0210 	orr.w	r2, r2, #16
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004758:	4a48      	ldr	r2, [pc, #288]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	3b01      	subs	r3, #1
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800476e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004770:	049b      	lsls	r3, r3, #18
 8004772:	431a      	orrs	r2, r3
 8004774:	4941      	ldr	r1, [pc, #260]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	3b01      	subs	r3, #1
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	e01c      	b.n	80047c6 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004794:	4a39      	ldr	r2, [pc, #228]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	3b01      	subs	r3, #1
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80047aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ac:	069b      	lsls	r3, r3, #26
 80047ae:	431a      	orrs	r2, r3
 80047b0:	4932      	ldr	r1, [pc, #200]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d019      	beq.n	8004806 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80047d2:	4a2a      	ldr	r2, [pc, #168]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	3b01      	subs	r3, #1
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ea:	049b      	lsls	r3, r3, #18
 80047ec:	431a      	orrs	r2, r3
 80047ee:	4923      	ldr	r1, [pc, #140]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	e01c      	b.n	8004840 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800480e:	4a1b      	ldr	r2, [pc, #108]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	3b01      	subs	r3, #1
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004826:	069b      	lsls	r3, r3, #26
 8004828:	431a      	orrs	r2, r3
 800482a:	4914      	ldr	r1, [pc, #80]	@ (800487c <HAL_OSPIM_Config+0x9c4>)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	3b01      	subs	r3, #1
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004840:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800484c:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <HAL_OSPIM_Config+0x9c8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0b      	ldr	r2, [pc, #44]	@ (8004880 <HAL_OSPIM_Config+0x9c8>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004858:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004864:	4b07      	ldr	r3, [pc, #28]	@ (8004884 <HAL_OSPIM_Config+0x9cc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a06      	ldr	r2, [pc, #24]	@ (8004884 <HAL_OSPIM_Config+0x9cc>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004870:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004874:	4618      	mov	r0, r3
 8004876:	3750      	adds	r7, #80	@ 0x50
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	5200b400 	.word	0x5200b400
 8004880:	52005000 	.word	0x52005000
 8004884:	5200a000 	.word	0x5200a000

08004888 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004898:	e01a      	b.n	80048d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d016      	beq.n	80048d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fe f9f7 	bl	8002c94 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048be:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e00e      	b.n	80048ee <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1d6      	bne.n	800489a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	@ 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004914:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d114      	bne.n	8004966 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004944:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800494e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8004958:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e02c      	b.n	80049c0 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d114      	bne.n	8004998 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004976:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004980:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800498a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e013      	b.n	80049c0 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049a0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80049aa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80049b4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c8:	431a      	orrs	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d012      	beq.n	80049fc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ee:	4319      	orrs	r1, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	430b      	orrs	r3, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 021f 	bic.w	r2, r3, #31
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d105      	bne.n	8004a2a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3a01      	subs	r2, #1
 8004a28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8095 	beq.w	8004b5e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d053      	beq.n	8004ae4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01e      	beq.n	8004a82 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b64      	ldr	r3, [pc, #400]	@ (8004bdc <OSPI_ConfigCmd+0x2e4>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	68d1      	ldr	r1, [r2, #12]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	6952      	ldr	r2, [r2, #20]
 8004a54:	4311      	orrs	r1, r2
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	6912      	ldr	r2, [r2, #16]
 8004a5a:	4311      	orrs	r1, r2
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	69d2      	ldr	r2, [r2, #28]
 8004a60:	4311      	orrs	r1, r2
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a66:	4311      	orrs	r1, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	6a12      	ldr	r2, [r2, #32]
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a72:	4311      	orrs	r1, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e026      	b.n	8004ad0 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b56      	ldr	r3, [pc, #344]	@ (8004be0 <OSPI_ConfigCmd+0x2e8>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	68d1      	ldr	r1, [r2, #12]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	6952      	ldr	r2, [r2, #20]
 8004a92:	4311      	orrs	r1, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	6912      	ldr	r2, [r2, #16]
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	69d2      	ldr	r2, [r2, #28]
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	6a12      	ldr	r2, [r2, #32]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aba:	d109      	bne.n	8004ad0 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d105      	bne.n	8004ad0 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	6992      	ldr	r2, [r2, #24]
 8004ae0:	649a      	str	r2, [r3, #72]	@ 0x48
 8004ae2:	e074      	b.n	8004bce <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b3c      	ldr	r3, [pc, #240]	@ (8004be4 <OSPI_ConfigCmd+0x2ec>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	68d1      	ldr	r1, [r2, #12]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	6952      	ldr	r2, [r2, #20]
 8004afc:	4311      	orrs	r1, r2
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	6912      	ldr	r2, [r2, #16]
 8004b02:	4311      	orrs	r1, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b08:	4311      	orrs	r1, r2
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e01d      	b.n	8004b54 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68d9      	ldr	r1, [r3, #12]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	4319      	orrs	r1, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b3e:	d109      	bne.n	8004b54 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d105      	bne.n	8004b54 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e037      	b.n	8004bce <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02e      	beq.n	8004bc4 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d015      	beq.n	8004b9a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <OSPI_ConfigCmd+0x2f0>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	69d1      	ldr	r1, [r2, #28]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	6a12      	ldr	r2, [r2, #32]
 8004b84:	4311      	orrs	r1, r2
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b90:	430a      	orrs	r2, r1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e00e      	b.n	8004bb8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	69d9      	ldr	r1, [r3, #28]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	4319      	orrs	r1, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	6992      	ldr	r2, [r2, #24]
 8004bc0:	649a      	str	r2, [r3, #72]	@ 0x48
 8004bc2:	e004      	b.n	8004bce <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8004bce:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3724      	adds	r7, #36	@ 0x24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	f0ffc0c0 	.word	0xf0ffc0c0
 8004be0:	ffffc0c0 	.word	0xffffc0c0
 8004be4:	f0ffffc0 	.word	0xf0ffffc0
 8004be8:	f0ffc0ff 	.word	0xf0ffc0ff

08004bec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <OSPIM_GetConfig+0x26>
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d802      	bhi.n	8004c12 <OSPIM_GetConfig+0x26>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
 8004c16:	e098      	b.n	8004d4a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d10b      	bne.n	8004c54 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004c3c:	4b46      	ldr	r3, [pc, #280]	@ (8004d58 <OSPIM_GetConfig+0x16c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004c48:	4b44      	ldr	r3, [pc, #272]	@ (8004d5c <OSPIM_GetConfig+0x170>)
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e002      	b.n	8004c54 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c52:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e074      	b.n	8004d44 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d58 <OSPIM_GetConfig+0x16c>)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4053      	eors	r3, r2
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4053      	eors	r3, r2
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4053      	eors	r3, r2
 8004cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d018      	beq.n	8004d02 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4053      	eors	r3, r2
 8004cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d111      	bne.n	8004d02 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	e005      	b.n	8004d02 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d018      	beq.n	8004d3e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4053      	eors	r3, r2
 8004d12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d111      	bne.n	8004d3e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	611a      	str	r2, [r3, #16]
 8004d30:	e005      	b.n	8004d3e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d987      	bls.n	8004c5a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	5200b400 	.word	0x5200b400
 8004d5c:	04040222 	.word	0x04040222

08004d60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004d68:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d00a      	beq.n	8004d8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d74:	4b26      	ldr	r3, [pc, #152]	@ (8004e10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d001      	beq.n	8004d86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e03f      	b.n	8004e06 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e03d      	b.n	8004e06 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d8a:	4b21      	ldr	r3, [pc, #132]	@ (8004e10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004d92:	491f      	ldr	r1, [pc, #124]	@ (8004e10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d9a:	f7fd ff7b 	bl	8002c94 <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004da0:	e009      	b.n	8004db6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004da2:	f7fd ff77 	bl	8002c94 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004db0:	d901      	bls.n	8004db6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e027      	b.n	8004e06 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004db6:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc2:	d1ee      	bne.n	8004da2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b1e      	cmp	r3, #30
 8004dc8:	d008      	beq.n	8004ddc <HAL_PWREx_ConfigSupply+0x7c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dce:	d005      	beq.n	8004ddc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b1d      	cmp	r3, #29
 8004dd4:	d002      	beq.n	8004ddc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b2d      	cmp	r3, #45	@ 0x2d
 8004dda:	d113      	bne.n	8004e04 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004ddc:	f7fd ff5a 	bl	8002c94 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004de2:	e009      	b.n	8004df8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004de4:	f7fd ff56 	bl	8002c94 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004df2:	d901      	bls.n	8004df8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e006      	b.n	8004e06 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0311 	and.w	r3, r3, #17
 8004e00:	2b11      	cmp	r3, #17
 8004e02:	d1ef      	bne.n	8004de4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	58024800 	.word	0x58024800

08004e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	@ 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e3c8      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8087 	beq.w	8004f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e34:	4b88      	ldr	r3, [pc, #544]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e3e:	4b86      	ldr	r3, [pc, #536]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d007      	beq.n	8004e5a <HAL_RCC_OscConfig+0x46>
 8004e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4c:	2b18      	cmp	r3, #24
 8004e4e:	d110      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5e>
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d10b      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d06c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x12c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d168      	bne.n	8004f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e3a2      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x76>
 8004e7c:	4b76      	ldr	r3, [pc, #472]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a75      	ldr	r2, [pc, #468]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e02e      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd4>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x98>
 8004e92:	4b71      	ldr	r3, [pc, #452]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a70      	ldr	r2, [pc, #448]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6d      	ldr	r2, [pc, #436]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ea4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e01d      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd4>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xbc>
 8004eb6:	4b68      	ldr	r3, [pc, #416]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a67      	ldr	r2, [pc, #412]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4b65      	ldr	r3, [pc, #404]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a64      	ldr	r2, [pc, #400]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd4>
 8004ed0:	4b61      	ldr	r3, [pc, #388]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a60      	ldr	r2, [pc, #384]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4b5e      	ldr	r3, [pc, #376]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d013      	beq.n	8004f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fed0 	bl	8002c94 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fd fecc 	bl	8002c94 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	@ 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e356      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f0a:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xe4>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd febc 	bl	8002c94 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fd feb8 	bl	8002c94 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	@ 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e342      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f32:	4b49      	ldr	r3, [pc, #292]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x10c>
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 808c 	beq.w	8005068 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f50:	4b41      	ldr	r3, [pc, #260]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_RCC_OscConfig+0x162>
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	2b18      	cmp	r3, #24
 8004f6a:	d137      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1c8>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d132      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f76:	4b38      	ldr	r3, [pc, #224]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e314      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f8e:	4b32      	ldr	r3, [pc, #200]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 0219 	bic.w	r2, r3, #25
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	492f      	ldr	r1, [pc, #188]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fe78 	bl	8002c94 <HAL_GetTick>
 8004fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fe74 	bl	8002c94 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e2fe      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fba:	4b27      	ldr	r3, [pc, #156]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc6:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	4920      	ldr	r1, [pc, #128]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fda:	e045      	b.n	8005068 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d026      	beq.n	8005032 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 0219 	bic.w	r2, r3, #25
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4919      	ldr	r1, [pc, #100]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fd fe4d 	bl	8002c94 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fd fe49 	bl	8002c94 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e2d3      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005010:	4b11      	ldr	r3, [pc, #68]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	490b      	ldr	r1, [pc, #44]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
 8005030:	e01a      	b.n	8005068 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fd fe29 	bl	8002c94 <HAL_GetTick>
 8005042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005046:	f7fd fe25 	bl	8002c94 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d903      	bls.n	800505c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e2af      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
 8005058:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800505c:	4b96      	ldr	r3, [pc, #600]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ee      	bne.n	8005046 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	d06a      	beq.n	800514a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005074:	4b90      	ldr	r3, [pc, #576]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800507c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800507e:	4b8e      	ldr	r3, [pc, #568]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d007      	beq.n	800509a <HAL_RCC_OscConfig+0x286>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b18      	cmp	r3, #24
 800508e:	d11b      	bne.n	80050c8 <HAL_RCC_OscConfig+0x2b4>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d116      	bne.n	80050c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800509a:	4b87      	ldr	r3, [pc, #540]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCC_OscConfig+0x29e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	2b80      	cmp	r3, #128	@ 0x80
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e282      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050b2:	4b81      	ldr	r3, [pc, #516]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	497d      	ldr	r1, [pc, #500]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050c6:	e040      	b.n	800514a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d023      	beq.n	8005118 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050d0:	4b79      	ldr	r3, [pc, #484]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a78      	ldr	r2, [pc, #480]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80050d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fd fdda 	bl	8002c94 <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050e4:	f7fd fdd6 	bl	8002c94 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e260      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005102:	4b6d      	ldr	r3, [pc, #436]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	4969      	ldr	r1, [pc, #420]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	60cb      	str	r3, [r1, #12]
 8005116:	e018      	b.n	800514a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005118:	4b67      	ldr	r3, [pc, #412]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a66      	ldr	r2, [pc, #408]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800511e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fd fdb6 	bl	8002c94 <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800512c:	f7fd fdb2 	bl	8002c94 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e23c      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800513e:	4b5e      	ldr	r3, [pc, #376]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d036      	beq.n	80051c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d019      	beq.n	8005192 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515e:	4b56      	ldr	r3, [pc, #344]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	4a55      	ldr	r2, [pc, #340]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fd fd93 	bl	8002c94 <HAL_GetTick>
 800516e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005172:	f7fd fd8f 	bl	8002c94 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e219      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005184:	4b4c      	ldr	r3, [pc, #304]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x35e>
 8005190:	e018      	b.n	80051c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005192:	4b49      	ldr	r3, [pc, #292]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005196:	4a48      	ldr	r2, [pc, #288]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fd fd79 	bl	8002c94 <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fd fd75 	bl	8002c94 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e1ff      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051b8:	4b3f      	ldr	r3, [pc, #252]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80051ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d036      	beq.n	800523e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d019      	beq.n	800520c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051d8:	4b37      	ldr	r3, [pc, #220]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a36      	ldr	r2, [pc, #216]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80051de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051e4:	f7fd fd56 	bl	8002c94 <HAL_GetTick>
 80051e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ec:	f7fd fd52 	bl	8002c94 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e1dc      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051fe:	4b2e      	ldr	r3, [pc, #184]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x3d8>
 800520a:	e018      	b.n	800523e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800520c:	4b2a      	ldr	r3, [pc, #168]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a29      	ldr	r2, [pc, #164]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005216:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005218:	f7fd fd3c 	bl	8002c94 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005220:	f7fd fd38 	bl	8002c94 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1c2      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005232:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8086 	beq.w	8005358 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800524c:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <HAL_RCC_OscConfig+0x4a8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1a      	ldr	r2, [pc, #104]	@ (80052bc <HAL_RCC_OscConfig+0x4a8>)
 8005252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005258:	f7fd fd1c 	bl	8002c94 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005260:	f7fd fd18 	bl	8002c94 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	@ 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e1a2      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <HAL_RCC_OscConfig+0x4a8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d106      	bne.n	8005294 <HAL_RCC_OscConfig+0x480>
 8005286:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	4a0b      	ldr	r2, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6713      	str	r3, [r2, #112]	@ 0x70
 8005292:	e032      	b.n	80052fa <HAL_RCC_OscConfig+0x4e6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d111      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4ac>
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a0:	4a05      	ldr	r2, [pc, #20]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a8:	4b03      	ldr	r3, [pc, #12]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	4a02      	ldr	r2, [pc, #8]	@ (80052b8 <HAL_RCC_OscConfig+0x4a4>)
 80052ae:	f023 0304 	bic.w	r3, r3, #4
 80052b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b4:	e021      	b.n	80052fa <HAL_RCC_OscConfig+0x4e6>
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	58024800 	.word	0x58024800
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d10c      	bne.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
 80052c8:	4b83      	ldr	r3, [pc, #524]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052cc:	4a82      	ldr	r2, [pc, #520]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	f043 0304 	orr.w	r3, r3, #4
 80052d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d4:	4b80      	ldr	r3, [pc, #512]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d8:	4a7f      	ldr	r2, [pc, #508]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e0:	e00b      	b.n	80052fa <HAL_RCC_OscConfig+0x4e6>
 80052e2:	4b7d      	ldr	r3, [pc, #500]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	4a7c      	ldr	r2, [pc, #496]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ee:	4b7a      	ldr	r3, [pc, #488]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	4a79      	ldr	r2, [pc, #484]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80052f4:	f023 0304 	bic.w	r3, r3, #4
 80052f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d015      	beq.n	800532e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fd fcc7 	bl	8002c94 <HAL_GetTick>
 8005306:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fd fcc3 	bl	8002c94 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e14b      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005320:	4b6d      	ldr	r3, [pc, #436]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ee      	beq.n	800530a <HAL_RCC_OscConfig+0x4f6>
 800532c:	e014      	b.n	8005358 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fd fcb1 	bl	8002c94 <HAL_GetTick>
 8005332:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005334:	e00a      	b.n	800534c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fd fcad 	bl	8002c94 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e135      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800534c:	4b62      	ldr	r3, [pc, #392]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ee      	bne.n	8005336 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 812a 	beq.w	80055b6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005362:	4b5d      	ldr	r3, [pc, #372]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800536a:	2b18      	cmp	r3, #24
 800536c:	f000 80ba 	beq.w	80054e4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	2b02      	cmp	r3, #2
 8005376:	f040 8095 	bne.w	80054a4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b57      	ldr	r3, [pc, #348]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a56      	ldr	r2, [pc, #344]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7fd fc85 	bl	8002c94 <HAL_GetTick>
 800538a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538e:	f7fd fc81 	bl	8002c94 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e10b      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053a0:	4b4d      	ldr	r3, [pc, #308]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ac:	4b4a      	ldr	r3, [pc, #296]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80053ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053b0:	4b4a      	ldr	r3, [pc, #296]	@ (80054dc <HAL_RCC_OscConfig+0x6c8>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053bc:	0112      	lsls	r2, r2, #4
 80053be:	430a      	orrs	r2, r1
 80053c0:	4945      	ldr	r1, [pc, #276]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	3b01      	subs	r3, #1
 80053cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d4:	3b01      	subs	r3, #1
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	b29b      	uxth	r3, r3
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	3b01      	subs	r3, #1
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ee:	3b01      	subs	r3, #1
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053f6:	4938      	ldr	r1, [pc, #224]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80053fc:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	4a35      	ldr	r2, [pc, #212]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005408:	4b33      	ldr	r3, [pc, #204]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800540a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800540c:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <HAL_RCC_OscConfig+0x6cc>)
 800540e:	4013      	ands	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005414:	00d2      	lsls	r2, r2, #3
 8005416:	4930      	ldr	r1, [pc, #192]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005418:	4313      	orrs	r3, r2
 800541a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800541c:	4b2e      	ldr	r3, [pc, #184]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	f023 020c 	bic.w	r2, r3, #12
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	492b      	ldr	r1, [pc, #172]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800542e:	4b2a      	ldr	r3, [pc, #168]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	f023 0202 	bic.w	r2, r3, #2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	4927      	ldr	r1, [pc, #156]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005440:	4b25      	ldr	r3, [pc, #148]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	4a24      	ldr	r2, [pc, #144]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544c:	4b22      	ldr	r3, [pc, #136]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	4a21      	ldr	r2, [pc, #132]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005458:	4b1f      	ldr	r3, [pc, #124]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800545e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005464:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005470:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a18      	ldr	r2, [pc, #96]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800547a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd fc0a 	bl	8002c94 <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fd fc06 	bl	8002c94 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e090      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005496:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x670>
 80054a2:	e088      	b.n	80055b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a4:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0b      	ldr	r2, [pc, #44]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd fbf0 	bl	8002c94 <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fd fbec 	bl	8002c94 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e076      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ca:	4b03      	ldr	r3, [pc, #12]	@ (80054d8 <HAL_RCC_OscConfig+0x6c4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x6a4>
 80054d6:	e06e      	b.n	80055b6 <HAL_RCC_OscConfig+0x7a2>
 80054d8:	58024400 	.word	0x58024400
 80054dc:	fffffc0c 	.word	0xfffffc0c
 80054e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054e4:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054ea:	4b35      	ldr	r3, [pc, #212]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d031      	beq.n	800555c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f003 0203 	and.w	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d12a      	bne.n	800555c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d122      	bne.n	800555c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d11a      	bne.n	800555c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	0a5b      	lsrs	r3, r3, #9
 800552a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005532:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d111      	bne.n	800555c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d108      	bne.n	800555c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	0e1b      	lsrs	r3, r3, #24
 800554e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005556:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e02b      	b.n	80055b8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005560:	4b17      	ldr	r3, [pc, #92]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 8005562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005564:	08db      	lsrs	r3, r3, #3
 8005566:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800556a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d01f      	beq.n	80055b6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005576:	4b12      	ldr	r3, [pc, #72]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	4a11      	ldr	r2, [pc, #68]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005582:	f7fd fb87 	bl	8002c94 <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005588:	bf00      	nop
 800558a:	f7fd fb83 	bl	8002c94 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	4293      	cmp	r3, r2
 8005594:	d0f9      	beq.n	800558a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005596:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 8005598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800559a:	4b0a      	ldr	r3, [pc, #40]	@ (80055c4 <HAL_RCC_OscConfig+0x7b0>)
 800559c:	4013      	ands	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055a2:	00d2      	lsls	r2, r2, #3
 80055a4:	4906      	ldr	r1, [pc, #24]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055aa:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	4a04      	ldr	r2, [pc, #16]	@ (80055c0 <HAL_RCC_OscConfig+0x7ac>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3730      	adds	r7, #48	@ 0x30
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	58024400 	.word	0x58024400
 80055c4:	ffff0007 	.word	0xffff0007

080055c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e19c      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d910      	bls.n	800560c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ea:	4b87      	ldr	r3, [pc, #540]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 020f 	bic.w	r2, r3, #15
 80055f2:	4985      	ldr	r1, [pc, #532]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b83      	ldr	r3, [pc, #524]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d001      	beq.n	800560c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e184      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	4b7b      	ldr	r3, [pc, #492]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005624:	429a      	cmp	r2, r3
 8005626:	d908      	bls.n	800563a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005628:	4b78      	ldr	r3, [pc, #480]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	4975      	ldr	r1, [pc, #468]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005636:	4313      	orrs	r3, r2
 8005638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	4b70      	ldr	r3, [pc, #448]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005652:	429a      	cmp	r2, r3
 8005654:	d908      	bls.n	8005668 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005656:	4b6d      	ldr	r3, [pc, #436]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	496a      	ldr	r1, [pc, #424]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005664:	4313      	orrs	r3, r2
 8005666:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	4b64      	ldr	r3, [pc, #400]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005680:	429a      	cmp	r2, r3
 8005682:	d908      	bls.n	8005696 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005684:	4b61      	ldr	r3, [pc, #388]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	495e      	ldr	r1, [pc, #376]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005692:	4313      	orrs	r3, r2
 8005694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	4b59      	ldr	r3, [pc, #356]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d908      	bls.n	80056c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056b2:	4b56      	ldr	r3, [pc, #344]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	4953      	ldr	r1, [pc, #332]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d010      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	4b4d      	ldr	r3, [pc, #308]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	429a      	cmp	r2, r3
 80056de:	d908      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e0:	4b4a      	ldr	r3, [pc, #296]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f023 020f 	bic.w	r2, r3, #15
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4947      	ldr	r1, [pc, #284]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d055      	beq.n	80057aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80056fe:	4b43      	ldr	r3, [pc, #268]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	4940      	ldr	r1, [pc, #256]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800570c:	4313      	orrs	r3, r2
 800570e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d107      	bne.n	8005728 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005718:	4b3c      	ldr	r3, [pc, #240]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d121      	bne.n	8005768 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0f6      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d107      	bne.n	8005740 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005730:	4b36      	ldr	r3, [pc, #216]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d115      	bne.n	8005768 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0ea      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d107      	bne.n	8005758 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005748:	4b30      	ldr	r3, [pc, #192]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0de      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005758:	4b2c      	ldr	r3, [pc, #176]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0d6      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005768:	4b28      	ldr	r3, [pc, #160]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f023 0207 	bic.w	r2, r3, #7
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4925      	ldr	r1, [pc, #148]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577a:	f7fd fa8b 	bl	8002c94 <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005780:	e00a      	b.n	8005798 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005782:	f7fd fa87 	bl	8002c94 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0be      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d1eb      	bne.n	8005782 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	4b14      	ldr	r3, [pc, #80]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d208      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c6:	4b11      	ldr	r3, [pc, #68]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f023 020f 	bic.w	r2, r3, #15
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	490e      	ldr	r1, [pc, #56]	@ (800580c <HAL_RCC_ClockConfig+0x244>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d214      	bcs.n	8005810 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 020f 	bic.w	r2, r3, #15
 80057ee:	4906      	ldr	r1, [pc, #24]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <HAL_RCC_ClockConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d005      	beq.n	8005810 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e086      	b.n	8005916 <HAL_RCC_ClockConfig+0x34e>
 8005808:	52002000 	.word	0x52002000
 800580c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	4b3f      	ldr	r3, [pc, #252]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005828:	429a      	cmp	r2, r3
 800582a:	d208      	bcs.n	800583e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800582c:	4b3c      	ldr	r3, [pc, #240]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	4939      	ldr	r1, [pc, #228]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 800583a:	4313      	orrs	r3, r2
 800583c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d010      	beq.n	800586c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	4b34      	ldr	r3, [pc, #208]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005856:	429a      	cmp	r2, r3
 8005858:	d208      	bcs.n	800586c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800585a:	4b31      	ldr	r3, [pc, #196]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	492e      	ldr	r1, [pc, #184]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 8005868:	4313      	orrs	r3, r2
 800586a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	4b28      	ldr	r3, [pc, #160]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005884:	429a      	cmp	r2, r3
 8005886:	d208      	bcs.n	800589a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005888:	4b25      	ldr	r3, [pc, #148]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4922      	ldr	r1, [pc, #136]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 8005896:	4313      	orrs	r3, r2
 8005898:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d010      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69da      	ldr	r2, [r3, #28]
 80058aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d208      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	4917      	ldr	r1, [pc, #92]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058c8:	f000 f834 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	4912      	ldr	r1, [pc, #72]	@ (8005924 <HAL_RCC_ClockConfig+0x35c>)
 80058da:	5ccb      	ldrb	r3, [r1, r3]
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <HAL_RCC_ClockConfig+0x358>)
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005924 <HAL_RCC_ClockConfig+0x35c>)
 80058f0:	5cd3      	ldrb	r3, [r2, r3]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005928 <HAL_RCC_ClockConfig+0x360>)
 80058fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005900:	4a0a      	ldr	r2, [pc, #40]	@ (800592c <HAL_RCC_ClockConfig+0x364>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005906:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <HAL_RCC_ClockConfig+0x368>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fd f978 	bl	8002c00 <HAL_InitTick>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	58024400 	.word	0x58024400
 8005924:	080072a0 	.word	0x080072a0
 8005928:	24000068 	.word	0x24000068
 800592c:	24000064 	.word	0x24000064
 8005930:	2400006c 	.word	0x2400006c

08005934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005934:	b480      	push	{r7}
 8005936:	b089      	sub	sp, #36	@ 0x24
 8005938:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800593a:	4bb3      	ldr	r3, [pc, #716]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005942:	2b18      	cmp	r3, #24
 8005944:	f200 8155 	bhi.w	8005bf2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005948:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <HAL_RCC_GetSysClockFreq+0x1c>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	080059b5 	.word	0x080059b5
 8005954:	08005bf3 	.word	0x08005bf3
 8005958:	08005bf3 	.word	0x08005bf3
 800595c:	08005bf3 	.word	0x08005bf3
 8005960:	08005bf3 	.word	0x08005bf3
 8005964:	08005bf3 	.word	0x08005bf3
 8005968:	08005bf3 	.word	0x08005bf3
 800596c:	08005bf3 	.word	0x08005bf3
 8005970:	080059db 	.word	0x080059db
 8005974:	08005bf3 	.word	0x08005bf3
 8005978:	08005bf3 	.word	0x08005bf3
 800597c:	08005bf3 	.word	0x08005bf3
 8005980:	08005bf3 	.word	0x08005bf3
 8005984:	08005bf3 	.word	0x08005bf3
 8005988:	08005bf3 	.word	0x08005bf3
 800598c:	08005bf3 	.word	0x08005bf3
 8005990:	080059e1 	.word	0x080059e1
 8005994:	08005bf3 	.word	0x08005bf3
 8005998:	08005bf3 	.word	0x08005bf3
 800599c:	08005bf3 	.word	0x08005bf3
 80059a0:	08005bf3 	.word	0x08005bf3
 80059a4:	08005bf3 	.word	0x08005bf3
 80059a8:	08005bf3 	.word	0x08005bf3
 80059ac:	08005bf3 	.word	0x08005bf3
 80059b0:	080059e7 	.word	0x080059e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b4:	4b94      	ldr	r3, [pc, #592]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059c0:	4b91      	ldr	r3, [pc, #580]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	4a90      	ldr	r2, [pc, #576]	@ (8005c0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059d2:	e111      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059d4:	4b8d      	ldr	r3, [pc, #564]	@ (8005c0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059d6:	61bb      	str	r3, [r7, #24]
      break;
 80059d8:	e10e      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059da:	4b8d      	ldr	r3, [pc, #564]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059dc:	61bb      	str	r3, [r7, #24]
      break;
 80059de:	e10b      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059e2:	61bb      	str	r3, [r7, #24]
      break;
 80059e4:	e108      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059e6:	4b88      	ldr	r3, [pc, #544]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059f0:	4b85      	ldr	r3, [pc, #532]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059fc:	4b82      	ldr	r3, [pc, #520]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a06:	4b80      	ldr	r3, [pc, #512]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0a:	08db      	lsrs	r3, r3, #3
 8005a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80e1 	beq.w	8005bec <HAL_RCC_GetSysClockFreq+0x2b8>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	f000 8083 	beq.w	8005b38 <HAL_RCC_GetSysClockFreq+0x204>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f200 80a1 	bhi.w	8005b7c <HAL_RCC_GetSysClockFreq+0x248>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x114>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d056      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a46:	e099      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a48:	4b6f      	ldr	r3, [pc, #444]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02d      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a54:	4b6c      	ldr	r3, [pc, #432]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	08db      	lsrs	r3, r3, #3
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	4a6b      	ldr	r2, [pc, #428]	@ (8005c0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7e:	4b62      	ldr	r3, [pc, #392]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005aae:	e087      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac2:	4b51      	ldr	r3, [pc, #324]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ad6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005af2:	e065      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b06:	4b40      	ldr	r3, [pc, #256]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b36:	e043      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b7a:	e021      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ba2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bc0:	4b11      	ldr	r3, [pc, #68]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	0a5b      	lsrs	r3, r3, #9
 8005bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bca:	3301      	adds	r3, #1
 8005bcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be4:	ee17 3a90 	vmov	r3, s15
 8005be8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bea:	e005      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
      break;
 8005bf0:	e002      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bf4:	61bb      	str	r3, [r7, #24]
      break;
 8005bf6:	bf00      	nop
  }

  return sysclockfreq;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3724      	adds	r7, #36	@ 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	03d09000 	.word	0x03d09000
 8005c10:	003d0900 	.word	0x003d0900
 8005c14:	017d7840 	.word	0x017d7840
 8005c18:	46000000 	.word	0x46000000
 8005c1c:	4c742400 	.word	0x4c742400
 8005c20:	4a742400 	.word	0x4a742400
 8005c24:	4bbebc20 	.word	0x4bbebc20

08005c28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c2c:	b0c6      	sub	sp, #280	@ 0x118
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c4c:	2500      	movs	r5, #0
 8005c4e:	ea54 0305 	orrs.w	r3, r4, r5
 8005c52:	d049      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c5e:	d02f      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c64:	d828      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c6a:	d01a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c70:	d822      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7a:	d007      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c7c:	e01c      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7e:	4bab      	ldr	r3, [pc, #684]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	4aaa      	ldr	r2, [pc, #680]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c8a:	e01a      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	3308      	adds	r3, #8
 8005c92:	2102      	movs	r1, #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 f967 	bl	8006f68 <RCCEx_PLL2_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ca0:	e00f      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	3328      	adds	r3, #40	@ 0x28
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 fa0e 	bl	80070cc <RCCEx_PLL3_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cb6:	e004      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cca:	4b98      	ldr	r3, [pc, #608]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd8:	4a94      	ldr	r2, [pc, #592]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cde:	e003      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005cf4:	f04f 0900 	mov.w	r9, #0
 8005cf8:	ea58 0309 	orrs.w	r3, r8, r9
 8005cfc:	d047      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d82a      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d08:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d25 	.word	0x08005d25
 8005d14:	08005d33 	.word	0x08005d33
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005d67 	.word	0x08005d67
 8005d20:	08005d67 	.word	0x08005d67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d24:	4b81      	ldr	r3, [pc, #516]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	4a80      	ldr	r2, [pc, #512]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d30:	e01a      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	3308      	adds	r3, #8
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 f914 	bl	8006f68 <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d46:	e00f      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	3328      	adds	r3, #40	@ 0x28
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 f9bb 	bl	80070cc <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d5c:	e004      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d64:	e000      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d70:	4b6e      	ldr	r3, [pc, #440]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d74:	f023 0107 	bic.w	r1, r3, #7
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005d9a:	f04f 0b00 	mov.w	fp, #0
 8005d9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005da2:	d05b      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005db0:	d03b      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005db2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005db6:	d834      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005db8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dbc:	d037      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005dbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dc2:	d82e      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005dc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005dc8:	d033      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005dca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005dce:	d828      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dd4:	d01a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dda:	d822      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005de4:	d007      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005de6:	e01c      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de8:	4b50      	ldr	r3, [pc, #320]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	4a4f      	ldr	r2, [pc, #316]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df4:	e01e      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f8b2 	bl	8006f68 <RCCEx_PLL2_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e013      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	3328      	adds	r3, #40	@ 0x28
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 f959 	bl	80070cc <RCCEx_PLL3_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e28:	e004      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e40:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e4c:	4a37      	ldr	r2, [pc, #220]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d05d      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e84:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e88:	d03b      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e8a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e8e:	d834      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e94:	d037      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e9a:	d82e      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ea0:	d033      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005ea2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ea6:	d828      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eac:	d01a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eb2:	d822      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ebc:	d007      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ebe:	e01c      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	4a19      	ldr	r2, [pc, #100]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ecc:	e01e      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f846 	bl	8006f68 <RCCEx_PLL2_Config>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ee2:	e013      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	3328      	adds	r3, #40	@ 0x28
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 f8ed 	bl	80070cc <RCCEx_PLL3_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ef8:	e008      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f00:	e004      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f02:	bf00      	nop
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f14:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f18:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f24:	4a01      	ldr	r2, [pc, #4]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f26:	430b      	orrs	r3, r1
 8005f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f2a:	e005      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f4e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d03a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	2b30      	cmp	r3, #48	@ 0x30
 8005f60:	d01f      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f62:	2b30      	cmp	r3, #48	@ 0x30
 8005f64:	d819      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d00c      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d815      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d019      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d111      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f76:	4baa      	ldr	r3, [pc, #680]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4aa9      	ldr	r2, [pc, #676]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f82:	e011      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 ffeb 	bl	8006f68 <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f98:	e006      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fa0:	e002      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fbe:	4a98      	ldr	r2, [pc, #608]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005fda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fe4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d051      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ff8:	d035      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ffe:	d82e      	bhi.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006000:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006004:	d031      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006006:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800600a:	d828      	bhi.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800600c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006010:	d01a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006016:	d822      	bhi.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006020:	d007      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006022:	e01c      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006024:	4b7e      	ldr	r3, [pc, #504]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	4a7d      	ldr	r2, [pc, #500]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800602a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800602e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006030:	e01c      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006036:	3308      	adds	r3, #8
 8006038:	2100      	movs	r1, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f000 ff94 	bl	8006f68 <RCCEx_PLL2_Config>
 8006040:	4603      	mov	r3, r0
 8006042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006046:	e011      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604c:	3328      	adds	r3, #40	@ 0x28
 800604e:	2100      	movs	r1, #0
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f83b 	bl	80070cc <RCCEx_PLL3_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006064:	e002      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800606a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006074:	4b6a      	ldr	r3, [pc, #424]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006078:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006082:	4a67      	ldr	r2, [pc, #412]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6513      	str	r3, [r2, #80]	@ 0x50
 8006088:	e003      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800608e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800609e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d053      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060bc:	d033      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80060be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c2:	d82c      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060c8:	d02f      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80060ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060ce:	d826      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060d4:	d02b      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80060d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060da:	d820      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060e0:	d012      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80060e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060e6:	d81a      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d022      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f0:	d115      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	3308      	adds	r3, #8
 80060f8:	2101      	movs	r1, #1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 ff34 	bl	8006f68 <RCCEx_PLL2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006106:	e015      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	3328      	adds	r3, #40	@ 0x28
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 ffdb 	bl	80070cc <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800611c:	e00a      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800613c:	4b38      	ldr	r3, [pc, #224]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800613e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006140:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614a:	4a35      	ldr	r2, [pc, #212]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800614c:	430b      	orrs	r3, r1
 800614e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006150:	e003      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800616a:	2300      	movs	r3, #0
 800616c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006170:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006174:	460b      	mov	r3, r1
 8006176:	4313      	orrs	r3, r2
 8006178:	d058      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006186:	d033      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800618c:	d82c      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006192:	d02f      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006198:	d826      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800619a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800619e:	d02b      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80061a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061a4:	d820      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061aa:	d012      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80061ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b0:	d81a      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d022      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ba:	d115      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c0:	3308      	adds	r3, #8
 80061c2:	2101      	movs	r1, #1
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fecf 	bl	8006f68 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061d0:	e015      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d6:	3328      	adds	r3, #40	@ 0x28
 80061d8:	2101      	movs	r1, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 ff76 	bl	80070cc <RCCEx_PLL3_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061e6:	e00a      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061ee:	e006      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061f0:	bf00      	nop
 80061f2:	e004      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061f4:	bf00      	nop
 80061f6:	e002      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061f8:	bf00      	nop
 80061fa:	e000      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10e      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006206:	4b06      	ldr	r3, [pc, #24]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006212:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006216:	4a02      	ldr	r2, [pc, #8]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006218:	430b      	orrs	r3, r1
 800621a:	6593      	str	r3, [r2, #88]	@ 0x58
 800621c:	e006      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006228:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006242:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d037      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006256:	d00e      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800625c:	d816      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006266:	d111      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006268:	4bc4      	ldr	r3, [pc, #784]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	4ac3      	ldr	r2, [pc, #780]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006274:	e00f      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627a:	3308      	adds	r3, #8
 800627c:	2101      	movs	r1, #1
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fe72 	bl	8006f68 <RCCEx_PLL2_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800628a:	e004      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006292:	e000      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800629e:	4bb7      	ldr	r3, [pc, #732]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ac:	4ab3      	ldr	r2, [pc, #716]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80062c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d039      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d81c      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80062e6:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006329 	.word	0x08006329
 80062f0:	080062fd 	.word	0x080062fd
 80062f4:	0800630b 	.word	0x0800630b
 80062f8:	08006329 	.word	0x08006329
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4b9f      	ldr	r3, [pc, #636]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	4a9e      	ldr	r2, [pc, #632]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006308:	e00f      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630e:	3308      	adds	r3, #8
 8006310:	2102      	movs	r1, #2
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fe28 	bl	8006f68 <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800631e:	e004      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006332:	4b92      	ldr	r3, [pc, #584]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006336:	f023 0103 	bic.w	r1, r3, #3
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006340:	4a8e      	ldr	r2, [pc, #568]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006342:	430b      	orrs	r3, r1
 8006344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006346:	e003      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800634c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800635c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	f000 8099 	beq.w	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006372:	4b83      	ldr	r3, [pc, #524]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a82      	ldr	r2, [pc, #520]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800637c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800637e:	f7fc fc89 	bl	8002c94 <HAL_GetTick>
 8006382:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006386:	e00b      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006388:	f7fc fc84 	bl	8002c94 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b64      	cmp	r3, #100	@ 0x64
 8006396:	d903      	bls.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800639e:	e005      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a0:	4b77      	ldr	r3, [pc, #476]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0ed      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80063ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d173      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063b4:	4b71      	ldr	r3, [pc, #452]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063c0:	4053      	eors	r3, r2
 80063c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d015      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063ca:	4b6c      	ldr	r3, [pc, #432]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063d6:	4b69      	ldr	r3, [pc, #420]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	4a68      	ldr	r2, [pc, #416]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063e2:	4b66      	ldr	r3, [pc, #408]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e6:	4a65      	ldr	r2, [pc, #404]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063ee:	4a63      	ldr	r2, [pc, #396]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006402:	d118      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fc fc46 	bl	8002c94 <HAL_GetTick>
 8006408:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800640c:	e00d      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fc fc41 	bl	8002c94 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800641e:	429a      	cmp	r2, r3
 8006420:	d903      	bls.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006428:	e005      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800642a:	4b54      	ldr	r3, [pc, #336]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0eb      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800643a:	2b00      	cmp	r3, #0
 800643c:	d129      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800644a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644e:	d10e      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006450:	4b4a      	ldr	r3, [pc, #296]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006460:	091a      	lsrs	r2, r3, #4
 8006462:	4b48      	ldr	r3, [pc, #288]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006464:	4013      	ands	r3, r2
 8006466:	4a45      	ldr	r2, [pc, #276]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006468:	430b      	orrs	r3, r1
 800646a:	6113      	str	r3, [r2, #16]
 800646c:	e005      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800646e:	4b43      	ldr	r3, [pc, #268]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	4a42      	ldr	r2, [pc, #264]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006478:	6113      	str	r3, [r2, #16]
 800647a:	4b40      	ldr	r3, [pc, #256]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800647c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648a:	4a3c      	ldr	r2, [pc, #240]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006490:	e008      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800649a:	e003      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f002 0301 	and.w	r3, r2, #1
 80064b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064b4:	2300      	movs	r3, #0
 80064b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80064ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80064be:	460b      	mov	r3, r1
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f000 808f 	beq.w	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064cc:	2b28      	cmp	r3, #40	@ 0x28
 80064ce:	d871      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080065bd 	.word	0x080065bd
 80064dc:	080065b5 	.word	0x080065b5
 80064e0:	080065b5 	.word	0x080065b5
 80064e4:	080065b5 	.word	0x080065b5
 80064e8:	080065b5 	.word	0x080065b5
 80064ec:	080065b5 	.word	0x080065b5
 80064f0:	080065b5 	.word	0x080065b5
 80064f4:	080065b5 	.word	0x080065b5
 80064f8:	08006589 	.word	0x08006589
 80064fc:	080065b5 	.word	0x080065b5
 8006500:	080065b5 	.word	0x080065b5
 8006504:	080065b5 	.word	0x080065b5
 8006508:	080065b5 	.word	0x080065b5
 800650c:	080065b5 	.word	0x080065b5
 8006510:	080065b5 	.word	0x080065b5
 8006514:	080065b5 	.word	0x080065b5
 8006518:	0800659f 	.word	0x0800659f
 800651c:	080065b5 	.word	0x080065b5
 8006520:	080065b5 	.word	0x080065b5
 8006524:	080065b5 	.word	0x080065b5
 8006528:	080065b5 	.word	0x080065b5
 800652c:	080065b5 	.word	0x080065b5
 8006530:	080065b5 	.word	0x080065b5
 8006534:	080065b5 	.word	0x080065b5
 8006538:	080065bd 	.word	0x080065bd
 800653c:	080065b5 	.word	0x080065b5
 8006540:	080065b5 	.word	0x080065b5
 8006544:	080065b5 	.word	0x080065b5
 8006548:	080065b5 	.word	0x080065b5
 800654c:	080065b5 	.word	0x080065b5
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065b5 	.word	0x080065b5
 8006558:	080065bd 	.word	0x080065bd
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065b5 	.word	0x080065b5
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065b5 	.word	0x080065b5
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065b5 	.word	0x080065b5
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065bd 	.word	0x080065bd
 800657c:	58024400 	.word	0x58024400
 8006580:	58024800 	.word	0x58024800
 8006584:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	3308      	adds	r3, #8
 800658e:	2101      	movs	r1, #1
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fce9 	bl	8006f68 <RCCEx_PLL2_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800659c:	e00f      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	3328      	adds	r3, #40	@ 0x28
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fd90 	bl	80070cc <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065b2:	e004      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80065bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065c6:	4bbf      	ldr	r3, [pc, #764]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065d4:	4abb      	ldr	r2, [pc, #748]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065d6:	430b      	orrs	r3, r1
 80065d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80065da:	e003      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f002 0302 	and.w	r3, r2, #2
 80065f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065fe:	460b      	mov	r3, r1
 8006600:	4313      	orrs	r3, r2
 8006602:	d041      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800660a:	2b05      	cmp	r3, #5
 800660c:	d824      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800660e:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006661 	.word	0x08006661
 8006618:	0800662d 	.word	0x0800662d
 800661c:	08006643 	.word	0x08006643
 8006620:	08006661 	.word	0x08006661
 8006624:	08006661 	.word	0x08006661
 8006628:	08006661 	.word	0x08006661
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	3308      	adds	r3, #8
 8006632:	2101      	movs	r1, #1
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fc97 	bl	8006f68 <RCCEx_PLL2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006640:	e00f      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fd3e 	bl	80070cc <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006656:	e004      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800665e:	e000      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800666a:	4b96      	ldr	r3, [pc, #600]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800666c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666e:	f023 0107 	bic.w	r1, r3, #7
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006678:	4a92      	ldr	r2, [pc, #584]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6553      	str	r3, [r2, #84]	@ 0x54
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f002 0304 	and.w	r3, r2, #4
 8006694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800669e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d044      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d825      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80066b4:	a201      	add	r2, pc, #4	@ (adr r2, 80066bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	08006709 	.word	0x08006709
 80066c0:	080066d5 	.word	0x080066d5
 80066c4:	080066eb 	.word	0x080066eb
 80066c8:	08006709 	.word	0x08006709
 80066cc:	08006709 	.word	0x08006709
 80066d0:	08006709 	.word	0x08006709
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	3308      	adds	r3, #8
 80066da:	2101      	movs	r1, #1
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fc43 	bl	8006f68 <RCCEx_PLL2_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066e8:	e00f      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	3328      	adds	r3, #40	@ 0x28
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fcea 	bl	80070cc <RCCEx_PLL3_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006712:	4b6c      	ldr	r3, [pc, #432]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	f023 0107 	bic.w	r1, r3, #7
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006722:	4a68      	ldr	r2, [pc, #416]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6593      	str	r3, [r2, #88]	@ 0x58
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800672e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f002 0320 	and.w	r3, r2, #32
 800673e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006748:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800674c:	460b      	mov	r3, r1
 800674e:	4313      	orrs	r3, r2
 8006750:	d055      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800675a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800675e:	d033      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006764:	d82c      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676a:	d02f      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006770:	d826      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006776:	d02b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006778:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800677c:	d820      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800677e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006782:	d012      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006788:	d81a      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d022      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800678e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006792:	d115      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	3308      	adds	r3, #8
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbe3 	bl	8006f68 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067a8:	e015      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ae:	3328      	adds	r3, #40	@ 0x28
 80067b0:	2102      	movs	r1, #2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fc8a 	bl	80070cc <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067be:	e00a      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067c8:	bf00      	nop
 80067ca:	e004      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067cc:	bf00      	nop
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067de:	4b39      	ldr	r3, [pc, #228]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ee:	4a35      	ldr	r2, [pc, #212]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80067f4:	e003      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800680a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006814:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d058      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006826:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800682a:	d033      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800682c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006830:	d82c      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006836:	d02f      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683c:	d826      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800683e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006842:	d02b      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006844:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006848:	d820      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800684a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684e:	d012      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006854:	d81a      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d022      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685e:	d115      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	3308      	adds	r3, #8
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb7d 	bl	8006f68 <RCCEx_PLL2_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006874:	e015      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	3328      	adds	r3, #40	@ 0x28
 800687c:	2102      	movs	r1, #2
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fc24 	bl	80070cc <RCCEx_PLL3_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800688a:	e00a      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006892:	e006      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006894:	bf00      	nop
 8006896:	e004      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006898:	bf00      	nop
 800689a:	e002      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800689c:	bf00      	nop
 800689e:	e000      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10e      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068aa:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ba:	4a02      	ldr	r2, [pc, #8]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c0:	e006      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80068dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d055      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068fc:	d033      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80068fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006902:	d82c      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006908:	d02f      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800690a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800690e:	d826      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006910:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006914:	d02b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006916:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800691a:	d820      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800691c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006920:	d012      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006926:	d81a      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d022      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006930:	d115      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006936:	3308      	adds	r3, #8
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fb14 	bl	8006f68 <RCCEx_PLL2_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006946:	e015      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	3328      	adds	r3, #40	@ 0x28
 800694e:	2102      	movs	r1, #2
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fbbb 	bl	80070cc <RCCEx_PLL3_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800695c:	e00a      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006964:	e006      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006966:	bf00      	nop
 8006968:	e004      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800696a:	bf00      	nop
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800697c:	4ba0      	ldr	r3, [pc, #640]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800697e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006980:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800698c:	4a9c      	ldr	r2, [pc, #624]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800698e:	430b      	orrs	r3, r1
 8006990:	6593      	str	r3, [r2, #88]	@ 0x58
 8006992:	e003      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f002 0308 	and.w	r3, r2, #8
 80069a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d01e      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	3328      	adds	r3, #40	@ 0x28
 80069d0:	2102      	movs	r1, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fb7a 	bl	80070cc <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80069e4:	4b86      	ldr	r3, [pc, #536]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f4:	4a82      	ldr	r2, [pc, #520]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f6:	430b      	orrs	r3, r1
 80069f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f002 0310 	and.w	r3, r2, #16
 8006a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a10:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d01e      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a26:	d10c      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	3328      	adds	r3, #40	@ 0x28
 8006a2e:	2102      	movs	r1, #2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb4b 	bl	80070cc <RCCEx_PLL3_Config>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a42:	4b6f      	ldr	r3, [pc, #444]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a52:	4a6b      	ldr	r2, [pc, #428]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a66:	2300      	movs	r3, #0
 8006a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	d03e      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a80:	d022      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a86:	d81b      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a90:	d00b      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006a92:	e015      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	3308      	adds	r3, #8
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fa63 	bl	8006f68 <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006aa8:	e00f      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aae:	3328      	adds	r3, #40	@ 0x28
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fb0a 	bl	80070cc <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ae2:	4a47      	ldr	r2, [pc, #284]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae8:	e003      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b00:	2300      	movs	r3, #0
 8006b02:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d03b      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b1a:	d01f      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b20:	d818      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b26:	d003      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b2c:	d007      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b2e:	e011      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b30:	4b33      	ldr	r3, [pc, #204]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	4a32      	ldr	r2, [pc, #200]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b3c:	e00f      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b42:	3328      	adds	r3, #40	@ 0x28
 8006b44:	2101      	movs	r1, #1
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fac0 	bl	80070cc <RCCEx_PLL3_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b52:	e004      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b5a:	e000      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b66:	4b26      	ldr	r3, [pc, #152]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b76:	4a22      	ldr	r2, [pc, #136]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b7c:	e003      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b94:	2300      	movs	r3, #0
 8006b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b98:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	d034      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bb0:	d007      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006bb2:	e011      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb4:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb8:	4a11      	ldr	r2, [pc, #68]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bc0:	e00e      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	2102      	movs	r1, #2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f9cc 	bl	8006f68 <RCCEx_PLL2_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bd6:	e003      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10d      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf6:	4a02      	ldr	r2, [pc, #8]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bfc:	e006      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006bfe:	bf00      	nop
 8006c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c1e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c22:	460b      	mov	r3, r1
 8006c24:	4313      	orrs	r3, r2
 8006c26:	d00c      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	3328      	adds	r3, #40	@ 0x28
 8006c2e:	2102      	movs	r1, #2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fa4b 	bl	80070cc <RCCEx_PLL3_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c50:	2300      	movs	r3, #0
 8006c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c54:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d036      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c68:	d018      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c6e:	d811      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c74:	d014      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c7a:	d80b      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d011      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c84:	d106      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c86:	4bb7      	ldr	r3, [pc, #732]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	4ab6      	ldr	r2, [pc, #728]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c92:	e008      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cae:	4bad      	ldr	r3, [pc, #692]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cbc:	4aa9      	ldr	r2, [pc, #676]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006cd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cda:	2300      	movs	r3, #0
 8006cdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ce8:	4b9e      	ldr	r3, [pc, #632]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf6:	4a9b      	ldr	r2, [pc, #620]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d12:	460b      	mov	r3, r1
 8006d14:	4313      	orrs	r3, r2
 8006d16:	d009      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d18:	4b92      	ldr	r3, [pc, #584]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d26:	4a8f      	ldr	r2, [pc, #572]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d48:	4b86      	ldr	r3, [pc, #536]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	4a85      	ldr	r2, [pc, #532]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d52:	6113      	str	r3, [r2, #16]
 8006d54:	4b83      	ldr	r3, [pc, #524]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d56:	6919      	ldr	r1, [r3, #16]
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d60:	4a80      	ldr	r2, [pc, #512]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d82:	4b78      	ldr	r3, [pc, #480]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d90:	4a74      	ldr	r2, [pc, #464]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d92:	430b      	orrs	r3, r1
 8006d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006da4:	2300      	movs	r3, #0
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006dac:	460b      	mov	r3, r1
 8006dae:	4313      	orrs	r3, r2
 8006db0:	d00a      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006db2:	4b6c      	ldr	r3, [pc, #432]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc2:	4a68      	ldr	r2, [pc, #416]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d011      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	3308      	adds	r3, #8
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f8bb 	bl	8006f68 <RCCEx_PLL2_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	2100      	movs	r1, #0
 8006e12:	6239      	str	r1, [r7, #32]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4313      	orrs	r3, r2
 8006e22:	d011      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	3308      	adds	r3, #8
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 f89b 	bl	8006f68 <RCCEx_PLL2_Config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	2100      	movs	r1, #0
 8006e52:	61b9      	str	r1, [r7, #24]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4313      	orrs	r3, r2
 8006e62:	d011      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	3308      	adds	r3, #8
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f87b 	bl	8006f68 <RCCEx_PLL2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	2100      	movs	r1, #0
 8006e92:	6139      	str	r1, [r7, #16]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	d011      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	3328      	adds	r3, #40	@ 0x28
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f90d 	bl	80070cc <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d011      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee8:	3328      	adds	r3, #40	@ 0x28
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f8ed 	bl	80070cc <RCCEx_PLL3_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	2100      	movs	r1, #0
 8006f12:	6039      	str	r1, [r7, #0]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	607b      	str	r3, [r7, #4]
 8006f1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	d011      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f28:	3328      	adds	r3, #40	@ 0x28
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 f8cd 	bl	80070cc <RCCEx_PLL3_Config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006f48:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f62:	bf00      	nop
 8006f64:	58024400 	.word	0x58024400

08006f68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f76:	4b53      	ldr	r3, [pc, #332]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d101      	bne.n	8006f86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e099      	b.n	80070ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f86:	4b4f      	ldr	r3, [pc, #316]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f92:	f7fb fe7f 	bl	8002c94 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f9a:	f7fb fe7b 	bl	8002c94 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e086      	b.n	80070ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fac:	4b45      	ldr	r3, [pc, #276]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fb8:	4b42      	ldr	r3, [pc, #264]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	493f      	ldr	r1, [pc, #252]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	025b      	lsls	r3, r3, #9
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	061b      	lsls	r3, r3, #24
 8006ff8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ffc:	4931      	ldr	r1, [pc, #196]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007002:	4b30      	ldr	r3, [pc, #192]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	492d      	ldr	r1, [pc, #180]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007014:	4b2b      	ldr	r3, [pc, #172]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	f023 0220 	bic.w	r2, r3, #32
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	4928      	ldr	r1, [pc, #160]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007026:	4b27      	ldr	r3, [pc, #156]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	4a26      	ldr	r2, [pc, #152]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007032:	4b24      	ldr	r3, [pc, #144]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007036:	4b24      	ldr	r3, [pc, #144]	@ (80070c8 <RCCEx_PLL2_Config+0x160>)
 8007038:	4013      	ands	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	69d2      	ldr	r2, [r2, #28]
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	4920      	ldr	r1, [pc, #128]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007042:	4313      	orrs	r3, r2
 8007044:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007046:	4b1f      	ldr	r3, [pc, #124]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	4a1e      	ldr	r2, [pc, #120]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007058:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705c:	4a19      	ldr	r2, [pc, #100]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800705e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007064:	e00f      	b.n	8007086 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800706c:	4b15      	ldr	r3, [pc, #84]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4a14      	ldr	r2, [pc, #80]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007078:	e005      	b.n	8007086 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800707a:	4b12      	ldr	r3, [pc, #72]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4a11      	ldr	r2, [pc, #68]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007084:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007086:	4b0f      	ldr	r3, [pc, #60]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a0e      	ldr	r2, [pc, #56]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fb fdff 	bl	8002c94 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800709a:	f7fb fdfb 	bl	8002c94 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ac:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
 80070c8:	ffff0007 	.word	0xffff0007

080070cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070da:	4b53      	ldr	r3, [pc, #332]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d101      	bne.n	80070ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e099      	b.n	800721e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a4e      	ldr	r2, [pc, #312]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f6:	f7fb fdcd 	bl	8002c94 <HAL_GetTick>
 80070fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070fc:	e008      	b.n	8007110 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070fe:	f7fb fdc9 	bl	8002c94 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e086      	b.n	800721e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007110:	4b45      	ldr	r3, [pc, #276]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f0      	bne.n	80070fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800711c:	4b42      	ldr	r3, [pc, #264]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	051b      	lsls	r3, r3, #20
 800712a:	493f      	ldr	r1, [pc, #252]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 800712c:	4313      	orrs	r3, r2
 800712e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	3b01      	subs	r3, #1
 8007136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	3b01      	subs	r3, #1
 8007140:	025b      	lsls	r3, r3, #9
 8007142:	b29b      	uxth	r3, r3
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	3b01      	subs	r3, #1
 800715a:	061b      	lsls	r3, r3, #24
 800715c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007160:	4931      	ldr	r1, [pc, #196]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007162:	4313      	orrs	r3, r2
 8007164:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007166:	4b30      	ldr	r3, [pc, #192]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	492d      	ldr	r1, [pc, #180]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007174:	4313      	orrs	r3, r2
 8007176:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007178:	4b2b      	ldr	r3, [pc, #172]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	4928      	ldr	r1, [pc, #160]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007186:	4313      	orrs	r3, r2
 8007188:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800718a:	4b27      	ldr	r3, [pc, #156]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	4a26      	ldr	r2, [pc, #152]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007194:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007196:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800719a:	4b24      	ldr	r3, [pc, #144]	@ (800722c <RCCEx_PLL3_Config+0x160>)
 800719c:	4013      	ands	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	69d2      	ldr	r2, [r2, #28]
 80071a2:	00d2      	lsls	r2, r2, #3
 80071a4:	4920      	ldr	r1, [pc, #128]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	4a19      	ldr	r2, [pc, #100]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071c8:	e00f      	b.n	80071ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071d0:	4b15      	ldr	r3, [pc, #84]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	4a14      	ldr	r2, [pc, #80]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071dc:	e005      	b.n	80071ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071de:	4b12      	ldr	r3, [pc, #72]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	4a11      	ldr	r2, [pc, #68]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f6:	f7fb fd4d 	bl	8002c94 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071fc:	e008      	b.n	8007210 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071fe:	f7fb fd49 	bl	8002c94 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	58024400 	.word	0x58024400
 800722c:	ffff0007 	.word	0xffff0007

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <__libc_init_array>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4d0d      	ldr	r5, [pc, #52]	@ (8007278 <__libc_init_array+0x38>)
 8007244:	4c0d      	ldr	r4, [pc, #52]	@ (800727c <__libc_init_array+0x3c>)
 8007246:	1b64      	subs	r4, r4, r5
 8007248:	10a4      	asrs	r4, r4, #2
 800724a:	2600      	movs	r6, #0
 800724c:	42a6      	cmp	r6, r4
 800724e:	d109      	bne.n	8007264 <__libc_init_array+0x24>
 8007250:	4d0b      	ldr	r5, [pc, #44]	@ (8007280 <__libc_init_array+0x40>)
 8007252:	4c0c      	ldr	r4, [pc, #48]	@ (8007284 <__libc_init_array+0x44>)
 8007254:	f000 f818 	bl	8007288 <_init>
 8007258:	1b64      	subs	r4, r4, r5
 800725a:	10a4      	asrs	r4, r4, #2
 800725c:	2600      	movs	r6, #0
 800725e:	42a6      	cmp	r6, r4
 8007260:	d105      	bne.n	800726e <__libc_init_array+0x2e>
 8007262:	bd70      	pop	{r4, r5, r6, pc}
 8007264:	f855 3b04 	ldr.w	r3, [r5], #4
 8007268:	4798      	blx	r3
 800726a:	3601      	adds	r6, #1
 800726c:	e7ee      	b.n	800724c <__libc_init_array+0xc>
 800726e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007272:	4798      	blx	r3
 8007274:	3601      	adds	r6, #1
 8007276:	e7f2      	b.n	800725e <__libc_init_array+0x1e>
 8007278:	080072b0 	.word	0x080072b0
 800727c:	080072b0 	.word	0x080072b0
 8007280:	080072b0 	.word	0x080072b0
 8007284:	080072b4 	.word	0x080072b4

08007288 <_init>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	bf00      	nop
 800728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728e:	bc08      	pop	{r3}
 8007290:	469e      	mov	lr, r3
 8007292:	4770      	bx	lr

08007294 <_fini>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	bf00      	nop
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr
