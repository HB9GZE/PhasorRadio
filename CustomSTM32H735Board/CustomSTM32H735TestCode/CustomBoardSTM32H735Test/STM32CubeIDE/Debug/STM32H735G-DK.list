
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ad20  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cd4  0802aff0  0802aff0  0002bff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802fcc4  0802fcc4  00030cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802fe6c  0802fe6c  00030e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000e  0802fe84  0802fe84  00030e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000002  0802fe92  0802fe92  00030e92  2**0
                  ALLOC
  7 .ARM          00000008  0802fe94  0802fe94  00030e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0802fe9c  0802fe9c  00056220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  0802fe9c  0802fe9c  00030e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802feb4  0802feb4  00030eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  24000000  0802febc  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00016750  24000110  0802ffcc  00031110  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  24016860  0802ffcc  00031860  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00056220  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00024220  90000000  90000000  00032000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 BufferSection 0017e800  70000000  70000000  00032000  2**2
                  ALLOC
 17 .debug_info   000d996c  00000000  00000000  0005624e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000185f8  00000000  00000000  0012fbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003a90  00000000  00000000  001481b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003e18  00000000  00000000  0014bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0006f4f1  00000000  00000000  0014fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0007df4b  00000000  00000000  001bef51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0018ded6  00000000  00000000  0023ce9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000105  00000000  00000000  003cad72  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ae50  00000000  00000000  003cae78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loclists 00037cee  00000000  00000000  003d5cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000a8  00000000  00000000  0040d9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000110 	.word	0x24000110
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802afd8 	.word	0x0802afd8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000114 	.word	0x24000114
 800030c:	0802afd8 	.word	0x0802afd8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	@ (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f009 bc8e 	b.w	800a04c <vTaskSetApplicationTaskTag>
 8000730:	080019c1 	.word	0x080019c1

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	@ 0x64
 8000738:	f007 ff59 	bl	80085ee <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <SystemClock_Config>:
{
 8000740:	b510      	push	{r4, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	224c      	movs	r2, #76	@ 0x4c
 8000746:	2100      	movs	r1, #0
 8000748:	a809      	add	r0, sp, #36	@ 0x24
 800074a:	f029 fcb1 	bl	802a0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	a801      	add	r0, sp, #4
 8000754:	f029 fcac 	bl	802a0b0 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000758:	2004      	movs	r0, #4
 800075a:	f006 faa7 	bl	8006cac <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <SystemClock_Config+0x90>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800076a:	619a      	str	r2, [r3, #24]
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	0491      	lsls	r1, r2, #18
 800077a:	d5fc      	bpl.n	8000776 <SystemClock_Config+0x36>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000784:	212c      	movs	r1, #44	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000788:	941b      	str	r4, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078a:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000794:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000796:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 800079c:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a0:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f006 fac0 	bl	8006d28 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2103      	movs	r1, #3
 80007aa:	233f      	movs	r3, #63	@ 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ac:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ae:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c6:	f006 fdcb 	bl	8007360 <HAL_RCC_ClockConfig>
}
 80007ca:	b01c      	add	sp, #112	@ 0x70
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	58024800 	.word	0x58024800

080007d4 <PeriphCommonClock_Config>:
{
 80007d4:	b500      	push	{lr}
 80007d6:	b0af      	sub	sp, #188	@ 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d8:	2100      	movs	r1, #0
 80007da:	2298      	movs	r2, #152	@ 0x98
 80007dc:	a808      	add	r0, sp, #32
 80007de:	f029 fc67 	bl	802a0b0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80007e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007e6:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80007ea:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80007ee:	2205      	movs	r2, #5
 80007f0:	2350      	movs	r3, #80	@ 0x50
 80007f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007f6:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007fc:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000802:	2320      	movs	r3, #32
 8000804:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000806:	f007 f831 	bl	800786c <HAL_RCCEx_PeriphCLKConfig>
}
 800080a:	b02f      	add	sp, #188	@ 0xbc
 800080c:	f85d fb04 	ldr.w	pc, [sp], #4

08000810 <main>:
{
 8000810:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000814:	b0a1      	sub	sp, #132	@ 0x84

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000816:	2210      	movs	r2, #16
 8000818:	2100      	movs	r1, #0
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800081a:	f04f 5410 	mov.w	r4, #603979776	@ 0x24000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800081e:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000820:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000822:	f029 fc45 	bl	802a0b0 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000826:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 8000828:	f004 fbba 	bl	8004fa0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800082c:	4bd6      	ldr	r3, [pc, #856]	@ (8000b88 <main+0x378>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082e:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000830:	f8ad 504c 	strh.w	r5, [sp, #76]	@ 0x4c

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000834:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000836:	e9cd 4314 	strd	r4, r3, [sp, #80]	@ 0x50
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800083a:	4bd4      	ldr	r3, [pc, #848]	@ (8000b8c <main+0x37c>)
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800083c:	2400      	movs	r4, #0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800083e:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000840:	f004 fbcc 	bl	8004fdc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000844:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000848:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800084a:	f88d 4057 	strb.w	r4, [sp, #87]	@ 0x57
  MPU_InitStruct.BaseAddress = 0x70000000;
 800084e:	9314      	str	r3, [sp, #80]	@ 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000850:	f8ad 405a 	strh.w	r4, [sp, #90]	@ 0x5a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000854:	f88d 504d 	strb.w	r5, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000858:	f88d 7054 	strb.w	r7, [sp, #84]	@ 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085c:	f004 fbbe 	bl	8004fdc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000860:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000862:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000864:	f88d 6057 	strb.w	r6, [sp, #87]	@ 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000868:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800086c:	2316      	movs	r3, #22
 800086e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000872:	f240 1301 	movw	r3, #257	@ 0x101
 8000876:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800087a:	f004 fbaf 	bl	8004fdc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 800087e:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000882:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000884:	f88d 4057 	strb.w	r4, [sp, #87]	@ 0x57
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000888:	9314      	str	r3, [sp, #80]	@ 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800088a:	f8ad 405a 	strh.w	r4, [sp, #90]	@ 0x5a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800088e:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000890:	f88d 604d 	strb.w	r6, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000894:	f88d 7054 	strb.w	r7, [sp, #84]	@ 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000898:	f004 fba0 	bl	8004fdc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800089c:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800089e:	a813      	add	r0, sp, #76	@ 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80008a0:	f88d 404d 	strb.w	r4, [sp, #77]	@ 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80008a4:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008a8:	f88d 6057 	strb.w	r6, [sp, #87]	@ 0x57
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008ac:	f88d 505a 	strb.w	r5, [sp, #90]	@ 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008b0:	f004 fb94 	bl	8004fdc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008b4:	4620      	mov	r0, r4
 80008b6:	f004 fb81 	bl	8004fbc <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ba:	4bb5      	ldr	r3, [pc, #724]	@ (8000b90 <main+0x380>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 80008c2:	d111      	bne.n	80008e8 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008cc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008de:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008e8:	4aa9      	ldr	r2, [pc, #676]	@ (8000b90 <main+0x380>)
 80008ea:	6953      	ldr	r3, [r2, #20]
 80008ec:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008f0:	d123      	bne.n	800093a <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008fa:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fe:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000902:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000906:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800090a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800090c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000910:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000912:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000916:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000918:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 800091c:	d2f9      	bcs.n	8000912 <main+0x102>
    } while(sets-- != 0U);
 800091e:	3b20      	subs	r3, #32
 8000920:	f113 0f20 	cmn.w	r3, #32
 8000924:	d1f2      	bne.n	800090c <main+0xfc>
 8000926:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800092a:	6953      	ldr	r3, [r2, #20]
 800092c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000936:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800093a:	f004 fa8d 	bl	8004e58 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000940:	f7ff fefe 	bl	8000740 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000946:	f7ff ff45 	bl	80007d4 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	2214      	movs	r2, #20
 800094c:	2100      	movs	r1, #0
 800094e:	a813      	add	r0, sp, #76	@ 0x4c
 8000950:	f029 fbae 	bl	802a0b0 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b8f      	ldr	r3, [pc, #572]	@ (8000b94 <main+0x384>)
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000956:	f248 0108 	movw	r1, #32776	@ 0x8008
 800095a:	488f      	ldr	r0, [pc, #572]	@ (8000b98 <main+0x388>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = RENDER_TIME_Pin;
 8000964:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000968:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	f042 0202 	orr.w	r2, r2, #2
  hltdc.Instance = LTDC;
 8000970:	4d8a      	ldr	r5, [pc, #552]	@ (8000b9c <main+0x38c>)
  pLayerCfg.FBStartAdress = 0x70000000;
 8000972:	f04f 0a05 	mov.w	sl, #5
  hospi1.Init.FifoThreshold = 4;
 8000976:	f04f 0b04 	mov.w	fp, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800097e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000982:	f002 0202 	and.w	r2, r2, #2
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800098e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000992:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000996:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800099a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800099e:	9201      	str	r2, [sp, #4]
 80009a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009a6:	f042 0208 	orr.w	r2, r2, #8
 80009aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009b2:	f002 0208 	and.w	r2, r2, #8
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009be:	f042 0201 	orr.w	r2, r2, #1
 80009c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009ca:	f002 0201 	and.w	r2, r2, #1
 80009ce:	9203      	str	r2, [sp, #12]
 80009d0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009d6:	f042 0210 	orr.w	r2, r2, #16
 80009da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009e2:	f002 0210 	and.w	r2, r2, #16
 80009e6:	9204      	str	r2, [sp, #16]
 80009e8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009fa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80009fe:	9205      	str	r2, [sp, #20]
 8000a00:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a06:	f042 0204 	orr.w	r2, r2, #4
 8000a0a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a12:	f002 0204 	and.w	r2, r2, #4
 8000a16:	9206      	str	r2, [sp, #24]
 8000a18:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a1e:	f042 0220 	orr.w	r2, r2, #32
 8000a22:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	9307      	str	r3, [sp, #28]
 8000a32:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a34:	f004 fda6 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000a3e:	4858      	ldr	r0, [pc, #352]	@ (8000ba0 <main+0x390>)
 8000a40:	f004 fda0 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a4a:	4856      	ldr	r0, [pc, #344]	@ (8000ba4 <main+0x394>)
 8000a4c:	f004 fd9a 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	4854      	ldr	r0, [pc, #336]	@ (8000ba8 <main+0x398>)
 8000a56:	f004 fd95 	bl	8005584 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a913      	add	r1, sp, #76	@ 0x4c
 8000a60:	484d      	ldr	r0, [pc, #308]	@ (8000b98 <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f004 fc0d 	bl	8005288 <HAL_GPIO_Init>
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	a913      	add	r1, sp, #76	@ 0x4c
 8000a70:	4849      	ldr	r0, [pc, #292]	@ (8000b98 <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	e9cd 9613 	strd	r9, r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f004 fc04 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8000a80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	a913      	add	r1, sp, #76	@ 0x4c
 8000a86:	4846      	ldr	r0, [pc, #280]	@ (8000ba0 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	e9cd 4815 	strd	r4, r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f004 fbfa 	bl	8005288 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a94:	a913      	add	r1, sp, #76	@ 0x4c
 8000a96:	4843      	ldr	r0, [pc, #268]	@ (8000ba4 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	e9cd 7613 	strd	r7, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f004 fbf2 	bl	8005288 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	a913      	add	r1, sp, #76	@ 0x4c
 8000aa6:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	e9cd 4815 	strd	r4, r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f004 fbea 	bl	8005288 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000ab4:	483d      	ldr	r0, [pc, #244]	@ (8000bac <main+0x39c>)
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb0 <main+0x3a0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ab8:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000aba:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000abc:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000abe:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ac2:	f004 fab7 	bl	8005034 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ac6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  hdma2d.Instance = DMA2D;
 8000aca:	483a      	ldr	r0, [pc, #232]	@ (8000bb4 <main+0x3a4>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000acc:	4a3a      	ldr	r2, [pc, #232]	@ (8000bb8 <main+0x3a8>)
  hdma2d.Init.OutputOffset = 0;
 8000ace:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ad2:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad6:	f004 fb0e 	bl	80050f6 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ada:	2234      	movs	r2, #52	@ 0x34
 8000adc:	4621      	mov	r1, r4
 8000ade:	a813      	add	r0, sp, #76	@ 0x4c
 8000ae0:	f029 fae6 	bl	802a0b0 <memset>
  hltdc.Instance = LTDC;
 8000ae4:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <main+0x3ac>)
  hltdc.Init.VerticalSync = 9;
 8000ae6:	2128      	movs	r1, #40	@ 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000ae8:	2035      	movs	r0, #53	@ 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000aea:	f240 2c15 	movw	ip, #533	@ 0x215
  hltdc.Init.TotalHeigh = 285;
 8000aee:	f240 2e35 	movw	lr, #565	@ 0x235
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000af2:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8000af4:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000af6:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000afa:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000afe:	2309      	movs	r3, #9
 8000b00:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000b04:	230b      	movs	r3, #11
 8000b06:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000b0a:	f240 131b 	movw	r3, #283	@ 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b0e:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000b10:	e9c5 c309 	strd	ip, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 285;
 8000b14:	f240 131d 	movw	r3, #285	@ 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b18:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000b1c:	e9c5 e30b 	strd	lr, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b20:	f005 f970 	bl	8005e04 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000b24:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY1 = 272;
 8000b26:	f44f 7388 	mov.w	r3, #272	@ 0x110
  pLayerCfg.WindowX1 = 480;
 8000b2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b2e:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b30:	971a      	str	r7, [sp, #104]	@ 0x68
  pLayerCfg.WindowX0 = 0;
 8000b32:	9413      	str	r4, [sp, #76]	@ 0x4c
  hospi1.Init.ChipSelectHighTime = 2;
 8000b34:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 8000b36:	f8ad 407c 	strh.w	r4, [sp, #124]	@ 0x7c
  pLayerCfg.Backcolor.Red = 0;
 8000b3a:	f88d 407e 	strb.w	r4, [sp, #126]	@ 0x7e
  hospi1.Instance = OCTOSPI1;
 8000b3e:	4d20      	ldr	r5, [pc, #128]	@ (8000bc0 <main+0x3b0>)
  pLayerCfg.Alpha0 = 0;
 8000b40:	e9cd 1418 	strd	r1, r4, [sp, #96]	@ 0x60
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b44:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8000b48:	e9cd a11b 	strd	sl, r1, [sp, #108]	@ 0x6c
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b4c:	f04f 0a18 	mov.w	sl, #24
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b50:	a913      	add	r1, sp, #76	@ 0x4c
  pLayerCfg.ImageHeight = 272;
 8000b52:	e9cd 231d 	strd	r2, r3, [sp, #116]	@ 0x74
  pLayerCfg.WindowY0 = 0;
 8000b56:	e9cd 2414 	strd	r2, r4, [sp, #80]	@ 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b5a:	4622      	mov	r2, r4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b5c:	e9cd 3616 	strd	r3, r6, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b60:	f005 fa1b 	bl	8005f9a <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b64:	4621      	mov	r1, r4
 8000b66:	4652      	mov	r2, sl
 8000b68:	a813      	add	r0, sp, #76	@ 0x4c
 8000b6a:	f029 faa1 	bl	802a0b0 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <main+0x3b4>)
  hospi1.Init.DeviceSize = 32;
 8000b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b74:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b76:	60ac      	str	r4, [r5, #8]
  hospi1.Init.Refresh = 0;
 8000b78:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hospi1.Init.FifoThreshold = 4;
 8000b7a:	e9c5 3b00 	strd	r3, fp, [r5]
  hospi1.Init.DeviceSize = 32;
 8000b7e:	2320      	movs	r3, #32
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b80:	e9c5 7405 	strd	r7, r4, [r5, #20]
 8000b84:	e020      	b.n	8000bc8 <main+0x3b8>
 8000b86:	bf00      	nop
 8000b88:	03000012 	.word	0x03000012
 8000b8c:	01010001 	.word	0x01010001
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	58024400 	.word	0x58024400
 8000b98:	58021800 	.word	0x58021800
 8000b9c:	240001f0 	.word	0x240001f0
 8000ba0:	58020400 	.word	0x58020400
 8000ba4:	58020c00 	.word	0x58020c00
 8000ba8:	58020000 	.word	0x58020000
 8000bac:	24000300 	.word	0x24000300
 8000bb0:	58024c00 	.word	0x58024c00
 8000bb4:	24000298 	.word	0x24000298
 8000bb8:	52001000 	.word	0x52001000
 8000bbc:	50001000 	.word	0x50001000
 8000bc0:	24000194 	.word	0x24000194
 8000bc4:	52005000 	.word	0x52005000
  hospi1.Init.DeviceSize = 32;
 8000bc8:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000bcc:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000bd0:	e9c5 7409 	strd	r7, r4, [r5, #36]	@ 0x24
  hospi1.Init.ChipSelectBoundary = 0;
 8000bd4:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hospi1.Init.MaxTran = 0;
 8000bd8:	e9c5 940d 	strd	r9, r4, [r5, #52]	@ 0x34
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000bdc:	f005 fb6a 	bl	80062b4 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000be0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000be8:	a913      	add	r1, sp, #76	@ 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000bea:	9316      	str	r3, [sp, #88]	@ 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bec:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bf0:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 1;
 8000bf2:	9615      	str	r6, [sp, #84]	@ 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bf4:	9317      	str	r3, [sp, #92]	@ 0x5c
  sOspiManagerCfg.DQSPort = 1;
 8000bf6:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bfa:	f005 fde7 	bl	80067cc <HAL_OSPIM_Config>
  HAL_OSPI_DeInit(&hospi1);
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f005 fbcc 	bl	800639c <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000c04:	f240 1301 	movw	r3, #257	@ 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000c08:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000c0a:	4d43      	ldr	r5, [pc, #268]	@ (8000d18 <main+0x508>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000c0c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000c10:	f003 fd7e 	bl	8004710 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000c14:	a90e      	add	r1, sp, #56	@ 0x38
 8000c16:	4620      	mov	r0, r4
 8000c18:	f003 fe6c 	bl	80048f4 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f003 fd3f 	bl	80046a0 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c22:	4652      	mov	r2, sl
 8000c24:	4621      	mov	r1, r4
 8000c26:	a813      	add	r0, sp, #76	@ 0x4c
 8000c28:	f029 fa42 	bl	802a0b0 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	4621      	mov	r1, r4
 8000c30:	a80a      	add	r0, sp, #40	@ 0x28
 8000c32:	f029 fa3d 	bl	802a0b0 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000c36:	2214      	movs	r2, #20
 8000c38:	4621      	mov	r1, r4
 8000c3a:	a80e      	add	r0, sp, #56	@ 0x38
 8000c3c:	f029 fa38 	bl	802a0b0 <memset>
  hospi2.Instance = OCTOSPI2;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <main+0x50c>)
  hospi2.Init.ChipSelectBoundary = 23;
 8000c42:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c46:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c48:	60ac      	str	r4, [r5, #8]
  hospi2.Init.FifoThreshold = 4;
 8000c4a:	e9c5 3b00 	strd	r3, fp, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000c4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  hospi2.Init.DeviceSize = 24;
 8000c52:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000c56:	2317      	movs	r3, #23
 8000c58:	e9c5 130b 	strd	r1, r3, [r5, #44]	@ 0x2c
  hospi2.Init.Refresh = 400;
 8000c5c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000c60:	e9cd 4408 	strd	r4, r4, [sp, #32]
  hospi2.Init.Refresh = 400;
 8000c64:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c66:	e9c5 b405 	strd	fp, r4, [r5, #20]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c6a:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c6e:	e9c5 7409 	strd	r7, r4, [r5, #36]	@ 0x24
  hospi2.Init.MaxTran = 0;
 8000c72:	e9c5 440d 	strd	r4, r4, [r5, #52]	@ 0x34
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c76:	f005 fb1d 	bl	80062b4 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <main+0x510>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c80:	a913      	add	r1, sp, #76	@ 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c82:	9316      	str	r3, [sp, #88]	@ 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c84:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c88:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000c8a:	9715      	str	r7, [sp, #84]	@ 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c8c:	9317      	str	r3, [sp, #92]	@ 0x5c
  sOspiManagerCfg.DQSPort = 2;
 8000c8e:	e9cd 7713 	strd	r7, r7, [sp, #76]	@ 0x4c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c92:	f005 fd9b 	bl	80067cc <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000c96:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c9c:	a90a      	add	r1, sp, #40	@ 0x28
 8000c9e:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000ca0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000ca4:	960d      	str	r6, [sp, #52]	@ 0x34
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000ca6:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000caa:	f005 fbd9 	bl	8006460 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000cae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cb6:	a90e      	add	r1, sp, #56	@ 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000cb8:	9310      	str	r3, [sp, #64]	@ 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000cba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cbe:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000cc0:	940e      	str	r4, [sp, #56]	@ 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000cc2:	9312      	str	r3, [sp, #72]	@ 0x48
  sCommand.Address      = 0;
 8000cc4:	940f      	str	r4, [sp, #60]	@ 0x3c
  sCommand.NbData       = 1;
 8000cc6:	9611      	str	r6, [sp, #68]	@ 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cc8:	f005 fbf0 	bl	80064ac <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000ccc:	a908      	add	r1, sp, #32
 8000cce:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000cd0:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000cd2:	f005 fd0b 	bl	80066ec <HAL_OSPI_MemoryMapped>
  MX_LIBJPEG_Init();
 8000cd6:	f000 fbf3 	bl	80014c0 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8000cda:	f000 fc1d 	bl	8001518 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000cde:	f000 fc1a 	bl	8001516 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000ce2:	f007 fc11 	bl	8008508 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <main+0x514>)
 8000ce8:	4621      	mov	r1, r4
 8000cea:	480f      	ldr	r0, [pc, #60]	@ (8000d28 <main+0x518>)
 8000cec:	f007 fc38 	bl	8008560 <osThreadNew>
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <main+0x51c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <main+0x520>)
 8000cf4:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf6:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000cf8:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <main+0x524>)
 8000cfa:	f007 fc31 	bl	8008560 <osThreadNew>
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <main+0x528>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d00:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <main+0x52c>)
 8000d02:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d04:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <main+0x530>)
 8000d08:	f007 fc2a 	bl	8008560 <osThreadNew>
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <main+0x534>)
 8000d0e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d10:	f007 fc0c 	bl	800852c <osKernelStart>
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <main+0x504>
 8000d16:	bf00      	nop
 8000d18:	24000138 	.word	0x24000138
 8000d1c:	5200a000 	.word	0x5200a000
 8000d20:	00010002 	.word	0x00010002
 8000d24:	0802b09c 	.word	0x0802b09c
 8000d28:	08000735 	.word	0x08000735
 8000d2c:	24000134 	.word	0x24000134
 8000d30:	0802b078 	.word	0x0802b078
 8000d34:	08001527 	.word	0x08001527
 8000d38:	24000130 	.word	0x24000130
 8000d3c:	0802b054 	.word	0x0802b054
 8000d40:	08002f6d 	.word	0x08002f6d
 8000d44:	2400012c 	.word	0x2400012c

08000d48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d48:	6802      	ldr	r2, [r0, #0]
 8000d4a:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d101      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000d50:	f004 b8b0 	b.w	8004eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40001000 	.word	0x40001000

08000d5c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d5c:	4770      	bx	lr
	...

08000d60 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_MspInit+0x2c>)
{
 8000d62:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d64:	210f      	movs	r1, #15
 8000d66:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d6e:	f042 0202 	orr.w	r2, r2, #2
 8000d72:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d86:	f004 b8cb 	b.w	8004f20 <HAL_NVIC_SetPriority>
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000d90:	6802      	ldr	r2, [r0, #0]
{
 8000d92:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_CRC_MspInit+0x2c>)
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d10d      	bne.n	8000db6 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000d9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000da2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000da6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000db6:	b002      	add	sp, #8
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	58024c00 	.word	0x58024c00

08000dc0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_DMA2D_MspInit+0x40>)
{
 8000dc2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000dc4:	6802      	ldr	r2, [r0, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d117      	bne.n	8000dfa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dcc:	2105      	movs	r1, #5
 8000dce:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dd0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000dd4:	f042 0210 	orr.w	r2, r2, #16
 8000dd8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ddc:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dea:	f004 f899 	bl	8004f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dee:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000df0:	b003      	add	sp, #12
 8000df2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000df6:	f004 b8c5 	b.w	8004f84 <HAL_NVIC_EnableIRQ>
}
 8000dfa:	b003      	add	sp, #12
 8000dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e00:	52001000 	.word	0x52001000
 8000e04:	58024400 	.word	0x58024400

08000e08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0c:	b0bc      	sub	sp, #240	@ 0xf0
 8000e0e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	2214      	movs	r2, #20
 8000e12:	2100      	movs	r1, #0
 8000e14:	a809      	add	r0, sp, #36	@ 0x24
 8000e16:	f029 f94b 	bl	802a0b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1a:	22b8      	movs	r2, #184	@ 0xb8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	a80e      	add	r0, sp, #56	@ 0x38
 8000e20:	f029 f946 	bl	802a0b0 <memset>
  if(hltdc->Instance==LTDC)
 8000e24:	6822      	ldr	r2, [r4, #0]
 8000e26:	4b77      	ldr	r3, [pc, #476]	@ (8001004 <HAL_LTDC_MspInit+0x1fc>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 80e7 	bne.w	8000ffc <HAL_LTDC_MspInit+0x1f4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e2e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e32:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	a80e      	add	r0, sp, #56	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e36:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000e3a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000e3e:	2219      	movs	r2, #25
 8000e40:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e44:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e46:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000e4a:	231e      	movs	r3, #30
 8000e4c:	931c      	str	r3, [sp, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000e4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e52:	931e      	str	r3, [sp, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e54:	f006 fd0a 	bl	800786c <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	b108      	cbz	r0, 8000e5e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000e5a:	f7ff ff7f 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001008 <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e66:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e6a:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	a909      	add	r1, sp, #36	@ 0x24
 8000e6e:	4867      	ldr	r0, [pc, #412]	@ (800100c <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e70:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000e74:	f04f 0858 	mov.w	r8, #88	@ 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e78:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8000e7c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8000e80:	f002 0208 	and.w	r2, r2, #8
 8000e84:	9201      	str	r2, [sp, #4]
 8000e86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e8c:	f042 0202 	orr.w	r2, r2, #2
 8000e90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e98:	f002 0202 	and.w	r2, r2, #2
 8000e9c:	9202      	str	r2, [sp, #8]
 8000e9e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ea4:	f042 0208 	orr.w	r2, r2, #8
 8000ea8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000eac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000eb0:	f002 0208 	and.w	r2, r2, #8
 8000eb4:	9203      	str	r2, [sp, #12]
 8000eb6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ebc:	f042 0210 	orr.w	r2, r2, #16
 8000ec0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ec8:	f002 0210 	and.w	r2, r2, #16
 8000ecc:	9204      	str	r2, [sp, #16]
 8000ece:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ed4:	f042 0201 	orr.w	r2, r2, #1
 8000ed8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ee0:	f002 0201 	and.w	r2, r2, #1
 8000ee4:	9205      	str	r2, [sp, #20]
 8000ee6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ef0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ef8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000efc:	9206      	str	r2, [sp, #24]
 8000efe:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f10:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f14:	9207      	str	r2, [sp, #28]
 8000f16:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f1c:	f042 0204 	orr.w	r2, r2, #4
 8000f20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f28:	970d      	str	r7, [sp, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	9308      	str	r3, [sp, #32]
 8000f30:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	f240 3303 	movw	r3, #771	@ 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f004 f9a3 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8000f42:	2349      	movs	r3, #73	@ 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	a909      	add	r1, sp, #36	@ 0x24
 8000f46:	4832      	ldr	r0, [pc, #200]	@ (8001010 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f48:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f004 f999 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000f56:	f64b 0303 	movw	r3, #47107	@ 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5a:	a909      	add	r1, sp, #36	@ 0x24
 8000f5c:	482d      	ldr	r0, [pc, #180]	@ (8001014 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f004 f98e 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	a909      	add	r1, sp, #36	@ 0x24
 8000f72:	4829      	ldr	r0, [pc, #164]	@ (8001018 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000f78:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000f7e:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f004 f982 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000f84:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f88:	a909      	add	r1, sp, #36	@ 0x24
 8000f8a:	4824      	ldr	r0, [pc, #144]	@ (800101c <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f8c:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	f004 f977 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8000f9a:	f648 7308 	movw	r3, #36616	@ 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9e:	a909      	add	r1, sp, #36	@ 0x24
 8000fa0:	481f      	ldr	r0, [pc, #124]	@ (8001020 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa2:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fac:	f004 f96c 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fb0:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	a909      	add	r1, sp, #36	@ 0x24
 8000fb4:	481b      	ldr	r0, [pc, #108]	@ (8001024 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb6:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f004 f962 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	a909      	add	r1, sp, #36	@ 0x24
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc8:	970d      	str	r7, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	e9cd 8609 	strd	r8, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f004 f959 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fd6:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fd8:	a909      	add	r1, sp, #36	@ 0x24
 8000fda:	4811      	ldr	r0, [pc, #68]	@ (8001020 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe0:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe6:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fe8:	f004 f94e 	bl	8005288 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000fec:	4640      	mov	r0, r8
 8000fee:	4622      	mov	r2, r4
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	f003 ff95 	bl	8004f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	f003 ffc4 	bl	8004f84 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000ffc:	b03c      	add	sp, #240	@ 0xf0
 8000ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001002:	bf00      	nop
 8001004:	50001000 	.word	0x50001000
 8001008:	58024400 	.word	0x58024400
 800100c:	58020400 	.word	0x58020400
 8001010:	58020c00 	.word	0x58020c00
 8001014:	58021000 	.word	0x58021000
 8001018:	58020000 	.word	0x58020000
 800101c:	58021800 	.word	0x58021800
 8001020:	58021c00 	.word	0x58021c00
 8001024:	58020800 	.word	0x58020800

08001028 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800102c:	b091      	sub	sp, #68	@ 0x44
 800102e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2214      	movs	r2, #20
 8001032:	2100      	movs	r1, #0
 8001034:	a80b      	add	r0, sp, #44	@ 0x2c
 8001036:	f029 f83b 	bl	802a0b0 <memset>
  if(hospi->Instance==OCTOSPI1)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	4a88      	ldr	r2, [pc, #544]	@ (8001260 <HAL_OSPI_MspInit+0x238>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 80b0 	bne.w	80011a4 <HAL_OSPI_MspInit+0x17c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001044:	4a87      	ldr	r2, [pc, #540]	@ (8001264 <HAL_OSPI_MspInit+0x23c>)
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800104a:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800104c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800104e:	d10c      	bne.n	800106a <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001050:	4b85      	ldr	r3, [pc, #532]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
 8001052:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001056:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800105a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800105e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800106a:	4b7f      	ldr	r3, [pc, #508]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800106e:	2403      	movs	r4, #3
 8001070:	2709      	movs	r7, #9
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001072:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001076:	a90b      	add	r1, sp, #44	@ 0x2c
 8001078:	487c      	ldr	r0, [pc, #496]	@ (800126c <HAL_OSPI_MspInit+0x244>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2600      	movs	r6, #0
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800107c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001080:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001084:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001088:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800108c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001090:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001094:	9201      	str	r2, [sp, #4]
 8001096:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001098:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800109c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010a8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80010ac:	9202      	str	r2, [sp, #8]
 80010ae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010b4:	f042 0208 	orr.w	r2, r2, #8
 80010b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010c0:	f002 0208 	and.w	r2, r2, #8
 80010c4:	9203      	str	r2, [sp, #12]
 80010c6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010cc:	f042 0210 	orr.w	r2, r2, #16
 80010d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010d8:	f002 0210 	and.w	r2, r2, #16
 80010dc:	9204      	str	r2, [sp, #16]
 80010de:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010f0:	f002 0220 	and.w	r2, r2, #32
 80010f4:	9205      	str	r2, [sp, #20]
 80010f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010fc:	f042 0202 	orr.w	r2, r2, #2
 8001100:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	9306      	str	r3, [sp, #24]
 800110e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001118:	e9cd 470e 	strd	r4, r7, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111c:	f004 f8b4 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8001120:	23b0      	movs	r3, #176	@ 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	a90b      	add	r1, sp, #44	@ 0x2c
 8001124:	4852      	ldr	r0, [pc, #328]	@ (8001270 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001126:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f004 f8a9 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001136:	a90b      	add	r1, sp, #44	@ 0x2c
 8001138:	484e      	ldr	r0, [pc, #312]	@ (8001274 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800113a:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f004 f8a0 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001148:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800114a:	a90b      	add	r1, sp, #44	@ 0x2c
 800114c:	4847      	ldr	r0, [pc, #284]	@ (800126c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800114e:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	f004 f895 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 800115e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	a90b      	add	r1, sp, #44	@ 0x2c
 8001164:	4842      	ldr	r0, [pc, #264]	@ (8001270 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001166:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f004 f88a 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001178:	a90b      	add	r1, sp, #44	@ 0x2c
 800117a:	483f      	ldr	r0, [pc, #252]	@ (8001278 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800117c:	970f      	str	r7, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001186:	f004 f87f 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	a90b      	add	r1, sp, #44	@ 0x2c
 800118c:	483b      	ldr	r0, [pc, #236]	@ (800127c <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800118e:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119a:	f004 f875 	bl	8005288 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800119e:	b011      	add	sp, #68	@ 0x44
 80011a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 80011a4:	4a36      	ldr	r2, [pc, #216]	@ (8001280 <HAL_OSPI_MspInit+0x258>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d1f9      	bne.n	800119e <HAL_OSPI_MspInit+0x176>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80011aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001264 <HAL_OSPI_MspInit+0x23c>)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80011b0:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80011b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80011b4:	d10c      	bne.n	80011d0 <HAL_OSPI_MspInit+0x1a8>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80011b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
 80011b8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80011bc:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80011c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80011c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011cc:	9307      	str	r3, [sp, #28]
 80011ce:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <HAL_OSPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80011d2:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80011d6:	2609      	movs	r6, #9
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011dc:	a90b      	add	r1, sp, #44	@ 0x2c
 80011de:	4823      	ldr	r0, [pc, #140]	@ (800126c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2700      	movs	r7, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011e2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80011e6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80011ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80011ee:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80011f2:	9208      	str	r2, [sp, #32]
 80011f4:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80011fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001202:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001206:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800120a:	9209      	str	r2, [sp, #36]	@ 0x24
 800120c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001212:	f042 0220 	orr.w	r2, r2, #32
 8001216:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	930a      	str	r3, [sp, #40]	@ 0x28
 8001224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	f640 0303 	movw	r3, #2051	@ 0x803
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800122a:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001232:	f004 f829 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001236:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123a:	a90b      	add	r1, sp, #44	@ 0x2c
 800123c:	480b      	ldr	r0, [pc, #44]	@ (800126c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800123e:	940f      	str	r4, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001248:	f004 f81e 	bl	8005288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800124c:	f241 031f 	movw	r3, #4127	@ 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	a90b      	add	r1, sp, #44	@ 0x2c
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001254:	960f      	str	r6, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	e9cd 350b 	strd	r3, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125e:	e79c      	b.n	800119a <HAL_OSPI_MspInit+0x172>
 8001260:	52005000 	.word	0x52005000
 8001264:	24000324 	.word	0x24000324
 8001268:	58024400 	.word	0x58024400
 800126c:	58021800 	.word	0x58021800
 8001270:	58020c00 	.word	0x58020c00
 8001274:	58021000 	.word	0x58021000
 8001278:	58021400 	.word	0x58021400
 800127c:	58020400 	.word	0x58020400
 8001280:	5200a000 	.word	0x5200a000

08001284 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8001284:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <HAL_OSPI_MspDeInit+0xa0>)
{
 8001286:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	4293      	cmp	r3, r2
 800128c:	d12a      	bne.n	80012e4 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <HAL_OSPI_MspDeInit+0xa4>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	3a01      	subs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001296:	4b25      	ldr	r3, [pc, #148]	@ (800132c <HAL_OSPI_MspDeInit+0xa8>)
 8001298:	b92a      	cbnz	r2, 80012a6 <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800129a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800129e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80012a2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80012aa:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80012ae:	4820      	ldr	r0, [pc, #128]	@ (8001330 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80012b8:	f004 f8c8 	bl	800544c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 80012bc:	f643 01b0 	movw	r1, #14512	@ 0x38b0
 80012c0:	481c      	ldr	r0, [pc, #112]	@ (8001334 <HAL_OSPI_MspDeInit+0xb0>)
 80012c2:	f004 f8c3 	bl	800544c <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	481b      	ldr	r0, [pc, #108]	@ (8001338 <HAL_OSPI_MspDeInit+0xb4>)
 80012ca:	f004 f8bf 	bl	800544c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 80012ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d2:	481a      	ldr	r0, [pc, #104]	@ (800133c <HAL_OSPI_MspDeInit+0xb8>)
 80012d4:	f004 f8ba 	bl	800544c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	4819      	ldr	r0, [pc, #100]	@ (8001340 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 80012dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80012e0:	f004 b8b4 	b.w	800544c <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_OSPI_MspDeInit+0xc0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d11a      	bne.n	8001320 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_OSPI_MspDeInit+0xa4>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	3a01      	subs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_OSPI_MspDeInit+0xa8>)
 80012f4:	b92a      	cbnz	r2, 8001302 <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80012f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80012fa:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80012fe:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001302:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001306:	f641 4103 	movw	r1, #7171	@ 0x1c03
 800130a:	4809      	ldr	r0, [pc, #36]	@ (8001330 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 800130c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001310:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001314:	f004 f89a 	bl	800544c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001318:	f241 011f 	movw	r1, #4127	@ 0x101f
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <HAL_OSPI_MspDeInit+0xb8>)
 800131e:	e7dd      	b.n	80012dc <HAL_OSPI_MspDeInit+0x58>
}
 8001320:	bd08      	pop	{r3, pc}
 8001322:	bf00      	nop
 8001324:	52005000 	.word	0x52005000
 8001328:	24000324 	.word	0x24000324
 800132c:	58024400 	.word	0x58024400
 8001330:	58021800 	.word	0x58021800
 8001334:	58020c00 	.word	0x58020c00
 8001338:	58021000 	.word	0x58021000
 800133c:	58021400 	.word	0x58021400
 8001340:	58020400 	.word	0x58020400
 8001344:	5200a000 	.word	0x5200a000

08001348 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001348:	280f      	cmp	r0, #15
{
 800134a:	b510      	push	{r4, lr}
 800134c:	4604      	mov	r4, r0
 800134e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001350:	d902      	bls.n	8001358 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001352:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001354:	b00a      	add	sp, #40	@ 0x28
 8001356:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001358:	4601      	mov	r1, r0
 800135a:	2200      	movs	r2, #0
 800135c:	2036      	movs	r0, #54	@ 0x36
 800135e:	f003 fddf 	bl	8004f20 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001362:	2036      	movs	r0, #54	@ 0x36
 8001364:	f003 fe0e 	bl	8004f84 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136a:	4669      	mov	r1, sp
 800136c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800136e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_InitTick+0x88>)
 8001372:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800137e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138a:	f006 f955 	bl	8007638 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800138e:	9b07      	ldr	r3, [sp, #28]
 8001390:	b9c3      	cbnz	r3, 80013c4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001392:	f006 f92d 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001396:	4c0f      	ldr	r4, [pc, #60]	@ (80013d4 <HAL_InitTick+0x8c>)
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <HAL_InitTick+0x90>)
 800139a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800139c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80013a0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_InitTick+0x94>)
 80013a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80013aa:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ac:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013ae:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80013b0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013b4:	f007 f868 	bl	8008488 <HAL_TIM_Base_Init>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1ca      	bne.n	8001352 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80013bc:	4620      	mov	r0, r4
 80013be:	f006 ff05 	bl	80081cc <HAL_TIM_Base_Start_IT>
 80013c2:	e7c7      	b.n	8001354 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c4:	f006 f914 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 80013c8:	0040      	lsls	r0, r0, #1
 80013ca:	e7e4      	b.n	8001396 <HAL_InitTick+0x4e>
 80013cc:	24000048 	.word	0x24000048
 80013d0:	58024400 	.word	0x58024400
 80013d4:	24000328 	.word	0x24000328
 80013d8:	40001000 	.word	0x40001000
 80013dc:	000f4240 	.word	0x000f4240

080013e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e0:	4770      	bx	lr

080013e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler>

080013e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler>

080013e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler>

080013e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler>

080013ea <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80013ea:	4770      	bx	lr

080013ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013ec:	4801      	ldr	r0, [pc, #4]	@ (80013f4 <TIM6_DAC_IRQHandler+0x8>)
 80013ee:	f006 bf37 	b.w	8008260 <HAL_TIM_IRQHandler>
 80013f2:	bf00      	nop
 80013f4:	24000328 	.word	0x24000328

080013f8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013f8:	4801      	ldr	r0, [pc, #4]	@ (8001400 <LTDC_IRQHandler+0x8>)
 80013fa:	f004 bd71 	b.w	8005ee0 <HAL_LTDC_IRQHandler>
 80013fe:	bf00      	nop
 8001400:	240001f0 	.word	0x240001f0

08001404 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001404:	4801      	ldr	r0, [pc, #4]	@ (800140c <DMA2D_IRQHandler+0x8>)
 8001406:	f003 beb5 	b.w	8005174 <HAL_DMA2D_IRQHandler>
 800140a:	bf00      	nop
 800140c:	24000298 	.word	0x24000298

08001410 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001410:	2001      	movs	r0, #1
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001416:	f028 ff55 	bl	802a2c4 <__errno>
 800141a:	2316      	movs	r3, #22
 800141c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800141e:	f04f 30ff 	mov.w	r0, #4294967295
 8001422:	bd08      	pop	{r3, pc}

08001424 <_exit>:

void _exit (int status)
{
 8001424:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001426:	f028 ff4d 	bl	802a2c4 <__errno>
 800142a:	2316      	movs	r3, #22
 800142c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800142e:	e7fe      	b.n	800142e <_exit+0xa>

08001430 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	460d      	mov	r5, r1
 8001434:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	460e      	mov	r6, r1
 8001438:	1b73      	subs	r3, r6, r5
 800143a:	429c      	cmp	r4, r3
 800143c:	dc01      	bgt.n	8001442 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800143e:	4620      	mov	r0, r4
 8001440:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001442:	f3af 8000 	nop.w
 8001446:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	e7f5      	b.n	8001438 <_read+0x8>

0800144c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	460d      	mov	r5, r1
 8001450:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	460e      	mov	r6, r1
 8001454:	1b73      	subs	r3, r6, r5
 8001456:	429c      	cmp	r4, r3
 8001458:	dc01      	bgt.n	800145e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800145a:	4620      	mov	r0, r4
 800145c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800145e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001462:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	e7f5      	b.n	8001454 <_write+0x8>

08001468 <_close>:

int _close(int file)
{
	return -1;
}
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001472:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001474:	604b      	str	r3, [r1, #4]
}
 8001476:	4770      	bx	lr

08001478 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001478:	2001      	movs	r0, #1
 800147a:	4770      	bx	lr

0800147c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800147c:	2000      	movs	r0, #0
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <_sbrk+0x30>)
{
 8001482:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001484:	6811      	ldr	r1, [r2, #0]
{
 8001486:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001488:	b909      	cbnz	r1, 800148e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800148a:	490a      	ldr	r1, [pc, #40]	@ (80014b4 <_sbrk+0x34>)
 800148c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	4909      	ldr	r1, [pc, #36]	@ (80014b8 <_sbrk+0x38>)
 8001492:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <_sbrk+0x3c>)
 8001494:	4403      	add	r3, r0
 8001496:	1b09      	subs	r1, r1, r4
 8001498:	428b      	cmp	r3, r1
 800149a:	d906      	bls.n	80014aa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800149c:	f028 ff12 	bl	802a2c4 <__errno>
 80014a0:	230c      	movs	r3, #12
 80014a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014a8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80014aa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80014ac:	e7fc      	b.n	80014a8 <_sbrk+0x28>
 80014ae:	bf00      	nop
 80014b0:	24000374 	.word	0x24000374
 80014b4:	24016860 	.word	0x24016860
 80014b8:	24050000 	.word	0x24050000
 80014bc:	00001000 	.word	0x00001000

080014c0 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80014c0:	4770      	bx	lr
	...

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014fc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014c8:	f003 fc70 	bl	8004dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d8:	480a      	ldr	r0, [pc, #40]	@ (8001504 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
  ldr  r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80014ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f028 feed 	bl	802a2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff f98b 	bl	8000810 <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001500:	0802febc 	.word	0x0802febc
  ldr  r0, =_sdata
 8001504:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001508:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 800150c:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 8001510:	24016860 	.word	0x24016860

08001514 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC3_IRQHandler>

08001516 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001516:	4770      	bx	lr

08001518 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001518:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800151a:	f001 f8f7 	bl	800270c <touchgfx_components_init>
    touchgfx_init();
}
 800151e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001522:	f001 b87b 	b.w	800261c <touchgfx_init>

08001526 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001526:	f001 b8f3 	b.w	8002710 <touchgfx_taskEntry>

0800152a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800152a:	6840      	ldr	r0, [r0, #4]
    }
 800152c:	4770      	bx	lr

0800152e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800152e:	6041      	str	r1, [r0, #4]
    }
 8001530:	4770      	bx	lr
	...

08001534 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001534:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001538:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 800153c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001540:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001546:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001548:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 800154c:	430a      	orrs	r2, r1
 800154e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	4770      	bx	lr
 800155c:	e0001000 	.word	0xe0001000
 8001560:	c5acce55 	.word	0xc5acce55

08001564 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001564:	1a52      	subs	r2, r2, r1
 8001566:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800156a:	fbb2 f0f3 	udiv	r0, r2, r3
 800156e:	4770      	bx	lr

08001570 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001570:	4b01      	ldr	r3, [pc, #4]	@ (8001578 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001572:	6858      	ldr	r0, [r3, #4]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e0001000 	.word	0xe0001000

0800157c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 800157c:	4770      	bx	lr

0800157e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800157e:	b510      	push	{r4, lr}
 8001580:	4604      	mov	r4, r0
 8001582:	210c      	movs	r1, #12
 8001584:	f027 ff62 	bl	802944c <_ZdlPvj>
 8001588:	4620      	mov	r0, r4
 800158a:	bd10      	pop	{r4, pc}

0800158c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800158c:	6803      	ldr	r3, [r0, #0]
{
 800158e:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001590:	691b      	ldr	r3, [r3, #16]
{
 8001592:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001594:	b131      	cbz	r1, 80015a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001596:	4798      	blx	r3
 8001598:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800159a:	6863      	ldr	r3, [r4, #4]
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	4403      	add	r3, r0
 80015a0:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80015a2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80015a4:	4798      	blx	r3
 80015a6:	60a0      	str	r0, [r4, #8]
}
 80015a8:	e7fb      	b.n	80015a2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080015aa <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80015aa:	4770      	bx	lr

080015ac <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80015ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 80015ae:	2308      	movs	r3, #8
 80015b0:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 80015b2:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 80015b4:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <_ZN20STM32TouchController4initEv+0x24>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <_ZN20STM32TouchController4initEv+0x28>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 80015c4:	f003 fb10 	bl	8004be8 <BSP_TS_Init>
}
 80015c8:	b005      	add	sp, #20
 80015ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ce:	bf00      	nop
 80015d0:	24015c42 	.word	0x24015c42
 80015d4:	24015c44 	.word	0x24015c44

080015d8 <_ZN20STM32TouchControllerD0Ev>:
 80015d8:	b510      	push	{r4, lr}
 80015da:	4604      	mov	r4, r0
 80015dc:	2104      	movs	r1, #4
 80015de:	f027 ff35 	bl	802944c <_ZdlPvj>
 80015e2:	4620      	mov	r0, r4
 80015e4:	bd10      	pop	{r4, pc}

080015e6 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80015e6:	b530      	push	{r4, r5, lr}
 80015e8:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 80015ea:	2000      	movs	r0, #0
{
 80015ec:	460d      	mov	r5, r1
 80015ee:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80015f0:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 80015f2:	9003      	str	r0, [sp, #12]
 80015f4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80015f8:	f003 fb78 	bl	8004cec <BSP_TS_GetState>
 80015fc:	b140      	cbz	r0, 8001610 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001602:	f383 8811 	msr	BASEPRI, r3
 8001606:	f3bf 8f6f 	isb	sy
 800160a:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800160e:	e7fe      	b.n	800160e <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001610:	9801      	ldr	r0, [sp, #4]
 8001612:	b120      	cbz	r0, 800161e <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001614:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001616:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001618:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800161a:	9b03      	ldr	r3, [sp, #12]
 800161c:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 800161e:	b005      	add	sp, #20
 8001620:	bd30      	pop	{r4, r5, pc}
	...

08001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001624:	2803      	cmp	r0, #3
 8001626:	d825      	bhi.n	8001674 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001628:	e8df f000 	tbb	[pc, r0]
 800162c:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001632:	2101      	movs	r1, #1
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800163e:	f003 bfa1 	b.w	8005584 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001644:	2108      	movs	r1, #8
 8001646:	480e      	ldr	r0, [pc, #56]	@ (8001680 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	0952      	lsrs	r2, r2, #5
 8001650:	e7f5      	b.n	800163e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	fab2 f282 	clz	r2, r2
 800165e:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001660:	4808      	ldr	r0, [pc, #32]	@ (8001684 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 8001662:	e7ec      	b.n	800163e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	fab2 f282 	clz	r2, r2
 8001670:	0952      	lsrs	r2, r2, #5
 8001672:	e7f5      	b.n	8001660 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	24000378 	.word	0x24000378
 800167c:	58020000 	.word	0x58020000
 8001680:	58021800 	.word	0x58021800
 8001684:	58020400 	.word	0x58020400

08001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001688:	2803      	cmp	r0, #3
 800168a:	d825      	bhi.n	80016d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 800168c:	e8df f000 	tbb	[pc, r0]
 8001690:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001696:	2101      	movs	r1, #1
 8001698:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	3a00      	subs	r2, #0
 800169e:	bf18      	it	ne
 80016a0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80016a2:	f003 bf6f 	b.w	8005584 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80016a8:	2108      	movs	r1, #8
 80016aa:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	3a00      	subs	r2, #0
 80016b0:	bf18      	it	ne
 80016b2:	2201      	movne	r2, #1
 80016b4:	e7f5      	b.n	80016a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80016b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	3a00      	subs	r2, #0
 80016c0:	bf18      	it	ne
 80016c2:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80016c4:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 80016c6:	e7ec      	b.n	80016a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80016ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	3a00      	subs	r2, #0
 80016d2:	bf18      	it	ne
 80016d4:	2201      	movne	r2, #1
 80016d6:	e7f5      	b.n	80016c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	24000378 	.word	0x24000378
 80016e0:	58020000 	.word	0x58020000
 80016e4:	58021800 	.word	0x58021800
 80016e8:	58020400 	.word	0x58020400

080016ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80016ec:	2803      	cmp	r0, #3
 80016ee:	d811      	bhi.n	8001714 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80016f0:	e8df f000 	tbb	[pc, r0]
 80016f4:	0d090602 	.word	0x0d090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80016f8:	2101      	movs	r1, #1
 80016fa:	4807      	ldr	r0, [pc, #28]	@ (8001718 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80016fc:	f003 bf47 	b.w	800558e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001700:	2108      	movs	r1, #8
 8001702:	4806      	ldr	r0, [pc, #24]	@ (800171c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001704:	e7fa      	b.n	80016fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
 800170c:	e7f6      	b.n	80016fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800170e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001712:	e7fa      	b.n	800170a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	58020000 	.word	0x58020000
 800171c:	58021800 	.word	0x58021800
 8001720:	58020400 	.word	0x58020400

08001724 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001724:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001726:	2803      	cmp	r0, #3
 8001728:	d815      	bhi.n	8001756 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 800172a:	e8df f000 	tbb	[pc, r0]
 800172e:	0a02      	.short	0x0a02
 8001730:	110d      	.short	0x110d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001732:	2101      	movs	r1, #1
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001736:	f003 ff1f 	bl	8005578 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800173a:	1e43      	subs	r3, r0, #1
 800173c:	4258      	negs	r0, r3
 800173e:	4158      	adcs	r0, r3
 8001740:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001742:	2108      	movs	r1, #8
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001746:	e7f6      	b.n	8001736 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x40>)
 800174e:	e7f2      	b.n	8001736 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001754:	e7fa      	b.n	800174c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x28>
    switch (id)
 8001756:	2000      	movs	r0, #0
 8001758:	e7ef      	b.n	800173a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 800175a:	bf00      	nop
 800175c:	58020000 	.word	0x58020000
 8001760:	58021800 	.word	0x58021800
 8001764:	58020400 	.word	0x58020400

08001768 <_ZN8touchgfx4GPIO4initEv>:
{
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4d08      	ldr	r5, [pc, #32]	@ (800178c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800176c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800176e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001770:	b2e0      	uxtb	r0, r4
 8001772:	f7ff ffd7 	bl	8001724 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001776:	b118      	cbz	r0, 8001780 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800177c:	bf18      	it	ne
 800177e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001780:	3401      	adds	r4, #1
 8001782:	3504      	adds	r5, #4
 8001784:	2c05      	cmp	r4, #5
 8001786:	d1f3      	bne.n	8001770 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001788:	bd70      	pop	{r4, r5, r6, pc}
 800178a:	bf00      	nop
 800178c:	24000378 	.word	0x24000378

08001790 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001790:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001792:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001796:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800179a:	4770      	bx	lr

0800179c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800179c:	2000      	movs	r0, #0
 800179e:	4770      	bx	lr

080017a0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80017a0:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80017a2:	3900      	subs	r1, #0
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80017a6:	bf18      	it	ne
 80017a8:	2101      	movne	r1, #1
 80017aa:	7019      	strb	r1, [r3, #0]
    }
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	24015c47 	.word	0x24015c47

080017b4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80017b4:	2000      	movs	r0, #0
 80017b6:	4770      	bx	lr

080017b8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80017b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80017ba:	b10b      	cbz	r3, 80017c0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80017bc:	4608      	mov	r0, r1
 80017be:	4718      	bx	r3
        }
    }
 80017c0:	4770      	bx	lr

080017c2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80017c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017c6:	4770      	bx	lr

080017c8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80017c8:	6840      	ldr	r0, [r0, #4]
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4718      	bx	r3

080017d0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80017d0:	4770      	bx	lr
	...

080017d4 <_ZN11TouchGFXHAL10initializeEv>:
uint32_t animationBuffer[(480 * 272 * 3 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}


void TouchGFXHAL::initialize()
{
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80017d8:	f001 f8c6 	bl	8002968 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setAnimationStorage((void*)animationBuffer);
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <_ZN11TouchGFXHAL10initializeEv+0x28>)
 80017de:	6823      	ldr	r3, [r4, #0]

    instrumentation.init();
 80017e0:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
    setAnimationStorage((void*)animationBuffer);
 80017e4:	4620      	mov	r0, r4
 80017e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ea:	4798      	blx	r3
    instrumentation.init();
 80017ec:	4628      	mov	r0, r5
 80017ee:	f7ff fea1 	bl	8001534 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 80017f2:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 80017f4:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80017f6:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	70000000 	.word	0x70000000

08001800 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001800:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001802:	6803      	ldr	r3, [r0, #0]
{
 8001804:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800180a:	4798      	blx	r3
    enableInterrupts();
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	4620      	mov	r0, r4
 8001810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001812:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001814:	f000 f92c 	bl	8001a70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	4620      	mov	r0, r4
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001826:	4808      	ldr	r0, [pc, #32]	@ (8001848 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 8001828:	f003 feac 	bl	8005584 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001832:	4806      	ldr	r0, [pc, #24]	@ (800184c <_ZN11TouchGFXHAL9taskEntryEv+0x4c>)
 8001834:	f003 fea6 	bl	8005584 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001838:	f000 f91a 	bl	8001a70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	4620      	mov	r0, r4
 8001840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001842:	4798      	blx	r3
    for (;;)
 8001844:	e7f8      	b.n	8001838 <_ZN11TouchGFXHAL9taskEntryEv+0x38>
 8001846:	bf00      	nop
 8001848:	58020c00 	.word	0x58020c00
 800184c:	58021800 	.word	0x58021800

08001850 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001850:	b510      	push	{r4, lr}
 8001852:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001854:	f017 f8fc 	bl	8018a50 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	4620      	mov	r0, r4
 800185c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001864:	4718      	bx	r3

08001866 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001866:	f001 b84b 	b.w	8002900 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800186a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800186a:	f001 b84f 	b.w	800290c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001870 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001870:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001872:	f001 f8a3 	bl	80029bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001876:	4910      	ldr	r1, [pc, #64]	@ (80018b8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001878:	2300      	movs	r3, #0
 800187a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800187e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001882:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001886:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800188a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800188e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001892:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001894:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001898:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800189a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800189e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80018a0:	f8c1 5274 	str.w	r5, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80018a4:	d2f9      	bcs.n	800189a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 80018a6:	3b20      	subs	r3, #32
 80018a8:	f113 0f20 	cmn.w	r3, #32
 80018ac:	d1f2      	bne.n	8001894 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 80018ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018b2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80018bc:	f000 bffc 	b.w	80028b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080018c0 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80018c0:	f001 b9e6 	b.w	8002c90 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

080018c4 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80018c4:	f001 b9ee 	b.w	8002ca4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

080018c8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80018c8:	f001 b800 	b.w	80028cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

080018cc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80018cc:	f016 bb2c 	b.w	8017f28 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080018d0 <_ZN11TouchGFXHALD0Ev>:
 80018d0:	b510      	push	{r4, lr}
 80018d2:	4604      	mov	r4, r0
 80018d4:	2188      	movs	r1, #136	@ 0x88
 80018d6:	f027 fdb9 	bl	802944c <_ZdlPvj>
 80018da:	4620      	mov	r0, r4
 80018dc:	bd10      	pop	{r4, pc}
	...

080018e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80018e0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80018e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80018e8:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80018ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80018ee:	428c      	cmp	r4, r1
 80018f0:	d009      	beq.n	8001906 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80018f2:	b93a      	cbnz	r2, 8001904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80018f4:	490a      	ldr	r1, [pc, #40]	@ (8001920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80018f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80018fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80018fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80018fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001900:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001902:	701a      	strb	r2, [r3, #0]
        }
    }
 8001904:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001906:	2a00      	cmp	r2, #0
 8001908:	d0fc      	beq.n	8001904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800190a:	4a06      	ldr	r2, [pc, #24]	@ (8001924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800190c:	4904      	ldr	r1, [pc, #16]	@ (8001920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800190e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001910:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001912:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001914:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001916:	2200      	movs	r2, #0
 8001918:	e7f3      	b.n	8001902 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800191a:	bf00      	nop
 800191c:	24015c40 	.word	0x24015c40
 8001920:	24015c3e 	.word	0x24015c3e
 8001924:	24015c3c 	.word	0x24015c3c

08001928 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	460d      	mov	r5, r1
 800192c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800192e:	b935      	cbnz	r5, 800193e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001932:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 800193a:	f028 f8fd 	bl	8029b38 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800193e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001942:	3a00      	subs	r2, #0
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001946:	bf18      	it	ne
 8001948:	2201      	movne	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800194c:	6803      	ldr	r3, [r0, #0]
    }
 800194e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001956:	4718      	bx	r3
 8001958:	0802b100 	.word	0x0802b100
 800195c:	0802b138 	.word	0x0802b138
 8001960:	0802b186 	.word	0x0802b186
 8001964:	24015c46 	.word	0x24015c46

08001968 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001968:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	428b      	cmp	r3, r1
 8001970:	d803      	bhi.n	800197a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4293      	cmp	r3, r2
 8001978:	d905      	bls.n	8001986 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800197c:	219e      	movs	r1, #158	@ 0x9e
 800197e:	4a07      	ldr	r2, [pc, #28]	@ (800199c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001980:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001982:	f028 f8d9 	bl	8029b38 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001988:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800198c:	801a      	strh	r2, [r3, #0]
    }
 800198e:	bd08      	pop	{r3, pc}
 8001990:	24015c3c 	.word	0x24015c3c
 8001994:	24015c3e 	.word	0x24015c3e
 8001998:	0802b1cb 	.word	0x0802b1cb
 800199c:	0802b22e 	.word	0x0802b22e
 80019a0:	0802b186 	.word	0x0802b186
 80019a4:	24015c42 	.word	0x24015c42
 80019a8:	24015c44 	.word	0x24015c44

080019ac <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80019ac:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 80019ae:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 80019b2:	b118      	cbz	r0, 80019bc <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 80019b4:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4718      	bx	r3
    }
 80019bc:	4770      	bx	lr
	...

080019c0 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 80019c0:	4601      	mov	r1, r0
 80019c2:	b508      	push	{r3, lr}
        return instance;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <IdleTaskHook+0x14>)
 80019c6:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80019c8:	b101      	cbz	r1, 80019cc <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80019ca:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80019cc:	f017 f85a 	bl	8018a84 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80019d0:	2001      	movs	r0, #1
 80019d2:	bd08      	pop	{r3, pc}
 80019d4:	24015c48 	.word	0x24015c48

080019d8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80019d8:	2101      	movs	r1, #1
 80019da:	2200      	movs	r2, #0
{
 80019dc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80019de:	4608      	mov	r0, r1
 80019e0:	f006 fe88 	bl	80086f4 <osSemaphoreNew>
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80019e6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80019e8:	b928      	cbnz	r0, 80019f6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80019ec:	2128      	movs	r1, #40	@ 0x28
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80019f0:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80019f2:	f028 f8a1 	bl	8029b38 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2104      	movs	r1, #4
 80019fa:	2001      	movs	r0, #1
 80019fc:	f006 ff19 	bl	8008832 <osMessageQueueNew>
 8001a00:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001a02:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a04:	b918      	cbnz	r0, 8001a0e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001a06:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001a08:	212c      	movs	r1, #44	@ 0x2c
 8001a0a:	4a03      	ldr	r2, [pc, #12]	@ (8001a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001a0c:	e7f0      	b.n	80019f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001a0e:	bd08      	pop	{r3, pc}
 8001a10:	2400038c 	.word	0x2400038c
 8001a14:	0802b34c 	.word	0x0802b34c
 8001a18:	0802b395 	.word	0x0802b395
 8001a1c:	0802b3c4 	.word	0x0802b3c4
 8001a20:	24000388 	.word	0x24000388
 8001a24:	0802b44e 	.word	0x0802b44e

08001a28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001a28:	4b02      	ldr	r3, [pc, #8]	@ (8001a34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f006 beaa 	b.w	8008788 <osSemaphoreAcquire>
 8001a34:	2400038c 	.word	0x2400038c

08001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001a38:	4b01      	ldr	r3, [pc, #4]	@ (8001a40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	f006 bed0 	b.w	80087e0 <osSemaphoreRelease>
 8001a40:	2400038c 	.word	0x2400038c

08001a44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001a44:	4b02      	ldr	r3, [pc, #8]	@ (8001a50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f006 be9d 	b.w	8008788 <osSemaphoreAcquire>
 8001a4e:	bf00      	nop
 8001a50:	2400038c 	.word	0x2400038c

08001a54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001a54:	f7ff bff0 	b.w	8001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001a58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001a5c:	4903      	ldr	r1, [pc, #12]	@ (8001a6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6800      	ldr	r0, [r0, #0]
 8001a62:	f006 bf21 	b.w	80088a8 <osMessageQueuePut>
 8001a66:	bf00      	nop
 8001a68:	24000388 	.word	0x24000388
 8001a6c:	24000004 	.word	0x24000004

08001a70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001a70:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001a72:	2300      	movs	r3, #0
 8001a74:	4c07      	ldr	r4, [pc, #28]	@ (8001a94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001a76:	a901      	add	r1, sp, #4
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	f006 ff45 	bl	800890a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	2200      	movs	r2, #0
 8001a86:	a901      	add	r1, sp, #4
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	f006 ff3e 	bl	800890a <osMessageQueueGet>
}
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	24000388 	.word	0x24000388

08001a98 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001a98:	6803      	ldr	r3, [r0, #0]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	4718      	bx	r3

08001a9e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	4770      	bx	lr

08001aa2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001aa2:	6803      	ldr	r3, [r0, #0]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	4718      	bx	r3

08001aa8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001aa8:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001aac:	4770      	bx	lr
	...

08001ab0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ab6:	6003      	str	r3, [r0, #0]
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <_ZN8STM32DMAD1Ev+0x1c>)
 8001aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ac2:	f3bf 8f6f 	isb	sy
}
 8001ac6:	4770      	bx	lr
 8001ac8:	0802b628 	.word	0x0802b628
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
}
 8001ad4:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001ad8:	f7ff ffea 	bl	8001ab0 <_ZN8STM32DMAD1Ev>
 8001adc:	4620      	mov	r0, r4
 8001ade:	f027 fcb5 	bl	802944c <_ZdlPvj>
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	bd10      	pop	{r4, pc}
	...

08001ae8 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001aea:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001aec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001af0:	f042 0210 	orr.w	r2, r2, #16
 8001af4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001af8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001afc:	f002 0210 	and.w	r2, r2, #16
 8001b00:	9201      	str	r2, [sp, #4]
 8001b02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001b04:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b06:	f042 0210 	orr.w	r2, r2, #16
 8001b0a:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b0e:	f022 0210 	bic.w	r2, r2, #16
 8001b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <_ZN8STM32DMA10initializeEv+0x44>)
 8001b16:	4a06      	ldr	r2, [pc, #24]	@ (8001b30 <_ZN8STM32DMA10initializeEv+0x48>)
 8001b18:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001b1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b20:	609a      	str	r2, [r3, #8]
}
 8001b22:	b002      	add	sp, #8
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	24000298 	.word	0x24000298
 8001b30:	08001d7d 	.word	0x08001d7d
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001b38:	b508      	push	{r3, lr}
    switch (format)
 8001b3a:	280a      	cmp	r0, #10
 8001b3c:	d809      	bhi.n	8001b52 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001b3e:	e8df f000 	tbb	[pc, r0]
 8001b42:	1006      	.short	0x1006
 8001b44:	0808080e 	.word	0x0808080e
 8001b48:	10101008 	.word	0x10101008
 8001b4c:	10          	.byte	0x10
 8001b4d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001b4e:	2002      	movs	r0, #2
}
 8001b50:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001b54:	2186      	movs	r1, #134	@ 0x86
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001b5a:	f027 ffed 	bl	8029b38 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e7f6      	b.n	8001b50 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001b62:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001b64:	e7f4      	b.n	8001b50 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001b66:	bf00      	nop
 8001b68:	0802b490 	.word	0x0802b490
 8001b6c:	0802b4ab 	.word	0x0802b4ab
 8001b70:	0802b4f6 	.word	0x0802b4f6

08001b74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b78:	7f88      	ldrb	r0, [r1, #30]
 8001b7a:	f7ff ffdd 	bl	8001b38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001b7e:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b80:	8aa5      	ldrh	r5, [r4, #20]
 8001b82:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001b84:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b86:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001b8a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b8e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001b90:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b92:	1b52      	subs	r2, r2, r5
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001b96:	6825      	ldr	r5, [r4, #0]
 8001b98:	2d08      	cmp	r5, #8
 8001b9a:	d10e      	bne.n	8001bba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b9c:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b9e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ba0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001ba4:	7f20      	ldrb	r0, [r4, #28]
 8001ba6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001baa:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8001bac:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001bae:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001bb2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001bb4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001bb6:	601a      	str	r2, [r3, #0]
    }
}
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001bba:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001bbc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001bc4:	4a03      	ldr	r2, [pc, #12]	@ (8001bd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8001bc6:	e7f6      	b.n	8001bb6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001bc8:	52001000 	.word	0x52001000
 8001bcc:	00010009 	.word	0x00010009
 8001bd0:	00020201 	.word	0x00020201
 8001bd4:	00030201 	.word	0x00030201

08001bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001bd8:	b508      	push	{r3, lr}
    switch (format)
 8001bda:	280b      	cmp	r0, #11
 8001bdc:	d80b      	bhi.n	8001bf6 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001bde:	e8df f000 	tbb	[pc, r0]
 8001be2:	1206      	.short	0x1206
 8001be4:	0a0a0a10 	.word	0x0a0a0a10
 8001be8:	0808080a 	.word	0x0808080a
 8001bec:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001bee:	2002      	movs	r0, #2
}
 8001bf0:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001bf2:	2005      	movs	r0, #5
        break;
 8001bf4:	e7fc      	b.n	8001bf0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001bf8:	2165      	movs	r1, #101	@ 0x65
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001bfe:	f027 ff9b 	bl	8029b38 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001c02:	2000      	movs	r0, #0
 8001c04:	e7f4      	b.n	8001bf0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001c06:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001c08:	e7f2      	b.n	8001bf0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001c0a:	bf00      	nop
 8001c0c:	0802b490 	.word	0x0802b490
 8001c10:	0802b57e 	.word	0x0802b57e
 8001c14:	0802b4f6 	.word	0x0802b4f6

08001c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8001c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c1c:	7f4f      	ldrb	r7, [r1, #29]
{
 8001c1e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c20:	4638      	mov	r0, r7
 8001c22:	f7ff ffd9 	bl	8001bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c26:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c2a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f7ff ffd3 	bl	8001bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001c32:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c34:	4628      	mov	r0, r5
 8001c36:	f7ff ff7f 	bl	8001b38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c3a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8001c3e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c42:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c46:	4b45      	ldr	r3, [pc, #276]	@ (8001d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001c48:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c4a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c4c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c4e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c50:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c52:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c56:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c62:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c66:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c68:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8001c6a:	f8d9 4000 	ldr.w	r4, [r9]
 8001c6e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8001c72:	2c80      	cmp	r4, #128	@ 0x80
 8001c74:	d022      	beq.n	8001cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8001c76:	d80f      	bhi.n	8001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8001c78:	2c20      	cmp	r4, #32
 8001c7a:	d066      	beq.n	8001d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8001c7c:	2c40      	cmp	r4, #64	@ 0x40
 8001c7e:	d064      	beq.n	8001d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8001c80:	2c04      	cmp	r4, #4
 8001c82:	d05c      	beq.n	8001d3e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c84:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8001c88:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001c8a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c8c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8001c90:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001c92:	d060      	beq.n	8001d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001c94:	4a32      	ldr	r2, [pc, #200]	@ (8001d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001c96:	e03f      	b.n	8001d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001c98:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8001c9c:	d004      	beq.n	8001ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8001c9e:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8001ca2:	d1ef      	bne.n	8001c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ca4:	482f      	ldr	r0, [pc, #188]	@ (8001d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8001ca6:	e000      	b.n	8001caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ca8:	482f      	ldr	r0, [pc, #188]	@ (8001d68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001caa:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8001cae:	61da      	str	r2, [r3, #28]
 8001cb0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001cb4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cb6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cb8:	6159      	str	r1, [r3, #20]
 8001cba:	e02c      	b.n	8001d16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cbc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001cc0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cc4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8001cc8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cca:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ccc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001cce:	1d21      	adds	r1, r4, #4
 8001cd0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8001cd2:	7821      	ldrb	r1, [r4, #0]
 8001cd4:	b141      	cbz	r1, 8001ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001cd6:	2901      	cmp	r1, #1
 8001cd8:	d021      	beq.n	8001d1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001cda:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001cdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8001ce2:	4824      	ldr	r0, [pc, #144]	@ (8001d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001ce4:	f027 ff28 	bl	8029b38 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	8861      	ldrh	r1, [r4, #2]
 8001cec:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001cf0:	3901      	subs	r1, #1
 8001cf2:	f022 0210 	bic.w	r2, r2, #16
 8001cf6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cfa:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8001cfc:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d00:	69d9      	ldr	r1, [r3, #28]
 8001d02:	f041 0120 	orr.w	r1, r1, #32
 8001d06:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001d08:	69d9      	ldr	r1, [r3, #28]
 8001d0a:	0689      	lsls	r1, r1, #26
 8001d0c:	d4fc      	bmi.n	8001d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001d0e:	2110      	movs	r1, #16
 8001d10:	6099      	str	r1, [r3, #8]
            if (blend)
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d0be      	beq.n	8001c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001d16:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d1e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8001d20:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d22:	8860      	ldrh	r0, [r4, #2]
 8001d24:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8001d28:	bf18      	it	ne
 8001d2a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d2c:	3801      	subs	r0, #1
 8001d2e:	f021 0110 	bic.w	r1, r1, #16
 8001d32:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8001d36:	f041 0110 	orr.w	r1, r1, #16
 8001d3a:	61d9      	str	r1, [r3, #28]
                break;
 8001d3c:	e7df      	b.n	8001cfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d3e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8001d42:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	e7b5      	b.n	8001cb6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8001d4a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8001d4e:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d50:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001d54:	e7f7      	b.n	8001d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d56:	f240 2201 	movw	r2, #513	@ 0x201
 8001d5a:	e7dd      	b.n	8001d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001d5c:	52001000 	.word	0x52001000
 8001d60:	00010201 	.word	0x00010201
 8001d64:	00020009 	.word	0x00020009
 8001d68:	0002000a 	.word	0x0002000a
 8001d6c:	0802b5c8 	.word	0x0802b5c8
 8001d70:	0802b5e2 	.word	0x0802b5e2
 8001d74:	0802b4f6 	.word	0x0802b4f6
 8001d78:	00020201 	.word	0x00020201

08001d7c <DMA2D_XferCpltCallback>:
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <DMA2D_XferCpltCallback+0xc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001d82:	6803      	ldr	r3, [r0, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4718      	bx	r3
 8001d88:	24015c48 	.word	0x24015c48

08001d8c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <_ZN8STM32DMAC1Ev+0x30>)
 8001d92:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001d94:	2600      	movs	r6, #0
 8001d96:	4625      	mov	r5, r4
 8001d98:	2260      	movs	r2, #96	@ 0x60
 8001d9a:	6060      	str	r0, [r4, #4]
 8001d9c:	7226      	strb	r6, [r4, #8]
 8001d9e:	7266      	strb	r6, [r4, #9]
 8001da0:	f845 3b20 	str.w	r3, [r5], #32
 8001da4:	4629      	mov	r1, r5
 8001da6:	f016 ffc3 	bl	8018d30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001daa:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8001dae:	60ee      	str	r6, [r5, #12]
 8001db0:	3524      	adds	r5, #36	@ 0x24
 8001db2:	429d      	cmp	r5, r3
 8001db4:	d1fb      	bne.n	8001dae <_ZN8STM32DMAC1Ev+0x22>
}
 8001db6:	4620      	mov	r0, r4
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	bf00      	nop
 8001dbc:	0802b628 	.word	0x0802b628

08001dc0 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	07d2      	lsls	r2, r2, #31
 8001dc6:	d4fc      	bmi.n	8001dc2 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dc8:	2223      	movs	r2, #35	@ 0x23
 8001dca:	609a      	str	r2, [r3, #8]
}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	52001000 	.word	0x52001000

08001dd4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8001dd4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001dd6:	4c10      	ldr	r4, [pc, #64]	@ (8001e18 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8001dd8:	6825      	ldr	r5, [r4, #0]
 8001dda:	07ed      	lsls	r5, r5, #31
 8001ddc:	d4fc      	bmi.n	8001dd8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dde:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001de0:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001de2:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001de4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001de6:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001dea:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001dee:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001df0:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001df2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8001df4:	d00c      	beq.n	8001e10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001df6:	4909      	ldr	r1, [pc, #36]	@ (8001e1c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8001df8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001dfc:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001dfe:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001e02:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8001e06:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001e08:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001e0a:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001e0c:	6023      	str	r3, [r4, #0]
    }
}
 8001e0e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001e10:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8001e14:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001e16:	e7f9      	b.n	8001e0c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8001e18:	52001000 	.word	0x52001000
 8001e1c:	00010009 	.word	0x00010009
 8001e20:	00020001 	.word	0x00020001
 8001e24:	00030001 	.word	0x00030001

08001e28 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8001e28:	6940      	ldr	r0, [r0, #20]
 8001e2a:	4770      	bx	lr

08001e2c <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8001e2c:	f890 0044 	ldrb.w	r0, [r0, #68]	@ 0x44
 8001e30:	4770      	bx	lr

08001e32 <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001e32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001e34:	b923      	cbnz	r3, 8001e40 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 8001e36:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001e38:	3800      	subs	r0, #0
 8001e3a:	bf18      	it	ne
 8001e3c:	2001      	movne	r0, #1
 8001e3e:	4770      	bx	lr
 8001e40:	2001      	movs	r0, #1
}
 8001e42:	4770      	bx	lr

08001e44 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001e44:	6880      	ldr	r0, [r0, #8]
 8001e46:	4770      	bx	lr

08001e48 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8001e48:	3004      	adds	r0, #4
{
 8001e4a:	b510      	push	{r4, lr}
 8001e4c:	460c      	mov	r4, r1
    *data = videoInfo;
 8001e4e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 8001e54:	bd10      	pop	{r4, pc}

08001e56 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 8001e56:	4770      	bx	lr

08001e58 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001e58:	b508      	push	{r3, lr}
    assert(0);
 8001e5a:	4a03      	ldr	r2, [pc, #12]	@ (8001e68 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001e5c:	f240 2112 	movw	r1, #530	@ 0x212
 8001e60:	4b02      	ldr	r3, [pc, #8]	@ (8001e6c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8001e64:	f027 fe68 	bl	8029b38 <__assert_func>
 8001e68:	0802b670 	.word	0x0802b670
 8001e6c:	0802d137 	.word	0x0802d137
 8001e70:	0802b6cb 	.word	0x0802b6cb

08001e74 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4604      	mov	r4, r0
 8001e78:	2148      	movs	r1, #72	@ 0x48
 8001e7a:	f027 fae7 	bl	802944c <_ZdlPvj>
 8001e7e:	4620      	mov	r0, r4
 8001e80:	bd10      	pop	{r4, pc}

08001e82 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8001e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e86:	461e      	mov	r6, r3
 8001e88:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8001e8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8001e8e:	4607      	mov	r7, r0
 8001e90:	460c      	mov	r4, r1
 8001e92:	4690      	mov	r8, r2
 8001e94:	9da6      	ldr	r5, [sp, #664]	@ 0x298
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8001e96:	b393      	cbz	r3, 8001efe <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x7c>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8001e98:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 8001e9a:	a803      	add	r0, sp, #12
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8001e9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8001ea0:	f00e fd8e 	bl	80109c0 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8001ea4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001ea8:	2150      	movs	r1, #80	@ 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8001eaa:	9024      	str	r0, [sp, #144]	@ 0x90
        jpeg_create_decompress(&cinfo);
 8001eac:	a824      	add	r0, sp, #144	@ 0x90
 8001eae:	f008 fd54 	bl	800a95a <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8001eb2:	4642      	mov	r2, r8
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	a824      	add	r0, sp, #144	@ 0x90
 8001eb8:	f009 fca8 	bl	800b80c <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	a824      	add	r0, sp, #144	@ 0x90
 8001ec0:	f008 fe46 	bl	800ab50 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8001ec4:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8001ec6:	a824      	add	r0, sp, #144	@ 0x90
        cinfo.dct_method = JDCT_FLOAT;
 8001ec8:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
        jpeg_start_decompress(&cinfo);
 8001ecc:	f008 fee1 	bl	800ac92 <jpeg_start_decompress>
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8001ed0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001ed2:	f8bd 8294 	ldrh.w	r8, [sp, #660]	@ 0x294
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8001ed6:	f8bd 2290 	ldrh.w	r2, [sp, #656]	@ 0x290
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8001eda:	4598      	cmp	r8, r3
 8001edc:	bf28      	it	cs
 8001ede:	4698      	movcs	r8, r3
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8001ee0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	bf28      	it	cs
 8001ee6:	461a      	movcs	r2, r3
            memcpy(lineptr, lineBuffer, width * 3);
 8001ee8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
        while (cinfo.output_scanline < height)
 8001eec:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001eee:	4598      	cmp	r8, r3
 8001ef0:	d809      	bhi.n	8001f06 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x84>
        jpeg_finish_decompress(&cinfo);
 8001ef2:	a824      	add	r0, sp, #144	@ 0x90
 8001ef4:	f008 fe4e 	bl	800ab94 <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8001ef8:	a824      	add	r0, sp, #144	@ 0x90
 8001efa:	f008 fd7b 	bl	800a9f4 <jpeg_destroy_decompress>
}
 8001efe:	f50d 7d1e 	add.w	sp, sp, #632	@ 0x278
 8001f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8001f06:	2201      	movs	r2, #1
 8001f08:	a901      	add	r1, sp, #4
 8001f0a:	a824      	add	r0, sp, #144	@ 0x90
 8001f0c:	f008 ff0a 	bl	800ad24 <jpeg_read_scanlines>
            memcpy(lineptr, lineBuffer, width * 3);
 8001f10:	4630      	mov	r0, r6
 8001f12:	4622      	mov	r2, r4
 8001f14:	6b79      	ldr	r1, [r7, #52]	@ 0x34
            lineptr += bufferStride; //move to next line
 8001f16:	442e      	add	r6, r5
            memcpy(lineptr, lineBuffer, width * 3);
 8001f18:	f028 fa01 	bl	802a31e <memcpy>
            lineptr += bufferStride; //move to next line
 8001f1c:	e7e6      	b.n	8001eec <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x6a>
	...

08001f20 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001f20:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8001f22:	6002      	str	r2, [r0, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8001f24:	2200      	movs	r2, #0
 8001f26:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8001f2a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8001f2e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001f32:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8001f36:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 8001f3a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8001f3e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
    videoInfo.frame_width = 0;
 8001f42:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001f46:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 8001f4a:	4770      	bx	lr
 8001f4c:	0802b9e8 	.word	0x0802b9e8

08001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8001f50:	b410      	push	{r4}
 8001f52:	460c      	mov	r4, r1
 8001f54:	4611      	mov	r1, r2
 8001f56:	461a      	mov	r2, r3
    if (reader != 0)
 8001f58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001f5a:	b13b      	cbz	r3, 8001f6c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001f5c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f5e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001f60:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8001f62:	4420      	add	r0, r4
}
 8001f64:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8001f68:	f028 b8aa 	b.w	802a0c0 <strncmp>
        src = (const char*)movieData + offset;
 8001f6c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001f6e:	e7f8      	b.n	8001f62 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

08001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8001f70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8001f72:	b510      	push	{r4, lr}
    if (reader != 0)
 8001f74:	b173      	cbz	r3, 8001f94 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8001f76:	6c03      	ldr	r3, [r0, #64]	@ 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001f78:	6b82      	ldr	r2, [r0, #56]	@ 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8001f7a:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001f7c:	1853      	adds	r3, r2, r1
 8001f7e:	5c52      	ldrb	r2, [r2, r1]
 8001f80:	7898      	ldrb	r0, [r3, #2]
 8001f82:	785c      	ldrb	r4, [r3, #1]
 8001f84:	0400      	lsls	r0, r0, #16
 8001f86:	78db      	ldrb	r3, [r3, #3]
 8001f88:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8001f8c:	4310      	orrs	r0, r2
 8001f8e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8001f92:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8001f94:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f96:	5858      	ldr	r0, [r3, r1]
 8001f98:	e7fb      	b.n	8001f92 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

08001f9a <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8001f9a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001f9c:	b143      	cbz	r3, 8001fb0 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8001f9e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001fa0:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8001fa2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001fa4:	185a      	adds	r2, r3, r1
 8001fa6:	5c58      	ldrb	r0, [r3, r1]
 8001fa8:	7852      	ldrb	r2, [r2, #1]
 8001faa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001fae:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8001fb0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001fb2:	5a58      	ldrh	r0, [r3, r1]
}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4604      	mov	r4, r0
    if (reader != 0)
 8001fbc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8001fbe:	460d      	mov	r5, r1
 8001fc0:	4616      	mov	r6, r2
    if (reader != 0)
 8001fc2:	b1d8      	cbz	r0, 8001ffc <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8001fc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d208      	bcs.n	8001fdc <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001fca:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 8001fce:	2165      	movs	r1, #101	@ 0x65
 8001fd0:	480d      	ldr	r0, [pc, #52]	@ (8002008 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001fd2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            assert(!"Buffer to small");
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 8001fd8:	f027 fdae 	bl	8029b38 <__assert_func>
        reader->seek(offset);
 8001fdc:	6803      	ldr	r3, [r0, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001fe2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001fe4:	4632      	mov	r2, r6
 8001fe6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001fe8:	6803      	ldr	r3, [r0, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4798      	blx	r3
 8001fee:	b910      	cbnz	r0, 8001ff6 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001ff0:	230d      	movs	r3, #13
 8001ff2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        return aviBuffer;
 8001ff6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        aviBufferStartOffset = offset;
 8001ff8:	6425      	str	r5, [r4, #64]	@ 0x40
}
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001ffc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001ffe:	4408      	add	r0, r1
 8002000:	e7fb      	b.n	8001ffa <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002002:	bf00      	nop
 8002004:	0802b772 	.word	0x0802b772
 8002008:	0802b6cb 	.word	0x0802b6cb
 800200c:	0802b75f 	.word	0x0802b75f

08002010 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002014:	6943      	ldr	r3, [r0, #20]
{
 8002016:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002018:	b92b      	cbnz	r3, 8002026 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 800201c:	21aa      	movs	r1, #170	@ 0xaa
 800201e:	4a23      	ldr	r2, [pc, #140]	@ (80020ac <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002020:	4823      	ldr	r0, [pc, #140]	@ (80020b0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 8002022:	f027 fd89 	bl	8029b38 <__assert_func>
    readData(currentMovieOffset, 8);
 8002026:	2208      	movs	r2, #8
 8002028:	6981      	ldr	r1, [r0, #24]
 800202a:	f7ff ffc5 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800202e:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002030:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002034:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002038:	3104      	adds	r1, #4
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff ff98 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002040:	69a3      	ldr	r3, [r4, #24]
 8002042:	4418      	add	r0, r3
 8002044:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002046:	f100 0208 	add.w	r2, r0, #8
 800204a:	429a      	cmp	r2, r3
 800204c:	d306      	bcc.n	800205c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800204e:	2301      	movs	r3, #1
    return false;
 8002050:	2000      	movs	r0, #0
    frameNumber = 1;
 8002052:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002054:	6a23      	ldr	r3, [r4, #32]
 8002056:	61a3      	str	r3, [r4, #24]
}
 8002058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 800205c:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800205e:	3009      	adds	r0, #9
        readData(currentMovieOffset, 8);
 8002060:	2208      	movs	r2, #8
        frameNumber++;
 8002062:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002064:	f020 0101 	bic.w	r1, r0, #1
        readData(currentMovieOffset, 8);
 8002068:	4620      	mov	r0, r4
        frameNumber++;
 800206a:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800206c:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800206e:	f7ff ffa3 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 8002072:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002076:	4620      	mov	r0, r4
 8002078:	4649      	mov	r1, r9
 800207a:	f7ff ff8e 	bl	8001f9a <_ZN20SoftwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800207e:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo = getU16(currentMovieOffset);
 8002082:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ff88 	bl	8001f9a <_ZN20SoftwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 800208a:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800208e:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff ff6d 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002096:	45b0      	cmp	r8, r6
 8002098:	d1d2      	bne.n	8002040 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800209a:	42bd      	cmp	r5, r7
 800209c:	d1d0      	bne.n	8002040 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d0ce      	beq.n	8002040 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80020a2:	2001      	movs	r0, #1
 80020a4:	e7d8      	b.n	8002058 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80020a6:	bf00      	nop
 80020a8:	0802b7b4 	.word	0x0802b7b4
 80020ac:	0802b7fd 	.word	0x0802b7fd
 80020b0:	0802b6cb 	.word	0x0802b6cb

080020b4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b8:	4605      	mov	r5, r0
 80020ba:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
 80020be:	468b      	mov	fp, r1
 80020c0:	4690      	mov	r8, r2
    readData(currentMovieOffset, 8);
 80020c2:	6981      	ldr	r1, [r0, #24]
 80020c4:	2208      	movs	r2, #8
{
 80020c6:	461f      	mov	r7, r3
    readData(currentMovieOffset, 8);
 80020c8:	f7ff ff76 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80020cc:	69ae      	ldr	r6, [r5, #24]
 80020ce:	4628      	mov	r0, r5
 80020d0:	1d31      	adds	r1, r6, #4
 80020d2:	f7ff ff4d 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80020d6:	f106 0108 	add.w	r1, r6, #8
 80020da:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80020dc:	4604      	mov	r4, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80020de:	4628      	mov	r0, r5
 80020e0:	f7ff ff6a 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80020e4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80020e6:	4606      	mov	r6, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80020e8:	b933      	cbnz	r3, 80020f8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80020ea:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x108>)
 80020ec:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80020f0:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>)
 80020f2:	4834      	ldr	r0, [pc, #208]	@ (80021c4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>)
 80020f4:	f027 fd20 	bl	8029b38 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80020f8:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80020fa:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80020fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002100:	f00e fc5e 	bl	80109c0 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002104:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002108:	2150      	movs	r1, #80	@ 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800210a:	9024      	str	r0, [sp, #144]	@ 0x90
    jpeg_create_decompress(&cinfo);
 800210c:	a824      	add	r0, sp, #144	@ 0x90
 800210e:	f008 fc24 	bl	800a95a <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002112:	4622      	mov	r2, r4
 8002114:	4631      	mov	r1, r6
 8002116:	a824      	add	r0, sp, #144	@ 0x90
 8002118:	f009 fb78 	bl	800b80c <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 800211c:	2101      	movs	r1, #1
 800211e:	a824      	add	r0, sp, #144	@ 0x90
 8002120:	f008 fd16 	bl	800ab50 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002124:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 8002126:	a824      	add	r0, sp, #144	@ 0x90
    cinfo.dct_method = JDCT_FLOAT;
 8002128:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
    jpeg_start_decompress(&cinfo);
 800212c:	f008 fdb1 	bl	800ac92 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002130:	f9bb a002 	ldrsh.w	sl, [fp, #2]
    while (cinfo.output_scanline < startY)
 8002134:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8002136:	4553      	cmp	r3, sl
 8002138:	d32d      	bcc.n	8002196 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe2>
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800213a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 800213e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002142:	f8bb 6002 	ldrh.w	r6, [fp, #2]
    const uint32_t startX = area.x;
 8002146:	f9bb 4000 	ldrsh.w	r4, [fp]
 800214a:	441e      	add	r6, r3
        return x + width;
 800214c:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8002150:	9b41      	ldr	r3, [sp, #260]	@ 0x104
        memcpy(lineptr + startX * 3, lineBuffer + startX * 3, (endX - startX) * 3);
 8002152:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 8002156:	b236      	sxth	r6, r6
 8002158:	4422      	add	r2, r4
 800215a:	fb07 9a0a 	mla	sl, r7, sl, r9
 800215e:	429e      	cmp	r6, r3
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 8002160:	b212      	sxth	r2, r2
 8002162:	44d0      	add	r8, sl
 8002164:	bf28      	it	cs
 8002166:	461e      	movcs	r6, r3
        memcpy(lineptr + startX * 3, lineBuffer + startX * 3, (endX - startX) * 3);
 8002168:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800216a:	429a      	cmp	r2, r3
 800216c:	bf94      	ite	ls
 800216e:	ebc4 0402 	rsbls	r4, r4, r2
 8002172:	ebc4 0403 	rsbhi	r4, r4, r3
 8002176:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    while (cinfo.output_scanline < endY)
 800217a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800217c:	42b3      	cmp	r3, r6
 800217e:	d310      	bcc.n	80021a2 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xee>
    jpeg_finish_decompress(&cinfo);
 8002180:	a824      	add	r0, sp, #144	@ 0x90
 8002182:	f008 fd07 	bl	800ab94 <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 8002186:	a824      	add	r0, sp, #144	@ 0x90
 8002188:	f008 fc34 	bl	800a9f4 <jpeg_destroy_decompress>
}
 800218c:	2001      	movs	r0, #1
 800218e:	f50d 7d1f 	add.w	sp, sp, #636	@ 0x27c
 8002192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	a901      	add	r1, sp, #4
 800219a:	a824      	add	r0, sp, #144	@ 0x90
 800219c:	f008 fdc2 	bl	800ad24 <jpeg_read_scanlines>
 80021a0:	e7c8      	b.n	8002134 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80021a2:	2201      	movs	r2, #1
 80021a4:	a901      	add	r1, sp, #4
 80021a6:	a824      	add	r0, sp, #144	@ 0x90
 80021a8:	f008 fdbc 	bl	800ad24 <jpeg_read_scanlines>
        memcpy(lineptr + startX * 3, lineBuffer + startX * 3, (endX - startX) * 3);
 80021ac:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80021ae:	4640      	mov	r0, r8
 80021b0:	4622      	mov	r2, r4
 80021b2:	4449      	add	r1, r9
 80021b4:	44b8      	add	r8, r7
 80021b6:	f028 f8b2 	bl	802a31e <memcpy>
        lineptr += framebuffer_width * 3; //move to next line
 80021ba:	e7de      	b.n	800217a <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xc6>
 80021bc:	0802b830 	.word	0x0802b830
 80021c0:	0802b886 	.word	0x0802b886
 80021c4:	0802b6cb 	.word	0x0802b6cb

080021c8 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80021c8:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80021ca:	6803      	ldr	r3, [r0, #0]
 80021cc:	bf38      	it	cc
 80021ce:	2101      	movcc	r1, #1
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80021d2:	b570      	push	{r4, r5, r6, lr}
 80021d4:	460d      	mov	r5, r1
 80021d6:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80021d8:	4798      	blx	r3
 80021da:	42a8      	cmp	r0, r5
 80021dc:	d204      	bcs.n	80021e8 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	4620      	mov	r0, r4
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	4798      	blx	r3
 80021e6:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80021e8:	1e6b      	subs	r3, r5, #1
 80021ea:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80021ec:	2210      	movs	r2, #16
 80021ee:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80021f0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80021f4:	f106 0108 	add.w	r1, r6, #8
 80021f8:	f7ff fede 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80021fc:	f106 0110 	add.w	r1, r6, #16
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff feb5 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002206:	6a23      	ldr	r3, [r4, #32]
 8002208:	3b04      	subs	r3, #4
 800220a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800220c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002210:	bd70      	pop	{r4, r5, r6, pc}
	...

08002214 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002214:	2100      	movs	r1, #0
    readData(0, 72);
 8002216:	2248      	movs	r2, #72	@ 0x48
{
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221c:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 800221e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002220:	f880 1044 	strb.w	r1, [r0, #68]	@ 0x44
    readData(0, 72);
 8002224:	f7ff fec8 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002228:	69a6      	ldr	r6, [r4, #24]
 800222a:	2304      	movs	r3, #4
 800222c:	4a62      	ldr	r2, [pc, #392]	@ (80023b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a4>)
 800222e:	4631      	mov	r1, r6
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff fe8d 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002236:	b140      	cbz	r0, 800224a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002238:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800223a:	4a60      	ldr	r2, [pc, #384]	@ (80023bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800223c:	21f2      	movs	r1, #242	@ 0xf2
        lastError = AVI_ERROR_NOT_RIFF;
 800223e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        assert(!"RIFF header not found");
 8002242:	4b5f      	ldr	r3, [pc, #380]	@ (80023c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
        assert(!"AVI header not found");
 8002244:	485f      	ldr	r0, [pc, #380]	@ (80023c4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8002246:	f027 fc77 	bl	8029b38 <__assert_func>
    currentMovieOffset += 8;
 800224a:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800224e:	2304      	movs	r3, #4
 8002250:	4a5d      	ldr	r2, [pc, #372]	@ (80023c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002252:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002254:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002256:	f7ff fe7b 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800225a:	b130      	cbz	r0, 800226a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800225c:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800225e:	4a57      	ldr	r2, [pc, #348]	@ (80023bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002260:	21fa      	movs	r1, #250	@ 0xfa
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002262:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        assert(!"AVI header not found");
 8002266:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002268:	e7ec      	b.n	8002244 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 800226a:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800226e:	2304      	movs	r3, #4
 8002270:	4a57      	ldr	r2, [pc, #348]	@ (80023d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002272:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002274:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002276:	f7ff fe6b 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800227a:	4607      	mov	r7, r0
 800227c:	b138      	cbz	r0, 800228e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800227e:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002280:	4a4e      	ldr	r2, [pc, #312]	@ (80023bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002282:	f240 1101 	movw	r1, #257	@ 0x101
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002286:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        assert(!"AVI LIST not found");
 800228a:	4b52      	ldr	r3, [pc, #328]	@ (80023d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800228c:	e7da      	b.n	8002244 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800228e:	f106 0110 	add.w	r1, r6, #16
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fe6c 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002298:	4605      	mov	r5, r0
 800229a:	b920      	cbnz	r0, 80022a6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 800229c:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 800229e:	f240 1107 	movw	r1, #263	@ 0x107
 80022a2:	4a46      	ldr	r2, [pc, #280]	@ (80023bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022a4:	e7ce      	b.n	8002244 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 80022a6:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80022aa:	2304      	movs	r3, #4
 80022ac:	4a4b      	ldr	r2, [pc, #300]	@ (80023dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80022ae:	4620      	mov	r0, r4
 80022b0:	4641      	mov	r1, r8
 80022b2:	f7ff fe4d 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d049      	beq.n	800234e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80022ba:	2306      	movs	r3, #6
 80022bc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    if (compare(offset, "avih", 4))
 80022c0:	2304      	movs	r3, #4
 80022c2:	4a47      	ldr	r2, [pc, #284]	@ (80023e0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80022c4:	f106 0118 	add.w	r1, r6, #24
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff fe41 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d03f      	beq.n	8002352 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80022d2:	2307      	movs	r3, #7
 80022d4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80022d8:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80022da:	4f42      	ldr	r7, [pc, #264]	@ (80023e4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
    readData(listOffset, 12);
 80022dc:	220c      	movs	r2, #12
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f7ff fe69 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80022e6:	f105 0608 	add.w	r6, r5, #8
 80022ea:	2304      	movs	r3, #4
 80022ec:	463a      	mov	r2, r7
 80022ee:	4620      	mov	r0, r4
 80022f0:	4631      	mov	r1, r6
 80022f2:	f7ff fe2d 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80022f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d048      	beq.n	8002390 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x17c>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d148      	bne.n	8002394 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002302:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002304:	42ab      	cmp	r3, r5
 8002306:	d849      	bhi.n	800239c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x188>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002308:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800230c:	3504      	adds	r5, #4
 800230e:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002310:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002312:	4629      	mov	r1, r5
 8002314:	f7ff fe2c 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002318:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800231a:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800231c:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff fe26 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002324:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002326:	2204      	movs	r2, #4
 8002328:	4620      	mov	r0, r4
 800232a:	4631      	mov	r1, r6
 800232c:	f7ff fe44 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002330:	2304      	movs	r3, #4
 8002332:	4a2d      	ldr	r2, [pc, #180]	@ (80023e8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 8002334:	4631      	mov	r1, r6
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff fe0a 	bl	8001f50 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800233c:	2800      	cmp	r0, #0
 800233e:	d138      	bne.n	80023b2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x19e>
    frameNumber = 1; //next frame number is 1
 8002340:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002342:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8002344:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002346:	69a3      	ldr	r3, [r4, #24]
 8002348:	6223      	str	r3, [r4, #32]
}
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800234e:	2701      	movs	r7, #1
 8002350:	e7b6      	b.n	80022c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 8002352:	2f00      	cmp	r7, #0
 8002354:	d0c0      	beq.n	80022d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002356:	f106 0120 	add.w	r1, r6, #32
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff fe08 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002360:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002364:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002368:	fbb0 f0f3 	udiv	r0, r0, r3
 800236c:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fdfe 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002374:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002378:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff fdf8 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002380:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002384:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002386:	4620      	mov	r0, r4
 8002388:	f7ff fdf2 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800238c:	6120      	str	r0, [r4, #16]
 800238e:	e7a3      	b.n	80022d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0b9      	beq.n	8002308 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf4>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002394:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002396:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
        return;
 800239a:	e7d6      	b.n	800234a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x136>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800239c:	1d29      	adds	r1, r5, #4
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff fde6 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80023a4:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80023a6:	220c      	movs	r2, #12
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7ff fe04 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
 80023b0:	e799      	b.n	80022e6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80023b2:	230b      	movs	r3, #11
 80023b4:	e7ef      	b.n	8002396 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x182>
 80023b6:	bf00      	nop
 80023b8:	0802b8e0 	.word	0x0802b8e0
 80023bc:	0802b8fe 	.word	0x0802b8fe
 80023c0:	0802b8e5 	.word	0x0802b8e5
 80023c4:	0802b6cb 	.word	0x0802b6cb
 80023c8:	0802b92b 	.word	0x0802b92b
 80023cc:	0802b930 	.word	0x0802b930
 80023d0:	0802b948 	.word	0x0802b948
 80023d4:	0802b94d 	.word	0x0802b94d
 80023d8:	0802b963 	.word	0x0802b963
 80023dc:	0802b96f 	.word	0x0802b96f
 80023e0:	0802b974 	.word	0x0802b974
 80023e4:	0802b979 	.word	0x0802b979
 80023e8:	0802b97e 	.word	0x0802b97e

080023ec <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80023ec:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; //not using reader
 80023f0:	2200      	movs	r2, #0
 80023f2:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80023f4:	f7ff bf0e 	b.w	8002214 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080023f8 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80023f8:	b510      	push	{r4, lr}
    movieData = 0;
 80023fa:	2300      	movs	r3, #0
{
 80023fc:	4604      	mov	r4, r0
 80023fe:	4608      	mov	r0, r1
    movieData = 0;
 8002400:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002402:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002404:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4798      	blx	r3
 800240a:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 800240c:	4620      	mov	r0, r4
}
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002412:	f7ff beff 	b.w	8002214 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002416 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002416:	b4f0      	push	{r4, r5, r6, r7}
 8002418:	9f06      	ldr	r7, [sp, #24]
 800241a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800241e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002422:	b132      	cbz	r2, 8002432 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x1c>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002424:	b12b      	cbz	r3, 8002432 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x1c>
 8002426:	9504      	str	r5, [sp, #16]
 8002428:	e9cd 6705 	strd	r6, r7, [sp, #20]
}
 800242c:	bcf0      	pop	{r4, r5, r6, r7}
 800242e:	f7ff bd28 	b.w	8001e82 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002432:	bcf0      	pop	{r4, r5, r6, r7}
 8002434:	4770      	bx	lr
	...

08002438 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800243e:	6943      	ldr	r3, [r0, #20]
{
 8002440:	b085      	sub	sp, #20
 8002442:	4604      	mov	r4, r0
 8002444:	460f      	mov	r7, r1
 8002446:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002448:	b92b      	cbnz	r3, 8002456 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800244a:	4b29      	ldr	r3, [pc, #164]	@ (80024f0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 800244c:	2177      	movs	r1, #119	@ 0x77
 800244e:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002450:	4829      	ldr	r0, [pc, #164]	@ (80024f8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002452:	f027 fb71 	bl	8029b38 <__assert_func>
    readData(currentMovieOffset, 8);
 8002456:	2208      	movs	r2, #8
 8002458:	6981      	ldr	r1, [r0, #24]
 800245a:	f7ff fdad 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 800245e:	69a6      	ldr	r6, [r4, #24]
 8002460:	4620      	mov	r0, r4
 8002462:	4631      	mov	r1, r6
 8002464:	f7ff fd99 	bl	8001f9a <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002468:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo = getU16(currentMovieOffset);
 800246a:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff fd94 	bl	8001f9a <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002472:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002474:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff fd7a 	bl	8001f70 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800247c:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002480:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002482:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002484:	1842      	adds	r2, r0, r1
 8002486:	429a      	cmp	r2, r3
 8002488:	d226      	bcs.n	80024d8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800248a:	f243 0330 	movw	r3, #12336	@ 0x3030
 800248e:	459b      	cmp	fp, r3
 8002490:	d117      	bne.n	80024c2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002492:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002496:	459a      	cmp	sl, r3
 8002498:	d113      	bne.n	80024c2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800249a:	b190      	cbz	r0, 80024c2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800249c:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 800249e:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7ff fd89 	bl	8001fb8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80024a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80024a8:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80024aa:	462a      	mov	r2, r5
 80024ac:	4620      	mov	r0, r4
 80024ae:	f8cd 8000 	str.w	r8, [sp]
 80024b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80024b6:	463b      	mov	r3, r7
 80024b8:	f7ff ffad 	bl	8002416 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80024bc:	6963      	ldr	r3, [r4, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80024c2:	69a3      	ldr	r3, [r4, #24]
 80024c4:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80024c6:	b905      	cbnz	r5, 80024ca <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 80024c8:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024ca:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80024cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024ce:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80024d2:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024d4:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80024d6:	d109      	bne.n	80024ec <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 80024d8:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 80024da:	2001      	movs	r0, #1
        frameNumber = 1;
 80024dc:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80024de:	6a23      	ldr	r3, [r4, #32]
 80024e0:	61a3      	str	r3, [r4, #24]
}
 80024e2:	f080 0001 	eor.w	r0, r0, #1
 80024e6:	b005      	add	sp, #20
 80024e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 80024ec:	2000      	movs	r0, #0
 80024ee:	e7f8      	b.n	80024e2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80024f0:	0802b7b4 	.word	0x0802b7b4
 80024f4:	0802b983 	.word	0x0802b983
 80024f8:	0802b6cb 	.word	0x0802b6cb

080024fc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80024fc:	2001      	movs	r0, #1
 80024fe:	4770      	bx	lr

08002500 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002500:	200c      	movs	r0, #12
 8002502:	4770      	bx	lr

08002504 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002504:	230c      	movs	r3, #12
 8002506:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800250a:	3008      	adds	r0, #8
 800250c:	4770      	bx	lr

0800250e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800250e:	230c      	movs	r3, #12
 8002510:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002514:	3008      	adds	r0, #8
 8002516:	4770      	bx	lr

08002518 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002518:	2001      	movs	r0, #1
 800251a:	4770      	bx	lr

0800251c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800251c:	20cc      	movs	r0, #204	@ 0xcc
 800251e:	4770      	bx	lr

08002520 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002520:	23cc      	movs	r3, #204	@ 0xcc
 8002522:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002526:	3008      	adds	r0, #8
 8002528:	4770      	bx	lr

0800252a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800252a:	23cc      	movs	r3, #204	@ 0xcc
 800252c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002530:	3008      	adds	r0, #8
 8002532:	4770      	bx	lr

08002534 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002534:	2001      	movs	r0, #1
 8002536:	4770      	bx	lr

08002538 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002538:	2010      	movs	r0, #16
 800253a:	4770      	bx	lr

0800253c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800253c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002540:	3008      	adds	r0, #8
 8002542:	4770      	bx	lr

08002544 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002544:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002548:	3008      	adds	r0, #8
 800254a:	4770      	bx	lr

0800254c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800254c:	4608      	mov	r0, r1
 800254e:	f000 bedb 	b.w	8003308 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08002554 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002556:	b510      	push	{r4, lr}
 8002558:	4604      	mov	r4, r0
 800255a:	6003      	str	r3, [r0, #0]
 800255c:	f015 fa3a 	bl	80179d4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002560:	4620      	mov	r0, r4
 8002562:	bd10      	pop	{r4, pc}
 8002564:	0802ba90 	.word	0x0802ba90

08002568 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002568:	b510      	push	{r4, lr}
 800256a:	4604      	mov	r4, r0
 800256c:	f7ff fff2 	bl	8002554 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002570:	2114      	movs	r1, #20
 8002572:	4620      	mov	r0, r4
 8002574:	f026 ff6a 	bl	802944c <_ZdlPvj>
 8002578:	4620      	mov	r0, r4
 800257a:	bd10      	pop	{r4, pc}

0800257c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800257e:	b510      	push	{r4, lr}
 8002580:	4604      	mov	r4, r0
 8002582:	6003      	str	r3, [r0, #0]
 8002584:	f015 fa26 	bl	80179d4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002588:	4620      	mov	r0, r4
 800258a:	bd10      	pop	{r4, pc}
 800258c:	0802ba5c 	.word	0x0802ba5c

08002590 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002590:	b510      	push	{r4, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	f7ff fff2 	bl	800257c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002598:	21d4      	movs	r1, #212	@ 0xd4
 800259a:	4620      	mov	r0, r4
 800259c:	f026 ff56 	bl	802944c <_ZdlPvj>
 80025a0:	4620      	mov	r0, r4
 80025a2:	bd10      	pop	{r4, pc}

080025a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80025a6:	b510      	push	{r4, lr}
 80025a8:	4604      	mov	r4, r0
 80025aa:	6003      	str	r3, [r0, #0]
 80025ac:	f015 fa12 	bl	80179d4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80025b0:	4620      	mov	r0, r4
 80025b2:	bd10      	pop	{r4, pc}
 80025b4:	0802ba28 	.word	0x0802ba28

080025b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
 80025bc:	f7ff fff2 	bl	80025a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80025c0:	2118      	movs	r1, #24
 80025c2:	4620      	mov	r0, r4
 80025c4:	f026 ff42 	bl	802944c <_ZdlPvj>
 80025c8:	4620      	mov	r0, r4
 80025ca:	bd10      	pop	{r4, pc}

080025cc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <_ZN12FrontendHeapD1Ev+0x24>)
 80025ce:	b510      	push	{r4, lr}
 80025d0:	4604      	mov	r4, r0
 80025d2:	6003      	str	r3, [r0, #0]
 80025d4:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80025d8:	f7ff ffbc 	bl	8002554 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80025dc:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80025e0:	f7ff ffcc 	bl	800257c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80025e4:	f104 0014 	add.w	r0, r4, #20
 80025e8:	f7ff ffdc 	bl	80025a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80025ec:	4620      	mov	r0, r4
 80025ee:	bd10      	pop	{r4, pc}
 80025f0:	0802bac4 	.word	0x0802bac4

080025f4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80025f4:	b508      	push	{r3, lr}
 80025f6:	4802      	ldr	r0, [pc, #8]	@ (8002600 <__tcf_0+0xc>)
 80025f8:	f7ff ffe8 	bl	80025cc <_ZN12FrontendHeapD1Ev>
 80025fc:	bd08      	pop	{r3, pc}
 80025fe:	bf00      	nop
 8002600:	24001248 	.word	0x24001248

08002604 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002604:	b510      	push	{r4, lr}
 8002606:	4604      	mov	r4, r0
 8002608:	f7ff ffe0 	bl	80025cc <_ZN12FrontendHeapD1Ev>
 800260c:	f44f 711d 	mov.w	r1, #628	@ 0x274
 8002610:	4620      	mov	r0, r4
 8002612:	f026 ff1b 	bl	802944c <_ZdlPvj>
 8002616:	4620      	mov	r0, r4
 8002618:	bd10      	pop	{r4, pc}
	...

0800261c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800261c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002620:	f000 fcfa 	bl	8003018 <_ZN14BitmapDatabase11getInstanceEv>
 8002624:	2400      	movs	r4, #0
 8002626:	4605      	mov	r5, r0
 8002628:	f000 fcfa 	bl	8003020 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800262c:	4623      	mov	r3, r4
 800262e:	4601      	mov	r1, r0
 8002630:	4622      	mov	r2, r4
 8002632:	4628      	mov	r0, r5
 8002634:	9400      	str	r4, [sp, #0]
 8002636:	f01c ff2d 	bl	801f494 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800263a:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <touchgfx_init+0xbc>)
 800263c:	4a27      	ldr	r2, [pc, #156]	@ (80026dc <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800263e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002640:	4d27      	ldr	r5, [pc, #156]	@ (80026e0 <touchgfx_init+0xc4>)
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f001 f89e 	bl	8003784 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8002648:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <touchgfx_init+0xc8>)
 800264a:	4a27      	ldr	r2, [pc, #156]	@ (80026e8 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 800264c:	4827      	ldr	r0, [pc, #156]	@ (80026ec <touchgfx_init+0xd0>)
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	f01c fdd8 	bl	801f204 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	f3bf 8f5b 	dmb	ish
 800265a:	07db      	lsls	r3, r3, #31
 800265c:	d435      	bmi.n	80026ca <touchgfx_init+0xae>
 800265e:	4628      	mov	r0, r5
 8002660:	f026 fef6 	bl	8029450 <__cxa_guard_acquire>
 8002664:	b388      	cbz	r0, 80026ca <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002666:	4c22      	ldr	r4, [pc, #136]	@ (80026f0 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800266a:	f504 768c 	add.w	r6, r4, #280	@ 0x118
        : presenterStorage(pres),
 800266e:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8002672:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8002676:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 800267a:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800267c:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800267e:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002682:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002684:	6126      	str	r6, [r4, #16]
 8002686:	f015 f9a7 	bl	80179d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800268a:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <touchgfx_init+0xdc>)
 800268c:	4640      	mov	r0, r8
 800268e:	6163      	str	r3, [r4, #20]
 8002690:	f015 f9a2 	bl	80179d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <touchgfx_init+0xe0>)
 8002696:	4638      	mov	r0, r7
 8002698:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800269a:	f015 f99d 	bl	80179d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800269e:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <touchgfx_init+0xe4>)
 80026a0:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80026a4:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80026a8:	f001 f8e2 	bl	8003870 <_ZN5ModelC1Ev>
 80026ac:	4622      	mov	r2, r4
 80026ae:	f504 718a 	add.w	r1, r4, #276	@ 0x114
 80026b2:	4630      	mov	r0, r6
 80026b4:	f001 f8d2 	bl	800385c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80026b8:	4630      	mov	r0, r6
 80026ba:	f000 fe25 	bl	8003308 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80026be:	4811      	ldr	r0, [pc, #68]	@ (8002704 <touchgfx_init+0xe8>)
 80026c0:	f027 fa58 	bl	8029b74 <atexit>
 80026c4:	4628      	mov	r0, r5
 80026c6:	f026 fecf 	bl	8029468 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80026ca:	480f      	ldr	r0, [pc, #60]	@ (8002708 <touchgfx_init+0xec>)
}
 80026cc:	b002      	add	sp, #8
 80026ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80026d2:	f7ff b87f 	b.w	80017d4 <_ZN11TouchGFXHAL10initializeEv>
 80026d6:	bf00      	nop
 80026d8:	24015cac 	.word	0x24015cac
 80026dc:	24000418 	.word	0x24000418
 80026e0:	24001244 	.word	0x24001244
 80026e4:	24000438 	.word	0x24000438
 80026e8:	2400041c 	.word	0x2400041c
 80026ec:	24000008 	.word	0x24000008
 80026f0:	24001248 	.word	0x24001248
 80026f4:	0802bac4 	.word	0x0802bac4
 80026f8:	0802ba28 	.word	0x0802ba28
 80026fc:	0802ba5c 	.word	0x0802ba5c
 8002700:	0802ba90 	.word	0x0802ba90
 8002704:	080025f5 	.word	0x080025f5
 8002708:	24000390 	.word	0x24000390

0800270c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 800270c:	4770      	bx	lr
	...

08002710 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002710:	4801      	ldr	r0, [pc, #4]	@ (8002718 <touchgfx_taskEntry+0x8>)
 8002712:	f7ff b875 	b.w	8001800 <_ZN11TouchGFXHAL9taskEntryEv>
 8002716:	bf00      	nop
 8002718:	24000390 	.word	0x24000390

0800271c <_GLOBAL__sub_I_touchgfx_init>:
}
 800271c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800271e:	4e27      	ldr	r6, [pc, #156]	@ (80027bc <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 8002720:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002722:	4c28      	ldr	r4, [pc, #160]	@ (80027c4 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002724:	4630      	mov	r0, r6
static LCD24bpp display;
 8002726:	4d28      	ldr	r5, [pc, #160]	@ (80027c8 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002728:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800272a:	f7ff fb2f 	bl	8001d8c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800272e:	4628      	mov	r0, r5
 8002730:	f01f ff5e 	bl	80225f0 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8002734:	4825      	ldr	r0, [pc, #148]	@ (80027cc <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002736:	f01a ff9b 	bl	801d670 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
        : dma(dmaInterface),
 800273a:	4b25      	ldr	r3, [pc, #148]	@ (80027d0 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          mcuInstrumentation(0),
 800273c:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800273e:	f44f 7180 	mov.w	r1, #256	@ 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002742:	4824      	ldr	r0, [pc, #144]	@ (80027d4 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002744:	861a      	strh	r2, [r3, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8002746:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          lastY(0),
 800274a:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 800274c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          touchController(touchCtrl),
 8002750:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 8002752:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 8002756:	4920      	ldr	r1, [pc, #128]	@ (80027d8 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          vSyncCompensationEnabled(false),
 8002758:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
        instance = this;
 800275c:	491f      	ldr	r1, [pc, #124]	@ (80027dc <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 800275e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002760:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002764:	8001      	strh	r1, [r0, #0]
 8002766:	481e      	ldr	r0, [pc, #120]	@ (80027e0 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 8002768:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800276a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800276e:	481d      	ldr	r0, [pc, #116]	@ (80027e4 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 8002770:	8001      	strh	r1, [r0, #0]
 8002772:	481d      	ldr	r0, [pc, #116]	@ (80027e8 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8002774:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002776:	491d      	ldr	r1, [pc, #116]	@ (80027ec <_GLOBAL__sub_I_touchgfx_init+0xd0>)
          buttonController(0),
 8002778:	e9c3 2204 	strd	r2, r2, [r3, #16]
 800277c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002780:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002784:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8002788:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 800278c:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
        : x(0), y(0), width(0), height(0)
 8002790:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8002794:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lcdRef(display),
 8002798:	e9c3 6501 	strd	r6, r5, [r3, #4]
        DISPLAY_ROTATION = rotate0;
 800279c:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800279e:	4914      	ldr	r1, [pc, #80]	@ (80027f0 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
        : cc_consumed(0),
 80027a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80027a8:	6019      	str	r1, [r3, #0]
          cc_begin(0),
 80027aa:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80027ac:	4911      	ldr	r1, [pc, #68]	@ (80027f4 <_GLOBAL__sub_I_touchgfx_init+0xd8>)
          cc_in(0)
 80027ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80027b2:	4a11      	ldr	r2, [pc, #68]	@ (80027f8 <_GLOBAL__sub_I_touchgfx_init+0xdc>)
 80027b4:	6799      	str	r1, [r3, #120]	@ 0x78
 80027b6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	bf00      	nop
 80027bc:	240004a0 	.word	0x240004a0
 80027c0:	0802b0f0 	.word	0x0802b0f0
 80027c4:	24001240 	.word	0x24001240
 80027c8:	24000438 	.word	0x24000438
 80027cc:	2400041c 	.word	0x2400041c
 80027d0:	24000390 	.word	0x24000390
 80027d4:	24015c3c 	.word	0x24015c3c
 80027d8:	01000001 	.word	0x01000001
 80027dc:	24015c48 	.word	0x24015c48
 80027e0:	24015c42 	.word	0x24015c42
 80027e4:	24015c3e 	.word	0x24015c3e
 80027e8:	24015c44 	.word	0x24015c44
 80027ec:	24015c40 	.word	0x24015c40
 80027f0:	0802b27c 	.word	0x0802b27c
 80027f4:	01010000 	.word	0x01010000
 80027f8:	0802b0c8 	.word	0x0802b0c8

080027fc <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80027fc:	4801      	ldr	r0, [pc, #4]	@ (8002804 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80027fe:	f7ff b957 	b.w	8001ab0 <_ZN8STM32DMAD1Ev>
 8002802:	bf00      	nop
 8002804:	240004a0 	.word	0x240004a0

08002808 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002808:	2000      	movs	r0, #0
 800280a:	4770      	bx	lr

0800280c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800280c:	8081      	strh	r1, [r0, #4]
    }
 800280e:	4770      	bx	lr

08002810 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002810:	80c1      	strh	r1, [r0, #6]
    }
 8002812:	4770      	bx	lr

08002814 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002814:	8101      	strh	r1, [r0, #8]
    }
 8002816:	4770      	bx	lr

08002818 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002818:	8141      	strh	r1, [r0, #10]
    }
 800281a:	4770      	bx	lr

0800281c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800281c:	4770      	bx	lr

0800281e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800281e:	4770      	bx	lr

08002820 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002820:	4770      	bx	lr

08002822 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002822:	4770      	bx	lr

08002824 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002824:	4770      	bx	lr

08002826 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002826:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002828:	88c4      	ldrh	r4, [r0, #6]
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	1b12      	subs	r2, r2, r4
 800282e:	8884      	ldrh	r4, [r0, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002832:	1b09      	subs	r1, r1, r4
 8002834:	b212      	sxth	r2, r2
    }
 8002836:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800283a:	b209      	sxth	r1, r1
 800283c:	4718      	bx	r3

0800283e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800283e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002842:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800284e:	6010      	str	r0, [r2, #0]
    }
 8002850:	4770      	bx	lr

08002852 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002852:	2000      	movs	r0, #0
 8002854:	4770      	bx	lr

08002856 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002856:	888b      	ldrh	r3, [r1, #4]
 8002858:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800285a:	2001      	movs	r0, #1
 800285c:	4770      	bx	lr

0800285e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800285e:	4770      	bx	lr

08002860 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002860:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8002864:	4770      	bx	lr

08002866 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002866:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800286a:	4770      	bx	lr

0800286c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800286c:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800286e:	b510      	push	{r4, lr}
        return rect.width;
 8002870:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002874:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002878:	8002      	strh	r2, [r0, #0]
 800287a:	8042      	strh	r2, [r0, #2]
 800287c:	8084      	strh	r4, [r0, #4]
 800287e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002880:	bd10      	pop	{r4, pc}

08002882 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002882:	2200      	movs	r2, #0
 8002884:	8002      	strh	r2, [r0, #0]
 8002886:	8042      	strh	r2, [r0, #2]
 8002888:	8082      	strh	r2, [r0, #4]
 800288a:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800288c:	4770      	bx	lr

0800288e <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800288e:	7701      	strb	r1, [r0, #28]
    }
 8002890:	4770      	bx	lr

08002892 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8002892:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8002896:	4770      	bx	lr

08002898 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8002898:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 800289c:	4770      	bx	lr

0800289e <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800289e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80028a2:	4770      	bx	lr

080028a4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80028a4:	2001      	movs	r0, #1
 80028a6:	4770      	bx	lr

080028a8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80028a8:	3098      	adds	r0, #152	@ 0x98
 80028aa:	4770      	bx	lr

080028ac <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80028ac:	308c      	adds	r0, #140	@ 0x8c
 80028ae:	4770      	bx	lr

080028b0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80028b0:	3084      	adds	r0, #132	@ 0x84
 80028b2:	4770      	bx	lr

080028b4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80028b4:	4770      	bx	lr
	...

080028b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80028ba:	2290      	movs	r2, #144	@ 0x90
 80028bc:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 80028c0:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80028cc:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80028ce:	490a      	ldr	r1, [pc, #40]	@ (80028f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80028d0:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80028d2:	480a      	ldr	r0, [pc, #40]	@ (80028fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80028d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80028de:	6911      	ldr	r1, [r2, #16]
 80028e0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80028e4:	3901      	subs	r1, #1
 80028e6:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80028e8:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80028ea:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80028f2:	4770      	bx	lr
 80028f4:	50001000 	.word	0x50001000
 80028f8:	240014be 	.word	0x240014be
 80028fc:	240014bc 	.word	0x240014bc

08002900 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002900:	4b01      	ldr	r3, [pc, #4]	@ (8002908 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002902:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8002906:	4770      	bx	lr
 8002908:	50001000 	.word	0x50001000

0800290c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800290c:	4b02      	ldr	r3, [pc, #8]	@ (8002918 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800290e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002910:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002916:	4770      	bx	lr
 8002918:	50001000 	.word	0x50001000

0800291c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800291c:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800291e:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8002922:	4770      	bx	lr

08002924 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002924:	4770      	bx	lr

08002926 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002926:	4770      	bx	lr

08002928 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8002928:	4770      	bx	lr

0800292a <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 800292a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800292e:	4611      	mov	r1, r2
 8002930:	6840      	ldr	r0, [r0, #4]
 8002932:	6803      	ldr	r3, [r0, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4718      	bx	r3

08002938 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8002938:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800293c:	4770      	bx	lr

0800293e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800293e:	b510      	push	{r4, lr}
 8002940:	4604      	mov	r4, r0
 8002942:	2148      	movs	r1, #72	@ 0x48
 8002944:	f026 fd82 	bl	802944c <_ZdlPvj>
 8002948:	4620      	mov	r0, r4
 800294a:	bd10      	pop	{r4, pc}

0800294c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800294c:	b510      	push	{r4, lr}
 800294e:	4604      	mov	r4, r0
 8002950:	212c      	movs	r1, #44	@ 0x2c
 8002952:	f026 fd7b 	bl	802944c <_ZdlPvj>
 8002956:	4620      	mov	r0, r4
 8002958:	bd10      	pop	{r4, pc}

0800295a <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800295a:	b510      	push	{r4, lr}
 800295c:	4604      	mov	r4, r0
 800295e:	21bc      	movs	r1, #188	@ 0xbc
 8002960:	f026 fd74 	bl	802944c <_ZdlPvj>
 8002964:	4620      	mov	r0, r4
 8002966:	bd10      	pop	{r4, pc}

08002968 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4604      	mov	r4, r0
    HAL::initialize();
 800296c:	f015 fb31 	bl	8017fd2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8002974:	f019 fd4e 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>
 8002978:	4601      	mov	r1, r0
 800297a:	4620      	mov	r0, r4
 800297c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 8002982:	4620      	mov	r0, r4
 8002984:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8002988:	2300      	movs	r3, #0
 800298a:	4906      	ldr	r1, [pc, #24]	@ (80029a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800298c:	47a8      	blx	r5
        mjpegDecoders[index] = &decoder;
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002990:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002992:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002994:	4a06      	ldr	r2, [pc, #24]	@ (80029b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8002998:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800299a:	4a06      	ldr	r2, [pc, #24]	@ (80029b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	700bf400 	.word	0x700bf400
 80029a4:	7005fa00 	.word	0x7005fa00
 80029a8:	24001580 	.word	0x24001580
 80029ac:	240015c8 	.word	0x240015c8
 80029b0:	7011ee00 	.word	0x7011ee00
 80029b4:	0005fa00 	.word	0x0005fa00

080029b8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80029b8:	f015 baf2 	b.w	8017fa0 <_ZN8touchgfx3HAL10beginFrameEv>

080029bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80029bc:	f015 baba 	b.w	8017f34 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080029c0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80029c0:	f015 bc1b 	b.w	80181fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080029c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80029ca:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	f005 fe4e 	bl	8008670 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80029d4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80029d6:	f005 fe6e 	bl	80086b6 <osMutexRelease>
        streams[handle].isActive = false;
 80029da:	2324      	movs	r3, #36	@ 0x24
 80029dc:	fb03 4505 	mla	r5, r3, r5, r4
 80029e0:	2300      	movs	r3, #0
 80029e2:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80029e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80029ea:	b90b      	cbnz	r3, 80029f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80029ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029ee:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80029f0:	bd38      	pop	{r3, r4, r5, pc}

080029f2 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80029f2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80029f6:	b112      	cbz	r2, 80029fe <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80029f8:	6803      	ldr	r3, [r0, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4718      	bx	r3
    }
 80029fe:	4770      	bx	lr

08002a00 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002a00:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002a02:	6953      	ldr	r3, [r2, #20]
 8002a04:	03db      	lsls	r3, r3, #15
{
 8002a06:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002a08:	d51e      	bpl.n	8002a48 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002a10:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002a14:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a18:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a1c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002a20:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002a24:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a26:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a2a:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a2c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002a30:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a32:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8002a36:	d2f9      	bcs.n	8002a2c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002a38:	3b20      	subs	r3, #32
 8002a3a:	f113 0f20 	cmn.w	r3, #32
 8002a3e:	d1f2      	bne.n	8002a26 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a44:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002a48:	bd70      	pop	{r4, r5, r6, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8002a50:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002a52:	b131      	cbz	r1, 8002a62 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8002a54:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8002a56:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8002a5c:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8002a5e:	f027 f86b 	bl	8029b38 <__assert_func>
    }
 8002a62:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8002a66:	bd08      	pop	{r3, pc}
 8002a68:	0802bad0 	.word	0x0802bad0
 8002a6c:	0802bae4 	.word	0x0802bae4
 8002a70:	0802bc6e 	.word	0x0802bc6e

08002a74 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002a74:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002a76:	b131      	cbz	r1, 8002a86 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002a7a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8002a7e:	4a06      	ldr	r2, [pc, #24]	@ (8002a98 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002a80:	4806      	ldr	r0, [pc, #24]	@ (8002a9c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002a82:	f027 f859 	bl	8029b38 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002a86:	6840      	ldr	r0, [r0, #4]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	6803      	ldr	r3, [r0, #0]
    }
 8002a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	4718      	bx	r3
 8002a94:	0802bad0 	.word	0x0802bad0
 8002a98:	0802bcb1 	.word	0x0802bcb1
 8002a9c:	0802bc6e 	.word	0x0802bc6e

08002aa0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002aa0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002aa2:	b129      	cbz	r1, 8002ab0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8002aa6:	2179      	movs	r1, #121	@ 0x79
 8002aa8:	4a03      	ldr	r2, [pc, #12]	@ (8002ab8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8002aaa:	4804      	ldr	r0, [pc, #16]	@ (8002abc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8002aac:	f027 f844 	bl	8029b38 <__assert_func>
    }
 8002ab0:	68c0      	ldr	r0, [r0, #12]
 8002ab2:	bd08      	pop	{r3, pc}
 8002ab4:	0802bad0 	.word	0x0802bad0
 8002ab8:	0802be5f 	.word	0x0802be5f
 8002abc:	0802bc6e 	.word	0x0802bc6e

08002ac0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002ac4:	b129      	cbz	r1, 8002ad2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002ac6:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002ac8:	21a2      	movs	r1, #162	@ 0xa2
 8002aca:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002acc:	4819      	ldr	r0, [pc, #100]	@ (8002b34 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8002ace:	f027 f833 	bl	8029b38 <__assert_func>
        switch (cmd)
 8002ad2:	2a05      	cmp	r2, #5
 8002ad4:	d815      	bhi.n	8002b02 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002ad6:	e8df f002 	tbb	[pc, r2]
 8002ada:	1103      	.short	0x1103
 8002adc:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002ae0:	6840      	ldr	r0, [r0, #4]
 8002ae2:	6803      	ldr	r3, [r0, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	4798      	blx	r3
 8002ae8:	b158      	cbz	r0, 8002b02 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002af0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8002af4:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8002af6:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8002afa:	e002      	b.n	8002b02 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8002b02:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002b04:	6203      	str	r3, [r0, #32]
 8002b06:	e7f5      	b.n	8002af4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8002b08:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8002b10:	e7f0      	b.n	8002af4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	6203      	str	r3, [r0, #32]
            break;
 8002b1c:	e7f1      	b.n	8002b02 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8002b1e:	3b00      	subs	r3, #0
 8002b20:	bf18      	it	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8002b28:	e7eb      	b.n	8002b02 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002b2a:	bf00      	nop
 8002b2c:	0802bad0 	.word	0x0802bad0
 8002b30:	0802c014 	.word	0x0802c014
 8002b34:	0802bc6e 	.word	0x0802bc6e

08002b38 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002b40:	b12c      	cbz	r4, 8002b4e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8002b44:	2190      	movs	r1, #144	@ 0x90
 8002b46:	4a06      	ldr	r2, [pc, #24]	@ (8002b60 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8002b48:	4806      	ldr	r0, [pc, #24]	@ (8002b64 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8002b4a:	f026 fff5 	bl	8029b38 <__assert_func>
        stream.frameNumber = 0;
 8002b4e:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002b50:	6840      	ldr	r0, [r0, #4]
 8002b52:	6803      	ldr	r3, [r0, #0]
    }
 8002b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4718      	bx	r3
 8002b5c:	0802bad0 	.word	0x0802bad0
 8002b60:	0802c1e8 	.word	0x0802c1e8
 8002b64:	0802bc6e 	.word	0x0802bc6e

08002b68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002b68:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002b6a:	b129      	cbz	r1, 8002b78 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8002b6e:	2182      	movs	r1, #130	@ 0x82
 8002b70:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8002b72:	4806      	ldr	r0, [pc, #24]	@ (8002b8c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8002b74:	f026 ffe0 	bl	8029b38 <__assert_func>
        stream.tickCount = 0;
 8002b78:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002b7c:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002b80:	bd08      	pop	{r3, pc}
 8002b82:	bf00      	nop
 8002b84:	0802bad0 	.word	0x0802bad0
 8002b88:	0802c3c3 	.word	0x0802c3c3
 8002b8c:	0802bc6e 	.word	0x0802bc6e

08002b90 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002b90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002b94:	b510      	push	{r4, lr}
 8002b96:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002b98:	b153      	cbz	r3, 8002bb0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8002b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8002ba0:	f005 fd66 	bl	8008670 <osMutexAcquire>
            firstDrawThisFrame = false;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8002bb0:	bd10      	pop	{r4, pc}

08002bb2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002bb2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002bb6:	b11a      	cbz	r2, 8002bc0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002bb8:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002bbc:	b102      	cbz	r2, 8002bc0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002bbe:	6018      	str	r0, [r3, #0]
        }
    }
 8002bc0:	4770      	bx	lr
	...

08002bc4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002bca:	b129      	cbz	r1, 8002bd8 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002bce:	21d0      	movs	r1, #208	@ 0xd0
 8002bd0:	4a13      	ldr	r2, [pc, #76]	@ (8002c20 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8002bd2:	4814      	ldr	r0, [pc, #80]	@ (8002c24 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8002bd4:	f026 ffb0 	bl	8029b38 <__assert_func>
        if (stream.isPlaying)
 8002bd8:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8002bdc:	b133      	cbz	r3, 8002bec <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002be6:	6963      	ldr	r3, [r4, #20]
 8002be8:	4413      	add	r3, r2
 8002bea:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002bec:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8002bf0:	b90b      	cbnz	r3, 8002bf6 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8002bf2:	2001      	movs	r0, #1
    }
 8002bf4:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002bf6:	68a3      	ldr	r3, [r4, #8]
 8002bf8:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8002bfa:	6803      	ldr	r3, [r0, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002c00:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8002c02:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8002c06:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d1f1      	bne.n	8002bf2 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8002c0e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8002c16:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8002c1a:	e7eb      	b.n	8002bf4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002c1c:	0802bad0 	.word	0x0802bad0
 8002c20:	0802c57f 	.word	0x0802c57f
 8002c24:	0802bc6e 	.word	0x0802bc6e
 8002c28:	24015c48 	.word	0x24015c48

08002c2c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002c2c:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8002c2e:	4c17      	ldr	r4, [pc, #92]	@ (8002c8c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 8002c30:	f015 f9c2 	bl	8017fb8 <_ZN8touchgfx3HAL8endFrameEv>
 8002c34:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8002c38:	b913      	cbnz	r3, 8002c40 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 8002c3a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8002c3e:	b1ab      	cbz	r3, 8002c6c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002c40:	69e1      	ldr	r1, [r4, #28]
 8002c42:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002c46:	4353      	muls	r3, r2
 8002c48:	6922      	ldr	r2, [r4, #16]
 8002c4a:	434a      	muls	r2, r1
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d30d      	bcc.n	8002c6c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 8002c50:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8002c54:	b138      	cbz	r0, 8002c66 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002c5c:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002c5e:	bf98      	it	ls
 8002c60:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002c64:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8002c6c:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8002c6e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8002c70:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8002c74:	f005 fdb4 	bl	80087e0 <osSemaphoreRelease>
        if (uiHasMutex)
 8002c78:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002c7c:	b12b      	cbz	r3, 8002c8a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 8002c7e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002c80:	f005 fd19 	bl	80086b6 <osMutexRelease>
            uiHasMutex = false;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8002c8a:	bd10      	pop	{r4, pc}
 8002c8c:	24001580 	.word	0x24001580

08002c90 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002c92:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002ca6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002cae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002cbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cc2:	f3bf 8f6f 	isb	sy
}
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002cd0:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8002cd4:	b9d8      	cbnz	r0, 8002d0e <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002cda:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8002cdc:	2501      	movs	r5, #1
                streams[i] = Stream();
 8002cde:	60d8      	str	r0, [r3, #12]
 8002ce0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002ce2:	f506 22bf 	add.w	r2, r6, #391168	@ 0x5f800
                streams[i] = Stream();
 8002ce6:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002ce8:	f502 7200 	add.w	r2, r2, #512	@ 0x200
                streams[i] = Stream();
 8002cec:	6158      	str	r0, [r3, #20]
 8002cee:	6198      	str	r0, [r3, #24]
 8002cf0:	61d8      	str	r0, [r3, #28]
 8002cf2:	6218      	str	r0, [r3, #32]
 8002cf4:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8002cf6:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8002cf8:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002cfc:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8002d00:	443c      	add	r4, r7
 8002d02:	42a2      	cmp	r2, r4
 8002d04:	d90a      	bls.n	8002d1c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8002d08:	2152      	movs	r1, #82	@ 0x52
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d38 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8002d0c:	e003      	b.n	8002d16 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002d10:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8002d14:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002d16:	480b      	ldr	r0, [pc, #44]	@ (8002d44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8002d18:	f026 ff0e 	bl	8029b38 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002d1c:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002d20:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        format = bufferFormat;
 8002d24:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8002d28:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8002d2a:	f44f 7388 	mov.w	r3, #272	@ 0x110
        buffer = videoBuffer;
 8002d2e:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8002d30:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d34:	0802c8d7 	.word	0x0802c8d7
 8002d38:	0802c912 	.word	0x0802c912
 8002d3c:	0802c720 	.word	0x0802c720
 8002d40:	0802c750 	.word	0x0802c750
 8002d44:	0802bc6e 	.word	0x0802bc6e

08002d48 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002d48:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002d4a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002d4c:	4e12      	ldr	r6, [pc, #72]	@ (8002d98 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8002d4e:	4604      	mov	r4, r0
 8002d50:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002d52:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002d54:	6003      	str	r3, [r0, #0]
 8002d56:	6833      	ldr	r3, [r6, #0]
 8002d58:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002d5c:	b10a      	cbz	r2, 8002d62 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8002d5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d60:	b900      	cbnz	r0, 8002d64 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8002d62:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002d64:	6803      	ldr	r3, [r0, #0]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	4798      	blx	r3
 8002d6a:	1e43      	subs	r3, r0, #1
 8002d6c:	425d      	negs	r5, r3
 8002d6e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8002d70:	6833      	ldr	r3, [r6, #0]
 8002d72:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002d74:	b130      	cbz	r0, 8002d84 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002d76:	6803      	ldr	r3, [r0, #0]
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	4798      	blx	r3
 8002d7c:	2801      	cmp	r0, #1
 8002d7e:	bf08      	it	eq
 8002d80:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8002d84:	b92d      	cbnz	r5, 8002d92 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8002d88:	2127      	movs	r1, #39	@ 0x27
 8002d8a:	4a06      	ldr	r2, [pc, #24]	@ (8002da4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8002d8c:	4806      	ldr	r0, [pc, #24]	@ (8002da8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8002d8e:	f026 fed3 	bl	8029b38 <__assert_func>
    }
 8002d92:	4620      	mov	r0, r4
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	bf00      	nop
 8002d98:	24015c48 	.word	0x24015c48
 8002d9c:	0802cbb8 	.word	0x0802cbb8
 8002da0:	0802cab5 	.word	0x0802cab5
 8002da4:	0802cb13 	.word	0x0802cb13
 8002da8:	0802cb4c 	.word	0x0802cb4c

08002dac <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8002dac:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8002dae:	4e24      	ldr	r6, [pc, #144]	@ (8002e40 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8002db0:	6835      	ldr	r5, [r6, #0]
 8002db2:	f3bf 8f5b 	dmb	ish
 8002db6:	f015 0501 	ands.w	r5, r5, #1
 8002dba:	d13f      	bne.n	8002e3c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f026 fb47 	bl	8029450 <__cxa_guard_acquire>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d03a      	beq.n	8002e3c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8002dc6:	4c1f      	ldr	r4, [pc, #124]	@ (8002e44 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8002dca:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8002dce:	6125      	str	r5, [r4, #16]
 8002dd0:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8002dd2:	62a5      	str	r5, [r4, #40]	@ 0x28
 8002dd4:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8002dd6:	e9c4 3500 	strd	r3, r5, [r4]
 8002dda:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8002dde:	f01a fea6 	bl	801db2e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8002de2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002de6:	f017 fb29 	bl	801a43c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002dec:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8002dee:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8002df0:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8002df2:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8002df6:	f7ff ffa7 	bl	8002d48 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8002dfc:	4816      	ldr	r0, [pc, #88]	@ (8002e58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8002dfe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8002e02:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8002e04:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8002e08:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8002e0c:	2364      	movs	r3, #100	@ 0x64
 8002e0e:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8002e12:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8002e16:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8002e20:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8002e24:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8002e28:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8002e2e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8002e32:	f026 fe9f 	bl	8029b74 <atexit>
 8002e36:	4630      	mov	r0, r6
 8002e38:	f026 fb16 	bl	8029468 <__cxa_guard_release>
}
 8002e3c:	4801      	ldr	r0, [pc, #4]	@ (8002e44 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	240014c0 	.word	0x240014c0
 8002e44:	240014c4 	.word	0x240014c4
 8002e48:	0802f554 	.word	0x0802f554
 8002e4c:	0802cbd8 	.word	0x0802cbd8
 8002e50:	0802cc50 	.word	0x0802cc50
 8002e54:	0802f5a0 	.word	0x0802f5a0
 8002e58:	080028b5 	.word	0x080028b5
 8002e5c:	0802f5d8 	.word	0x0802f5d8

08002e60 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002e60:	b510      	push	{r4, lr}
        return instance;
 8002e62:	4c14      	ldr	r4, [pc, #80]	@ (8002eb4 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	b323      	cbz	r3, 8002eb2 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <HAL_LTDC_LineEventCallback+0x58>)
 8002e6a:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <HAL_LTDC_LineEventCallback+0x5c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	8811      	ldrh	r1, [r2, #0]
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d113      	bne.n	8002e9c <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002e74:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_LTDC_LineEventCallback+0x60>)
 8002e76:	8819      	ldrh	r1, [r3, #0]
 8002e78:	f003 f8bc 	bl	8005ff4 <HAL_LTDC_ProgramLineEvent>
 8002e7c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002e7e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002e82:	3301      	adds	r3, #1
 8002e84:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002e88:	f7fe fde6 	bl	8001a58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	f015 fddf 	bl	8018a50 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002e92:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002e98:	f7fe bbc4 	b.w	8001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002e9c:	f003 f8aa 	bl	8005ff4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002ea0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002ea8:	2000      	movs	r0, #0
    }
 8002eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002eae:	f7fe bbeb 	b.w	8001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002eb2:	bd10      	pop	{r4, pc}
 8002eb4:	24015c48 	.word	0x24015c48
 8002eb8:	50001000 	.word	0x50001000
 8002ebc:	240014be 	.word	0x240014be
 8002ec0:	240014bc 	.word	0x240014bc

08002ec4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ec8:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002eca:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002ecc:	f44f 67b4 	mov.w	r7, #1440	@ 0x5a0
            SEM_WAIT(semDecode);
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002ed6:	f005 fc57 	bl	8008788 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002eda:	f04f 31ff 	mov.w	r1, #4294967295
 8002ede:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002ee0:	f005 fbc6 	bl	8008670 <osMutexAcquire>
                if (stream.doDecode)
 8002ee4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002ee8:	b343      	cbz	r3, 8002f3c <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002eea:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002eec:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8002ef0:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8002ef2:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8002ef6:	f1b8 0f00 	cmp.w	r8, #0
 8002efa:	d023      	beq.n	8002f44 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	4641      	mov	r1, r8
 8002f00:	4628      	mov	r0, r5
 8002f02:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002f0e:	9700      	str	r7, [sp, #0]
 8002f10:	4628      	mov	r0, r5
 8002f12:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002f16:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002f1a:	68a1      	ldr	r1, [r4, #8]
 8002f1c:	47c0      	blx	r8
                    stream.frameCount++;
 8002f1e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002f20:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8002f24:	3301      	adds	r3, #1
 8002f26:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002f28:	b1f0      	cbz	r0, 8002f68 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	4798      	blx	r3
 8002f32:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8002f34:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002f36:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002f38:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002f3c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002f3e:	f005 fbba 	bl	80086b6 <osMutexRelease>
        while (1)
 8002f42:	e7c5      	b.n	8002ed0 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8002f44:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	d0de      	beq.n	8002f08 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8002f50:	4798      	blx	r3
 8002f52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002f54:	4401      	add	r1, r0
 8002f56:	4628      	mov	r0, r5
 8002f58:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002f5a:	6923      	ldr	r3, [r4, #16]
 8002f5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8002f5e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8002f62:	4413      	add	r3, r2
 8002f64:	6123      	str	r3, [r4, #16]
 8002f66:	e7cf      	b.n	8002f08 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8002f68:	2001      	movs	r0, #1
 8002f6a:	e7e3      	b.n	8002f34 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08002f6c <videoTaskFunc>:
    videoController.decoderTaskEntry();
 8002f6c:	4801      	ldr	r0, [pc, #4]	@ (8002f74 <videoTaskFunc+0x8>)
{
 8002f6e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002f70:	f7ff ffa8 	bl	8002ec4 <_ZN25DedicatedBufferControllerILm1ELm480ELm272ELm1440ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8002f74:	24001580 	.word	0x24001580

08002f78 <_GLOBAL__sub_I_lineBuffer>:
}
 8002f78:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8002f7a:	4915      	ldr	r1, [pc, #84]	@ (8002fd0 <_GLOBAL__sub_I_lineBuffer+0x58>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002f7c:	2500      	movs	r5, #0
 8002f7e:	4815      	ldr	r0, [pc, #84]	@ (8002fd4 <_GLOBAL__sub_I_lineBuffer+0x5c>)
 8002f80:	f7fe ffce 	bl	8001f20 <_ZN20SoftwareMJPEGDecoderC1EPh>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002f84:	4c14      	ldr	r4, [pc, #80]	@ (8002fd8 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <_GLOBAL__sub_I_lineBuffer+0x64>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002f94:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002f96:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002f98:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002f9a:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002f9e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002fa2:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002fa6:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8002faa:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002fae:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8002fb2:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8002fb6:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002fba:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8002fbe:	f005 fb99 	bl	80086f4 <osSemaphoreNew>
 8002fc2:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f005 fb1e 	bl	8008606 <osMutexNew>
 8002fca:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8002fcc:	bd38      	pop	{r3, r4, r5, pc}
 8002fce:	bf00      	nop
 8002fd0:	24001610 	.word	0x24001610
 8002fd4:	240015c8 	.word	0x240015c8
 8002fd8:	24001580 	.word	0x24001580
 8002fdc:	0802cc9c 	.word	0x0802cc9c

08002fe0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002fe0:	4770      	bx	lr

08002fe2 <_ZN23ApplicationFontProviderD0Ev>:
 8002fe2:	b510      	push	{r4, lr}
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	f026 fa30 	bl	802944c <_ZdlPvj>
 8002fec:	4620      	mov	r0, r4
 8002fee:	bd10      	pop	{r4, pc}

08002ff0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002ff0:	2901      	cmp	r1, #1
{
 8002ff2:	b508      	push	{r3, lr}
    switch (typography)
 8002ff4:	d006      	beq.n	8003004 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002ff6:	2902      	cmp	r1, #2
 8002ff8:	d008      	beq.n	800300c <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002ffa:	b959      	cbnz	r1, 8003014 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002ffc:	f000 fc00 	bl	8003800 <_ZN17TypedTextDatabase8getFontsEv>
 8003000:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003002:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003004:	f000 fbfc 	bl	8003800 <_ZN17TypedTextDatabase8getFontsEv>
 8003008:	6840      	ldr	r0, [r0, #4]
 800300a:	e7fa      	b.n	8003002 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800300c:	f000 fbf8 	bl	8003800 <_ZN17TypedTextDatabase8getFontsEv>
 8003010:	6880      	ldr	r0, [r0, #8]
 8003012:	e7f6      	b.n	8003002 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003014:	2000      	movs	r0, #0
 8003016:	e7f4      	b.n	8003002 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003018 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003018:	4800      	ldr	r0, [pc, #0]	@ (800301c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800301a:	4770      	bx	lr
 800301c:	0802ccec 	.word	0x0802ccec

08003020 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003020:	2002      	movs	r0, #2
 8003022:	4770      	bx	lr

08003024 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003024:	b513      	push	{r0, r1, r4, lr}
 8003026:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003028:	b151      	cbz	r1, 8003040 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800302a:	6803      	ldr	r3, [r0, #0]
 800302c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800302e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003030:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003034:	689c      	ldr	r4, [r3, #8]
 8003036:	f10d 0303 	add.w	r3, sp, #3
 800303a:	47a0      	blx	r4
        return glyph;
    }
 800303c:	b002      	add	sp, #8
 800303e:	bd10      	pop	{r4, pc}
            return 0;
 8003040:	4608      	mov	r0, r1
 8003042:	e7fb      	b.n	800303c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003044 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003044:	89c0      	ldrh	r0, [r0, #14]
 8003046:	4770      	bx	lr

08003048 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003048:	8a00      	ldrh	r0, [r0, #16]
 800304a:	4770      	bx	lr

0800304c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800304c:	88c0      	ldrh	r0, [r0, #6]
 800304e:	4770      	bx	lr

08003050 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003050:	8880      	ldrh	r0, [r0, #4]
 8003052:	4770      	bx	lr

08003054 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003054:	7a80      	ldrb	r0, [r0, #10]
    }
 8003056:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800305a:	4770      	bx	lr

0800305c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800305c:	7a80      	ldrb	r0, [r0, #10]
    }
 800305e:	09c0      	lsrs	r0, r0, #7
 8003060:	4770      	bx	lr

08003062 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003062:	2000      	movs	r0, #0
 8003064:	4770      	bx	lr
	...

08003068 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003068:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003070 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	00000000 	.word	0x00000000

08003074 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003074:	4770      	bx	lr

08003076 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003076:	4770      	bx	lr

08003078 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003078:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800307c:	6808      	ldr	r0, [r1, #0]
 800307e:	6849      	ldr	r1, [r1, #4]
 8003080:	c303      	stmia	r3!, {r0, r1}
    }
 8003082:	4770      	bx	lr

08003084 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003084:	4770      	bx	lr

08003086 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003086:	4770      	bx	lr

08003088 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003088:	6041      	str	r1, [r0, #4]
    }
 800308a:	4770      	bx	lr

0800308c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800308c:	4770      	bx	lr
	...

08003090 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003092:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003096:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800309a:	2300      	movs	r3, #0
 800309c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80030a0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80030a4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	08003151 	.word	0x08003151

080030b0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80030b0:	2301      	movs	r3, #1
 80030b2:	7203      	strb	r3, [r0, #8]
    }
 80030b4:	4770      	bx	lr

080030b6 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80030b6:	4770      	bx	lr

080030b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80030b8:	4770      	bx	lr

080030ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80030ba:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80030bc:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80030be:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80030c0:	68c2      	ldr	r2, [r0, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	1054      	asrs	r4, r2, #1
 80030c6:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80030ca:	07d2      	lsls	r2, r2, #31
 80030cc:	bf48      	it	mi
 80030ce:	590a      	ldrmi	r2, [r1, r4]
    }
 80030d0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80030d4:	bf48      	it	mi
 80030d6:	58d3      	ldrmi	r3, [r2, r3]
 80030d8:	4718      	bx	r3

080030da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80030da:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80030dc:	6840      	ldr	r0, [r0, #4]
 80030de:	b130      	cbz	r0, 80030ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	b91a      	cbnz	r2, 80030ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80030e4:	68d8      	ldr	r0, [r3, #12]
 80030e6:	f000 0001 	and.w	r0, r0, #1
 80030ea:	4770      	bx	lr
 80030ec:	2001      	movs	r0, #1
    }
 80030ee:	4770      	bx	lr

080030f0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4604      	mov	r4, r0
 80030f4:	210c      	movs	r1, #12
 80030f6:	f026 f9a9 	bl	802944c <_ZdlPvj>
 80030fa:	4620      	mov	r0, r4
 80030fc:	bd10      	pop	{r4, pc}

080030fe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80030fe:	b510      	push	{r4, lr}
 8003100:	4604      	mov	r4, r0
 8003102:	2110      	movs	r1, #16
 8003104:	f026 f9a2 	bl	802944c <_ZdlPvj>
 8003108:	4620      	mov	r0, r4
 800310a:	bd10      	pop	{r4, pc}

0800310c <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003114:	f026 f99a 	bl	802944c <_ZdlPvj>
 8003118:	4620      	mov	r0, r4
 800311a:	bd10      	pop	{r4, pc}

0800311c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800311c:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 800311e:	f019 f979 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>
 8003122:	6803      	ldr	r3, [r0, #0]
    }
 8003124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312a:	4718      	bx	r3

0800312c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800312c:	b510      	push	{r4, lr}
 800312e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003130:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003134:	b158      	cbz	r0, 800314e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4798      	blx	r3
 800313c:	b138      	cbz	r0, 800314e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800313e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800314e:	bd10      	pop	{r4, pc}

08003150 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003150:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003154:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003158:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800315a:	68b0      	ldr	r0, [r6, #8]
 800315c:	6803      	ldr	r3, [r0, #0]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4798      	blx	r3
 8003162:	28cb      	cmp	r0, #203	@ 0xcb
 8003164:	d805      	bhi.n	8003172 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8003166:	4b44      	ldr	r3, [pc, #272]	@ (8003278 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 8003168:	21a3      	movs	r1, #163	@ 0xa3
 800316a:	4a44      	ldr	r2, [pc, #272]	@ (800327c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800316c:	4844      	ldr	r0, [pc, #272]	@ (8003280 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800316e:	f026 fce3 	bl	8029b38 <__assert_func>
 8003172:	6870      	ldr	r0, [r6, #4]
 8003174:	6803      	ldr	r3, [r0, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4798      	blx	r3
 800317a:	280f      	cmp	r0, #15
 800317c:	d803      	bhi.n	8003186 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 800317e:	4b41      	ldr	r3, [pc, #260]	@ (8003284 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003180:	21a4      	movs	r1, #164	@ 0xa4
 8003182:	4a3e      	ldr	r2, [pc, #248]	@ (800327c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003184:	e7f2      	b.n	800316c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003186:	68f0      	ldr	r0, [r6, #12]
 8003188:	6803      	ldr	r3, [r0, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4798      	blx	r3
 800318e:	280b      	cmp	r0, #11
 8003190:	d803      	bhi.n	800319a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 8003192:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003194:	21a5      	movs	r1, #165	@ 0xa5
 8003196:	4a39      	ldr	r2, [pc, #228]	@ (800327c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003198:	e7e8      	b.n	800316c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 800319a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003290 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 800319e:	f019 f939 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80031a2:	3004      	adds	r0, #4
 80031a4:	f019 f95b 	bl	801c45e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80031a8:	f8d9 0000 	ldr.w	r0, [r9]
 80031ac:	b110      	cbz	r0, 80031b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80031ae:	6803      	ldr	r3, [r0, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4798      	blx	r3
    if (*currentTrans)
 80031b4:	f8d9 0000 	ldr.w	r0, [r9]
 80031b8:	b110      	cbz	r0, 80031c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80031ba:	6803      	ldr	r3, [r0, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4798      	blx	r3
    if (*currentScreen)
 80031c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003294 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 80031c4:	f8d8 0000 	ldr.w	r0, [r8]
 80031c8:	b110      	cbz	r0, 80031d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4798      	blx	r3
    if (*currentPresenter)
 80031d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80031d4:	b110      	cbz	r0, 80031dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4798      	blx	r3
    if (*currentScreen)
 80031dc:	f8d8 0000 	ldr.w	r0, [r8]
 80031e0:	b110      	cbz	r0, 80031e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80031e2:	6803      	ldr	r3, [r0, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4798      	blx	r3
    if (*currentPresenter)
 80031e8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80031ec:	b110      	cbz	r0, 80031f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80031ee:	6803      	ldr	r3, [r0, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80031f4:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80031f6:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80031f8:	f04f 0b00 	mov.w	fp, #0
 80031fc:	6803      	ldr	r3, [r0, #0]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	4798      	blx	r3
 8003202:	4b22      	ldr	r3, [pc, #136]	@ (800328c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003204:	4604      	mov	r4, r0
 8003206:	f8c0 b004 	str.w	fp, [r0, #4]
 800320a:	f880 b008 	strb.w	fp, [r0, #8]
 800320e:	4659      	mov	r1, fp
 8003210:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003212:	68b0      	ldr	r0, [r6, #8]
 8003214:	6803      	ldr	r3, [r0, #0]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	4798      	blx	r3
 800321a:	4605      	mov	r5, r0
 800321c:	f000 fb5a 	bl	80038d4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003220:	6870      	ldr	r0, [r6, #4]
 8003222:	4659      	mov	r1, fp
 8003224:	6803      	ldr	r3, [r0, #0]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	4798      	blx	r3
 800322a:	4606      	mov	r6, r0
 800322c:	4629      	mov	r1, r5
 800322e:	f000 fb31 	bl	8003894 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003232:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003234:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003238:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800323a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800323e:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003242:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003246:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003248:	f8c6 a008 	str.w	sl, [r6, #8]
 800324c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800324e:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003250:	4798      	blx	r3
    newPresenter->activate();
 8003252:	6833      	ldr	r3, [r6, #0]
 8003254:	4630      	mov	r0, r6
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800325a:	4621      	mov	r1, r4
 800325c:	4628      	mov	r0, r5
 800325e:	f01b f8c9 	bl	801e3f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	4620      	mov	r0, r4
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	4798      	blx	r3
    newTransition->invalidate();
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	4620      	mov	r0, r4
 800326e:	695b      	ldr	r3, [r3, #20]
}
 8003270:	b001      	add	sp, #4
 8003272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003276:	4718      	bx	r3
 8003278:	0802cd14 	.word	0x0802cd14
 800327c:	0802cda2 	.word	0x0802cda2
 8003280:	0802ce74 	.word	0x0802ce74
 8003284:	0802cebb 	.word	0x0802cebb
 8003288:	0802cf5e 	.word	0x0802cf5e
 800328c:	0802d078 	.word	0x0802d078
 8003290:	24015c90 	.word	0x24015c90
 8003294:	24015c8c 	.word	0x24015c8c

08003298 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80032a0:	b10a      	cbz	r2, 80032a6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80032a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80032a4:	b900      	cbnz	r0, 80032a8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80032a6:	6898      	ldr	r0, [r3, #8]
    }
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	24015c48 	.word	0x24015c48

080032b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	4604      	mov	r4, r0
 80032b4:	4616      	mov	r6, r2
 80032b6:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 80032b8:	f019 f972 	bl	801c5a0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
        : currentPresenter(0),
 80032be:	2100      	movs	r1, #0
        instance = this;
 80032c0:	601c      	str	r4, [r3, #0]
      model(m)
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
 80032c4:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80032c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 80032c8:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 80032cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80032d4:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80032d6:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 80032da:	689b      	ldr	r3, [r3, #8]
      model(m)
 80032dc:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80032e0:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80032e2:	f7ff ffd9 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80032e6:	f020 fa6a 	bl	80237be <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80032ea:	f7ff ffd5 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80032ee:	f020 fadd 	bl	80238ac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 80032f2:	4620      	mov	r0, r4
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
 80032f6:	bf00      	nop
 80032f8:	24015c9c 	.word	0x24015c9c
 80032fc:	0802d024 	.word	0x0802d024
 8003300:	0802d00c 	.word	0x0802d00c
 8003304:	24015c48 	.word	0x24015c48

08003308 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800330a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800330e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003312:	2300      	movs	r3, #0
 8003314:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003318:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800331c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	08003151 	.word	0x08003151

08003328 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003328:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800332a:	4770      	bx	lr

0800332c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800332c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800332e:	4770      	bx	lr

08003330 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003330:	4770      	bx	lr

08003332 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003332:	888b      	ldrh	r3, [r1, #4]
 8003334:	69c0      	ldr	r0, [r0, #28]
 8003336:	0adb      	lsrs	r3, r3, #11
 8003338:	680a      	ldr	r2, [r1, #0]
 800333a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800333e:	4410      	add	r0, r2
 8003340:	4770      	bx	lr

08003342 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003342:	b510      	push	{r4, lr}
 8003344:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003346:	b1ba      	cbz	r2, 8003378 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003348:	7b10      	ldrb	r0, [r2, #12]
 800334a:	b168      	cbz	r0, 8003368 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800334c:	7b53      	ldrb	r3, [r2, #13]
 800334e:	7ad2      	ldrb	r2, [r2, #11]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003356:	431a      	orrs	r2, r3
 8003358:	6a23      	ldr	r3, [r4, #32]
 800335a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 800335e:	881a      	ldrh	r2, [r3, #0]
 8003360:	428a      	cmp	r2, r1
 8003362:	d102      	bne.n	800336a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003364:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003368:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800336a:	d805      	bhi.n	8003378 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800336c:	3801      	subs	r0, #1
 800336e:	3304      	adds	r3, #4
 8003370:	b280      	uxth	r0, r0
 8003372:	2800      	cmp	r0, #0
 8003374:	d1f3      	bne.n	800335e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003376:	e7f7      	b.n	8003368 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003378:	2000      	movs	r0, #0
 800337a:	e7f5      	b.n	8003368 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800337c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
 8003380:	212c      	movs	r1, #44	@ 0x2c
 8003382:	f026 f863 	bl	802944c <_ZdlPvj>
 8003386:	4620      	mov	r0, r4
 8003388:	bd10      	pop	{r4, pc}
	...

0800338c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800338c:	b530      	push	{r4, r5, lr}
 800338e:	b08b      	sub	sp, #44	@ 0x2c
 8003390:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003392:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003396:	9508      	str	r5, [sp, #32]
 8003398:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 800339c:	9507      	str	r5, [sp, #28]
 800339e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80033a2:	9506      	str	r5, [sp, #24]
 80033a4:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80033a8:	9505      	str	r5, [sp, #20]
 80033aa:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80033ae:	9504      	str	r5, [sp, #16]
 80033b0:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80033b4:	9503      	str	r5, [sp, #12]
 80033b6:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80033ba:	9502      	str	r5, [sp, #8]
 80033bc:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80033c0:	9501      	str	r5, [sp, #4]
 80033c2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80033c6:	9500      	str	r5, [sp, #0]
 80033c8:	f01a fc6e 	bl	801dca8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80033ce:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80033d0:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80033d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80033d4:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80033d6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80033d8:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80033da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80033dc:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80033de:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80033e0:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80033e2:	b00b      	add	sp, #44	@ 0x2c
 80033e4:	bd30      	pop	{r4, r5, pc}
 80033e6:	bf00      	nop
 80033e8:	0802d09c 	.word	0x0802d09c

080033ec <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80033ec:	4770      	bx	lr

080033ee <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80033ee:	4770      	bx	lr

080033f0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80033f0:	4770      	bx	lr

080033f2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80033f2:	4770      	bx	lr

080033f4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80033f4:	4770      	bx	lr

080033f6 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80033f6:	4770      	bx	lr

080033f8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80033f8:	4770      	bx	lr

080033fa <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80033fa:	b510      	push	{r4, lr}
 80033fc:	4604      	mov	r4, r0
}
 80033fe:	21cc      	movs	r1, #204	@ 0xcc
 8003400:	f026 f824 	bl	802944c <_ZdlPvj>
 8003404:	4620      	mov	r0, r4
 8003406:	bd10      	pop	{r4, pc}

08003408 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003408:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800340a:	b570      	push	{r4, r5, r6, lr}
 800340c:	4604      	mov	r4, r0
        setX(x);
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003410:	4615      	mov	r5, r2
        setX(x);
 8003412:	4798      	blx	r3
        setY(y);
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	4620      	mov	r0, r4
 8003418:	4629      	mov	r1, r5
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800341c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003420:	4718      	bx	r3

08003422 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003422:	b570      	push	{r4, r5, r6, lr}
 8003424:	4604      	mov	r4, r0
 8003426:	461d      	mov	r5, r3
 8003428:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800342c:	f7ff ffec 	bl	8003408 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	4629      	mov	r1, r5
 8003434:	4620      	mov	r0, r4
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	4798      	blx	r3
        setHeight(height);
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	4631      	mov	r1, r6
 800343e:	4620      	mov	r0, r4
 8003440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003446:	4718      	bx	r3

08003448 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003448:	4a09      	ldr	r2, [pc, #36]	@ (8003470 <_ZN8touchgfx3BoxC1Ev+0x28>)
          touchable(false),
 800344a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800344e:	6002      	str	r2, [r0, #0]
 8003450:	2200      	movs	r2, #0
 8003452:	8481      	strh	r1, [r0, #36]	@ 0x24
 8003454:	21ff      	movs	r1, #255	@ 0xff
        : color(col)
 8003456:	6282      	str	r2, [r0, #40]	@ 0x28
 8003458:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : x(0), y(0), width(0), height(0)
 800345c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003460:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003464:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003468:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	0802f670 	.word	0x0802f670

08003474 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	4604      	mov	r4, r0
        : presenter(0)
 800347a:	2500      	movs	r5, #0
 800347c:	f01a fe0e 	bl	801e09c <_ZN8touchgfx6ScreenC1Ev>
 8003480:	4b31      	ldr	r3, [pc, #196]	@ (8003548 <_ZN15Screen1ViewBaseC1Ev+0xd4>)
 8003482:	4626      	mov	r6, r4
 8003484:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8003488:	63e5      	str	r5, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 480, 272);
 800348a:	f44f 7a88 	mov.w	sl, #272	@ 0x110
Screen1ViewBase::Screen1ViewBase()
 800348e:	f846 3b40 	str.w	r3, [r6], #64
 8003492:	4630      	mov	r0, r6
 8003494:	f7ff ffd8 	bl	8003448 <_ZN8touchgfx3BoxC1Ev>
 8003498:	4648      	mov	r0, r9
 800349a:	f7ff ffd5 	bl	8003448 <_ZN8touchgfx3BoxC1Ev>
        touchable = touch;
 800349e:	f240 1301 	movw	r3, #257	@ 0x101
    __background.setPosition(0, 0, 480, 272);
 80034a2:	462a      	mov	r2, r5
 80034a4:	4629      	mov	r1, r5
 80034a6:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 80034aa:	4630      	mov	r0, r6
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <_ZN15Screen1ViewBaseC1Ev+0xd8>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80034ae:	1d27      	adds	r7, r4, #4
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80034b0:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
Screen1ViewBase::Screen1ViewBase()
 80034b4:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 80034b8:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80034bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034c0:	f884 50c4 	strb.w	r5, [r4, #196]	@ 0xc4
 80034c4:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 80034c8:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 80034cc:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    __background.setPosition(0, 0, 480, 272);
 80034d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80034d4:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 80034d8:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
          nextSibling(0),
 80034dc:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
          cachedAbsX(0),
 80034e0:	e9c4 552d 	strd	r5, r5, [r4, #180]	@ 0xb4
 80034e4:	f8cd a000 	str.w	sl, [sp]
 80034e8:	f7ff ff9b 	bl	8003422 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80034ec:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80034f0:	4631      	mov	r1, r6
 80034f2:	4638      	mov	r0, r7
 80034f4:	66a3      	str	r3, [r4, #104]	@ 0x68
 80034f6:	f014 fa83 	bl	8017a00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 480, 272);
 80034fa:	462a      	mov	r2, r5
 80034fc:	4629      	mov	r1, r5
 80034fe:	4648      	mov	r0, r9
 8003500:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003504:	f8cd a000 	str.w	sl, [sp]
 8003508:	f7ff ff8b 	bl	8003422 <_ZN8touchgfx8Drawable11setPositionEssss>
 800350c:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <_ZN15Screen1ViewBaseC1Ev+0xdc>)
 800350e:	4649      	mov	r1, r9
 8003510:	4638      	mov	r0, r7
 8003512:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003516:	f014 fa73 	bl	8017a00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(55, 111);
 800351a:	4640      	mov	r0, r8
 800351c:	226f      	movs	r2, #111	@ 0x6f
 800351e:	2137      	movs	r1, #55	@ 0x37
 8003520:	f7ff ff72 	bl	8003408 <_ZN8touchgfx8Drawable5setXYEss>
 8003524:	2301      	movs	r3, #1
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUNDED_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUNDED_ACTION_ID));
 8003526:	aa03      	add	r2, sp, #12
 8003528:	a902      	add	r1, sp, #8
 800352a:	4640      	mov	r0, r8
 800352c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8003530:	f8ad 500c 	strh.w	r5, [sp, #12]
 8003534:	f016 ffe0 	bl	801a4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003538:	4638      	mov	r0, r7
 800353a:	4641      	mov	r1, r8
 800353c:	f014 fa60 	bl	8017a00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003540:	4620      	mov	r0, r4
 8003542:	b004      	add	sp, #16
 8003544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003548:	0802d104 	.word	0x0802d104
 800354c:	0802f6d8 	.word	0x0802f6d8
 8003550:	ff13eb21 	.word	0xff13eb21

08003554 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003554:	4770      	bx	lr
	...

08003558 <_Z23getFont_verdana_10_4bppv>:
{
 8003558:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800355a:	4d16      	ldr	r5, [pc, #88]	@ (80035b4 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 800355c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800355e:	682c      	ldr	r4, [r5, #0]
 8003560:	f3bf 8f5b 	dmb	ish
 8003564:	f014 0401 	ands.w	r4, r4, #1
 8003568:	d120      	bne.n	80035ac <_Z23getFont_verdana_10_4bppv+0x54>
 800356a:	4628      	mov	r0, r5
 800356c:	f025 ff70 	bl	8029450 <__cxa_guard_acquire>
 8003570:	b1e0      	cbz	r0, 80035ac <_Z23getFont_verdana_10_4bppv+0x54>
 8003572:	233f      	movs	r3, #63	@ 0x3f
 8003574:	2201      	movs	r2, #1
 8003576:	4910      	ldr	r1, [pc, #64]	@ (80035b8 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003578:	9309      	str	r3, [sp, #36]	@ 0x24
 800357a:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <_Z23getFont_verdana_10_4bppv+0x64>)
 800357c:	4810      	ldr	r0, [pc, #64]	@ (80035c0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800357e:	9308      	str	r3, [sp, #32]
 8003580:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003582:	940a      	str	r4, [sp, #40]	@ 0x28
 8003584:	9405      	str	r4, [sp, #20]
 8003586:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800358a:	2304      	movs	r3, #4
 800358c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003590:	230a      	movs	r3, #10
 8003592:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800359c:	f7ff fef6 	bl	800338c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80035a0:	4809      	ldr	r0, [pc, #36]	@ (80035c8 <_Z23getFont_verdana_10_4bppv+0x70>)
 80035a2:	f026 fae7 	bl	8029b74 <atexit>
 80035a6:	4628      	mov	r0, r5
 80035a8:	f025 ff5e 	bl	8029468 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80035ac:	4804      	ldr	r0, [pc, #16]	@ (80035c0 <_Z23getFont_verdana_10_4bppv+0x68>)
 80035ae:	b00f      	add	sp, #60	@ 0x3c
 80035b0:	bd30      	pop	{r4, r5, pc}
 80035b2:	bf00      	nop
 80035b4:	24001d90 	.word	0x24001d90
 80035b8:	0802fe3c 	.word	0x0802fe3c
 80035bc:	0802fe6c 	.word	0x0802fe6c
 80035c0:	24001d94 	.word	0x24001d94
 80035c4:	0802fe78 	.word	0x0802fe78
 80035c8:	08003555 	.word	0x08003555

080035cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80035cc:	4770      	bx	lr
	...

080035d0 <_Z23getFont_verdana_20_4bppv>:
{
 80035d0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80035d2:	4d16      	ldr	r5, [pc, #88]	@ (800362c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80035d4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80035d6:	682c      	ldr	r4, [r5, #0]
 80035d8:	f3bf 8f5b 	dmb	ish
 80035dc:	f014 0401 	ands.w	r4, r4, #1
 80035e0:	d120      	bne.n	8003624 <_Z23getFont_verdana_20_4bppv+0x54>
 80035e2:	4628      	mov	r0, r5
 80035e4:	f025 ff34 	bl	8029450 <__cxa_guard_acquire>
 80035e8:	b1e0      	cbz	r0, 8003624 <_Z23getFont_verdana_20_4bppv+0x54>
 80035ea:	233f      	movs	r3, #63	@ 0x3f
 80035ec:	2201      	movs	r2, #1
 80035ee:	4910      	ldr	r1, [pc, #64]	@ (8003630 <_Z23getFont_verdana_20_4bppv+0x60>)
 80035f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035f2:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <_Z23getFont_verdana_20_4bppv+0x64>)
 80035f4:	4810      	ldr	r0, [pc, #64]	@ (8003638 <_Z23getFont_verdana_20_4bppv+0x68>)
 80035f6:	9308      	str	r3, [sp, #32]
 80035f8:	4b10      	ldr	r3, [pc, #64]	@ (800363c <_Z23getFont_verdana_20_4bppv+0x6c>)
 80035fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80035fc:	9405      	str	r4, [sp, #20]
 80035fe:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003602:	2304      	movs	r3, #4
 8003604:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003608:	2314      	movs	r3, #20
 800360a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003614:	f7ff feba 	bl	800338c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003618:	4809      	ldr	r0, [pc, #36]	@ (8003640 <_Z23getFont_verdana_20_4bppv+0x70>)
 800361a:	f026 faab 	bl	8029b74 <atexit>
 800361e:	4628      	mov	r0, r5
 8003620:	f025 ff22 	bl	8029468 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003624:	4804      	ldr	r0, [pc, #16]	@ (8003638 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003626:	b00f      	add	sp, #60	@ 0x3c
 8003628:	bd30      	pop	{r4, r5, pc}
 800362a:	bf00      	nop
 800362c:	24001dc0 	.word	0x24001dc0
 8003630:	0802fe4c 	.word	0x0802fe4c
 8003634:	0802fe70 	.word	0x0802fe70
 8003638:	24001dc4 	.word	0x24001dc4
 800363c:	0802fe7c 	.word	0x0802fe7c
 8003640:	080035cd 	.word	0x080035cd

08003644 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003644:	4770      	bx	lr
	...

08003648 <_Z23getFont_verdana_40_4bppv>:
{
 8003648:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800364a:	4d16      	ldr	r5, [pc, #88]	@ (80036a4 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 800364c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800364e:	682c      	ldr	r4, [r5, #0]
 8003650:	f3bf 8f5b 	dmb	ish
 8003654:	f014 0401 	ands.w	r4, r4, #1
 8003658:	d120      	bne.n	800369c <_Z23getFont_verdana_40_4bppv+0x54>
 800365a:	4628      	mov	r0, r5
 800365c:	f025 fef8 	bl	8029450 <__cxa_guard_acquire>
 8003660:	b1e0      	cbz	r0, 800369c <_Z23getFont_verdana_40_4bppv+0x54>
 8003662:	233f      	movs	r3, #63	@ 0x3f
 8003664:	2201      	movs	r2, #1
 8003666:	4910      	ldr	r1, [pc, #64]	@ (80036a8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003668:	9309      	str	r3, [sp, #36]	@ 0x24
 800366a:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <_Z23getFont_verdana_40_4bppv+0x64>)
 800366c:	4810      	ldr	r0, [pc, #64]	@ (80036b0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800366e:	9308      	str	r3, [sp, #32]
 8003670:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003672:	940a      	str	r4, [sp, #40]	@ 0x28
 8003674:	9405      	str	r4, [sp, #20]
 8003676:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800367a:	2304      	movs	r3, #4
 800367c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003680:	2328      	movs	r3, #40	@ 0x28
 8003682:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800368c:	f7ff fe7e 	bl	800338c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003690:	4809      	ldr	r0, [pc, #36]	@ (80036b8 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003692:	f026 fa6f 	bl	8029b74 <atexit>
 8003696:	4628      	mov	r0, r5
 8003698:	f025 fee6 	bl	8029468 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800369c:	4804      	ldr	r0, [pc, #16]	@ (80036b0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800369e:	b00f      	add	sp, #60	@ 0x3c
 80036a0:	bd30      	pop	{r4, r5, pc}
 80036a2:	bf00      	nop
 80036a4:	24001df0 	.word	0x24001df0
 80036a8:	0802fe5c 	.word	0x0802fe5c
 80036ac:	0802fe74 	.word	0x0802fe74
 80036b0:	24001df4 	.word	0x24001df4
 80036b4:	0802fe80 	.word	0x0802fe80
 80036b8:	08003645 	.word	0x08003645

080036bc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80036bc:	2000      	movs	r0, #0
 80036be:	4770      	bx	lr

080036c0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80036c0:	2000      	movs	r0, #0
 80036c2:	4770      	bx	lr

080036c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80036c4:	b40e      	push	{r1, r2, r3}
 80036c6:	b503      	push	{r0, r1, lr}
 80036c8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80036ca:	2100      	movs	r1, #0
{
 80036cc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80036d0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80036d2:	f019 fded 	bl	801d2b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80036d6:	b002      	add	sp, #8
 80036d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036dc:	b003      	add	sp, #12
 80036de:	4770      	bx	lr

080036e0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80036e0:	b40c      	push	{r2, r3}
 80036e2:	b507      	push	{r0, r1, r2, lr}
 80036e4:	ab04      	add	r3, sp, #16
 80036e6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80036ea:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80036ec:	f019 fde0 	bl	801d2b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80036f0:	b003      	add	sp, #12
 80036f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f6:	b002      	add	sp, #8
 80036f8:	4770      	bx	lr
	...

080036fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80036fc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80036fe:	b510      	push	{r4, lr}
 8003700:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003702:	b373      	cbz	r3, 8003762 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003704:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003706:	b92b      	cbnz	r3, 8003714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003708:	4b18      	ldr	r3, [pc, #96]	@ (800376c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800370a:	21c5      	movs	r1, #197	@ 0xc5
 800370c:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800370e:	4819      	ldr	r0, [pc, #100]	@ (8003774 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003710:	f026 fa12 	bl	8029b38 <__assert_func>
            return buffer[pos];
 8003714:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003716:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800371a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800371c:	b30b      	cbz	r3, 8003762 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800371e:	f01b fb35 	bl	801ed8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003722:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003724:	2b01      	cmp	r3, #1
 8003726:	d803      	bhi.n	8003730 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003728:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800372a:	21cb      	movs	r1, #203	@ 0xcb
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800372e:	e7ee      	b.n	800370e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003730:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003732:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003736:	1c53      	adds	r3, r2, #1
 8003738:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800373a:	2b09      	cmp	r3, #9
 800373c:	4619      	mov	r1, r3
 800373e:	bf88      	it	hi
 8003740:	f1a3 010a 	subhi.w	r1, r3, #10
 8003744:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003748:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800374a:	4281      	cmp	r1, r0
 800374c:	d109      	bne.n	8003762 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800374e:	2b0a      	cmp	r3, #10
 8003750:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003754:	bf28      	it	cs
 8003756:	2300      	movcs	r3, #0
            return buffer[pos];
 8003758:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800375a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800375e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003760:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003762:	4620      	mov	r0, r4
}
 8003764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003768:	f01b ba12 	b.w	801eb90 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800376c:	0802d130 	.word	0x0802d130
 8003770:	0802d139 	.word	0x0802d139
 8003774:	0802d1e4 	.word	0x0802d1e4
 8003778:	0802d22e 	.word	0x0802d22e
 800377c:	0802d23c 	.word	0x0802d23c

08003780 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003780:	f01b b9cf 	b.w	801eb22 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003784 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003784:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003786:	bb18      	cbnz	r0, 80037d0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003788:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800378a:	4813      	ldr	r0, [pc, #76]	@ (80037d8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800378c:	681c      	ldr	r4, [r3, #0]
 800378e:	4913      	ldr	r1, [pc, #76]	@ (80037dc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003790:	b1b4      	cbz	r4, 80037c0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	4422      	add	r2, r4
 8003796:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003798:	6862      	ldr	r2, [r4, #4]
 800379a:	4422      	add	r2, r4
 800379c:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800379e:	68a2      	ldr	r2, [r4, #8]
 80037a0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80037a8:	f000 f82a 	bl	8003800 <_ZN17TypedTextDatabase8getFontsEv>
 80037ac:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80037ae:	f000 f825 	bl	80037fc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80037b2:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80037b4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80037b6:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80037b8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80037bc:	8018      	strh	r0, [r3, #0]
    }
}
 80037be:	e007      	b.n	80037d0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80037c2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80037c6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80037ca:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80037cc:	2c00      	cmp	r4, #0
 80037ce:	d1e8      	bne.n	80037a2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80037d0:	bd38      	pop	{r3, r4, r5, pc}
 80037d2:	bf00      	nop
 80037d4:	24001e2c 	.word	0x24001e2c
 80037d8:	24001e24 	.word	0x24001e24
 80037dc:	24001e20 	.word	0x24001e20
 80037e0:	24001e28 	.word	0x24001e28
 80037e4:	24015ca0 	.word	0x24015ca0
 80037e8:	24015ca8 	.word	0x24015ca8
 80037ec:	24015ca4 	.word	0x24015ca4
 80037f0:	0802fe88 	.word	0x0802fe88
 80037f4:	0802fe84 	.word	0x0802fe84
 80037f8:	0802fe8c 	.word	0x0802fe8c

080037fc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	4770      	bx	lr

08003800 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003800:	4800      	ldr	r0, [pc, #0]	@ (8003804 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003802:	4770      	bx	lr
 8003804:	24001e30 	.word	0x24001e30

08003808 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003808:	b510      	push	{r4, lr}
};
 800380a:	4c05      	ldr	r4, [pc, #20]	@ (8003820 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 800380c:	f7ff fee0 	bl	80035d0 <_Z23getFont_verdana_20_4bppv>
};
 8003810:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003812:	f7ff ff19 	bl	8003648 <_Z23getFont_verdana_40_4bppv>
};
 8003816:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003818:	f7ff fe9e 	bl	8003558 <_Z23getFont_verdana_10_4bppv>
};
 800381c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800381e:	bd10      	pop	{r4, pc}
 8003820:	24001e30 	.word	0x24001e30

08003824 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8003824:	b510      	push	{r4, lr}
    pointArray = 0;
 8003826:	2400      	movs	r4, #0
 8003828:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800382a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 800382c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800382e:	601c      	str	r4, [r3, #0]
}
 8003830:	bd10      	pop	{r4, pc}

08003832 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003832:	4770      	bx	lr

08003834 <_ZN19FrontendApplicationD0Ev>:
 8003834:	b510      	push	{r4, lr}
 8003836:	4604      	mov	r4, r0
 8003838:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800383c:	f025 fe06 	bl	802944c <_ZdlPvj>
 8003840:	4620      	mov	r0, r4
 8003842:	bd10      	pop	{r4, pc}

08003844 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003844:	b510      	push	{r4, lr}
 8003846:	4604      	mov	r4, r0
    {
        model.tick();
 8003848:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800384c:	f000 f813 	bl	8003876 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003850:	4620      	mov	r0, r4
    }
 8003852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003856:	f018 be5f 	b.w	801c518 <_ZN8touchgfx11Application15handleTickEventEv>
	...

0800385c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800385c:	b510      	push	{r4, lr}
 800385e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003860:	f7ff fd26 	bl	80032b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003864:	4b01      	ldr	r3, [pc, #4]	@ (800386c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003866:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003868:	6023      	str	r3, [r4, #0]
}
 800386a:	bd10      	pop	{r4, pc}
 800386c:	0802d318 	.word	0x0802d318

08003870 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003870:	2200      	movs	r2, #0
 8003872:	6002      	str	r2, [r0, #0]
{

}
 8003874:	4770      	bx	lr

08003876 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003876:	4770      	bx	lr

08003878 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8003878:	4770      	bx	lr

0800387a <_ZThn4_N16Screen1PresenterD1Ev>:
 800387a:	3804      	subs	r0, #4
 800387c:	4770      	bx	lr

0800387e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800387e:	4770      	bx	lr

08003880 <_ZN16Screen1PresenterD0Ev>:
 8003880:	b510      	push	{r4, lr}
 8003882:	4604      	mov	r4, r0
 8003884:	2110      	movs	r1, #16
 8003886:	f025 fde1 	bl	802944c <_ZdlPvj>
 800388a:	4620      	mov	r0, r4
 800388c:	bd10      	pop	{r4, pc}

0800388e <_ZThn4_N16Screen1PresenterD0Ev>:
 800388e:	f1a0 0004 	sub.w	r0, r0, #4
 8003892:	e7f5      	b.n	8003880 <_ZN16Screen1PresenterD0Ev>

08003894 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003894:	2200      	movs	r2, #0
    : view(v)
 8003896:	60c1      	str	r1, [r0, #12]
 8003898:	6082      	str	r2, [r0, #8]
 800389a:	4a02      	ldr	r2, [pc, #8]	@ (80038a4 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800389c:	6002      	str	r2, [r0, #0]
 800389e:	3218      	adds	r2, #24
 80038a0:	6042      	str	r2, [r0, #4]
}
 80038a2:	4770      	bx	lr
 80038a4:	0802d36c 	.word	0x0802d36c

080038a8 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80038a8:	4770      	bx	lr
	...

080038ac <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <_ZN11Screen1ViewD1Ev+0x10>)
 80038ae:	b510      	push	{r4, lr}
 80038b0:	4604      	mov	r4, r0
 80038b2:	6003      	str	r3, [r0, #0]
 80038b4:	f7ff fd9f 	bl	80033f6 <_ZN15Screen1ViewBaseD1Ev>
 80038b8:	4620      	mov	r0, r4
 80038ba:	bd10      	pop	{r4, pc}
 80038bc:	0802d394 	.word	0x0802d394

080038c0 <_ZN11Screen1ViewD0Ev>:
 80038c0:	b510      	push	{r4, lr}
 80038c2:	4604      	mov	r4, r0
 80038c4:	f7ff fff2 	bl	80038ac <_ZN11Screen1ViewD1Ev>
 80038c8:	21cc      	movs	r1, #204	@ 0xcc
 80038ca:	4620      	mov	r0, r4
 80038cc:	f025 fdbe 	bl	802944c <_ZdlPvj>
 80038d0:	4620      	mov	r0, r4
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	f7ff fdcc 	bl	8003474 <_ZN15Screen1ViewBaseC1Ev>
 80038dc:	4b01      	ldr	r3, [pc, #4]	@ (80038e4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80038de:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80038e0:	6023      	str	r3, [r4, #0]
}
 80038e2:	bd10      	pop	{r4, pc}
 80038e4:	0802d394 	.word	0x0802d394

080038e8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80038e8:	f7ff bd86 	b.w	80033f8 <_ZN15Screen1ViewBase11setupScreenEv>

080038ec <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80038ec:	f240 1301 	movw	r3, #257	@ 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80038f0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0

  return FT5336_OK;
}
 80038f4:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80038f6:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80038f8:	2305      	movs	r3, #5
 80038fa:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80038fc:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003900:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8003904:	4770      	bx	lr

08003906 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8003906:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800390a:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800390c:	bf04      	itt	eq
 800390e:	2300      	moveq	r3, #0
 8003910:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }

  return ret;
}
 8003914:	2000      	movs	r0, #0
 8003916:	4770      	bx	lr

08003918 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8003918:	2000      	movs	r0, #0
 800391a:	4770      	bx	lr

0800391c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800391c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800391e:	6904      	ldr	r4, [r0, #16]
 8003920:	8900      	ldrh	r0, [r0, #8]
 8003922:	46a4      	mov	ip, r4
}
 8003924:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003928:	4760      	bx	ip

0800392a <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800392a:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800392c:	68c4      	ldr	r4, [r0, #12]
 800392e:	8900      	ldrh	r0, [r0, #8]
 8003930:	46a4      	mov	ip, r4
}
 8003932:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003936:	4760      	bx	ip

08003938 <FT5336_GestureConfig>:
{
 8003938:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800393a:	f100 0518 	add.w	r5, r0, #24
{
 800393e:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003940:	7809      	ldrb	r1, [r1, #0]
 8003942:	4628      	mov	r0, r5
 8003944:	f000 f8f4 	bl	8003b30 <ft5336_radian_value>
 8003948:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800394a:	7931      	ldrb	r1, [r6, #4]
 800394c:	4628      	mov	r0, r5
 800394e:	f000 f8fb 	bl	8003b48 <ft5336_offset_left_right>
 8003952:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003954:	7a31      	ldrb	r1, [r6, #8]
 8003956:	4628      	mov	r0, r5
 8003958:	f000 f902 	bl	8003b60 <ft5336_offset_up_down>
 800395c:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800395e:	7b31      	ldrb	r1, [r6, #12]
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f909 	bl	8003b78 <ft5336_disatnce_left_right>
 8003966:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003968:	7c31      	ldrb	r1, [r6, #16]
 800396a:	4628      	mov	r0, r5
 800396c:	f000 f910 	bl	8003b90 <ft5336_distance_up_down>
 8003970:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003972:	7d31      	ldrb	r1, [r6, #20]
 8003974:	4628      	mov	r0, r5
 8003976:	f000 f917 	bl	8003ba8 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 800397a:	42c4      	cmn	r4, r0
}
 800397c:	bf14      	ite	ne
 800397e:	f04f 30ff 	movne.w	r0, #4294967295
 8003982:	2000      	moveq	r0, #0
 8003984:	bd70      	pop	{r4, r5, r6, pc}

08003986 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003986:	3018      	adds	r0, #24
 8003988:	f000 b926 	b.w	8003bd8 <ft5336_chip_id>

0800398c <FT5336_GetState>:
{
 800398c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800398e:	f100 0518 	add.w	r5, r0, #24
{
 8003992:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003994:	a901      	add	r1, sp, #4
 8003996:	4628      	mov	r0, r5
 8003998:	f000 f8bd 	bl	8003b16 <ft5336_td_status>
 800399c:	bb08      	cbnz	r0, 80039e2 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800399e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	bf98      	it	ls
 80039a6:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80039a8:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80039aa:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80039ac:	2103      	movs	r1, #3
 80039ae:	4628      	mov	r0, r5
 80039b0:	eb0d 0203 	add.w	r2, sp, r3
 80039b4:	f000 f89c 	bl	8003af0 <ft5336_read_reg>
 80039b8:	b9b0      	cbnz	r0, 80039e8 <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80039ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80039be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039c8:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80039ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80039ce:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80039d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039da:	4313      	orrs	r3, r2
 80039dc:	60a3      	str	r3, [r4, #8]
}
 80039de:	b003      	add	sp, #12
 80039e0:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 80039e2:	f04f 30ff 	mov.w	r0, #4294967295
 80039e6:	e7df      	b.n	80039a8 <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80039ec:	e7f7      	b.n	80039de <FT5336_GetState+0x52>

080039ee <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80039ee:	3018      	adds	r0, #24
 80039f0:	f000 b88c 	b.w	8003b0c <ft5336_gest_id>

080039f4 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80039f4:	2101      	movs	r1, #1
 80039f6:	3018      	adds	r0, #24
 80039f8:	f000 b8e2 	b.w	8003bc0 <ft5336_g_mode>

080039fc <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80039fc:	2100      	movs	r1, #0
 80039fe:	3018      	adds	r0, #24
 8003a00:	f000 b8de 	b.w	8003bc0 <ft5336_g_mode>

08003a04 <FT5336_Init>:
{
 8003a04:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8003a06:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8003a0a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8003a0c:	b96b      	cbnz	r3, 8003a2a <FT5336_Init+0x26>
    pObj->IO.Init();
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7ff fff2 	bl	80039fc <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8003a18:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8003a1a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8003a1e:	bf18      	it	ne
 8003a20:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8003a22:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT5336_OK)
 8003a26:	4240      	negs	r0, r0
}
 8003a28:	bd10      	pop	{r4, pc}
    ret += FT5336_DisableIT(pObj);
 8003a2a:	2000      	movs	r0, #0
  return ret;
 8003a2c:	e7fc      	b.n	8003a28 <FT5336_Init+0x24>

08003a2e <FT5336_ClearIT>:
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
 8003a2e:	2000      	movs	r0, #0
 8003a30:	4770      	bx	lr

08003a32 <FT5336_GetMultiTouchState>:
{
 8003a32:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003a34:	f100 0518 	add.w	r5, r0, #24
{
 8003a38:	b088      	sub	sp, #32
 8003a3a:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	4669      	mov	r1, sp
 8003a40:	f000 f869 	bl	8003b16 <ft5336_td_status>
 8003a44:	bb90      	cbnz	r0, 8003aac <FT5336_GetMultiTouchState+0x7a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003a46:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	bf98      	it	ls
 8003a4e:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003a50:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003a52:	231e      	movs	r3, #30
 8003a54:	466a      	mov	r2, sp
 8003a56:	2103      	movs	r1, #3
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 f849 	bl	8003af0 <ft5336_read_reg>
 8003a5e:	bb40      	cbnz	r0, 8003ab2 <FT5336_GetMultiTouchState+0x80>
 8003a60:	4621      	mov	r1, r4
 8003a62:	466d      	mov	r5, sp
 8003a64:	3414      	adds	r4, #20
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003a66:	782a      	ldrb	r2, [r5, #0]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003a68:	3506      	adds	r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003a6a:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8003a6e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003a70:	0992      	lsrs	r2, r2, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003a72:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a76:	4333      	orrs	r3, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003a78:	f815 6c03 	ldrb.w	r6, [r5, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003a7c:	f841 3f04 	str.w	r3, [r1, #4]!
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003a80:	428c      	cmp	r4, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003a82:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003a86:	63ca      	str	r2, [r1, #60]	@ 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003a88:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003a8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a90:	ea43 0306 	orr.w	r3, r3, r6
 8003a94:	614b      	str	r3, [r1, #20]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8003a96:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8003a9a:	628b      	str	r3, [r1, #40]	@ 0x28
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003aa0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8003aa4:	650b      	str	r3, [r1, #80]	@ 0x50
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003aa6:	d1de      	bne.n	8003a66 <FT5336_GetMultiTouchState+0x34>
}
 8003aa8:	b008      	add	sp, #32
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e7ce      	b.n	8003a50 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003ab6:	e7f7      	b.n	8003aa8 <FT5336_GetMultiTouchState+0x76>

08003ab8 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003ab8:	b190      	cbz	r0, 8003ae0 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8003aba:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8003abc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003abe:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8003ac0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8003ac2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8003ac4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003ac6:	68ca      	ldr	r2, [r1, #12]
 8003ac8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003aca:	690a      	ldr	r2, [r1, #16]
 8003acc:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003ace:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8003ad0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8003ad2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8003ad4:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <FT5336_RegisterBusIO+0x30>)
 8003ad6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8003ad8:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <FT5336_RegisterBusIO+0x34>)
 8003ada:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8003adc:	b103      	cbz	r3, 8003ae0 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8003ade:	4718      	bx	r3
}
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	0800391d 	.word	0x0800391d
 8003aec:	0800392b 	.word	0x0800392b

08003af0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003af0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003af2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8003af6:	46a4      	mov	ip, r4
}
 8003af8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003afc:	4760      	bx	ip

08003afe <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8003afe:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003b00:	6804      	ldr	r4, [r0, #0]
 8003b02:	6880      	ldr	r0, [r0, #8]
 8003b04:	46a4      	mov	ip, r4
}
 8003b06:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003b0a:	4760      	bx	ip

08003b0c <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003b0c:	2301      	movs	r3, #1
{
 8003b0e:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003b10:	4619      	mov	r1, r3
 8003b12:	f7ff bfed 	b.w	8003af0 <ft5336_read_reg>

08003b16 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003b16:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003b18:	460a      	mov	r2, r1
{
 8003b1a:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	2102      	movs	r1, #2
 8003b20:	f7ff ffe6 	bl	8003af0 <ft5336_read_reg>
  
  if(ret == 0)
 8003b24:	b918      	cbnz	r0, 8003b2e <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003b26:	7823      	ldrb	r3, [r4, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003b30:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003b32:	2301      	movs	r3, #1
{
 8003b34:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003b38:	f10d 0207 	add.w	r2, sp, #7
 8003b3c:	2191      	movs	r1, #145	@ 0x91
 8003b3e:	f7ff ffde 	bl	8003afe <ft5336_write_reg>
}
 8003b42:	b003      	add	sp, #12
 8003b44:	f85d fb04 	ldr.w	pc, [sp], #4

08003b48 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003b48:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003b4a:	2301      	movs	r3, #1
{
 8003b4c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003b50:	f10d 0207 	add.w	r2, sp, #7
 8003b54:	2192      	movs	r1, #146	@ 0x92
 8003b56:	f7ff ffd2 	bl	8003afe <ft5336_write_reg>
}
 8003b5a:	b003      	add	sp, #12
 8003b5c:	f85d fb04 	ldr.w	pc, [sp], #4

08003b60 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003b60:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003b62:	2301      	movs	r3, #1
{
 8003b64:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003b68:	f10d 0207 	add.w	r2, sp, #7
 8003b6c:	2193      	movs	r1, #147	@ 0x93
 8003b6e:	f7ff ffc6 	bl	8003afe <ft5336_write_reg>
}
 8003b72:	b003      	add	sp, #12
 8003b74:	f85d fb04 	ldr.w	pc, [sp], #4

08003b78 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003b78:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003b7a:	2301      	movs	r3, #1
{
 8003b7c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003b80:	f10d 0207 	add.w	r2, sp, #7
 8003b84:	2194      	movs	r1, #148	@ 0x94
 8003b86:	f7ff ffba 	bl	8003afe <ft5336_write_reg>
}
 8003b8a:	b003      	add	sp, #12
 8003b8c:	f85d fb04 	ldr.w	pc, [sp], #4

08003b90 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003b90:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003b92:	2301      	movs	r3, #1
{
 8003b94:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003b98:	f10d 0207 	add.w	r2, sp, #7
 8003b9c:	2195      	movs	r1, #149	@ 0x95
 8003b9e:	f7ff ffae 	bl	8003afe <ft5336_write_reg>
}
 8003ba2:	b003      	add	sp, #12
 8003ba4:	f85d fb04 	ldr.w	pc, [sp], #4

08003ba8 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003ba8:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003baa:	2301      	movs	r3, #1
{
 8003bac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003bb0:	f10d 0207 	add.w	r2, sp, #7
 8003bb4:	2196      	movs	r1, #150	@ 0x96
 8003bb6:	f7ff ffa2 	bl	8003afe <ft5336_write_reg>
}
 8003bba:	b003      	add	sp, #12
 8003bbc:	f85d fb04 	ldr.w	pc, [sp], #4

08003bc0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8003bc0:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003bc2:	2301      	movs	r3, #1
{
 8003bc4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003bc8:	f10d 0207 	add.w	r2, sp, #7
 8003bcc:	21a4      	movs	r1, #164	@ 0xa4
 8003bce:	f7ff ff96 	bl	8003afe <ft5336_write_reg>
}
 8003bd2:	b003      	add	sp, #12
 8003bd4:	f85d fb04 	ldr.w	pc, [sp], #4

08003bd8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003bd8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8003bda:	2301      	movs	r3, #1
 8003bdc:	21a8      	movs	r1, #168	@ 0xa8
 8003bde:	f7ff bf87 	b.w	8003af0 <ft5336_read_reg>

08003be2 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003be2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003bea:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003bee:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8003bf2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bfa:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003bfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8003c02:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003c06:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003c08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c0c:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8003c10:	2000      	movs	r0, #0
 8003c12:	4770      	bx	lr

08003c14 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	b09a      	sub	sp, #104	@ 0x68
 8003c18:	460e      	mov	r6, r1
 8003c1a:	4605      	mov	r5, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003c1c:	2100      	movs	r1, #0
{
 8003c1e:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003c20:	a806      	add	r0, sp, #24
 8003c22:	2250      	movs	r2, #80	@ 0x50
 8003c24:	f026 fa44 	bl	802a0b0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003c28:	2214      	movs	r2, #20
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	a801      	add	r0, sp, #4
 8003c2e:	f026 fa3f 	bl	802a0b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003c32:	b92e      	cbnz	r6, 8003c40 <MX25LM51245G_AutoPollingMemReady+0x2c>
 8003c34:	2c01      	cmp	r4, #1
 8003c36:	d150      	bne.n	8003cda <MX25LM51245G_AutoPollingMemReady+0xc6>
  {
    return MX25LM51245G_ERROR;
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003c3c:	b01a      	add	sp, #104	@ 0x68
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003c40:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003c42:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003c44:	9309      	str	r3, [sp, #36]	@ 0x24
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003c46:	2010      	movs	r0, #16
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003c48:	4253      	negs	r3, r2
 8003c4a:	4153      	adcs	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003c4c:	2e00      	cmp	r6, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003c4e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8003c52:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003c54:	bf14      	ite	ne
 8003c56:	2201      	movne	r2, #1
 8003c58:	2200      	moveq	r2, #0
 8003c5a:	ea4f 1102 	mov.w	r1, r2, lsl #4
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003c5e:	ea4f 2282 	mov.w	r2, r2, lsl #10
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003c62:	910a      	str	r1, [sp, #40]	@ 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003c64:	f240 51fa 	movw	r1, #1530	@ 0x5fa
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003c68:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003c6a:	ea4f 22c3 	mov.w	r2, r3, lsl #11
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003c6e:	bf08      	it	eq
 8003c70:	2105      	moveq	r1, #5
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003c72:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003c74:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003c78:	9108      	str	r1, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c7a:	a906      	add	r1, sp, #24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003c7c:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003c7e:	bf0c      	ite	eq
 8003c80:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
 8003c84:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 8003c88:	9214      	str	r2, [sp, #80]	@ 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003c8a:	ea4f 62c3 	mov.w	r2, r3, lsl #27
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003c8e:	ea4f 7343 	mov.w	r3, r3, lsl #29
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003c92:	9216      	str	r2, [sp, #88]	@ 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003c94:	bf14      	ite	ne
 8003c96:	2205      	movne	r2, #5
 8003c98:	2200      	moveq	r2, #0
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003c9a:	9318      	str	r3, [sp, #96]	@ 0x60
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003c9c:	2c01      	cmp	r4, #1
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8003c9e:	f04f 0301 	mov.w	r3, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003ca2:	9217      	str	r2, [sp, #92]	@ 0x5c
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8003ca4:	9302      	str	r3, [sp, #8]
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2202      	moveq	r2, #2
 8003caa:	2201      	movne	r2, #1
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003cac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003cb0:	9215      	str	r2, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003cb6:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f002 fb81 	bl	80063c2 <HAL_OSPI_Command>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1b9      	bne.n	8003c38 <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc8:	a901      	add	r1, sp, #4
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f002 fcbe 	bl	800664c <HAL_OSPI_AutoPolling>
 8003cd0:	3800      	subs	r0, #0
 8003cd2:	bf18      	it	ne
 8003cd4:	2001      	movne	r0, #1
 8003cd6:	4240      	negs	r0, r0
 8003cd8:	e7b0      	b.n	8003c3c <MX25LM51245G_AutoPollingMemReady+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e7b1      	b.n	8003c42 <MX25LM51245G_AutoPollingMemReady+0x2e>

08003cde <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8003cde:	b570      	push	{r4, r5, r6, lr}
 8003ce0:	b096      	sub	sp, #88	@ 0x58
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2250      	movs	r2, #80	@ 0x50
 8003cec:	a802      	add	r0, sp, #8
 8003cee:	f026 f9df 	bl	802a0b0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003cf2:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8003cf4:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003cf6:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8003cfa:	d105      	bne.n	8003d08 <MX25LM51245G_EnableSTRMemoryMappedMode+0x2a>
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	d153      	bne.n	8003da8 <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
  {
    return MX25LM51245G_ERROR;
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003d04:	b016      	add	sp, #88	@ 0x58
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003d08:	2c00      	cmp	r4, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2304      	movne	r3, #4
 8003d0e:	2301      	moveq	r3, #1
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003d10:	2201      	movs	r2, #1
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003d12:	2c00      	cmp	r4, #0
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003d14:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003d16:	bf14      	ite	ne
 8003d18:	4613      	movne	r3, r2
 8003d1a:	2300      	moveq	r3, #0
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003d1c:	9202      	str	r2, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003d1e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003d22:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003d24:	d142      	bne.n	8003dac <MX25LM51245G_EnableSTRMemoryMappedMode+0xce>
 8003d26:	2d00      	cmp	r5, #0
 8003d28:	bf0c      	ite	eq
 8003d2a:	230b      	moveq	r3, #11
 8003d2c:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003d2e:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003d30:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d36:	a902      	add	r1, sp, #8
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003d38:	bf0c      	ite	eq
 8003d3a:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8003d3e:	f44f 6380 	movne.w	r3, #1024	@ 0x400
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003d42:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d44:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003d46:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003d48:	bf0c      	ite	eq
 8003d4a:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
 8003d4e:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003d52:	2c00      	cmp	r4, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003d54:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003d56:	bf0c      	ite	eq
 8003d58:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8003d5c:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8003d60:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003d62:	bf0c      	ite	eq
 8003d64:	2308      	moveq	r3, #8
 8003d66:	2306      	movne	r3, #6
 8003d68:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d6a:	f002 fb2a 	bl	80063c2 <HAL_OSPI_Command>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d1c6      	bne.n	8003d00 <MX25LM51245G_EnableSTRMemoryMappedMode+0x22>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003d72:	2302      	movs	r3, #2
 8003d74:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003d76:	b9e4      	cbnz	r4, 8003db2 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd4>
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	bf18      	it	ne
 8003d7c:	2312      	movne	r3, #18
 8003d7e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8003d80:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	a902      	add	r1, sp, #8
 8003d88:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8003d8a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d8c:	f002 fb19 	bl	80063c2 <HAL_OSPI_Command>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d1b5      	bne.n	8003d00 <MX25LM51245G_EnableSTRMemoryMappedMode+0x22>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003d94:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003d96:	4669      	mov	r1, sp
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f002 fca7 	bl	80066ec <HAL_OSPI_MemoryMapped>
 8003d9e:	3800      	subs	r0, #0
 8003da0:	bf18      	it	ne
 8003da2:	2001      	movne	r0, #1
 8003da4:	4240      	negs	r0, r0
 8003da6:	e7ad      	b.n	8003d04 <MX25LM51245G_EnableSTRMemoryMappedMode+0x26>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003da8:	2304      	movs	r3, #4
 8003daa:	e7b1      	b.n	8003d10 <MX25LM51245G_EnableSTRMemoryMappedMode+0x32>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003dac:	f64e 4313 	movw	r3, #60435	@ 0xec13
 8003db0:	e7bd      	b.n	8003d2e <MX25LM51245G_EnableSTRMemoryMappedMode+0x50>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003db2:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8003db6:	e7e2      	b.n	8003d7e <MX25LM51245G_EnableSTRMemoryMappedMode+0xa0>

08003db8 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8003db8:	b510      	push	{r4, lr}
 8003dba:	b096      	sub	sp, #88	@ 0x58
 8003dbc:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8003dbe:	224c      	movs	r2, #76	@ 0x4c
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	a803      	add	r0, sp, #12
 8003dc4:	f026 f974 	bl	802a0b0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003dc8:	2300      	movs	r3, #0
  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8003dca:	f04f 0c08 	mov.w	ip, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003dce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd6:	4620      	mov	r0, r4
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003dd8:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8003de0:	2304      	movs	r3, #4
 8003de2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8003de4:	2310      	movs	r3, #16
 8003de6:	e9cd 3c06 	strd	r3, ip, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8003dea:	f64e 6311 	movw	r3, #60945	@ 0xee11
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003dee:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8003df2:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8003df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003df8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003dfa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003dfe:	e9cd 310a 	strd	r3, r1, [sp, #40]	@ 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8003e02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e06:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8003e08:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	e9cd c312 	strd	ip, r3, [sp, #72]	@ 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8003e10:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003e14:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e16:	f002 fad4 	bl	80063c2 <HAL_OSPI_Command>
 8003e1a:	b118      	cbz	r0, 8003e24 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6c>
  {
    return MX25LM51245G_ERROR;
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003e20:	b016      	add	sp, #88	@ 0x58
 8003e22:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003e24:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003e2c:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003e2e:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8003e32:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e36:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003e38:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e3a:	f002 fac2 	bl	80063c2 <HAL_OSPI_Command>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d1ec      	bne.n	8003e1c <MX25LM51245G_EnableDTRMemoryMappedMode+0x64>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003e42:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003e44:	4669      	mov	r1, sp
 8003e46:	4620      	mov	r0, r4
 8003e48:	f002 fc50 	bl	80066ec <HAL_OSPI_MemoryMapped>
 8003e4c:	3800      	subs	r0, #0
 8003e4e:	bf18      	it	ne
 8003e50:	2001      	movne	r0, #1
 8003e52:	4240      	negs	r0, r0
 8003e54:	e7e4      	b.n	8003e20 <MX25LM51245G_EnableDTRMemoryMappedMode+0x68>

08003e56 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	b09a      	sub	sp, #104	@ 0x68
 8003e5c:	460f      	mov	r7, r1
 8003e5e:	4605      	mov	r5, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 8003e60:	2100      	movs	r1, #0
{
 8003e62:	4616      	mov	r6, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8003e64:	a806      	add	r0, sp, #24
 8003e66:	2250      	movs	r2, #80	@ 0x50
 8003e68:	f026 f922 	bl	802a0b0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003e6c:	2214      	movs	r2, #20
 8003e6e:	2100      	movs	r1, #0
 8003e70:	a801      	add	r0, sp, #4
 8003e72:	f026 f91d 	bl	802a0b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003e76:	b937      	cbnz	r7, 8003e86 <MX25LM51245G_WriteEnable+0x30>
 8003e78:	2e01      	cmp	r6, #1
 8003e7a:	d163      	bne.n	8003f44 <MX25LM51245G_WriteEnable+0xee>
  {
    return MX25LM51245G_ERROR;
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003e80:	b01a      	add	sp, #104	@ 0x68
 8003e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003e86:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003e88:	1e71      	subs	r1, r6, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003e8a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4628      	mov	r0, r5
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003e92:	424c      	negs	r4, r1
 8003e94:	414c      	adcs	r4, r1
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003e96:	2f00      	cmp	r7, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e98:	a906      	add	r1, sp, #24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003e9a:	ea4f 03c4 	mov.w	r3, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003e9e:	bf14      	ite	ne
 8003ea0:	f04f 0801 	movne.w	r8, #1
 8003ea4:	f04f 0800 	moveq.w	r8, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003eaa:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8003eae:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8003eb0:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 8003eb4:	bf08      	it	eq
 8003eb6:	2306      	moveq	r3, #6
 8003eb8:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003eba:	f002 fa82 	bl	80063c2 <HAL_OSPI_Command>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d1dc      	bne.n	8003e7c <MX25LM51245G_WriteEnable+0x26>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003ec2:	2f00      	cmp	r7, #0
 8003ec4:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Address        = 0U;
 8003ec8:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003eca:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003ece:	bf08      	it	eq
 8003ed0:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ed2:	a906      	add	r1, sp, #24
 8003ed4:	4628      	mov	r0, r5
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003ed6:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003ed8:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8003edc:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003ede:	ea4f 23c4 	mov.w	r3, r4, lsl #11
 8003ee2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8003ee4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003ee8:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003eea:	bf0c      	ite	eq
 8003eec:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8003ef0:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8003ef4:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003ef6:	ea4f 63c4 	mov.w	r3, r4, lsl #27
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003efa:	ea4f 7444 	mov.w	r4, r4, lsl #29
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003efe:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003f00:	bf14      	ite	ne
 8003f02:	2305      	movne	r3, #5
 8003f04:	2300      	moveq	r3, #0
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003f06:	2e01      	cmp	r6, #1
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003f08:	9418      	str	r4, [sp, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003f0a:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2302      	moveq	r3, #2
 8003f10:	2301      	movne	r3, #1
 8003f12:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f14:	f002 fa55 	bl	80063c2 <HAL_OSPI_Command>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d1af      	bne.n	8003e7c <MX25LM51245G_WriteEnable+0x26>
  s_config.Match           = 2U;
 8003f1c:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003f1e:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003f20:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f22:	a901      	add	r1, sp, #4
 8003f24:	4628      	mov	r0, r5
  s_config.Mask            = 2U;
 8003f26:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003f2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f2e:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f36:	f002 fb89 	bl	800664c <HAL_OSPI_AutoPolling>
 8003f3a:	3800      	subs	r0, #0
 8003f3c:	bf18      	it	ne
 8003f3e:	2001      	movne	r0, #1
 8003f40:	4240      	negs	r0, r0
 8003f42:	e79d      	b.n	8003e80 <MX25LM51245G_WriteEnable+0x2a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e79f      	b.n	8003e88 <MX25LM51245G_WriteEnable+0x32>

08003f48 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8003f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4a:	b095      	sub	sp, #84	@ 0x54
 8003f4c:	460e      	mov	r6, r1
 8003f4e:	4605      	mov	r5, r0
 8003f50:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003f52:	2100      	movs	r1, #0
 8003f54:	2250      	movs	r2, #80	@ 0x50
 8003f56:	4668      	mov	r0, sp
{
 8003f58:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8003f5a:	f026 f8a9 	bl	802a0b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003f5e:	b92e      	cbnz	r6, 8003f6c <MX25LM51245G_WriteCfg2Register+0x24>
 8003f60:	2c01      	cmp	r4, #1
 8003f62:	d146      	bne.n	8003ff2 <MX25LM51245G_WriteCfg2Register+0xaa>
  {
    return MX25LM51245G_ERROR;
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003f68:	b015      	add	sp, #84	@ 0x54
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003f70:	1e63      	subs	r3, r4, #1
  s_command.Address            = WriteAddr;
 8003f72:	9706      	str	r7, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003f74:	425a      	negs	r2, r3
 8003f76:	415a      	adcs	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003f78:	2e00      	cmp	r6, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003f7a:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8003f7e:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f8a:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003f8c:	f247 238d 	movw	r3, #29325	@ 0x728d
 8003f90:	bf08      	it	eq
 8003f92:	2372      	moveq	r3, #114	@ 0x72
 8003f94:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003f96:	bf0c      	ite	eq
 8003f98:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8003f9c:	f44f 6380 	movne.w	r3, #1024	@ 0x400
 8003fa0:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003fa2:	ea4f 23c2 	mov.w	r3, r2, lsl #11
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003fa6:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003faa:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003fac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003fb0:	9210      	str	r2, [sp, #64]	@ 0x40
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003fb2:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003fb4:	bf0c      	ite	eq
 8003fb6:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8003fba:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8003fbe:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003fc0:	d019      	beq.n	8003ff6 <MX25LM51245G_WriteCfg2Register+0xae>
 8003fc2:	2c01      	cmp	r4, #1
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2302      	moveq	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fce:	4669      	mov	r1, sp
 8003fd0:	4628      	mov	r0, r5
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003fd2:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fd4:	f002 f9f5 	bl	80063c2 <HAL_OSPI_Command>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1c3      	bne.n	8003f64 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe0:	a91a      	add	r1, sp, #104	@ 0x68
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f002 fa98 	bl	8006518 <HAL_OSPI_Transmit>
 8003fe8:	3800      	subs	r0, #0
 8003fea:	bf18      	it	ne
 8003fec:	2001      	movne	r0, #1
 8003fee:	4240      	negs	r0, r0
 8003ff0:	e7ba      	b.n	8003f68 <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e7bb      	b.n	8003f6e <MX25LM51245G_WriteCfg2Register+0x26>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e7e7      	b.n	8003fca <MX25LM51245G_WriteCfg2Register+0x82>

08003ffa <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	b094      	sub	sp, #80	@ 0x50
 8004000:	460f      	mov	r7, r1
 8004002:	4606      	mov	r6, r0
 8004004:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004006:	2100      	movs	r1, #0
 8004008:	2250      	movs	r2, #80	@ 0x50
 800400a:	4668      	mov	r0, sp
{
 800400c:	4698      	mov	r8, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800400e:	f026 f84f 	bl	802a0b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004012:	b937      	cbnz	r7, 8004022 <MX25LM51245G_ReadCfg2Register+0x28>
 8004014:	2d01      	cmp	r5, #1
 8004016:	d14e      	bne.n	80040b6 <MX25LM51245G_ReadCfg2Register+0xbc>
  {
    return MX25LM51245G_ERROR;
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800401c:	b014      	add	sp, #80	@ 0x50
 800401e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004022:	2304      	movs	r3, #4
 8004024:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004026:	1e6b      	subs	r3, r5, #1
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402c:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800402e:	425c      	negs	r4, r3
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004030:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8004032:	f8cd 8018 	str.w	r8, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004036:	415c      	adcs	r4, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004038:	2f00      	cmp	r7, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800403a:	ea4f 03c4 	mov.w	r3, r4, lsl #3
 800403e:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800404a:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800404c:	f247 138e 	movw	r3, #29070	@ 0x718e
 8004050:	bf08      	it	eq
 8004052:	2371      	moveq	r3, #113	@ 0x71
 8004054:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004056:	bf0c      	ite	eq
 8004058:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 800405c:	f44f 6380 	movne.w	r3, #1024	@ 0x400
 8004060:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004062:	ea4f 23c4 	mov.w	r3, r4, lsl #11
 8004066:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004068:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800406c:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800406e:	bf0c      	ite	eq
 8004070:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8004074:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8004078:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800407a:	ea4f 63c4 	mov.w	r3, r4, lsl #27
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800407e:	ea4f 7444 	mov.w	r4, r4, lsl #29
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004082:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004084:	bf14      	ite	ne
 8004086:	2305      	movne	r3, #5
 8004088:	2300      	moveq	r3, #0
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800408a:	2d01      	cmp	r5, #1
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800408c:	9412      	str	r4, [sp, #72]	@ 0x48
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800408e:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004090:	bf0c      	ite	eq
 8004092:	2302      	moveq	r3, #2
 8004094:	2301      	movne	r3, #1
 8004096:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004098:	f002 f993 	bl	80063c2 <HAL_OSPI_Command>
 800409c:	2800      	cmp	r0, #0
 800409e:	d1bb      	bne.n	8004018 <MX25LM51245G_ReadCfg2Register+0x1e>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80040a6:	4630      	mov	r0, r6
 80040a8:	f002 fa7a 	bl	80065a0 <HAL_OSPI_Receive>
 80040ac:	3800      	subs	r0, #0
 80040ae:	bf18      	it	ne
 80040b0:	2001      	movne	r0, #1
 80040b2:	4240      	negs	r0, r0
 80040b4:	e7b2      	b.n	800401c <MX25LM51245G_ReadCfg2Register+0x22>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e7b4      	b.n	8004024 <MX25LM51245G_ReadCfg2Register+0x2a>

080040ba <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80040ba:	b570      	push	{r4, r5, r6, lr}
 80040bc:	b094      	sub	sp, #80	@ 0x50
 80040be:	460d      	mov	r5, r1
 80040c0:	4606      	mov	r6, r0
 80040c2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80040c4:	2100      	movs	r1, #0
 80040c6:	2250      	movs	r2, #80	@ 0x50
 80040c8:	4668      	mov	r0, sp
 80040ca:	f025 fff1 	bl	802a0b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80040ce:	bb0d      	cbnz	r5, 8004114 <MX25LM51245G_ResetEnable+0x5a>
 80040d0:	2c01      	cmp	r4, #1
 80040d2:	d021      	beq.n	8004118 <MX25LM51245G_ResetEnable+0x5e>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040d4:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040d6:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040d8:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040da:	4669      	mov	r1, sp
 80040dc:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040de:	4254      	negs	r4, r2
 80040e0:	4154      	adcs	r4, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040e2:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040ee:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040f6:	9405      	str	r4, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040f8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80040fa:	f246 6399 	movw	r3, #26265	@ 0x6699
 80040fe:	bf08      	it	eq
 8004100:	2366      	moveq	r3, #102	@ 0x66
 8004102:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004104:	f002 f95d 	bl	80063c2 <HAL_OSPI_Command>
 8004108:	3800      	subs	r0, #0
 800410a:	bf18      	it	ne
 800410c:	2001      	movne	r0, #1
 800410e:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004110:	b014      	add	sp, #80	@ 0x50
 8004112:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004114:	2304      	movs	r3, #4
 8004116:	e7de      	b.n	80040d6 <MX25LM51245G_ResetEnable+0x1c>
    return MX25LM51245G_ERROR;
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	e7f8      	b.n	8004110 <MX25LM51245G_ResetEnable+0x56>

0800411e <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800411e:	b570      	push	{r4, r5, r6, lr}
 8004120:	b094      	sub	sp, #80	@ 0x50
 8004122:	460d      	mov	r5, r1
 8004124:	4606      	mov	r6, r0
 8004126:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004128:	2100      	movs	r1, #0
 800412a:	2250      	movs	r2, #80	@ 0x50
 800412c:	4668      	mov	r0, sp
 800412e:	f025 ffbf 	bl	802a0b0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004132:	bb0d      	cbnz	r5, 8004178 <MX25LM51245G_ResetMemory+0x5a>
 8004134:	2c01      	cmp	r4, #1
 8004136:	d021      	beq.n	800417c <MX25LM51245G_ResetMemory+0x5e>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004138:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800413a:	1e62      	subs	r2, r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800413c:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800413e:	4669      	mov	r1, sp
 8004140:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004142:	4254      	negs	r4, r2
 8004144:	4154      	adcs	r4, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004146:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004148:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004152:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004156:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800415a:	9405      	str	r4, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800415c:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800415e:	f649 1366 	movw	r3, #39270	@ 0x9966
 8004162:	bf08      	it	eq
 8004164:	2399      	moveq	r3, #153	@ 0x99
 8004166:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004168:	f002 f92b 	bl	80063c2 <HAL_OSPI_Command>
 800416c:	3800      	subs	r0, #0
 800416e:	bf18      	it	ne
 8004170:	2001      	movne	r0, #1
 8004172:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004174:	b014      	add	sp, #80	@ 0x50
 8004176:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004178:	2304      	movs	r3, #4
 800417a:	e7de      	b.n	800413a <MX25LM51245G_ResetMemory+0x1c>
    return MX25LM51245G_ERROR;
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	e7f8      	b.n	8004174 <MX25LM51245G_ResetMemory+0x56>
	...

08004184 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 8004184:	4a11      	ldr	r2, [pc, #68]	@ (80041cc <BSP_I2C4_DeInit+0x48>)
{
 8004186:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	b90b      	cbnz	r3, 8004190 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 800418c:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 800418e:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 8004190:	3b01      	subs	r3, #1
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f9      	bne.n	800418c <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004198:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800419c:	480c      	ldr	r0, [pc, #48]	@ (80041d0 <BSP_I2C4_DeInit+0x4c>)
 800419e:	f001 f955 	bl	800544c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80041a2:	480b      	ldr	r0, [pc, #44]	@ (80041d0 <BSP_I2C4_DeInit+0x4c>)
 80041a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041a8:	f001 f950 	bl	800544c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80041ac:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80041ae:	480a      	ldr	r0, [pc, #40]	@ (80041d8 <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 80041b0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80041b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80041bc:	f001 fb7a 	bl	80058b4 <HAL_I2C_DeInit>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d0e3      	beq.n	800418c <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 80041c4:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80041c8:	e7e1      	b.n	800418e <BSP_I2C4_DeInit+0xa>
 80041ca:	bf00      	nop
 80041cc:	24002840 	.word	0x24002840
 80041d0:	58021400 	.word	0x58021400
 80041d4:	58024400 	.word	0x58024400
 80041d8:	24002844 	.word	0x24002844

080041dc <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80041dc:	2300      	movs	r3, #0
 80041de:	2201      	movs	r2, #1
{
 80041e0:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80041e2:	6041      	str	r1, [r0, #4]
{
 80041e4:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80041e6:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80041e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80041ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80041f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80041f4:	f001 fb08 	bl	8005808 <HAL_I2C_Init>
 80041f8:	4601      	mov	r1, r0
 80041fa:	b108      	cbz	r0, 8004200 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
}
 80041fe:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004200:	4620      	mov	r0, r4
 8004202:	f001 fd2e 	bl	8005c62 <HAL_I2CEx_ConfigAnalogFilter>
 8004206:	4601      	mov	r1, r0
 8004208:	2800      	cmp	r0, #0
 800420a:	d1f7      	bne.n	80041fc <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800420c:	4620      	mov	r0, r4
 800420e:	f001 fd4e 	bl	8005cae <HAL_I2CEx_ConfigDigitalFilter>
 8004212:	3800      	subs	r0, #0
 8004214:	bf18      	it	ne
 8004216:	2001      	movne	r0, #1
 8004218:	e7f1      	b.n	80041fe <MX_I2C4_Init+0x22>
	...

0800421c <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800421c:	4b9f      	ldr	r3, [pc, #636]	@ (800449c <BSP_I2C4_Init+0x280>)
 800421e:	48a0      	ldr	r0, [pc, #640]	@ (80044a0 <BSP_I2C4_Init+0x284>)
{
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8004224:	6003      	str	r3, [r0, #0]
{
 8004226:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter++ == 0U)
 8004228:	4b9e      	ldr	r3, [pc, #632]	@ (80044a4 <BSP_I2C4_Init+0x288>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	9200      	str	r2, [sp, #0]
 800422e:	3201      	adds	r2, #1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	9b00      	ldr	r3, [sp, #0]
 8004234:	b11b      	cbz	r3, 800423e <BSP_I2C4_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8004236:	2000      	movs	r0, #0
}
 8004238:	b013      	add	sp, #76	@ 0x4c
 800423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800423e:	f001 fd0b 	bl	8005c58 <HAL_I2C_GetState>
 8004242:	2800      	cmp	r0, #0
 8004244:	d1f7      	bne.n	8004236 <BSP_I2C4_Init+0x1a>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004246:	4d98      	ldr	r5, [pc, #608]	@ (80044a8 <BSP_I2C4_Init+0x28c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004248:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800424c:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800424e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004250:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004254:	4895      	ldr	r0, [pc, #596]	@ (80044ac <BSP_I2C4_Init+0x290>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800425e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	930a      	str	r3, [sp, #40]	@ 0x28
 8004268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800426a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800426e:	f043 0320 	orr.w	r3, r3, #32
 8004272:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8004276:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800427a:	9611      	str	r6, [sp, #68]	@ 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004284:	2312      	movs	r3, #18
 8004286:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800428a:	2302      	movs	r3, #2
 800428c:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004290:	a90d      	add	r1, sp, #52	@ 0x34
 8004292:	f000 fff9 	bl	8005288 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8004296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800429a:	a90d      	add	r1, sp, #52	@ 0x34
 800429c:	4883      	ldr	r0, [pc, #524]	@ (80044ac <BSP_I2C4_Init+0x290>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800429e:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80042a0:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80042a2:	f000 fff1 	bl	8005288 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80042a6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80042aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ae:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80042b2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80042bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80042be:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80042c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c6:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80042ca:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80042ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042d2:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80042d6:	f003 f99d 	bl	8007614 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80042da:	2800      	cmp	r0, #0
 80042dc:	d06a      	beq.n	80043b4 <BSP_I2C4_Init+0x198>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80042de:	4b74      	ldr	r3, [pc, #464]	@ (80044b0 <BSP_I2C4_Init+0x294>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 80042e0:	f04f 0910 	mov.w	r9, #16
  if (tsdadel_max <= 0)
 80042e4:	9a00      	ldr	r2, [sp, #0]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80042e6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80042ea:	f8df b1cc 	ldr.w	fp, [pc, #460]	@ 80044b8 <BSP_I2C4_Init+0x29c>
  if (tsdadel_max <= 0)
 80042ee:	4692      	mov	sl, r2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80042f0:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80042f4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80042f8:	4b6e      	ldr	r3, [pc, #440]	@ (80044b4 <BSP_I2C4_Init+0x298>)
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80042fa:	0086      	lsls	r6, r0, #2
  if (tsdadel_max <= 0)
 80042fc:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80042fe:	f1c5 0532 	rsb	r5, r5, #50	@ 0x32
 8004302:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004304:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8004308:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  if (tsdadel_max <= 0)
 800430c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
{
 8004310:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004312:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8004316:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800431a:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800431e:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8004322:	d35a      	bcc.n	80043da <BSP_I2C4_Init+0x1be>
 8004324:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004326:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004328:	42bd      	cmp	r5, r7
 800432a:	d850      	bhi.n	80043ce <BSP_I2C4_Init+0x1b2>
 800432c:	42be      	cmp	r6, r7
 800432e:	d34e      	bcc.n	80043ce <BSP_I2C4_Init+0x1b2>
            if(presc != prev_presc)
 8004330:	4591      	cmp	r9, r2
 8004332:	d04c      	beq.n	80043ce <BSP_I2C4_Init+0x1b2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004334:	2414      	movs	r4, #20
 8004336:	fb04 fa03 	mul.w	sl, r4, r3
              I2c_valid_timing_nbr ++;
 800433a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800433c:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800433e:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004342:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004344:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004348:	e9c9 4e01 	strd	r4, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800434c:	d93c      	bls.n	80043c8 <BSP_I2C4_Init+0x1ac>
 800434e:	4a59      	ldr	r2, [pc, #356]	@ (80044b4 <BSP_I2C4_Init+0x298>)
 8004350:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004352:	4b58      	ldr	r3, [pc, #352]	@ (80044b4 <BSP_I2C4_Init+0x298>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004354:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004358:	4957      	ldr	r1, [pc, #348]	@ (80044b8 <BSP_I2C4_Init+0x29c>)
 800435a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800435c:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800435e:	9202      	str	r2, [sp, #8]
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004364:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004366:	0043      	lsls	r3, r0, #1
 8004368:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 800436c:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8004370:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8004374:	f10b 0b01 	add.w	fp, fp, #1
 8004378:	9408      	str	r4, [sp, #32]
 800437a:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800437c:	9b05      	ldr	r3, [sp, #20]
 800437e:	429f      	cmp	r7, r3
 8004380:	d137      	bne.n	80043f2 <BSP_I2C4_Init+0x1d6>
        if (idx < I2C_VALID_TIMING_NBR)
 8004382:	2a7f      	cmp	r2, #127	@ 0x7f
 8004384:	d816      	bhi.n	80043b4 <BSP_I2C4_Init+0x198>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004386:	2114      	movs	r1, #20
 8004388:	4b4b      	ldr	r3, [pc, #300]	@ (80044b8 <BSP_I2C4_Init+0x29c>)
 800438a:	434a      	muls	r2, r1
 800438c:	1899      	adds	r1, r3, r2
 800438e:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004390:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004392:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004396:	684b      	ldr	r3, [r1, #4]
 8004398:	051b      	lsls	r3, r3, #20
 800439a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800439e:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80043a0:	688b      	ldr	r3, [r1, #8]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80043a8:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80043aa:	68cb      	ldr	r3, [r1, #12]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80043b0:	4323      	orrs	r3, r4
 80043b2:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80043b4:	9900      	ldr	r1, [sp, #0]
 80043b6:	483a      	ldr	r0, [pc, #232]	@ (80044a0 <BSP_I2C4_Init+0x284>)
 80043b8:	f7ff ff10 	bl	80041dc <MX_I2C4_Init>
 80043bc:	2800      	cmp	r0, #0
 80043be:	f43f af3a 	beq.w	8004236 <BSP_I2C4_Init+0x1a>
          ret = BSP_ERROR_BUS_FAILURE;
 80043c2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80043c6:	e737      	b.n	8004238 <BSP_I2C4_Init+0x1c>
 80043c8:	4691      	mov	r9, r2
 80043ca:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80043ce:	f10e 0e01 	add.w	lr, lr, #1
 80043d2:	440f      	add	r7, r1
 80043d4:	f1be 0f10 	cmp.w	lr, #16
 80043d8:	d1a6      	bne.n	8004328 <BSP_I2C4_Init+0x10c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80043da:	f1bc 0f10 	cmp.w	ip, #16
 80043de:	4488      	add	r8, r1
 80043e0:	d199      	bne.n	8004316 <BSP_I2C4_Init+0xfa>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80043e2:	3201      	adds	r2, #1
 80043e4:	4401      	add	r1, r0
 80043e6:	2a10      	cmp	r2, #16
 80043e8:	d192      	bne.n	8004310 <BSP_I2C4_Init+0xf4>
 80043ea:	f1ba 0f00 	cmp.w	sl, #0
 80043ee:	d1ae      	bne.n	800434e <BSP_I2C4_Init+0x132>
 80043f0:	e7af      	b.n	8004352 <BSP_I2C4_Init+0x136>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80043f2:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80043f4:	f04f 0c00 	mov.w	ip, #0
 80043f8:	9c08      	ldr	r4, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80043fa:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80043fe:	441c      	add	r4, r3
 8004400:	ebab 0503 	sub.w	r5, fp, r3
 8004404:	9403      	str	r4, [sp, #12]
 8004406:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004408:	9d03      	ldr	r5, [sp, #12]
 800440a:	9401      	str	r4, [sp, #4]
 800440c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800440e:	441c      	add	r4, r3
 8004410:	9407      	str	r4, [sp, #28]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004412:	f240 5414 	movw	r4, #1300	@ 0x514
 8004416:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800441a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800441e:	42a5      	cmp	r5, r4
 8004420:	d930      	bls.n	8004484 <BSP_I2C4_Init+0x268>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004422:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004426:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800442a:	d22b      	bcs.n	8004484 <BSP_I2C4_Init+0x268>
 800442c:	9c07      	ldr	r4, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800442e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004432:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004436:	1966      	adds	r6, r4, r5
 8004438:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800443c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8004440:	f240 4412 	movw	r4, #1042	@ 0x412
 8004444:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8004448:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800444c:	45a2      	cmp	sl, r4
 800444e:	d812      	bhi.n	8004476 <BSP_I2C4_Init+0x25a>
 8004450:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8004454:	d30f      	bcc.n	8004476 <BSP_I2C4_Init+0x25a>
 8004456:	4580      	cmp	r8, r0
 8004458:	d90d      	bls.n	8004476 <BSP_I2C4_Init+0x25a>
              error = -error;
 800445a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800445e:	bf28      	it	cs
 8004460:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8004462:	9c02      	ldr	r4, [sp, #8]
 8004464:	45a2      	cmp	sl, r4
 8004466:	d206      	bcs.n	8004476 <BSP_I2C4_Init+0x25a>
              I2c_valid_timing[count].scll = scll;
 8004468:	9a04      	ldr	r2, [sp, #16]
              I2c_valid_timing[count].sclh = sclh;
 800446a:	f8cd a008 	str.w	sl, [sp, #8]
              I2c_valid_timing[count].scll = scll;
 800446e:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8004470:	9a06      	ldr	r2, [sp, #24]
 8004472:	60ca      	str	r2, [r1, #12]
 8004474:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004476:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800447a:	4498      	add	r8, r3
 800447c:	441e      	add	r6, r3
 800447e:	eba9 0903 	sub.w	r9, r9, r3
 8004482:	d1db      	bne.n	800443c <BSP_I2C4_Init+0x220>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004484:	9c01      	ldr	r4, [sp, #4]
 8004486:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800448a:	441d      	add	r5, r3
 800448c:	eba4 0403 	sub.w	r4, r4, r3
 8004490:	9401      	str	r4, [sp, #4]
 8004492:	d1be      	bne.n	8004412 <BSP_I2C4_Init+0x1f6>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004494:	3701      	adds	r7, #1
 8004496:	3114      	adds	r1, #20
 8004498:	e770      	b.n	800437c <BSP_I2C4_Init+0x160>
 800449a:	bf00      	nop
 800449c:	58001c00 	.word	0x58001c00
 80044a0:	24002844 	.word	0x24002844
 80044a4:	24002840 	.word	0x24002840
 80044a8:	58024400 	.word	0x58024400
 80044ac:	58021400 	.word	0x58021400
 80044b0:	3b9aca00 	.word	0x3b9aca00
 80044b4:	24001e3c 	.word	0x24001e3c
 80044b8:	24001e40 	.word	0x24001e40

080044bc <BSP_I2C4_WriteReg>:
{
 80044bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80044be:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80044c2:	9200      	str	r2, [sp, #0]
 80044c4:	460a      	mov	r2, r1
 80044c6:	4601      	mov	r1, r0
 80044c8:	4808      	ldr	r0, [pc, #32]	@ (80044ec <BSP_I2C4_WriteReg+0x30>)
 80044ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044ce:	2301      	movs	r3, #1
 80044d0:	f001 fa0a 	bl	80058e8 <HAL_I2C_Mem_Write>
 80044d4:	b140      	cbz	r0, 80044e8 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80044d6:	4805      	ldr	r0, [pc, #20]	@ (80044ec <BSP_I2C4_WriteReg+0x30>)
 80044d8:	f001 fbc1 	bl	8005c5e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80044dc:	2804      	cmp	r0, #4
 80044de:	bf14      	ite	ne
 80044e0:	f06f 0003 	mvnne.w	r0, #3
 80044e4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80044e8:	b004      	add	sp, #16
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	24002844 	.word	0x24002844

080044f0 <BSP_I2C4_ReadReg>:
{
 80044f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80044f2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	460a      	mov	r2, r1
 80044fa:	4601      	mov	r1, r0
 80044fc:	4808      	ldr	r0, [pc, #32]	@ (8004520 <BSP_I2C4_ReadReg+0x30>)
 80044fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004502:	2301      	movs	r3, #1
 8004504:	f001 faca 	bl	8005a9c <HAL_I2C_Mem_Read>
 8004508:	b140      	cbz	r0, 800451c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800450a:	4805      	ldr	r0, [pc, #20]	@ (8004520 <BSP_I2C4_ReadReg+0x30>)
 800450c:	f001 fba7 	bl	8005c5e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004510:	2804      	cmp	r0, #4
 8004512:	bf14      	ite	ne
 8004514:	f06f 0003 	mvnne.w	r0, #3
 8004518:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800451c:	b004      	add	sp, #16
 800451e:	bd10      	pop	{r4, pc}
 8004520:	24002844 	.word	0x24002844

08004524 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8004524:	f000 bcd2 	b.w	8004ecc <HAL_GetTick>

08004528 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8004528:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800452a:	4c21      	ldr	r4, [pc, #132]	@ (80045b0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 800452c:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800452e:	4821      	ldr	r0, [pc, #132]	@ (80045b4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004530:	78a2      	ldrb	r2, [r4, #2]
 8004532:	7861      	ldrb	r1, [r4, #1]
 8004534:	f7ff fc8f 	bl	8003e56 <MX25LM51245G_WriteEnable>
 8004538:	b118      	cbz	r0, 8004542 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800453a:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800453e:	b005      	add	sp, #20
 8004540:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004542:	2303      	movs	r3, #3
 8004544:	481b      	ldr	r0, [pc, #108]	@ (80045b4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800454c:	78a2      	ldrb	r2, [r4, #2]
 800454e:	7861      	ldrb	r1, [r4, #1]
 8004550:	f7ff fcfa 	bl	8003f48 <MX25LM51245G_WriteCfg2Register>
 8004554:	2800      	cmp	r0, #0
 8004556:	d1f0      	bne.n	800453a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004558:	78a2      	ldrb	r2, [r4, #2]
 800455a:	7861      	ldrb	r1, [r4, #1]
 800455c:	4815      	ldr	r0, [pc, #84]	@ (80045b4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 800455e:	f7ff fc7a 	bl	8003e56 <MX25LM51245G_WriteEnable>
 8004562:	4603      	mov	r3, r0
 8004564:	2800      	cmp	r0, #0
 8004566:	d1e8      	bne.n	800453a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8004568:	2501      	movs	r5, #1
 800456a:	4812      	ldr	r0, [pc, #72]	@ (80045b4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 800456c:	9500      	str	r5, [sp, #0]
 800456e:	78a2      	ldrb	r2, [r4, #2]
 8004570:	7861      	ldrb	r1, [r4, #1]
 8004572:	f7ff fce9 	bl	8003f48 <MX25LM51245G_WriteCfg2Register>
 8004576:	4604      	mov	r4, r0
 8004578:	2800      	cmp	r0, #0
 800457a:	d1de      	bne.n	800453a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800457c:	2028      	movs	r0, #40	@ 0x28
 800457e:	f000 fcab 	bl	8004ed8 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004582:	4622      	mov	r2, r4
 8004584:	4629      	mov	r1, r5
 8004586:	480b      	ldr	r0, [pc, #44]	@ (80045b4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004588:	f7ff fb44 	bl	8003c14 <MX25LM51245G_AutoPollingMemReady>
 800458c:	4603      	mov	r3, r0
 800458e:	2800      	cmp	r0, #0
 8004590:	d1d3      	bne.n	800453a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004592:	aa03      	add	r2, sp, #12
 8004594:	4629      	mov	r1, r5
 8004596:	9200      	str	r2, [sp, #0]
 8004598:	4602      	mov	r2, r0
 800459a:	4806      	ldr	r0, [pc, #24]	@ (80045b4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 800459c:	f7ff fd2d 	bl	8003ffa <MX25LM51245G_ReadCfg2Register>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d1ca      	bne.n	800453a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 80045a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80045a8:	42ab      	cmp	r3, r5
 80045aa:	d0c8      	beq.n	800453e <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 80045ac:	e7c5      	b.n	800453a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 80045ae:	bf00      	nop
 80045b0:	24002898 	.word	0x24002898
 80045b4:	240028a0 	.word	0x240028a0

080045b8 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 80045b8:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80045ba:	4d27      	ldr	r5, [pc, #156]	@ (8004658 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 80045bc:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80045be:	4c27      	ldr	r4, [pc, #156]	@ (800465c <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 80045c0:	78aa      	ldrb	r2, [r5, #2]
 80045c2:	7869      	ldrb	r1, [r5, #1]
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7ff fc46 	bl	8003e56 <MX25LM51245G_WriteEnable>
 80045ca:	b118      	cbz	r0, 80045d4 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80045cc:	f06f 0004 	mvn.w	r0, #4
}
 80045d0:	b005      	add	sp, #20
 80045d2:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 80045d4:	2303      	movs	r3, #3
 80045d6:	4620      	mov	r0, r4
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80045de:	78aa      	ldrb	r2, [r5, #2]
 80045e0:	7869      	ldrb	r1, [r5, #1]
 80045e2:	f7ff fcb1 	bl	8003f48 <MX25LM51245G_WriteCfg2Register>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1f0      	bne.n	80045cc <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80045ea:	78aa      	ldrb	r2, [r5, #2]
 80045ec:	4620      	mov	r0, r4
 80045ee:	7869      	ldrb	r1, [r5, #1]
 80045f0:	f7ff fc31 	bl	8003e56 <MX25LM51245G_WriteEnable>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d1e8      	bne.n	80045cc <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80045fa:	2202      	movs	r2, #2
 80045fc:	4620      	mov	r0, r4
 80045fe:	9200      	str	r2, [sp, #0]
 8004600:	78aa      	ldrb	r2, [r5, #2]
 8004602:	7869      	ldrb	r1, [r5, #1]
 8004604:	f7ff fca0 	bl	8003f48 <MX25LM51245G_WriteCfg2Register>
 8004608:	2800      	cmp	r0, #0
 800460a:	d1df      	bne.n	80045cc <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800460c:	2028      	movs	r0, #40	@ 0x28
 800460e:	f000 fc63 	bl	8004ed8 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004612:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004616:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004618:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800461a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800461e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004620:	f001 fe48 	bl	80062b4 <HAL_OSPI_Init>
 8004624:	b9a8      	cbnz	r0, 8004652 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004626:	2201      	movs	r2, #1
 8004628:	4620      	mov	r0, r4
 800462a:	4611      	mov	r1, r2
 800462c:	f7ff faf2 	bl	8003c14 <MX25LM51245G_AutoPollingMemReady>
 8004630:	4603      	mov	r3, r0
 8004632:	2800      	cmp	r0, #0
 8004634:	d1ca      	bne.n	80045cc <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004636:	aa03      	add	r2, sp, #12
 8004638:	4620      	mov	r0, r4
 800463a:	9200      	str	r2, [sp, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	4611      	mov	r1, r2
 8004640:	f7ff fcdb 	bl	8003ffa <MX25LM51245G_ReadCfg2Register>
 8004644:	2800      	cmp	r0, #0
 8004646:	d1c1      	bne.n	80045cc <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004648:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d0bf      	beq.n	80045d0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004650:	e7bc      	b.n	80045cc <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004652:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004656:	e7bb      	b.n	80045d0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004658:	24002898 	.word	0x24002898
 800465c:	240028a0 	.word	0x240028a0

08004660 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8004660:	4a0e      	ldr	r2, [pc, #56]	@ (800469c <MX_OSPI_NOR_Init+0x3c>)
 8004662:	2304      	movs	r3, #4
 8004664:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004668:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800466a:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800466c:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800466e:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004670:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004672:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004676:	684a      	ldr	r2, [r1, #4]
 8004678:	6242      	str	r2, [r0, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800467a:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 800467c:	6303      	str	r3, [r0, #48]	@ 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800467e:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004680:	68ca      	ldr	r2, [r1, #12]
 8004682:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004684:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004688:	bf12      	itee	ne
 800468a:	461a      	movne	r2, r3
 800468c:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
 8004690:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004694:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004696:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_OSPI_Init(hospi);
 8004698:	f001 be0c 	b.w	80062b4 <HAL_OSPI_Init>
 800469c:	52005000 	.word	0x52005000

080046a0 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 80046a0:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80046a2:	b998      	cbnz	r0, 80046cc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80046a4:	4c0b      	ldr	r4, [pc, #44]	@ (80046d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80046a6:	78a3      	ldrb	r3, [r4, #2]
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80046a8:	7861      	ldrb	r1, [r4, #1]
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80046aa:	b95b      	cbnz	r3, 80046c4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80046ac:	2201      	movs	r2, #1
 80046ae:	480a      	ldr	r0, [pc, #40]	@ (80046d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 80046b0:	f7ff fb15 	bl	8003cde <MX25LM51245G_EnableSTRMemoryMappedMode>
 80046b4:	b110      	cbz	r0, 80046bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80046b6:	f06f 0004 	mvn.w	r0, #4
}
 80046ba:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80046bc:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80046be:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80046c0:	7023      	strb	r3, [r4, #0]
 80046c2:	e7fa      	b.n	80046ba <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80046c4:	4804      	ldr	r0, [pc, #16]	@ (80046d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 80046c6:	f7ff fb77 	bl	8003db8 <MX25LM51245G_EnableDTRMemoryMappedMode>
 80046ca:	e7f3      	b.n	80046b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 80046cc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80046d0:	e7f3      	b.n	80046ba <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 80046d2:	bf00      	nop
 80046d4:	24002898 	.word	0x24002898
 80046d8:	240028a0 	.word	0x240028a0

080046dc <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 80046dc:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80046de:	b950      	cbnz	r0, 80046f6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80046e0:	4c09      	ldr	r4, [pc, #36]	@ (8004708 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 80046e2:	7823      	ldrb	r3, [r4, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d109      	bne.n	80046fc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80046e8:	4808      	ldr	r0, [pc, #32]	@ (800470c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 80046ea:	f002 f82e 	bl	800674a <HAL_OSPI_Abort>
 80046ee:	b940      	cbnz	r0, 8004702 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80046f0:	2301      	movs	r3, #1
 80046f2:	7023      	strb	r3, [r4, #0]
}
 80046f4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80046f6:	f06f 0001 	mvn.w	r0, #1
 80046fa:	e7fb      	b.n	80046f4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 80046fc:	f06f 001a 	mvn.w	r0, #26
 8004700:	e7f8      	b.n	80046f4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004702:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004706:	e7f5      	b.n	80046f4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8004708:	24002898 	.word	0x24002898
 800470c:	240028a0 	.word	0x240028a0

08004710 <BSP_OSPI_NOR_DeInit>:
{
 8004710:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004712:	2800      	cmp	r0, #0
 8004714:	d156      	bne.n	80047c4 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004716:	4c2d      	ldr	r4, [pc, #180]	@ (80047cc <BSP_OSPI_NOR_DeInit+0xbc>)
 8004718:	7823      	ldrb	r3, [r4, #0]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d04b      	beq.n	80047b6 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800471e:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004724:	482a      	ldr	r0, [pc, #168]	@ (80047d0 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004726:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8004728:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 800472a:	f000 fe8f 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 800472e:	2104      	movs	r1, #4
 8004730:	4828      	ldr	r0, [pc, #160]	@ (80047d4 <BSP_OSPI_NOR_DeInit+0xc4>)
 8004732:	f000 fe8b 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8004736:	2140      	movs	r1, #64	@ 0x40
 8004738:	4827      	ldr	r0, [pc, #156]	@ (80047d8 <BSP_OSPI_NOR_DeInit+0xc8>)
 800473a:	f000 fe87 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 800473e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004742:	4826      	ldr	r0, [pc, #152]	@ (80047dc <BSP_OSPI_NOR_DeInit+0xcc>)
 8004744:	f000 fe82 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8004748:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800474c:	4823      	ldr	r0, [pc, #140]	@ (80047dc <BSP_OSPI_NOR_DeInit+0xcc>)
 800474e:	f000 fe7d 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8004752:	2104      	movs	r1, #4
 8004754:	4822      	ldr	r0, [pc, #136]	@ (80047e0 <BSP_OSPI_NOR_DeInit+0xd0>)
 8004756:	f000 fe79 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 800475a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800475e:	481f      	ldr	r0, [pc, #124]	@ (80047dc <BSP_OSPI_NOR_DeInit+0xcc>)
 8004760:	f000 fe74 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8004764:	2110      	movs	r1, #16
 8004766:	481d      	ldr	r0, [pc, #116]	@ (80047dc <BSP_OSPI_NOR_DeInit+0xcc>)
 8004768:	f000 fe70 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 800476c:	2120      	movs	r1, #32
 800476e:	481b      	ldr	r0, [pc, #108]	@ (80047dc <BSP_OSPI_NOR_DeInit+0xcc>)
 8004770:	f000 fe6c 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8004774:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004778:	4817      	ldr	r0, [pc, #92]	@ (80047d8 <BSP_OSPI_NOR_DeInit+0xc8>)
 800477a:	f000 fe67 	bl	800544c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 800477e:	2180      	movs	r1, #128	@ 0x80
 8004780:	4816      	ldr	r0, [pc, #88]	@ (80047dc <BSP_OSPI_NOR_DeInit+0xcc>)
 8004782:	f000 fe63 	bl	800544c <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8004786:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004788:	4817      	ldr	r0, [pc, #92]	@ (80047e8 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 800478a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800478c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004792:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004794:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004798:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_CLK_DISABLE();
 800479a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800479e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047a2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 80047a6:	f001 fdf9 	bl	800639c <HAL_OSPI_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 80047aa:	2800      	cmp	r0, #0
 80047ac:	bf14      	ite	ne
 80047ae:	f06f 0003 	mvnne.w	r0, #3
 80047b2:	2000      	moveq	r0, #0
}
 80047b4:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 80047b6:	f7ff ff91 	bl	80046dc <BSP_OSPI_NOR_DisableMemoryMappedMode>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d0af      	beq.n	800471e <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 80047be:	f06f 0004 	mvn.w	r0, #4
 80047c2:	e7f7      	b.n	80047b4 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 80047c4:	f06f 0001 	mvn.w	r0, #1
 80047c8:	e7f4      	b.n	80047b4 <BSP_OSPI_NOR_DeInit+0xa4>
 80047ca:	bf00      	nop
 80047cc:	24002898 	.word	0x24002898
 80047d0:	58021400 	.word	0x58021400
 80047d4:	58020400 	.word	0x58020400
 80047d8:	58021800 	.word	0x58021800
 80047dc:	58020c00 	.word	0x58020c00
 80047e0:	58021000 	.word	0x58021000
 80047e4:	58024400 	.word	0x58024400
 80047e8:	240028a0 	.word	0x240028a0

080047ec <BSP_OSPI_NOR_ConfigFlash>:
{
 80047ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80047f0:	460d      	mov	r5, r1
 80047f2:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d156      	bne.n	80048a6 <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80047f8:	4c2e      	ldr	r4, [pc, #184]	@ (80048b4 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 80047fa:	7823      	ldrb	r3, [r4, #0]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d055      	beq.n	80048ac <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004800:	7863      	ldrb	r3, [r4, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d146      	bne.n	8004894 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8004806:	2901      	cmp	r1, #1
 8004808:	78a2      	ldrb	r2, [r4, #2]
 800480a:	d109      	bne.n	8004820 <BSP_OSPI_NOR_ConfigFlash+0x34>
 800480c:	4296      	cmp	r6, r2
 800480e:	d107      	bne.n	8004820 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004810:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004812:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8004814:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004816:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004818:	70a6      	strb	r6, [r4, #2]
}
 800481a:	b004      	add	sp, #16
 800481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004820:	4f25      	ldr	r7, [pc, #148]	@ (80048b8 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004822:	2101      	movs	r1, #1
 8004824:	4638      	mov	r0, r7
 8004826:	f7ff fb16 	bl	8003e56 <MX25LM51245G_WriteEnable>
 800482a:	4603      	mov	r3, r0
 800482c:	bb78      	cbnz	r0, 800488e <BSP_OSPI_NOR_ConfigFlash+0xa2>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800482e:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
 8004830:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004834:	4638      	mov	r0, r7
 8004836:	78a2      	ldrb	r2, [r4, #2]
 8004838:	7861      	ldrb	r1, [r4, #1]
 800483a:	f7ff fb85 	bl	8003f48 <MX25LM51245G_WriteCfg2Register>
 800483e:	4680      	mov	r8, r0
 8004840:	bb28      	cbnz	r0, 800488e <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004842:	2028      	movs	r0, #40	@ 0x28
 8004844:	f000 fb48 	bl	8004ed8 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004848:	78a3      	ldrb	r3, [r4, #2]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d106      	bne.n	800485c <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800484e:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004850:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004854:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004858:	f001 fd2c 	bl	80062b4 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800485c:	2200      	movs	r2, #0
 800485e:	4816      	ldr	r0, [pc, #88]	@ (80048b8 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004860:	4611      	mov	r1, r2
 8004862:	f7ff f9d7 	bl	8003c14 <MX25LM51245G_AutoPollingMemReady>
 8004866:	4603      	mov	r3, r0
 8004868:	b988      	cbnz	r0, 800488e <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800486a:	aa03      	add	r2, sp, #12
 800486c:	4601      	mov	r1, r0
 800486e:	9200      	str	r2, [sp, #0]
 8004870:	4602      	mov	r2, r0
 8004872:	4811      	ldr	r0, [pc, #68]	@ (80048b8 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004874:	f7ff fbc1 	bl	8003ffa <MX25LM51245G_ReadCfg2Register>
 8004878:	b948      	cbnz	r0, 800488e <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 800487a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800487e:	b933      	cbnz	r3, 800488e <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004880:	2d01      	cmp	r5, #1
 8004882:	d1c5      	bne.n	8004810 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004884:	78a3      	ldrb	r3, [r4, #2]
 8004886:	b94b      	cbnz	r3, 800489c <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004888:	f7ff fe96 	bl	80045b8 <OSPI_NOR_EnterDOPIMode.constprop.0>
 800488c:	e008      	b.n	80048a0 <BSP_OSPI_NOR_ConfigFlash+0xb4>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800488e:	f06f 0004 	mvn.w	r0, #4
 8004892:	e7c2      	b.n	800481a <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8004894:	2901      	cmp	r1, #1
 8004896:	d1bb      	bne.n	8004810 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004898:	2a00      	cmp	r2, #0
 800489a:	d1f5      	bne.n	8004888 <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800489c:	f7ff fe44 	bl	8004528 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d1ba      	bne.n	800481a <BSP_OSPI_NOR_ConfigFlash+0x2e>
 80048a4:	e7b4      	b.n	8004810 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 80048a6:	f06f 0001 	mvn.w	r0, #1
 80048aa:	e7b6      	b.n	800481a <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80048ac:	f06f 0019 	mvn.w	r0, #25
  return ret;
 80048b0:	e7b3      	b.n	800481a <BSP_OSPI_NOR_ConfigFlash+0x2e>
 80048b2:	bf00      	nop
 80048b4:	24002898 	.word	0x24002898
 80048b8:	240028a0 	.word	0x240028a0

080048bc <MX_OSPI_ClockConfig>:
{
 80048bc:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 80048be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
{
 80048c2:	b0af      	sub	sp, #188	@ 0xbc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 80048c4:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80048c6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 80048c8:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80048cc:	2320      	movs	r3, #32
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80048ce:	2250      	movs	r2, #80	@ 0x50
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80048d0:	9313      	str	r3, [sp, #76]	@ 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80048d2:	2305      	movs	r3, #5
 80048d4:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80048d8:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80048da:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80048dc:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80048e0:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80048e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80048e6:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80048e8:	f002 ffc0 	bl	800786c <HAL_RCCEx_PeriphCLKConfig>
}
 80048ec:	b02f      	add	sp, #188	@ 0xbc
 80048ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080048f4 <BSP_OSPI_NOR_Init>:
{
 80048f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048f8:	460d      	mov	r5, r1
 80048fa:	b09b      	sub	sp, #108	@ 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f040 8160 	bne.w	8004bc2 <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004902:	4eb1      	ldr	r6, [pc, #708]	@ (8004bc8 <BSP_OSPI_NOR_Init+0x2d4>)
 8004904:	7834      	ldrb	r4, [r6, #0]
 8004906:	b11c      	cbz	r4, 8004910 <BSP_OSPI_NOR_Init+0x1c>
      ret = BSP_ERROR_NONE;
 8004908:	2000      	movs	r0, #0
}
 800490a:	b01b      	add	sp, #108	@ 0x6c
 800490c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OSPI_NOR_CLK_ENABLE();
 8004910:	4bae      	ldr	r3, [pc, #696]	@ (8004bcc <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004912:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004916:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 800491a:	a911      	add	r1, sp, #68	@ 0x44
  OSPI_NOR_CLK_ENABLE();
 800491c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004920:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004922:	48ab      	ldr	r0, [pc, #684]	@ (8004bd0 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8004924:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004928:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800492c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8004930:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004934:	9201      	str	r2, [sp, #4]
 8004936:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8004938:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800493a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800493e:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004940:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004942:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004946:	67da      	str	r2, [r3, #124]	@ 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004948:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800494c:	f042 0220 	orr.w	r2, r2, #32
 8004950:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004954:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004958:	f002 0220 	and.w	r2, r2, #32
 800495c:	9202      	str	r2, [sp, #8]
 800495e:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8004960:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004964:	f042 0202 	orr.w	r2, r2, #2
 8004968:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800496c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004970:	f002 0202 	and.w	r2, r2, #2
 8004974:	9203      	str	r2, [sp, #12]
 8004976:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004978:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800497c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004980:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004984:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004988:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800498c:	9204      	str	r2, [sp, #16]
 800498e:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8004990:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004994:	f042 0208 	orr.w	r2, r2, #8
 8004998:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800499c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049a0:	f002 0208 	and.w	r2, r2, #8
 80049a4:	9205      	str	r2, [sp, #20]
 80049a6:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 80049a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049ac:	f042 0208 	orr.w	r2, r2, #8
 80049b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80049b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049b8:	f002 0208 	and.w	r2, r2, #8
 80049bc:	9206      	str	r2, [sp, #24]
 80049be:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 80049c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049c4:	f042 0210 	orr.w	r2, r2, #16
 80049c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80049cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049d0:	f002 0210 	and.w	r2, r2, #16
 80049d4:	9207      	str	r2, [sp, #28]
 80049d6:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 80049d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049dc:	f042 0208 	orr.w	r2, r2, #8
 80049e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80049e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049e8:	f002 0208 	and.w	r2, r2, #8
 80049ec:	9208      	str	r2, [sp, #32]
 80049ee:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 80049f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049f4:	f042 0208 	orr.w	r2, r2, #8
 80049f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80049fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a00:	f002 0208 	and.w	r2, r2, #8
 8004a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8004a08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a0c:	f042 0208 	orr.w	r2, r2, #8
 8004a10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004a14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a18:	f002 0208 	and.w	r2, r2, #8
 8004a1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8004a20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004a2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a30:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8004a34:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004a36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a3c:	f042 0208 	orr.w	r2, r2, #8
 8004a40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a44:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004a52:	2340      	movs	r3, #64	@ 0x40
 8004a54:	e9cd 3911 	strd	r3, r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a58:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004a5a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5e:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004a62:	f000 fc11 	bl	8005288 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004a66:	a911      	add	r1, sp, #68	@ 0x44
 8004a68:	485a      	ldr	r0, [pc, #360]	@ (8004bd4 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004a6a:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004a6c:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004a6e:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004a72:	f000 fc09 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004a7a:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004a7c:	2409      	movs	r4, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004a7e:	a911      	add	r1, sp, #68	@ 0x44
 8004a80:	4855      	ldr	r0, [pc, #340]	@ (8004bd8 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004a82:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004a84:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004a86:	f000 fbff 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004a8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004a8e:	a911      	add	r1, sp, #68	@ 0x44
 8004a90:	4852      	ldr	r0, [pc, #328]	@ (8004bdc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004a92:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004a94:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004a96:	f000 fbf7 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004a9e:	a911      	add	r1, sp, #68	@ 0x44
 8004aa0:	484e      	ldr	r0, [pc, #312]	@ (8004bdc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004aa2:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004aa4:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004aa6:	f000 fbef 	bl	8005288 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004aaa:	a911      	add	r1, sp, #68	@ 0x44
 8004aac:	484c      	ldr	r0, [pc, #304]	@ (8004be0 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8004aae:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004ab0:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8004ab2:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004ab4:	f000 fbe8 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004abc:	a911      	add	r1, sp, #68	@ 0x44
 8004abe:	4847      	ldr	r0, [pc, #284]	@ (8004bdc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004ac0:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8004ac2:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004ac4:	f000 fbe0 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004ac8:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004aca:	a911      	add	r1, sp, #68	@ 0x44
 8004acc:	4843      	ldr	r0, [pc, #268]	@ (8004bdc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004ace:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8004ad0:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004ad4:	f000 fbd8 	bl	8005288 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004ad8:	a911      	add	r1, sp, #68	@ 0x44
 8004ada:	4840      	ldr	r0, [pc, #256]	@ (8004bdc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004adc:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8004ade:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004ae2:	f000 fbd1 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004aea:	a911      	add	r1, sp, #68	@ 0x44
 8004aec:	4838      	ldr	r0, [pc, #224]	@ (8004bd0 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004aee:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8004af0:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004af2:	f000 fbc9 	bl	8005288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004af6:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004af8:	a911      	add	r1, sp, #68	@ 0x44
 8004afa:	4838      	ldr	r0, [pc, #224]	@ (8004bdc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004afc:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8004afe:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004b02:	f000 fbc1 	bl	8005288 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004b06:	a811      	add	r0, sp, #68	@ 0x44
 8004b08:	f7ff f86b 	bl	8003be2 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
      ospi_config.ClockPrescaler = 2U;
 8004b0e:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8004b12:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b16:	b10b      	cbz	r3, 8004b1c <BSP_OSPI_NOR_Init+0x228>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004b18:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004b1c:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004b1e:	4831      	ldr	r0, [pc, #196]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004b20:	970d      	str	r7, [sp, #52]	@ 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004b22:	930f      	str	r3, [sp, #60]	@ 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8004b24:	786b      	ldrb	r3, [r5, #1]
 8004b26:	9310      	str	r3, [sp, #64]	@ 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004b28:	f7ff fec8 	bl	80048bc <MX_OSPI_ClockConfig>
 8004b2c:	b110      	cbz	r0, 8004b34 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004b2e:	f06f 0003 	mvn.w	r0, #3
 8004b32:	e6ea      	b.n	800490a <BSP_OSPI_NOR_Init+0x16>
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004b34:	a90d      	add	r1, sp, #52	@ 0x34
 8004b36:	482b      	ldr	r0, [pc, #172]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b38:	f7ff fd92 	bl	8004660 <MX_OSPI_NOR_Init>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d1f5      	bne.n	8004b2e <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004b42:	4601      	mov	r1, r0
 8004b44:	4827      	ldr	r0, [pc, #156]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b46:	f7ff fab8 	bl	80040ba <MX25LM51245G_ResetEnable>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	b110      	cbz	r0, 8004b54 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b4e:	f06f 0004 	mvn.w	r0, #4
 8004b52:	e6da      	b.n	800490a <BSP_OSPI_NOR_Init+0x16>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004b54:	4601      	mov	r1, r0
 8004b56:	4823      	ldr	r0, [pc, #140]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b58:	f7ff fae1 	bl	800411e <MX25LM51245G_ResetMemory>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d1f5      	bne.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004b62:	2101      	movs	r1, #1
 8004b64:	481f      	ldr	r0, [pc, #124]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b66:	f7ff faa8 	bl	80040ba <MX25LM51245G_ResetEnable>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d1ee      	bne.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004b70:	2101      	movs	r1, #1
 8004b72:	481c      	ldr	r0, [pc, #112]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b74:	f7ff fad3 	bl	800411e <MX25LM51245G_ResetMemory>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1e8      	bne.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4819      	ldr	r0, [pc, #100]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b80:	4611      	mov	r1, r2
 8004b82:	f7ff fa9a 	bl	80040ba <MX25LM51245G_ResetEnable>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d1e1      	bne.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4815      	ldr	r0, [pc, #84]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004b8e:	4611      	mov	r1, r2
 8004b90:	f7ff fac5 	bl	800411e <MX25LM51245G_ResetMemory>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d1da      	bne.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004b98:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004b9a:	70b0      	strb	r0, [r6, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004b9c:	2064      	movs	r0, #100	@ 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004b9e:	8033      	strh	r3, [r6, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004ba0:	f000 f99a 	bl	8004ed8 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004ba4:	78b2      	ldrb	r2, [r6, #2]
 8004ba6:	7871      	ldrb	r1, [r6, #1]
 8004ba8:	480e      	ldr	r0, [pc, #56]	@ (8004be4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004baa:	f7ff f833 	bl	8003c14 <MX25LM51245G_AutoPollingMemReady>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d1cd      	bne.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004bb2:	786a      	ldrb	r2, [r5, #1]
 8004bb4:	7829      	ldrb	r1, [r5, #0]
 8004bb6:	f7ff fe19 	bl	80047ec <BSP_OSPI_NOR_ConfigFlash>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	f43f aea4 	beq.w	8004908 <BSP_OSPI_NOR_Init+0x14>
 8004bc0:	e7c5      	b.n	8004b4e <BSP_OSPI_NOR_Init+0x25a>
    ret = BSP_ERROR_WRONG_PARAM;
 8004bc2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004bc6:	e6a0      	b.n	800490a <BSP_OSPI_NOR_Init+0x16>
 8004bc8:	24002898 	.word	0x24002898
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	58021800 	.word	0x58021800
 8004bd4:	58020400 	.word	0x58020400
 8004bd8:	58021400 	.word	0x58021400
 8004bdc:	58020c00 	.word	0x58020c00
 8004be0:	58021000 	.word	0x58021000
 8004be4:	240028a0 	.word	0x240028a0

08004be8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8004be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d163      	bne.n	8004cbc <BSP_TS_Init+0xd4>
 8004bf4:	680b      	ldr	r3, [r1, #0]
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
 8004bfc:	d25e      	bcs.n	8004cbc <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004bfe:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004c00:	1e51      	subs	r1, r2, #1
 8004c02:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
 8004c06:	d259      	bcs.n	8004cbc <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf28      	it	cs
 8004c0c:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004c0e:	68e2      	ldr	r2, [r4, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d853      	bhi.n	8004cbc <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8004c14:	2370      	movs	r3, #112	@ 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004c16:	4d2b      	ldr	r5, [pc, #172]	@ (8004cc4 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8004c18:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004c1a:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8004c1c:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004c20:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8004c22:	4b29      	ldr	r3, [pc, #164]	@ (8004cc8 <BSP_TS_Init+0xe0>)
 8004c24:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8004c26:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <BSP_TS_Init+0xe4>)
 8004c28:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <BSP_TS_Init+0xe8>)
 8004c2c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <BSP_TS_Init+0xec>)
 8004c30:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8004c32:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <BSP_TS_Init+0xf0>)
 8004c34:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004c36:	f7fe ff3f 	bl	8003ab8 <FT5336_RegisterBusIO>
 8004c3a:	b128      	cbz	r0, 8004c48 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 8004c3c:	f04f 35ff 	mov.w	r5, #4294967295
}
 8004c40:	4628      	mov	r0, r5
 8004c42:	b008      	add	sp, #32
 8004c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8004c48:	a901      	add	r1, sp, #4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7fe fe9b 	bl	8003986 <FT5336_ReadID>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d1f3      	bne.n	8004c3c <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8004c54:	9b01      	ldr	r3, [sp, #4]
 8004c56:	2b51      	cmp	r3, #81	@ 0x51
 8004c58:	d1f0      	bne.n	8004c3c <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004c5c:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 8004c5e:	4f20      	ldr	r7, [pc, #128]	@ (8004ce0 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004c60:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8004ce8 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 8004c64:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004c66:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4798      	blx	r3
 8004c6e:	4605      	mov	r5, r0
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d1e3      	bne.n	8004c3c <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004c74:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004c76:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004c78:	4e1a      	ldr	r6, [pc, #104]	@ (8004ce4 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004c7a:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004c7c:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	4798      	blx	r3
 8004c92:	2800      	cmp	r0, #0
 8004c94:	db0f      	blt.n	8004cb6 <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004c96:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004c98:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004c9a:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004c9c:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004c9e:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004ca0:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004ca6:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004ca8:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004caa:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004cac:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004cae:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004cb0:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004cb4:	e7c4      	b.n	8004c40 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cb6:	f06f 0504 	mvn.w	r5, #4
 8004cba:	e7c1      	b.n	8004c40 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8004cbc:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8004cc0:	e7be      	b.n	8004c40 <BSP_TS_Init+0x58>
 8004cc2:	bf00      	nop
 8004cc4:	240028fc 	.word	0x240028fc
 8004cc8:	0800421d 	.word	0x0800421d
 8004ccc:	08004185 	.word	0x08004185
 8004cd0:	080044f1 	.word	0x080044f1
 8004cd4:	080044bd 	.word	0x080044bd
 8004cd8:	08004525 	.word	0x08004525
 8004cdc:	2400000c 	.word	0x2400000c
 8004ce0:	2400294c 	.word	0x2400294c
 8004ce4:	24002924 	.word	0x24002924
 8004ce8:	24002950 	.word	0x24002950

08004cec <BSP_TS_GetState>:
{
 8004cec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004cf0:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d150      	bne.n	8004d98 <BSP_TS_GetState+0xac>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004da0 <BSP_TS_GetState+0xb4>)
 8004cf8:	a901      	add	r1, sp, #4
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <BSP_TS_GetState+0xb8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6810      	ldr	r0, [r2, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	4798      	blx	r3
 8004d04:	2800      	cmp	r0, #0
 8004d06:	db44      	blt.n	8004d92 <BSP_TS_GetState+0xa6>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8004d08:	4927      	ldr	r1, [pc, #156]	@ (8004da8 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 8004d0a:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8004d0c:	698d      	ldr	r5, [r1, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8004d0e:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	d03a      	beq.n	8004d8a <BSP_TS_GetState+0x9e>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004d14:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004d18:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004d1c:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 8004d20:	e9dd c702 	ldrd	ip, r7, [sp, #8]
        x_oriented = state.TouchY;
 8004d24:	bf19      	ittee	ne
 8004d26:	463b      	movne	r3, r7
        y_oriented = state.TouchX;
 8004d28:	4662      	movne	r2, ip
      y_oriented = state.TouchY;
 8004d2a:	463a      	moveq	r2, r7
      x_oriented = state.TouchX;
 8004d2c:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8004d2e:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004d32:	bf1c      	itt	ne
 8004d34:	f108 33ff 	addne.w	r3, r8, #4294967295
 8004d38:	eba3 030c 	subne.w	r3, r3, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8004d3c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004d40:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8004d44:	bf18      	it	ne
 8004d46:	ebac 0207 	subne.w	r2, ip, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004d4a:	680f      	ldr	r7, [r1, #0]
 8004d4c:	437b      	muls	r3, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004d4e:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8004d50:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004d52:	437a      	muls	r2, r7
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004d54:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004d56:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004d5a:	fbb2 f2fc 	udiv	r2, r2, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004d5e:	42ab      	cmp	r3, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004d60:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004d62:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004d64:	bf8c      	ite	hi
 8004d66:	eba3 0c05 	subhi.w	ip, r3, r5
 8004d6a:	eba5 0c03 	subls.w	ip, r5, r3
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004d6e:	4282      	cmp	r2, r0
 8004d70:	bf8c      	ite	hi
 8004d72:	1a16      	subhi	r6, r2, r0
 8004d74:	1a86      	subls	r6, r0, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004d76:	4567      	cmp	r7, ip
 8004d78:	d301      	bcc.n	8004d7e <BSP_TS_GetState+0x92>
 8004d7a:	42b7      	cmp	r7, r6
 8004d7c:	d206      	bcs.n	8004d8c <BSP_TS_GetState+0xa0>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004d7e:	618b      	str	r3, [r1, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004d80:	620a      	str	r2, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8004d82:	2000      	movs	r0, #0
}
 8004d84:	b004      	add	sp, #16
 8004d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TS_State->TouchDetected = 0U;
 8004d8a:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004d8c:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8004d90:	e7f7      	b.n	8004d82 <BSP_TS_GetState+0x96>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d92:	f06f 0004 	mvn.w	r0, #4
 8004d96:	e7f5      	b.n	8004d84 <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 8004d98:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004d9c:	e7f2      	b.n	8004d84 <BSP_TS_GetState+0x98>
 8004d9e:	bf00      	nop
 8004da0:	24002950 	.word	0x24002950
 8004da4:	2400294c 	.word	0x2400294c
 8004da8:	24002924 	.word	0x24002924

08004dac <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004dac:	4a22      	ldr	r2, [pc, #136]	@ (8004e38 <SystemInit+0x8c>)
 8004dae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004db2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004db6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004dba:	4a20      	ldr	r2, [pc, #128]	@ (8004e3c <SystemInit+0x90>)
 8004dbc:	6813      	ldr	r3, [r2, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d805      	bhi.n	8004dd2 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	f023 030f 	bic.w	r3, r3, #15
 8004dcc:	f043 0307 	orr.w	r3, r3, #7
 8004dd0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <SystemInit+0x94>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ddc:	2200      	movs	r2, #0
 8004dde:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004de0:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <SystemInit+0x98>)
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004de6:	4915      	ldr	r1, [pc, #84]	@ (8004e3c <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8004de8:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004dea:	680a      	ldr	r2, [r1, #0]
 8004dec:	0712      	lsls	r2, r2, #28
 8004dee:	d505      	bpl.n	8004dfc <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004df0:	680a      	ldr	r2, [r1, #0]
 8004df2:	f022 020f 	bic.w	r2, r2, #15
 8004df6:	f042 0207 	orr.w	r2, r2, #7
 8004dfa:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004dfc:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004dfe:	4912      	ldr	r1, [pc, #72]	@ (8004e48 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8004e00:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8004e02:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004e04:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8004e06:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004e08:	4910      	ldr	r1, [pc, #64]	@ (8004e4c <SystemInit+0xa0>)
 8004e0a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004e0c:	4910      	ldr	r1, [pc, #64]	@ (8004e50 <SystemInit+0xa4>)
 8004e0e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004e10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004e12:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004e14:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004e16:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004e18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e1a:	6819      	ldr	r1, [r3, #0]
 8004e1c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8004e20:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004e22:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004e24:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004e28:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <SystemInit+0xa8>)
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e30:	4b01      	ldr	r3, [pc, #4]	@ (8004e38 <SystemInit+0x8c>)
 8004e32:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000ed00 	.word	0xe000ed00
 8004e3c:	52002000 	.word	0x52002000
 8004e40:	58024400 	.word	0x58024400
 8004e44:	eaf6ed7f 	.word	0xeaf6ed7f
 8004e48:	02020200 	.word	0x02020200
 8004e4c:	01ff0000 	.word	0x01ff0000
 8004e50:	01010280 	.word	0x01010280
 8004e54:	52004000 	.word	0x52004000

08004e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e58:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e5a:	2003      	movs	r0, #3
 8004e5c:	f000 f84e 	bl	8004efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e60:	f002 f9dc 	bl	800721c <HAL_RCC_GetSysClockFreq>
 8004e64:	490f      	ldr	r1, [pc, #60]	@ (8004ea4 <HAL_Init+0x4c>)
 8004e66:	4a10      	ldr	r2, [pc, #64]	@ (8004ea8 <HAL_Init+0x50>)
 8004e68:	698b      	ldr	r3, [r1, #24]
 8004e6a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e76:	698b      	ldr	r3, [r1, #24]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004eac <HAL_Init+0x54>)
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa20 f303 	lsr.w	r3, r0, r3
 8004e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_Init+0x58>)
 8004e8c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7fc fa5a 	bl	8001348 <HAL_InitTick>
 8004e94:	4604      	mov	r4, r0
 8004e96:	b918      	cbnz	r0, 8004ea0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004e98:	f7fb ff62 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ea0:	2401      	movs	r4, #1
 8004ea2:	e7fb      	b.n	8004e9c <HAL_Init+0x44>
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	0802d3c0 	.word	0x0802d3c0
 8004eac:	2400003c 	.word	0x2400003c
 8004eb0:	24000040 	.word	0x24000040

08004eb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004eb4:	4a03      	ldr	r2, [pc, #12]	@ (8004ec4 <HAL_IncTick+0x10>)
 8004eb6:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <HAL_IncTick+0x14>)
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	440b      	add	r3, r1
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	24002954 	.word	0x24002954
 8004ec8:	24000044 	.word	0x24000044

08004ecc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ecc:	4b01      	ldr	r3, [pc, #4]	@ (8004ed4 <HAL_GetTick+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	24002954 	.word	0x24002954

08004ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004edc:	f7ff fff6 	bl	8004ecc <HAL_GetTick>
 8004ee0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ee2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004ee4:	bf1e      	ittt	ne
 8004ee6:	4b04      	ldrne	r3, [pc, #16]	@ (8004ef8 <HAL_Delay+0x20>)
 8004ee8:	781b      	ldrbne	r3, [r3, #0]
 8004eea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eec:	f7ff ffee 	bl	8004ecc <HAL_GetTick>
 8004ef0:	1b43      	subs	r3, r0, r5
 8004ef2:	42a3      	cmp	r3, r4
 8004ef4:	d3fa      	bcc.n	8004eec <HAL_Delay+0x14>
  {
  }
}
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	24000044 	.word	0x24000044

08004efc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004efc:	4907      	ldr	r1, [pc, #28]	@ (8004f1c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004efe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f00:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f02:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f0a:	0412      	lsls	r2, r2, #16
 8004f0c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004f18:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f20:	4b16      	ldr	r3, [pc, #88]	@ (8004f7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f22:	b530      	push	{r4, r5, lr}
 8004f24:	68dc      	ldr	r4, [r3, #12]
 8004f26:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f2a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f2e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	bf28      	it	cs
 8004f34:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f36:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f38:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f3c:	bf8c      	ite	hi
 8004f3e:	3c03      	subhi	r4, #3
 8004f40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f42:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8004f46:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f48:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f50:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f54:	fa03 f304 	lsl.w	r3, r3, r4
 8004f58:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004f60:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004f62:	db06      	blt.n	8004f72 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f64:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004f68:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004f6c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004f70:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f72:	f000 000f 	and.w	r0, r0, #15
 8004f76:	4a02      	ldr	r2, [pc, #8]	@ (8004f80 <HAL_NVIC_SetPriority+0x60>)
 8004f78:	5413      	strb	r3, [r2, r0]
 8004f7a:	e7f9      	b.n	8004f70 <HAL_NVIC_SetPriority+0x50>
 8004f7c:	e000ed00 	.word	0xe000ed00
 8004f80:	e000ed14 	.word	0xe000ed14

08004f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004f84:	2800      	cmp	r0, #0
 8004f86:	db07      	blt.n	8004f98 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f88:	2301      	movs	r3, #1
 8004f8a:	0941      	lsrs	r1, r0, #5
 8004f8c:	f000 001f 	and.w	r0, r0, #31
 8004f90:	4a02      	ldr	r2, [pc, #8]	@ (8004f9c <HAL_NVIC_EnableIRQ+0x18>)
 8004f92:	4083      	lsls	r3, r0
 8004f94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	e000e100 	.word	0xe000e100

08004fa0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004fa0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004fa4:	4b04      	ldr	r3, [pc, #16]	@ (8004fb8 <HAL_MPU_Disable+0x18>)
 8004fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_MPU_Enable+0x1c>)
 8004fbe:	f040 0001 	orr.w	r0, r0, #1
 8004fc2:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004fce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004fd2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004fd6:	4770      	bx	lr
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004fdc:	7843      	ldrb	r3, [r0, #1]
 8004fde:	4a14      	ldr	r2, [pc, #80]	@ (8005030 <HAL_MPU_ConfigRegion+0x54>)
 8004fe0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004fe4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004ff0:	6843      	ldr	r3, [r0, #4]
 8004ff2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ff6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ff8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ffa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ffc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005000:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005002:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005004:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005006:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800500a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800500c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005010:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005012:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005016:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005018:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800501c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800501e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005022:	7a01      	ldrb	r1, [r0, #8]
 8005024:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005028:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005034:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005036:	4604      	mov	r4, r0
 8005038:	b908      	cbnz	r0, 800503e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800503a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800503c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800503e:	7f43      	ldrb	r3, [r0, #29]
 8005040:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005044:	b913      	cbnz	r3, 800504c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005046:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005048:	f7fb fea2 	bl	8000d90 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800504c:	2302      	movs	r3, #2
 800504e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005050:	7923      	ldrb	r3, [r4, #4]
 8005052:	b9e3      	cbnz	r3, 800508e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <HAL_CRC_Init+0x70>)
 8005058:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	f022 0218 	bic.w	r2, r2, #24
 8005060:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005062:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005064:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005066:	b9d2      	cbnz	r2, 800509e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005068:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800506c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800506e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	6961      	ldr	r1, [r4, #20]
 8005074:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005078:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800507a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800507c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8005088:	2301      	movs	r3, #1
 800508a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800508c:	e7d6      	b.n	800503c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800508e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005092:	4620      	mov	r0, r4
 8005094:	f000 f808 	bl	80050a8 <HAL_CRCEx_Polynomial_Set>
 8005098:	2800      	cmp	r0, #0
 800509a:	d0e2      	beq.n	8005062 <HAL_CRC_Init+0x2e>
 800509c:	e7cd      	b.n	800503a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800509e:	6922      	ldr	r2, [r4, #16]
 80050a0:	e7e4      	b.n	800506c <HAL_CRC_Init+0x38>
 80050a2:	bf00      	nop
 80050a4:	04c11db7 	.word	0x04c11db7

080050a8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80050a8:	07cb      	lsls	r3, r1, #31
{
 80050aa:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80050ac:	d50d      	bpl.n	80050ca <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80050ae:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80050b0:	3b01      	subs	r3, #1
 80050b2:	d31d      	bcc.n	80050f0 <HAL_CRCEx_Polynomial_Set+0x48>
 80050b4:	fa21 f403 	lsr.w	r4, r1, r3
 80050b8:	07e4      	lsls	r4, r4, #31
 80050ba:	d5f9      	bpl.n	80050b0 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80050bc:	2a10      	cmp	r2, #16
 80050be:	d013      	beq.n	80050e8 <HAL_CRCEx_Polynomial_Set+0x40>
 80050c0:	2a10      	cmp	r2, #16
 80050c2:	d804      	bhi.n	80050ce <HAL_CRCEx_Polynomial_Set+0x26>
 80050c4:	b13a      	cbz	r2, 80050d6 <HAL_CRCEx_Polynomial_Set+0x2e>
 80050c6:	2a08      	cmp	r2, #8
 80050c8:	d010      	beq.n	80050ec <HAL_CRCEx_Polynomial_Set+0x44>
 80050ca:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80050cc:	e00b      	b.n	80050e6 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80050ce:	2a18      	cmp	r2, #24
 80050d0:	d1fb      	bne.n	80050ca <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80050d2:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80050d4:	d8f9      	bhi.n	80050ca <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80050da:	6883      	ldr	r3, [r0, #8]
 80050dc:	f023 0318 	bic.w	r3, r3, #24
 80050e0:	4313      	orrs	r3, r2
 80050e2:	6083      	str	r3, [r0, #8]
 80050e4:	2000      	movs	r0, #0
}
 80050e6:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80050e8:	2b07      	cmp	r3, #7
 80050ea:	e7f3      	b.n	80050d4 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	e7f1      	b.n	80050d4 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80050f0:	2a10      	cmp	r2, #16
 80050f2:	d1e5      	bne.n	80050c0 <HAL_CRCEx_Polynomial_Set+0x18>
 80050f4:	e7e9      	b.n	80050ca <HAL_CRCEx_Polynomial_Set+0x22>

080050f6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80050f6:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80050f8:	4604      	mov	r4, r0
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d036      	beq.n	800516c <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80050fe:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8005102:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005106:	b91b      	cbnz	r3, 8005110 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005108:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800510c:	f7fb fe58 	bl	8000dc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005110:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005112:	69e0      	ldr	r0, [r4, #28]
 8005114:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005116:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800511e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8005126:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800512e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005130:	68a2      	ldr	r2, [r4, #8]
 8005132:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8005136:	4302      	orrs	r2, r0
 8005138:	f021 0101 	bic.w	r1, r1, #1
 800513c:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800513e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005144:	0c12      	lsrs	r2, r2, #16
 8005146:	0412      	lsls	r2, r2, #16
 8005148:	430a      	orrs	r2, r1
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800514c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800514e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8005152:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005156:	0552      	lsls	r2, r2, #21
 8005158:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800515c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800515e:	430a      	orrs	r2, r1
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005162:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005164:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005166:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800516a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800516c:	2001      	movs	r0, #1
 800516e:	e7fc      	b.n	800516a <HAL_DMA2D_Init+0x74>

08005170 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8005170:	4770      	bx	lr

08005172 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8005172:	4770      	bx	lr

08005174 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005174:	6803      	ldr	r3, [r0, #0]
{
 8005176:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005178:	685e      	ldr	r6, [r3, #4]
{
 800517a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800517c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800517e:	07f2      	lsls	r2, r6, #31
 8005180:	d514      	bpl.n	80051ac <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005182:	05e9      	lsls	r1, r5, #23
 8005184:	d512      	bpl.n	80051ac <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800518c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800518e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005196:	2201      	movs	r2, #1
 8005198:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800519a:	2304      	movs	r3, #4
 800519c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80051a0:	2300      	movs	r3, #0
 80051a2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80051a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80051a8:	b103      	cbz	r3, 80051ac <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80051aa:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051ac:	06b2      	lsls	r2, r6, #26
 80051ae:	d516      	bpl.n	80051de <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80051b0:	04ab      	lsls	r3, r5, #18
 80051b2:	d514      	bpl.n	80051de <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80051be:	2220      	movs	r2, #32
 80051c0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051ca:	2304      	movs	r3, #4
 80051cc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80051d0:	2300      	movs	r3, #0
 80051d2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80051d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80051d8:	b10b      	cbz	r3, 80051de <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80051da:	4620      	mov	r0, r4
 80051dc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80051de:	0730      	lsls	r0, r6, #28
 80051e0:	d516      	bpl.n	8005210 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80051e2:	0529      	lsls	r1, r5, #20
 80051e4:	d514      	bpl.n	8005210 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80051f0:	2208      	movs	r2, #8
 80051f2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80051f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051fc:	2304      	movs	r3, #4
 80051fe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8005202:	2300      	movs	r3, #0
 8005204:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8005208:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800520a:	b10b      	cbz	r3, 8005210 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800520c:	4620      	mov	r0, r4
 800520e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005210:	0772      	lsls	r2, r6, #29
 8005212:	d50b      	bpl.n	800522c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005214:	056b      	lsls	r3, r5, #21
 8005216:	d509      	bpl.n	800522c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005218:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800521a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005222:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005224:	2204      	movs	r2, #4
 8005226:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005228:	f7ff ffa2 	bl	8005170 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800522c:	07b0      	lsls	r0, r6, #30
 800522e:	d514      	bpl.n	800525a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005230:	05a9      	lsls	r1, r5, #22
 8005232:	d512      	bpl.n	800525a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800523c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800523e:	2202      	movs	r2, #2
 8005240:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005244:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005246:	2301      	movs	r3, #1
 8005248:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800524c:	2300      	movs	r3, #0
 800524e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8005252:	6a23      	ldr	r3, [r4, #32]
 8005254:	b10b      	cbz	r3, 800525a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8005256:	4620      	mov	r0, r4
 8005258:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800525a:	06f2      	lsls	r2, r6, #27
 800525c:	d513      	bpl.n	8005286 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800525e:	04eb      	lsls	r3, r5, #19
 8005260:	d511      	bpl.n	8005286 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005262:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005264:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800526c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800526e:	2210      	movs	r2, #16
 8005270:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005274:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005276:	2301      	movs	r3, #1
 8005278:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800527c:	2300      	movs	r3, #0
 800527e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005282:	f7ff ff76 	bl	8005172 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8005286:	bd70      	pop	{r4, r5, r6, pc}

08005288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800528c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800528e:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 8005448 <HAL_GPIO_Init+0x1c0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005292:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005296:	680a      	ldr	r2, [r1, #0]
 8005298:	fa32 f503 	lsrs.w	r5, r2, r3
 800529c:	d102      	bne.n	80052a4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800529e:	b003      	add	sp, #12
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052a4:	2501      	movs	r5, #1
 80052a6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80052aa:	ea18 0202 	ands.w	r2, r8, r2
 80052ae:	f000 80b7 	beq.w	8005420 <HAL_GPIO_Init+0x198>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052b2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052b4:	2703      	movs	r7, #3
 80052b6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052ba:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052be:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052c2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052c4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052c8:	2f01      	cmp	r7, #1
 80052ca:	d834      	bhi.n	8005336 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80052cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ce:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052d2:	68cf      	ldr	r7, [r1, #12]
 80052d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80052d8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80052dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80052de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052e0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052e4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80052e8:	409f      	lsls	r7, r3
 80052ea:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80052ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80052f0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052f2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052f4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f8:	688f      	ldr	r7, [r1, #8]
 80052fa:	fa07 f70e 	lsl.w	r7, r7, lr
 80052fe:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8005302:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005304:	d119      	bne.n	800533a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8005306:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800530a:	f003 0a07 	and.w	sl, r3, #7
 800530e:	f04f 0b0f 	mov.w	fp, #15
 8005312:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005316:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800531a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800531e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005322:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005326:	690f      	ldr	r7, [r1, #16]
 8005328:	fa07 f70a 	lsl.w	r7, r7, sl
 800532c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8005330:	f8c8 7020 	str.w	r7, [r8, #32]
 8005334:	e001      	b.n	800533a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005336:	2d03      	cmp	r5, #3
 8005338:	d1da      	bne.n	80052f0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800533a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800533c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005340:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005344:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005348:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800534c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800534e:	d067      	beq.n	8005420 <HAL_GPIO_Init+0x198>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005350:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8005354:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005358:	f003 0c03 	and.w	ip, r3, #3
 800535c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005360:	f045 0502 	orr.w	r5, r5, #2
 8005364:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005368:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800536c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8005370:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8005374:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005378:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800537c:	f005 0502 	and.w	r5, r5, #2
 8005380:	9501      	str	r5, [sp, #4]
 8005382:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005384:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005386:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800538a:	4d2e      	ldr	r5, [pc, #184]	@ (8005444 <HAL_GPIO_Init+0x1bc>)
 800538c:	42a8      	cmp	r0, r5
 800538e:	d049      	beq.n	8005424 <HAL_GPIO_Init+0x19c>
 8005390:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005394:	42a8      	cmp	r0, r5
 8005396:	d047      	beq.n	8005428 <HAL_GPIO_Init+0x1a0>
 8005398:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800539c:	42a8      	cmp	r0, r5
 800539e:	d045      	beq.n	800542c <HAL_GPIO_Init+0x1a4>
 80053a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053a4:	42a8      	cmp	r0, r5
 80053a6:	d043      	beq.n	8005430 <HAL_GPIO_Init+0x1a8>
 80053a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053ac:	42a8      	cmp	r0, r5
 80053ae:	d041      	beq.n	8005434 <HAL_GPIO_Init+0x1ac>
 80053b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053b4:	42a8      	cmp	r0, r5
 80053b6:	d03f      	beq.n	8005438 <HAL_GPIO_Init+0x1b0>
 80053b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053bc:	42a8      	cmp	r0, r5
 80053be:	d03d      	beq.n	800543c <HAL_GPIO_Init+0x1b4>
 80053c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053c4:	42a8      	cmp	r0, r5
 80053c6:	d03b      	beq.n	8005440 <HAL_GPIO_Init+0x1b8>
 80053c8:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80053cc:	42a8      	cmp	r0, r5
 80053ce:	bf14      	ite	ne
 80053d0:	250a      	movne	r5, #10
 80053d2:	2509      	moveq	r5, #9
 80053d4:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053d8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053dc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053e0:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80053e2:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80053e6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80053e8:	bf0c      	ite	eq
 80053ea:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80053ec:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053ee:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80053f2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80053f4:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80053f6:	bf0c      	ite	eq
 80053f8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80053fa:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053fc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8005400:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005402:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8005406:	bf0c      	ite	eq
 8005408:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800540a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800540c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800540e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8005412:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8005416:	bf54      	ite	pl
 8005418:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800541a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800541c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8005420:	3301      	adds	r3, #1
 8005422:	e738      	b.n	8005296 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005424:	2500      	movs	r5, #0
 8005426:	e7d5      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 8005428:	2501      	movs	r5, #1
 800542a:	e7d3      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 800542c:	2502      	movs	r5, #2
 800542e:	e7d1      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 8005430:	2503      	movs	r5, #3
 8005432:	e7cf      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 8005434:	2504      	movs	r5, #4
 8005436:	e7cd      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 8005438:	2505      	movs	r5, #5
 800543a:	e7cb      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 800543c:	2506      	movs	r5, #6
 800543e:	e7c9      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 8005440:	2507      	movs	r5, #7
 8005442:	e7c7      	b.n	80053d4 <HAL_GPIO_Init+0x14c>
 8005444:	58020000 	.word	0x58020000
 8005448:	58024400 	.word	0x58024400

0800544c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005450:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005452:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005456:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800545a:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800545e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8005462:	fa31 f302 	lsrs.w	r3, r1, r2
 8005466:	d101      	bne.n	800546c <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8005468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800546c:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8005470:	ea1c 0601 	ands.w	r6, ip, r1
 8005474:	d06c      	beq.n	8005550 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005476:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800547a:	f002 0703 	and.w	r7, r2, #3
 800547e:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8005482:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005484:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005488:	fa08 f907 	lsl.w	r9, r8, r7
 800548c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005490:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005494:	4b37      	ldr	r3, [pc, #220]	@ (8005574 <HAL_GPIO_DeInit+0x128>)
 8005496:	4298      	cmp	r0, r3
 8005498:	d05c      	beq.n	8005554 <HAL_GPIO_DeInit+0x108>
 800549a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800549e:	4298      	cmp	r0, r3
 80054a0:	d05a      	beq.n	8005558 <HAL_GPIO_DeInit+0x10c>
 80054a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054a6:	4298      	cmp	r0, r3
 80054a8:	d058      	beq.n	800555c <HAL_GPIO_DeInit+0x110>
 80054aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054ae:	4298      	cmp	r0, r3
 80054b0:	d056      	beq.n	8005560 <HAL_GPIO_DeInit+0x114>
 80054b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054b6:	4298      	cmp	r0, r3
 80054b8:	d054      	beq.n	8005564 <HAL_GPIO_DeInit+0x118>
 80054ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054be:	4298      	cmp	r0, r3
 80054c0:	d052      	beq.n	8005568 <HAL_GPIO_DeInit+0x11c>
 80054c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054c6:	4298      	cmp	r0, r3
 80054c8:	d050      	beq.n	800556c <HAL_GPIO_DeInit+0x120>
 80054ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054ce:	4298      	cmp	r0, r3
 80054d0:	d04e      	beq.n	8005570 <HAL_GPIO_DeInit+0x124>
 80054d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d6:	4298      	cmp	r0, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2309      	moveq	r3, #9
 80054dc:	230a      	movne	r3, #10
 80054de:	40bb      	lsls	r3, r7
 80054e0:	4573      	cmp	r3, lr
 80054e2:	d117      	bne.n	8005514 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80054e4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80054e8:	ea23 0306 	bic.w	r3, r3, r6
 80054ec:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80054f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80054f4:	ea23 0306 	bic.w	r3, r3, r6
 80054f8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	ea23 0306 	bic.w	r3, r3, r6
 8005502:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	ea23 0306 	bic.w	r3, r3, r6
 800550a:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800550c:	68ab      	ldr	r3, [r5, #8]
 800550e:	ea23 0309 	bic.w	r3, r3, r9
 8005512:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005514:	0053      	lsls	r3, r2, #1
 8005516:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005518:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800551a:	fa0b f303 	lsl.w	r3, fp, r3
 800551e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005522:	431d      	orrs	r5, r3
 8005524:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005526:	f002 0507 	and.w	r5, r2, #7
 800552a:	6a37      	ldr	r7, [r6, #32]
 800552c:	00ad      	lsls	r5, r5, #2
 800552e:	fa08 f505 	lsl.w	r5, r8, r5
 8005532:	ea27 0705 	bic.w	r7, r7, r5
 8005536:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005538:	68c5      	ldr	r5, [r0, #12]
 800553a:	ea25 0503 	bic.w	r5, r5, r3
 800553e:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005540:	6845      	ldr	r5, [r0, #4]
 8005542:	ea25 050c 	bic.w	r5, r5, ip
 8005546:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005548:	6885      	ldr	r5, [r0, #8]
 800554a:	ea25 0303 	bic.w	r3, r5, r3
 800554e:	6083      	str	r3, [r0, #8]
    position++;
 8005550:	3201      	adds	r2, #1
 8005552:	e786      	b.n	8005462 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005554:	2300      	movs	r3, #0
 8005556:	e7c2      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 8005558:	2301      	movs	r3, #1
 800555a:	e7c0      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 800555c:	2302      	movs	r3, #2
 800555e:	e7be      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 8005560:	2303      	movs	r3, #3
 8005562:	e7bc      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 8005564:	2304      	movs	r3, #4
 8005566:	e7ba      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 8005568:	2305      	movs	r3, #5
 800556a:	e7b8      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 800556c:	2306      	movs	r3, #6
 800556e:	e7b6      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 8005570:	2307      	movs	r3, #7
 8005572:	e7b4      	b.n	80054de <HAL_GPIO_DeInit+0x92>
 8005574:	58020000 	.word	0x58020000

08005578 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005578:	6903      	ldr	r3, [r0, #16]
 800557a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800557c:	bf14      	ite	ne
 800557e:	2001      	movne	r0, #1
 8005580:	2000      	moveq	r0, #0
 8005582:	4770      	bx	lr

08005584 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005584:	b10a      	cbz	r2, 800558a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005586:	6181      	str	r1, [r0, #24]
  }
}
 8005588:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800558a:	0409      	lsls	r1, r1, #16
 800558c:	e7fb      	b.n	8005586 <HAL_GPIO_WritePin+0x2>

0800558e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800558e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005590:	ea01 0203 	and.w	r2, r1, r3
 8005594:	ea21 0103 	bic.w	r1, r1, r3
 8005598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800559c:	6181      	str	r1, [r0, #24]
}
 800559e:	4770      	bx	lr

080055a0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055a0:	6803      	ldr	r3, [r0, #0]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	0791      	lsls	r1, r2, #30
 80055a6:	d501      	bpl.n	80055ac <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055a8:	2200      	movs	r2, #0
 80055aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	07d2      	lsls	r2, r2, #31
 80055b0:	d403      	bmi.n	80055ba <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	f042 0201 	orr.w	r2, r2, #1
 80055b8:	619a      	str	r2, [r3, #24]
  }
}
 80055ba:	4770      	bx	lr

080055bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055bc:	b530      	push	{r4, r5, lr}
 80055be:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055c4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80055c8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80055ce:	4a05      	ldr	r2, [pc, #20]	@ (80055e4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80055d2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80055da:	ea20 0002 	bic.w	r0, r0, r2
 80055de:	4303      	orrs	r3, r0
 80055e0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055e2:	bd30      	pop	{r4, r5, pc}
 80055e4:	03ff63ff 	.word	0x03ff63ff

080055e8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80055e8:	6803      	ldr	r3, [r0, #0]
{
 80055ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80055ee:	699c      	ldr	r4, [r3, #24]
{
 80055f0:	4605      	mov	r5, r0
 80055f2:	460f      	mov	r7, r1
 80055f4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055f6:	f014 0410 	ands.w	r4, r4, #16
 80055fa:	d06f      	beq.n	80056dc <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80055fc:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fe:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005602:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	699a      	ldr	r2, [r3, #24]
 8005608:	0690      	lsls	r0, r2, #26
 800560a:	d461      	bmi.n	80056d0 <I2C_IsErrorOccurred+0xe8>
 800560c:	f1b8 0f00 	cmp.w	r8, #0
 8005610:	d035      	beq.n	800567e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8005612:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8005616:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8005618:	682e      	ldr	r6, [r5, #0]
 800561a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800561c:	05d9      	lsls	r1, r3, #23
 800561e:	d505      	bpl.n	800562c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005620:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005624:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8005628:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800562a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800562c:	055a      	lsls	r2, r3, #21
 800562e:	d505      	bpl.n	800563c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005634:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8005638:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800563a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800563c:	059b      	lsls	r3, r3, #22
 800563e:	d54f      	bpl.n	80056e0 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005640:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005644:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005648:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800564a:	4628      	mov	r0, r5
 800564c:	f7ff ffa8 	bl	80055a0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005650:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8005652:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8005654:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8005658:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800565c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8005666:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8005668:	4323      	orrs	r3, r4
 800566a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800566c:	2320      	movs	r3, #32
 800566e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	2300      	movs	r3, #0
 8005674:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8005678:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800567c:	e032      	b.n	80056e4 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800567e:	1c7a      	adds	r2, r7, #1
 8005680:	d0c1      	beq.n	8005606 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005682:	f7ff fc23 	bl	8004ecc <HAL_GetTick>
 8005686:	1b80      	subs	r0, r0, r6
 8005688:	42b8      	cmp	r0, r7
 800568a:	d801      	bhi.n	8005690 <I2C_IsErrorOccurred+0xa8>
 800568c:	2f00      	cmp	r7, #0
 800568e:	d1b9      	bne.n	8005604 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005694:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005698:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800569a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800569c:	0400      	lsls	r0, r0, #16
 800569e:	d50a      	bpl.n	80056b6 <I2C_IsErrorOccurred+0xce>
 80056a0:	0449      	lsls	r1, r1, #17
 80056a2:	d408      	bmi.n	80056b6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80056a4:	2a20      	cmp	r2, #32
 80056a6:	d006      	beq.n	80056b6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ae:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80056b0:	f7ff fc0c 	bl	8004ecc <HAL_GetTick>
 80056b4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	069b      	lsls	r3, r3, #26
 80056bc:	d4a2      	bmi.n	8005604 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056be:	f7ff fc05 	bl	8004ecc <HAL_GetTick>
 80056c2:	1b80      	subs	r0, r0, r6
 80056c4:	2819      	cmp	r0, #25
 80056c6:	d9f6      	bls.n	80056b6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056c8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80056ca:	f04f 0801 	mov.w	r8, #1
 80056ce:	e799      	b.n	8005604 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80056d0:	f1b8 0f00 	cmp.w	r8, #0
 80056d4:	d19d      	bne.n	8005612 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d6:	2220      	movs	r2, #32
 80056d8:	61da      	str	r2, [r3, #28]
 80056da:	e79a      	b.n	8005612 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	4620      	mov	r0, r4
 80056de:	e79b      	b.n	8005618 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1b2      	bne.n	800564a <I2C_IsErrorOccurred+0x62>
}
 80056e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	460d      	mov	r5, r1
 80056ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	079b      	lsls	r3, r3, #30
 80056f6:	d501      	bpl.n	80056fc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80056f8:	2000      	movs	r0, #0
 80056fa:	e01f      	b.n	800573c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056fc:	4632      	mov	r2, r6
 80056fe:	4629      	mov	r1, r5
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff ff71 	bl	80055e8 <I2C_IsErrorOccurred>
 8005706:	b9c0      	cbnz	r0, 800573a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005708:	1c6a      	adds	r2, r5, #1
 800570a:	d0f1      	beq.n	80056f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570c:	f7ff fbde 	bl	8004ecc <HAL_GetTick>
 8005710:	1b80      	subs	r0, r0, r6
 8005712:	42a8      	cmp	r0, r5
 8005714:	d801      	bhi.n	800571a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005716:	2d00      	cmp	r5, #0
 8005718:	d1ea      	bne.n	80056f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f013 0302 	ands.w	r3, r3, #2
 8005722:	d1e5      	bne.n	80056f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005724:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8005726:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	f042 0220 	orr.w	r2, r2, #32
 800572e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005730:	2220      	movs	r2, #32
 8005732:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800573a:	2001      	movs	r0, #1
}
 800573c:	bd70      	pop	{r4, r5, r6, pc}

0800573e <I2C_WaitOnFlagUntilTimeout>:
{
 800573e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005746:	4604      	mov	r4, r0
 8005748:	460f      	mov	r7, r1
 800574a:	4616      	mov	r6, r2
 800574c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	ea37 0303 	bics.w	r3, r7, r3
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	42b3      	cmp	r3, r6
 800575e:	d001      	beq.n	8005764 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005760:	2000      	movs	r0, #0
 8005762:	e025      	b.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005764:	4642      	mov	r2, r8
 8005766:	4629      	mov	r1, r5
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff ff3d 	bl	80055e8 <I2C_IsErrorOccurred>
 800576e:	b9f0      	cbnz	r0, 80057ae <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8005770:	1c6b      	adds	r3, r5, #1
 8005772:	d0ec      	beq.n	800574e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005774:	f7ff fbaa 	bl	8004ecc <HAL_GetTick>
 8005778:	eba0 0008 	sub.w	r0, r0, r8
 800577c:	42a8      	cmp	r0, r5
 800577e:	d801      	bhi.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x46>
 8005780:	2d00      	cmp	r5, #0
 8005782:	d1e4      	bne.n	800574e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	ea37 0303 	bics.w	r3, r7, r3
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	42b3      	cmp	r3, r6
 8005794:	d1db      	bne.n	800574e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005796:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005798:	f043 0320 	orr.w	r3, r3, #32
 800579c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800579e:	2320      	movs	r3, #32
 80057a0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80057aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80057ae:	2001      	movs	r0, #1
}
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	069b      	lsls	r3, r3, #26
 80057c2:	d501      	bpl.n	80057c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80057c4:	2000      	movs	r0, #0
 80057c6:	e01d      	b.n	8005804 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c8:	4632      	mov	r2, r6
 80057ca:	4629      	mov	r1, r5
 80057cc:	4620      	mov	r0, r4
 80057ce:	f7ff ff0b 	bl	80055e8 <I2C_IsErrorOccurred>
 80057d2:	b9b0      	cbnz	r0, 8005802 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d4:	f7ff fb7a 	bl	8004ecc <HAL_GetTick>
 80057d8:	1b80      	subs	r0, r0, r6
 80057da:	42a8      	cmp	r0, r5
 80057dc:	d801      	bhi.n	80057e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80057de:	2d00      	cmp	r5, #0
 80057e0:	d1ec      	bne.n	80057bc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f013 0320 	ands.w	r3, r3, #32
 80057ea:	d1e7      	bne.n	80057bc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ec:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80057ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057f2:	f042 0220 	orr.w	r2, r2, #32
 80057f6:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	2220      	movs	r2, #32
 80057fa:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8005802:	2001      	movs	r0, #1
}
 8005804:	bd70      	pop	{r4, r5, r6, pc}

08005806 <HAL_I2C_MspInit>:
}
 8005806:	4770      	bx	lr

08005808 <HAL_I2C_Init>:
{
 8005808:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800580a:	4604      	mov	r4, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	d04e      	beq.n	80058ae <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005810:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005814:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005818:	b91b      	cbnz	r3, 8005822 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800581a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800581e:	f7ff fff2 	bl	8005806 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005822:	2324      	movs	r3, #36	@ 0x24
 8005824:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005838:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005840:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005842:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005846:	2901      	cmp	r1, #1
 8005848:	d106      	bne.n	8005858 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800584a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800584e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005856:	e007      	b.n	8005868 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005858:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800585c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800585e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005860:	d1f6      	bne.n	8005850 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005868:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800586a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005876:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800587e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005880:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005884:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005886:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800588c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800588e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800589e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80058ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80058ae:	2001      	movs	r0, #1
 80058b0:	e7fc      	b.n	80058ac <HAL_I2C_Init+0xa4>

080058b2 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80058b2:	4770      	bx	lr

080058b4 <HAL_I2C_DeInit>:
{
 80058b4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80058b6:	4604      	mov	r4, r0
 80058b8:	b198      	cbz	r0, 80058e2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80058ba:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80058bc:	2324      	movs	r3, #36	@ 0x24
 80058be:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80058c2:	6813      	ldr	r3, [r2, #0]
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80058ca:	f7ff fff2 	bl	80058b2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ce:	2000      	movs	r0, #0
 80058d0:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 80058d2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80058d6:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058da:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058dc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80058e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80058e2:	2001      	movs	r0, #1
 80058e4:	e7fc      	b.n	80058e0 <HAL_I2C_DeInit+0x2c>
	...

080058e8 <HAL_I2C_Mem_Write>:
{
 80058e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80058f2:	4604      	mov	r4, r0
 80058f4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f6:	2b20      	cmp	r3, #32
{
 80058f8:	4616      	mov	r6, r2
 80058fa:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80058fe:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005902:	f040 80c6 	bne.w	8005a92 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8005906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005908:	b113      	cbz	r3, 8005910 <HAL_I2C_Mem_Write+0x28>
 800590a:	f1ba 0f00 	cmp.w	sl, #0
 800590e:	d106      	bne.n	800591e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005914:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8005916:	2001      	movs	r0, #1
}
 8005918:	b003      	add	sp, #12
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800591e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005922:	2b01      	cmp	r3, #1
 8005924:	f000 80b5 	beq.w	8005a92 <HAL_I2C_Mem_Write+0x1aa>
 8005928:	f04f 0b01 	mov.w	fp, #1
 800592c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8005930:	f7ff facc 	bl	8004ecc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005934:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005936:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005938:	9000      	str	r0, [sp, #0]
 800593a:	465a      	mov	r2, fp
 800593c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005940:	4620      	mov	r0, r4
 8005942:	f7ff fefc 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 8005946:	2800      	cmp	r0, #0
 8005948:	d1e5      	bne.n	8005916 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800594a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800594c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800594e:	fa5f f289 	uxtb.w	r2, r9
 8005952:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005954:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005958:	2340      	movs	r3, #64	@ 0x40
 800595a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800595e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005962:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005964:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005966:	4b4c      	ldr	r3, [pc, #304]	@ (8005a98 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8005968:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005972:	f7ff fe23 	bl	80055bc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005976:	462a      	mov	r2, r5
 8005978:	4641      	mov	r1, r8
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff feb4 	bl	80056e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005980:	bb18      	cbnz	r0, 80059ca <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005982:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005986:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005988:	d115      	bne.n	80059b6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	@ 0x80
 8005990:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005992:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005994:	4643      	mov	r3, r8
 8005996:	9500      	str	r5, [sp, #0]
 8005998:	f7ff fed1 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 800599c:	b9a8      	cbnz	r0, 80059ca <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2bff      	cmp	r3, #255	@ 0xff
 80059a4:	d815      	bhi.n	80059d2 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80059a6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80059ac:	b292      	uxth	r2, r2
 80059ae:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	9000      	str	r0, [sp, #0]
 80059b4:	e012      	b.n	80059dc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059b6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b8:	4641      	mov	r1, r8
 80059ba:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059be:	462a      	mov	r2, r5
 80059c0:	f7ff fe92 	bl	80056e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80059c4:	b908      	cbnz	r0, 80059ca <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	e7df      	b.n	800598a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80059ca:	2300      	movs	r3, #0
 80059cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80059d0:	e7a1      	b.n	8005916 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d2:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059da:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059dc:	4639      	mov	r1, r7
 80059de:	4620      	mov	r0, r4
 80059e0:	f7ff fdec 	bl	80055bc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e4:	462a      	mov	r2, r5
 80059e6:	4641      	mov	r1, r8
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7ff fe7d 	bl	80056e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d191      	bne.n	8005916 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80059fa:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80059fc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80059fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a00:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005a02:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005a04:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005a06:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005a08:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005a0a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a0c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a0e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	b1b3      	cbz	r3, 8005a42 <HAL_I2C_Mem_Write+0x15a>
 8005a14:	b9aa      	cbnz	r2, 8005a42 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a16:	4643      	mov	r3, r8
 8005a18:	2180      	movs	r1, #128	@ 0x80
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	9500      	str	r5, [sp, #0]
 8005a1e:	f7ff fe8e 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f47f af77 	bne.w	8005916 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2bff      	cmp	r3, #255	@ 0xff
 8005a2e:	d928      	bls.n	8005a82 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a30:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a36:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a38:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fdbd 	bl	80055bc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1cc      	bne.n	80059e4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff feb0 	bl	80057b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f47f af5e 	bne.w	8005916 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	2120      	movs	r1, #32
 8005a5e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8005a66:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8005a6a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005a78:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a7c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8005a80:	e74a      	b.n	8005918 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005a82:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8005a88:	b292      	uxth	r2, r2
 8005a8a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	9000      	str	r0, [sp, #0]
 8005a90:	e7d3      	b.n	8005a3a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8005a92:	2002      	movs	r0, #2
 8005a94:	e740      	b.n	8005918 <HAL_I2C_Mem_Write+0x30>
 8005a96:	bf00      	nop
 8005a98:	80002000 	.word	0x80002000

08005a9c <HAL_I2C_Mem_Read>:
{
 8005a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aaa:	2b20      	cmp	r3, #32
{
 8005aac:	4616      	mov	r6, r2
 8005aae:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8005ab2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab6:	f040 80c9 	bne.w	8005c4c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8005aba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005abc:	b113      	cbz	r3, 8005ac4 <HAL_I2C_Mem_Read+0x28>
 8005abe:	f1ba 0f00 	cmp.w	sl, #0
 8005ac2:	d106      	bne.n	8005ad2 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ac8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8005aca:	2001      	movs	r0, #1
}
 8005acc:	b003      	add	sp, #12
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005ad2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f000 80b8 	beq.w	8005c4c <HAL_I2C_Mem_Read+0x1b0>
 8005adc:	f04f 0b01 	mov.w	fp, #1
 8005ae0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8005ae4:	f7ff f9f2 	bl	8004ecc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ae8:	2319      	movs	r3, #25
 8005aea:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005aec:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aee:	465a      	mov	r2, fp
 8005af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af4:	4620      	mov	r0, r4
 8005af6:	f7ff fe22 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d1e4      	bne.n	8005aca <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b00:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8005b02:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b04:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b06:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b0a:	2240      	movs	r2, #64	@ 0x40
 8005b0c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8005b10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b12:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b14:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005b16:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b18:	4a4d      	ldr	r2, [pc, #308]	@ (8005c50 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8005b1a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b1e:	9200      	str	r2, [sp, #0]
 8005b20:	fa5f f289 	uxtb.w	r2, r9
 8005b24:	f7ff fd4a 	bl	80055bc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f7ff fddb 	bl	80056e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b32:	bb20      	cbnz	r0, 8005b7e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b34:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b38:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b3a:	d116      	bne.n	8005b6a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2140      	movs	r1, #64	@ 0x40
 8005b42:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b44:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b46:	4643      	mov	r3, r8
 8005b48:	9500      	str	r5, [sp, #0]
 8005b4a:	f7ff fdf8 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	b9b0      	cbnz	r0, 8005b7e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2bff      	cmp	r3, #255	@ 0xff
 8005b56:	4b3f      	ldr	r3, [pc, #252]	@ (8005c54 <HAL_I2C_Mem_Read+0x1b8>)
 8005b58:	d815      	bhi.n	8005b86 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005b5a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005b5c:	b292      	uxth	r2, r2
 8005b5e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b68:	e012      	b.n	8005b90 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b6a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6c:	4641      	mov	r1, r8
 8005b6e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b70:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b72:	462a      	mov	r2, r5
 8005b74:	f7ff fdb8 	bl	80056e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b78:	b908      	cbnz	r0, 8005b7e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	e7de      	b.n	8005b3c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005b84:	e7a1      	b.n	8005aca <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b86:	22ff      	movs	r2, #255	@ 0xff
 8005b88:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b90:	4639      	mov	r1, r7
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff fd12 	bl	80055bc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b98:	4643      	mov	r3, r8
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2104      	movs	r1, #4
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	9500      	str	r5, [sp, #0]
 8005ba2:	f7ff fdcc 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d18f      	bne.n	8005aca <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005bb0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005bb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8005bb4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8005bb6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005bb8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005bba:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005bbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bbe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005bc0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005bc2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bc8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b1b3      	cbz	r3, 8005bfc <HAL_I2C_Mem_Read+0x160>
 8005bce:	b9aa      	cbnz	r2, 8005bfc <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	9500      	str	r5, [sp, #0]
 8005bd8:	f7ff fdb1 	bl	800573e <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f47f af74 	bne.w	8005aca <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2bff      	cmp	r3, #255	@ 0xff
 8005be8:	d928      	bls.n	8005c3c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bea:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7ff fce0 	bl	80055bc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005bfc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1c9      	bne.n	8005b98 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c04:	462a      	mov	r2, r5
 8005c06:	4641      	mov	r1, r8
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7ff fdd3 	bl	80057b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f47f af5b 	bne.w	8005aca <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	2120      	movs	r1, #32
 8005c18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8005c20:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8005c24:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005c32:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c36:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8005c3a:	e747      	b.n	8005acc <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005c3c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8005c42:	b292      	uxth	r2, r2
 8005c44:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	9000      	str	r0, [sp, #0]
 8005c4a:	e7d3      	b.n	8005bf4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8005c4c:	2002      	movs	r0, #2
 8005c4e:	e73d      	b.n	8005acc <HAL_I2C_Mem_Read+0x30>
 8005c50:	80002000 	.word	0x80002000
 8005c54:	80002400 	.word	0x80002400

08005c58 <HAL_I2C_GetState>:
  return hi2c->State;
 8005c58:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8005c5c:	4770      	bx	lr

08005c5e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005c5e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8005c60:	4770      	bx	lr

08005c62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c62:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c64:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8005c68:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6a:	2a20      	cmp	r2, #32
 8005c6c:	b2d4      	uxtb	r4, r2
 8005c6e:	d11c      	bne.n	8005caa <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c70:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005c74:	2a01      	cmp	r2, #1
 8005c76:	d018      	beq.n	8005caa <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c78:	2224      	movs	r2, #36	@ 0x24
 8005c7a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7e:	6802      	ldr	r2, [r0, #0]
 8005c80:	6810      	ldr	r0, [r2, #0]
 8005c82:	f020 0001 	bic.w	r0, r0, #1
 8005c86:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c88:	6810      	ldr	r0, [r2, #0]
 8005c8a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8005c8e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c90:	6810      	ldr	r0, [r2, #0]
 8005c92:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c94:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c96:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005c98:	6811      	ldr	r1, [r2, #0]
 8005c9a:	f041 0101 	orr.w	r1, r1, #1
 8005c9e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005ca4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005ca8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8005caa:	2002      	movs	r0, #2
 8005cac:	e7fc      	b.n	8005ca8 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005cae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cae:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8005cb4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb6:	2a20      	cmp	r2, #32
 8005cb8:	b2d4      	uxtb	r4, r2
 8005cba:	d11b      	bne.n	8005cf4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cbc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005cc0:	2a01      	cmp	r2, #1
 8005cc2:	d017      	beq.n	8005cf4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc4:	2224      	movs	r2, #36	@ 0x24
 8005cc6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cca:	6802      	ldr	r2, [r0, #0]
 8005ccc:	6810      	ldr	r0, [r2, #0]
 8005cce:	f020 0001 	bic.w	r0, r0, #1
 8005cd2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cd4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cd6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cda:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cde:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8005ce0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005ce2:	6811      	ldr	r1, [r2, #0]
 8005ce4:	f041 0101 	orr.w	r1, r1, #1
 8005ce8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005cee:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005cf2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8005cf4:	2002      	movs	r0, #2
 8005cf6:	e7fc      	b.n	8005cf2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08005cf8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005cf8:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005cfa:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005cfc:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d00:	3284      	adds	r2, #132	@ 0x84
 8005d02:	1883      	adds	r3, r0, r2
{
 8005d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d08:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d0a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d0e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005d10:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d14:	684c      	ldr	r4, [r1, #4]
 8005d16:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d1a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d1e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d22:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d24:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d26:	68c5      	ldr	r5, [r0, #12]
 8005d28:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8005d2c:	443d      	add	r5, r7
 8005d2e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d32:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d34:	68c6      	ldr	r6, [r0, #12]
 8005d36:	68cd      	ldr	r5, [r1, #12]
 8005d38:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005d3c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d3e:	689d      	ldr	r5, [r3, #8]
 8005d40:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8005d44:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d46:	688d      	ldr	r5, [r1, #8]
 8005d48:	68c7      	ldr	r7, [r0, #12]
 8005d4a:	3501      	adds	r5, #1
 8005d4c:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005d50:	443d      	add	r5, r7
 8005d52:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d56:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d58:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d5a:	691d      	ldr	r5, [r3, #16]
 8005d5c:	f025 0507 	bic.w	r5, r5, #7
 8005d60:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d62:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005d64:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d66:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d6a:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005d6e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d72:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8005d76:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005d7a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005d7e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005d82:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d84:	695d      	ldr	r5, [r3, #20]
 8005d86:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8005d8a:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d8c:	694d      	ldr	r5, [r1, #20]
 8005d8e:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d90:	69dd      	ldr	r5, [r3, #28]
 8005d92:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8005d96:	f025 0507 	bic.w	r5, r5, #7
 8005d9a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d9c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005da0:	433d      	orrs	r5, r7
 8005da2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005da4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005da6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005da8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005dac:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005dae:	b31e      	cbz	r6, 8005df8 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005db0:	2e01      	cmp	r6, #1
 8005db2:	d023      	beq.n	8005dfc <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005db4:	1eb5      	subs	r5, r6, #2
 8005db6:	2d02      	cmp	r5, #2
 8005db8:	d922      	bls.n	8005e00 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005dba:	2e07      	cmp	r6, #7
 8005dbc:	bf14      	ite	ne
 8005dbe:	2501      	movne	r5, #1
 8005dc0:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005dc2:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005dc4:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005dc8:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005dcc:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005dce:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005dd0:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8005dd2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005dd4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8005dd6:	436e      	muls	r6, r5
 8005dd8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005ddc:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005dde:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8005de0:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8005de4:	f024 0407 	bic.w	r4, r4, #7
 8005de8:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005dea:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005dec:	5883      	ldr	r3, [r0, r2]
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	5083      	str	r3, [r0, r2]
}
 8005df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005df8:	2504      	movs	r5, #4
 8005dfa:	e7e2      	b.n	8005dc2 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005dfc:	2503      	movs	r5, #3
 8005dfe:	e7e0      	b.n	8005dc2 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005e00:	2502      	movs	r5, #2
 8005e02:	e7de      	b.n	8005dc2 <LTDC_SetConfig+0xca>

08005e04 <HAL_LTDC_Init>:
{
 8005e04:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005e06:	4604      	mov	r4, r0
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d063      	beq.n	8005ed4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e0c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8005e10:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005e14:	b91b      	cbnz	r3, 8005e1e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005e16:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005e1a:	f7fa fff5 	bl	8000e08 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005e2c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e2e:	6999      	ldr	r1, [r3, #24]
 8005e30:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005e34:	4302      	orrs	r2, r0
 8005e36:	68e0      	ldr	r0, [r4, #12]
 8005e38:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e3a:	6920      	ldr	r0, [r4, #16]
 8005e3c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e3e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e40:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e42:	4925      	ldr	r1, [pc, #148]	@ (8005ed8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e44:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	400a      	ands	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e52:	69a0      	ldr	r0, [r4, #24]
 8005e54:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e56:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e58:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	400a      	ands	r2, r1
 8005e5e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e66:	6a20      	ldr	r0, [r4, #32]
 8005e68:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e6a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e6c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	400a      	ands	r2, r1
 8005e72:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e7a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005e7c:	4302      	orrs	r2, r0
 8005e7e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e84:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e86:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005e8e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e90:	430a      	orrs	r2, r1
 8005e92:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e96:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e9a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e9e:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ea4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005ea6:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8005eaa:	432a      	orrs	r2, r5
 8005eac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005eb0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005eb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eba:	f042 0206 	orr.w	r2, r2, #6
 8005ebe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ec8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005eca:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ece:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	e7fc      	b.n	8005ed2 <HAL_LTDC_Init+0xce>
 8005ed8:	f000f800 	.word	0xf000f800

08005edc <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8005edc:	4770      	bx	lr

08005ede <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8005ede:	4770      	bx	lr

08005ee0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ee0:	6803      	ldr	r3, [r0, #0]
{
 8005ee2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ee4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8005ee6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ee8:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005eea:	0772      	lsls	r2, r6, #29
 8005eec:	d514      	bpl.n	8005f18 <HAL_LTDC_IRQHandler+0x38>
 8005eee:	0769      	lsls	r1, r5, #29
 8005ef0:	d512      	bpl.n	8005f18 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ef4:	f022 0204 	bic.w	r2, r2, #4
 8005ef8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005efa:	2204      	movs	r2, #4
 8005efc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005efe:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8005f0a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f0c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005f10:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005f14:	f7ff ffe2 	bl	8005edc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005f18:	07b2      	lsls	r2, r6, #30
 8005f1a:	d516      	bpl.n	8005f4a <HAL_LTDC_IRQHandler+0x6a>
 8005f1c:	07ab      	lsls	r3, r5, #30
 8005f1e:	d514      	bpl.n	8005f4a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f20:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005f22:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f26:	f022 0202 	bic.w	r2, r2, #2
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f30:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f3a:	2304      	movs	r3, #4
 8005f3c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005f40:	2300      	movs	r3, #0
 8005f42:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005f46:	f7ff ffc9 	bl	8005edc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f4a:	07f0      	lsls	r0, r6, #31
 8005f4c:	d510      	bpl.n	8005f70 <HAL_LTDC_IRQHandler+0x90>
 8005f4e:	07e9      	lsls	r1, r5, #31
 8005f50:	d50e      	bpl.n	8005f70 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f52:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005f54:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f5e:	2201      	movs	r2, #1
 8005f60:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8005f62:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f64:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005f68:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005f6c:	f7fc ff78 	bl	8002e60 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f70:	0732      	lsls	r2, r6, #28
 8005f72:	d511      	bpl.n	8005f98 <HAL_LTDC_IRQHandler+0xb8>
 8005f74:	072b      	lsls	r3, r5, #28
 8005f76:	d50f      	bpl.n	8005f98 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f78:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f7a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f7e:	f022 0208 	bic.w	r2, r2, #8
 8005f82:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f84:	2208      	movs	r2, #8
 8005f86:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f94:	f7ff ffa3 	bl	8005ede <HAL_LTDC_ReloadEventCallback>
}
 8005f98:	bd70      	pop	{r4, r5, r6, pc}

08005f9a <HAL_LTDC_ConfigLayer>:
{
 8005f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005f9e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	f04f 0002 	mov.w	r0, #2
 8005fae:	d01f      	beq.n	8005ff0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fb0:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8005fb2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fb6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fb8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fbc:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005fc0:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fc4:	3438      	adds	r4, #56	@ 0x38
 8005fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	4662      	mov	r2, ip
 8005fd8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fda:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fdc:	f7ff fe8c 	bl	8005cf8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fe0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005fe2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fe4:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fe8:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005fec:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8005ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ff4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005ff4:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 8005ffc:	2a01      	cmp	r2, #1
 8005ffe:	d012      	beq.n	8006026 <HAL_LTDC_ProgramLineEvent+0x32>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006000:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006002:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006006:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8006008:	f020 0001 	bic.w	r0, r0, #1
 800600c:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800600e:	4806      	ldr	r0, [pc, #24]	@ (8006028 <HAL_LTDC_ProgramLineEvent+0x34>)
 8006010:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hltdc);
 8006012:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006014:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8006016:	f041 0101 	orr.w	r1, r1, #1
 800601a:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800601c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 800601e:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 8006022:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
}
 8006026:	4770      	bx	lr
 8006028:	50001000 	.word	0x50001000

0800602c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8006030:	f7fe ff4c 	bl	8004ecc <HAL_GetTick>
 8006034:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006036:	b144      	cbz	r4, 800604a <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8006038:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800603c:	2b02      	cmp	r3, #2
 800603e:	d006      	beq.n	800604e <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006040:	2380      	movs	r3, #128	@ 0x80
 8006042:	66a3      	str	r3, [r4, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006044:	2300      	movs	r3, #0
 8006046:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800604a:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800604c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8006056:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_DISABLE(hmdma);
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	60da      	str	r2, [r3, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	68d8      	ldr	r0, [r3, #12]
 8006064:	f010 0001 	ands.w	r0, r0, #1
 8006068:	d107      	bne.n	800607a <HAL_MDMA_Abort+0x4e>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800606a:	221f      	movs	r2, #31
 800606c:	605a      	str	r2, [r3, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 800606e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hmdma);
 8006070:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 8006074:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006078:	e7e8      	b.n	800604c <HAL_MDMA_Abort+0x20>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800607a:	f7fe ff27 	bl	8004ecc <HAL_GetTick>
 800607e:	1b40      	subs	r0, r0, r5
 8006080:	2805      	cmp	r0, #5
 8006082:	d9ed      	bls.n	8006060 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8006084:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800608a:	66a3      	str	r3, [r4, #104]	@ 0x68
        __HAL_UNLOCK(hmdma);
 800608c:	2300      	movs	r3, #0
 800608e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006092:	2303      	movs	r3, #3
 8006094:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        return HAL_ERROR;
 8006098:	e7d7      	b.n	800604a <HAL_MDMA_Abort+0x1e>
	...

0800609c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800609c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80060a0:	6804      	ldr	r4, [r0, #0]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80060a8:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80060aa:	6883      	ldr	r3, [r0, #8]
 80060ac:	b92b      	cbnz	r3, 80060ba <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	684a      	ldr	r2, [r1, #4]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b6:	4313      	orrs	r3, r2
 80060b8:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80060ba:	680b      	ldr	r3, [r1, #0]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d150      	bne.n	8006162 <OSPI_ConfigCmd+0xc6>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80060c0:	f504 72c0 	add.w	r2, r4, #384	@ 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 80060c4:	f504 76c4 	add.w	r6, r4, #392	@ 0x188
    ir_reg  = &(hospi->Instance->WIR);
 80060c8:	f504 75c8 	add.w	r5, r4, #400	@ 0x190
    abr_reg = &(hospi->Instance->WABR);
 80060cc:	f504 7cd0 	add.w	ip, r4, #416	@ 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80060d0:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	@ 0x48
 80060d4:	433b      	orrs	r3, r7
 80060d6:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80060d8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80060da:	b16b      	cbz	r3, 80060f8 <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80060dc:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80060de:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80060e2:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
 80060e4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80060e6:	f8d2 c000 	ldr.w	ip, [r2]
 80060ea:	433b      	orrs	r3, r7
 80060ec:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 80060ee:	433b      	orrs	r3, r7
 80060f0:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
 80060f4:	433b      	orrs	r3, r7
 80060f6:	6013      	str	r3, [r2, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	6c4f      	ldr	r7, [r1, #68]	@ 0x44
 80060fc:	f023 031f 	bic.w	r3, r3, #31
 8006100:	433b      	orrs	r3, r7
 8006102:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006104:	f8d1 e038 	ldr.w	lr, [r1, #56]	@ 0x38
 8006108:	f1be 0f00 	cmp.w	lr, #0
 800610c:	d004      	beq.n	8006118 <OSPI_ConfigCmd+0x7c>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800610e:	680b      	ldr	r3, [r1, #0]
 8006110:	b913      	cbnz	r3, 8006118 <OSPI_ConfigCmd+0x7c>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006112:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8006114:	3b01      	subs	r3, #1
 8006116:	6423      	str	r3, [r4, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006118:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800611a:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800611e:	2b00      	cmp	r3, #0
 8006120:	d07a      	beq.n	8006218 <OSPI_ConfigCmd+0x17c>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006122:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006126:	f1b9 0f00 	cmp.w	r9, #0
 800612a:	d04a      	beq.n	80061c2 <OSPI_ConfigCmd+0x126>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800612c:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006130:	f1be 0f00 	cmp.w	lr, #0
 8006134:	d029      	beq.n	800618a <OSPI_ConfigCmd+0xee>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006136:	ea4e 0303 	orr.w	r3, lr, r3
 800613a:	6810      	ldr	r0, [r2, #0]
 800613c:	ea43 0309 	orr.w	r3, r3, r9
 8006140:	ea43 0308 	orr.w	r3, r3, r8
 8006144:	ea43 030c 	orr.w	r3, r3, ip
 8006148:	433b      	orrs	r3, r7
 800614a:	4333      	orrs	r3, r6
 800614c:	6c0e      	ldr	r6, [r1, #64]	@ 0x40
 800614e:	4333      	orrs	r3, r6
 8006150:	4e43      	ldr	r6, [pc, #268]	@ (8006260 <OSPI_ConfigCmd+0x1c4>)
 8006152:	4006      	ands	r6, r0
 8006154:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006156:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006158:	688b      	ldr	r3, [r1, #8]
 800615a:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800615c:	698b      	ldr	r3, [r1, #24]
 800615e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006160:	e043      	b.n	80061ea <OSPI_ConfigCmd+0x14e>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8006162:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 8006164:	bf01      	itttt	eq
 8006166:	f504 72a0 	addeq.w	r2, r4, #320	@ 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800616a:	f504 76a4 	addeq.w	r6, r4, #328	@ 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800616e:	f504 75a8 	addeq.w	r5, r4, #336	@ 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8006172:	f504 7cb0 	addeq.w	ip, r4, #352	@ 0x160
    ccr_reg = &(hospi->Instance->CCR);
 8006176:	bf1f      	itttt	ne
 8006178:	f504 7280 	addne.w	r2, r4, #256	@ 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800617c:	f504 7684 	addne.w	r6, r4, #264	@ 0x108
    ir_reg  = &(hospi->Instance->IR);
 8006180:	f504 7588 	addne.w	r5, r4, #272	@ 0x110
    abr_reg = &(hospi->Instance->ABR);
 8006184:	f504 7c90 	addne.w	ip, r4, #288	@ 0x120
 8006188:	e7a2      	b.n	80060d0 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800618a:	ea43 0309 	orr.w	r3, r3, r9
 800618e:	f8d2 e000 	ldr.w	lr, [r2]
 8006192:	ea43 0308 	orr.w	r3, r3, r8
 8006196:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
 800619a:	ea43 030c 	orr.w	r3, r3, ip
 800619e:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
 80061a2:	433b      	orrs	r3, r7
 80061a4:	4333      	orrs	r3, r6
 80061a6:	ea43 030e 	orr.w	r3, r3, lr
 80061aa:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061ac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80061ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061b2:	d1d1      	bne.n	8006158 <OSPI_ConfigCmd+0xbc>
 80061b4:	694b      	ldr	r3, [r1, #20]
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d1ce      	bne.n	8006158 <OSPI_ConfigCmd+0xbc>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c0:	e7c9      	b.n	8006156 <OSPI_ConfigCmd+0xba>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061c2:	f1be 0f00 	cmp.w	lr, #0
 80061c6:	d013      	beq.n	80061f0 <OSPI_ConfigCmd+0x154>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80061c8:	ea4e 0303 	orr.w	r3, lr, r3
 80061cc:	6810      	ldr	r0, [r2, #0]
 80061ce:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 80061d0:	ea43 0308 	orr.w	r3, r3, r8
 80061d4:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 80061d8:	ea43 030c 	orr.w	r3, r3, ip
 80061dc:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80061e0:	4323      	orrs	r3, r4
 80061e2:	4303      	orrs	r3, r0
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80061e4:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 80061e6:	688b      	ldr	r3, [r1, #8]
 80061e8:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 80061ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80061f0:	6814      	ldr	r4, [r2, #0]
 80061f2:	ea43 0308 	orr.w	r3, r3, r8
 80061f6:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 80061fa:	ea43 030c 	orr.w	r3, r3, ip
 80061fe:	4323      	orrs	r3, r4
 8006200:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006202:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006208:	d1ed      	bne.n	80061e6 <OSPI_ConfigCmd+0x14a>
 800620a:	694b      	ldr	r3, [r1, #20]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d1ea      	bne.n	80061e6 <OSPI_ConfigCmd+0x14a>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006210:	6813      	ldr	r3, [r2, #0]
 8006212:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006216:	e7e5      	b.n	80061e4 <OSPI_ConfigCmd+0x148>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006218:	f1b9 0f00 	cmp.w	r9, #0
 800621c:	d01b      	beq.n	8006256 <OSPI_ConfigCmd+0x1ba>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800621e:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006222:	f1be 0f00 	cmp.w	lr, #0
 8006226:	d00d      	beq.n	8006244 <OSPI_ConfigCmd+0x1a8>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006228:	ea4e 0309 	orr.w	r3, lr, r9
 800622c:	6815      	ldr	r5, [r2, #0]
 800622e:	4303      	orrs	r3, r0
 8006230:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8006232:	4333      	orrs	r3, r6
 8006234:	4303      	orrs	r3, r0
 8006236:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
 800623a:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800623e:	4303      	orrs	r3, r0
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e78b      	b.n	800615c <OSPI_ConfigCmd+0xc0>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8006244:	6813      	ldr	r3, [r2, #0]
 8006246:	ea40 0009 	orr.w	r0, r0, r9
 800624a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800624e:	4330      	orrs	r0, r6
 8006250:	4318      	orrs	r0, r3
 8006252:	6010      	str	r0, [r2, #0]
 8006254:	e782      	b.n	800615c <OSPI_ConfigCmd+0xc0>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006256:	2308      	movs	r3, #8
 8006258:	6543      	str	r3, [r0, #84]	@ 0x54
      status = HAL_ERROR;
 800625a:	2001      	movs	r0, #1
 800625c:	e7c6      	b.n	80061ec <OSPI_ConfigCmd+0x150>
 800625e:	bf00      	nop
 8006260:	f0ffc0c0 	.word	0xf0ffc0c0

08006264 <OSPI_WaitFlagStateUntilTimeout>:
{
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800626c:	4604      	mov	r4, r0
 800626e:	460e      	mov	r6, r1
 8006270:	4615      	mov	r5, r2
 8006272:	461f      	mov	r7, r3
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	6a13      	ldr	r3, [r2, #32]
 8006278:	4233      	tst	r3, r6
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	42ab      	cmp	r3, r5
 8006282:	d101      	bne.n	8006288 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8006284:	2000      	movs	r0, #0
 8006286:	e012      	b.n	80062ae <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006288:	f1b8 3fff 	cmp.w	r8, #4294967295
 800628c:	d0f3      	beq.n	8006276 <OSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fe fe1d 	bl	8004ecc <HAL_GetTick>
 8006292:	1bc0      	subs	r0, r0, r7
 8006294:	4540      	cmp	r0, r8
 8006296:	d802      	bhi.n	800629e <OSPI_WaitFlagStateUntilTimeout+0x3a>
 8006298:	f1b8 0f00 	cmp.w	r8, #0
 800629c:	d1ea      	bne.n	8006274 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800629e:	f44f 7300 	mov.w	r3, #512	@ 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80062a2:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80062a4:	6523      	str	r3, [r4, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80062a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80062ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080062b4 <HAL_OSPI_Init>:
{
 80062b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80062b8:	f7fe fe08 	bl	8004ecc <HAL_GetTick>
 80062bc:	4606      	mov	r6, r0
  if (hospi == NULL)
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d068      	beq.n	8006394 <HAL_OSPI_Init+0xe0>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80062c6:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 80062c8:	2f00      	cmp	r7, #0
 80062ca:	d15e      	bne.n	800638a <HAL_OSPI_Init+0xd6>
      HAL_OSPI_MspInit(hospi);
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7fa feab 	bl	8001028 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 80062d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062d4:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 80062d6:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	4319      	orrs	r1, r3
 80062de:	69e3      	ldr	r3, [r4, #28]
 80062e0:	68a8      	ldr	r0, [r5, #8]
 80062e2:	4319      	orrs	r1, r3
 80062e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006398 <HAL_OSPI_Init+0xe4>)
  hospi->Timeout = Timeout;
 80062e6:	65a2      	str	r2, [r4, #88]	@ 0x58
      MODIFY_REG(hospi->Instance->DCR1,
 80062e8:	4003      	ands	r3, r0
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80062ea:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->DCR1,
 80062ec:	4319      	orrs	r1, r3
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80062f6:	6963      	ldr	r3, [r4, #20]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80062fe:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006300:	68eb      	ldr	r3, [r5, #12]
 8006302:	6a21      	ldr	r1, [r4, #32]
 8006304:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006308:	430b      	orrs	r3, r1
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800630a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800630c:	60eb      	str	r3, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800630e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006314:	6861      	ldr	r1, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006316:	612b      	str	r3, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006318:	3901      	subs	r1, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800631a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800631c:	616b      	str	r3, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8006324:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006328:	2120      	movs	r1, #32
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800632a:	602b      	str	r3, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800632c:	4633      	mov	r3, r6
 800632e:	9200      	str	r2, [sp, #0]
 8006330:	463a      	mov	r2, r7
 8006332:	f7ff ff97 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006336:	bb48      	cbnz	r0, 800638c <HAL_OSPI_Init+0xd8>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800633c:	68d9      	ldr	r1, [r3, #12]
 800633e:	3a01      	subs	r2, #1
 8006340:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8006344:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006346:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006348:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006350:	430a      	orrs	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006354:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8006358:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 800635c:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
 8006360:	4302      	orrs	r2, r0
 8006362:	430a      	orrs	r2, r1
 8006364:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        __HAL_OSPI_ENABLE(hospi);
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006370:	69a2      	ldr	r2, [r4, #24]
 8006372:	2a02      	cmp	r2, #2
 8006374:	d103      	bne.n	800637e <HAL_OSPI_Init+0xca>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	f042 0202 	orr.w	r2, r2, #2
 800637c:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006384:	d104      	bne.n	8006390 <HAL_OSPI_Init+0xdc>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006386:	2301      	movs	r3, #1
 8006388:	6523      	str	r3, [r4, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800638a:	2000      	movs	r0, #0
}
 800638c:	b003      	add	sp, #12
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hospi->State = HAL_OSPI_STATE_READY;
 8006390:	2302      	movs	r3, #2
 8006392:	e7f9      	b.n	8006388 <HAL_OSPI_Init+0xd4>
    status = HAL_ERROR;
 8006394:	2001      	movs	r0, #1
 8006396:	e7f9      	b.n	800638c <HAL_OSPI_Init+0xd8>
 8006398:	f8e0f8f4 	.word	0xf8e0f8f4

0800639c <HAL_OSPI_DeInit>:
{
 800639c:	b510      	push	{r4, lr}
  if (hospi == NULL)
 800639e:	4604      	mov	r4, r0
 80063a0:	b168      	cbz	r0, 80063be <HAL_OSPI_DeInit+0x22>
    __HAL_OSPI_DISABLE(hospi);
 80063a2:	6803      	ldr	r3, [r0, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	f022 0202 	bic.w	r2, r2, #2
 80063b2:	609a      	str	r2, [r3, #8]
    HAL_OSPI_MspDeInit(hospi);
 80063b4:	f7fa ff66 	bl	8001284 <HAL_OSPI_MspDeInit>
    hospi->State = HAL_OSPI_STATE_RESET;
 80063b8:	2000      	movs	r0, #0
 80063ba:	6520      	str	r0, [r4, #80]	@ 0x50
}
 80063bc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80063be:	2001      	movs	r0, #1
 80063c0:	e7fc      	b.n	80063bc <HAL_OSPI_DeInit+0x20>

080063c2 <HAL_OSPI_Command>:
{
 80063c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063c4:	4604      	mov	r4, r0
 80063c6:	460d      	mov	r5, r1
 80063c8:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80063ca:	f7fe fd7f 	bl	8004ecc <HAL_GetTick>
  state = hospi->State;
 80063ce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80063d0:	4606      	mov	r6, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d107      	bne.n	80063e6 <HAL_OSPI_Command+0x24>
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063dc:	d109      	bne.n	80063f2 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80063de:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80063e2:	6563      	str	r3, [r4, #84]	@ 0x54
 80063e4:	e01f      	b.n	8006426 <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80063e6:	2b14      	cmp	r3, #20
 80063e8:	d11f      	bne.n	800642a <HAL_OSPI_Command+0x68>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d8f5      	bhi.n	80063de <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80063f2:	4633      	mov	r3, r6
 80063f4:	2200      	movs	r2, #0
 80063f6:	2120      	movs	r1, #32
 80063f8:	4620      	mov	r0, r4
 80063fa:	9700      	str	r7, [sp, #0]
 80063fc:	f7ff ff32 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006400:	b988      	cbnz	r0, 8006426 <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006402:	6560      	str	r0, [r4, #84]	@ 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8006404:	4629      	mov	r1, r5
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fe48 	bl	800609c <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800640c:	b958      	cbnz	r0, 8006426 <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800640e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006410:	b99b      	cbnz	r3, 800643a <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006412:	4633      	mov	r3, r6
 8006414:	2201      	movs	r2, #1
 8006416:	2102      	movs	r1, #2
 8006418:	4620      	mov	r0, r4
 800641a:	9700      	str	r7, [sp, #0]
 800641c:	f7ff ff22 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	2202      	movs	r2, #2
 8006424:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006426:	b003      	add	sp, #12
 8006428:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800642a:	2b24      	cmp	r3, #36	@ 0x24
 800642c:	d1d7      	bne.n	80063de <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	f023 0302 	bic.w	r3, r3, #2
 8006434:	2b01      	cmp	r3, #1
 8006436:	d1d2      	bne.n	80063de <HAL_OSPI_Command+0x1c>
 8006438:	e7db      	b.n	80063f2 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800643a:	682b      	ldr	r3, [r5, #0]
 800643c:	b90b      	cbnz	r3, 8006442 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800643e:	2304      	movs	r3, #4
 8006440:	e005      	b.n	800644e <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8006442:	2b01      	cmp	r3, #1
 8006444:	d105      	bne.n	8006452 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8006446:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006448:	2b24      	cmp	r3, #36	@ 0x24
 800644a:	d0f8      	beq.n	800643e <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800644c:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800644e:	6523      	str	r3, [r4, #80]	@ 0x50
 8006450:	e7e9      	b.n	8006426 <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006452:	2b02      	cmp	r3, #2
 8006454:	d1e7      	bne.n	8006426 <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8006456:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006458:	2b14      	cmp	r3, #20
 800645a:	d0f0      	beq.n	800643e <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800645c:	2324      	movs	r3, #36	@ 0x24
 800645e:	e7f6      	b.n	800644e <HAL_OSPI_Command+0x8c>

08006460 <HAL_OSPI_HyperbusCfg>:
{
 8006460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006462:	4604      	mov	r4, r0
 8006464:	4616      	mov	r6, r2
 8006466:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006468:	f7fe fd30 	bl	8004ecc <HAL_GetTick>
  state = hospi->State;
 800646c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 800646e:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006470:	3a01      	subs	r2, #1
 8006472:	2a01      	cmp	r2, #1
 8006474:	d816      	bhi.n	80064a4 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006476:	2200      	movs	r2, #0
 8006478:	2120      	movs	r1, #32
 800647a:	4620      	mov	r0, r4
 800647c:	9600      	str	r6, [sp, #0]
 800647e:	f7ff fef1 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006482:	b968      	cbnz	r0, 80064a0 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 800648a:	430b      	orrs	r3, r1
 800648c:	6829      	ldr	r1, [r5, #0]
 800648e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006492:	6869      	ldr	r1, [r5, #4]
 8006494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006498:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 800649c:	2302      	movs	r3, #2
 800649e:	6523      	str	r3, [r4, #80]	@ 0x50
}
 80064a0:	b002      	add	sp, #8
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80064a4:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80064a6:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80064a8:	6563      	str	r3, [r4, #84]	@ 0x54
 80064aa:	e7f9      	b.n	80064a0 <HAL_OSPI_HyperbusCfg+0x40>

080064ac <HAL_OSPI_HyperbusCmd>:
{
 80064ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064ae:	4604      	mov	r4, r0
 80064b0:	4616      	mov	r6, r2
 80064b2:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80064b4:	f7fe fd0a 	bl	8004ecc <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80064b8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80064ba:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80064bc:	2a02      	cmp	r2, #2
 80064be:	d127      	bne.n	8006510 <HAL_OSPI_HyperbusCmd+0x64>
 80064c0:	68e2      	ldr	r2, [r4, #12]
 80064c2:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80064c6:	d123      	bne.n	8006510 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80064c8:	2200      	movs	r2, #0
 80064ca:	2120      	movs	r1, #32
 80064cc:	4620      	mov	r0, r4
 80064ce:	9600      	str	r6, [sp, #0]
 80064d0:	f7ff fec8 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80064d4:	b9d0      	cbnz	r0, 800650c <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80064d6:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80064d8:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80064e0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80064e8:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 80064ea:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80064ec:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 80064ee:	692a      	ldr	r2, [r5, #16]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 80064f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 80064fa:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 80064fe:	68ea      	ldr	r2, [r5, #12]
 8006500:	3a01      	subs	r2, #1
 8006502:	641a      	str	r2, [r3, #64]	@ 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8006504:	686a      	ldr	r2, [r5, #4]
 8006506:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006508:	2304      	movs	r3, #4
 800650a:	6523      	str	r3, [r4, #80]	@ 0x50
}
 800650c:	b002      	add	sp, #8
 800650e:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006510:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006512:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006514:	6563      	str	r3, [r4, #84]	@ 0x54
 8006516:	e7f9      	b.n	800650c <HAL_OSPI_HyperbusCmd+0x60>

08006518 <HAL_OSPI_Transmit>:
{
 8006518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	4688      	mov	r8, r1
 8006520:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006522:	f7fe fcd3 	bl	8004ecc <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006526:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006528:	4605      	mov	r5, r0
  if (pData == NULL)
 800652a:	f1b8 0f00 	cmp.w	r8, #0
 800652e:	d103      	bne.n	8006538 <HAL_OSPI_Transmit+0x20>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006530:	2308      	movs	r3, #8
    status = HAL_ERROR;
 8006532:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006534:	6563      	str	r3, [r4, #84]	@ 0x54
 8006536:	e02e      	b.n	8006596 <HAL_OSPI_Transmit+0x7e>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006538:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800653a:	2b04      	cmp	r3, #4
 800653c:	d12e      	bne.n	800659c <HAL_OSPI_Transmit+0x84>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800653e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 8006540:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006544:	3301      	adds	r3, #1
 8006546:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8006548:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800654a:	6463      	str	r3, [r4, #68]	@ 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006552:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8006554:	462b      	mov	r3, r5
 8006556:	2201      	movs	r2, #1
 8006558:	2104      	movs	r1, #4
 800655a:	4620      	mov	r0, r4
 800655c:	9600      	str	r6, [sp, #0]
 800655e:	f7ff fe81 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006562:	b9c0      	cbnz	r0, 8006596 <HAL_OSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hospi->pBuffPtr++;
 800656c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800656e:	3301      	adds	r3, #1
 8006570:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 8006572:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006574:	3b01      	subs	r3, #1
 8006576:	64a3      	str	r3, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8006578:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1ea      	bne.n	8006554 <HAL_OSPI_Transmit+0x3c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800657e:	462b      	mov	r3, r5
 8006580:	2201      	movs	r2, #1
 8006582:	2102      	movs	r1, #2
 8006584:	4620      	mov	r0, r4
 8006586:	9600      	str	r6, [sp, #0]
 8006588:	f7ff fe6c 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800658c:	b918      	cbnz	r0, 8006596 <HAL_OSPI_Transmit+0x7e>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800658e:	2302      	movs	r3, #2
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006594:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006596:	b002      	add	sp, #8
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800659c:	2310      	movs	r3, #16
 800659e:	e7c8      	b.n	8006532 <HAL_OSPI_Transmit+0x1a>

080065a0 <HAL_OSPI_Receive>:
{
 80065a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	4616      	mov	r6, r2
 80065a8:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80065aa:	f7fe fc8f 	bl	8004ecc <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80065ae:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80065b0:	4607      	mov	r7, r0
  uint32_t addr_reg = hospi->Instance->AR;
 80065b2:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80065b4:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
 80065b8:	f1b8 0f00 	cmp.w	r8, #0
 80065bc:	d103      	bne.n	80065c6 <HAL_OSPI_Receive+0x26>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80065be:	2308      	movs	r3, #8
    status = HAL_ERROR;
 80065c0:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80065c2:	6563      	str	r3, [r4, #84]	@ 0x54
 80065c4:	e035      	b.n	8006632 <HAL_OSPI_Receive+0x92>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80065c6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d13d      	bne.n	8006648 <HAL_OSPI_Receive+0xa8>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80065cc:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 80065ce:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80065d2:	3301      	adds	r3, #1
 80065d4:	64a3      	str	r3, [r4, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80065d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80065d8:	6463      	str	r3, [r4, #68]	@ 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80065da:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065dc:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80065de:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80065e6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80065ea:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065ec:	d124      	bne.n	8006638 <HAL_OSPI_Receive+0x98>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80065ee:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80065f0:	463b      	mov	r3, r7
 80065f2:	2201      	movs	r2, #1
 80065f4:	2106      	movs	r1, #6
 80065f6:	4620      	mov	r0, r4
 80065f8:	9600      	str	r6, [sp, #0]
 80065fa:	f7ff fe33 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80065fe:	b9c0      	cbnz	r0, 8006632 <HAL_OSPI_Receive+0x92>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006600:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 8006604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006606:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800660a:	3301      	adds	r3, #1
 800660c:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 800660e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006610:	3b01      	subs	r3, #1
 8006612:	64a3      	str	r3, [r4, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8006614:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ea      	bne.n	80065f0 <HAL_OSPI_Receive+0x50>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800661a:	463b      	mov	r3, r7
 800661c:	2201      	movs	r2, #1
 800661e:	2102      	movs	r1, #2
 8006620:	4620      	mov	r0, r4
 8006622:	9600      	str	r6, [sp, #0]
 8006624:	f7ff fe1e 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006628:	b918      	cbnz	r0, 8006632 <HAL_OSPI_Receive+0x92>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800662a:	2302      	movs	r3, #2
 800662c:	6822      	ldr	r2, [r4, #0]
 800662e:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006630:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8006632:	b002      	add	sp, #8
 8006634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006638:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
 800663c:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8006640:	d1d5      	bne.n	80065ee <HAL_OSPI_Receive+0x4e>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006642:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 8006646:	e7d3      	b.n	80065f0 <HAL_OSPI_Receive+0x50>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006648:	2310      	movs	r3, #16
 800664a:	e7b9      	b.n	80065c0 <HAL_OSPI_Receive+0x20>

0800664c <HAL_OSPI_AutoPolling>:
{
 800664c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006656:	f7fe fc39 	bl	8004ecc <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800665a:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800665c:	4681      	mov	r9, r0
  uint32_t addr_reg = hospi->Instance->AR;
 800665e:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006660:	f8d3 8110 	ldr.w	r8, [r3, #272]	@ 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006664:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006666:	2b04      	cmp	r3, #4
 8006668:	d13c      	bne.n	80066e4 <HAL_OSPI_AutoPolling+0x98>
 800666a:	68eb      	ldr	r3, [r5, #12]
 800666c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006670:	d138      	bne.n	80066e4 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006672:	4603      	mov	r3, r0
 8006674:	2200      	movs	r2, #0
 8006676:	2120      	movs	r1, #32
 8006678:	4620      	mov	r0, r4
 800667a:	9600      	str	r6, [sp, #0]
 800667c:	f7ff fdf2 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006680:	bb28      	cbnz	r0, 80066ce <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	682a      	ldr	r2, [r5, #0]
 8006686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 800668a:	686a      	ldr	r2, [r5, #4]
 800668c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8006690:	692a      	ldr	r2, [r5, #16]
 8006692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006696:	6819      	ldr	r1, [r3, #0]
 8006698:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 800669c:	f021 5143 	bic.w	r1, r1, #817889280	@ 0x30c00000
 80066a0:	4302      	orrs	r2, r0
 80066a2:	430a      	orrs	r2, r1
 80066a4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80066a8:	601a      	str	r2, [r3, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80066aa:	68e2      	ldr	r2, [r4, #12]
 80066ac:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80066b0:	d110      	bne.n	80066d4 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80066b2:	649f      	str	r7, [r3, #72]	@ 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80066b4:	464b      	mov	r3, r9
 80066b6:	2201      	movs	r2, #1
 80066b8:	2108      	movs	r1, #8
 80066ba:	4620      	mov	r0, r4
 80066bc:	9600      	str	r6, [sp, #0]
 80066be:	f7ff fdd1 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80066c2:	b920      	cbnz	r0, 80066ce <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	2208      	movs	r2, #8
 80066c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 80066ca:	2302      	movs	r3, #2
 80066cc:	6523      	str	r3, [r4, #80]	@ 0x50
}
 80066ce:	b003      	add	sp, #12
 80066d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80066d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80066d8:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 80066dc:	d1e9      	bne.n	80066b2 <HAL_OSPI_AutoPolling+0x66>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80066de:	f8c3 8110 	str.w	r8, [r3, #272]	@ 0x110
 80066e2:	e7e7      	b.n	80066b4 <HAL_OSPI_AutoPolling+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80066e4:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80066e6:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80066e8:	6563      	str	r3, [r4, #84]	@ 0x54
 80066ea:	e7f0      	b.n	80066ce <HAL_OSPI_AutoPolling+0x82>

080066ec <HAL_OSPI_MemoryMapped>:
{
 80066ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80066f2:	f7fe fbeb 	bl	8004ecc <HAL_GetTick>
 80066f6:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80066f8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80066fa:	2a04      	cmp	r2, #4
 80066fc:	d121      	bne.n	8006742 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80066fe:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006700:	2120      	movs	r1, #32
 8006702:	4620      	mov	r0, r4
 8006704:	9200      	str	r2, [sp, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	f7ff fdac 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800670c:	b9b8      	cbnz	r0, 800673e <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800670e:	6829      	ldr	r1, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006710:	2388      	movs	r3, #136	@ 0x88
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006712:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006714:	2908      	cmp	r1, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006716:	6523      	str	r3, [r4, #80]	@ 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006718:	d108      	bne.n	800672c <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800671a:	686b      	ldr	r3, [r5, #4]
 800671c:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006720:	2310      	movs	r3, #16
 8006722:	6253      	str	r3, [r2, #36]	@ 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006724:	6813      	ldr	r3, [r2, #0]
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800672c:	6813      	ldr	r3, [r2, #0]
 800672e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006732:	f023 0308 	bic.w	r3, r3, #8
 8006736:	430b      	orrs	r3, r1
 8006738:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800673c:	6013      	str	r3, [r2, #0]
}
 800673e:	b003      	add	sp, #12
 8006740:	bd30      	pop	{r4, r5, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006742:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006744:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006746:	6563      	str	r3, [r4, #84]	@ 0x54
 8006748:	e7f9      	b.n	800673e <HAL_OSPI_MemoryMapped+0x52>

0800674a <HAL_OSPI_Abort>:
{
 800674a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800674c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800674e:	f7fe fbbd 	bl	8004ecc <HAL_GetTick>
 8006752:	4605      	mov	r5, r0
  state = hospi->State;
 8006754:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006756:	f013 0f0c 	tst.w	r3, #12
 800675a:	d032      	beq.n	80067c2 <HAL_OSPI_Abort+0x78>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	0751      	lsls	r1, r2, #29
 8006762:	d507      	bpl.n	8006774 <HAL_OSPI_Abort+0x2a>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006764:	681a      	ldr	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006766:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006768:	f022 0204 	bic.w	r2, r2, #4
 800676c:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 800676e:	f7ff fc5d 	bl	800602c <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8006772:	bb00      	cbnz	r0, 80067b6 <HAL_OSPI_Abort+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6a1a      	ldr	r2, [r3, #32]
 800677a:	0692      	lsls	r2, r2, #26
 800677c:	d51e      	bpl.n	80067bc <HAL_OSPI_Abort+0x72>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800677e:	681a      	ldr	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006780:	2102      	movs	r1, #2
 8006782:	4620      	mov	r0, r4
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006784:	f042 0202 	orr.w	r2, r2, #2
 8006788:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800678a:	2201      	movs	r2, #1
 800678c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	462b      	mov	r3, r5
 8006792:	f7ff fd67 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006796:	b960      	cbnz	r0, 80067b2 <HAL_OSPI_Abort+0x68>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	2602      	movs	r6, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800679c:	4602      	mov	r2, r0
 800679e:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80067a0:	625e      	str	r6, [r3, #36]	@ 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80067a2:	4620      	mov	r0, r4
 80067a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462b      	mov	r3, r5
 80067aa:	f7ff fd5b 	bl	8006264 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80067ae:	b900      	cbnz	r0, 80067b2 <HAL_OSPI_Abort+0x68>
          hospi->State = HAL_OSPI_STATE_READY;
 80067b0:	6526      	str	r6, [r4, #80]	@ 0x50
}
 80067b2:	b002      	add	sp, #8
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80067b6:	2304      	movs	r3, #4
 80067b8:	6563      	str	r3, [r4, #84]	@ 0x54
 80067ba:	e7dc      	b.n	8006776 <HAL_OSPI_Abort+0x2c>
      hospi->State = HAL_OSPI_STATE_READY;
 80067bc:	2302      	movs	r3, #2
 80067be:	6523      	str	r3, [r4, #80]	@ 0x50
 80067c0:	e7f7      	b.n	80067b2 <HAL_OSPI_Abort+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80067c2:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80067c4:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80067c6:	6563      	str	r3, [r4, #84]	@ 0x54
 80067c8:	e7f3      	b.n	80067b2 <HAL_OSPI_Abort+0x68>
	...

080067cc <HAL_OSPIM_Config>:
    other_instance = 1U;
 80067cc:	4b96      	ldr	r3, [pc, #600]	@ (8006a28 <HAL_OSPIM_Config+0x25c>)
{
 80067ce:	468c      	mov	ip, r1
  if (hospi->Instance == OCTOSPI1)
 80067d0:	6802      	ldr	r2, [r0, #0]
{
 80067d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 1U;
 80067d6:	429a      	cmp	r2, r3
{
 80067d8:	b091      	sub	sp, #68	@ 0x44
 80067da:	f04f 0701 	mov.w	r7, #1
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80067de:	f04f 0400 	mov.w	r4, #0
    other_instance = 1U;
 80067e2:	bf15      	itete	ne
 80067e4:	f04f 0a00 	movne.w	sl, #0
 80067e8:	f04f 0a01 	moveq.w	sl, #1
 80067ec:	2601      	movne	r6, #1
 80067ee:	2600      	moveq	r6, #0
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80067f0:	ab04      	add	r3, sp, #16
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
    {
      reg = OCTOSPIM->PCR[index];
 80067f2:	f8df e238 	ldr.w	lr, [pc, #568]	@ 8006a2c <HAL_OSPIM_Config+0x260>
    if (instance_nb == 2U)
 80067f6:	2f02      	cmp	r7, #2
    cfg->IOHighPort = 0U;
 80067f8:	611c      	str	r4, [r3, #16]
    cfg->DQSPort    = 0U;
 80067fa:	e9c3 4400 	strd	r4, r4, [r3]
    cfg->IOLowPort  = 0U;
 80067fe:	e9c3 4402 	strd	r4, r4, [r3, #8]
    if (instance_nb == 2U)
 8006802:	f040 810d 	bne.w	8006a20 <HAL_OSPIM_Config+0x254>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006806:	4a89      	ldr	r2, [pc, #548]	@ (8006a2c <HAL_OSPIM_Config+0x260>)
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006808:	4889      	ldr	r0, [pc, #548]	@ (8006a30 <HAL_OSPIM_Config+0x264>)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800680a:	6812      	ldr	r2, [r2, #0]
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800680c:	f012 0f01 	tst.w	r2, #1
 8006810:	bf18      	it	ne
 8006812:	f44f 7000 	movne.w	r0, #512	@ 0x200
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006816:	2500      	movs	r5, #0
      reg = OCTOSPIM->PCR[index];
 8006818:	eb0e 0285 	add.w	r2, lr, r5, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800681c:	1c69      	adds	r1, r5, #1
      reg = OCTOSPIM->PCR[index];
 800681e:	6852      	ldr	r2, [r2, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006820:	07d5      	lsls	r5, r2, #31
 8006822:	d504      	bpl.n	800682e <HAL_OSPIM_Config+0x62>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006824:	ea82 0500 	eor.w	r5, r2, r0
 8006828:	07ad      	lsls	r5, r5, #30
          cfg->ClkPort = index + 1U;
 800682a:	bf58      	it	pl
 800682c:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800682e:	06d5      	lsls	r5, r2, #27
 8006830:	d504      	bpl.n	800683c <HAL_OSPIM_Config+0x70>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006832:	ea82 0500 	eor.w	r5, r2, r0
 8006836:	06ad      	lsls	r5, r5, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006838:	bf58      	it	pl
 800683a:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800683c:	05d5      	lsls	r5, r2, #23
 800683e:	d504      	bpl.n	800684a <HAL_OSPIM_Config+0x7e>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006840:	ea82 0500 	eor.w	r5, r2, r0
 8006844:	05ad      	lsls	r5, r5, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006846:	bf58      	it	pl
 8006848:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800684a:	03d5      	lsls	r5, r2, #15
 800684c:	d50a      	bpl.n	8006864 <HAL_OSPIM_Config+0x98>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800684e:	ea82 0500 	eor.w	r5, r2, r0
 8006852:	036d      	lsls	r5, r5, #13
 8006854:	d406      	bmi.n	8006864 <HAL_OSPIM_Config+0x98>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006856:	0395      	lsls	r5, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006858:	bf54      	ite	pl
 800685a:	f441 3580 	orrpl.w	r5, r1, #65536	@ 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800685e:	f041 7580 	orrmi.w	r5, r1, #16777216	@ 0x1000000
 8006862:	60dd      	str	r5, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006864:	01d5      	lsls	r5, r2, #7
 8006866:	d50a      	bpl.n	800687e <HAL_OSPIM_Config+0xb2>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006868:	ea82 0500 	eor.w	r5, r2, r0
 800686c:	016d      	lsls	r5, r5, #5
 800686e:	d406      	bmi.n	800687e <HAL_OSPIM_Config+0xb2>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006870:	0195      	lsls	r5, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006872:	bf54      	ite	pl
 8006874:	f441 3280 	orrpl.w	r2, r1, #65536	@ 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006878:	f041 7280 	orrmi.w	r2, r1, #16777216	@ 0x1000000
 800687c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800687e:	2902      	cmp	r1, #2
 8006880:	f04f 0501 	mov.w	r5, #1
 8006884:	d1c8      	bne.n	8006818 <HAL_OSPIM_Config+0x4c>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006886:	42af      	cmp	r7, r5
 8006888:	f103 0318 	add.w	r3, r3, #24
 800688c:	f000 80c6 	beq.w	8006a1c <HAL_OSPIM_Config+0x250>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006890:	4b65      	ldr	r3, [pc, #404]	@ (8006a28 <HAL_OSPIM_Config+0x25c>)
 8006892:	681f      	ldr	r7, [r3, #0]
 8006894:	402f      	ands	r7, r5
 8006896:	d004      	beq.n	80068a2 <HAL_OSPIM_Config+0xd6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006898:	681a      	ldr	r2, [r3, #0]
      ospi_enabled |= 0x1U;
 800689a:	462f      	mov	r7, r5
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80068a2:	4b64      	ldr	r3, [pc, #400]	@ (8006a34 <HAL_OSPIM_Config+0x268>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	07d1      	lsls	r1, r2, #31
 80068a8:	f140 80bc 	bpl.w	8006a24 <HAL_OSPIM_Config+0x258>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	f022 0201 	bic.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 80068b4:	f047 0302 	orr.w	r3, r7, #2
 80068b8:	9303      	str	r3, [sp, #12]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80068ba:	ab10      	add	r3, sp, #64	@ 0x40
 80068bc:	2118      	movs	r1, #24
 80068be:	fb01 3106 	mla	r1, r1, r6, r3
 80068c2:	4b5a      	ldr	r3, [pc, #360]	@ (8006a2c <HAL_OSPIM_Config+0x260>)
 80068c4:	f851 2c28 	ldr.w	r2, [r1, #-40]
 80068c8:	3a01      	subs	r2, #1
 80068ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80068ce:	6850      	ldr	r0, [r2, #4]
 80068d0:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80068d4:	6050      	str	r0, [r2, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	07d2      	lsls	r2, r2, #31
 80068da:	f140 80af 	bpl.w	8006a3c <HAL_OSPIM_Config+0x270>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 80068e6:	f1ba 0f00 	cmp.w	sl, #0
 80068ea:	d02c      	beq.n	8006946 <HAL_OSPIM_Config+0x17a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80068ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068ee:	3a01      	subs	r2, #1
 80068f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80068f4:	6851      	ldr	r1, [r2, #4]
 80068f6:	f041 0102 	orr.w	r1, r1, #2
 80068fa:	6051      	str	r1, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80068fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068fe:	b132      	cbz	r2, 800690e <HAL_OSPIM_Config+0x142>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006900:	3a01      	subs	r2, #1
 8006902:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	f042 0220 	orr.w	r2, r2, #32
 800690c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800690e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006910:	b15b      	cbz	r3, 800692a <HAL_OSPIM_Config+0x15e>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006912:	3b01      	subs	r3, #1
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 800691e:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006928:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800692a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800692c:	b15b      	cbz	r3, 8006946 <HAL_OSPIM_Config+0x17a>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800692e:	3b01      	subs	r3, #1
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 800693a:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006944:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006946:	f8dc 3000 	ldr.w	r3, [ip]
 800694a:	f04f 0918 	mov.w	r9, #24
 800694e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006952:	9302      	str	r3, [sp, #8]
 8006954:	ab10      	add	r3, sp, #64	@ 0x40
 8006956:	9902      	ldr	r1, [sp, #8]
 8006958:	fb09 390a 	mla	r9, r9, sl, r3
 800695c:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8006a2c <HAL_OSPIM_Config+0x260>
 8006960:	f859 8c30 	ldr.w	r8, [r9, #-48]
 8006964:	f859 3c2c 	ldr.w	r3, [r9, #-44]
 8006968:	4541      	cmp	r1, r8
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800696a:	f859 4c24 	ldr.w	r4, [r9, #-36]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800696e:	9301      	str	r3, [sp, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006970:	f859 0c20 	ldr.w	r0, [r9, #-32]
 8006974:	f8dc 3010 	ldr.w	r3, [ip, #16]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006978:	9901      	ldr	r1, [sp, #4]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800697a:	e9dc e202 	ldrd	lr, r2, [ip, #8]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800697e:	f000 809a 	beq.w	8006ab6 <HAL_OSPIM_Config+0x2ea>
 8006982:	42a9      	cmp	r1, r5
 8006984:	d008      	beq.n	8006998 <HAL_OSPIM_Config+0x1cc>
 8006986:	f859 9c28 	ldr.w	r9, [r9, #-40]
 800698a:	45f1      	cmp	r9, lr
 800698c:	d004      	beq.n	8006998 <HAL_OSPIM_Config+0x1cc>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800698e:	42a2      	cmp	r2, r4
 8006990:	d002      	beq.n	8006998 <HAL_OSPIM_Config+0x1cc>
 8006992:	4298      	cmp	r0, r3
 8006994:	f040 809e 	bne.w	8006ad4 <HAL_OSPIM_Config+0x308>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006998:	f108 38ff 	add.w	r8, r8, #4294967295
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800699c:	9901      	ldr	r1, [sp, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800699e:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
 80069a2:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80069a6:	f029 0901 	bic.w	r9, r9, #1
 80069aa:	f8c8 9004 	str.w	r9, [r8, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80069ae:	b141      	cbz	r1, 80069c2 <HAL_OSPIM_Config+0x1f6>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80069b0:	3901      	subs	r1, #1
 80069b2:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80069b6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80069ba:	f028 0810 	bic.w	r8, r8, #16
 80069be:	f8c1 8004 	str.w	r8, [r1, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80069c2:	2118      	movs	r1, #24
 80069c4:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 80069c8:	fb01 8a0a 	mla	sl, r1, sl, r8
 80069cc:	f85a 1c28 	ldr.w	r1, [sl, #-40]
 80069d0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80069d4:	4918      	ldr	r1, [pc, #96]	@ (8006a38 <HAL_OSPIM_Config+0x26c>)
 80069d6:	4441      	add	r1, r8
 80069d8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80069dc:	f428 7880 	bic.w	r8, r8, #256	@ 0x100
 80069e0:	f8c1 8004 	str.w	r8, [r1, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80069e4:	b15c      	cbz	r4, 80069fe <HAL_OSPIM_Config+0x232>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80069e6:	3c01      	subs	r4, #1
 80069e8:	f004 0401 	and.w	r4, r4, #1
 80069ec:	00a4      	lsls	r4, r4, #2
 80069ee:	f104 44a4 	add.w	r4, r4, #1375731712	@ 0x52000000
 80069f2:	f504 4434 	add.w	r4, r4, #46080	@ 0xb400
 80069f6:	6861      	ldr	r1, [r4, #4]
 80069f8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80069fc:	6061      	str	r1, [r4, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d068      	beq.n	8006ad4 <HAL_OSPIM_Config+0x308>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006a02:	3801      	subs	r0, #1
 8006a04:	f000 0001 	and.w	r0, r0, #1
 8006a08:	0080      	lsls	r0, r0, #2
 8006a0a:	f100 40a4 	add.w	r0, r0, #1375731712	@ 0x52000000
 8006a0e:	f500 4034 	add.w	r0, r0, #46080	@ 0xb400
 8006a12:	6841      	ldr	r1, [r0, #4]
 8006a14:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8006a18:	6041      	str	r1, [r0, #4]
 8006a1a:	e05b      	b.n	8006ad4 <HAL_OSPIM_Config+0x308>
 8006a1c:	460f      	mov	r7, r1
 8006a1e:	e6ea      	b.n	80067f6 <HAL_OSPIM_Config+0x2a>
  uint32_t value = 0U;
 8006a20:	2000      	movs	r0, #0
 8006a22:	e6f8      	b.n	8006816 <HAL_OSPIM_Config+0x4a>
 8006a24:	9703      	str	r7, [sp, #12]
 8006a26:	e748      	b.n	80068ba <HAL_OSPIM_Config+0xee>
 8006a28:	52005000 	.word	0x52005000
 8006a2c:	5200b400 	.word	0x5200b400
 8006a30:	04040222 	.word	0x04040222
 8006a34:	5200a000 	.word	0x5200a000
 8006a38:	5200b3fc 	.word	0x5200b3fc
      if (IOM_cfg[instance].ClkPort != 0U)
 8006a3c:	f851 2c30 	ldr.w	r2, [r1, #-48]
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	d080      	beq.n	8006946 <HAL_OSPIM_Config+0x17a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006a44:	3a01      	subs	r2, #1
 8006a46:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006a4a:	6850      	ldr	r0, [r2, #4]
 8006a4c:	f020 0001 	bic.w	r0, r0, #1
 8006a50:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006a52:	f851 2c2c 	ldr.w	r2, [r1, #-44]
 8006a56:	b132      	cbz	r2, 8006a66 <HAL_OSPIM_Config+0x29a>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006a58:	3a01      	subs	r2, #1
 8006a5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	f022 0210 	bic.w	r2, r2, #16
 8006a64:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006a66:	2318      	movs	r3, #24
 8006a68:	aa10      	add	r2, sp, #64	@ 0x40
 8006a6a:	fb03 2306 	mla	r3, r3, r6, r2
 8006a6e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006a72:	b15b      	cbz	r3, 8006a8c <HAL_OSPIM_Config+0x2c0>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006a74:	3b01      	subs	r3, #1
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006a80:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a8a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a8c:	2318      	movs	r3, #24
 8006a8e:	aa10      	add	r2, sp, #64	@ 0x40
 8006a90:	fb03 2306 	mla	r3, r3, r6, r2
 8006a94:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f43f af54 	beq.w	8006946 <HAL_OSPIM_Config+0x17a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006aaa:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006ab4:	e746      	b.n	8006944 <HAL_OSPIM_Config+0x178>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006ab6:	42a9      	cmp	r1, r5
 8006ab8:	f47f af6e 	bne.w	8006998 <HAL_OSPIM_Config+0x1cc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006abc:	42a2      	cmp	r2, r4
 8006abe:	f47f af6b 	bne.w	8006998 <HAL_OSPIM_Config+0x1cc>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006ac2:	4298      	cmp	r0, r3
 8006ac4:	f47f af68 	bne.w	8006998 <HAL_OSPIM_Config+0x1cc>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006ac8:	f8db 1000 	ldr.w	r1, [fp]
 8006acc:	f041 0101 	orr.w	r1, r1, #1
 8006ad0:	f8cb 1000 	str.w	r1, [fp]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006ad4:	4c72      	ldr	r4, [pc, #456]	@ (8006ca0 <HAL_OSPIM_Config+0x4d4>)
 8006ad6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006ada:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8006ade:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006ae2:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8006ae6:	ea41 2146 	orr.w	r1, r1, r6, lsl #9
 8006aea:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8006aee:	f8ce 1004 	str.w	r1, [lr, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006af2:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8006af6:	6821      	ldr	r1, [r4, #0]
 8006af8:	3801      	subs	r0, #1
 8006afa:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8006afe:	4288      	cmp	r0, r1
 8006b00:	d905      	bls.n	8006b0e <HAL_OSPIM_Config+0x342>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006b02:	6821      	ldr	r1, [r4, #0]
 8006b04:	f421 017f 	bic.w	r1, r1, #16711680	@ 0xff0000
 8006b08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b0c:	6021      	str	r1, [r4, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006b0e:	9902      	ldr	r1, [sp, #8]
 8006b10:	f402 3c80 	and.w	ip, r2, #65536	@ 0x10000
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006b14:	6820      	ldr	r0, [r4, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006b16:	3901      	subs	r1, #1
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006b18:	f010 0f01 	tst.w	r0, #1
 8006b1c:	f403 3080 	and.w	r0, r3, #65536	@ 0x10000
 8006b20:	ea4f 0181 	mov.w	r1, r1, lsl #2
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006b24:	4421      	add	r1, r4
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006b26:	d061      	beq.n	8006bec <HAL_OSPIM_Config+0x420>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006b28:	684e      	ldr	r6, [r1, #4]
 8006b2a:	f026 0603 	bic.w	r6, r6, #3
 8006b2e:	f046 0601 	orr.w	r6, r6, #1
 8006b32:	604e      	str	r6, [r1, #4]
      if (cfg->DQSPort != 0U)
 8006b34:	b145      	cbz	r5, 8006b48 <HAL_OSPIM_Config+0x37c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006b36:	3d01      	subs	r5, #1
 8006b38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b3c:	6869      	ldr	r1, [r5, #4]
 8006b3e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006b42:	f041 0110 	orr.w	r1, r1, #16
 8006b46:	6069      	str	r1, [r5, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b48:	f1bc 0f00 	cmp.w	ip, #0
 8006b4c:	d02e      	beq.n	8006bac <HAL_OSPIM_Config+0x3e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	f002 0201 	and.w	r2, r2, #1
 8006b54:	0092      	lsls	r2, r2, #2
 8006b56:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8006b5a:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8006b5e:	6851      	ldr	r1, [r2, #4]
 8006b60:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006b64:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b68:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b6a:	b378      	cbz	r0, 8006bcc <HAL_OSPIM_Config+0x400>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006b78:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b82:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b86:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8006b88:	b127      	cbz	r7, 8006b94 <HAL_OSPIM_Config+0x3c8>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006b8a:	4a46      	ldr	r2, [pc, #280]	@ (8006ca4 <HAL_OSPIM_Config+0x4d8>)
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	f043 0301 	orr.w	r3, r3, #1
 8006b92:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	079b      	lsls	r3, r3, #30
 8006b98:	d504      	bpl.n	8006ba4 <HAL_OSPIM_Config+0x3d8>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006b9a:	4a43      	ldr	r2, [pc, #268]	@ (8006ca8 <HAL_OSPIM_Config+0x4dc>)
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	f043 0301 	orr.w	r3, r3, #1
 8006ba2:	6013      	str	r3, [r2, #0]
}
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	b011      	add	sp, #68	@ 0x44
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d0dc      	beq.n	8006b6a <HAL_OSPIM_Config+0x39e>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006bb0:	3a01      	subs	r2, #1
 8006bb2:	f002 0201 	and.w	r2, r2, #1
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8006bbc:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8006bc0:	6851      	ldr	r1, [r2, #4]
 8006bc2:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8006bc6:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8006bca:	e7cd      	b.n	8006b68 <HAL_OSPIM_Config+0x39c>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0db      	beq.n	8006b88 <HAL_OSPIM_Config+0x3bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006bdc:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006be6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8006bea:	e7cc      	b.n	8006b86 <HAL_OSPIM_Config+0x3ba>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006bec:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8006bf0:	f02e 0e03 	bic.w	lr, lr, #3
 8006bf4:	ea4e 0e46 	orr.w	lr, lr, r6, lsl #1
 8006bf8:	f04e 0e01 	orr.w	lr, lr, #1
 8006bfc:	f8c1 e004 	str.w	lr, [r1, #4]
      if (cfg->DQSPort != 0U)
 8006c00:	b155      	cbz	r5, 8006c18 <HAL_OSPIM_Config+0x44c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006c02:	3d01      	subs	r5, #1
 8006c04:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8006c08:	6861      	ldr	r1, [r4, #4]
 8006c0a:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006c0e:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
 8006c12:	f041 0110 	orr.w	r1, r1, #16
 8006c16:	6061      	str	r1, [r4, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006c18:	f1bc 0f00 	cmp.w	ip, #0
 8006c1c:	d01e      	beq.n	8006c5c <HAL_OSPIM_Config+0x490>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c1e:	3a01      	subs	r2, #1
 8006c20:	f002 0201 	and.w	r2, r2, #1
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8006c2a:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8006c2e:	6851      	ldr	r1, [r2, #4]
 8006c30:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006c34:	ea41 4186 	orr.w	r1, r1, r6, lsl #18
 8006c38:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c3c:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006c3e:	b1f8      	cbz	r0, 8006c80 <HAL_OSPIM_Config+0x4b4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006c4c:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8006c56:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
 8006c5a:	e792      	b.n	8006b82 <HAL_OSPIM_Config+0x3b6>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d0ee      	beq.n	8006c3e <HAL_OSPIM_Config+0x472>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c60:	3a01      	subs	r2, #1
 8006c62:	f002 0201 	and.w	r2, r2, #1
 8006c66:	0092      	lsls	r2, r2, #2
 8006c68:	f102 42a4 	add.w	r2, r2, #1375731712	@ 0x52000000
 8006c6c:	f502 4234 	add.w	r2, r2, #46080	@ 0xb400
 8006c70:	6851      	ldr	r1, [r2, #4]
 8006c72:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8006c76:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 8006c7a:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8006c7e:	e7dd      	b.n	8006c3c <HAL_OSPIM_Config+0x470>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d081      	beq.n	8006b88 <HAL_OSPIM_Config+0x3bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	f103 43a4 	add.w	r3, r3, #1375731712	@ 0x52000000
 8006c90:	f503 4334 	add.w	r3, r3, #46080	@ 0xb400
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8006c9a:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8006c9e:	e7a2      	b.n	8006be6 <HAL_OSPIM_Config+0x41a>
 8006ca0:	5200b400 	.word	0x5200b400
 8006ca4:	52005000 	.word	0x52005000
 8006ca8:	5200a000 	.word	0x5200a000

08006cac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cac:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006cae:	4d1d      	ldr	r5, [pc, #116]	@ (8006d24 <HAL_PWREx_ConfigSupply+0x78>)
{
 8006cb0:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006cb2:	68eb      	ldr	r3, [r5, #12]
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d006      	beq.n	8006cca <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cbc:	68e8      	ldr	r0, [r5, #12]
 8006cbe:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8006cc2:	1b00      	subs	r0, r0, r4
 8006cc4:	bf18      	it	ne
 8006cc6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cca:	68eb      	ldr	r3, [r5, #12]
 8006ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006cd0:	4303      	orrs	r3, r0
 8006cd2:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8006cd4:	f7fe f8fa 	bl	8004ecc <HAL_GetTick>
 8006cd8:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cda:	686b      	ldr	r3, [r5, #4]
 8006cdc:	049b      	lsls	r3, r3, #18
 8006cde:	d508      	bpl.n	8006cf2 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006ce0:	f1a4 031d 	sub.w	r3, r4, #29
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d90c      	bls.n	8006d02 <HAL_PWREx_ConfigSupply+0x56>
 8006ce8:	3c2d      	subs	r4, #45	@ 0x2d
 8006cea:	2c01      	cmp	r4, #1
 8006cec:	d909      	bls.n	8006d02 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8006cee:	2000      	movs	r0, #0
 8006cf0:	e7ea      	b.n	8006cc8 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cf2:	f7fe f8eb 	bl	8004ecc <HAL_GetTick>
 8006cf6:	1b80      	subs	r0, r0, r6
 8006cf8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006cfc:	d9ed      	bls.n	8006cda <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8006cfe:	2001      	movs	r0, #1
 8006d00:	e7e2      	b.n	8006cc8 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8006d02:	f7fe f8e3 	bl	8004ecc <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d06:	4d07      	ldr	r5, [pc, #28]	@ (8006d24 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8006d08:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d0a:	68eb      	ldr	r3, [r5, #12]
 8006d0c:	f003 0311 	and.w	r3, r3, #17
 8006d10:	2b11      	cmp	r3, #17
 8006d12:	d0ec      	beq.n	8006cee <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d14:	f7fe f8da 	bl	8004ecc <HAL_GetTick>
 8006d18:	1b00      	subs	r0, r0, r4
 8006d1a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d1e:	d9f4      	bls.n	8006d0a <HAL_PWREx_ConfigSupply+0x5e>
 8006d20:	e7ed      	b.n	8006cfe <HAL_PWREx_ConfigSupply+0x52>
 8006d22:	bf00      	nop
 8006d24:	58024800 	.word	0x58024800

08006d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d069      	beq.n	8006e04 <HAL_RCC_OscConfig+0xdc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d30:	6803      	ldr	r3, [r0, #0]
 8006d32:	07d8      	lsls	r0, r3, #31
 8006d34:	d453      	bmi.n	8006dde <HAL_RCC_OscConfig+0xb6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	0799      	lsls	r1, r3, #30
 8006d3a:	f100 80a1 	bmi.w	8006e80 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	06da      	lsls	r2, r3, #27
 8006d42:	d51c      	bpl.n	8006d7e <HAL_RCC_OscConfig+0x56>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d44:	4a95      	ldr	r2, [pc, #596]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006d46:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d007      	beq.n	8006d62 <HAL_RCC_OscConfig+0x3a>
 8006d52:	2b18      	cmp	r3, #24
 8006d54:	f040 80e1 	bne.w	8006f1a <HAL_RCC_OscConfig+0x1f2>
 8006d58:	f001 0303 	and.w	r3, r1, #3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f040 80dc 	bne.w	8006f1a <HAL_RCC_OscConfig+0x1f2>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	05db      	lsls	r3, r3, #23
 8006d66:	d502      	bpl.n	8006d6e <HAL_RCC_OscConfig+0x46>
 8006d68:	69e3      	ldr	r3, [r4, #28]
 8006d6a:	2b80      	cmp	r3, #128	@ 0x80
 8006d6c:	d14a      	bne.n	8006e04 <HAL_RCC_OscConfig+0xdc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d6e:	4a8b      	ldr	r2, [pc, #556]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006d70:	6a21      	ldr	r1, [r4, #32]
 8006d72:	68d3      	ldr	r3, [r2, #12]
 8006d74:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006d78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d7c:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	0719      	lsls	r1, r3, #28
 8006d82:	f100 80f6 	bmi.w	8006f72 <HAL_RCC_OscConfig+0x24a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	069a      	lsls	r2, r3, #26
 8006d8a:	f100 811c 	bmi.w	8006fc6 <HAL_RCC_OscConfig+0x29e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	075d      	lsls	r5, r3, #29
 8006d92:	d51e      	bpl.n	8006dd2 <HAL_RCC_OscConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d94:	4d82      	ldr	r5, [pc, #520]	@ (8006fa0 <HAL_RCC_OscConfig+0x278>)
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d9c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d9e:	f7fe f895 	bl	8004ecc <HAL_GetTick>
 8006da2:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	05da      	lsls	r2, r3, #23
 8006da8:	f140 8132 	bpl.w	8007010 <HAL_RCC_OscConfig+0x2e8>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	4d7b      	ldr	r5, [pc, #492]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 8134 	bne.w	800701e <HAL_RCC_OscConfig+0x2f6>
 8006db6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dbe:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006dc2:	f7fe f883 	bl	8004ecc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dc6:	4e75      	ldr	r6, [pc, #468]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8006dc8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dca:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8006dcc:	079b      	lsls	r3, r3, #30
 8006dce:	f140 814c 	bpl.w	800706a <HAL_RCC_OscConfig+0x342>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dd2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	f040 814f 	bne.w	8007078 <HAL_RCC_OscConfig+0x350>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e02a      	b.n	8006e34 <HAL_RCC_OscConfig+0x10c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dde:	4a6f      	ldr	r2, [pc, #444]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006de0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006de2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d005      	beq.n	8006df8 <HAL_RCC_OscConfig+0xd0>
 8006dec:	2b18      	cmp	r3, #24
 8006dee:	d10b      	bne.n	8006e08 <HAL_RCC_OscConfig+0xe0>
 8006df0:	f001 0303 	and.w	r3, r1, #3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d107      	bne.n	8006e08 <HAL_RCC_OscConfig+0xe0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	039a      	lsls	r2, r3, #14
 8006dfc:	d59b      	bpl.n	8006d36 <HAL_RCC_OscConfig+0xe>
 8006dfe:	6863      	ldr	r3, [r4, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d198      	bne.n	8006d36 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8006e04:	2001      	movs	r0, #1
 8006e06:	e015      	b.n	8006e34 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	4d64      	ldr	r5, [pc, #400]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e10:	d111      	bne.n	8006e36 <HAL_RCC_OscConfig+0x10e>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006e1a:	f7fe f857 	bl	8004ecc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1e:	4e5f      	ldr	r6, [pc, #380]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8006e20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e22:	6833      	ldr	r3, [r6, #0]
 8006e24:	039b      	lsls	r3, r3, #14
 8006e26:	d486      	bmi.n	8006d36 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fe f850 	bl	8004ecc <HAL_GetTick>
 8006e2c:	1b40      	subs	r0, r0, r5
 8006e2e:	2864      	cmp	r0, #100	@ 0x64
 8006e30:	d9f7      	bls.n	8006e22 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8006e32:	2003      	movs	r0, #3
}
 8006e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e36:	b9a3      	cbnz	r3, 8006e62 <HAL_RCC_OscConfig+0x13a>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006e48:	f7fe f840 	bl	8004ecc <HAL_GetTick>
 8006e4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	039f      	lsls	r7, r3, #14
 8006e52:	f57f af70 	bpl.w	8006d36 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e56:	f7fe f839 	bl	8004ecc <HAL_GetTick>
 8006e5a:	1b80      	subs	r0, r0, r6
 8006e5c:	2864      	cmp	r0, #100	@ 0x64
 8006e5e:	d9f6      	bls.n	8006e4e <HAL_RCC_OscConfig+0x126>
 8006e60:	e7e7      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	d103      	bne.n	8006e72 <HAL_RCC_OscConfig+0x14a>
 8006e6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	e7cf      	b.n	8006e12 <HAL_RCC_OscConfig+0xea>
 8006e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e7e:	e7cb      	b.n	8006e18 <HAL_RCC_OscConfig+0xf0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e80:	4946      	ldr	r1, [pc, #280]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006e82:	68e2      	ldr	r2, [r4, #12]
 8006e84:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e86:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e88:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCC_OscConfig+0x16e>
 8006e8e:	2b18      	cmp	r3, #24
 8006e90:	d120      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x1ac>
 8006e92:	0780      	lsls	r0, r0, #30
 8006e94:	d11e      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x1ac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e96:	680b      	ldr	r3, [r1, #0]
 8006e98:	075b      	lsls	r3, r3, #29
 8006e9a:	d501      	bpl.n	8006ea0 <HAL_RCC_OscConfig+0x178>
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	d0b1      	beq.n	8006e04 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ea0:	4d3e      	ldr	r5, [pc, #248]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	f023 0319 	bic.w	r3, r3, #25
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006eac:	f7fe f80e 	bl	8004ecc <HAL_GetTick>
 8006eb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	075f      	lsls	r7, r3, #29
 8006eb6:	d507      	bpl.n	8006ec8 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb8:	686b      	ldr	r3, [r5, #4]
 8006eba:	6922      	ldr	r2, [r4, #16]
 8006ebc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006ec0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006ec4:	606b      	str	r3, [r5, #4]
 8006ec6:	e73a      	b.n	8006d3e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec8:	f7fe f800 	bl	8004ecc <HAL_GetTick>
 8006ecc:	1b80      	subs	r0, r0, r6
 8006ece:	2802      	cmp	r0, #2
 8006ed0:	d9ef      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x18a>
 8006ed2:	e7ae      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ed4:	4d31      	ldr	r5, [pc, #196]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ed6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ed8:	b17a      	cbz	r2, 8006efa <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006eda:	f023 0319 	bic.w	r3, r3, #25
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ee2:	f7fd fff3 	bl	8004ecc <HAL_GetTick>
 8006ee6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	0758      	lsls	r0, r3, #29
 8006eec:	d4e4      	bmi.n	8006eb8 <HAL_RCC_OscConfig+0x190>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eee:	f7fd ffed 	bl	8004ecc <HAL_GetTick>
 8006ef2:	1b80      	subs	r0, r0, r6
 8006ef4:	2802      	cmp	r0, #2
 8006ef6:	d9f7      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x1c0>
 8006ef8:	e79b      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_HSI_DISABLE();
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006f00:	f7fd ffe4 	bl	8004ecc <HAL_GetTick>
 8006f04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f06:	682b      	ldr	r3, [r5, #0]
 8006f08:	0759      	lsls	r1, r3, #29
 8006f0a:	f57f af18 	bpl.w	8006d3e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f0e:	f7fd ffdd 	bl	8004ecc <HAL_GetTick>
 8006f12:	1b80      	subs	r0, r0, r6
 8006f14:	2802      	cmp	r0, #2
 8006f16:	d9f6      	bls.n	8006f06 <HAL_RCC_OscConfig+0x1de>
 8006f18:	e78b      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f1a:	69e3      	ldr	r3, [r4, #28]
 8006f1c:	4d1f      	ldr	r5, [pc, #124]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006f1e:	b1bb      	cbz	r3, 8006f50 <HAL_RCC_OscConfig+0x228>
        __HAL_RCC_CSI_ENABLE();
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006f28:	f7fd ffd0 	bl	8004ecc <HAL_GetTick>
 8006f2c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	05df      	lsls	r7, r3, #23
 8006f32:	d507      	bpl.n	8006f44 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f34:	68eb      	ldr	r3, [r5, #12]
 8006f36:	6a22      	ldr	r2, [r4, #32]
 8006f38:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f40:	60eb      	str	r3, [r5, #12]
 8006f42:	e71c      	b.n	8006d7e <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f44:	f7fd ffc2 	bl	8004ecc <HAL_GetTick>
 8006f48:	1b80      	subs	r0, r0, r6
 8006f4a:	2802      	cmp	r0, #2
 8006f4c:	d9ef      	bls.n	8006f2e <HAL_RCC_OscConfig+0x206>
 8006f4e:	e770      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_CSI_DISABLE();
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006f58:	f7fd ffb8 	bl	8004ecc <HAL_GetTick>
 8006f5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f5e:	682b      	ldr	r3, [r5, #0]
 8006f60:	05d8      	lsls	r0, r3, #23
 8006f62:	f57f af0c 	bpl.w	8006d7e <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f66:	f7fd ffb1 	bl	8004ecc <HAL_GetTick>
 8006f6a:	1b80      	subs	r0, r0, r6
 8006f6c:	2802      	cmp	r0, #2
 8006f6e:	d9f6      	bls.n	8006f5e <HAL_RCC_OscConfig+0x236>
 8006f70:	e75f      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f72:	6963      	ldr	r3, [r4, #20]
 8006f74:	4d09      	ldr	r5, [pc, #36]	@ (8006f9c <HAL_RCC_OscConfig+0x274>)
 8006f76:	b1ab      	cbz	r3, 8006fa4 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSI_ENABLE();
 8006f78:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006f80:	f7fd ffa4 	bl	8004ecc <HAL_GetTick>
 8006f84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f86:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006f88:	079b      	lsls	r3, r3, #30
 8006f8a:	f53f aefc 	bmi.w	8006d86 <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f8e:	f7fd ff9d 	bl	8004ecc <HAL_GetTick>
 8006f92:	1b80      	subs	r0, r0, r6
 8006f94:	2802      	cmp	r0, #2
 8006f96:	d9f6      	bls.n	8006f86 <HAL_RCC_OscConfig+0x25e>
 8006f98:	e74b      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
 8006f9a:	bf00      	nop
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8006fa4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006fa6:	f023 0301 	bic.w	r3, r3, #1
 8006faa:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006fac:	f7fd ff8e 	bl	8004ecc <HAL_GetTick>
 8006fb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fb2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006fb4:	079f      	lsls	r7, r3, #30
 8006fb6:	f57f aee6 	bpl.w	8006d86 <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fba:	f7fd ff87 	bl	8004ecc <HAL_GetTick>
 8006fbe:	1b80      	subs	r0, r0, r6
 8006fc0:	2802      	cmp	r0, #2
 8006fc2:	d9f6      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x28a>
 8006fc4:	e735      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006fc6:	69a3      	ldr	r3, [r4, #24]
 8006fc8:	4d93      	ldr	r5, [pc, #588]	@ (8007218 <HAL_RCC_OscConfig+0x4f0>)
 8006fca:	b183      	cbz	r3, 8006fee <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSI48_ENABLE();
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fd2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006fd4:	f7fd ff7a 	bl	8004ecc <HAL_GetTick>
 8006fd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	0498      	lsls	r0, r3, #18
 8006fde:	f53f aed6 	bmi.w	8006d8e <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fe2:	f7fd ff73 	bl	8004ecc <HAL_GetTick>
 8006fe6:	1b80      	subs	r0, r0, r6
 8006fe8:	2802      	cmp	r0, #2
 8006fea:	d9f6      	bls.n	8006fda <HAL_RCC_OscConfig+0x2b2>
 8006fec:	e721      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSI48_DISABLE();
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ff4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006ff6:	f7fd ff69 	bl	8004ecc <HAL_GetTick>
 8006ffa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	0499      	lsls	r1, r3, #18
 8007000:	f57f aec5 	bpl.w	8006d8e <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007004:	f7fd ff62 	bl	8004ecc <HAL_GetTick>
 8007008:	1b80      	subs	r0, r0, r6
 800700a:	2802      	cmp	r0, #2
 800700c:	d9f6      	bls.n	8006ffc <HAL_RCC_OscConfig+0x2d4>
 800700e:	e710      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007010:	f7fd ff5c 	bl	8004ecc <HAL_GetTick>
 8007014:	1b80      	subs	r0, r0, r6
 8007016:	2864      	cmp	r0, #100	@ 0x64
 8007018:	f67f aec4 	bls.w	8006da4 <HAL_RCC_OscConfig+0x7c>
 800701c:	e709      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701e:	b9b3      	cbnz	r3, 800704e <HAL_RCC_OscConfig+0x326>
 8007020:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007022:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007026:	f023 0301 	bic.w	r3, r3, #1
 800702a:	672b      	str	r3, [r5, #112]	@ 0x70
 800702c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800702e:	f023 0304 	bic.w	r3, r3, #4
 8007032:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8007034:	f7fd ff4a 	bl	8004ecc <HAL_GetTick>
 8007038:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800703a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800703c:	0798      	lsls	r0, r3, #30
 800703e:	f57f aec8 	bpl.w	8006dd2 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fd ff43 	bl	8004ecc <HAL_GetTick>
 8007046:	1b80      	subs	r0, r0, r6
 8007048:	42b8      	cmp	r0, r7
 800704a:	d9f6      	bls.n	800703a <HAL_RCC_OscConfig+0x312>
 800704c:	e6f1      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800704e:	2b05      	cmp	r3, #5
 8007050:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8007052:	d103      	bne.n	800705c <HAL_RCC_OscConfig+0x334>
 8007054:	f043 0304 	orr.w	r3, r3, #4
 8007058:	672b      	str	r3, [r5, #112]	@ 0x70
 800705a:	e6ac      	b.n	8006db6 <HAL_RCC_OscConfig+0x8e>
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	672b      	str	r3, [r5, #112]	@ 0x70
 8007062:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	e6a8      	b.n	8006dbc <HAL_RCC_OscConfig+0x94>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fd ff2f 	bl	8004ecc <HAL_GetTick>
 800706e:	1b40      	subs	r0, r0, r5
 8007070:	42b8      	cmp	r0, r7
 8007072:	f67f aeaa 	bls.w	8006dca <HAL_RCC_OscConfig+0xa2>
 8007076:	e6dc      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007078:	4d67      	ldr	r5, [pc, #412]	@ (8007218 <HAL_RCC_OscConfig+0x4f0>)
 800707a:	692b      	ldr	r3, [r5, #16]
 800707c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007080:	2b18      	cmp	r3, #24
 8007082:	d07a      	beq.n	800717a <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_DISABLE();
 8007084:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007086:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8007088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800708c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708e:	d167      	bne.n	8007160 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8007090:	f7fd ff1c 	bl	8004ecc <HAL_GetTick>
 8007094:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	0199      	lsls	r1, r3, #6
 800709a:	d45b      	bmi.n	8007154 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800709c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800709e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80070a0:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80070ac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80070b0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80070b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80070b6:	3b01      	subs	r3, #1
 80070b8:	3a01      	subs	r2, #1
 80070ba:	025b      	lsls	r3, r3, #9
 80070bc:	0412      	lsls	r2, r2, #16
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80070c4:	4313      	orrs	r3, r2
 80070c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80070c8:	3a01      	subs	r2, #1
 80070ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ce:	4313      	orrs	r3, r2
 80070d0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80070d2:	3a01      	subs	r2, #1
 80070d4:	0612      	lsls	r2, r2, #24
 80070d6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80070da:	4313      	orrs	r3, r2
 80070dc:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80070de:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070e6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80070e8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80070ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80070f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80070f6:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070f8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80070fa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80070fc:	f023 030c 	bic.w	r3, r3, #12
 8007100:	4313      	orrs	r3, r2
 8007102:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007104:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007106:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007108:	f023 0302 	bic.w	r3, r3, #2
 800710c:	4313      	orrs	r3, r2
 800710e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007110:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007116:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007118:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800711a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800711e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007120:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007122:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007126:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8007128:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800712a:	f043 0301 	orr.w	r3, r3, #1
 800712e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007136:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007138:	f7fd fec8 	bl	8004ecc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800713c:	4d36      	ldr	r5, [pc, #216]	@ (8007218 <HAL_RCC_OscConfig+0x4f0>)
        tickstart = HAL_GetTick();
 800713e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	019a      	lsls	r2, r3, #6
 8007144:	f53f ae49 	bmi.w	8006dda <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fd fec0 	bl	8004ecc <HAL_GetTick>
 800714c:	1b00      	subs	r0, r0, r4
 800714e:	2802      	cmp	r0, #2
 8007150:	d9f6      	bls.n	8007140 <HAL_RCC_OscConfig+0x418>
 8007152:	e66e      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007154:	f7fd feba 	bl	8004ecc <HAL_GetTick>
 8007158:	1b80      	subs	r0, r0, r6
 800715a:	2802      	cmp	r0, #2
 800715c:	d99b      	bls.n	8007096 <HAL_RCC_OscConfig+0x36e>
 800715e:	e668      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 8007160:	f7fd feb4 	bl	8004ecc <HAL_GetTick>
 8007164:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007166:	682b      	ldr	r3, [r5, #0]
 8007168:	019b      	lsls	r3, r3, #6
 800716a:	f57f ae36 	bpl.w	8006dda <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800716e:	f7fd fead 	bl	8004ecc <HAL_GetTick>
 8007172:	1b00      	subs	r0, r0, r4
 8007174:	2802      	cmp	r0, #2
 8007176:	d9f6      	bls.n	8007166 <HAL_RCC_OscConfig+0x43e>
 8007178:	e65b      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717a:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800717c:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800717e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007180:	f43f ae40 	beq.w	8006e04 <HAL_RCC_OscConfig+0xdc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007184:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007188:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800718a:	4281      	cmp	r1, r0
 800718c:	f47f ae3a 	bne.w	8006e04 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007190:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007194:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007196:	428a      	cmp	r2, r1
 8007198:	f47f ae34 	bne.w	8006e04 <HAL_RCC_OscConfig+0xdc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800719c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800719e:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80071a2:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071a4:	4291      	cmp	r1, r2
 80071a6:	f47f ae2d 	bne.w	8006e04 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071aa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80071ac:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80071b0:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071b2:	4291      	cmp	r1, r2
 80071b4:	f47f ae26 	bne.w	8006e04 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80071ba:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80071be:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071c0:	4291      	cmp	r1, r2
 80071c2:	f47f ae1f 	bne.w	8006e04 <HAL_RCC_OscConfig+0xdc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071c6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80071c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80071cc:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071ce:	4293      	cmp	r3, r2
 80071d0:	f47f ae18 	bne.w	8006e04 <HAL_RCC_OscConfig+0xdc>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071d4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80071d6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071d8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80071dc:	429a      	cmp	r2, r3
 80071de:	f43f adfc 	beq.w	8006dda <HAL_RCC_OscConfig+0xb2>
          __HAL_RCC_PLLFRACN_DISABLE();
 80071e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007218 <HAL_RCC_OscConfig+0x4f0>)
 80071e4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80071ec:	f7fd fe6e 	bl	8004ecc <HAL_GetTick>
 80071f0:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80071f2:	f7fd fe6b 	bl	8004ecc <HAL_GetTick>
 80071f6:	42b0      	cmp	r0, r6
 80071f8:	d0fb      	beq.n	80071f2 <HAL_RCC_OscConfig+0x4ca>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071fa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80071fc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80071fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007202:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007206:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800720a:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800720c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8007214:	e5e1      	b.n	8006dda <HAL_RCC_OscConfig+0xb2>
 8007216:	bf00      	nop
 8007218:	58024400 	.word	0x58024400

0800721c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800721c:	4b49      	ldr	r3, [pc, #292]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x128>)
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007224:	2a10      	cmp	r2, #16
{
 8007226:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007228:	f000 8088 	beq.w	800733c <HAL_RCC_GetSysClockFreq+0x120>
 800722c:	2a18      	cmp	r2, #24
 800722e:	d00c      	beq.n	800724a <HAL_RCC_GetSysClockFreq+0x2e>
 8007230:	2a00      	cmp	r2, #0
 8007232:	f040 8085 	bne.w	8007340 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4843      	ldr	r0, [pc, #268]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 800723a:	f012 0f20 	tst.w	r2, #32
 800723e:	d003      	beq.n	8007248 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007246:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8007248:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800724a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800724c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800724e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8007250:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007254:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800725a:	d0f5      	beq.n	8007248 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800725c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007260:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007264:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007268:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800726c:	4362      	muls	r2, r4
 800726e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007272:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007278:	ee06 2a90 	vmov	s13, r2
 800727c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007280:	d04e      	beq.n	8007320 <HAL_RCC_GetSysClockFreq+0x104>
 8007282:	2902      	cmp	r1, #2
 8007284:	d03e      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0xe8>
 8007286:	2900      	cmp	r1, #0
 8007288:	d14a      	bne.n	8007320 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	0692      	lsls	r2, r2, #26
 800728e:	d527      	bpl.n	80072e0 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	4a2d      	ldr	r2, [pc, #180]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007294:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800729a:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800729c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a0:	ee07 2a90 	vmov	s15, r2
 80072a4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80072a8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80072ac:	ee07 3a10 	vmov	s14, r3
 80072b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80072b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80072bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80072c0:	4b20      	ldr	r3, [pc, #128]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x128>)
 80072c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80072c8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072ca:	ee07 3a10 	vmov	s14, r3
 80072ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072d6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80072da:	ee17 0a90 	vmov	r0, s15
 80072de:	e7b3      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80072f6:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800734c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072fa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80072fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8007302:	e7dd      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee77 7a86 	vadd.f32	s15, s15, s12
 800731a:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8007350 <HAL_RCC_GetSysClockFreq+0x134>
 800731e:	e7ec      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800732e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007332:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007336:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8007354 <HAL_RCC_GetSysClockFreq+0x138>
 800733a:	e7de      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800733c:	4806      	ldr	r0, [pc, #24]	@ (8007358 <HAL_RCC_GetSysClockFreq+0x13c>)
 800733e:	e783      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8007340:	4806      	ldr	r0, [pc, #24]	@ (800735c <HAL_RCC_GetSysClockFreq+0x140>)
 8007342:	e781      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x2c>
 8007344:	58024400 	.word	0x58024400
 8007348:	03d09000 	.word	0x03d09000
 800734c:	4c742400 	.word	0x4c742400
 8007350:	4bbebc20 	.word	0x4bbebc20
 8007354:	4a742400 	.word	0x4a742400
 8007358:	017d7840 	.word	0x017d7840
 800735c:	003d0900 	.word	0x003d0900

08007360 <HAL_RCC_ClockConfig>:
{
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007366:	4604      	mov	r4, r0
 8007368:	b910      	cbnz	r0, 8007370 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800736a:	2001      	movs	r0, #1
}
 800736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007370:	4a88      	ldr	r2, [pc, #544]	@ (8007594 <HAL_RCC_ClockConfig+0x234>)
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	428b      	cmp	r3, r1
 800737a:	f0c0 8093 	bcc.w	80074a4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	075f      	lsls	r7, r3, #29
 8007382:	f100 809b 	bmi.w	80074bc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007386:	071e      	lsls	r6, r3, #28
 8007388:	d50b      	bpl.n	80073a2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800738a:	4983      	ldr	r1, [pc, #524]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 800738c:	6960      	ldr	r0, [r4, #20]
 800738e:	69ca      	ldr	r2, [r1, #28]
 8007390:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007394:	4290      	cmp	r0, r2
 8007396:	d904      	bls.n	80073a2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007398:	69ca      	ldr	r2, [r1, #28]
 800739a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800739e:	4302      	orrs	r2, r0
 80073a0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a2:	06d8      	lsls	r0, r3, #27
 80073a4:	d50b      	bpl.n	80073be <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073a6:	497c      	ldr	r1, [pc, #496]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 80073a8:	69a0      	ldr	r0, [r4, #24]
 80073aa:	69ca      	ldr	r2, [r1, #28]
 80073ac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80073b0:	4290      	cmp	r0, r2
 80073b2:	d904      	bls.n	80073be <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073b4:	69ca      	ldr	r2, [r1, #28]
 80073b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80073ba:	4302      	orrs	r2, r0
 80073bc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073be:	0699      	lsls	r1, r3, #26
 80073c0:	d50b      	bpl.n	80073da <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073c2:	4975      	ldr	r1, [pc, #468]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 80073c4:	69e0      	ldr	r0, [r4, #28]
 80073c6:	6a0a      	ldr	r2, [r1, #32]
 80073c8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80073cc:	4290      	cmp	r0, r2
 80073ce:	d904      	bls.n	80073da <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073d0:	6a0a      	ldr	r2, [r1, #32]
 80073d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80073d6:	4302      	orrs	r2, r0
 80073d8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073da:	079a      	lsls	r2, r3, #30
 80073dc:	d50b      	bpl.n	80073f6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073de:	496e      	ldr	r1, [pc, #440]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 80073e0:	68e0      	ldr	r0, [r4, #12]
 80073e2:	698a      	ldr	r2, [r1, #24]
 80073e4:	f002 020f 	and.w	r2, r2, #15
 80073e8:	4290      	cmp	r0, r2
 80073ea:	d904      	bls.n	80073f6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073ec:	698a      	ldr	r2, [r1, #24]
 80073ee:	f022 020f 	bic.w	r2, r2, #15
 80073f2:	4302      	orrs	r2, r0
 80073f4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f6:	07df      	lsls	r7, r3, #31
 80073f8:	d46e      	bmi.n	80074d8 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	079e      	lsls	r6, r3, #30
 80073fe:	f100 80a1 	bmi.w	8007544 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007402:	4964      	ldr	r1, [pc, #400]	@ (8007594 <HAL_RCC_ClockConfig+0x234>)
 8007404:	680a      	ldr	r2, [r1, #0]
 8007406:	f002 020f 	and.w	r2, r2, #15
 800740a:	42aa      	cmp	r2, r5
 800740c:	f200 80a8 	bhi.w	8007560 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007410:	0758      	lsls	r0, r3, #29
 8007412:	f100 80b1 	bmi.w	8007578 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007416:	0719      	lsls	r1, r3, #28
 8007418:	d50b      	bpl.n	8007432 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800741a:	495f      	ldr	r1, [pc, #380]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 800741c:	6960      	ldr	r0, [r4, #20]
 800741e:	69ca      	ldr	r2, [r1, #28]
 8007420:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007424:	4290      	cmp	r0, r2
 8007426:	d204      	bcs.n	8007432 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007428:	69ca      	ldr	r2, [r1, #28]
 800742a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800742e:	4302      	orrs	r2, r0
 8007430:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007432:	06da      	lsls	r2, r3, #27
 8007434:	d50b      	bpl.n	800744e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007436:	4958      	ldr	r1, [pc, #352]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 8007438:	69a0      	ldr	r0, [r4, #24]
 800743a:	69ca      	ldr	r2, [r1, #28]
 800743c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007440:	4290      	cmp	r0, r2
 8007442:	d204      	bcs.n	800744e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007444:	69ca      	ldr	r2, [r1, #28]
 8007446:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800744a:	4302      	orrs	r2, r0
 800744c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800744e:	069b      	lsls	r3, r3, #26
 8007450:	d50b      	bpl.n	800746a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007452:	4a51      	ldr	r2, [pc, #324]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 8007454:	69e1      	ldr	r1, [r4, #28]
 8007456:	6a13      	ldr	r3, [r2, #32]
 8007458:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800745c:	4299      	cmp	r1, r3
 800745e:	d204      	bcs.n	800746a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007460:	6a13      	ldr	r3, [r2, #32]
 8007462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007466:	430b      	orrs	r3, r1
 8007468:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800746a:	f7ff fed7 	bl	800721c <HAL_RCC_GetSysClockFreq>
 800746e:	494a      	ldr	r1, [pc, #296]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 8007470:	4a4a      	ldr	r2, [pc, #296]	@ (800759c <HAL_RCC_ClockConfig+0x23c>)
 8007472:	698b      	ldr	r3, [r1, #24]
 8007474:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007478:	5cd3      	ldrb	r3, [r2, r3]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007480:	698b      	ldr	r3, [r1, #24]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	5cd3      	ldrb	r3, [r2, r3]
 8007488:	4a45      	ldr	r2, [pc, #276]	@ (80075a0 <HAL_RCC_ClockConfig+0x240>)
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	fa20 f303 	lsr.w	r3, r0, r3
 8007492:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007494:	4b43      	ldr	r3, [pc, #268]	@ (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007496:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8007498:	4b43      	ldr	r3, [pc, #268]	@ (80075a8 <HAL_RCC_ClockConfig+0x248>)
}
 800749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	f7f9 bf52 	b.w	8001348 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a4:	6813      	ldr	r3, [r2, #0]
 80074a6:	f023 030f 	bic.w	r3, r3, #15
 80074aa:	430b      	orrs	r3, r1
 80074ac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	428b      	cmp	r3, r1
 80074b6:	f47f af58 	bne.w	800736a <HAL_RCC_ClockConfig+0xa>
 80074ba:	e760      	b.n	800737e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074bc:	4936      	ldr	r1, [pc, #216]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 80074be:	6920      	ldr	r0, [r4, #16]
 80074c0:	698a      	ldr	r2, [r1, #24]
 80074c2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80074c6:	4290      	cmp	r0, r2
 80074c8:	f67f af5d 	bls.w	8007386 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074cc:	698a      	ldr	r2, [r1, #24]
 80074ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80074d2:	4302      	orrs	r2, r0
 80074d4:	618a      	str	r2, [r1, #24]
 80074d6:	e756      	b.n	8007386 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 80074da:	68a1      	ldr	r1, [r4, #8]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80074e2:	430a      	orrs	r2, r1
 80074e4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074e8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ea:	2902      	cmp	r1, #2
 80074ec:	d11d      	bne.n	800752a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ee:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074f2:	f43f af3a 	beq.w	800736a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074f6:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074f8:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fc:	4f26      	ldr	r7, [pc, #152]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074fe:	f022 0207 	bic.w	r2, r2, #7
 8007502:	430a      	orrs	r2, r1
 8007504:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8007506:	f7fd fce1 	bl	8004ecc <HAL_GetTick>
 800750a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007514:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007518:	f43f af6f 	beq.w	80073fa <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800751c:	f7fd fcd6 	bl	8004ecc <HAL_GetTick>
 8007520:	1b80      	subs	r0, r0, r6
 8007522:	4540      	cmp	r0, r8
 8007524:	d9f2      	bls.n	800750c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8007526:	2003      	movs	r0, #3
 8007528:	e720      	b.n	800736c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800752a:	2903      	cmp	r1, #3
 800752c:	d102      	bne.n	8007534 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800752e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8007532:	e7de      	b.n	80074f2 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007534:	2901      	cmp	r1, #1
 8007536:	d102      	bne.n	800753e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007538:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800753c:	e7d9      	b.n	80074f2 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800753e:	f012 0f04 	tst.w	r2, #4
 8007542:	e7d6      	b.n	80074f2 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007544:	4914      	ldr	r1, [pc, #80]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 8007546:	68e0      	ldr	r0, [r4, #12]
 8007548:	698a      	ldr	r2, [r1, #24]
 800754a:	f002 020f 	and.w	r2, r2, #15
 800754e:	4290      	cmp	r0, r2
 8007550:	f4bf af57 	bcs.w	8007402 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007554:	698a      	ldr	r2, [r1, #24]
 8007556:	f022 020f 	bic.w	r2, r2, #15
 800755a:	4302      	orrs	r2, r0
 800755c:	618a      	str	r2, [r1, #24]
 800755e:	e750      	b.n	8007402 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007560:	680a      	ldr	r2, [r1, #0]
 8007562:	f022 020f 	bic.w	r2, r2, #15
 8007566:	432a      	orrs	r2, r5
 8007568:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800756a:	680a      	ldr	r2, [r1, #0]
 800756c:	f002 020f 	and.w	r2, r2, #15
 8007570:	42aa      	cmp	r2, r5
 8007572:	f47f aefa 	bne.w	800736a <HAL_RCC_ClockConfig+0xa>
 8007576:	e74b      	b.n	8007410 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007578:	4907      	ldr	r1, [pc, #28]	@ (8007598 <HAL_RCC_ClockConfig+0x238>)
 800757a:	6920      	ldr	r0, [r4, #16]
 800757c:	698a      	ldr	r2, [r1, #24]
 800757e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007582:	4290      	cmp	r0, r2
 8007584:	f4bf af47 	bcs.w	8007416 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007588:	698a      	ldr	r2, [r1, #24]
 800758a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800758e:	4302      	orrs	r2, r0
 8007590:	618a      	str	r2, [r1, #24]
 8007592:	e740      	b.n	8007416 <HAL_RCC_ClockConfig+0xb6>
 8007594:	52002000 	.word	0x52002000
 8007598:	58024400 	.word	0x58024400
 800759c:	0802d3c0 	.word	0x0802d3c0
 80075a0:	2400003c 	.word	0x2400003c
 80075a4:	24000040 	.word	0x24000040
 80075a8:	24000048 	.word	0x24000048

080075ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075ac:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075ae:	f7ff fe35 	bl	800721c <HAL_RCC_GetSysClockFreq>
 80075b2:	4a0b      	ldr	r2, [pc, #44]	@ (80075e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80075b4:	490b      	ldr	r1, [pc, #44]	@ (80075e4 <HAL_RCC_GetHCLKFreq+0x38>)
 80075b6:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075b8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075ba:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075be:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075c2:	5ccb      	ldrb	r3, [r1, r3]
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075cc:	5c88      	ldrb	r0, [r1, r2]
 80075ce:	4a06      	ldr	r2, [pc, #24]	@ (80075e8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80075d0:	f000 001f 	and.w	r0, r0, #31
 80075d4:	fa23 f000 	lsr.w	r0, r3, r0
 80075d8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075da:	4a04      	ldr	r2, [pc, #16]	@ (80075ec <HAL_RCC_GetHCLKFreq+0x40>)
 80075dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80075de:	bd08      	pop	{r3, pc}
 80075e0:	58024400 	.word	0x58024400
 80075e4:	0802d3c0 	.word	0x0802d3c0
 80075e8:	2400003c 	.word	0x2400003c
 80075ec:	24000040 	.word	0x24000040

080075f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80075f2:	f7ff ffdb 	bl	80075ac <HAL_RCC_GetHCLKFreq>
 80075f6:	4b05      	ldr	r3, [pc, #20]	@ (800760c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80075f8:	4a05      	ldr	r2, [pc, #20]	@ (8007610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007600:	5cd3      	ldrb	r3, [r2, r3]
 8007602:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007606:	40d8      	lsrs	r0, r3
 8007608:	bd08      	pop	{r3, pc}
 800760a:	bf00      	nop
 800760c:	58024400 	.word	0x58024400
 8007610:	0802d3c0 	.word	0x0802d3c0

08007614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007614:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007616:	f7ff ffc9 	bl	80075ac <HAL_RCC_GetHCLKFreq>
 800761a:	4b05      	ldr	r3, [pc, #20]	@ (8007630 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800761c:	4a05      	ldr	r2, [pc, #20]	@ (8007634 <HAL_RCC_GetPCLK2Freq+0x20>)
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007624:	5cd3      	ldrb	r3, [r2, r3]
 8007626:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800762a:	40d8      	lsrs	r0, r3
 800762c:	bd08      	pop	{r3, pc}
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400
 8007634:	0802d3c0 	.word	0x0802d3c0

08007638 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007638:	233f      	movs	r3, #63	@ 0x3f
 800763a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800763c:	4b11      	ldr	r3, [pc, #68]	@ (8007684 <HAL_RCC_GetClockConfig+0x4c>)
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	f002 0207 	and.w	r2, r2, #7
 8007644:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800764c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800764e:	699a      	ldr	r2, [r3, #24]
 8007650:	f002 020f 	and.w	r2, r2, #15
 8007654:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800765c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007664:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800766c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007674:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007676:	4b04      	ldr	r3, [pc, #16]	@ (8007688 <HAL_RCC_GetClockConfig+0x50>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	600b      	str	r3, [r1, #0]
}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	58024400 	.word	0x58024400
 8007688:	52002000 	.word	0x52002000

0800768c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800768e:	4c3a      	ldr	r4, [pc, #232]	@ (8007778 <RCCEx_PLL2_Config+0xec>)
{
 8007690:	4606      	mov	r6, r0
 8007692:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007694:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b03      	cmp	r3, #3
 800769c:	d069      	beq.n	8007772 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a6:	f7fd fc11 	bl	8004ecc <HAL_GetTick>
 80076aa:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	011a      	lsls	r2, r3, #4
 80076b0:	d44b      	bmi.n	800774a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80076b4:	6832      	ldr	r2, [r6, #0]
 80076b6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80076ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80076be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076c0:	68b3      	ldr	r3, [r6, #8]
 80076c2:	68f2      	ldr	r2, [r6, #12]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	3a01      	subs	r2, #1
 80076c8:	025b      	lsls	r3, r3, #9
 80076ca:	0412      	lsls	r2, r2, #16
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80076d2:	4313      	orrs	r3, r2
 80076d4:	6872      	ldr	r2, [r6, #4]
 80076d6:	3a01      	subs	r2, #1
 80076d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076dc:	4313      	orrs	r3, r2
 80076de:	6932      	ldr	r2, [r6, #16]
 80076e0:	3a01      	subs	r2, #1
 80076e2:	0612      	lsls	r2, r2, #24
 80076e4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80076e8:	4313      	orrs	r3, r2
 80076ea:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80076ee:	6972      	ldr	r2, [r6, #20]
 80076f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80076fa:	69b2      	ldr	r2, [r6, #24]
 80076fc:	f023 0320 	bic.w	r3, r3, #32
 8007700:	4313      	orrs	r3, r2
 8007702:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007704:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007706:	f023 0310 	bic.w	r3, r3, #16
 800770a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800770c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800770e:	69f2      	ldr	r2, [r6, #28]
 8007710:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007714:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007718:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800771c:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800771e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007720:	f043 0310 	orr.w	r3, r3, #16
 8007724:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007726:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007728:	b9b5      	cbnz	r5, 8007758 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800772a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800772e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007730:	4c11      	ldr	r4, [pc, #68]	@ (8007778 <RCCEx_PLL2_Config+0xec>)
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007738:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7fd fbc7 	bl	8004ecc <HAL_GetTick>
 800773e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	d50f      	bpl.n	8007766 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8007746:	2000      	movs	r0, #0
 8007748:	e005      	b.n	8007756 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800774a:	f7fd fbbf 	bl	8004ecc <HAL_GetTick>
 800774e:	1bc0      	subs	r0, r0, r7
 8007750:	2802      	cmp	r0, #2
 8007752:	d9ab      	bls.n	80076ac <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8007754:	2003      	movs	r0, #3
}
 8007756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8007758:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800775a:	bf0c      	ite	eq
 800775c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007760:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8007764:	e7e3      	b.n	800772e <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007766:	f7fd fbb1 	bl	8004ecc <HAL_GetTick>
 800776a:	1b40      	subs	r0, r0, r5
 800776c:	2802      	cmp	r0, #2
 800776e:	d9e7      	bls.n	8007740 <RCCEx_PLL2_Config+0xb4>
 8007770:	e7f0      	b.n	8007754 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8007772:	2001      	movs	r0, #1
 8007774:	e7ef      	b.n	8007756 <RCCEx_PLL2_Config+0xca>
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400

0800777c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800777e:	4c3a      	ldr	r4, [pc, #232]	@ (8007868 <RCCEx_PLL3_Config+0xec>)
{
 8007780:	4606      	mov	r6, r0
 8007782:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007784:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d069      	beq.n	8007862 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007794:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7fd fb99 	bl	8004ecc <HAL_GetTick>
 800779a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	009a      	lsls	r2, r3, #2
 80077a0:	d44b      	bmi.n	800783a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80077a4:	6832      	ldr	r2, [r6, #0]
 80077a6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80077aa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80077ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077b0:	68b3      	ldr	r3, [r6, #8]
 80077b2:	68f2      	ldr	r2, [r6, #12]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	3a01      	subs	r2, #1
 80077b8:	025b      	lsls	r3, r3, #9
 80077ba:	0412      	lsls	r2, r2, #16
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80077c2:	4313      	orrs	r3, r2
 80077c4:	6872      	ldr	r2, [r6, #4]
 80077c6:	3a01      	subs	r2, #1
 80077c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077cc:	4313      	orrs	r3, r2
 80077ce:	6932      	ldr	r2, [r6, #16]
 80077d0:	3a01      	subs	r2, #1
 80077d2:	0612      	lsls	r2, r2, #24
 80077d4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80077d8:	4313      	orrs	r3, r2
 80077da:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80077de:	6972      	ldr	r2, [r6, #20]
 80077e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80077e4:	4313      	orrs	r3, r2
 80077e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80077ea:	69b2      	ldr	r2, [r6, #24]
 80077ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077f0:	4313      	orrs	r3, r2
 80077f2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80077f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077fa:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077fc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80077fe:	69f2      	ldr	r2, [r6, #28]
 8007800:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007804:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007808:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800780c:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800780e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007814:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007816:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007818:	b9b5      	cbnz	r5, 8007848 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800781a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800781e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007820:	4c11      	ldr	r4, [pc, #68]	@ (8007868 <RCCEx_PLL3_Config+0xec>)
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007828:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782a:	f7fd fb4f 	bl	8004ecc <HAL_GetTick>
 800782e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	d50f      	bpl.n	8007856 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8007836:	2000      	movs	r0, #0
 8007838:	e005      	b.n	8007846 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800783a:	f7fd fb47 	bl	8004ecc <HAL_GetTick>
 800783e:	1bc0      	subs	r0, r0, r7
 8007840:	2802      	cmp	r0, #2
 8007842:	d9ab      	bls.n	800779c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8007844:	2003      	movs	r0, #3
}
 8007846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8007848:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800784a:	bf0c      	ite	eq
 800784c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007850:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8007854:	e7e3      	b.n	800781e <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007856:	f7fd fb39 	bl	8004ecc <HAL_GetTick>
 800785a:	1b40      	subs	r0, r0, r5
 800785c:	2802      	cmp	r0, #2
 800785e:	d9e7      	bls.n	8007830 <RCCEx_PLL3_Config+0xb4>
 8007860:	e7f0      	b.n	8007844 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8007862:	2001      	movs	r0, #1
 8007864:	e7ef      	b.n	8007846 <RCCEx_PLL3_Config+0xca>
 8007866:	bf00      	nop
 8007868:	58024400 	.word	0x58024400

0800786c <HAL_RCCEx_PeriphCLKConfig>:
{
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007870:	6803      	ldr	r3, [r0, #0]
{
 8007872:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007874:	011c      	lsls	r4, r3, #4
 8007876:	d51e      	bpl.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007878:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800787a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800787e:	d02a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007880:	d80f      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007882:	b1d3      	cbz	r3, 80078ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007884:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007888:	d01d      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800788a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	05d8      	lsls	r0, r3, #23
 8007890:	d553      	bpl.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007892:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8007894:	2b04      	cmp	r3, #4
 8007896:	d84f      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007898:	e8df f003 	tbb	[pc, r3]
 800789c:	27484122 	.word	0x27484122
 80078a0:	27          	.byte	0x27
 80078a1:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 80078a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078a6:	d1f0      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078a8:	4a98      	ldr	r2, [pc, #608]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80078aa:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 80078ac:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80078ae:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078b6:	2600      	movs	r6, #0
 80078b8:	e7e8      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ba:	4a94      	ldr	r2, [pc, #592]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80078bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80078be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80078c4:	e7f0      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078c6:	2102      	movs	r1, #2
 80078c8:	3008      	adds	r0, #8
 80078ca:	f7ff fedf 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ce:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d1db      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20>
 80078d4:	e7e8      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078d6:	2102      	movs	r1, #2
 80078d8:	3028      	adds	r0, #40	@ 0x28
 80078da:	f7ff ff4f 	bl	800777c <RCCEx_PLL3_Config>
 80078de:	e7f6      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e0:	4a8a      	ldr	r2, [pc, #552]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80078e2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80078e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 80078ea:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 80078ec:	bb3c      	cbnz	r4, 800793e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ee:	4a87      	ldr	r2, [pc, #540]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80078f0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80078f2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	0559      	lsls	r1, r3, #21
 8007900:	d530      	bpl.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007902:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 8007906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800790a:	d049      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800790c:	d819      	bhi.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d039      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8007912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007916:	d03c      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8007918:	2601      	movs	r6, #1
 800791a:	4634      	mov	r4, r6
 800791c:	e022      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800791e:	2100      	movs	r1, #0
 8007920:	f105 0008 	add.w	r0, r5, #8
 8007924:	f7ff feb2 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007928:	4604      	mov	r4, r0
        break;
 800792a:	e7df      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800792c:	2100      	movs	r1, #0
 800792e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007932:	f7ff ff23 	bl	800777c <RCCEx_PLL3_Config>
 8007936:	e7f7      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007938:	2601      	movs	r6, #1
 800793a:	4634      	mov	r4, r6
 800793c:	e7de      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800793e:	4626      	mov	r6, r4
 8007940:	e7dc      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007942:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007946:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800794a:	d002      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800794c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007950:	d1e2      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xac>
    if (ret == HAL_OK)
 8007952:	bb5c      	cbnz	r4, 80079ac <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007954:	4a6d      	ldr	r2, [pc, #436]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007956:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800795a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800795c:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8007960:	430b      	orrs	r3, r1
 8007962:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	051a      	lsls	r2, r3, #20
 8007968:	d533      	bpl.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->Sai4BClockSelection)
 800796a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 800796e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007972:	d048      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8007974:	d81c      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d038      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x180>
 800797a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800797e:	d03b      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007980:	2601      	movs	r6, #1
 8007982:	4634      	mov	r4, r6
 8007984:	e025      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007986:	4a61      	ldr	r2, [pc, #388]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007988:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800798a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007990:	e7df      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007992:	2100      	movs	r1, #0
 8007994:	f105 0008 	add.w	r0, r5, #8
 8007998:	f7ff fe78 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800799c:	4604      	mov	r4, r0
        break;
 800799e:	e7d8      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a0:	2100      	movs	r1, #0
 80079a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80079a6:	f7ff fee9 	bl	800777c <RCCEx_PLL3_Config>
 80079aa:	e7f7      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x130>
 80079ac:	4626      	mov	r6, r4
 80079ae:	e7d9      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 80079b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80079b4:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80079b8:	d002      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80079ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079be:	d1df      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if (ret == HAL_OK)
 80079c0:	bb3c      	cbnz	r4, 8007a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079c2:	4a52      	ldr	r2, [pc, #328]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80079c4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 80079c8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80079ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80079ce:	430b      	orrs	r3, r1
 80079d0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80079d2:	682b      	ldr	r3, [r5, #0]
 80079d4:	019b      	lsls	r3, r3, #6
 80079d6:	d528      	bpl.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->OspiClockSelection)
 80079d8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d03b      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80079de:	d81a      	bhi.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079e0:	b1db      	cbz	r3, 8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	d031      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80079e6:	2601      	movs	r6, #1
 80079e8:	4634      	mov	r4, r6
 80079ea:	e01e      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ec:	4a47      	ldr	r2, [pc, #284]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80079ee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80079f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80079f6:	e7e3      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f8:	2100      	movs	r1, #0
 80079fa:	f105 0008 	add.w	r0, r5, #8
 80079fe:	f7ff fe45 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a02:	4604      	mov	r4, r0
        break;
 8007a04:	e7dc      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a06:	2100      	movs	r1, #0
 8007a08:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007a0c:	f7ff feb6 	bl	800777c <RCCEx_PLL3_Config>
 8007a10:	e7f7      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a12:	4626      	mov	r6, r4
 8007a14:	e7dd      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->OspiClockSelection)
 8007a16:	2b30      	cmp	r3, #48	@ 0x30
 8007a18:	d1e5      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    if (ret == HAL_OK)
 8007a1a:	bb1c      	cbnz	r4, 8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007a1e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007a20:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007a22:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007a26:	430b      	orrs	r3, r1
 8007a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	04df      	lsls	r7, r3, #19
 8007a2e:	d52a      	bpl.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a30:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a36:	d078      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007a38:	d816      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d068      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a42:	d06b      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a44:	2601      	movs	r6, #1
 8007a46:	4634      	mov	r4, r6
 8007a48:	e01d      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4a:	4a30      	ldr	r2, [pc, #192]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007a4c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007a54:	e7e1      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a56:	2102      	movs	r1, #2
 8007a58:	f105 0008 	add.w	r0, r5, #8
 8007a5c:	f7ff fe16 	bl	800768c <RCCEx_PLL2_Config>
 8007a60:	4604      	mov	r4, r0
        break;
 8007a62:	e7da      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007a64:	4626      	mov	r6, r4
 8007a66:	e7e0      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a6c:	d002      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8007a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a72:	d1e7      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 8007a74:	2c00      	cmp	r4, #0
 8007a76:	d15e      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a78:	4a24      	ldr	r2, [pc, #144]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007a7a:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8007a7c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a86:	682b      	ldr	r3, [r5, #0]
 8007a88:	0498      	lsls	r0, r3, #18
 8007a8a:	d50b      	bpl.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a8c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8007a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a92:	d06a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8007a94:	d851      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d057      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a9e:	d05d      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8007aa0:	2601      	movs	r6, #1
 8007aa2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	0459      	lsls	r1, r3, #17
 8007aa8:	d50c      	bpl.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007aaa:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8007aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab2:	d07b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x340>
 8007ab4:	d861      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d067      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007abe:	d06e      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007ac0:	2601      	movs	r6, #1
 8007ac2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	041a      	lsls	r2, r3, #16
 8007ac8:	d511      	bpl.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x282>
    switch (PeriphClkInit->FdcanClockSelection)
 8007aca:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8007acc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad0:	d074      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ad6:	d077      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d17c      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    if (ret == HAL_OK)
 8007adc:	2c00      	cmp	r4, #0
 8007ade:	d17d      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007ae2:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 8007ae4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007ae6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007aea:	430b      	orrs	r3, r1
 8007aec:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007aee:	682b      	ldr	r3, [r5, #0]
 8007af0:	01db      	lsls	r3, r3, #7
 8007af2:	f140 8083 	bpl.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x390>
    switch (PeriphClkInit->FmcClockSelection)
 8007af6:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	f200 80db 	bhi.w	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8007afe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b02:	0074      	.short	0x0074
 8007b04:	00d2006f 	.word	0x00d2006f
 8007b08:	0074      	.short	0x0074
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b10:	4a9e      	ldr	r2, [pc, #632]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007b12:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007b1a:	e7ab      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f105 0008 	add.w	r0, r5, #8
 8007b22:	f7ff fdb3 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b26:	4604      	mov	r4, r0
        break;
 8007b28:	e7a4      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007b30:	f7ff fe24 	bl	800777c <RCCEx_PLL3_Config>
 8007b34:	e7f7      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007b36:	4626      	mov	r6, r4
 8007b38:	e7a5      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b3e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8007b42:	d002      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007b44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b48:	d1aa      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    if (ret == HAL_OK)
 8007b4a:	b9a4      	cbnz	r4, 8007b76 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b4c:	4a8f      	ldr	r2, [pc, #572]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007b4e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8007b50:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007b52:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007b56:	430b      	orrs	r3, r1
 8007b58:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b5a:	e7a3      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	f105 0008 	add.w	r0, r5, #8
 8007b62:	f7ff fd93 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b66:	4604      	mov	r4, r0
        break;
 8007b68:	e7ef      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007b70:	f7ff fe04 	bl	800777c <RCCEx_PLL3_Config>
 8007b74:	e7f7      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8007b76:	4626      	mov	r6, r4
 8007b78:	e794      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b7e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007b82:	d002      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007b84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b88:	d19a      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    if (ret == HAL_OK)
 8007b8a:	b9ac      	cbnz	r4, 8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b8c:	4a7f      	ldr	r2, [pc, #508]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007b8e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8007b92:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007b94:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b9c:	e792      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	f105 0008 	add.w	r0, r5, #8
 8007ba4:	f7ff fd72 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ba8:	4604      	mov	r4, r0
        break;
 8007baa:	e7ee      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bac:	2101      	movs	r1, #1
 8007bae:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007bb2:	f7ff fde3 	bl	800777c <RCCEx_PLL3_Config>
 8007bb6:	e7f7      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007bb8:	4626      	mov	r6, r4
 8007bba:	e783      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bbc:	4a73      	ldr	r2, [pc, #460]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007bbe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8007bc6:	e789      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bc8:	2101      	movs	r1, #1
 8007bca:	f105 0008 	add.w	r0, r5, #8
 8007bce:	f7ff fd5d 	bl	800768c <RCCEx_PLL2_Config>
 8007bd2:	4604      	mov	r4, r0
        break;
 8007bd4:	e782      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x270>
    switch (PeriphClkInit->FdcanClockSelection)
 8007bd6:	2601      	movs	r6, #1
 8007bd8:	4634      	mov	r4, r6
 8007bda:	e788      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007bdc:	4626      	mov	r6, r4
 8007bde:	e786      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x282>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be0:	4a6a      	ldr	r2, [pc, #424]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007be2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	d165      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x44e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bee:	4a67      	ldr	r2, [pc, #412]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007bf0:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8007bf2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	025f      	lsls	r7, r3, #9
 8007c00:	d539      	bpl.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c02:	4f63      	ldr	r7, [pc, #396]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c0a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007c0c:	f7fd f95e 	bl	8004ecc <HAL_GetTick>
 8007c10:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	05d8      	lsls	r0, r3, #23
 8007c16:	d552      	bpl.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    if (ret == HAL_OK)
 8007c18:	2c00      	cmp	r4, #0
 8007c1a:	d16e      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x48e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007c1e:	f8d5 00b0 	ldr.w	r0, [r5, #176]	@ 0xb0
 8007c22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c24:	4042      	eors	r2, r0
 8007c26:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8007c2a:	d00b      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c30:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c34:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8007c38:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c3a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c3c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007c40:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8007c42:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c44:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8007c48:	d042      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c4a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8007c4e:	494f      	ldr	r1, [pc, #316]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007c50:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007c54:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007c58:	d14b      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007c5a:	6908      	ldr	r0, [r1, #16]
 8007c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8007c5e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8007c62:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007c66:	4302      	orrs	r2, r0
 8007c68:	610a      	str	r2, [r1, #16]
 8007c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c6e:	4a47      	ldr	r2, [pc, #284]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007c70:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007c72:	430b      	orrs	r3, r1
 8007c74:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	07da      	lsls	r2, r3, #31
 8007c7a:	d509      	bpl.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c7c:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d053      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007c82:	d83c      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x492>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d040      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d047      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007c8c:	2601      	movs	r6, #1
 8007c8e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	079b      	lsls	r3, r3, #30
 8007c94:	d55f      	bpl.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c96:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007c98:	2b05      	cmp	r3, #5
 8007c9a:	d872      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007c9c:	e8df f003 	tbb	[pc, r3]
 8007ca0:	536b4d53 	.word	0x536b4d53
 8007ca4:	5353      	.short	0x5353
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	f105 0008 	add.w	r0, r5, #8
 8007cac:	f7ff fcee 	bl	800768c <RCCEx_PLL2_Config>
 8007cb0:	4604      	mov	r4, r0
        break;
 8007cb2:	e79a      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch (PeriphClkInit->FmcClockSelection)
 8007cb4:	2601      	movs	r6, #1
 8007cb6:	4634      	mov	r4, r6
 8007cb8:	e7a0      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x390>
 8007cba:	4626      	mov	r6, r4
 8007cbc:	e79e      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x390>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cbe:	f7fd f905 	bl	8004ecc <HAL_GetTick>
 8007cc2:	eba0 0008 	sub.w	r0, r0, r8
 8007cc6:	2864      	cmp	r0, #100	@ 0x64
 8007cc8:	d9a3      	bls.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        ret = HAL_TIMEOUT;
 8007cca:	2603      	movs	r6, #3
 8007ccc:	4634      	mov	r4, r6
 8007cce:	e7d2      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
        tickstart = HAL_GetTick();
 8007cd0:	f7fd f8fc 	bl	8004ecc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cd4:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>
        tickstart = HAL_GetTick();
 8007cd8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cda:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cde:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8007ce2:	0799      	lsls	r1, r3, #30
 8007ce4:	d4b1      	bmi.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce6:	f7fd f8f1 	bl	8004ecc <HAL_GetTick>
 8007cea:	1bc0      	subs	r0, r0, r7
 8007cec:	4548      	cmp	r0, r9
 8007cee:	d9f6      	bls.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x472>
 8007cf0:	e7eb      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x45e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cf2:	690a      	ldr	r2, [r1, #16]
 8007cf4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007cf8:	e7b6      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007cfa:	4626      	mov	r6, r4
 8007cfc:	e7bb      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007cfe:	f023 0208 	bic.w	r2, r3, #8
 8007d02:	2a20      	cmp	r2, #32
 8007d04:	d001      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8007d06:	2b18      	cmp	r3, #24
 8007d08:	d1c0      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x420>
    if (ret == HAL_OK)
 8007d0a:	b9a4      	cbnz	r4, 8007d36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007d0e:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8007d10:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007d12:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8007d16:	430b      	orrs	r3, r1
 8007d18:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d1a:	e7b9      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x424>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	f105 0008 	add.w	r0, r5, #8
 8007d22:	f7ff fcb3 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d26:	4604      	mov	r4, r0
        break;
 8007d28:	e7ef      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007d30:	f7ff fd24 	bl	800777c <RCCEx_PLL3_Config>
 8007d34:	e7f7      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007d36:	4626      	mov	r6, r4
 8007d38:	e7aa      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x424>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	f105 0008 	add.w	r0, r5, #8
 8007d40:	f7ff fca4 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d44:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8007d46:	b9fc      	cbnz	r4, 8007d88 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d48:	4a10      	ldr	r2, [pc, #64]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007d4a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8007d4c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d56:	682b      	ldr	r3, [r5, #0]
 8007d58:	075f      	lsls	r7, r3, #29
 8007d5a:	d52e      	bpl.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d5c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	f200 8166 	bhi.w	8008032 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8007d66:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007d6a:	001d      	.short	0x001d
 8007d6c:	015e0017 	.word	0x015e0017
 8007d70:	001d001d 	.word	0x001d001d
 8007d74:	001d      	.short	0x001d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d76:	2101      	movs	r1, #1
 8007d78:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007d7c:	f7ff fcfe 	bl	800777c <RCCEx_PLL3_Config>
 8007d80:	e7e0      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d82:	2601      	movs	r6, #1
 8007d84:	4634      	mov	r4, r6
 8007d86:	e7e6      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007d88:	4626      	mov	r6, r4
 8007d8a:	e7e4      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007d8c:	58024400 	.word	0x58024400
 8007d90:	58024800 	.word	0x58024800
 8007d94:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d98:	2101      	movs	r1, #1
 8007d9a:	f105 0008 	add.w	r0, r5, #8
 8007d9e:	f7ff fc75 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	f040 8147 	bne.w	8008038 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007daa:	4aa4      	ldr	r2, [pc, #656]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007dac:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8007db0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	430b      	orrs	r3, r1
 8007db8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	0698      	lsls	r0, r3, #26
 8007dbe:	d510      	bpl.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007dc0:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8007dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc8:	f000 8154 	beq.w	8008074 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8007dcc:	f200 8138 	bhi.w	8008040 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 813e 	beq.w	8008052 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8007dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dda:	f000 8144 	beq.w	8008066 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 8007dde:	2601      	movs	r6, #1
 8007de0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	0659      	lsls	r1, r3, #25
 8007de6:	d510      	bpl.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007de8:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007df0:	f000 8162 	beq.w	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007df4:	f200 8146 	bhi.w	8008084 <HAL_RCCEx_PeriphCLKConfig+0x818>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 814c 	beq.w	8008096 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8007dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e02:	f000 8152 	beq.w	80080aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007e06:	2601      	movs	r6, #1
 8007e08:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	061a      	lsls	r2, r3, #24
 8007e0e:	d510      	bpl.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e10:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8007e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e18:	f000 8170 	beq.w	80080fc <HAL_RCCEx_PeriphCLKConfig+0x890>
 8007e1c:	f200 8154 	bhi.w	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 815a 	beq.w	80080da <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8007e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2a:	f000 8160 	beq.w	80080ee <HAL_RCCEx_PeriphCLKConfig+0x882>
 8007e2e:	2601      	movs	r6, #1
 8007e30:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	071b      	lsls	r3, r3, #28
 8007e36:	d514      	bpl.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007e38:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8007e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e40:	d107      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e42:	2102      	movs	r1, #2
 8007e44:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007e48:	f7ff fc98 	bl	800777c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	bf18      	it	ne
 8007e50:	2601      	movne	r6, #1
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007e52:	4a7a      	ldr	r2, [pc, #488]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007e54:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 8007e58:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007e5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	06df      	lsls	r7, r3, #27
 8007e66:	d514      	bpl.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x626>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e68:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e70:	d107      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x616>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e72:	2102      	movs	r1, #2
 8007e74:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007e78:	f7ff fc80 	bl	800777c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	bf18      	it	ne
 8007e80:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e82:	4a6e      	ldr	r2, [pc, #440]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007e84:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8007e88:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	0318      	lsls	r0, r3, #12
 8007e96:	d51b      	bpl.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    switch (PeriphClkInit->AdcClockSelection)
 8007e98:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8007e9c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007ea0:	f000 8134 	beq.w	800810c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8007ea4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8007ea8:	d007      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	f040 8134 	bne.w	8008118 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb0:	f105 0008 	add.w	r0, r5, #8
 8007eb4:	f7ff fbea 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eb8:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	f040 812f 	bne.w	800811e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007ec2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8007ec6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007ec8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	0359      	lsls	r1, r3, #13
 8007ed4:	d50f      	bpl.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->UsbClockSelection)
 8007ed6:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8007eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ede:	f000 812f 	beq.w	8008140 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8007ee2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ee6:	f000 8121 	beq.w	800812c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eee:	f000 8118 	beq.w	8008122 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8007ef2:	2601      	movs	r6, #1
 8007ef4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	03da      	lsls	r2, r3, #15
 8007efa:	d509      	bpl.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007efc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8127 	beq.w	8008152 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f08:	f000 8131 	beq.w	800816e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007f0c:	2601      	movs	r6, #1
 8007f0e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	d507      	bpl.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f16:	2102      	movs	r1, #2
 8007f18:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007f1c:	f7ff fc2e 	bl	800777c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8007f20:	2800      	cmp	r0, #0
 8007f22:	bf18      	it	ne
 8007f24:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f26:	e9d5 3100 	ldrd	r3, r1, [r5]
 8007f2a:	039f      	lsls	r7, r3, #14
 8007f2c:	f140 8137 	bpl.w	800819e <HAL_RCCEx_PeriphCLKConfig+0x932>
    switch (PeriphClkInit->RngClockSelection)
 8007f30:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8007f32:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8007f36:	f000 8134 	beq.w	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8007f3a:	f200 8121 	bhi.w	8008180 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f000 8124 	beq.w	800818c <HAL_RCCEx_PeriphCLKConfig+0x920>
 8007f44:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f46:	02de      	lsls	r6, r3, #11
 8007f48:	d506      	bpl.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f4a:	483c      	ldr	r0, [pc, #240]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007f4c:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 8007f4e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007f50:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007f54:	4332      	orrs	r2, r6
 8007f56:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f58:	0298      	lsls	r0, r3, #10
 8007f5a:	d506      	bpl.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f5c:	4837      	ldr	r0, [pc, #220]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007f5e:	6eae      	ldr	r6, [r5, #104]	@ 0x68
 8007f60:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007f62:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007f66:	4332      	orrs	r2, r6
 8007f68:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f6a:	005a      	lsls	r2, r3, #1
 8007f6c:	d509      	bpl.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x716>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f6e:	4a33      	ldr	r2, [pc, #204]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007f70:	6910      	ldr	r0, [r2, #16]
 8007f72:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8007f76:	6110      	str	r0, [r2, #16]
 8007f78:	6910      	ldr	r0, [r2, #16]
 8007f7a:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8007f7e:	4330      	orrs	r0, r6
 8007f80:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da06      	bge.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f86:	482d      	ldr	r0, [pc, #180]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007f88:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8007f8a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8007f8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007f90:	4332      	orrs	r2, r6
 8007f92:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f94:	021f      	lsls	r7, r3, #8
 8007f96:	d507      	bpl.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f98:	4a28      	ldr	r2, [pc, #160]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 8007f9a:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8007f9e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007fa0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007fa4:	4303      	orrs	r3, r0
 8007fa6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007fa8:	07ce      	lsls	r6, r1, #31
 8007faa:	d506      	bpl.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x74e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fac:	2100      	movs	r1, #0
 8007fae:	f105 0008 	add.w	r0, r5, #8
 8007fb2:	f7ff fb6b 	bl	800768c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	b900      	cbnz	r0, 8007fbc <HAL_RCCEx_PeriphCLKConfig+0x750>
    switch (PeriphClkInit->RngClockSelection)
 8007fba:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007fbc:	686b      	ldr	r3, [r5, #4]
 8007fbe:	079c      	lsls	r4, r3, #30
 8007fc0:	d506      	bpl.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x764>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	f105 0008 	add.w	r0, r5, #8
 8007fc8:	f7ff fb60 	bl	800768c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007fcc:	4606      	mov	r6, r0
 8007fce:	b900      	cbnz	r0, 8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch (PeriphClkInit->RngClockSelection)
 8007fd0:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fd2:	686b      	ldr	r3, [r5, #4]
 8007fd4:	0758      	lsls	r0, r3, #29
 8007fd6:	d506      	bpl.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fd8:	2102      	movs	r1, #2
 8007fda:	f105 0008 	add.w	r0, r5, #8
 8007fde:	f7ff fb55 	bl	800768c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	b900      	cbnz	r0, 8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (PeriphClkInit->RngClockSelection)
 8007fe6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fe8:	686b      	ldr	r3, [r5, #4]
 8007fea:	0719      	lsls	r1, r3, #28
 8007fec:	d506      	bpl.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x790>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fee:	2100      	movs	r1, #0
 8007ff0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8007ff4:	f7ff fbc2 	bl	800777c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	b900      	cbnz	r0, 8007ffe <HAL_RCCEx_PeriphCLKConfig+0x792>
    switch (PeriphClkInit->RngClockSelection)
 8007ffc:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ffe:	686b      	ldr	r3, [r5, #4]
 8008000:	06da      	lsls	r2, r3, #27
 8008002:	d506      	bpl.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008004:	2101      	movs	r1, #1
 8008006:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800800a:	f7ff fbb7 	bl	800777c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800800e:	4604      	mov	r4, r0
 8008010:	b900      	cbnz	r0, 8008014 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 8008012:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008014:	686b      	ldr	r3, [r5, #4]
 8008016:	069b      	lsls	r3, r3, #26
 8008018:	f100 80c9 	bmi.w	80081ae <HAL_RCCEx_PeriphCLKConfig+0x942>
  if (status == HAL_OK)
 800801c:	1e20      	subs	r0, r4, #0
 800801e:	bf18      	it	ne
 8008020:	2001      	movne	r0, #1
}
 8008022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008026:	2101      	movs	r1, #1
 8008028:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800802c:	f7ff fba6 	bl	800777c <RCCEx_PLL3_Config>
 8008030:	e6b7      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008032:	2601      	movs	r6, #1
 8008034:	4634      	mov	r4, r6
 8008036:	e6c0      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8008038:	4626      	mov	r6, r4
 800803a:	e6be      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800803c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008040:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008044:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008048:	d003      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800804a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800804e:	f47f aec6 	bne.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0x572>
    if (ret == HAL_OK)
 8008052:	b9ac      	cbnz	r4, 8008080 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008054:	4a5b      	ldr	r2, [pc, #364]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008056:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800805a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800805c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8008060:	430b      	orrs	r3, r1
 8008062:	6553      	str	r3, [r2, #84]	@ 0x54
 8008064:	e6bd      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x576>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008066:	2100      	movs	r1, #0
 8008068:	f105 0008 	add.w	r0, r5, #8
 800806c:	f7ff fb0e 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008070:	4604      	mov	r4, r0
        break;
 8008072:	e7ee      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008074:	2102      	movs	r1, #2
 8008076:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800807a:	f7ff fb7f 	bl	800777c <RCCEx_PLL3_Config>
 800807e:	e7f7      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8008080:	4626      	mov	r6, r4
 8008082:	e6ae      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008084:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008088:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800808c:	d003      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800808e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008092:	f47f aeb8 	bne.w	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    if (ret == HAL_OK)
 8008096:	b9ac      	cbnz	r4, 80080c4 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008098:	4a4a      	ldr	r2, [pc, #296]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800809a:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800809e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80080a0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80080a4:	430b      	orrs	r3, r1
 80080a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80080a8:	e6af      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080aa:	2100      	movs	r1, #0
 80080ac:	f105 0008 	add.w	r0, r5, #8
 80080b0:	f7ff faec 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b4:	4604      	mov	r4, r0
        break;
 80080b6:	e7ee      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x82a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b8:	2102      	movs	r1, #2
 80080ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80080be:	f7ff fb5d 	bl	800777c <RCCEx_PLL3_Config>
 80080c2:	e7f7      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80080c4:	4626      	mov	r6, r4
 80080c6:	e6a0      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80080c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80080cc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80080d0:	d003      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x86e>
 80080d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080d6:	f47f aeaa 	bne.w	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if (ret == HAL_OK)
 80080da:	b9ac      	cbnz	r4, 8008108 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080dc:	4a39      	ldr	r2, [pc, #228]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80080de:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 80080e2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80080e4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ec:	e6a1      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ee:	2100      	movs	r1, #0
 80080f0:	f105 0008 	add.w	r0, r5, #8
 80080f4:	f7ff faca 	bl	800768c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f8:	4604      	mov	r4, r0
        break;
 80080fa:	e7ee      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x86e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080fc:	2102      	movs	r1, #2
 80080fe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008102:	f7ff fb3b 	bl	800777c <RCCEx_PLL3_Config>
 8008106:	e7f7      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008108:	4626      	mov	r6, r4
 800810a:	e692      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800810c:	2102      	movs	r1, #2
 800810e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008112:	f7ff fb33 	bl	800777c <RCCEx_PLL3_Config>
 8008116:	e6cf      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    switch (PeriphClkInit->AdcClockSelection)
 8008118:	2601      	movs	r6, #1
 800811a:	4634      	mov	r4, r6
 800811c:	e6d8      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800811e:	4626      	mov	r6, r4
 8008120:	e6d6      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008122:	4a28      	ldr	r2, [pc, #160]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008124:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800812a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800812c:	b97c      	cbnz	r4, 800814e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800812e:	4a25      	ldr	r2, [pc, #148]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008130:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8008134:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008136:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800813a:	430b      	orrs	r3, r1
 800813c:	6553      	str	r3, [r2, #84]	@ 0x54
 800813e:	e6da      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008140:	2101      	movs	r1, #1
 8008142:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8008146:	f7ff fb19 	bl	800777c <RCCEx_PLL3_Config>
 800814a:	4604      	mov	r4, r0
        break;
 800814c:	e7ee      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800814e:	4626      	mov	r6, r4
 8008150:	e6d1      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008152:	4a1c      	ldr	r2, [pc, #112]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008154:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800815c:	b974      	cbnz	r4, 800817c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800815e:	4a19      	ldr	r2, [pc, #100]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008160:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8008162:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008168:	430b      	orrs	r3, r1
 800816a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800816c:	e6d0      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800816e:	2102      	movs	r1, #2
 8008170:	f105 0008 	add.w	r0, r5, #8
 8008174:	f7ff fa8a 	bl	800768c <RCCEx_PLL2_Config>
 8008178:	4604      	mov	r4, r0
        break;
 800817a:	e7ef      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800817c:	4626      	mov	r6, r4
 800817e:	e6c7      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->RngClockSelection)
 8008180:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8008184:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8008188:	f47f aedc 	bne.w	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if (ret == HAL_OK)
 800818c:	2c00      	cmp	r4, #0
 800818e:	f47f aeda 	bne.w	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008192:	4c0c      	ldr	r4, [pc, #48]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008194:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008196:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800819a:	4302      	orrs	r2, r0
 800819c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800819e:	4634      	mov	r4, r6
 80081a0:	e6d1      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081a2:	4f08      	ldr	r7, [pc, #32]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80081aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 80081ac:	e7ee      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x920>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ae:	2102      	movs	r1, #2
 80081b0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80081b4:	f7ff fae2 	bl	800777c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80081b8:	2800      	cmp	r0, #0
 80081ba:	f43f af2f 	beq.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  return HAL_ERROR;
 80081be:	2001      	movs	r0, #1
 80081c0:	e72f      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400

080081c8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d13b      	bne.n	800824c <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	2302      	movs	r3, #2
 80081d6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081da:	6803      	ldr	r3, [r0, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	f042 0201 	orr.w	r2, r2, #1
 80081e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008250 <HAL_TIM_Base_Start_IT+0x84>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d022      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 80081ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ee:	d01f      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 80081f0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d01b      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 80081f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d017      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 8008200:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 8008208:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 8008210:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 8008218:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 8008220:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x64>
 8008228:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800822c:	4293      	cmp	r3, r2
 800822e:	d107      	bne.n	8008240 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008230:	6899      	ldr	r1, [r3, #8]
 8008232:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <HAL_TIM_Base_Start_IT+0x88>)
 8008234:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008236:	2a06      	cmp	r2, #6
 8008238:	d006      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x7c>
 800823a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800823e:	d003      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8008248:	2000      	movs	r0, #0
 800824a:	4770      	bx	lr
    return HAL_ERROR;
 800824c:	2001      	movs	r0, #1
}
 800824e:	4770      	bx	lr
 8008250:	40010000 	.word	0x40010000
 8008254:	00010007 	.word	0x00010007

08008258 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8008258:	4770      	bx	lr

0800825a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800825c:	4770      	bx	lr

0800825e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8008260:	6803      	ldr	r3, [r0, #0]
{
 8008262:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8008264:	68dd      	ldr	r5, [r3, #12]
{
 8008266:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8008268:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800826a:	07b2      	lsls	r2, r6, #30
 800826c:	d50d      	bpl.n	800828a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800826e:	07a9      	lsls	r1, r5, #30
 8008270:	d50b      	bpl.n	800828a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008272:	f06f 0202 	mvn.w	r2, #2
 8008276:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008278:	2201      	movs	r2, #1
 800827a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	079a      	lsls	r2, r3, #30
 8008280:	d075      	beq.n	800836e <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008282:	f7ff ffea 	bl	800825a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008286:	2300      	movs	r3, #0
 8008288:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800828a:	0773      	lsls	r3, r6, #29
 800828c:	d510      	bpl.n	80082b0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800828e:	0768      	lsls	r0, r5, #29
 8008290:	d50e      	bpl.n	80082b0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8008298:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800829a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800829c:	2202      	movs	r2, #2
 800829e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80082a6:	d068      	beq.n	800837a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80082a8:	f7ff ffd7 	bl	800825a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ac:	2300      	movs	r3, #0
 80082ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082b0:	0731      	lsls	r1, r6, #28
 80082b2:	d50f      	bpl.n	80082d4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082b4:	072a      	lsls	r2, r5, #28
 80082b6:	d50d      	bpl.n	80082d4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80082be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082c2:	2204      	movs	r2, #4
 80082c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	079b      	lsls	r3, r3, #30
 80082ca:	d05c      	beq.n	8008386 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80082cc:	f7ff ffc5 	bl	800825a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d0:	2300      	movs	r3, #0
 80082d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082d4:	06f1      	lsls	r1, r6, #27
 80082d6:	d510      	bpl.n	80082fa <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082d8:	06ea      	lsls	r2, r5, #27
 80082da:	d50e      	bpl.n	80082fa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80082e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e6:	2208      	movs	r2, #8
 80082e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80082f0:	d04f      	beq.n	8008392 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 80082f2:	f7ff ffb2 	bl	800825a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f6:	2300      	movs	r3, #0
 80082f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082fa:	07f3      	lsls	r3, r6, #31
 80082fc:	d508      	bpl.n	8008310 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082fe:	07e8      	lsls	r0, r5, #31
 8008300:	d506      	bpl.n	8008310 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8008308:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800830a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800830c:	f7f8 fd1c 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008310:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8008314:	d008      	beq.n	8008328 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008316:	0629      	lsls	r1, r5, #24
 8008318:	d506      	bpl.n	8008328 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8008320:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008322:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008324:	f000 f8e1 	bl	80084ea <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008328:	05f2      	lsls	r2, r6, #23
 800832a:	d508      	bpl.n	800833e <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800832c:	062b      	lsls	r3, r5, #24
 800832e:	d506      	bpl.n	800833e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8008336:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008338:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800833a:	f000 f8d7 	bl	80084ec <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800833e:	0670      	lsls	r0, r6, #25
 8008340:	d508      	bpl.n	8008354 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008342:	0669      	lsls	r1, r5, #25
 8008344:	d506      	bpl.n	8008354 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800834c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800834e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008350:	f7ff ff85 	bl	800825e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008354:	06b2      	lsls	r2, r6, #26
 8008356:	d522      	bpl.n	800839e <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008358:	06ab      	lsls	r3, r5, #26
 800835a:	d520      	bpl.n	800839e <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008362:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008364:	611a      	str	r2, [r3, #16]
}
 8008366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800836a:	f000 b8bd 	b.w	80084e8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800836e:	f7ff ff73 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff ff72 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 8008378:	e785      	b.n	8008286 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	f7ff ff6d 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff ff6c 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 8008384:	e792      	b.n	80082ac <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	f7ff ff67 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ff66 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 8008390:	e79e      	b.n	80082d0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008392:	f7ff ff61 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008396:	4620      	mov	r0, r4
 8008398:	f7ff ff60 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 800839c:	e7ab      	b.n	80082f6 <HAL_TIM_IRQHandler+0x96>
}
 800839e:	bd70      	pop	{r4, r5, r6, pc}

080083a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a0:	4a37      	ldr	r2, [pc, #220]	@ (8008480 <TIM_Base_SetConfig+0xe0>)
  tmpcr1 = TIMx->CR1;
 80083a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a4:	4290      	cmp	r0, r2
 80083a6:	d012      	beq.n	80083ce <TIM_Base_SetConfig+0x2e>
 80083a8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80083ac:	d00f      	beq.n	80083ce <TIM_Base_SetConfig+0x2e>
 80083ae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80083b2:	4290      	cmp	r0, r2
 80083b4:	d00b      	beq.n	80083ce <TIM_Base_SetConfig+0x2e>
 80083b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083ba:	4290      	cmp	r0, r2
 80083bc:	d007      	beq.n	80083ce <TIM_Base_SetConfig+0x2e>
 80083be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083c2:	4290      	cmp	r0, r2
 80083c4:	d003      	beq.n	80083ce <TIM_Base_SetConfig+0x2e>
 80083c6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80083ca:	4290      	cmp	r0, r2
 80083cc:	d119      	bne.n	8008402 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80083ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80083d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <TIM_Base_SetConfig+0xe0>)
 80083d8:	4290      	cmp	r0, r2
 80083da:	d025      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 80083dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80083e0:	d022      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 80083e2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80083e6:	4290      	cmp	r0, r2
 80083e8:	d01e      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 80083ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083ee:	4290      	cmp	r0, r2
 80083f0:	d01a      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 80083f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083f6:	4290      	cmp	r0, r2
 80083f8:	d016      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 80083fa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80083fe:	4290      	cmp	r0, r2
 8008400:	d012      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 8008402:	4a20      	ldr	r2, [pc, #128]	@ (8008484 <TIM_Base_SetConfig+0xe4>)
 8008404:	4290      	cmp	r0, r2
 8008406:	d00f      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 8008408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800840c:	4290      	cmp	r0, r2
 800840e:	d00b      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 8008410:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008414:	4290      	cmp	r0, r2
 8008416:	d007      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 8008418:	f5a2 42d0 	sub.w	r2, r2, #26624	@ 0x6800
 800841c:	4290      	cmp	r0, r2
 800841e:	d003      	beq.n	8008428 <TIM_Base_SetConfig+0x88>
 8008420:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008424:	4290      	cmp	r0, r2
 8008426:	d103      	bne.n	8008430 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800842c:	68ca      	ldr	r2, [r1, #12]
 800842e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008430:	694a      	ldr	r2, [r1, #20]
 8008432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008436:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008438:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800843a:	688b      	ldr	r3, [r1, #8]
 800843c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800843e:	680b      	ldr	r3, [r1, #0]
 8008440:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008442:	4b0f      	ldr	r3, [pc, #60]	@ (8008480 <TIM_Base_SetConfig+0xe0>)
 8008444:	4298      	cmp	r0, r3
 8008446:	d00f      	beq.n	8008468 <TIM_Base_SetConfig+0xc8>
 8008448:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800844c:	4298      	cmp	r0, r3
 800844e:	d00b      	beq.n	8008468 <TIM_Base_SetConfig+0xc8>
 8008450:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8008454:	4298      	cmp	r0, r3
 8008456:	d007      	beq.n	8008468 <TIM_Base_SetConfig+0xc8>
 8008458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800845c:	4298      	cmp	r0, r3
 800845e:	d003      	beq.n	8008468 <TIM_Base_SetConfig+0xc8>
 8008460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008464:	4298      	cmp	r0, r3
 8008466:	d101      	bne.n	800846c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008468:	690b      	ldr	r3, [r1, #16]
 800846a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800846c:	2301      	movs	r3, #1
 800846e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008470:	6903      	ldr	r3, [r0, #16]
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	d503      	bpl.n	800847e <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008476:	6903      	ldr	r3, [r0, #16]
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	6103      	str	r3, [r0, #16]
  }
}
 800847e:	4770      	bx	lr
 8008480:	40010000 	.word	0x40010000
 8008484:	40014000 	.word	0x40014000

08008488 <HAL_TIM_Base_Init>:
{
 8008488:	b510      	push	{r4, lr}
  if (htim == NULL)
 800848a:	4604      	mov	r4, r0
 800848c:	b350      	cbz	r0, 80084e4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800848e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008492:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008496:	b91b      	cbnz	r3, 80084a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008498:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800849c:	f7ff fe94 	bl	80081c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80084a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084a2:	6820      	ldr	r0, [r4, #0]
 80084a4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80084a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084aa:	f7ff ff79 	bl	80083a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ae:	2301      	movs	r3, #1
  return HAL_OK;
 80084b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80084ba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80084be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80084c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80084c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80084d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80084d6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80084da:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80084de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80084e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80084e4:	2001      	movs	r0, #1
 80084e6:	e7fc      	b.n	80084e2 <HAL_TIM_Base_Init+0x5a>

080084e8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80084e8:	4770      	bx	lr

080084ea <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80084ea:	4770      	bx	lr

080084ec <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80084ec:	4770      	bx	lr

080084ee <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084ee:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80084f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084f4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084f6:	f001 ff2f 	bl	800a358 <xTaskGetSchedulerState>
 80084fa:	2801      	cmp	r0, #1
 80084fc:	d003      	beq.n	8008506 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80084fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8008502:	f000 bc57 	b.w	8008db4 <xPortSysTickHandler>
}
 8008506:	bd08      	pop	{r3, pc}

08008508 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008508:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800850c:	b92b      	cbnz	r3, 800851a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800850e:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <osKernelInitialize+0x20>)
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	b928      	cbnz	r0, 8008520 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008514:	2201      	movs	r2, #1
 8008516:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008518:	4770      	bx	lr
    stat = osErrorISR;
 800851a:	f06f 0005 	mvn.w	r0, #5
 800851e:	4770      	bx	lr
    } else {
      stat = osError;
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	240030b0 	.word	0x240030b0

0800852c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800852c:	b510      	push	{r4, lr}
 800852e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008532:	b95c      	cbnz	r4, 800854c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008534:	4b08      	ldr	r3, [pc, #32]	@ (8008558 <osKernelStart+0x2c>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	2a01      	cmp	r2, #1
 800853a:	d10a      	bne.n	8008552 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800853c:	4a07      	ldr	r2, [pc, #28]	@ (800855c <osKernelStart+0x30>)
 800853e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008540:	2202      	movs	r2, #2
 8008542:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008544:	f001 fd9e 	bl	800a084 <vTaskStartScheduler>
      stat = osOK;
 8008548:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800854a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800854c:	f06f 0005 	mvn.w	r0, #5
 8008550:	e7fb      	b.n	800854a <osKernelStart+0x1e>
      stat = osError;
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008556:	e7f8      	b.n	800854a <osKernelStart+0x1e>
 8008558:	240030b0 	.word	0x240030b0
 800855c:	e000ed00 	.word	0xe000ed00

08008560 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	4614      	mov	r4, r2
 8008564:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008566:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008568:	460b      	mov	r3, r1
  hTask = NULL;
 800856a:	9205      	str	r2, [sp, #20]
 800856c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008570:	b9ca      	cbnz	r2, 80085a6 <osThreadNew+0x46>
 8008572:	b1c0      	cbz	r0, 80085a6 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008574:	b36c      	cbz	r4, 80085d2 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008576:	69a5      	ldr	r5, [r4, #24]
 8008578:	2d00      	cmp	r5, #0
 800857a:	bf08      	it	eq
 800857c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800857e:	1e69      	subs	r1, r5, #1
 8008580:	46ac      	mov	ip, r5
 8008582:	2937      	cmp	r1, #55	@ 0x37
 8008584:	d82a      	bhi.n	80085dc <osThreadNew+0x7c>
 8008586:	6861      	ldr	r1, [r4, #4]
 8008588:	07c9      	lsls	r1, r1, #31
 800858a:	d427      	bmi.n	80085dc <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800858c:	6966      	ldr	r6, [r4, #20]
 800858e:	b16e      	cbz	r6, 80085ac <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008590:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8008592:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008594:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008598:	b157      	cbz	r7, 80085b0 <osThreadNew+0x50>
 800859a:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800859e:	d902      	bls.n	80085a6 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085a0:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085a2:	b104      	cbz	r4, 80085a6 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085a4:	b9e6      	cbnz	r6, 80085e0 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085a6:	9805      	ldr	r0, [sp, #20]
}
 80085a8:	b007      	add	sp, #28
 80085aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80085ac:	2280      	movs	r2, #128	@ 0x80
 80085ae:	e7f0      	b.n	8008592 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085b0:	f1be 0f00 	cmp.w	lr, #0
 80085b4:	d1f7      	bne.n	80085a6 <osThreadNew+0x46>
      if (mem == 0) {
 80085b6:	6924      	ldr	r4, [r4, #16]
 80085b8:	2c00      	cmp	r4, #0
 80085ba:	d1f4      	bne.n	80085a6 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085bc:	ac05      	add	r4, sp, #20
 80085be:	b292      	uxth	r2, r2
 80085c0:	e9cd c400 	strd	ip, r4, [sp]
 80085c4:	f001 fbd8 	bl	8009d78 <xTaskCreate>
 80085c8:	2801      	cmp	r0, #1
            hTask = NULL;
 80085ca:	bf1c      	itt	ne
 80085cc:	2300      	movne	r3, #0
 80085ce:	9305      	strne	r3, [sp, #20]
 80085d0:	e7e9      	b.n	80085a6 <osThreadNew+0x46>
    name = NULL;
 80085d2:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 80085d4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80085d8:	2280      	movs	r2, #128	@ 0x80
 80085da:	e7ef      	b.n	80085bc <osThreadNew+0x5c>
        return (NULL);
 80085dc:	4610      	mov	r0, r2
 80085de:	e7e3      	b.n	80085a8 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085e0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80085e4:	9500      	str	r5, [sp, #0]
 80085e6:	f001 fb8f 	bl	8009d08 <xTaskCreateStatic>
 80085ea:	9005      	str	r0, [sp, #20]
 80085ec:	e7db      	b.n	80085a6 <osThreadNew+0x46>

080085ee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085ee:	b508      	push	{r3, lr}
 80085f0:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80085f4:	b922      	cbnz	r2, 8008600 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80085f6:	b108      	cbz	r0, 80085fc <osDelay+0xe>
      vTaskDelay(ticks);
 80085f8:	f001 fd04 	bl	800a004 <vTaskDelay>
    stat = osOK;
 80085fc:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80085fe:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8008600:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8008604:	e7fb      	b.n	80085fe <osDelay+0x10>

08008606 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008606:	b570      	push	{r4, r5, r6, lr}
 8008608:	4605      	mov	r5, r0
 800860a:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800860e:	b116      	cbz	r6, 8008616 <osMutexNew+0x10>
  hMutex = NULL;
 8008610:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8008612:	4620      	mov	r0, r4
 8008614:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 8008616:	b110      	cbz	r0, 800861e <osMutexNew+0x18>
      type = attr->attr_bits;
 8008618:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800861a:	0733      	lsls	r3, r6, #28
 800861c:	d4f8      	bmi.n	8008610 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800861e:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8008622:	b17d      	cbz	r5, 8008644 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008624:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008628:	b151      	cbz	r1, 8008640 <osMutexNew+0x3a>
 800862a:	2b4f      	cmp	r3, #79	@ 0x4f
 800862c:	d9f0      	bls.n	8008610 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800862e:	b1de      	cbz	r6, 8008668 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008630:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008632:	f000 fec8 	bl	80093c6 <xQueueCreateMutexStatic>
 8008636:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008638:	2800      	cmp	r0, #0
 800863a:	d0e9      	beq.n	8008610 <osMutexNew+0xa>
          name = attr->name;
 800863c:	682d      	ldr	r5, [r5, #0]
 800863e:	e00a      	b.n	8008656 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <osMutexNew+0xa>
            if (rmtx != 0U) {
 8008644:	b196      	cbz	r6, 800866c <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008646:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 8008648:	f000 fef1 	bl	800942e <xQueueCreateMutex>
 800864c:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800864e:	2800      	cmp	r0, #0
 8008650:	d0de      	beq.n	8008610 <osMutexNew+0xa>
        if (attr != NULL) {
 8008652:	2d00      	cmp	r5, #0
 8008654:	d1f2      	bne.n	800863c <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 8008656:	4629      	mov	r1, r5
 8008658:	4620      	mov	r0, r4
 800865a:	f001 f97d 	bl	8009958 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800865e:	2e00      	cmp	r6, #0
 8008660:	d0d7      	beq.n	8008612 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008662:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8008666:	e7d4      	b.n	8008612 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008668:	2001      	movs	r0, #1
 800866a:	e7e2      	b.n	8008632 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800866c:	2001      	movs	r0, #1
 800866e:	e7eb      	b.n	8008648 <osMutexNew+0x42>

08008670 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4603      	mov	r3, r0
 8008674:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008676:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800867a:	f003 0201 	and.w	r2, r3, #1
 800867e:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008682:	b995      	cbnz	r5, 80086aa <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008684:	2b01      	cmp	r3, #1
 8008686:	d913      	bls.n	80086b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008688:	b162      	cbz	r2, 80086a4 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800868a:	f001 f8f6 	bl	800987a <xQueueTakeMutexRecursive>
 800868e:	2801      	cmp	r0, #1
 8008690:	d101      	bne.n	8008696 <osMutexAcquire+0x26>
  stat = osOK;
 8008692:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008694:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 8008696:	2c00      	cmp	r4, #0
 8008698:	bf14      	ite	ne
 800869a:	f06f 0001 	mvnne.w	r0, #1
 800869e:	f06f 0002 	mvneq.w	r0, #2
 80086a2:	e7f7      	b.n	8008694 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80086a4:	f001 f82c 	bl	8009700 <xQueueSemaphoreTake>
 80086a8:	e7f1      	b.n	800868e <osMutexAcquire+0x1e>
    stat = osErrorISR;
 80086aa:	f06f 0005 	mvn.w	r0, #5
 80086ae:	e7f1      	b.n	8008694 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 80086b0:	f06f 0003 	mvn.w	r0, #3
 80086b4:	e7ee      	b.n	8008694 <osMutexAcquire+0x24>

080086b6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80086b6:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80086b8:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80086bc:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 80086be:	f002 0301 	and.w	r3, r2, #1
 80086c2:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80086c6:	b979      	cbnz	r1, 80086e8 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80086c8:	2a01      	cmp	r2, #1
 80086ca:	d910      	bls.n	80086ee <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80086cc:	b13b      	cbz	r3, 80086de <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80086ce:	f000 fe8f 	bl	80093f0 <xQueueGiveMutexRecursive>
 80086d2:	2801      	cmp	r0, #1
  stat = osOK;
 80086d4:	bf0c      	ite	eq
 80086d6:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80086d8:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 80086dc:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80086de:	461a      	mov	r2, r3
 80086e0:	4619      	mov	r1, r3
 80086e2:	f000 fdbe 	bl	8009262 <xQueueGenericSend>
 80086e6:	e7f4      	b.n	80086d2 <osMutexRelease+0x1c>
    stat = osErrorISR;
 80086e8:	f06f 0005 	mvn.w	r0, #5
 80086ec:	e7f6      	b.n	80086dc <osMutexRelease+0x26>
    stat = osErrorParameter;
 80086ee:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80086f2:	e7f3      	b.n	80086dc <osMutexRelease+0x26>

080086f4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80086f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f6:	4604      	mov	r4, r0
 80086f8:	460e      	mov	r6, r1
 80086fa:	4615      	mov	r5, r2
 80086fc:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008700:	b942      	cbnz	r2, 8008714 <osSemaphoreNew+0x20>
 8008702:	b138      	cbz	r0, 8008714 <osSemaphoreNew+0x20>
 8008704:	4288      	cmp	r0, r1
 8008706:	d305      	bcc.n	8008714 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8008708:	b155      	cbz	r5, 8008720 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800870a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800870e:	b12b      	cbz	r3, 800871c <osSemaphoreNew+0x28>
 8008710:	2f4f      	cmp	r7, #79	@ 0x4f
 8008712:	d822      	bhi.n	800875a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8008714:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008716:	4620      	mov	r0, r4
 8008718:	b003      	add	sp, #12
 800871a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800871c:	2f00      	cmp	r7, #0
 800871e:	d1f9      	bne.n	8008714 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8008720:	2c01      	cmp	r4, #1
 8008722:	d00c      	beq.n	800873e <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008724:	4620      	mov	r0, r4
 8008726:	4631      	mov	r1, r6
 8008728:	f000 fd7d 	bl	8009226 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800872c:	4604      	mov	r4, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	d0f0      	beq.n	8008714 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8008732:	b985      	cbnz	r5, 8008756 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8008734:	4629      	mov	r1, r5
 8008736:	4620      	mov	r0, r4
 8008738:	f001 f90e 	bl	8009958 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800873c:	e7eb      	b.n	8008716 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800873e:	2203      	movs	r2, #3
 8008740:	2100      	movs	r1, #0
 8008742:	2001      	movs	r0, #1
 8008744:	f000 fd26 	bl	8009194 <xQueueGenericCreate>
 8008748:	e00e      	b.n	8008768 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800874a:	461a      	mov	r2, r3
 800874c:	f000 fd49 	bl	80091e2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8008750:	4604      	mov	r4, r0
 8008752:	2800      	cmp	r0, #0
 8008754:	d0de      	beq.n	8008714 <osSemaphoreNew+0x20>
          name = attr->name;
 8008756:	682d      	ldr	r5, [r5, #0]
 8008758:	e7ec      	b.n	8008734 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800875a:	2801      	cmp	r0, #1
 800875c:	d1f5      	bne.n	800874a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800875e:	2103      	movs	r1, #3
 8008760:	9100      	str	r1, [sp, #0]
 8008762:	4611      	mov	r1, r2
 8008764:	f000 fcc8 	bl	80090f8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8008768:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800876a:	2800      	cmp	r0, #0
 800876c:	d0d2      	beq.n	8008714 <osSemaphoreNew+0x20>
 800876e:	2e00      	cmp	r6, #0
 8008770:	d0df      	beq.n	8008732 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008772:	2300      	movs	r3, #0
 8008774:	461a      	mov	r2, r3
 8008776:	4619      	mov	r1, r3
 8008778:	f000 fd73 	bl	8009262 <xQueueGenericSend>
 800877c:	2801      	cmp	r0, #1
 800877e:	d0d8      	beq.n	8008732 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8008780:	4620      	mov	r0, r4
 8008782:	f001 f913 	bl	80099ac <vQueueDelete>
      if (hSemaphore != NULL) {
 8008786:	e7c5      	b.n	8008714 <osSemaphoreNew+0x20>

08008788 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008788:	b513      	push	{r0, r1, r4, lr}
 800878a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800878c:	b328      	cbz	r0, 80087da <osSemaphoreAcquire+0x52>
 800878e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008792:	b1cb      	cbz	r3, 80087c8 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8008794:	bb09      	cbnz	r1, 80087da <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008796:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008798:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800879a:	f001 f88f 	bl	80098bc <xQueueReceiveFromISR>
 800879e:	2801      	cmp	r0, #1
 80087a0:	d003      	beq.n	80087aa <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 80087a2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80087a6:	b002      	add	sp, #8
 80087a8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	b90b      	cbnz	r3, 80087b2 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 80087ae:	2000      	movs	r0, #0
 80087b0:	e7f9      	b.n	80087a6 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 80087b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	e7f2      	b.n	80087ae <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80087c8:	f000 ff9a 	bl	8009700 <xQueueSemaphoreTake>
 80087cc:	2801      	cmp	r0, #1
 80087ce:	d0ee      	beq.n	80087ae <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 80087d0:	2c00      	cmp	r4, #0
 80087d2:	d0e6      	beq.n	80087a2 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 80087d4:	f06f 0001 	mvn.w	r0, #1
 80087d8:	e7e5      	b.n	80087a6 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 80087da:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80087de:	e7e2      	b.n	80087a6 <osSemaphoreAcquire+0x1e>

080087e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80087e0:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80087e2:	b318      	cbz	r0, 800882c <osSemaphoreRelease+0x4c>
 80087e4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80087e8:	b1cb      	cbz	r3, 800881e <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 80087ea:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80087ec:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80087ee:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80087f0:	f000 fe97 	bl	8009522 <xQueueGiveFromISR>
 80087f4:	2801      	cmp	r0, #1
 80087f6:	d004      	beq.n	8008802 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80087f8:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 80087fc:	b003      	add	sp, #12
 80087fe:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8008802:	9b01      	ldr	r3, [sp, #4]
 8008804:	b14b      	cbz	r3, 800881a <osSemaphoreRelease+0x3a>
 8008806:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800880a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800881a:	2000      	movs	r0, #0
 800881c:	e7ee      	b.n	80087fc <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800881e:	461a      	mov	r2, r3
 8008820:	4619      	mov	r1, r3
 8008822:	f000 fd1e 	bl	8009262 <xQueueGenericSend>
 8008826:	2801      	cmp	r0, #1
 8008828:	d0f7      	beq.n	800881a <osSemaphoreRelease+0x3a>
 800882a:	e7e5      	b.n	80087f8 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800882c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008830:	e7e4      	b.n	80087fc <osSemaphoreRelease+0x1c>

08008832 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008834:	4605      	mov	r5, r0
 8008836:	460e      	mov	r6, r1
 8008838:	4614      	mov	r4, r2
 800883a:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800883e:	b11f      	cbz	r7, 8008848 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8008840:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008842:	4628      	mov	r0, r5
 8008844:	b003      	add	sp, #12
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008848:	2800      	cmp	r0, #0
 800884a:	d0f9      	beq.n	8008840 <osMessageQueueNew+0xe>
 800884c:	2900      	cmp	r1, #0
 800884e:	d0f7      	beq.n	8008840 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8008850:	b1da      	cbz	r2, 800888a <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008852:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8008856:	b183      	cbz	r3, 800887a <osMessageQueueNew+0x48>
 8008858:	2a4f      	cmp	r2, #79	@ 0x4f
 800885a:	d9f1      	bls.n	8008840 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800885c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800885e:	2a00      	cmp	r2, #0
 8008860:	d0ee      	beq.n	8008840 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008862:	434d      	muls	r5, r1
 8008864:	6966      	ldr	r6, [r4, #20]
 8008866:	42ae      	cmp	r6, r5
 8008868:	d3ea      	bcc.n	8008840 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800886a:	9700      	str	r7, [sp, #0]
 800886c:	f000 fc44 	bl	80090f8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008870:	4605      	mov	r5, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d0e4      	beq.n	8008840 <osMessageQueueNew+0xe>
        name = attr->name;
 8008876:	6824      	ldr	r4, [r4, #0]
 8008878:	e011      	b.n	800889e <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800887a:	2a00      	cmp	r2, #0
 800887c:	d1e0      	bne.n	8008840 <osMessageQueueNew+0xe>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1dd      	bne.n	8008840 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008884:	6963      	ldr	r3, [r4, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1da      	bne.n	8008840 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800888a:	4628      	mov	r0, r5
 800888c:	2200      	movs	r2, #0
 800888e:	4631      	mov	r1, r6
 8008890:	f000 fc80 	bl	8009194 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8008894:	4605      	mov	r5, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	d0d2      	beq.n	8008840 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800889a:	2c00      	cmp	r4, #0
 800889c:	d1eb      	bne.n	8008876 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f001 f859 	bl	8009958 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80088a6:	e7cc      	b.n	8008842 <osMessageQueueNew+0x10>

080088a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80088a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088aa:	461c      	mov	r4, r3
 80088ac:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80088b0:	b1de      	cbz	r6, 80088ea <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088b2:	b338      	cbz	r0, 8008904 <osMessageQueuePut+0x5c>
 80088b4:	b331      	cbz	r1, 8008904 <osMessageQueuePut+0x5c>
 80088b6:	bb2b      	cbnz	r3, 8008904 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80088b8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80088ba:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80088bc:	f000 fdd4 	bl	8009468 <xQueueGenericSendFromISR>
 80088c0:	2801      	cmp	r0, #1
 80088c2:	d003      	beq.n	80088cc <osMessageQueuePut+0x24>
        stat = osErrorResource;
 80088c4:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80088c8:	b002      	add	sp, #8
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	b90b      	cbnz	r3, 80088d4 <osMessageQueuePut+0x2c>
  stat = osOK;
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f9      	b.n	80088c8 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 80088d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80088d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	e7f2      	b.n	80088d0 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088ea:	b158      	cbz	r0, 8008904 <osMessageQueuePut+0x5c>
 80088ec:	b151      	cbz	r1, 8008904 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088ee:	4633      	mov	r3, r6
 80088f0:	4622      	mov	r2, r4
 80088f2:	f000 fcb6 	bl	8009262 <xQueueGenericSend>
 80088f6:	2801      	cmp	r0, #1
 80088f8:	d0ea      	beq.n	80088d0 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 80088fa:	2c00      	cmp	r4, #0
 80088fc:	d0e2      	beq.n	80088c4 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 80088fe:	f06f 0001 	mvn.w	r0, #1
 8008902:	e7e1      	b.n	80088c8 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8008904:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008908:	e7de      	b.n	80088c8 <osMessageQueuePut+0x20>

0800890a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800890a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890c:	461c      	mov	r4, r3
 800890e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008912:	b1db      	cbz	r3, 800894c <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008914:	b330      	cbz	r0, 8008964 <osMessageQueueGet+0x5a>
 8008916:	b329      	cbz	r1, 8008964 <osMessageQueueGet+0x5a>
 8008918:	bb24      	cbnz	r4, 8008964 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800891a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800891c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800891e:	f000 ffcd 	bl	80098bc <xQueueReceiveFromISR>
 8008922:	2801      	cmp	r0, #1
 8008924:	d003      	beq.n	800892e <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8008926:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800892a:	b003      	add	sp, #12
 800892c:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	b90b      	cbnz	r3, 8008936 <osMessageQueueGet+0x2c>
  stat = osOK;
 8008932:	2000      	movs	r0, #0
 8008934:	e7f9      	b.n	800892a <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8008936:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800893a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	e7f2      	b.n	8008932 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800894c:	b150      	cbz	r0, 8008964 <osMessageQueueGet+0x5a>
 800894e:	b149      	cbz	r1, 8008964 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008950:	4622      	mov	r2, r4
 8008952:	f000 fe37 	bl	80095c4 <xQueueReceive>
 8008956:	2801      	cmp	r0, #1
 8008958:	d0eb      	beq.n	8008932 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800895a:	2c00      	cmp	r4, #0
 800895c:	d0e3      	beq.n	8008926 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800895e:	f06f 0001 	mvn.w	r0, #1
 8008962:	e7e2      	b.n	800892a <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8008964:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008968:	e7df      	b.n	800892a <osMessageQueueGet+0x20>
	...

0800896c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800896c:	4b03      	ldr	r3, [pc, #12]	@ (800897c <vApplicationGetIdleTaskMemory+0x10>)
 800896e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008970:	4b03      	ldr	r3, [pc, #12]	@ (8008980 <vApplicationGetIdleTaskMemory+0x14>)
 8008972:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008974:	2380      	movs	r3, #128	@ 0x80
 8008976:	6013      	str	r3, [r2, #0]
}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	24003004 	.word	0x24003004
 8008980:	24002e04 	.word	0x24002e04

08008984 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008984:	4b03      	ldr	r3, [pc, #12]	@ (8008994 <vApplicationGetTimerTaskMemory+0x10>)
 8008986:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008988:	4b03      	ldr	r3, [pc, #12]	@ (8008998 <vApplicationGetTimerTaskMemory+0x14>)
 800898a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800898c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008990:	6013      	str	r3, [r2, #0]
}
 8008992:	4770      	bx	lr
 8008994:	24002d58 	.word	0x24002d58
 8008998:	24002958 	.word	0x24002958

0800899c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800899c:	4b10      	ldr	r3, [pc, #64]	@ (80089e0 <prvInsertBlockIntoFreeList+0x44>)
{
 800899e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089a0:	461a      	mov	r2, r3
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4283      	cmp	r3, r0
 80089a6:	d3fb      	bcc.n	80089a0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089a8:	6854      	ldr	r4, [r2, #4]
 80089aa:	1911      	adds	r1, r2, r4
 80089ac:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089ae:	bf01      	itttt	eq
 80089b0:	6841      	ldreq	r1, [r0, #4]
 80089b2:	4610      	moveq	r0, r2
 80089b4:	1909      	addeq	r1, r1, r4
 80089b6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089b8:	6844      	ldr	r4, [r0, #4]
 80089ba:	1901      	adds	r1, r0, r4
 80089bc:	428b      	cmp	r3, r1
 80089be:	d10c      	bne.n	80089da <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089c0:	4908      	ldr	r1, [pc, #32]	@ (80089e4 <prvInsertBlockIntoFreeList+0x48>)
 80089c2:	6809      	ldr	r1, [r1, #0]
 80089c4:	428b      	cmp	r3, r1
 80089c6:	d003      	beq.n	80089d0 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089c8:	6859      	ldr	r1, [r3, #4]
 80089ca:	4421      	add	r1, r4
 80089cc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089ce:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089d0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089d2:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089d4:	bf18      	it	ne
 80089d6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d8:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089da:	4619      	mov	r1, r3
 80089dc:	e7f8      	b.n	80089d0 <prvInsertBlockIntoFreeList+0x34>
 80089de:	bf00      	nop
 80089e0:	240030cc 	.word	0x240030cc
 80089e4:	240030c8 	.word	0x240030c8

080089e8 <pvPortMalloc>:
{
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80089ee:	f001 f9f1 	bl	8009dd4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80089f2:	4940      	ldr	r1, [pc, #256]	@ (8008af4 <pvPortMalloc+0x10c>)
 80089f4:	4d40      	ldr	r5, [pc, #256]	@ (8008af8 <pvPortMalloc+0x110>)
 80089f6:	680b      	ldr	r3, [r1, #0]
 80089f8:	b9f3      	cbnz	r3, 8008a38 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80089fa:	4a40      	ldr	r2, [pc, #256]	@ (8008afc <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 80089fc:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089fe:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a00:	4e3f      	ldr	r6, [pc, #252]	@ (8008b00 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a02:	bf1b      	ittet	ne
 8008a04:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a06:	4b3f      	ldrne	r3, [pc, #252]	@ (8008b04 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a08:	4b3f      	ldreq	r3, [pc, #252]	@ (8008b08 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a0a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008a0e:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a10:	bf18      	it	ne
 8008a12:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a14:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a16:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008a18:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8008a1e:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a22:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008a24:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a26:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a2a:	4b38      	ldr	r3, [pc, #224]	@ (8008b0c <pvPortMalloc+0x124>)
 8008a2c:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a2e:	4b38      	ldr	r3, [pc, #224]	@ (8008b10 <pvPortMalloc+0x128>)
 8008a30:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a36:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a38:	682e      	ldr	r6, [r5, #0]
 8008a3a:	4226      	tst	r6, r4
 8008a3c:	d155      	bne.n	8008aea <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 8008a3e:	2c00      	cmp	r4, #0
 8008a40:	d046      	beq.n	8008ad0 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 8008a42:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a46:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a48:	bf1c      	itt	ne
 8008a4a:	f023 0307 	bicne.w	r3, r3, #7
 8008a4e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d04a      	beq.n	8008aea <pvPortMalloc+0x102>
 8008a54:	4f2e      	ldr	r7, [pc, #184]	@ (8008b10 <pvPortMalloc+0x128>)
 8008a56:	683c      	ldr	r4, [r7, #0]
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	d346      	bcc.n	8008aea <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 8008a5c:	4a28      	ldr	r2, [pc, #160]	@ (8008b00 <pvPortMalloc+0x118>)
 8008a5e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a60:	6868      	ldr	r0, [r5, #4]
 8008a62:	4298      	cmp	r0, r3
 8008a64:	d204      	bcs.n	8008a70 <pvPortMalloc+0x88>
 8008a66:	f8d5 c000 	ldr.w	ip, [r5]
 8008a6a:	f1bc 0f00 	cmp.w	ip, #0
 8008a6e:	d115      	bne.n	8008a9c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8008a70:	6809      	ldr	r1, [r1, #0]
 8008a72:	42a9      	cmp	r1, r5
 8008a74:	d039      	beq.n	8008aea <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a76:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a78:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a7c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a7e:	1ac2      	subs	r2, r0, r3
 8008a80:	2a10      	cmp	r2, #16
 8008a82:	d912      	bls.n	8008aaa <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a84:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a86:	0741      	lsls	r1, r0, #29
 8008a88:	d00b      	beq.n	8008aa2 <pvPortMalloc+0xba>
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	e7fe      	b.n	8008a9a <pvPortMalloc+0xb2>
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4665      	mov	r5, ip
 8008aa0:	e7de      	b.n	8008a60 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008aa2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aa4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aa6:	f7ff ff79 	bl	800899c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008aaa:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008aac:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008aae:	4917      	ldr	r1, [pc, #92]	@ (8008b0c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab0:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ab2:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ab4:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8008ab6:	4a17      	ldr	r2, [pc, #92]	@ (8008b14 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ab8:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 8008aba:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8008abc:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008abe:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 8008ac0:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ac4:	bf38      	it	cc
 8008ac6:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ac8:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008acc:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8008ace:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8008ad0:	f001 fa24 	bl	8009f1c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad4:	0763      	lsls	r3, r4, #29
 8008ad6:	d00a      	beq.n	8008aee <pvPortMalloc+0x106>
 8008ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	e7fe      	b.n	8008ae8 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 8008aea:	2400      	movs	r4, #0
 8008aec:	e7f0      	b.n	8008ad0 <pvPortMalloc+0xe8>
}
 8008aee:	4620      	mov	r0, r4
 8008af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af4:	240030c8 	.word	0x240030c8
 8008af8:	240030b4 	.word	0x240030b4
 8008afc:	240030d4 	.word	0x240030d4
 8008b00:	240030cc 	.word	0x240030cc
 8008b04:	240155cc 	.word	0x240155cc
 8008b08:	000124f8 	.word	0x000124f8
 8008b0c:	240030c0 	.word	0x240030c0
 8008b10:	240030c4 	.word	0x240030c4
 8008b14:	240030bc 	.word	0x240030bc

08008b18 <vPortFree>:
{
 8008b18:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b390      	cbz	r0, 8008b84 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8008b88 <vPortFree+0x70>)
 8008b20:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	4213      	tst	r3, r2
 8008b28:	d108      	bne.n	8008b3c <vPortFree+0x24>
 8008b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	e7fe      	b.n	8008b3a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b3c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008b40:	b141      	cbz	r1, 8008b54 <vPortFree+0x3c>
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	e7fe      	b.n	8008b52 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b54:	ea23 0302 	bic.w	r3, r3, r2
 8008b58:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008b5c:	f001 f93a 	bl	8009dd4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b60:	4a0a      	ldr	r2, [pc, #40]	@ (8008b8c <vPortFree+0x74>)
 8008b62:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b66:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6a:	6811      	ldr	r1, [r2, #0]
 8008b6c:	440b      	add	r3, r1
 8008b6e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b70:	f7ff ff14 	bl	800899c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b74:	4a06      	ldr	r2, [pc, #24]	@ (8008b90 <vPortFree+0x78>)
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	3301      	adds	r3, #1
}
 8008b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8008b7e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008b80:	f001 b9cc 	b.w	8009f1c <xTaskResumeAll>
}
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	bf00      	nop
 8008b88:	240030b4 	.word	0x240030b4
 8008b8c:	240030c4 	.word	0x240030c4
 8008b90:	240030b8 	.word	0x240030b8

08008b94 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b94:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b98:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b9c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b9e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ba8:	4770      	bx	lr

08008baa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bae:	4770      	bx	lr

08008bb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bb0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bb2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008bb4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bb6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bb8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008bbc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008bbe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	6003      	str	r3, [r0, #0]
}
 8008bc4:	4770      	bx	lr

08008bc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bc6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bca:	1c63      	adds	r3, r4, #1
 8008bcc:	d10a      	bne.n	8008be4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bce:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bd4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bd6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bd8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008bda:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008bdc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008bde:	3301      	adds	r3, #1
 8008be0:	6003      	str	r3, [r0, #0]
}
 8008be2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008be4:	f100 0208 	add.w	r2, r0, #8
 8008be8:	4613      	mov	r3, r2
 8008bea:	6852      	ldr	r2, [r2, #4]
 8008bec:	6815      	ldr	r5, [r2, #0]
 8008bee:	42a5      	cmp	r5, r4
 8008bf0:	d9fa      	bls.n	8008be8 <vListInsert+0x22>
 8008bf2:	e7ed      	b.n	8008bd0 <vListInsert+0xa>

08008bf4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bf4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bf6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008bfa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bfc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bfe:	6859      	ldr	r1, [r3, #4]
 8008c00:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c02:	bf08      	it	eq
 8008c04:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c06:	2200      	movs	r2, #0
 8008c08:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	3a01      	subs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c10:	6818      	ldr	r0, [r3, #0]
}
 8008c12:	4770      	bx	lr

08008c14 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c14:	4808      	ldr	r0, [pc, #32]	@ (8008c38 <prvPortStartFirstTask+0x24>)
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	6800      	ldr	r0, [r0, #0]
 8008c1a:	f380 8808 	msr	MSP, r0
 8008c1e:	f04f 0000 	mov.w	r0, #0
 8008c22:	f380 8814 	msr	CONTROL, r0
 8008c26:	b662      	cpsie	i
 8008c28:	b661      	cpsie	f
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	df00      	svc	0
 8008c34:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c36:	0000      	.short	0x0000
 8008c38:	e000ed08 	.word	0xe000ed08

08008c3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c3c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c4c <vPortEnableVFP+0x10>
 8008c40:	6801      	ldr	r1, [r0, #0]
 8008c42:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c46:	6001      	str	r1, [r0, #0]
 8008c48:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c4a:	0000      	.short	0x0000
 8008c4c:	e000ed88 	.word	0xe000ed88

08008c50 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8008c50:	2300      	movs	r3, #0
{
 8008c52:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008c54:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008c56:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <prvTaskExitError+0x3c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	d008      	beq.n	8008c70 <prvTaskExitError+0x20>
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	e7fe      	b.n	8008c6e <prvTaskExitError+0x1e>
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0fc      	beq.n	8008c80 <prvTaskExitError+0x30>
}
 8008c86:	b002      	add	sp, #8
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	2400004c 	.word	0x2400004c

08008c90 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c94:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c98:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008c9c:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c9e:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ca0:	4b03      	ldr	r3, [pc, #12]	@ (8008cb0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ca2:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ca4:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ca6:	f06f 0302 	mvn.w	r3, #2
 8008caa:	6203      	str	r3, [r0, #32]
}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	08008c51 	.word	0x08008c51
	...

08008cc0 <SVC_Handler>:
	__asm volatile (
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <pxCurrentTCBConst2>)
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	6808      	ldr	r0, [r1, #0]
 8008cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	f380 8809 	msr	PSP, r0
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8811 	msr	BASEPRI, r0
 8008cda:	4770      	bx	lr
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst2>:
 8008ce0:	24015b0c 	.word	0x24015b0c

08008ce4 <vPortEnterCritical>:
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8008d20 <vPortEnterCritical+0x3c>)
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8008cfa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008cfc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008cfe:	d10e      	bne.n	8008d1e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d04:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	b143      	cbz	r3, 8008d1e <vPortEnterCritical+0x3a>
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	e7fe      	b.n	8008d1c <vPortEnterCritical+0x38>
}
 8008d1e:	4770      	bx	lr
 8008d20:	2400004c 	.word	0x2400004c

08008d24 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008d24:	4a08      	ldr	r2, [pc, #32]	@ (8008d48 <vPortExitCritical+0x24>)
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	b943      	cbnz	r3, 8008d3c <vPortExitCritical+0x18>
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	e7fe      	b.n	8008d3a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d40:	b90b      	cbnz	r3, 8008d46 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d42:	f383 8811 	msr	BASEPRI, r3
}
 8008d46:	4770      	bx	lr
 8008d48:	2400004c 	.word	0x2400004c
 8008d4c:	00000000 	.word	0x00000000

08008d50 <PendSV_Handler>:
	__asm volatile
 8008d50:	f3ef 8009 	mrs	r0, PSP
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4b15      	ldr	r3, [pc, #84]	@ (8008db0 <pxCurrentTCBConst>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	f01e 0f10 	tst.w	lr, #16
 8008d60:	bf08      	it	eq
 8008d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	6010      	str	r0, [r2, #0]
 8008d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d74:	f380 8811 	msr	BASEPRI, r0
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f001 f9d4 	bl	800a12c <vTaskSwitchContext>
 8008d84:	f04f 0000 	mov.w	r0, #0
 8008d88:	f380 8811 	msr	BASEPRI, r0
 8008d8c:	bc09      	pop	{r0, r3}
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	6808      	ldr	r0, [r1, #0]
 8008d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d96:	f01e 0f10 	tst.w	lr, #16
 8008d9a:	bf08      	it	eq
 8008d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008da0:	f380 8809 	msr	PSP, r0
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst>:
 8008db0:	24015b0c 	.word	0x24015b0c

08008db4 <xPortSysTickHandler>:
{
 8008db4:	b508      	push	{r3, lr}
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008dc6:	f001 f813 	bl	8009df0 <xTaskIncrementTick>
 8008dca:	b128      	cbz	r0, 8008dd8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f383 8811 	msr	BASEPRI, r3
}
 8008dde:	bd08      	pop	{r3, pc}

08008de0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8008de4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008de6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dea:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dee:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <vPortSetupTimerInterrupt+0x20>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008df6:	3b01      	subs	r3, #1
 8008df8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfa:	2307      	movs	r3, #7
 8008dfc:	6113      	str	r3, [r2, #16]
}
 8008dfe:	4770      	bx	lr
 8008e00:	24000040 	.word	0x24000040

08008e04 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e04:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8008e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e0a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8008e0e:	4a38      	ldr	r2, [pc, #224]	@ (8008ef0 <xPortStartScheduler+0xec>)
 8008e10:	4291      	cmp	r1, r2
 8008e12:	d108      	bne.n	8008e26 <xPortStartScheduler+0x22>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	e7fe      	b.n	8008e24 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e26:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8008e2a:	4b32      	ldr	r3, [pc, #200]	@ (8008ef4 <xPortStartScheduler+0xf0>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d108      	bne.n	8008e42 <xPortStartScheduler+0x3e>
 8008e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	e7fe      	b.n	8008e40 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e42:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef8 <xPortStartScheduler+0xf4>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e4a:	22ff      	movs	r2, #255	@ 0xff
 8008e4c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e4e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e50:	4a2a      	ldr	r2, [pc, #168]	@ (8008efc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e58:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e60:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e62:	2307      	movs	r3, #7
 8008e64:	4a26      	ldr	r2, [pc, #152]	@ (8008f00 <xPortStartScheduler+0xfc>)
 8008e66:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e68:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8008e6c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6e:	0609      	lsls	r1, r1, #24
 8008e70:	d40a      	bmi.n	8008e88 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d011      	beq.n	8008e9a <xPortStartScheduler+0x96>
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	e7fe      	b.n	8008e86 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f88d 3003 	strb.w	r3, [sp, #3]
 8008e98:	e7e6      	b.n	8008e68 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e9e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8008ea2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ea4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	4a13      	ldr	r2, [pc, #76]	@ (8008ef8 <xPortStartScheduler+0xf4>)
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008eae:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008eb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008eb6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008eba:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008ebe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ec2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8008ec6:	f7ff ff8b 	bl	8008de0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008eca:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <xPortStartScheduler+0x100>)
 8008ecc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008ece:	f7ff feb5 	bl	8008c3c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ed2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8008ed6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008eda:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8008ede:	f7ff fe99 	bl	8008c14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008ee2:	f001 f923 	bl	800a12c <vTaskSwitchContext>
}
 8008ee6:	4628      	mov	r0, r5
	prvTaskExitError();
 8008ee8:	f7ff feb2 	bl	8008c50 <prvTaskExitError>
}
 8008eec:	b003      	add	sp, #12
 8008eee:	bd30      	pop	{r4, r5, pc}
 8008ef0:	410fc271 	.word	0x410fc271
 8008ef4:	410fc270 	.word	0x410fc270
 8008ef8:	e000e400 	.word	0xe000e400
 8008efc:	240155d0 	.word	0x240155d0
 8008f00:	240155cc 	.word	0x240155cc
 8008f04:	2400004c 	.word	0x2400004c

08008f08 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f08:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f0c:	2b0f      	cmp	r3, #15
 8008f0e:	d90e      	bls.n	8008f2e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f10:	4a11      	ldr	r2, [pc, #68]	@ (8008f58 <vPortValidateInterruptPriority+0x50>)
 8008f12:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f14:	4a11      	ldr	r2, [pc, #68]	@ (8008f5c <vPortValidateInterruptPriority+0x54>)
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d908      	bls.n	8008f2e <vPortValidateInterruptPriority+0x26>
 8008f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	e7fe      	b.n	8008f2c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008f32:	4a0b      	ldr	r2, [pc, #44]	@ (8008f60 <vPortValidateInterruptPriority+0x58>)
 8008f34:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d908      	bls.n	8008f54 <vPortValidateInterruptPriority+0x4c>
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	e7fe      	b.n	8008f52 <vPortValidateInterruptPriority+0x4a>
	}
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	e000e3f0 	.word	0xe000e3f0
 8008f5c:	240155d0 	.word	0x240155d0
 8008f60:	240155cc 	.word	0x240155cc

08008f64 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f64:	b510      	push	{r4, lr}
 8008f66:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f68:	f7ff febc 	bl	8008ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f6c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008f6e:	f7ff fed9 	bl	8008d24 <vPortExitCritical>

	return xReturn;
}
 8008f72:	fab4 f084 	clz	r0, r4
 8008f76:	0940      	lsrs	r0, r0, #5
 8008f78:	bd10      	pop	{r4, pc}

08008f7a <prvCopyDataToQueue>:
{
 8008f7a:	b570      	push	{r4, r5, r6, lr}
 8008f7c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f7e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8008f80:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f82:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f84:	b942      	cbnz	r2, 8008f98 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f86:	6806      	ldr	r6, [r0, #0]
 8008f88:	b99e      	cbnz	r6, 8008fb2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f8a:	6880      	ldr	r0, [r0, #8]
 8008f8c:	f001 fa32 	bl	800a3f4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f90:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f92:	3501      	adds	r5, #1
 8008f94:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008f98:	b96e      	cbnz	r6, 8008fb6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f9a:	6840      	ldr	r0, [r0, #4]
 8008f9c:	f021 f9bf 	bl	802a31e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008fa4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fa6:	68a2      	ldr	r2, [r4, #8]
 8008fa8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008faa:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fac:	bf24      	itt	cs
 8008fae:	6823      	ldrcs	r3, [r4, #0]
 8008fb0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e7ed      	b.n	8008f92 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fb6:	68c0      	ldr	r0, [r0, #12]
 8008fb8:	f021 f9b1 	bl	802a31e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fbc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008fbe:	68e3      	ldr	r3, [r4, #12]
 8008fc0:	4251      	negs	r1, r2
 8008fc2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fc8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fca:	bf3e      	ittt	cc
 8008fcc:	68a3      	ldrcc	r3, [r4, #8]
 8008fce:	185b      	addcc	r3, r3, r1
 8008fd0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008fd2:	2e02      	cmp	r6, #2
 8008fd4:	d1ed      	bne.n	8008fb2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fd6:	b10d      	cbz	r5, 8008fdc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8008fd8:	3d01      	subs	r5, #1
 8008fda:	e7ea      	b.n	8008fb2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008fdc:	4628      	mov	r0, r5
 8008fde:	e7d8      	b.n	8008f92 <prvCopyDataToQueue+0x18>

08008fe0 <prvCopyDataFromQueue>:
{
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8008fe6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fe8:	b162      	cbz	r2, 8009004 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fea:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fec:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fee:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ff0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ff2:	60dc      	str	r4, [r3, #12]
}
 8008ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ff8:	bf24      	itt	cs
 8008ffa:	6819      	ldrcs	r1, [r3, #0]
 8008ffc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ffe:	68d9      	ldr	r1, [r3, #12]
 8009000:	f021 b98d 	b.w	802a31e <memcpy>
}
 8009004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009008:	4770      	bx	lr

0800900a <prvUnlockQueue>:
{
 800900a:	b570      	push	{r4, r5, r6, lr}
 800900c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800900e:	f7ff fe69 	bl	8008ce4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009012:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009016:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800901a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800901c:	2d00      	cmp	r5, #0
 800901e:	dc14      	bgt.n	800904a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009020:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009022:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009026:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800902a:	f7ff fe7b 	bl	8008d24 <vPortExitCritical>
	taskENTER_CRITICAL();
 800902e:	f7ff fe59 	bl	8008ce4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009032:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8009036:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009038:	2d00      	cmp	r5, #0
 800903a:	dc12      	bgt.n	8009062 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800903c:	23ff      	movs	r3, #255	@ 0xff
 800903e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8009042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009046:	f7ff be6d 	b.w	8008d24 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800904a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0e7      	beq.n	8009020 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009050:	4630      	mov	r0, r6
 8009052:	f001 f8eb 	bl	800a22c <xTaskRemoveFromEventList>
 8009056:	b108      	cbz	r0, 800905c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009058:	f001 f972 	bl	800a340 <vTaskMissedYield>
			--cTxLock;
 800905c:	3d01      	subs	r5, #1
 800905e:	b26d      	sxtb	r5, r5
 8009060:	e7dc      	b.n	800901c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0e9      	beq.n	800903c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009068:	4630      	mov	r0, r6
 800906a:	f001 f8df 	bl	800a22c <xTaskRemoveFromEventList>
 800906e:	b108      	cbz	r0, 8009074 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009070:	f001 f966 	bl	800a340 <vTaskMissedYield>
				--cRxLock;
 8009074:	3d01      	subs	r5, #1
 8009076:	b26d      	sxtb	r5, r5
 8009078:	e7de      	b.n	8009038 <prvUnlockQueue+0x2e>

0800907a <xQueueGenericReset>:
{
 800907a:	b538      	push	{r3, r4, r5, lr}
 800907c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800907e:	4604      	mov	r4, r0
 8009080:	b940      	cbnz	r0, 8009094 <xQueueGenericReset+0x1a>
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	e7fe      	b.n	8009092 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009094:	f7ff fe26 	bl	8008ce4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800909e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090a0:	434b      	muls	r3, r1
 80090a2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090a4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090a6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090a8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090aa:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80090ac:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ae:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090b0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80090b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80090ba:	b9a5      	cbnz	r5, 80090e6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b173      	cbz	r3, 80090de <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c0:	f104 0010 	add.w	r0, r4, #16
 80090c4:	f001 f8b2 	bl	800a22c <xTaskRemoveFromEventList>
 80090c8:	b148      	cbz	r0, 80090de <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80090ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80090ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80090de:	f7ff fe21 	bl	8008d24 <vPortExitCritical>
}
 80090e2:	2001      	movs	r0, #1
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090e6:	f104 0010 	add.w	r0, r4, #16
 80090ea:	f7ff fd53 	bl	8008b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090ee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80090f2:	f7ff fd4f 	bl	8008b94 <vListInitialise>
 80090f6:	e7f2      	b.n	80090de <xQueueGenericReset+0x64>

080090f8 <xQueueGenericCreateStatic>:
	{
 80090f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fa:	460d      	mov	r5, r1
 80090fc:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090fe:	b940      	cbnz	r0, 8009112 <xQueueGenericCreateStatic+0x1a>
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	e7fe      	b.n	8009110 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8009112:	b943      	cbnz	r3, 8009126 <xQueueGenericCreateStatic+0x2e>
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	e7fe      	b.n	8009124 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009126:	b14a      	cbz	r2, 800913c <xQueueGenericCreateStatic+0x44>
 8009128:	b991      	cbnz	r1, 8009150 <xQueueGenericCreateStatic+0x58>
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	e7fe      	b.n	800913a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800913c:	b141      	cbz	r1, 8009150 <xQueueGenericCreateStatic+0x58>
 800913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	e7fe      	b.n	800914e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009150:	2350      	movs	r3, #80	@ 0x50
 8009152:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	2b50      	cmp	r3, #80	@ 0x50
 8009158:	d008      	beq.n	800916c <xQueueGenericCreateStatic+0x74>
 800915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	e7fe      	b.n	800916a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800916c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800916e:	2d00      	cmp	r5, #0
 8009170:	bf08      	it	eq
 8009172:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009174:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009176:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800917a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800917c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009180:	4620      	mov	r0, r4
 8009182:	f7ff ff7a 	bl	800907a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009186:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800918a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800918c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8009190:	b003      	add	sp, #12
 8009192:	bd30      	pop	{r4, r5, pc}

08009194 <xQueueGenericCreate>:
	{
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	460d      	mov	r5, r1
 8009198:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800919a:	4606      	mov	r6, r0
 800919c:	b940      	cbnz	r0, 80091b0 <xQueueGenericCreate+0x1c>
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	e7fe      	b.n	80091ae <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091b2:	3050      	adds	r0, #80	@ 0x50
 80091b4:	f7ff fc18 	bl	80089e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80091b8:	4604      	mov	r4, r0
 80091ba:	b170      	cbz	r0, 80091da <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091bc:	2300      	movs	r3, #0
 80091be:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80091c2:	b165      	cbz	r5, 80091de <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091c4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091c8:	2101      	movs	r1, #1
 80091ca:	4620      	mov	r0, r4
 80091cc:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80091ce:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091d2:	f7ff ff52 	bl	800907a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80091d6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80091da:	4620      	mov	r0, r4
 80091dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091de:	4603      	mov	r3, r0
 80091e0:	e7f2      	b.n	80091c8 <xQueueGenericCreate+0x34>

080091e2 <xQueueCreateCountingSemaphoreStatic>:
	{
 80091e2:	b513      	push	{r0, r1, r4, lr}
 80091e4:	4613      	mov	r3, r2
 80091e6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80091e8:	b940      	cbnz	r0, 80091fc <xQueueCreateCountingSemaphoreStatic+0x1a>
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	e7fe      	b.n	80091fa <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091fc:	4288      	cmp	r0, r1
 80091fe:	d208      	bcs.n	8009212 <xQueueCreateCountingSemaphoreStatic+0x30>
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	e7fe      	b.n	8009210 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009212:	2202      	movs	r2, #2
 8009214:	9200      	str	r2, [sp, #0]
 8009216:	2200      	movs	r2, #0
 8009218:	4611      	mov	r1, r2
 800921a:	f7ff ff6d 	bl	80090f8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800921e:	b100      	cbz	r0, 8009222 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009220:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8009222:	b002      	add	sp, #8
 8009224:	bd10      	pop	{r4, pc}

08009226 <xQueueCreateCountingSemaphore>:
	{
 8009226:	b510      	push	{r4, lr}
 8009228:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800922a:	b940      	cbnz	r0, 800923e <xQueueCreateCountingSemaphore+0x18>
 800922c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	e7fe      	b.n	800923c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800923e:	4288      	cmp	r0, r1
 8009240:	d208      	bcs.n	8009254 <xQueueCreateCountingSemaphore+0x2e>
 8009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	e7fe      	b.n	8009252 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009254:	2202      	movs	r2, #2
 8009256:	2100      	movs	r1, #0
 8009258:	f7ff ff9c 	bl	8009194 <xQueueGenericCreate>
		if( xHandle != NULL )
 800925c:	b100      	cbz	r0, 8009260 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800925e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8009260:	bd10      	pop	{r4, pc}

08009262 <xQueueGenericSend>:
{
 8009262:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009266:	460f      	mov	r7, r1
 8009268:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800926a:	4604      	mov	r4, r0
{
 800926c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800926e:	b940      	cbnz	r0, 8009282 <xQueueGenericSend+0x20>
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	e7fe      	b.n	8009280 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009282:	b951      	cbnz	r1, 800929a <xQueueGenericSend+0x38>
 8009284:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009286:	b143      	cbz	r3, 800929a <xQueueGenericSend+0x38>
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	e7fe      	b.n	8009298 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800929a:	2e02      	cmp	r6, #2
 800929c:	d10b      	bne.n	80092b6 <xQueueGenericSend+0x54>
 800929e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d008      	beq.n	80092b6 <xQueueGenericSend+0x54>
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	e7fe      	b.n	80092b4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092b6:	f001 f84f 	bl	800a358 <xTaskGetSchedulerState>
 80092ba:	4605      	mov	r5, r0
 80092bc:	b330      	cbz	r0, 800930c <xQueueGenericSend+0xaa>
 80092be:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80092c0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80092c4:	f7ff fd0e 	bl	8008ce4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80092ca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d301      	bcc.n	80092d4 <xQueueGenericSend+0x72>
 80092d0:	2e02      	cmp	r6, #2
 80092d2:	d127      	bne.n	8009324 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092d4:	4632      	mov	r2, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	4620      	mov	r0, r4
 80092da:	f7ff fe4e 	bl	8008f7a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80092e0:	b11b      	cbz	r3, 80092ea <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80092e6:	f000 ffa1 	bl	800a22c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80092ea:	b148      	cbz	r0, 8009300 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80092ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80092f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009300:	f7ff fd10 	bl	8008d24 <vPortExitCritical>
				return pdPASS;
 8009304:	2001      	movs	r0, #1
}
 8009306:	b004      	add	sp, #16
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0d6      	beq.n	80092c0 <xQueueGenericSend+0x5e>
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	e7fe      	b.n	8009322 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009324:	9b01      	ldr	r3, [sp, #4]
 8009326:	b91b      	cbnz	r3, 8009330 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8009328:	f7ff fcfc 	bl	8008d24 <vPortExitCritical>
					return errQUEUE_FULL;
 800932c:	2000      	movs	r0, #0
 800932e:	e7ea      	b.n	8009306 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8009330:	b915      	cbnz	r5, 8009338 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009332:	a802      	add	r0, sp, #8
 8009334:	f000 ffbc 	bl	800a2b0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009338:	f7ff fcf4 	bl	8008d24 <vPortExitCritical>
		vTaskSuspendAll();
 800933c:	f000 fd4a 	bl	8009dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009340:	f7ff fcd0 	bl	8008ce4 <vPortEnterCritical>
 8009344:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009348:	2bff      	cmp	r3, #255	@ 0xff
 800934a:	d101      	bne.n	8009350 <xQueueGenericSend+0xee>
 800934c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8009350:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009354:	2bff      	cmp	r3, #255	@ 0xff
 8009356:	d101      	bne.n	800935c <xQueueGenericSend+0xfa>
 8009358:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800935c:	f7ff fce2 	bl	8008d24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009360:	a901      	add	r1, sp, #4
 8009362:	a802      	add	r0, sp, #8
 8009364:	f000 ffb0 	bl	800a2c8 <xTaskCheckForTimeOut>
 8009368:	bb38      	cbnz	r0, 80093ba <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800936a:	f7ff fcbb 	bl	8008ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800936e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009370:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009372:	429a      	cmp	r2, r3
 8009374:	d10e      	bne.n	8009394 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009376:	f7ff fcd5 	bl	8008d24 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800937a:	9901      	ldr	r1, [sp, #4]
 800937c:	f104 0010 	add.w	r0, r4, #16
 8009380:	f000 ff1c 	bl	800a1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff fe40 	bl	800900a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800938a:	f000 fdc7 	bl	8009f1c <xTaskResumeAll>
 800938e:	b148      	cbz	r0, 80093a4 <xQueueGenericSend+0x142>
 8009390:	2501      	movs	r5, #1
 8009392:	e797      	b.n	80092c4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8009394:	f7ff fcc6 	bl	8008d24 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009398:	4620      	mov	r0, r4
 800939a:	f7ff fe36 	bl	800900a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800939e:	f000 fdbd 	bl	8009f1c <xTaskResumeAll>
 80093a2:	e7f5      	b.n	8009390 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80093a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80093a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	e7ea      	b.n	8009390 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fe25 	bl	800900a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093c0:	f000 fdac 	bl	8009f1c <xTaskResumeAll>
			return errQUEUE_FULL;
 80093c4:	e7b2      	b.n	800932c <xQueueGenericSend+0xca>

080093c6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093c6:	2200      	movs	r2, #0
	{
 80093c8:	460b      	mov	r3, r1
 80093ca:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093cc:	4611      	mov	r1, r2
 80093ce:	9000      	str	r0, [sp, #0]
 80093d0:	2001      	movs	r0, #1
 80093d2:	f7ff fe91 	bl	80090f8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80093d6:	4604      	mov	r4, r0
 80093d8:	b138      	cbz	r0, 80093ea <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80093da:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093dc:	461a      	mov	r2, r3
 80093de:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80093e0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80093e2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80093e4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093e6:	f7ff ff3c 	bl	8009262 <xQueueGenericSend>
	}
 80093ea:	4620      	mov	r0, r4
 80093ec:	b002      	add	sp, #8
 80093ee:	bd10      	pop	{r4, pc}

080093f0 <xQueueGiveMutexRecursive>:
	{
 80093f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80093f2:	4604      	mov	r4, r0
 80093f4:	b940      	cbnz	r0, 8009408 <xQueueGiveMutexRecursive+0x18>
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	e7fe      	b.n	8009406 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009408:	6885      	ldr	r5, [r0, #8]
 800940a:	f000 ff9f 	bl	800a34c <xTaskGetCurrentTaskHandle>
 800940e:	4285      	cmp	r5, r0
 8009410:	d10b      	bne.n	800942a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009412:	68e3      	ldr	r3, [r4, #12]
 8009414:	3b01      	subs	r3, #1
 8009416:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009418:	b10b      	cbz	r3, 800941e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800941a:	2001      	movs	r0, #1
	}
 800941c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800941e:	461a      	mov	r2, r3
 8009420:	4619      	mov	r1, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f7ff ff1d 	bl	8009262 <xQueueGenericSend>
 8009428:	e7f7      	b.n	800941a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800942a:	2000      	movs	r0, #0
		return xReturn;
 800942c:	e7f6      	b.n	800941c <xQueueGiveMutexRecursive+0x2c>

0800942e <xQueueCreateMutex>:
	{
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009432:	2050      	movs	r0, #80	@ 0x50
 8009434:	f7ff fad8 	bl	80089e8 <pvPortMalloc>
 8009438:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800943a:	b198      	cbz	r0, 8009464 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800943c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800943e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009440:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009442:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009446:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800944a:	f7ff fe16 	bl	800907a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800944e:	462b      	mov	r3, r5
 8009450:	462a      	mov	r2, r5
 8009452:	4629      	mov	r1, r5
 8009454:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009456:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800945a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800945c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800945e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009460:	f7ff feff 	bl	8009262 <xQueueGenericSend>
	}
 8009464:	4620      	mov	r0, r4
 8009466:	bd70      	pop	{r4, r5, r6, pc}

08009468 <xQueueGenericSendFromISR>:
{
 8009468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800946c:	4689      	mov	r9, r1
 800946e:	4617      	mov	r7, r2
 8009470:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8009472:	4604      	mov	r4, r0
 8009474:	b940      	cbnz	r0, 8009488 <xQueueGenericSendFromISR+0x20>
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	e7fe      	b.n	8009486 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009488:	b951      	cbnz	r1, 80094a0 <xQueueGenericSendFromISR+0x38>
 800948a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800948c:	b143      	cbz	r3, 80094a0 <xQueueGenericSendFromISR+0x38>
 800948e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	e7fe      	b.n	800949e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094a0:	2e02      	cmp	r6, #2
 80094a2:	d10b      	bne.n	80094bc <xQueueGenericSendFromISR+0x54>
 80094a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d008      	beq.n	80094bc <xQueueGenericSendFromISR+0x54>
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	e7fe      	b.n	80094ba <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094bc:	f7ff fd24 	bl	8008f08 <vPortValidateInterruptPriority>
	__asm volatile
 80094c0:	f3ef 8811 	mrs	r8, BASEPRI
 80094c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80094d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80094d8:	429a      	cmp	r2, r3
 80094da:	d301      	bcc.n	80094e0 <xQueueGenericSendFromISR+0x78>
 80094dc:	2e02      	cmp	r6, #2
 80094de:	d11e      	bne.n	800951e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 80094e0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094e4:	4632      	mov	r2, r6
 80094e6:	4649      	mov	r1, r9
 80094e8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80094ea:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094ee:	f7ff fd44 	bl	8008f7a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80094f2:	1c6b      	adds	r3, r5, #1
 80094f4:	d10e      	bne.n	8009514 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80094f8:	b13b      	cbz	r3, 800950a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094fa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80094fe:	f000 fe95 	bl	800a22c <xTaskRemoveFromEventList>
 8009502:	b110      	cbz	r0, 800950a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8009504:	b10f      	cbz	r7, 800950a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009506:	2301      	movs	r3, #1
 8009508:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800950a:	2001      	movs	r0, #1
	__asm volatile
 800950c:	f388 8811 	msr	BASEPRI, r8
}
 8009510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009514:	3501      	adds	r5, #1
 8009516:	b26d      	sxtb	r5, r5
 8009518:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800951c:	e7f5      	b.n	800950a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800951e:	2000      	movs	r0, #0
 8009520:	e7f4      	b.n	800950c <xQueueGenericSendFromISR+0xa4>

08009522 <xQueueGiveFromISR>:
{
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009526:	4604      	mov	r4, r0
 8009528:	b940      	cbnz	r0, 800953c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	e7fe      	b.n	800953a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800953c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800953e:	b143      	cbz	r3, 8009552 <xQueueGiveFromISR+0x30>
 8009540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	e7fe      	b.n	8009550 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009552:	6803      	ldr	r3, [r0, #0]
 8009554:	b953      	cbnz	r3, 800956c <xQueueGiveFromISR+0x4a>
 8009556:	6883      	ldr	r3, [r0, #8]
 8009558:	b143      	cbz	r3, 800956c <xQueueGiveFromISR+0x4a>
 800955a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	e7fe      	b.n	800956a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800956c:	f7ff fccc 	bl	8008f08 <vPortValidateInterruptPriority>
	__asm volatile
 8009570:	f3ef 8611 	mrs	r6, BASEPRI
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009584:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009586:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009588:	4293      	cmp	r3, r2
 800958a:	d919      	bls.n	80095c0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800958c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009590:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009592:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8009594:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009596:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8009598:	d10d      	bne.n	80095b6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800959a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800959c:	b13b      	cbz	r3, 80095ae <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800959e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80095a2:	f000 fe43 	bl	800a22c <xTaskRemoveFromEventList>
 80095a6:	b110      	cbz	r0, 80095ae <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80095a8:	b10d      	cbz	r5, 80095ae <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095aa:	2301      	movs	r3, #1
 80095ac:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 80095ae:	2001      	movs	r0, #1
	__asm volatile
 80095b0:	f386 8811 	msr	BASEPRI, r6
}
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095b6:	3301      	adds	r3, #1
 80095b8:	b25b      	sxtb	r3, r3
 80095ba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80095be:	e7f6      	b.n	80095ae <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7f5      	b.n	80095b0 <xQueueGiveFromISR+0x8e>

080095c4 <xQueueReceive>:
{
 80095c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80095c8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 80095ca:	4604      	mov	r4, r0
{
 80095cc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80095ce:	b940      	cbnz	r0, 80095e2 <xQueueReceive+0x1e>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	e7fe      	b.n	80095e0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095e2:	b951      	cbnz	r1, 80095fa <xQueueReceive+0x36>
 80095e4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80095e6:	b143      	cbz	r3, 80095fa <xQueueReceive+0x36>
 80095e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	e7fe      	b.n	80095f8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095fa:	f000 fead 	bl	800a358 <xTaskGetSchedulerState>
 80095fe:	4605      	mov	r5, r0
 8009600:	b318      	cbz	r0, 800964a <xQueueReceive+0x86>
 8009602:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8009604:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8009608:	f7ff fb6c 	bl	8008ce4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800960c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800960e:	b347      	cbz	r7, 8009662 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009610:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009612:	4631      	mov	r1, r6
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff fce3 	bl	8008fe0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800961a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	b173      	cbz	r3, 800963e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009620:	f104 0010 	add.w	r0, r4, #16
 8009624:	f000 fe02 	bl	800a22c <xTaskRemoveFromEventList>
 8009628:	b148      	cbz	r0, 800963e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800962a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800962e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009632:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800963e:	f7ff fb71 	bl	8008d24 <vPortExitCritical>
				return pdPASS;
 8009642:	2001      	movs	r0, #1
}
 8009644:	b004      	add	sp, #16
 8009646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0d9      	beq.n	8009604 <xQueueReceive+0x40>
 8009650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	e7fe      	b.n	8009660 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	b91b      	cbnz	r3, 800966e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8009666:	f7ff fb5d 	bl	8008d24 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800966a:	2000      	movs	r0, #0
 800966c:	e7ea      	b.n	8009644 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800966e:	b915      	cbnz	r5, 8009676 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009670:	a802      	add	r0, sp, #8
 8009672:	f000 fe1d 	bl	800a2b0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009676:	f7ff fb55 	bl	8008d24 <vPortExitCritical>
		vTaskSuspendAll();
 800967a:	f000 fbab 	bl	8009dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800967e:	f7ff fb31 	bl	8008ce4 <vPortEnterCritical>
 8009682:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009686:	2bff      	cmp	r3, #255	@ 0xff
 8009688:	d101      	bne.n	800968e <xQueueReceive+0xca>
 800968a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800968e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009692:	2bff      	cmp	r3, #255	@ 0xff
 8009694:	d101      	bne.n	800969a <xQueueReceive+0xd6>
 8009696:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800969a:	f7ff fb43 	bl	8008d24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800969e:	a901      	add	r1, sp, #4
 80096a0:	a802      	add	r0, sp, #8
 80096a2:	f000 fe11 	bl	800a2c8 <xTaskCheckForTimeOut>
 80096a6:	bb00      	cbnz	r0, 80096ea <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7ff fc5b 	bl	8008f64 <prvIsQueueEmpty>
 80096ae:	b1b0      	cbz	r0, 80096de <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096b0:	9901      	ldr	r1, [sp, #4]
 80096b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80096b6:	f000 fd81 	bl	800a1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7ff fca5 	bl	800900a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096c0:	f000 fc2c 	bl	8009f1c <xTaskResumeAll>
 80096c4:	b948      	cbnz	r0, 80096da <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80096c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80096ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	2501      	movs	r5, #1
 80096dc:	e794      	b.n	8009608 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff fc93 	bl	800900a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096e4:	f000 fc1a 	bl	8009f1c <xTaskResumeAll>
 80096e8:	e7f7      	b.n	80096da <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7ff fc8d 	bl	800900a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096f0:	f000 fc14 	bl	8009f1c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7ff fc35 	bl	8008f64 <prvIsQueueEmpty>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0ed      	beq.n	80096da <xQueueReceive+0x116>
 80096fe:	e7b4      	b.n	800966a <xQueueReceive+0xa6>

08009700 <xQueueSemaphoreTake>:
{
 8009700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009702:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8009704:	4604      	mov	r4, r0
{
 8009706:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009708:	b940      	cbnz	r0, 800971c <xQueueSemaphoreTake+0x1c>
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	e7fe      	b.n	800971a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800971c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800971e:	b145      	cbz	r5, 8009732 <xQueueSemaphoreTake+0x32>
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	e7fe      	b.n	8009730 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009732:	f000 fe11 	bl	800a358 <xTaskGetSchedulerState>
 8009736:	4606      	mov	r6, r0
 8009738:	b320      	cbz	r0, 8009784 <xQueueSemaphoreTake+0x84>
 800973a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800973c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800973e:	f7ff fad1 	bl	8008ce4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009742:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009744:	b353      	cbz	r3, 800979c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009746:	3b01      	subs	r3, #1
 8009748:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	b913      	cbnz	r3, 8009754 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800974e:	f000 fee1 	bl	800a514 <pvTaskIncrementMutexHeldCount>
 8009752:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	b173      	cbz	r3, 8009776 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009758:	f104 0010 	add.w	r0, r4, #16
 800975c:	f000 fd66 	bl	800a22c <xTaskRemoveFromEventList>
 8009760:	b148      	cbz	r0, 8009776 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8009762:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800976a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009776:	f7ff fad5 	bl	8008d24 <vPortExitCritical>
				return pdPASS;
 800977a:	2001      	movs	r0, #1
}
 800977c:	b005      	add	sp, #20
 800977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009780:	4635      	mov	r5, r6
 8009782:	e7db      	b.n	800973c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0fa      	beq.n	8009780 <xQueueSemaphoreTake+0x80>
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	e7fe      	b.n	800979a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	b953      	cbnz	r3, 80097b6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	d066      	beq.n	8009872 <xQueueSemaphoreTake+0x172>
 80097a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	e7fe      	b.n	80097b4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 80097b6:	b916      	cbnz	r6, 80097be <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097b8:	a802      	add	r0, sp, #8
 80097ba:	f000 fd79 	bl	800a2b0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80097be:	f7ff fab1 	bl	8008d24 <vPortExitCritical>
		vTaskSuspendAll();
 80097c2:	f000 fb07 	bl	8009dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c6:	f7ff fa8d 	bl	8008ce4 <vPortEnterCritical>
 80097ca:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80097ce:	2bff      	cmp	r3, #255	@ 0xff
 80097d0:	d101      	bne.n	80097d6 <xQueueSemaphoreTake+0xd6>
 80097d2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80097d6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80097da:	2bff      	cmp	r3, #255	@ 0xff
 80097dc:	d101      	bne.n	80097e2 <xQueueSemaphoreTake+0xe2>
 80097de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097e2:	f7ff fa9f 	bl	8008d24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097e6:	a901      	add	r1, sp, #4
 80097e8:	a802      	add	r0, sp, #8
 80097ea:	f000 fd6d 	bl	800a2c8 <xTaskCheckForTimeOut>
 80097ee:	bb50      	cbnz	r0, 8009846 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7ff fbb7 	bl	8008f64 <prvIsQueueEmpty>
 80097f6:	b300      	cbz	r0, 800983a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	b93b      	cbnz	r3, 800980c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 80097fc:	f7ff fa72 	bl	8008ce4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009800:	68a0      	ldr	r0, [r4, #8]
 8009802:	f000 fdb9 	bl	800a378 <xTaskPriorityInherit>
 8009806:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009808:	f7ff fa8c 	bl	8008d24 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800980c:	9901      	ldr	r1, [sp, #4]
 800980e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009812:	f000 fcd3 	bl	800a1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009816:	4620      	mov	r0, r4
 8009818:	f7ff fbf7 	bl	800900a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800981c:	f000 fb7e 	bl	8009f1c <xTaskResumeAll>
 8009820:	b948      	cbnz	r0, 8009836 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8009822:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800982a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	2601      	movs	r6, #1
 8009838:	e781      	b.n	800973e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800983a:	4620      	mov	r0, r4
 800983c:	f7ff fbe5 	bl	800900a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009840:	f000 fb6c 	bl	8009f1c <xTaskResumeAll>
 8009844:	e7f7      	b.n	8009836 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8009846:	4620      	mov	r0, r4
 8009848:	f7ff fbdf 	bl	800900a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800984c:	f000 fb66 	bl	8009f1c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009850:	4620      	mov	r0, r4
 8009852:	f7ff fb87 	bl	8008f64 <prvIsQueueEmpty>
 8009856:	2800      	cmp	r0, #0
 8009858:	d0ed      	beq.n	8009836 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800985a:	b165      	cbz	r5, 8009876 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800985c:	f7ff fa42 	bl	8008ce4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009860:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009862:	b119      	cbz	r1, 800986c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009864:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009866:	6819      	ldr	r1, [r3, #0]
 8009868:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800986c:	68a0      	ldr	r0, [r4, #8]
 800986e:	f000 fe03 	bl	800a478 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009872:	f7ff fa57 	bl	8008d24 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009876:	2000      	movs	r0, #0
 8009878:	e780      	b.n	800977c <xQueueSemaphoreTake+0x7c>

0800987a <xQueueTakeMutexRecursive>:
	{
 800987a:	b570      	push	{r4, r5, r6, lr}
 800987c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800987e:	4604      	mov	r4, r0
 8009880:	b940      	cbnz	r0, 8009894 <xQueueTakeMutexRecursive+0x1a>
 8009882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	e7fe      	b.n	8009892 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009894:	6886      	ldr	r6, [r0, #8]
 8009896:	f000 fd59 	bl	800a34c <xTaskGetCurrentTaskHandle>
 800989a:	4286      	cmp	r6, r0
 800989c:	d104      	bne.n	80098a8 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800989e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80098a0:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098a2:	3301      	adds	r3, #1
 80098a4:	60e3      	str	r3, [r4, #12]
	}
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80098a8:	4629      	mov	r1, r5
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff ff28 	bl	8009700 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d0f8      	beq.n	80098a6 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80098b4:	68e3      	ldr	r3, [r4, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60e3      	str	r3, [r4, #12]
 80098ba:	e7f4      	b.n	80098a6 <xQueueTakeMutexRecursive+0x2c>

080098bc <xQueueReceiveFromISR>:
{
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c0:	4689      	mov	r9, r1
 80098c2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80098c4:	4604      	mov	r4, r0
 80098c6:	b940      	cbnz	r0, 80098da <xQueueReceiveFromISR+0x1e>
 80098c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	e7fe      	b.n	80098d8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098da:	b951      	cbnz	r1, 80098f2 <xQueueReceiveFromISR+0x36>
 80098dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80098de:	b143      	cbz	r3, 80098f2 <xQueueReceiveFromISR+0x36>
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	e7fe      	b.n	80098f0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098f2:	f7ff fb09 	bl	8008f08 <vPortValidateInterruptPriority>
	__asm volatile
 80098f6:	f3ef 8711 	mrs	r7, BASEPRI
 80098fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800990a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800990c:	b30d      	cbz	r5, 8009952 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800990e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009912:	4649      	mov	r1, r9
 8009914:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009916:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8009918:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800991a:	f7ff fb61 	bl	8008fe0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800991e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8009920:	1c73      	adds	r3, r6, #1
 8009922:	d111      	bne.n	8009948 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	b153      	cbz	r3, 800993e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009928:	f104 0010 	add.w	r0, r4, #16
 800992c:	f000 fc7e 	bl	800a22c <xTaskRemoveFromEventList>
 8009930:	b128      	cbz	r0, 800993e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	d002      	beq.n	800993e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800993e:	2001      	movs	r0, #1
	__asm volatile
 8009940:	f387 8811 	msr	BASEPRI, r7
}
 8009944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009948:	3601      	adds	r6, #1
 800994a:	b276      	sxtb	r6, r6
 800994c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8009950:	e7f5      	b.n	800993e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8009952:	4628      	mov	r0, r5
 8009954:	e7f4      	b.n	8009940 <xQueueReceiveFromISR+0x84>
	...

08009958 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009958:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800995a:	4a07      	ldr	r2, [pc, #28]	@ (8009978 <vQueueAddToRegistry+0x20>)
	{
 800995c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800995e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8009962:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8009966:	b91d      	cbnz	r5, 8009970 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009968:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800996c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800996e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009970:	3301      	adds	r3, #1
 8009972:	2b08      	cmp	r3, #8
 8009974:	d1f3      	bne.n	800995e <vQueueAddToRegistry+0x6>
 8009976:	e7fa      	b.n	800996e <vQueueAddToRegistry+0x16>
 8009978:	240155d4 	.word	0x240155d4

0800997c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800997c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800997e:	4a09      	ldr	r2, [pc, #36]	@ (80099a4 <vQueueUnregisterQueue+0x28>)
	{
 8009980:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009982:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009986:	00dc      	lsls	r4, r3, #3
 8009988:	4281      	cmp	r1, r0
 800998a:	d106      	bne.n	800999a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800998c:	4a06      	ldr	r2, [pc, #24]	@ (80099a8 <vQueueUnregisterQueue+0x2c>)
 800998e:	2100      	movs	r1, #0
 8009990:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009994:	4422      	add	r2, r4
 8009996:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009998:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800999a:	3301      	adds	r3, #1
 800999c:	2b08      	cmp	r3, #8
 800999e:	d1f0      	bne.n	8009982 <vQueueUnregisterQueue+0x6>
 80099a0:	e7fa      	b.n	8009998 <vQueueUnregisterQueue+0x1c>
 80099a2:	bf00      	nop
 80099a4:	240155d8 	.word	0x240155d8
 80099a8:	240155d4 	.word	0x240155d4

080099ac <vQueueDelete>:
{
 80099ac:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80099ae:	b940      	cbnz	r0, 80099c2 <vQueueDelete+0x16>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	e7fe      	b.n	80099c0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80099c2:	f7ff ffdb 	bl	800997c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80099c6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80099ca:	b91b      	cbnz	r3, 80099d4 <vQueueDelete+0x28>
}
 80099cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80099d0:	f7ff b8a2 	b.w	8008b18 <vPortFree>
}
 80099d4:	bd10      	pop	{r4, pc}

080099d6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099d6:	b570      	push	{r4, r5, r6, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099de:	f7ff f981 	bl	8008ce4 <vPortEnterCritical>
 80099e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80099e6:	2bff      	cmp	r3, #255	@ 0xff
 80099e8:	d102      	bne.n	80099f0 <vQueueWaitForMessageRestricted+0x1a>
 80099ea:	2300      	movs	r3, #0
 80099ec:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80099f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80099f4:	2bff      	cmp	r3, #255	@ 0xff
 80099f6:	d102      	bne.n	80099fe <vQueueWaitForMessageRestricted+0x28>
 80099f8:	2300      	movs	r3, #0
 80099fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80099fe:	f7ff f991 	bl	8008d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a04:	b92b      	cbnz	r3, 8009a12 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a06:	4632      	mov	r2, r6
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009a0e:	f000 fbef 	bl	800a1f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a12:	4620      	mov	r0, r4
	}
 8009a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8009a18:	f7ff baf7 	b.w	800900a <prvUnlockQueue>

08009a1c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a20:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a22:	f7ff f95f 	bl	8008ce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	@ (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8009a28:	4e2f      	ldr	r6, [pc, #188]	@ (8009ae8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	4f2f      	ldr	r7, [pc, #188]	@ (8009aec <prvAddNewTaskToReadyList+0xd0>)
 8009a2e:	3201      	adds	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009a32:	6835      	ldr	r5, [r6, #0]
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	d14a      	bne.n	8009ace <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a38:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d11f      	bne.n	8009a80 <prvAddNewTaskToReadyList+0x64>
 8009a40:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a42:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a44:	4640      	mov	r0, r8
 8009a46:	f7ff f8a5 	bl	8008b94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a4a:	f108 0814 	add.w	r8, r8, #20
 8009a4e:	2d38      	cmp	r5, #56	@ 0x38
 8009a50:	d1f7      	bne.n	8009a42 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a52:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8009b14 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8009a56:	4d26      	ldr	r5, [pc, #152]	@ (8009af0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8009a58:	4640      	mov	r0, r8
 8009a5a:	f7ff f89b 	bl	8008b94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f7ff f898 	bl	8008b94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a64:	4823      	ldr	r0, [pc, #140]	@ (8009af4 <prvAddNewTaskToReadyList+0xd8>)
 8009a66:	f7ff f895 	bl	8008b94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a6a:	4823      	ldr	r0, [pc, #140]	@ (8009af8 <prvAddNewTaskToReadyList+0xdc>)
 8009a6c:	f7ff f892 	bl	8008b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a70:	4822      	ldr	r0, [pc, #136]	@ (8009afc <prvAddNewTaskToReadyList+0xe0>)
 8009a72:	f7ff f88f 	bl	8008b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a76:	4b22      	ldr	r3, [pc, #136]	@ (8009b00 <prvAddNewTaskToReadyList+0xe4>)
 8009a78:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a7c:	4b21      	ldr	r3, [pc, #132]	@ (8009b04 <prvAddNewTaskToReadyList+0xe8>)
 8009a7e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8009a80:	4a21      	ldr	r2, [pc, #132]	@ (8009b08 <prvAddNewTaskToReadyList+0xec>)
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	3301      	adds	r3, #1
 8009a86:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009a88:	4a20      	ldr	r2, [pc, #128]	@ (8009b0c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a8a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009a8c:	6811      	ldr	r1, [r2, #0]
 8009a8e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a90:	428b      	cmp	r3, r1
 8009a92:	d900      	bls.n	8009a96 <prvAddNewTaskToReadyList+0x7a>
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	2014      	movs	r0, #20
 8009a98:	1d21      	adds	r1, r4, #4
 8009a9a:	fb00 7003 	mla	r0, r0, r3, r7
 8009a9e:	f7ff f887 	bl	8008bb0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009aa2:	f7ff f93f 	bl	8008d24 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b10 <prvAddNewTaskToReadyList+0xf4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	b173      	cbz	r3, 8009aca <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aac:	6833      	ldr	r3, [r6, #0]
 8009aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d209      	bcs.n	8009aca <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8009ab6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009abe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	f3bf 8f6f 	isb	sy
}
 8009aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009ace:	4b10      	ldr	r3, [pc, #64]	@ (8009b10 <prvAddNewTaskToReadyList+0xf4>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ad2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	d1d3      	bne.n	8009a80 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ad8:	6832      	ldr	r2, [r6, #0]
 8009ada:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d8cf      	bhi.n	8009a80 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009ae0:	6034      	str	r4, [r6, #0]
 8009ae2:	e7cd      	b.n	8009a80 <prvAddNewTaskToReadyList+0x64>
 8009ae4:	24015638 	.word	0x24015638
 8009ae8:	24015b0c 	.word	0x24015b0c
 8009aec:	240156ac 	.word	0x240156ac
 8009af0:	24015684 	.word	0x24015684
 8009af4:	24015668 	.word	0x24015668
 8009af8:	24015654 	.word	0x24015654
 8009afc:	2401563c 	.word	0x2401563c
 8009b00:	24015680 	.word	0x24015680
 8009b04:	2401567c 	.word	0x2401567c
 8009b08:	2401561c 	.word	0x2401561c
 8009b0c:	24015630 	.word	0x24015630
 8009b10:	2401562c 	.word	0x2401562c
 8009b14:	24015698 	.word	0x24015698

08009b18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b1a:	4b15      	ldr	r3, [pc, #84]	@ (8009b70 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8009b1c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b1e:	4d15      	ldr	r5, [pc, #84]	@ (8009b74 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8009b20:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009b22:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b24:	6828      	ldr	r0, [r5, #0]
 8009b26:	3004      	adds	r0, #4
 8009b28:	f7ff f864 	bl	8008bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b2c:	1c73      	adds	r3, r6, #1
 8009b2e:	d107      	bne.n	8009b40 <prvAddCurrentTaskToDelayedList+0x28>
 8009b30:	b137      	cbz	r7, 8009b40 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b32:	6829      	ldr	r1, [r5, #0]
 8009b34:	4810      	ldr	r0, [pc, #64]	@ (8009b78 <prvAddCurrentTaskToDelayedList+0x60>)
 8009b36:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b3c:	f7ff b838 	b.w	8008bb0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b40:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b46:	d307      	bcc.n	8009b58 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b48:	4b0c      	ldr	r3, [pc, #48]	@ (8009b7c <prvAddCurrentTaskToDelayedList+0x64>)
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	6829      	ldr	r1, [r5, #0]
}
 8009b4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b52:	3104      	adds	r1, #4
 8009b54:	f7ff b837 	b.w	8008bc6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b58:	4b09      	ldr	r3, [pc, #36]	@ (8009b80 <prvAddCurrentTaskToDelayedList+0x68>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	6829      	ldr	r1, [r5, #0]
 8009b5e:	3104      	adds	r1, #4
 8009b60:	f7ff f831 	bl	8008bc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b64:	4b07      	ldr	r3, [pc, #28]	@ (8009b84 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	42a2      	cmp	r2, r4
 8009b6a:	d900      	bls.n	8009b6e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8009b6c:	601c      	str	r4, [r3, #0]
}
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	24015634 	.word	0x24015634
 8009b74:	24015b0c 	.word	0x24015b0c
 8009b78:	2401563c 	.word	0x2401563c
 8009b7c:	2401567c 	.word	0x2401567c
 8009b80:	24015680 	.word	0x24015680
 8009b84:	24015618 	.word	0x24015618

08009b88 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b88:	4a06      	ldr	r2, [pc, #24]	@ (8009ba4 <prvResetNextTaskUnblockTime+0x1c>)
 8009b8a:	6813      	ldr	r3, [r2, #0]
 8009b8c:	6819      	ldr	r1, [r3, #0]
 8009b8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <prvResetNextTaskUnblockTime+0x20>)
 8009b90:	b919      	cbnz	r1, 8009b9a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b92:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b96:	601a      	str	r2, [r3, #0]
}
 8009b98:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b9a:	6812      	ldr	r2, [r2, #0]
 8009b9c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b9e:	68d2      	ldr	r2, [r2, #12]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	e7f8      	b.n	8009b96 <prvResetNextTaskUnblockTime+0xe>
 8009ba4:	24015680 	.word	0x24015680
 8009ba8:	24015618 	.word	0x24015618

08009bac <prvDeleteTCB>:
	{
 8009bac:	b510      	push	{r4, lr}
 8009bae:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009bb0:	3058      	adds	r0, #88	@ 0x58
 8009bb2:	f020 fad7 	bl	802a164 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bb6:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8009bba:	b93b      	cbnz	r3, 8009bcc <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8009bbc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009bbe:	f7fe ffab 	bl	8008b18 <vPortFree>
				vPortFree( pxTCB );
 8009bc2:	4620      	mov	r0, r4
	}
 8009bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009bc8:	f7fe bfa6 	b.w	8008b18 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d0f8      	beq.n	8009bc2 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d008      	beq.n	8009be6 <prvDeleteTCB+0x3a>
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	e7fe      	b.n	8009be4 <prvDeleteTCB+0x38>
	}
 8009be6:	bd10      	pop	{r4, pc}

08009be8 <prvIdleTask>:
{
 8009be8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bea:	4c14      	ldr	r4, [pc, #80]	@ (8009c3c <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bec:	4f14      	ldr	r7, [pc, #80]	@ (8009c40 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8009bee:	4d15      	ldr	r5, [pc, #84]	@ (8009c44 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	b983      	cbnz	r3, 8009c16 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf4:	4b14      	ldr	r3, [pc, #80]	@ (8009c48 <prvIdleTask+0x60>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d909      	bls.n	8009c10 <prvIdleTask+0x28>
				taskYIELD();
 8009bfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009c10:	f7f6 fd8a 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009c14:	e7eb      	b.n	8009bee <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8009c16:	f7ff f865 	bl	8008ce4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c1e:	1d30      	adds	r0, r6, #4
 8009c20:	f7fe ffe8 	bl	8008bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009c30:	f7ff f878 	bl	8008d24 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ffb9 	bl	8009bac <prvDeleteTCB>
 8009c3a:	e7d9      	b.n	8009bf0 <prvIdleTask+0x8>
 8009c3c:	24015650 	.word	0x24015650
 8009c40:	24015654 	.word	0x24015654
 8009c44:	24015638 	.word	0x24015638
 8009c48:	240156ac 	.word	0x240156ac

08009c4c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c50:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c52:	4607      	mov	r7, r0
 8009c54:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c56:	21a5      	movs	r1, #165	@ 0xa5
 8009c58:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c5a:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c5c:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c5e:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c62:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009c64:	f020 fa24 	bl	802a0b0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009c6a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c6c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	d043      	beq.n	8009cfc <prvInitialiseNewTask.constprop.0+0xb0>
 8009c74:	1e6b      	subs	r3, r5, #1
 8009c76:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8009c7a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c7c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009c80:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8009c84:	b109      	cbz	r1, 8009c8a <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c86:	42ab      	cmp	r3, r5
 8009c88:	d1f8      	bne.n	8009c7c <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c90:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8009c92:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c96:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c98:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8009c9a:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c9e:	bf28      	it	cs
 8009ca0:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009ca2:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009ca4:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca6:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009caa:	f7fe ff7e 	bl	8008baa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cae:	f104 0018 	add.w	r0, r4, #24
 8009cb2:	f7fe ff7a 	bl	8008baa <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cb6:	224c      	movs	r2, #76	@ 0x4c
 8009cb8:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8009cba:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cbe:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cc2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cc6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8009cc8:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ccc:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cd0:	f020 f9ee 	bl	802a0b0 <memset>
 8009cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d04 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cde:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8009ce0:	33d0      	adds	r3, #208	@ 0xd0
 8009ce2:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ce4:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ce6:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ce8:	f7fe ffd2 	bl	8008c90 <pxPortInitialiseStack>
 8009cec:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009cee:	f1b9 0f00 	cmp.w	r9, #0
 8009cf2:	d001      	beq.n	8009cf8 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cf4:	f8c9 4000 	str.w	r4, [r9]
}
 8009cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cfc:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8009d00:	e7c6      	b.n	8009c90 <prvInitialiseNewTask.constprop.0+0x44>
 8009d02:	bf00      	nop
 8009d04:	24016584 	.word	0x24016584

08009d08 <xTaskCreateStatic>:
	{
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009d10:	b945      	cbnz	r5, 8009d24 <xTaskCreateStatic+0x1c>
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	e7fe      	b.n	8009d22 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8009d24:	b944      	cbnz	r4, 8009d38 <xTaskCreateStatic+0x30>
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	e7fe      	b.n	8009d36 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d38:	26ac      	movs	r6, #172	@ 0xac
 8009d3a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d3c:	9e05      	ldr	r6, [sp, #20]
 8009d3e:	2eac      	cmp	r6, #172	@ 0xac
 8009d40:	d008      	beq.n	8009d54 <xTaskCreateStatic+0x4c>
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	e7fe      	b.n	8009d52 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d54:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d56:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d58:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d5a:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d5e:	ad04      	add	r5, sp, #16
 8009d60:	9402      	str	r4, [sp, #8]
 8009d62:	9501      	str	r5, [sp, #4]
 8009d64:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009d66:	9500      	str	r5, [sp, #0]
 8009d68:	f7ff ff70 	bl	8009c4c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7ff fe55 	bl	8009a1c <prvAddNewTaskToReadyList>
	}
 8009d72:	9804      	ldr	r0, [sp, #16]
 8009d74:	b006      	add	sp, #24
 8009d76:	bd70      	pop	{r4, r5, r6, pc}

08009d78 <xTaskCreate>:
	{
 8009d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d80:	0090      	lsls	r0, r2, #2
	{
 8009d82:	4688      	mov	r8, r1
 8009d84:	4616      	mov	r6, r2
 8009d86:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d88:	f7fe fe2e 	bl	80089e8 <pvPortMalloc>
			if( pxStack != NULL )
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	b920      	cbnz	r0, 8009d9a <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009d94:	b005      	add	sp, #20
 8009d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d9a:	20ac      	movs	r0, #172	@ 0xac
 8009d9c:	f7fe fe24 	bl	80089e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009da0:	4604      	mov	r4, r0
 8009da2:	b198      	cbz	r0, 8009dcc <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009da4:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8009da6:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009da8:	4632      	mov	r2, r6
 8009daa:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dac:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009db0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009db2:	9002      	str	r0, [sp, #8]
 8009db4:	4638      	mov	r0, r7
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	f7ff ff45 	bl	8009c4c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7ff fe2a 	bl	8009a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dc8:	2001      	movs	r0, #1
 8009dca:	e7e3      	b.n	8009d94 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f7fe fea3 	bl	8008b18 <vPortFree>
		if( pxNewTCB != NULL )
 8009dd2:	e7dd      	b.n	8009d90 <xTaskCreate+0x18>

08009dd4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009dd4:	4a02      	ldr	r2, [pc, #8]	@ (8009de0 <vTaskSuspendAll+0xc>)
 8009dd6:	6813      	ldr	r3, [r2, #0]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	6013      	str	r3, [r2, #0]
}
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	24015614 	.word	0x24015614

08009de4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009de4:	4b01      	ldr	r3, [pc, #4]	@ (8009dec <xTaskGetTickCount+0x8>)
 8009de6:	6818      	ldr	r0, [r3, #0]
}
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	24015634 	.word	0x24015634

08009df0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ef0 <xTaskIncrementTick+0x100>)
 8009df2:	681b      	ldr	r3, [r3, #0]
{
 8009df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d172      	bne.n	8009ee2 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8009ef4 <xTaskIncrementTick+0x104>)
 8009dfe:	681c      	ldr	r4, [r3, #0]
 8009e00:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8009e02:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e04:	b9bc      	cbnz	r4, 8009e36 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009e06:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef8 <xTaskIncrementTick+0x108>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6812      	ldr	r2, [r2, #0]
 8009e0c:	b142      	cbz	r2, 8009e20 <xTaskIncrementTick+0x30>
 8009e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	e7fe      	b.n	8009e1e <xTaskIncrementTick+0x2e>
 8009e20:	4a36      	ldr	r2, [pc, #216]	@ (8009efc <xTaskIncrementTick+0x10c>)
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	6810      	ldr	r0, [r2, #0]
 8009e26:	6018      	str	r0, [r3, #0]
 8009e28:	6011      	str	r1, [r2, #0]
 8009e2a:	4a35      	ldr	r2, [pc, #212]	@ (8009f00 <xTaskIncrementTick+0x110>)
 8009e2c:	6813      	ldr	r3, [r2, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	f7ff fea9 	bl	8009b88 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e36:	4d33      	ldr	r5, [pc, #204]	@ (8009f04 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8009e38:	f04f 0b00 	mov.w	fp, #0
 8009e3c:	4e32      	ldr	r6, [pc, #200]	@ (8009f08 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	4f32      	ldr	r7, [pc, #200]	@ (8009f0c <xTaskIncrementTick+0x11c>)
 8009e42:	429c      	cmp	r4, r3
 8009e44:	d212      	bcs.n	8009e6c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	2114      	movs	r1, #20
 8009e4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009e4c:	434a      	muls	r2, r1
 8009e4e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8009e50:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8009e52:	4a2f      	ldr	r2, [pc, #188]	@ (8009f10 <xTaskIncrementTick+0x120>)
 8009e54:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8009e56:	bf28      	it	cs
 8009e58:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	bf18      	it	ne
 8009e60:	f04f 0b01 	movne.w	fp, #1
}
 8009e64:	4658      	mov	r0, fp
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e6c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8009ef8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8009e70:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8009f18 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e74:	f8d9 2000 	ldr.w	r2, [r9]
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	b91a      	cbnz	r2, 8009e84 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e80:	602a      	str	r2, [r5, #0]
					break;
 8009e82:	e7e0      	b.n	8009e46 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e84:	f8d9 2000 	ldr.w	r2, [r9]
 8009e88:	68d2      	ldr	r2, [r2, #12]
 8009e8a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8009e92:	428c      	cmp	r4, r1
 8009e94:	d201      	bcs.n	8009e9a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8009e96:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e98:	e7d5      	b.n	8009e46 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e9a:	f108 0304 	add.w	r3, r8, #4
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	f7fe fea7 	bl	8008bf4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ea6:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8009eaa:	b119      	cbz	r1, 8009eb4 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eac:	f108 0018 	add.w	r0, r8, #24
 8009eb0:	f7fe fea0 	bl	8008bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009eb4:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8009eb8:	f8da 1000 	ldr.w	r1, [sl]
 8009ebc:	4288      	cmp	r0, r1
 8009ebe:	d901      	bls.n	8009ec4 <xTaskIncrementTick+0xd4>
 8009ec0:	f8ca 0000 	str.w	r0, [sl]
 8009ec4:	2314      	movs	r3, #20
 8009ec6:	9901      	ldr	r1, [sp, #4]
 8009ec8:	fb03 6000 	mla	r0, r3, r0, r6
 8009ecc:	f7fe fe70 	bl	8008bb0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ed0:	6838      	ldr	r0, [r7, #0]
 8009ed2:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8009ed6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8009ed8:	4291      	cmp	r1, r2
 8009eda:	bf28      	it	cs
 8009edc:	f04f 0b01 	movcs.w	fp, #1
 8009ee0:	e7c8      	b.n	8009e74 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8009ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8009f14 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8009ee4:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 8009ee8:	6813      	ldr	r3, [r2, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	e7b9      	b.n	8009e64 <xTaskIncrementTick+0x74>
 8009ef0:	24015614 	.word	0x24015614
 8009ef4:	24015634 	.word	0x24015634
 8009ef8:	24015680 	.word	0x24015680
 8009efc:	2401567c 	.word	0x2401567c
 8009f00:	24015620 	.word	0x24015620
 8009f04:	24015618 	.word	0x24015618
 8009f08:	240156ac 	.word	0x240156ac
 8009f0c:	24015b0c 	.word	0x24015b0c
 8009f10:	24015624 	.word	0x24015624
 8009f14:	24015628 	.word	0x24015628
 8009f18:	24015630 	.word	0x24015630

08009f1c <xTaskResumeAll>:
{
 8009f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8009f20:	4c30      	ldr	r4, [pc, #192]	@ (8009fe4 <xTaskResumeAll+0xc8>)
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	b943      	cbnz	r3, 8009f38 <xTaskResumeAll+0x1c>
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	e7fe      	b.n	8009f36 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009f38:	f7fe fed4 	bl	8008ce4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f42:	6824      	ldr	r4, [r4, #0]
 8009f44:	b12c      	cbz	r4, 8009f52 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009f46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009f48:	f7fe feec 	bl	8008d24 <vPortExitCritical>
}
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f52:	4b25      	ldr	r3, [pc, #148]	@ (8009fe8 <xTaskResumeAll+0xcc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0f5      	beq.n	8009f46 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f5a:	4d24      	ldr	r5, [pc, #144]	@ (8009fec <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8009f5c:	4e24      	ldr	r6, [pc, #144]	@ (8009ff0 <xTaskResumeAll+0xd4>)
 8009f5e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800a000 <xTaskResumeAll+0xe4>
 8009f62:	e01d      	b.n	8009fa0 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f64:	68eb      	ldr	r3, [r5, #12]
 8009f66:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f68:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f6a:	f104 0018 	add.w	r0, r4, #24
 8009f6e:	f7fe fe41 	bl	8008bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f72:	4638      	mov	r0, r7
 8009f74:	f7fe fe3e 	bl	8008bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f7a:	6832      	ldr	r2, [r6, #0]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d900      	bls.n	8009f82 <xTaskResumeAll+0x66>
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	2014      	movs	r0, #20
 8009f84:	4639      	mov	r1, r7
 8009f86:	fb00 8003 	mla	r0, r0, r3, r8
 8009f8a:	f7fe fe11 	bl	8008bb0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f8e:	4b19      	ldr	r3, [pc, #100]	@ (8009ff4 <xTaskResumeAll+0xd8>)
 8009f90:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d302      	bcc.n	8009fa0 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8009f9a:	4b17      	ldr	r3, [pc, #92]	@ (8009ff8 <xTaskResumeAll+0xdc>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1de      	bne.n	8009f64 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8009fa6:	b10c      	cbz	r4, 8009fac <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8009fa8:	f7ff fdee 	bl	8009b88 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fac:	4d13      	ldr	r5, [pc, #76]	@ (8009ffc <xTaskResumeAll+0xe0>)
 8009fae:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009fb0:	b144      	cbz	r4, 8009fc4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8009fb2:	4e11      	ldr	r6, [pc, #68]	@ (8009ff8 <xTaskResumeAll+0xdc>)
 8009fb4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009fb6:	f7ff ff1b 	bl	8009df0 <xTaskIncrementTick>
 8009fba:	b100      	cbz	r0, 8009fbe <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8009fbc:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fbe:	3c01      	subs	r4, #1
 8009fc0:	d1f9      	bne.n	8009fb6 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8009fc2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <xTaskResumeAll+0xdc>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d0bc      	beq.n	8009f46 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8009fcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009fe0:	2401      	movs	r4, #1
 8009fe2:	e7b1      	b.n	8009f48 <xTaskResumeAll+0x2c>
 8009fe4:	24015614 	.word	0x24015614
 8009fe8:	24015638 	.word	0x24015638
 8009fec:	24015668 	.word	0x24015668
 8009ff0:	24015630 	.word	0x24015630
 8009ff4:	24015b0c 	.word	0x24015b0c
 8009ff8:	24015624 	.word	0x24015624
 8009ffc:	24015628 	.word	0x24015628
 800a000:	240156ac 	.word	0x240156ac

0800a004 <vTaskDelay>:
	{
 800a004:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a006:	b950      	cbnz	r0, 800a01e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800a008:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a010:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
	}
 800a01c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a01e:	4b0a      	ldr	r3, [pc, #40]	@ (800a048 <vTaskDelay+0x44>)
 800a020:	6819      	ldr	r1, [r3, #0]
 800a022:	b141      	cbz	r1, 800a036 <vTaskDelay+0x32>
 800a024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	e7fe      	b.n	800a034 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a036:	f7ff fecd 	bl	8009dd4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a03a:	f7ff fd6d 	bl	8009b18 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a03e:	f7ff ff6d 	bl	8009f1c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a042:	2800      	cmp	r0, #0
 800a044:	d0e0      	beq.n	800a008 <vTaskDelay+0x4>
 800a046:	e7e9      	b.n	800a01c <vTaskDelay+0x18>
 800a048:	24015614 	.word	0x24015614

0800a04c <vTaskSetApplicationTaskTag>:
	{
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800a050:	4604      	mov	r4, r0
 800a052:	b908      	cbnz	r0, 800a058 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a054:	4b04      	ldr	r3, [pc, #16]	@ (800a068 <vTaskSetApplicationTaskTag+0x1c>)
 800a056:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800a058:	f7fe fe44 	bl	8008ce4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a05c:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800a05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800a062:	f7fe be5f 	b.w	8008d24 <vPortExitCritical>
 800a066:	bf00      	nop
 800a068:	24015b0c 	.word	0x24015b0c

0800a06c <xTaskCallApplicationTaskHook>:
	{
 800a06c:	4603      	mov	r3, r0
 800a06e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800a070:	b90b      	cbnz	r3, 800a076 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800a072:	4b03      	ldr	r3, [pc, #12]	@ (800a080 <xTaskCallApplicationTaskHook+0x14>)
 800a074:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800a076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a078:	b103      	cbz	r3, 800a07c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800a07a:	4718      	bx	r3
	}
 800a07c:	4618      	mov	r0, r3
 800a07e:	4770      	bx	lr
 800a080:	24015b0c 	.word	0x24015b0c

0800a084 <vTaskStartScheduler>:
{
 800a084:	b510      	push	{r4, lr}
 800a086:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a088:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a08a:	aa07      	add	r2, sp, #28
 800a08c:	a906      	add	r1, sp, #24
 800a08e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a090:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a094:	f7fe fc6a 	bl	800896c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a098:	9b05      	ldr	r3, [sp, #20]
 800a09a:	9a07      	ldr	r2, [sp, #28]
 800a09c:	9302      	str	r3, [sp, #8]
 800a09e:	9b06      	ldr	r3, [sp, #24]
 800a0a0:	491b      	ldr	r1, [pc, #108]	@ (800a110 <vTaskStartScheduler+0x8c>)
 800a0a2:	481c      	ldr	r0, [pc, #112]	@ (800a114 <vTaskStartScheduler+0x90>)
 800a0a4:	e9cd 4300 	strd	r4, r3, [sp]
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	f7ff fe2d 	bl	8009d08 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a0ae:	b360      	cbz	r0, 800a10a <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800a0b0:	f000 fa8e 	bl	800a5d0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a0b4:	2801      	cmp	r0, #1
 800a0b6:	d11d      	bne.n	800a0f4 <vTaskStartScheduler+0x70>
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0c8:	4a13      	ldr	r2, [pc, #76]	@ (800a118 <vTaskStartScheduler+0x94>)
 800a0ca:	4914      	ldr	r1, [pc, #80]	@ (800a11c <vTaskStartScheduler+0x98>)
 800a0cc:	6813      	ldr	r3, [r2, #0]
 800a0ce:	3358      	adds	r3, #88	@ 0x58
 800a0d0:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0d2:	f04f 31ff 	mov.w	r1, #4294967295
 800a0d6:	4b12      	ldr	r3, [pc, #72]	@ (800a120 <vTaskStartScheduler+0x9c>)
 800a0d8:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800a0da:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800a0dc:	4b11      	ldr	r3, [pc, #68]	@ (800a124 <vTaskStartScheduler+0xa0>)
 800a0de:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0e0:	4b11      	ldr	r3, [pc, #68]	@ (800a128 <vTaskStartScheduler+0xa4>)
 800a0e2:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800a0e4:	6810      	ldr	r0, [r2, #0]
 800a0e6:	f7ff ffc1 	bl	800a06c <xTaskCallApplicationTaskHook>
}
 800a0ea:	b008      	add	sp, #32
 800a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800a0f0:	f7fe be88 	b.w	8008e04 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d108      	bne.n	800a10a <vTaskStartScheduler+0x86>
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	e7fe      	b.n	800a108 <vTaskStartScheduler+0x84>
}
 800a10a:	b008      	add	sp, #32
 800a10c:	bd10      	pop	{r4, pc}
 800a10e:	bf00      	nop
 800a110:	0802d3d0 	.word	0x0802d3d0
 800a114:	08009be9 	.word	0x08009be9
 800a118:	24015b0c 	.word	0x24015b0c
 800a11c:	240000bc 	.word	0x240000bc
 800a120:	24015618 	.word	0x24015618
 800a124:	2401562c 	.word	0x2401562c
 800a128:	24015634 	.word	0x24015634

0800a12c <vTaskSwitchContext>:
{
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a12e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <vTaskSwitchContext+0x78>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a8 <vTaskSwitchContext+0x7c>)
 800a134:	b112      	cbz	r2, 800a13c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a136:	2201      	movs	r2, #1
 800a138:	601a      	str	r2, [r3, #0]
}
 800a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800a13c:	4c1b      	ldr	r4, [pc, #108]	@ (800a1ac <vTaskSwitchContext+0x80>)
 800a13e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a140:	4e1b      	ldr	r6, [pc, #108]	@ (800a1b0 <vTaskSwitchContext+0x84>)
 800a142:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800a144:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800a146:	6820      	ldr	r0, [r4, #0]
 800a148:	f7ff ff90 	bl	800a06c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a14c:	6832      	ldr	r2, [r6, #0]
 800a14e:	4919      	ldr	r1, [pc, #100]	@ (800a1b4 <vTaskSwitchContext+0x88>)
 800a150:	fb07 f302 	mul.w	r3, r7, r2
 800a154:	58cd      	ldr	r5, [r1, r3]
 800a156:	18c8      	adds	r0, r1, r3
 800a158:	b1c5      	cbz	r5, 800a18c <vTaskSwitchContext+0x60>
 800a15a:	6845      	ldr	r5, [r0, #4]
 800a15c:	3308      	adds	r3, #8
 800a15e:	686d      	ldr	r5, [r5, #4]
 800a160:	440b      	add	r3, r1
 800a162:	429d      	cmp	r5, r3
 800a164:	6045      	str	r5, [r0, #4]
 800a166:	bf04      	itt	eq
 800a168:	686b      	ldreq	r3, [r5, #4]
 800a16a:	6043      	streq	r3, [r0, #4]
 800a16c:	2314      	movs	r3, #20
 800a16e:	fb03 1102 	mla	r1, r3, r2, r1
 800a172:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800a174:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	f7ff ff75 	bl	800a06c <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	4a0c      	ldr	r2, [pc, #48]	@ (800a1b8 <vTaskSwitchContext+0x8c>)
 800a186:	3358      	adds	r3, #88	@ 0x58
 800a188:	6013      	str	r3, [r2, #0]
}
 800a18a:	e7d6      	b.n	800a13a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a18c:	b942      	cbnz	r2, 800a1a0 <vTaskSwitchContext+0x74>
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	e7fe      	b.n	800a19e <vTaskSwitchContext+0x72>
 800a1a0:	3a01      	subs	r2, #1
 800a1a2:	e7d5      	b.n	800a150 <vTaskSwitchContext+0x24>
 800a1a4:	24015614 	.word	0x24015614
 800a1a8:	24015624 	.word	0x24015624
 800a1ac:	24015b0c 	.word	0x24015b0c
 800a1b0:	24015630 	.word	0x24015630
 800a1b4:	240156ac 	.word	0x240156ac
 800a1b8:	240000bc 	.word	0x240000bc

0800a1bc <vTaskPlaceOnEventList>:
{
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800a1c0:	b940      	cbnz	r0, 800a1d4 <vTaskPlaceOnEventList+0x18>
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	e7fe      	b.n	800a1d2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1d4:	4b05      	ldr	r3, [pc, #20]	@ (800a1ec <vTaskPlaceOnEventList+0x30>)
 800a1d6:	6819      	ldr	r1, [r3, #0]
 800a1d8:	3118      	adds	r1, #24
 800a1da:	f7fe fcf4 	bl	8008bc6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1de:	4620      	mov	r0, r4
 800a1e0:	2101      	movs	r1, #1
}
 800a1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1e6:	f7ff bc97 	b.w	8009b18 <prvAddCurrentTaskToDelayedList>
 800a1ea:	bf00      	nop
 800a1ec:	24015b0c 	.word	0x24015b0c

0800a1f0 <vTaskPlaceOnEventListRestricted>:
	{
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800a1f6:	b940      	cbnz	r0, 800a20a <vTaskPlaceOnEventListRestricted+0x1a>
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	e7fe      	b.n	800a208 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a20a:	4b07      	ldr	r3, [pc, #28]	@ (800a228 <vTaskPlaceOnEventListRestricted+0x38>)
 800a20c:	6819      	ldr	r1, [r3, #0]
 800a20e:	3118      	adds	r1, #24
 800a210:	f7fe fcce 	bl	8008bb0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800a214:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a216:	4621      	mov	r1, r4
 800a218:	bf0c      	ite	eq
 800a21a:	4628      	moveq	r0, r5
 800a21c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800a220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a224:	f7ff bc78 	b.w	8009b18 <prvAddCurrentTaskToDelayedList>
 800a228:	24015b0c 	.word	0x24015b0c

0800a22c <xTaskRemoveFromEventList>:
{
 800a22c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22e:	68c3      	ldr	r3, [r0, #12]
 800a230:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a232:	b944      	cbnz	r4, 800a246 <xTaskRemoveFromEventList+0x1a>
 800a234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	e7fe      	b.n	800a244 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a246:	f104 0518 	add.w	r5, r4, #24
 800a24a:	4628      	mov	r0, r5
 800a24c:	f7fe fcd2 	bl	8008bf4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a250:	4b11      	ldr	r3, [pc, #68]	@ (800a298 <xTaskRemoveFromEventList+0x6c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b9d3      	cbnz	r3, 800a28c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a256:	1d25      	adds	r5, r4, #4
 800a258:	4628      	mov	r0, r5
 800a25a:	f7fe fccb 	bl	8008bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a25e:	4a0f      	ldr	r2, [pc, #60]	@ (800a29c <xTaskRemoveFromEventList+0x70>)
 800a260:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a262:	6811      	ldr	r1, [r2, #0]
 800a264:	428b      	cmp	r3, r1
 800a266:	d900      	bls.n	800a26a <xTaskRemoveFromEventList+0x3e>
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	2014      	movs	r0, #20
 800a26c:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a0 <xTaskRemoveFromEventList+0x74>)
 800a26e:	4629      	mov	r1, r5
 800a270:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a274:	f7fe fc9c 	bl	8008bb0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a278:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a4 <xTaskRemoveFromEventList+0x78>)
 800a27a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a280:	429a      	cmp	r2, r3
 800a282:	d906      	bls.n	800a292 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800a284:	2001      	movs	r0, #1
 800a286:	4b08      	ldr	r3, [pc, #32]	@ (800a2a8 <xTaskRemoveFromEventList+0x7c>)
 800a288:	6018      	str	r0, [r3, #0]
}
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a28c:	4629      	mov	r1, r5
 800a28e:	4807      	ldr	r0, [pc, #28]	@ (800a2ac <xTaskRemoveFromEventList+0x80>)
 800a290:	e7f0      	b.n	800a274 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800a292:	2000      	movs	r0, #0
	return xReturn;
 800a294:	e7f9      	b.n	800a28a <xTaskRemoveFromEventList+0x5e>
 800a296:	bf00      	nop
 800a298:	24015614 	.word	0x24015614
 800a29c:	24015630 	.word	0x24015630
 800a2a0:	240156ac 	.word	0x240156ac
 800a2a4:	24015b0c 	.word	0x24015b0c
 800a2a8:	24015624 	.word	0x24015624
 800a2ac:	24015668 	.word	0x24015668

0800a2b0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2b0:	4b03      	ldr	r3, [pc, #12]	@ (800a2c0 <vTaskInternalSetTimeOutState+0x10>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	@ (800a2c4 <vTaskInternalSetTimeOutState+0x14>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6043      	str	r3, [r0, #4]
}
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	24015620 	.word	0x24015620
 800a2c4:	24015634 	.word	0x24015634

0800a2c8 <xTaskCheckForTimeOut>:
{
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	b940      	cbnz	r0, 800a2e2 <xTaskCheckForTimeOut+0x1a>
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	e7fe      	b.n	800a2e0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800a2e2:	b941      	cbnz	r1, 800a2f6 <xTaskCheckForTimeOut+0x2e>
 800a2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	e7fe      	b.n	800a2f4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800a2f6:	f7fe fcf5 	bl	8008ce4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a338 <xTaskCheckForTimeOut+0x70>)
 800a2fc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	1c5a      	adds	r2, r3, #1
 800a302:	d010      	beq.n	800a326 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a304:	480d      	ldr	r0, [pc, #52]	@ (800a33c <xTaskCheckForTimeOut+0x74>)
 800a306:	682e      	ldr	r6, [r5, #0]
 800a308:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a30a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a30c:	4286      	cmp	r6, r0
 800a30e:	d001      	beq.n	800a314 <xTaskCheckForTimeOut+0x4c>
 800a310:	428a      	cmp	r2, r1
 800a312:	d90f      	bls.n	800a334 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a314:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a316:	4283      	cmp	r3, r0
 800a318:	d90a      	bls.n	800a330 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800a31a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a31c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800a31e:	4413      	add	r3, r2
 800a320:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a322:	f7ff ffc5 	bl	800a2b0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800a326:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a328:	f7fe fcfc 	bl	8008d24 <vPortExitCritical>
}
 800a32c:	4620      	mov	r0, r4
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a334:	2401      	movs	r4, #1
 800a336:	e7f7      	b.n	800a328 <xTaskCheckForTimeOut+0x60>
 800a338:	24015634 	.word	0x24015634
 800a33c:	24015620 	.word	0x24015620

0800a340 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a340:	4b01      	ldr	r3, [pc, #4]	@ (800a348 <vTaskMissedYield+0x8>)
 800a342:	2201      	movs	r2, #1
 800a344:	601a      	str	r2, [r3, #0]
}
 800a346:	4770      	bx	lr
 800a348:	24015624 	.word	0x24015624

0800a34c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a34c:	4b01      	ldr	r3, [pc, #4]	@ (800a354 <xTaskGetCurrentTaskHandle+0x8>)
 800a34e:	6818      	ldr	r0, [r3, #0]
	}
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	24015b0c 	.word	0x24015b0c

0800a358 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a358:	4b05      	ldr	r3, [pc, #20]	@ (800a370 <xTaskGetSchedulerState+0x18>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	b133      	cbz	r3, 800a36c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35e:	4b05      	ldr	r3, [pc, #20]	@ (800a374 <xTaskGetSchedulerState+0x1c>)
 800a360:	6818      	ldr	r0, [r3, #0]
 800a362:	fab0 f080 	clz	r0, r0
 800a366:	0940      	lsrs	r0, r0, #5
 800a368:	0040      	lsls	r0, r0, #1
 800a36a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a36c:	2001      	movs	r0, #1
	}
 800a36e:	4770      	bx	lr
 800a370:	2401562c 	.word	0x2401562c
 800a374:	24015614 	.word	0x24015614

0800a378 <xTaskPriorityInherit>:
	{
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800a37a:	4604      	mov	r4, r0
 800a37c:	b338      	cbz	r0, 800a3ce <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a37e:	4d1a      	ldr	r5, [pc, #104]	@ (800a3e8 <xTaskPriorityInherit+0x70>)
 800a380:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800a382:	682a      	ldr	r2, [r5, #0]
 800a384:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a386:	4293      	cmp	r3, r2
 800a388:	d226      	bcs.n	800a3d8 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a38a:	6982      	ldr	r2, [r0, #24]
 800a38c:	2a00      	cmp	r2, #0
 800a38e:	db04      	blt.n	800a39a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a390:	682a      	ldr	r2, [r5, #0]
 800a392:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a394:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a398:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a39a:	2214      	movs	r2, #20
 800a39c:	4e13      	ldr	r6, [pc, #76]	@ (800a3ec <xTaskPriorityInherit+0x74>)
 800a39e:	fb02 6303 	mla	r3, r2, r3, r6
 800a3a2:	6962      	ldr	r2, [r4, #20]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d113      	bne.n	800a3d0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3a8:	1d27      	adds	r7, r4, #4
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	f7fe fc22 	bl	8008bf4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3b0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3b2:	4a0f      	ldr	r2, [pc, #60]	@ (800a3f0 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3b6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3ba:	428b      	cmp	r3, r1
 800a3bc:	d900      	bls.n	800a3c0 <xTaskPriorityInherit+0x48>
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	2014      	movs	r0, #20
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	fb00 6003 	mla	r0, r0, r3, r6
 800a3c8:	f7fe fbf2 	bl	8008bb0 <vListInsertEnd>
				xReturn = pdTRUE;
 800a3cc:	2001      	movs	r0, #1
	}
 800a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3d6:	e7f9      	b.n	800a3cc <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800a3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3de:	4298      	cmp	r0, r3
 800a3e0:	bf2c      	ite	cs
 800a3e2:	2000      	movcs	r0, #0
 800a3e4:	2001      	movcc	r0, #1
 800a3e6:	e7f2      	b.n	800a3ce <xTaskPriorityInherit+0x56>
 800a3e8:	24015b0c 	.word	0x24015b0c
 800a3ec:	240156ac 	.word	0x240156ac
 800a3f0:	24015630 	.word	0x24015630

0800a3f4 <xTaskPriorityDisinherit>:
	{
 800a3f4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800a3f6:	b908      	cbnz	r0, 800a3fc <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800a3f8:	2000      	movs	r0, #0
	}
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a3fc:	4b1b      	ldr	r3, [pc, #108]	@ (800a46c <xTaskPriorityDisinherit+0x78>)
 800a3fe:	681c      	ldr	r4, [r3, #0]
 800a400:	4284      	cmp	r4, r0
 800a402:	d008      	beq.n	800a416 <xTaskPriorityDisinherit+0x22>
 800a404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	e7fe      	b.n	800a414 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a416:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a418:	b943      	cbnz	r3, 800a42c <xTaskPriorityDisinherit+0x38>
 800a41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	e7fe      	b.n	800a42a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a42c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800a42e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a430:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800a432:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a434:	4291      	cmp	r1, r2
 800a436:	d0df      	beq.n	800a3f8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1dd      	bne.n	800a3f8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43c:	1d25      	adds	r5, r4, #4
 800a43e:	4628      	mov	r0, r5
 800a440:	f7fe fbd8 	bl	8008bf4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a444:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a446:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a44a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a44c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a44e:	4a08      	ldr	r2, [pc, #32]	@ (800a470 <xTaskPriorityDisinherit+0x7c>)
 800a450:	6811      	ldr	r1, [r2, #0]
 800a452:	428b      	cmp	r3, r1
 800a454:	d900      	bls.n	800a458 <xTaskPriorityDisinherit+0x64>
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	4a06      	ldr	r2, [pc, #24]	@ (800a474 <xTaskPriorityDisinherit+0x80>)
 800a45a:	2014      	movs	r0, #20
 800a45c:	4629      	mov	r1, r5
 800a45e:	fb00 2003 	mla	r0, r0, r3, r2
 800a462:	f7fe fba5 	bl	8008bb0 <vListInsertEnd>
					xReturn = pdTRUE;
 800a466:	2001      	movs	r0, #1
		return xReturn;
 800a468:	e7c7      	b.n	800a3fa <xTaskPriorityDisinherit+0x6>
 800a46a:	bf00      	nop
 800a46c:	24015b0c 	.word	0x24015b0c
 800a470:	24015630 	.word	0x24015630
 800a474:	240156ac 	.word	0x240156ac

0800a478 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800a478:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800a47a:	4604      	mov	r4, r0
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d042      	beq.n	800a506 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800a480:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a482:	b942      	cbnz	r2, 800a496 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	e7fe      	b.n	800a494 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a496:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a498:	4299      	cmp	r1, r3
 800a49a:	bf38      	it	cc
 800a49c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a49e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	d030      	beq.n	800a506 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a4a4:	2a01      	cmp	r2, #1
 800a4a6:	d12e      	bne.n	800a506 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800a4a8:	4a17      	ldr	r2, [pc, #92]	@ (800a508 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	4282      	cmp	r2, r0
 800a4ae:	d108      	bne.n	800a4c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	e7fe      	b.n	800a4c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4c2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4c4:	4d11      	ldr	r5, [pc, #68]	@ (800a50c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4c6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4c8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800a4cc:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4ce:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d2:	bfa8      	it	ge
 800a4d4:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4d8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4da:	bfa8      	it	ge
 800a4dc:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d111      	bne.n	800a506 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e2:	1d06      	adds	r6, r0, #4
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7fe fb85 	bl	8008bf4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a4ea:	4a09      	ldr	r2, [pc, #36]	@ (800a510 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a4ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a4ee:	6811      	ldr	r1, [r2, #0]
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	d900      	bls.n	800a4f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	2014      	movs	r0, #20
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800a4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800a502:	f7fe bb55 	b.w	8008bb0 <vListInsertEnd>
	}
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	24015b0c 	.word	0x24015b0c
 800a50c:	240156ac 	.word	0x240156ac
 800a510:	24015630 	.word	0x24015630

0800a514 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a514:	4b04      	ldr	r3, [pc, #16]	@ (800a528 <pvTaskIncrementMutexHeldCount+0x14>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	b11a      	cbz	r2, 800a522 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a51a:	6819      	ldr	r1, [r3, #0]
 800a51c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800a51e:	3201      	adds	r2, #1
 800a520:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800a522:	6818      	ldr	r0, [r3, #0]
	}
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	24015b0c 	.word	0x24015b0c

0800a52c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800a52c:	4291      	cmp	r1, r2
{
 800a52e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a530:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a532:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800a534:	d80a      	bhi.n	800a54c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a536:	1ad2      	subs	r2, r2, r3
 800a538:	6983      	ldr	r3, [r0, #24]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d20d      	bcs.n	800a55a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a53e:	1d01      	adds	r1, r0, #4
 800a540:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	f7fe fb3f 	bl	8008bc6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a548:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800a54a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d201      	bcs.n	800a554 <prvInsertTimerInActiveList+0x28>
 800a550:	4299      	cmp	r1, r3
 800a552:	d202      	bcs.n	800a55a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a554:	1d01      	adds	r1, r0, #4
 800a556:	4b03      	ldr	r3, [pc, #12]	@ (800a564 <prvInsertTimerInActiveList+0x38>)
 800a558:	e7f3      	b.n	800a542 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800a55a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a55c:	e7f5      	b.n	800a54a <prvInsertTimerInActiveList+0x1e>
 800a55e:	bf00      	nop
 800a560:	24015c0c 	.word	0x24015c0c
 800a564:	24015c10 	.word	0x24015c10

0800a568 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800a56a:	4c11      	ldr	r4, [pc, #68]	@ (800a5b0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800a56c:	f7fe fbba 	bl	8008ce4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	b9bd      	cbnz	r5, 800a5a4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a574:	4f0f      	ldr	r7, [pc, #60]	@ (800a5b4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800a576:	4e10      	ldr	r6, [pc, #64]	@ (800a5b8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800a578:	4638      	mov	r0, r7
 800a57a:	f7fe fb0b 	bl	8008b94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a57e:	4630      	mov	r0, r6
 800a580:	f7fe fb08 	bl	8008b94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a584:	4b0d      	ldr	r3, [pc, #52]	@ (800a5bc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a586:	4a0e      	ldr	r2, [pc, #56]	@ (800a5c0 <prvCheckForValidListAndQueue+0x58>)
 800a588:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800a58a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a58c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800a58e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c4 <prvCheckForValidListAndQueue+0x5c>)
 800a590:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a592:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c8 <prvCheckForValidListAndQueue+0x60>)
 800a594:	9500      	str	r5, [sp, #0]
 800a596:	f7fe fdaf 	bl	80090f8 <xQueueGenericCreateStatic>
 800a59a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a59c:	b110      	cbz	r0, 800a5a4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a59e:	490b      	ldr	r1, [pc, #44]	@ (800a5cc <prvCheckForValidListAndQueue+0x64>)
 800a5a0:	f7ff f9da 	bl	8009958 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800a5a4:	b003      	add	sp, #12
 800a5a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800a5aa:	f7fe bbbb 	b.w	8008d24 <vPortExitCritical>
 800a5ae:	bf00      	nop
 800a5b0:	24015c08 	.word	0x24015c08
 800a5b4:	24015c28 	.word	0x24015c28
 800a5b8:	24015c14 	.word	0x24015c14
 800a5bc:	24015c10 	.word	0x24015c10
 800a5c0:	24015b60 	.word	0x24015b60
 800a5c4:	24015c0c 	.word	0x24015c0c
 800a5c8:	24015b10 	.word	0x24015b10
 800a5cc:	0802d3d5 	.word	0x0802d3d5

0800a5d0 <xTimerCreateTimerTask>:
{
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a5d4:	f7ff ffc8 	bl	800a568 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a5d8:	4b12      	ldr	r3, [pc, #72]	@ (800a624 <xTimerCreateTimerTask+0x54>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	b1b3      	cbz	r3, 800a60c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5de:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5e0:	aa07      	add	r2, sp, #28
 800a5e2:	a906      	add	r1, sp, #24
 800a5e4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ea:	f7fe f9cb 	bl	8008984 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5ee:	9b05      	ldr	r3, [sp, #20]
 800a5f0:	9a07      	ldr	r2, [sp, #28]
 800a5f2:	9302      	str	r3, [sp, #8]
 800a5f4:	9b06      	ldr	r3, [sp, #24]
 800a5f6:	490c      	ldr	r1, [pc, #48]	@ (800a628 <xTimerCreateTimerTask+0x58>)
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	480b      	ldr	r0, [pc, #44]	@ (800a62c <xTimerCreateTimerTask+0x5c>)
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4623      	mov	r3, r4
 800a602:	f7ff fb81 	bl	8009d08 <xTaskCreateStatic>
 800a606:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <xTimerCreateTimerTask+0x60>)
 800a608:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a60a:	b940      	cbnz	r0, 800a61e <xTimerCreateTimerTask+0x4e>
 800a60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a61c:	e7fe      	b.n	800a61c <xTimerCreateTimerTask+0x4c>
}
 800a61e:	2001      	movs	r0, #1
 800a620:	b008      	add	sp, #32
 800a622:	bd10      	pop	{r4, pc}
 800a624:	24015c08 	.word	0x24015c08
 800a628:	0802d3da 	.word	0x0802d3da
 800a62c:	0800a72d 	.word	0x0800a72d
 800a630:	24015c04 	.word	0x24015c04

0800a634 <xTimerGenericCommand>:
{
 800a634:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a636:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800a638:	4604      	mov	r4, r0
{
 800a63a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800a63c:	b940      	cbnz	r0, 800a650 <xTimerGenericCommand+0x1c>
 800a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	e7fe      	b.n	800a64e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800a650:	4d0c      	ldr	r5, [pc, #48]	@ (800a684 <xTimerGenericCommand+0x50>)
 800a652:	6828      	ldr	r0, [r5, #0]
 800a654:	b178      	cbz	r0, 800a676 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a656:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a658:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a65a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a65e:	dc0c      	bgt.n	800a67a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a660:	f7ff fe7a 	bl	800a358 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a664:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a666:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a668:	4669      	mov	r1, sp
 800a66a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a66c:	bf0c      	ite	eq
 800a66e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a670:	461a      	movne	r2, r3
 800a672:	f7fe fdf6 	bl	8009262 <xQueueGenericSend>
}
 800a676:	b004      	add	sp, #16
 800a678:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a67a:	2300      	movs	r3, #0
 800a67c:	4669      	mov	r1, sp
 800a67e:	f7fe fef3 	bl	8009468 <xQueueGenericSendFromISR>
 800a682:	e7f8      	b.n	800a676 <xTimerGenericCommand+0x42>
 800a684:	24015c08 	.word	0x24015c08

0800a688 <prvSampleTimeNow>:
{
 800a688:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800a68c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800a728 <prvSampleTimeNow+0xa0>
{
 800a690:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800a692:	f7ff fba7 	bl	8009de4 <xTaskGetTickCount>
 800a696:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800a698:	f8d8 3000 	ldr.w	r3, [r8]
 800a69c:	4283      	cmp	r3, r0
 800a69e:	d909      	bls.n	800a6b4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6a0:	4f1f      	ldr	r7, [pc, #124]	@ (800a720 <prvSampleTimeNow+0x98>)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	b96a      	cbnz	r2, 800a6c4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800a6a8:	4a1e      	ldr	r2, [pc, #120]	@ (800a724 <prvSampleTimeNow+0x9c>)
 800a6aa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800a6b0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800a6b2:	e000      	b.n	800a6b6 <prvSampleTimeNow+0x2e>
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800a6b8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800a6ba:	f8c8 5000 	str.w	r5, [r8]
}
 800a6be:	b002      	add	sp, #8
 800a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6c4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6c8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6cc:	f104 0a04 	add.w	sl, r4, #4
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	f7fe fa8f 	bl	8008bf4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6d6:	6a23      	ldr	r3, [r4, #32]
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6dc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a6e0:	075b      	lsls	r3, r3, #29
 800a6e2:	d5de      	bpl.n	800a6a2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6e4:	69a3      	ldr	r3, [r4, #24]
 800a6e6:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800a6e8:	4599      	cmp	r9, r3
 800a6ea:	d206      	bcs.n	800a6fa <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ec:	4651      	mov	r1, sl
 800a6ee:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6f0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6f2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6f4:	f7fe fa67 	bl	8008bc6 <vListInsert>
 800a6f8:	e7d3      	b.n	800a6a2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	464a      	mov	r2, r9
 800a6fe:	4620      	mov	r0, r4
 800a700:	4619      	mov	r1, r3
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	f7ff ff96 	bl	800a634 <xTimerGenericCommand>
				configASSERT( xResult );
 800a708:	2800      	cmp	r0, #0
 800a70a:	d1ca      	bne.n	800a6a2 <prvSampleTimeNow+0x1a>
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	e7fe      	b.n	800a71c <prvSampleTimeNow+0x94>
 800a71e:	bf00      	nop
 800a720:	24015c10 	.word	0x24015c10
 800a724:	24015c0c 	.word	0x24015c0c
 800a728:	24015c00 	.word	0x24015c00

0800a72c <prvTimerTask>:
{
 800a72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a730:	4d6e      	ldr	r5, [pc, #440]	@ (800a8ec <prvTimerTask+0x1c0>)
{
 800a732:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a734:	4e6e      	ldr	r6, [pc, #440]	@ (800a8f0 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a736:	682b      	ldr	r3, [r5, #0]
 800a738:	f8d3 8000 	ldr.w	r8, [r3]
 800a73c:	f1b8 0f00 	cmp.w	r8, #0
 800a740:	d035      	beq.n	800a7ae <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a742:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a744:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a746:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800a74a:	f7ff fb43 	bl	8009dd4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a74e:	a804      	add	r0, sp, #16
 800a750:	f7ff ff9a 	bl	800a688 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a754:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a756:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d169      	bne.n	800a830 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a75c:	2c00      	cmp	r4, #0
 800a75e:	d14c      	bne.n	800a7fa <prvTimerTask+0xce>
 800a760:	4540      	cmp	r0, r8
 800a762:	d350      	bcc.n	800a806 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800a764:	f7ff fbda 	bl	8009f1c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a76e:	1d38      	adds	r0, r7, #4
 800a770:	f7fe fa40 	bl	8008bf4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a774:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a778:	0758      	lsls	r0, r3, #29
 800a77a:	d51a      	bpl.n	800a7b2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a77c:	69b9      	ldr	r1, [r7, #24]
 800a77e:	4643      	mov	r3, r8
 800a780:	464a      	mov	r2, r9
 800a782:	4638      	mov	r0, r7
 800a784:	4441      	add	r1, r8
 800a786:	f7ff fed1 	bl	800a52c <prvInsertTimerInActiveList>
 800a78a:	b1b0      	cbz	r0, 800a7ba <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a78c:	4623      	mov	r3, r4
 800a78e:	4642      	mov	r2, r8
 800a790:	4621      	mov	r1, r4
 800a792:	4638      	mov	r0, r7
 800a794:	9400      	str	r4, [sp, #0]
 800a796:	f7ff ff4d 	bl	800a634 <xTimerGenericCommand>
			configASSERT( xResult );
 800a79a:	b970      	cbnz	r0, 800a7ba <prvTimerTask+0x8e>
 800a79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	e7fe      	b.n	800a7ac <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7ae:	2401      	movs	r4, #1
 800a7b0:	e7cb      	b.n	800a74a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7b2:	f023 0301 	bic.w	r3, r3, #1
 800a7b6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	4638      	mov	r0, r7
 800a7be:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	a904      	add	r1, sp, #16
 800a7c4:	6830      	ldr	r0, [r6, #0]
 800a7c6:	f7fe fefd 	bl	80095c4 <xQueueReceive>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d0b3      	beq.n	800a736 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7ce:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7d0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	db2f      	blt.n	800a836 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7d6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7d8:	6963      	ldr	r3, [r4, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d132      	bne.n	800a844 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7de:	a803      	add	r0, sp, #12
 800a7e0:	f7ff ff52 	bl	800a688 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a7e4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7e6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d8e9      	bhi.n	800a7c0 <prvTimerTask+0x94>
 800a7ec:	e8df f003 	tbb	[pc, r3]
 800a7f0:	572e2e2e 	.word	0x572e2e2e
 800a7f4:	2e2e765e 	.word	0x2e2e765e
 800a7f8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f4 <prvTimerTask+0x1c8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681c      	ldr	r4, [r3, #0]
 800a800:	fab4 f484 	clz	r4, r4
 800a804:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a806:	4622      	mov	r2, r4
 800a808:	eba8 0109 	sub.w	r1, r8, r9
 800a80c:	6830      	ldr	r0, [r6, #0]
 800a80e:	f7ff f8e2 	bl	80099d6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a812:	f7ff fb83 	bl	8009f1c <xTaskResumeAll>
 800a816:	2800      	cmp	r0, #0
 800a818:	d1d2      	bne.n	800a7c0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800a81a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a822:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	e7c7      	b.n	800a7c0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800a830:	f7ff fb74 	bl	8009f1c <xTaskResumeAll>
}
 800a834:	e7c4      	b.n	800a7c0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a836:	9b05      	ldr	r3, [sp, #20]
 800a838:	9907      	ldr	r1, [sp, #28]
 800a83a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dbbe      	blt.n	800a7c0 <prvTimerTask+0x94>
 800a842:	e7c8      	b.n	800a7d6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a844:	1d20      	adds	r0, r4, #4
 800a846:	f7fe f9d5 	bl	8008bf4 <uxListRemove>
 800a84a:	e7c8      	b.n	800a7de <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a84c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a850:	4620      	mov	r0, r4
 800a852:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a854:	f043 0301 	orr.w	r3, r3, #1
 800a858:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	4419      	add	r1, r3
 800a860:	f7ff fe64 	bl	800a52c <prvInsertTimerInActiveList>
 800a864:	2800      	cmp	r0, #0
 800a866:	d0ab      	beq.n	800a7c0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a868:	6a23      	ldr	r3, [r4, #32]
 800a86a:	4620      	mov	r0, r4
 800a86c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a86e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a872:	0759      	lsls	r1, r3, #29
 800a874:	d5a4      	bpl.n	800a7c0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a876:	69a2      	ldr	r2, [r4, #24]
 800a878:	2300      	movs	r3, #0
 800a87a:	9905      	ldr	r1, [sp, #20]
 800a87c:	4620      	mov	r0, r4
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	440a      	add	r2, r1
 800a882:	4619      	mov	r1, r3
 800a884:	f7ff fed6 	bl	800a634 <xTimerGenericCommand>
							configASSERT( xResult );
 800a888:	2800      	cmp	r0, #0
 800a88a:	d199      	bne.n	800a7c0 <prvTimerTask+0x94>
 800a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	e7fe      	b.n	800a89c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a89e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8a2:	f023 0301 	bic.w	r3, r3, #1
 800a8a6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800a8aa:	e789      	b.n	800a7c0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8ac:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a8b0:	f043 0301 	orr.w	r3, r3, #1
 800a8b4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8b8:	9905      	ldr	r1, [sp, #20]
 800a8ba:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8bc:	b941      	cbnz	r1, 800a8d0 <prvTimerTask+0x1a4>
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	e7fe      	b.n	800a8ce <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	4401      	add	r1, r0
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff fe29 	bl	800a52c <prvInsertTimerInActiveList>
					break;
 800a8da:	e771      	b.n	800a7c0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8dc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a8e0:	079a      	lsls	r2, r3, #30
 800a8e2:	d4de      	bmi.n	800a8a2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f7fe f917 	bl	8008b18 <vPortFree>
 800a8ea:	e769      	b.n	800a7c0 <prvTimerTask+0x94>
 800a8ec:	24015c10 	.word	0x24015c10
 800a8f0:	24015c08 	.word	0x24015c08
 800a8f4:	24015c0c 	.word	0x24015c0c

0800a8f8 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 800a8f8:	6843      	ldr	r3, [r0, #4]
{
 800a8fa:	b510      	push	{r4, lr}
 800a8fc:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800a8fe:	b14b      	cbz	r3, 800a914 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800a900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a902:	2101      	movs	r1, #1
 800a904:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800a906:	6923      	ldr	r3, [r4, #16]
 800a908:	b12b      	cbz	r3, 800a916 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 800a90a:	23c8      	movs	r3, #200	@ 0xc8
 800a90c:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 800a914:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 800a916:	2364      	movs	r3, #100	@ 0x64
 800a918:	6163      	str	r3, [r4, #20]
 800a91a:	e7fb      	b.n	800a914 <jpeg_abort+0x1c>

0800a91c <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 800a91c:	6843      	ldr	r3, [r0, #4]
{
 800a91e:	b510      	push	{r4, lr}
 800a920:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800a922:	b10b      	cbz	r3, 800a928 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 800a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a926:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800a928:	2300      	movs	r3, #0
 800a92a:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 800a92c:	6163      	str	r3, [r4, #20]
}
 800a92e:	bd10      	pop	{r4, pc}

0800a930 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800a930:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800a932:	6843      	ldr	r3, [r0, #4]
 800a934:	2284      	movs	r2, #132	@ 0x84
 800a936:	2100      	movs	r1, #0
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  return tbl;
}
 800a942:	bd08      	pop	{r3, pc}

0800a944 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800a944:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800a946:	6843      	ldr	r3, [r0, #4]
 800a948:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a94c:	2100      	movs	r1, #0
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800a952:	2200      	movs	r2, #0
 800a954:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
  return tbl;
}
 800a958:	bd08      	pop	{r3, pc}

0800a95a <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800a95a:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 800a95c:	2950      	cmp	r1, #80	@ 0x50
{
 800a95e:	b570      	push	{r4, r5, r6, lr}
 800a960:	4604      	mov	r4, r0
 800a962:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800a964:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800a966:	d007      	beq.n	800a978 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800a968:	6803      	ldr	r3, [r0, #0]
 800a96a:	260d      	movs	r6, #13
 800a96c:	2250      	movs	r2, #80	@ 0x50
 800a96e:	61d9      	str	r1, [r3, #28]
 800a970:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800a978:	f5b5 7ff4 	cmp.w	r5, #488	@ 0x1e8
 800a97c:	d009      	beq.n	800a992 <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	2116      	movs	r1, #22
 800a982:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a986:	4620      	mov	r0, r4
 800a988:	61dd      	str	r5, [r3, #28]
 800a98a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800a992:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a996:	2100      	movs	r1, #0
 800a998:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 800a99a:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 800a99c:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800a99e:	f01f fb87 	bl	802a0b0 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800a9a2:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 800a9a4:	4620      	mov	r0, r4
    cinfo->err = err;
 800a9a6:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 800a9a8:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 800a9aa:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 800a9ac:	f00b fdbc 	bl	8016528 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800a9b0:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800a9b2:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 800a9b4:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 800a9b6:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a9b8:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a9bc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a9c0:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a9c4:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a9c8:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a9cc:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a9d0:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a9d4:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  cinfo->marker_list = NULL;
 800a9d8:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 800a9dc:	e9c4 3329 	strd	r3, r3, [r4, #164]	@ 0xa4
 800a9e0:	e9c4 332b 	strd	r3, r3, [r4, #172]	@ 0xac
  jinit_marker_reader(cinfo);
 800a9e4:	f005 f810 	bl	800fa08 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f003 fd23 	bl	800e434 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800a9ee:	23c8      	movs	r3, #200	@ 0xc8
 800a9f0:	6163      	str	r3, [r4, #20]
}
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}

0800a9f4 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800a9f4:	f7ff bf92 	b.w	800a91c <jpeg_destroy>

0800a9f8 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 800a9f8:	6942      	ldr	r2, [r0, #20]
 800a9fa:	f1a2 03c8 	sub.w	r3, r2, #200	@ 0xc8
{
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800aa02:	2b0a      	cmp	r3, #10
 800aa04:	f200 8099 	bhi.w	800ab3a <jpeg_consume_input+0x142>
 800aa08:	e8df f003 	tbb	[pc, r3]
 800aa0c:	91671006 	.word	0x91671006
 800aa10:	91919191 	.word	0x91919191
 800aa14:	9791      	.short	0x9791
 800aa16:	91          	.byte	0x91
 800aa17:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 800aa18:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800aa20:	69a3      	ldr	r3, [r4, #24]
 800aa22:	4620      	mov	r0, r4
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 800aa28:	23c9      	movs	r3, #201	@ 0xc9
 800aa2a:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800aa2c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800aa30:	4620      	mov	r0, r4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800aa36:	2801      	cmp	r0, #1
 800aa38:	d150      	bne.n	800aadc <jpeg_consume_input+0xe4>
  switch (cinfo->num_components) {
 800aa3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d005      	beq.n	800aa4c <jpeg_consume_input+0x54>
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d05d      	beq.n	800ab00 <jpeg_consume_input+0x108>
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d170      	bne.n	800ab2a <jpeg_consume_input+0x132>
 800aa48:	461a      	mov	r2, r3
 800aa4a:	e023      	b.n	800aa94 <jpeg_consume_input+0x9c>
    if (cinfo->saw_JFIF_marker) {
 800aa4c:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 800aa50:	b9f3      	cbnz	r3, 800aa90 <jpeg_consume_input+0x98>
    } else if (cinfo->saw_Adobe_marker) {
 800aa52:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800aa56:	b17b      	cbz	r3, 800aa78 <jpeg_consume_input+0x80>
      switch (cinfo->Adobe_transform) {
 800aa58:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	d04d      	beq.n	800aafc <jpeg_consume_input+0x104>
 800aa60:	2a01      	cmp	r2, #1
 800aa62:	d015      	beq.n	800aa90 <jpeg_consume_input+0x98>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	2174      	movs	r1, #116	@ 0x74
      switch (cinfo->Adobe_transform) {
 800aa68:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f04f 31ff 	mov.w	r1, #4294967295
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800aa72:	4620      	mov	r0, r4
 800aa74:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800aa76:	e00b      	b.n	800aa90 <jpeg_consume_input+0x98>
      int cid0 = cinfo->comp_info[0].component_id;
 800aa78:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800aa7c:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 800aa7e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800aa80:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800aa82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800aa86:	d12a      	bne.n	800aade <jpeg_consume_input+0xe6>
 800aa88:	2902      	cmp	r1, #2
 800aa8a:	d12e      	bne.n	800aaea <jpeg_consume_input+0xf2>
 800aa8c:	2a03      	cmp	r2, #3
 800aa8e:	d12c      	bne.n	800aaea <jpeg_consume_input+0xf2>
{
 800aa90:	2303      	movs	r3, #3
    break;
 800aa92:	2202      	movs	r2, #2
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800aa94:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  cinfo->dither_mode = JDITHER_FS;
 800aa98:	2102      	movs	r1, #2
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800aa9a:	f8d4 31a8 	ldr.w	r3, [r4, #424]	@ 0x1a8
    cinfo->out_color_space = JCS_GRAYSCALE;
 800aa9e:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  cinfo->output_gamma = 1.0;
 800aaa2:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800aaa4:	f884 1058 	strb.w	r1, [r4, #88]	@ 0x58
  cinfo->scale_denom = cinfo->block_size;
 800aaa8:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  cinfo->output_gamma = 1.0;
 800aaac:	4b27      	ldr	r3, [pc, #156]	@ (800ab4c <jpeg_consume_input+0x154>)
 800aaae:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
  cinfo->buffered_image = FALSE;
 800aab2:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 800aab4:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800aab6:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800aaba:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  cinfo->quantize_colors = FALSE;
 800aabe:	6563      	str	r3, [r4, #84]	@ 0x54
  cinfo->two_pass_quantize = TRUE;
 800aac0:	65e2      	str	r2, [r4, #92]	@ 0x5c
  cinfo->colormap = NULL;
 800aac2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  cinfo->enable_2pass_quant = FALSE;
 800aac6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  cinfo->do_block_smoothing = TRUE;
 800aac8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  cinfo->enable_external_quant = FALSE;
 800aacc:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
  cinfo->desired_number_of_colors = 256;
 800aad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 800aad4:	23ca      	movs	r3, #202	@ 0xca
  cinfo->desired_number_of_colors = 256;
 800aad6:	6622      	str	r2, [r4, #96]	@ 0x60
      cinfo->global_state = DSTATE_READY;
 800aad8:	6163      	str	r3, [r4, #20]
  switch (cinfo->num_components) {
 800aada:	2001      	movs	r0, #1
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800aadc:	bd10      	pop	{r4, pc}
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800aade:	2852      	cmp	r0, #82	@ 0x52
 800aae0:	d103      	bne.n	800aaea <jpeg_consume_input+0xf2>
 800aae2:	2947      	cmp	r1, #71	@ 0x47
 800aae4:	d101      	bne.n	800aaea <jpeg_consume_input+0xf2>
 800aae6:	2a42      	cmp	r2, #66	@ 0x42
 800aae8:	d008      	beq.n	800aafc <jpeg_consume_input+0x104>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	621a      	str	r2, [r3, #32]
 800aaee:	2271      	movs	r2, #113	@ 0x71
 800aaf0:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800aaf4:	615a      	str	r2, [r3, #20]
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	e7ba      	b.n	800aa72 <jpeg_consume_input+0x7a>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e7c8      	b.n	800aa92 <jpeg_consume_input+0x9a>
    if (cinfo->saw_Adobe_marker) {
 800ab00:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 800ab04:	b12a      	cbz	r2, 800ab12 <jpeg_consume_input+0x11a>
      switch (cinfo->Adobe_transform) {
 800ab06:	f894 212c 	ldrb.w	r2, [r4, #300]	@ 0x12c
 800ab0a:	b112      	cbz	r2, 800ab12 <jpeg_consume_input+0x11a>
 800ab0c:	2a02      	cmp	r2, #2
 800ab0e:	d102      	bne.n	800ab16 <jpeg_consume_input+0x11e>
 800ab10:	2305      	movs	r3, #5
    break;
 800ab12:	2204      	movs	r2, #4
 800ab14:	e7be      	b.n	800aa94 <jpeg_consume_input+0x9c>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	2174      	movs	r1, #116	@ 0x74
 800ab1a:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800ab1c:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f04f 31ff 	mov.w	r1, #4294967295
 800ab26:	4798      	blx	r3
	break;
 800ab28:	e7f2      	b.n	800ab10 <jpeg_consume_input+0x118>
  switch (cinfo->num_components) {
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e78c      	b.n	800aa48 <jpeg_consume_input+0x50>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ab2e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
}
 800ab32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ab3a:	6803      	ldr	r3, [r0, #0]
 800ab3c:	2115      	movs	r1, #21
 800ab3e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4798      	blx	r3
  int retcode = JPEG_SUSPENDED;
 800ab46:	2000      	movs	r0, #0
  return retcode;
 800ab48:	e7c8      	b.n	800aadc <jpeg_consume_input+0xe4>
 800ab4a:	bf00      	nop
 800ab4c:	3ff00000 	.word	0x3ff00000

0800ab50 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 800ab50:	6942      	ldr	r2, [r0, #20]
 800ab52:	f1a2 03c8 	sub.w	r3, r2, #200	@ 0xc8
 800ab56:	2b01      	cmp	r3, #1
{
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800ab5e:	d905      	bls.n	800ab6c <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ab60:	6803      	ldr	r3, [r0, #0]
 800ab62:	2115      	movs	r1, #21
 800ab64:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7ff ff43 	bl	800a9f8 <jpeg_consume_input>
  switch (retcode) {
 800ab72:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800ab74:	4605      	mov	r5, r0
  switch (retcode) {
 800ab76:	d00b      	beq.n	800ab90 <jpeg_read_header+0x40>
 800ab78:	2802      	cmp	r0, #2
 800ab7a:	d109      	bne.n	800ab90 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 800ab7c:	b12e      	cbz	r6, 800ab8a <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	2235      	movs	r2, #53	@ 0x35
 800ab82:	4620      	mov	r0, r4
 800ab84:	615a      	str	r2, [r3, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7ff feb4 	bl	800a8f8 <jpeg_abort>
}
 800ab90:	4628      	mov	r0, r5
 800ab92:	bd70      	pop	{r4, r5, r6, pc}

0800ab94 <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800ab94:	6943      	ldr	r3, [r0, #20]
 800ab96:	f1a3 02cd 	sub.w	r2, r3, #205	@ 0xcd
 800ab9a:	2a01      	cmp	r2, #1
{
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800aba0:	d81f      	bhi.n	800abe2 <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800aba2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800aba4:	bb0a      	cbnz	r2, 800abea <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800aba6:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800abaa:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800abac:	429a      	cmp	r2, r3
 800abae:	d204      	bcs.n	800abba <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800abb0:	6803      	ldr	r3, [r0, #0]
 800abb2:	2245      	movs	r2, #69	@ 0x45
 800abb4:	615a      	str	r2, [r3, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 800abba:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800abbe:	4620      	mov	r0, r4
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800abc4:	23d2      	movs	r3, #210	@ 0xd2
 800abc6:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 800abc8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800abcc:	695a      	ldr	r2, [r3, #20]
 800abce:	b1a2      	cbz	r2, 800abfa <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 800abd0:	69a3      	ldr	r3, [r4, #24]
 800abd2:	4620      	mov	r0, r4
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 800abd8:	4620      	mov	r0, r4
 800abda:	f7ff fe8d 	bl	800a8f8 <jpeg_abort>
  return TRUE;
 800abde:	2001      	movs	r0, #1
 800abe0:	e010      	b.n	800ac04 <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800abe2:	2bcf      	cmp	r3, #207	@ 0xcf
 800abe4:	d0ee      	beq.n	800abc4 <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800abe6:	2bd2      	cmp	r3, #210	@ 0xd2
 800abe8:	d0ee      	beq.n	800abc8 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	2115      	movs	r1, #21
 800abee:	4620      	mov	r0, r4
 800abf0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800abf4:	6813      	ldr	r3, [r2, #0]
 800abf6:	4798      	blx	r3
 800abf8:	e7e6      	b.n	800abc8 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4620      	mov	r0, r4
 800abfe:	4798      	blx	r3
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d1e1      	bne.n	800abc8 <jpeg_finish_decompress+0x34>
}
 800ac04:	bd10      	pop	{r4, pc}

0800ac06 <output_pass_setup>:
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
 800ac06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800ac08:	6943      	ldr	r3, [r0, #20]
{
 800ac0a:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800ac0c:	2bcc      	cmp	r3, #204	@ 0xcc
 800ac0e:	d008      	beq.n	800ac22 <output_pass_setup+0x1c>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800ac10:	f8d0 31b8 	ldr.w	r3, [r0, #440]	@ 0x1b8
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 800ac1e:	23cc      	movs	r3, #204	@ 0xcc
 800ac20:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800ac22:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
  while (cinfo->master->is_dummy_pass) {
 800ac26:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	b9e3      	cbnz	r3, 800ac68 <output_pass_setup+0x62>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800ac2e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  return TRUE;
 800ac30:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf0c      	ite	eq
 800ac36:	23cd      	moveq	r3, #205	@ 0xcd
 800ac38:	23ce      	movne	r3, #206	@ 0xce
 800ac3a:	6163      	str	r3, [r4, #20]
}
 800ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cinfo->progress != NULL) {
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	b123      	cbz	r3, 800ac4c <output_pass_setup+0x46>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ac42:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 800ac44:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800ac4c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800ac50:	462a      	mov	r2, r5
 800ac52:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 800ac54:	f8d4 608c 	ldr.w	r6, [r4, #140]	@ 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800ac58:	685f      	ldr	r7, [r3, #4]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	47b8      	blx	r7
      if (cinfo->output_scanline == last_scanline)
 800ac60:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800ac64:	42b3      	cmp	r3, r6
 800ac66:	d012      	beq.n	800ac8e <output_pass_setup+0x88>
    while (cinfo->output_scanline < cinfo->output_height) {
 800ac68:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800ac6c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800ac6e:	4291      	cmp	r1, r2
 800ac70:	d3e5      	bcc.n	800ac3e <output_pass_setup+0x38>
    (*cinfo->master->finish_output_pass) (cinfo);
 800ac72:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800ac76:	4620      	mov	r0, r4
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800ac7c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 800ac80:	4620      	mov	r0, r4
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800ac8c:	e7cb      	b.n	800ac26 <output_pass_setup+0x20>
	return FALSE;		/* No progress made, must suspend */
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e7d4      	b.n	800ac3c <output_pass_setup+0x36>

0800ac92 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 800ac92:	6943      	ldr	r3, [r0, #20]
 800ac94:	2bca      	cmp	r3, #202	@ 0xca
{
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800ac9a:	d109      	bne.n	800acb0 <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800ac9c:	f005 f85e 	bl	800fd5c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 800aca0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aca2:	b11b      	cbz	r3, 800acac <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 800aca4:	23cf      	movs	r3, #207	@ 0xcf
      return TRUE;
 800aca6:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800aca8:	6163      	str	r3, [r4, #20]
}
 800acaa:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800acac:	23cb      	movs	r3, #203	@ 0xcb
 800acae:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 800acb0:	6962      	ldr	r2, [r4, #20]
 800acb2:	2acb      	cmp	r2, #203	@ 0xcb
 800acb4:	d12c      	bne.n	800ad10 <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 800acb6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	b1fb      	cbz	r3, 800acfe <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	b113      	cbz	r3, 800acc8 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4620      	mov	r0, r4
 800acc6:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800acc8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800accc:	4620      	mov	r0, r4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0e9      	beq.n	800acaa <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 800acd6:	2802      	cmp	r0, #2
 800acd8:	d011      	beq.n	800acfe <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 800acda:	68a3      	ldr	r3, [r4, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0ee      	beq.n	800acbe <jpeg_start_decompress+0x2c>
 800ace0:	f020 0002 	bic.w	r0, r0, #2
 800ace4:	2801      	cmp	r0, #1
 800ace6:	d1ea      	bne.n	800acbe <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	6899      	ldr	r1, [r3, #8]
 800acec:	3201      	adds	r2, #1
 800acee:	428a      	cmp	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
 800acf2:	dbe4      	blt.n	800acbe <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 800acf4:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
 800acf8:	440a      	add	r2, r1
 800acfa:	609a      	str	r2, [r3, #8]
 800acfc:	e7df      	b.n	800acbe <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800acfe:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800ad02:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  return output_pass_setup(cinfo);
 800ad06:	4620      	mov	r0, r4
}
 800ad08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800ad0c:	f7ff bf7b 	b.w	800ac06 <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800ad10:	2acc      	cmp	r2, #204	@ 0xcc
 800ad12:	d0f8      	beq.n	800ad06 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	2115      	movs	r1, #21
 800ad18:	4620      	mov	r0, r4
 800ad1a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4798      	blx	r3
 800ad22:	e7f0      	b.n	800ad06 <jpeg_start_decompress+0x74>

0800ad24 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800ad24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad26:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800ad28:	6942      	ldr	r2, [r0, #20]
{
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800ad2e:	2acd      	cmp	r2, #205	@ 0xcd
 800ad30:	d005      	beq.n	800ad3e <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ad32:	6803      	ldr	r3, [r0, #0]
 800ad34:	2115      	movs	r1, #21
 800ad36:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800ad3e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800ad42:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d30a      	bcc.n	800ad5e <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	227e      	movs	r2, #126	@ 0x7e
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f04f 31ff 	mov.w	r1, #4294967295
 800ad52:	615a      	str	r2, [r3, #20]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	4798      	blx	r3
    return 0;
 800ad58:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 800ad5a:	b003      	add	sp, #12
 800ad5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800ad5e:	68a0      	ldr	r0, [r4, #8]
 800ad60:	b120      	cbz	r0, 800ad6c <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 800ad62:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ad66:	6803      	ldr	r3, [r0, #0]
 800ad68:	4620      	mov	r0, r4
 800ad6a:	4798      	blx	r3
  row_ctr = 0;
 800ad6c:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800ad6e:	4620      	mov	r0, r4
 800ad70:	aa01      	add	r2, sp, #4
 800ad72:	4629      	mov	r1, r5
  row_ctr = 0;
 800ad74:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800ad76:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800ad7a:	685f      	ldr	r7, [r3, #4]
 800ad7c:	4633      	mov	r3, r6
 800ad7e:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 800ad80:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800ad84:	9801      	ldr	r0, [sp, #4]
 800ad86:	4403      	add	r3, r0
 800ad88:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  return row_ctr;
 800ad8c:	e7e5      	b.n	800ad5a <jpeg_read_scanlines+0x36>

0800ad8e <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800ad8e:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800ad90:	6984      	ldr	r4, [r0, #24]
{
 800ad92:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	b943      	cbnz	r3, 800adaa <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800ad98:	68e3      	ldr	r3, [r4, #12]
 800ad9a:	4798      	blx	r3
 800ad9c:	b928      	cbnz	r0, 800adaa <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	2219      	movs	r2, #25
 800ada2:	4628      	mov	r0, r5
 800ada4:	615a      	str	r2, [r3, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4798      	blx	r3
  src->bytes_in_buffer--;
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	3b01      	subs	r3, #1
 800adae:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	6022      	str	r2, [r4, #0]
}
 800adb6:	7818      	ldrb	r0, [r3, #0]
 800adb8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800adbc <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	4606      	mov	r6, r0
 800adc0:	460d      	mov	r5, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800adc2:	f8d0 41d0 	ldr.w	r4, [r0, #464]	@ 0x1d0
  register INT32 qe, temp;
  register int sv, data;

  /* Renormalization & data input per section D.2.6 */
  while (e->a < 0x8000L) {
    if (--e->ct < 0) {
 800adc6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
  while (e->a < 0x8000L) {
 800adca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adce:	db20      	blt.n	800ae12 <arith_decode+0x56>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800add0:	7828      	ldrb	r0, [r5, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800add2:	492e      	ldr	r1, [pc, #184]	@ (800ae8c <arith_decode+0xd0>)
 800add4:	f000 067f 	and.w	r6, r0, #127	@ 0x7f
 800add8:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
 800addc:	eba3 432c 	sub.w	r3, r3, ip, asr #16
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800ade0:	f3cc 2107 	ubfx	r1, ip, #8, #8
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 800ade4:	fa5f f68c 	uxtb.w	r6, ip
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800ade8:	ea4f 472c 	mov.w	r7, ip, asr #16
  e->a = temp;
  temp <<= e->ct;
 800adec:	fa03 f202 	lsl.w	r2, r3, r2
  if (e->c >= temp) {
 800adf0:	f8d4 c008 	ldr.w	ip, [r4, #8]
  e->a = temp;
 800adf4:	60e3      	str	r3, [r4, #12]
  if (e->c >= temp) {
 800adf6:	4594      	cmp	ip, r2
 800adf8:	db3b      	blt.n	800ae72 <arith_decode+0xb6>
    e->c -= temp;
 800adfa:	ebac 0202 	sub.w	r2, ip, r2
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800adfe:	429f      	cmp	r7, r3
      e->a = qe;
 800ae00:	60e7      	str	r7, [r4, #12]
    e->c -= temp;
 800ae02:	60a2      	str	r2, [r4, #8]
    if (e->a < qe) {
 800ae04:	f000 0280 	and.w	r2, r0, #128	@ 0x80
 800ae08:	dd2e      	ble.n	800ae68 <arith_decode+0xac>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800ae0a:	404a      	eors	r2, r1
 800ae0c:	702a      	strb	r2, [r5, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800ae0e:	09c0      	lsrs	r0, r0, #7
 800ae10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (--e->ct < 0) {
 800ae12:	3a01      	subs	r2, #1
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	6122      	str	r2, [r4, #16]
 800ae18:	da1a      	bge.n	800ae50 <arith_decode+0x94>
      if (cinfo->unread_marker)
 800ae1a:	f8d6 31b4 	ldr.w	r3, [r6, #436]	@ 0x1b4
 800ae1e:	b96b      	cbnz	r3, 800ae3c <arith_decode+0x80>
	data = get_byte(cinfo);	/* read next input byte */
 800ae20:	4630      	mov	r0, r6
 800ae22:	f7ff ffb4 	bl	800ad8e <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 800ae26:	28ff      	cmp	r0, #255	@ 0xff
	data = get_byte(cinfo);	/* read next input byte */
 800ae28:	4607      	mov	r7, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800ae2a:	d108      	bne.n	800ae3e <arith_decode+0x82>
	  do data = get_byte(cinfo);
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff ffae 	bl	800ad8e <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800ae32:	28ff      	cmp	r0, #255	@ 0xff
 800ae34:	d0fa      	beq.n	800ae2c <arith_decode+0x70>
	  if (data == 0)
 800ae36:	b110      	cbz	r0, 800ae3e <arith_decode+0x82>
	    cinfo->unread_marker = data;
 800ae38:	f8c6 01b4 	str.w	r0, [r6, #436]	@ 0x1b4
	data = 0;		/* stuff zero data */
 800ae3c:	2700      	movs	r7, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800ae3e:	68a3      	ldr	r3, [r4, #8]
 800ae40:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 800ae4a:	60a7      	str	r7, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800ae4c:	d404      	bmi.n	800ae58 <arith_decode+0x9c>
 800ae4e:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800ae50:	68e3      	ldr	r3, [r4, #12]
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	60e3      	str	r3, [r4, #12]
 800ae56:	e7b6      	b.n	800adc6 <arith_decode+0xa>
	if (++e->ct == 0)
 800ae58:	3309      	adds	r3, #9
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1f7      	bne.n	800ae50 <arith_decode+0x94>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800ae60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae64:	60e3      	str	r3, [r4, #12]
 800ae66:	e7f3      	b.n	800ae50 <arith_decode+0x94>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800ae68:	4072      	eors	r2, r6
 800ae6a:	702a      	strb	r2, [r5, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800ae6c:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 800ae70:	e7cd      	b.n	800ae0e <arith_decode+0x52>
  } else if (e->a < 0x8000L) {
 800ae72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae76:	daca      	bge.n	800ae0e <arith_decode+0x52>
    if (e->a < qe) {
 800ae78:	429f      	cmp	r7, r3
 800ae7a:	f000 0280 	and.w	r2, r0, #128	@ 0x80
 800ae7e:	dd02      	ble.n	800ae86 <arith_decode+0xca>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800ae80:	4056      	eors	r6, r2
 800ae82:	702e      	strb	r6, [r5, #0]
 800ae84:	e7f2      	b.n	800ae6c <arith_decode+0xb0>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800ae86:	4051      	eors	r1, r2
 800ae88:	7029      	strb	r1, [r5, #0]
 800ae8a:	e7c0      	b.n	800ae0e <arith_decode+0x52>
 800ae8c:	0802d3e4 	.word	0x0802d3e4

0800ae90 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800ae90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800ae94:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
{
 800ae98:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800ae9a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->progressive_mode) {
 800ae9e:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800aea2:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
  if (cinfo->progressive_mode) {
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 8088 	beq.w	800afbc <start_pass+0x12c>
    if (cinfo->Ss == 0) {
 800aeac:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	@ 0x19c
 800aeb0:	f8d0 01a4 	ldr.w	r0, [r0, #420]	@ 0x1a4
 800aeb4:	b962      	cbnz	r2, 800aed0 <start_pass+0x40>
      if (cinfo->Se != 0)
 800aeb6:	b1a9      	cbz	r1, 800aee4 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	f04f 0c11 	mov.w	ip, #17
 800aebe:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800aec2:	e9c3 c205 	strd	ip, r2, [r3, #20]
 800aec6:	6258      	str	r0, [r3, #36]	@ 0x24
 800aec8:	4620      	mov	r0, r4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4798      	blx	r3
 800aece:	e00f      	b.n	800aef0 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800aed0:	428a      	cmp	r2, r1
 800aed2:	dcf1      	bgt.n	800aeb8 <start_pass+0x28>
 800aed4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800aed8:	428b      	cmp	r3, r1
 800aeda:	dbed      	blt.n	800aeb8 <start_pass+0x28>
      if (cinfo->comps_in_scan != 1)
 800aedc:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d1e9      	bne.n	800aeb8 <start_pass+0x28>
    if (cinfo->Ah != 0) {
 800aee4:	b117      	cbz	r7, 800aeec <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800aee6:	1e7b      	subs	r3, r7, #1
 800aee8:	4283      	cmp	r3, r0
 800aeea:	d1e5      	bne.n	800aeb8 <start_pass+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800aeec:	280d      	cmp	r0, #13
 800aeee:	dce3      	bgt.n	800aeb8 <start_pass+0x28>
 800aef0:	46b0      	mov	r8, r6
{
 800aef2:	f04f 0b00 	mov.w	fp, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aef6:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800aefa:	f8d4 1198 	ldr.w	r1, [r4, #408]	@ 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aefe:	455b      	cmp	r3, fp
 800af00:	dc1d      	bgt.n	800af3e <start_pass+0xae>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800af02:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d155      	bne.n	800afb6 <start_pass+0x126>
      if (cinfo->Ss == 0)
 800af0a:	4b64      	ldr	r3, [pc, #400]	@ (800b09c <start_pass+0x20c>)
 800af0c:	4a64      	ldr	r2, [pc, #400]	@ (800b0a0 <start_pass+0x210>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
 800af0e:	2900      	cmp	r1, #0
 800af10:	bf18      	it	ne
 800af12:	4613      	movne	r3, r2
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800af14:	2700      	movs	r7, #0
 800af16:	f105 0814 	add.w	r8, r5, #20
 800af1a:	46b1      	mov	r9, r6
 800af1c:	606b      	str	r3, [r5, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800af1e:	46ba      	mov	sl, r7
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800af20:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800af24:	42bb      	cmp	r3, r7
 800af26:	dc62      	bgt.n	800afee <start_pass+0x15e>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800af28:	2300      	movs	r3, #0
  entropy->a = 0;
 800af2a:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800af2e:	f06f 030f 	mvn.w	r3, #15
 800af32:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800af34:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800af38:	636b      	str	r3, [r5, #52]	@ 0x34
}
 800af3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800af3e:	f858 3f04 	ldr.w	r3, [r8, #4]!
 800af42:	f8d3 a004 	ldr.w	sl, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800af46:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800af4a:	ea4f 200a 	mov.w	r0, sl, lsl #8
 800af4e:	eb03 290a 	add.w	r9, r3, sl, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800af52:	b169      	cbz	r1, 800af70 <start_pass+0xe0>
 800af54:	581b      	ldr	r3, [r3, r0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	da0a      	bge.n	800af70 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	2176      	movs	r1, #118	@ 0x76
 800af5e:	4620      	mov	r0, r4
 800af60:	e9c3 1a05 	strd	r1, sl, [r3, #20]
 800af64:	2100      	movs	r1, #0
 800af66:	61d9      	str	r1, [r3, #28]
 800af68:	f04f 31ff 	mov.w	r1, #4294967295
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800af70:	f8d4 7198 	ldr.w	r7, [r4, #408]	@ 0x198
 800af74:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 800af78:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800af7c:	42bb      	cmp	r3, r7
 800af7e:	da02      	bge.n	800af86 <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800af80:	f10b 0b01 	add.w	fp, fp, #1
 800af84:	e7b7      	b.n	800aef6 <start_pass+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800af86:	f8d9 3000 	ldr.w	r3, [r9]
	if (cinfo->Ah != expected)
 800af8a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	@ 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800af8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800af92:	4299      	cmp	r1, r3
 800af94:	d009      	beq.n	800afaa <start_pass+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	2276      	movs	r2, #118	@ 0x76
 800af9a:	f04f 31ff 	mov.w	r1, #4294967295
 800af9e:	4620      	mov	r0, r4
 800afa0:	61df      	str	r7, [r3, #28]
 800afa2:	e9c3 2a05 	strd	r2, sl, [r3, #20]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800afaa:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800afae:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800afb0:	f849 3b04 	str.w	r3, [r9], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800afb4:	e7e0      	b.n	800af78 <start_pass+0xe8>
      if (cinfo->Ss == 0)
 800afb6:	4b3b      	ldr	r3, [pc, #236]	@ (800b0a4 <start_pass+0x214>)
 800afb8:	4a3b      	ldr	r2, [pc, #236]	@ (800b0a8 <start_pass+0x218>)
 800afba:	e7a8      	b.n	800af0e <start_pass+0x7e>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800afbc:	b96a      	cbnz	r2, 800afda <start_pass+0x14a>
 800afbe:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 800afc2:	b953      	cbnz	r3, 800afda <start_pass+0x14a>
 800afc4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
 800afc8:	b93b      	cbnz	r3, 800afda <start_pass+0x14a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800afca:	f8d0 319c 	ldr.w	r3, [r0, #412]	@ 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800afce:	2b3f      	cmp	r3, #63	@ 0x3f
 800afd0:	dc0b      	bgt.n	800afea <start_pass+0x15a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800afd2:	f8d0 21b0 	ldr.w	r2, [r0, #432]	@ 0x1b0
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d007      	beq.n	800afea <start_pass+0x15a>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	227d      	movs	r2, #125	@ 0x7d
 800afde:	f04f 31ff 	mov.w	r1, #4294967295
 800afe2:	4620      	mov	r0, r4
 800afe4:	615a      	str	r2, [r3, #20]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800afea:	4b30      	ldr	r3, [pc, #192]	@ (800b0ac <start_pass+0x21c>)
 800afec:	e792      	b.n	800af14 <start_pass+0x84>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800afee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800aff2:	f859 bf04 	ldr.w	fp, [r9, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800aff6:	b133      	cbz	r3, 800b006 <start_pass+0x176>
 800aff8:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800affc:	bb43      	cbnz	r3, 800b050 <start_pass+0x1c0>
 800affe:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d13a      	bne.n	800b07c <start_pass+0x1ec>
      tbl = compptr->dc_tbl_no;
 800b006:	f8db 6014 	ldr.w	r6, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800b00a:	2e0f      	cmp	r6, #15
 800b00c:	d906      	bls.n	800b01c <start_pass+0x18c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	2232      	movs	r2, #50	@ 0x32
 800b012:	4620      	mov	r0, r4
 800b014:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800b01c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800b020:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800b022:	b933      	cbnz	r3, 800b032 <start_pass+0x1a2>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800b024:	6863      	ldr	r3, [r4, #4]
 800b026:	2240      	movs	r2, #64	@ 0x40
 800b028:	2101      	movs	r1, #1
 800b02a:	4620      	mov	r0, r4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4798      	blx	r3
 800b030:	63b0      	str	r0, [r6, #56]	@ 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800b032:	2240      	movs	r2, #64	@ 0x40
 800b034:	2100      	movs	r1, #0
 800b036:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 800b038:	f01f f83a 	bl	802a0b0 <memset>
      entropy->last_dc_val[ci] = 0;
 800b03c:	f8c8 a000 	str.w	sl, [r8]
      entropy->dc_context[ci] = 0;
 800b040:	f8c8 a010 	str.w	sl, [r8, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800b044:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b048:	b9e3      	cbnz	r3, 800b084 <start_pass+0x1f4>
 800b04a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800b04e:	b1ab      	cbz	r3, 800b07c <start_pass+0x1ec>
      tbl = compptr->ac_tbl_no;
 800b050:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800b054:	2e0f      	cmp	r6, #15
 800b056:	d818      	bhi.n	800b08a <start_pass+0x1fa>
      if (entropy->ac_stats[tbl] == NULL)
 800b058:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800b05c:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 800b05e:	b93b      	cbnz	r3, 800b070 <start_pass+0x1e0>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b066:	2101      	movs	r1, #1
 800b068:	4620      	mov	r0, r4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4798      	blx	r3
 800b06e:	67b0      	str	r0, [r6, #120]	@ 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800b070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b074:	2100      	movs	r1, #0
 800b076:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 800b078:	f01f f81a 	bl	802a0b0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b07c:	3701      	adds	r7, #1
 800b07e:	f108 0804 	add.w	r8, r8, #4
 800b082:	e74d      	b.n	800af20 <start_pass+0x90>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800b084:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b088:	e7e1      	b.n	800b04e <start_pass+0x1be>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	2232      	movs	r2, #50	@ 0x32
 800b08e:	4620      	mov	r0, r4
 800b090:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4798      	blx	r3
 800b098:	e7de      	b.n	800b058 <start_pass+0x1c8>
 800b09a:	bf00      	nop
 800b09c:	0800b60f 	.word	0x0800b60f
 800b0a0:	0800b4e7 	.word	0x0800b4e7
 800b0a4:	0800b495 	.word	0x0800b495
 800b0a8:	0800b37f 	.word	0x0800b37f
 800b0ac:	0800b153 	.word	0x0800b153

0800b0b0 <process_restart>:
{
 800b0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b0b4:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	@ 0x1cc
{
 800b0b8:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	4798      	blx	r3
 800b0be:	b928      	cbnz	r0, 800b0cc <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	2219      	movs	r2, #25
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	615a      	str	r2, [r3, #20]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4798      	blx	r3
{
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	f105 0714 	add.w	r7, r5, #20
 800b0d2:	f504 78a8 	add.w	r8, r4, #336	@ 0x150
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800b0d6:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b0d8:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800b0dc:	42b3      	cmp	r3, r6
 800b0de:	dc0a      	bgt.n	800b0f6 <process_restart+0x46>
  entropy->c = 0;
 800b0e0:	2300      	movs	r3, #0
  entropy->a = 0;
 800b0e2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800b0e6:	f06f 030f 	mvn.w	r3, #15
 800b0ea:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b0ec:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800b0f0:	636b      	str	r3, [r5, #52]	@ 0x34
}
 800b0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b0f6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800b0fa:	f858 af04 	ldr.w	sl, [r8, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b0fe:	b12b      	cbz	r3, 800b10c <process_restart+0x5c>
 800b100:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b104:	b9ab      	cbnz	r3, 800b132 <process_restart+0x82>
 800b106:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800b10a:	b9e3      	cbnz	r3, 800b146 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800b10c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b110:	2240      	movs	r2, #64	@ 0x40
 800b112:	2100      	movs	r1, #0
 800b114:	330e      	adds	r3, #14
 800b116:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b11a:	f01e ffc9 	bl	802a0b0 <memset>
      entropy->last_dc_val[ci] = 0;
 800b11e:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800b122:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800b126:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b12a:	b97b      	cbnz	r3, 800b14c <process_restart+0x9c>
 800b12c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800b130:	b14b      	cbz	r3, 800b146 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800b132:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b13a:	2100      	movs	r1, #0
 800b13c:	331e      	adds	r3, #30
 800b13e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b142:	f01e ffb5 	bl	802a0b0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b146:	3601      	adds	r6, #1
 800b148:	3704      	adds	r7, #4
 800b14a:	e7c5      	b.n	800b0d8 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800b14c:	f8d4 3198 	ldr.w	r3, [r4, #408]	@ 0x198
 800b150:	e7ee      	b.n	800b130 <process_restart+0x80>

0800b152 <decode_mcu>:
{
 800b152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800b156:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
{
 800b15a:	b087      	sub	sp, #28
 800b15c:	4681      	mov	r9, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b15e:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800b162:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b164:	b132      	cbz	r2, 800b174 <decode_mcu+0x22>
    if (entropy->restarts_to_go == 0)
 800b166:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800b168:	b90a      	cbnz	r2, 800b16e <decode_mcu+0x1c>
      process_restart(cinfo);
 800b16a:	f7ff ffa1 	bl	800b0b0 <process_restart>
    entropy->restarts_to_go--;
 800b16e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800b170:	3a01      	subs	r2, #1
 800b172:	636a      	str	r2, [r5, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b174:	692a      	ldr	r2, [r5, #16]
 800b176:	3201      	adds	r2, #1
 800b178:	f000 809d 	beq.w	800b2b6 <decode_mcu+0x164>
  natural_order = cinfo->natural_order;
 800b17c:	f8d9 31ac 	ldr.w	r3, [r9, #428]	@ 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b180:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800b182:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b184:	f509 73b6 	add.w	r3, r9, #364	@ 0x16c
 800b188:	9303      	str	r3, [sp, #12]
 800b18a:	f8d9 216c 	ldr.w	r2, [r9, #364]	@ 0x16c
 800b18e:	42ba      	cmp	r2, r7
 800b190:	f340 8091 	ble.w	800b2b6 <decode_mcu+0x164>
    block = MCU_data[blkn];
 800b194:	9b05      	ldr	r3, [sp, #20]
 800b196:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b19a:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    compptr = cinfo->cur_comp_info[ci];
 800b1a2:	eb09 0281 	add.w	r2, r9, r1, lsl #2
    ci = cinfo->MCU_membership[blkn];
 800b1a6:	9303      	str	r3, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800b1a8:	eb05 0b81 	add.w	fp, r5, r1, lsl #2
 800b1ac:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b1b0:	f8db 1024 	ldr.w	r1, [fp, #36]	@ 0x24
    compptr = cinfo->cur_comp_info[ci];
 800b1b4:	9301      	str	r3, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800b1bc:	9302      	str	r3, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b1be:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 800b1c0:	eb00 0a01 	add.w	sl, r0, r1
    if (arith_decode(cinfo, st) == 0)
 800b1c4:	4648      	mov	r0, r9
 800b1c6:	4651      	mov	r1, sl
 800b1c8:	f7ff fdf8 	bl	800adbc <arith_decode>
 800b1cc:	bb48      	cbnz	r0, 800b222 <decode_mcu+0xd0>
      entropy->dc_context[ci] = 0;
 800b1ce:	f8cb 0024 	str.w	r0, [fp, #36]	@ 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800b1d2:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	801a      	strh	r2, [r3, #0]
    if (cinfo->lim_Se == 0) continue;
 800b1da:	f8d9 21b0 	ldr.w	r2, [r9, #432]	@ 0x1b0
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	f000 80b7 	beq.w	800b352 <decode_mcu+0x200>
    tbl = compptr->ac_tbl_no;
 800b1e4:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800b1e6:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800b1e8:	f8d3 a018 	ldr.w	sl, [r3, #24]
    k = 0;
 800b1ec:	eb05 0b8a 	add.w	fp, r5, sl, lsl #2
      st = entropy->ac_stats[tbl] + 3 * k;
 800b1f0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800b1f4:	f8db 4078 	ldr.w	r4, [fp, #120]	@ 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b1f8:	4648      	mov	r0, r9
      st = entropy->ac_stats[tbl] + 3 * k;
 800b1fa:	4414      	add	r4, r2
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	f7ff fddd 	bl	800adbc <arith_decode>
 800b202:	2800      	cmp	r0, #0
 800b204:	f040 80a5 	bne.w	800b352 <decode_mcu+0x200>
	if (arith_decode(cinfo, st + 1)) break;
 800b208:	1c61      	adds	r1, r4, #1
 800b20a:	4648      	mov	r0, r9
	k++;
 800b20c:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800b20e:	f7ff fdd5 	bl	800adbc <arith_decode>
 800b212:	2800      	cmp	r0, #0
 800b214:	d164      	bne.n	800b2e0 <decode_mcu+0x18e>
	if (k >= cinfo->lim_Se) {
 800b216:	f8d9 21b0 	ldr.w	r2, [r9, #432]	@ 0x1b0
	st += 3;
 800b21a:	3403      	adds	r4, #3
	if (k >= cinfo->lim_Se) {
 800b21c:	42b2      	cmp	r2, r6
 800b21e:	dcf3      	bgt.n	800b208 <decode_mcu+0xb6>
 800b220:	e03d      	b.n	800b29e <decode_mcu+0x14c>
      sign = arith_decode(cinfo, st + 1);
 800b222:	f10a 0101 	add.w	r1, sl, #1
 800b226:	4648      	mov	r0, r9
 800b228:	f7ff fdc8 	bl	800adbc <arith_decode>
      st += 2; st += sign;
 800b22c:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800b22e:	4604      	mov	r4, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b230:	4648      	mov	r0, r9
      st += 2; st += sign;
 800b232:	448a      	add	sl, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b234:	4651      	mov	r1, sl
 800b236:	f7ff fdc1 	bl	800adbc <arith_decode>
 800b23a:	4680      	mov	r8, r0
 800b23c:	b138      	cbz	r0, 800b24e <decode_mcu+0xfc>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800b23e:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 800b240:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800b244:	4651      	mov	r1, sl
 800b246:	4648      	mov	r0, r9
 800b248:	f7ff fdb8 	bl	800adbc <arith_decode>
 800b24c:	bb10      	cbnz	r0, 800b294 <decode_mcu+0x142>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800b24e:	9e02      	ldr	r6, [sp, #8]
 800b250:	2201      	movs	r2, #1
 800b252:	444e      	add	r6, r9
 800b254:	f896 00e8 	ldrb.w	r0, [r6, #232]	@ 0xe8
 800b258:	fa02 f000 	lsl.w	r0, r2, r0
 800b25c:	ebb8 0f60 	cmp.w	r8, r0, asr #1
 800b260:	db30      	blt.n	800b2c4 <decode_mcu+0x172>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800b262:	f896 00f8 	ldrb.w	r0, [r6, #248]	@ 0xf8
 800b266:	4082      	lsls	r2, r0
 800b268:	ebb8 0f62 	cmp.w	r8, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800b26c:	bfcc      	ite	gt
 800b26e:	1ce2      	addgt	r2, r4, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800b270:	1c62      	addle	r2, r4, #1
 800b272:	0092      	lsls	r2, r2, #2
      st += 14;
 800b274:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800b278:	4646      	mov	r6, r8
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800b27a:	f8cb 2024 	str.w	r2, [fp, #36]	@ 0x24
      while (m >>= 1)
 800b27e:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b282:	d121      	bne.n	800b2c8 <decode_mcu+0x176>
      v += 1; if (sign) v = -v;
 800b284:	bb54      	cbnz	r4, 800b2dc <decode_mcu+0x18a>
 800b286:	3601      	adds	r6, #1
      entropy->last_dc_val[ci] += v;
 800b288:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b28c:	4432      	add	r2, r6
 800b28e:	f8cb 2014 	str.w	r2, [fp, #20]
 800b292:	e79e      	b.n	800b1d2 <decode_mcu+0x80>
	  if ((m <<= 1) == 0x8000) {
 800b294:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b298:	f5b8 4f00 	cmp.w	r8, #32768	@ 0x8000
 800b29c:	d10f      	bne.n	800b2be <decode_mcu+0x16c>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b29e:	f8d9 2000 	ldr.w	r2, [r9]
 800b2a2:	2175      	movs	r1, #117	@ 0x75
 800b2a4:	4648      	mov	r0, r9
 800b2a6:	6151      	str	r1, [r2, #20]
 800b2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b2ac:	6852      	ldr	r2, [r2, #4]
 800b2ae:	4790      	blx	r2
	      entropy->ct = -1;			/* magnitude overflow */
 800b2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b4:	612b      	str	r3, [r5, #16]
}
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	b007      	add	sp, #28
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800b2be:	f10a 0a01 	add.w	sl, sl, #1
 800b2c2:	e7bf      	b.n	800b244 <decode_mcu+0xf2>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	e7d5      	b.n	800b274 <decode_mcu+0x122>
	if (arith_decode(cinfo, st)) v |= m;
 800b2c8:	4648      	mov	r0, r9
 800b2ca:	9102      	str	r1, [sp, #8]
 800b2cc:	f7ff fd76 	bl	800adbc <arith_decode>
 800b2d0:	9902      	ldr	r1, [sp, #8]
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0d3      	beq.n	800b27e <decode_mcu+0x12c>
 800b2d6:	ea46 0608 	orr.w	r6, r6, r8
 800b2da:	e7d0      	b.n	800b27e <decode_mcu+0x12c>
      v += 1; if (sign) v = -v;
 800b2dc:	43f6      	mvns	r6, r6
 800b2de:	e7d3      	b.n	800b288 <decode_mcu+0x136>
      st += 2;
 800b2e0:	f104 0802 	add.w	r8, r4, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b2e4:	f105 01b8 	add.w	r1, r5, #184	@ 0xb8
 800b2e8:	4648      	mov	r0, r9
 800b2ea:	f7ff fd67 	bl	800adbc <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b2ee:	4641      	mov	r1, r8
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b2f0:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f7ff fd62 	bl	800adbc <arith_decode>
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	b1b0      	cbz	r0, 800b32a <decode_mcu+0x1d8>
	if (arith_decode(cinfo, st)) {
 800b2fc:	4641      	mov	r1, r8
 800b2fe:	4648      	mov	r0, r9
 800b300:	f7ff fd5c 	bl	800adbc <arith_decode>
 800b304:	b188      	cbz	r0, 800b32a <decode_mcu+0x1d8>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b306:	eb09 010a 	add.w	r1, r9, sl
	  st = entropy->ac_stats[tbl] +
 800b30a:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
	  m <<= 1;
 800b30e:	0064      	lsls	r4, r4, #1
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b310:	f891 1108 	ldrb.w	r1, [r1, #264]	@ 0x108
 800b314:	42b1      	cmp	r1, r6
 800b316:	bfac      	ite	ge
 800b318:	21bd      	movge	r1, #189	@ 0xbd
 800b31a:	21d9      	movlt	r1, #217	@ 0xd9
	  st = entropy->ac_stats[tbl] +
 800b31c:	eb02 0801 	add.w	r8, r2, r1
	  while (arith_decode(cinfo, st)) {
 800b320:	4641      	mov	r1, r8
 800b322:	4648      	mov	r0, r9
 800b324:	f7ff fd4a 	bl	800adbc <arith_decode>
 800b328:	b9a8      	cbnz	r0, 800b356 <decode_mcu+0x204>
      st += 14;
 800b32a:	f108 010e 	add.w	r1, r8, #14
      v = m;
 800b32e:	46a0      	mov	r8, r4
      while (m >>= 1)
 800b330:	1064      	asrs	r4, r4, #1
 800b332:	d117      	bne.n	800b364 <decode_mcu+0x212>
      v += 1; if (sign) v = -v;
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	b9fb      	cbnz	r3, 800b378 <decode_mcu+0x226>
 800b338:	f108 0201 	add.w	r2, r8, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b342:	9b00      	ldr	r3, [sp, #0]
 800b344:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    } while (k < cinfo->lim_Se);
 800b348:	f8d9 21b0 	ldr.w	r2, [r9, #432]	@ 0x1b0
 800b34c:	42b2      	cmp	r2, r6
 800b34e:	f73f af4f 	bgt.w	800b1f0 <decode_mcu+0x9e>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b352:	3701      	adds	r7, #1
 800b354:	e719      	b.n	800b18a <decode_mcu+0x38>
	    if ((m <<= 1) == 0x8000) {
 800b356:	0064      	lsls	r4, r4, #1
 800b358:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800b35c:	d09f      	beq.n	800b29e <decode_mcu+0x14c>
	    st += 1;
 800b35e:	f108 0801 	add.w	r8, r8, #1
 800b362:	e7dd      	b.n	800b320 <decode_mcu+0x1ce>
	if (arith_decode(cinfo, st)) v |= m;
 800b364:	4648      	mov	r0, r9
 800b366:	9102      	str	r1, [sp, #8]
 800b368:	f7ff fd28 	bl	800adbc <arith_decode>
 800b36c:	9902      	ldr	r1, [sp, #8]
 800b36e:	2800      	cmp	r0, #0
 800b370:	d0de      	beq.n	800b330 <decode_mcu+0x1de>
 800b372:	ea48 0804 	orr.w	r8, r8, r4
 800b376:	e7db      	b.n	800b330 <decode_mcu+0x1de>
      v += 1; if (sign) v = -v;
 800b378:	ea6f 0208 	mvn.w	r2, r8
 800b37c:	e7de      	b.n	800b33c <decode_mcu+0x1ea>

0800b37e <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800b37e:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800b382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b386:	4604      	mov	r4, r0
 800b388:	b085      	sub	sp, #20
 800b38a:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b38c:	f8d0 61d0 	ldr.w	r6, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800b390:	b133      	cbz	r3, 800b3a0 <decode_mcu_AC_refine+0x22>
    if (entropy->restarts_to_go == 0)
 800b392:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b394:	b90b      	cbnz	r3, 800b39a <decode_mcu_AC_refine+0x1c>
      process_restart(cinfo);
 800b396:	f7ff fe8b 	bl	800b0b0 <process_restart>
    entropy->restarts_to_go--;
 800b39a:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b39c:	3b01      	subs	r3, #1
 800b39e:	6373      	str	r3, [r6, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b3a0:	6933      	ldr	r3, [r6, #16]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	d072      	beq.n	800b48c <decode_mcu_AC_refine+0x10e>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b3a6:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b3aa:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b3ac:	f04f 39ff 	mov.w	r9, #4294967295
  natural_order = cinfo->natural_order;
 800b3b0:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	@ 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b3b4:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b3b6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
  block = MCU_data[0];
 800b3ba:	682f      	ldr	r7, [r5, #0]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b3bc:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800b3be:	f8d4 819c 	ldr.w	r8, [r4, #412]	@ 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b3c2:	fa09 f303 	lsl.w	r3, r9, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b3c6:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b3c8:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800b3ca:	f1b8 0f00 	cmp.w	r8, #0
 800b3ce:	dc31      	bgt.n	800b434 <decode_mcu_AC_refine+0xb6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b3d0:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b3d4:	f8d4 5198 	ldr.w	r5, [r4, #408]	@ 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b3d8:	9303      	str	r3, [sp, #12]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b3da:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800b3de:	42ab      	cmp	r3, r5
 800b3e0:	db54      	blt.n	800b48c <decode_mcu_AC_refine+0x10e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b3e2:	1e6b      	subs	r3, r5, #1
 800b3e4:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800b3e6:	4545      	cmp	r5, r8
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b3e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b3ec:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b3f0:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800b3f4:	dd05      	ble.n	800b402 <decode_mcu_AC_refine+0x84>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b3f6:	4651      	mov	r1, sl
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f7ff fcdf 	bl	800adbc <arith_decode>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d144      	bne.n	800b48c <decode_mcu_AC_refine+0x10e>
      thiscoef = *block + natural_order[k];
 800b402:	f85b 9025 	ldr.w	r9, [fp, r5, lsl #2]
      st += 3; k++;
 800b406:	3501      	adds	r5, #1
      if (*thiscoef) {				/* previously nonzero coef */
 800b408:	f937 1019 	ldrsh.w	r1, [r7, r9, lsl #1]
 800b40c:	b1d9      	cbz	r1, 800b446 <decode_mcu_AC_refine+0xc8>
	if (arith_decode(cinfo, st + 2)) {
 800b40e:	f10a 0102 	add.w	r1, sl, #2
 800b412:	4620      	mov	r0, r4
 800b414:	f7ff fcd2 	bl	800adbc <arith_decode>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d0de      	beq.n	800b3da <decode_mcu_AC_refine+0x5c>
	  if (*thiscoef < 0)
 800b41c:	f937 1019 	ldrsh.w	r1, [r7, r9, lsl #1]
	    *thiscoef += m1;
 800b420:	f837 3019 	ldrh.w	r3, [r7, r9, lsl #1]
	  if (*thiscoef < 0)
 800b424:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800b426:	bfb4      	ite	lt
 800b428:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800b42a:	9a01      	ldrge	r2, [sp, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
 800b432:	e7d2      	b.n	800b3da <decode_mcu_AC_refine+0x5c>
    if ((*block)[natural_order[kex]]) break;
 800b434:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800b438:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1c7      	bne.n	800b3d0 <decode_mcu_AC_refine+0x52>
  for (kex = cinfo->Se; kex > 0; kex--)
 800b440:	f108 38ff 	add.w	r8, r8, #4294967295
 800b444:	e7c1      	b.n	800b3ca <decode_mcu_AC_refine+0x4c>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800b446:	f10a 0101 	add.w	r1, sl, #1
 800b44a:	4620      	mov	r0, r4
 800b44c:	f7ff fcb6 	bl	800adbc <arith_decode>
 800b450:	b158      	cbz	r0, 800b46a <decode_mcu_AC_refine+0xec>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800b452:	f106 01b8 	add.w	r1, r6, #184	@ 0xb8
 800b456:	4620      	mov	r0, r4
 800b458:	f7ff fcb0 	bl	800adbc <arith_decode>
 800b45c:	b110      	cbz	r0, 800b464 <decode_mcu_AC_refine+0xe6>
	  *thiscoef = m1;
 800b45e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b462:	e7e4      	b.n	800b42e <decode_mcu_AC_refine+0xb0>
	  *thiscoef = p1;
 800b464:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b468:	e7e1      	b.n	800b42e <decode_mcu_AC_refine+0xb0>
      if (k > cinfo->Se) {
 800b46a:	f8d4 219c 	ldr.w	r2, [r4, #412]	@ 0x19c
      st += 3; k++;
 800b46e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800b472:	42aa      	cmp	r2, r5
 800b474:	dac5      	bge.n	800b402 <decode_mcu_AC_refine+0x84>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	2275      	movs	r2, #117	@ 0x75
 800b47a:	f04f 31ff 	mov.w	r1, #4294967295
 800b47e:	4620      	mov	r0, r4
 800b480:	615a      	str	r2, [r3, #20]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800b486:	f04f 33ff 	mov.w	r3, #4294967295
 800b48a:	6133      	str	r3, [r6, #16]
}
 800b48c:	2001      	movs	r0, #1
 800b48e:	b005      	add	sp, #20
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b494 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800b494:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	4604      	mov	r4, r0
 800b49e:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b4a0:	f8d0 61d0 	ldr.w	r6, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800b4a4:	b133      	cbz	r3, 800b4b4 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800b4a6:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b4a8:	b90b      	cbnz	r3, 800b4ae <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800b4aa:	f7ff fe01 	bl	800b0b0 <process_restart>
    entropy->restarts_to_go--;
 800b4ae:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	6373      	str	r3, [r6, #52]	@ 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b4b4:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 800b4b8:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800b4ba:	36b8      	adds	r6, #184	@ 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b4bc:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b4be:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b4c0:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800b4c4:	42ab      	cmp	r3, r5
 800b4c6:	dc02      	bgt.n	800b4ce <decode_mcu_DC_refine+0x3a>
}
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7ff fc73 	bl	800adbc <arith_decode>
 800b4d6:	b120      	cbz	r0, 800b4e2 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800b4d8:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800b4dc:	8813      	ldrh	r3, [r2, #0]
 800b4de:	433b      	orrs	r3, r7
 800b4e0:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b4e2:	3501      	adds	r5, #1
 800b4e4:	e7ec      	b.n	800b4c0 <decode_mcu_DC_refine+0x2c>

0800b4e6 <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800b4e6:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
{
 800b4ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ee:	4683      	mov	fp, r0
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	460c      	mov	r4, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b4f4:	f8d0 61d0 	ldr.w	r6, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800b4f8:	b132      	cbz	r2, 800b508 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800b4fa:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 800b4fc:	b90a      	cbnz	r2, 800b502 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800b4fe:	f7ff fdd7 	bl	800b0b0 <process_restart>
    entropy->restarts_to_go--;
 800b502:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 800b504:	3a01      	subs	r2, #1
 800b506:	6372      	str	r2, [r6, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b508:	6932      	ldr	r2, [r6, #16]
 800b50a:	3201      	adds	r2, #1
 800b50c:	d01a      	beq.n	800b544 <decode_mcu_AC_first+0x5e>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b50e:	f8db 2154 	ldr.w	r2, [fp, #340]	@ 0x154
  block = MCU_data[0];
 800b512:	6823      	ldr	r3, [r4, #0]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b514:	f8d2 8018 	ldr.w	r8, [r2, #24]
  natural_order = cinfo->natural_order;
 800b518:	f8db a1ac 	ldr.w	sl, [fp, #428]	@ 0x1ac
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b51c:	f8db 5198 	ldr.w	r5, [fp, #408]	@ 0x198
 800b520:	eb06 0988 	add.w	r9, r6, r8, lsl #2
  block = MCU_data[0];
 800b524:	9300      	str	r3, [sp, #0]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b526:	f8db 219c 	ldr.w	r2, [fp, #412]	@ 0x19c
 800b52a:	42aa      	cmp	r2, r5
 800b52c:	db0a      	blt.n	800b544 <decode_mcu_AC_first+0x5e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b52e:	1e6a      	subs	r2, r5, #1
 800b530:	f8d9 4078 	ldr.w	r4, [r9, #120]	@ 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800b534:	4658      	mov	r0, fp
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b536:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b53a:	4414      	add	r4, r2
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800b53c:	4621      	mov	r1, r4
 800b53e:	f7ff fc3d 	bl	800adbc <arith_decode>
 800b542:	b1b0      	cbz	r0, 800b572 <decode_mcu_AC_first+0x8c>
}
 800b544:	2001      	movs	r0, #1
 800b546:	b005      	add	sp, #20
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800b54c:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800b54e:	f8db 219c 	ldr.w	r2, [fp, #412]	@ 0x19c
      st += 3; k++;
 800b552:	3403      	adds	r4, #3
      if (k > cinfo->Se) {
 800b554:	42aa      	cmp	r2, r5
 800b556:	da0c      	bge.n	800b572 <decode_mcu_AC_first+0x8c>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b558:	f8db 2000 	ldr.w	r2, [fp]
 800b55c:	2175      	movs	r1, #117	@ 0x75
 800b55e:	4658      	mov	r0, fp
 800b560:	6151      	str	r1, [r2, #20]
 800b562:	f04f 31ff 	mov.w	r1, #4294967295
 800b566:	6852      	ldr	r2, [r2, #4]
 800b568:	4790      	blx	r2
	    entropy->ct = -1;			/* magnitude overflow */
 800b56a:	f04f 33ff 	mov.w	r3, #4294967295
 800b56e:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800b570:	e7e8      	b.n	800b544 <decode_mcu_AC_first+0x5e>
    while (arith_decode(cinfo, st + 1) == 0) {
 800b572:	1c61      	adds	r1, r4, #1
 800b574:	4658      	mov	r0, fp
 800b576:	f7ff fc21 	bl	800adbc <arith_decode>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d0e6      	beq.n	800b54c <decode_mcu_AC_first+0x66>
    st += 2;
 800b57e:	1ca7      	adds	r7, r4, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b580:	f106 01b8 	add.w	r1, r6, #184	@ 0xb8
 800b584:	4658      	mov	r0, fp
 800b586:	f7ff fc19 	bl	800adbc <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800b58a:	4639      	mov	r1, r7
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b58c:	9001      	str	r0, [sp, #4]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800b58e:	4658      	mov	r0, fp
 800b590:	f7ff fc14 	bl	800adbc <arith_decode>
 800b594:	4604      	mov	r4, r0
 800b596:	b1a8      	cbz	r0, 800b5c4 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) {
 800b598:	4639      	mov	r1, r7
 800b59a:	4658      	mov	r0, fp
 800b59c:	f7ff fc0e 	bl	800adbc <arith_decode>
 800b5a0:	b180      	cbz	r0, 800b5c4 <decode_mcu_AC_first+0xde>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b5a2:	eb0b 0108 	add.w	r1, fp, r8
	st = entropy->ac_stats[tbl] +
 800b5a6:	f8d9 2078 	ldr.w	r2, [r9, #120]	@ 0x78
	m <<= 1;
 800b5aa:	0064      	lsls	r4, r4, #1
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b5ac:	f891 1108 	ldrb.w	r1, [r1, #264]	@ 0x108
 800b5b0:	42a9      	cmp	r1, r5
 800b5b2:	bfac      	ite	ge
 800b5b4:	21bd      	movge	r1, #189	@ 0xbd
 800b5b6:	21d9      	movlt	r1, #217	@ 0xd9
	st = entropy->ac_stats[tbl] +
 800b5b8:	1857      	adds	r7, r2, r1
	while (arith_decode(cinfo, st)) {
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	4658      	mov	r0, fp
 800b5be:	f7ff fbfd 	bl	800adbc <arith_decode>
 800b5c2:	b988      	cbnz	r0, 800b5e8 <decode_mcu_AC_first+0x102>
    st += 14;
 800b5c4:	f107 010e 	add.w	r1, r7, #14
    v = m;
 800b5c8:	4622      	mov	r2, r4
    while (m >>= 1)
 800b5ca:	1064      	asrs	r4, r4, #1
 800b5cc:	d112      	bne.n	800b5f4 <decode_mcu_AC_first+0x10e>
    v += 1; if (sign) v = -v;
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	b9db      	cbnz	r3, 800b60a <decode_mcu_AC_first+0x124>
 800b5d2:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800b5d4:	f8db 01a4 	ldr.w	r0, [fp, #420]	@ 0x1a4
 800b5d8:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b5dc:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800b5de:	4082      	lsls	r2, r0
 800b5e0:	9b00      	ldr	r3, [sp, #0]
 800b5e2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b5e6:	e79e      	b.n	800b526 <decode_mcu_AC_first+0x40>
	  if ((m <<= 1) == 0x8000) {
 800b5e8:	0064      	lsls	r4, r4, #1
 800b5ea:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800b5ee:	d0b3      	beq.n	800b558 <decode_mcu_AC_first+0x72>
	  st += 1;
 800b5f0:	3701      	adds	r7, #1
 800b5f2:	e7e2      	b.n	800b5ba <decode_mcu_AC_first+0xd4>
      if (arith_decode(cinfo, st)) v |= m;
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b5fa:	f7ff fbdf 	bl	800adbc <arith_decode>
 800b5fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b602:	2800      	cmp	r0, #0
 800b604:	d0e1      	beq.n	800b5ca <decode_mcu_AC_first+0xe4>
 800b606:	4322      	orrs	r2, r4
 800b608:	e7df      	b.n	800b5ca <decode_mcu_AC_first+0xe4>
    v += 1; if (sign) v = -v;
 800b60a:	43d2      	mvns	r2, r2
 800b60c:	e7e2      	b.n	800b5d4 <decode_mcu_AC_first+0xee>

0800b60e <decode_mcu_DC_first>:
{
 800b60e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800b612:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800b616:	b085      	sub	sp, #20
 800b618:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b61a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800b61e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800b620:	b133      	cbz	r3, 800b630 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800b622:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b624:	b90b      	cbnz	r3, 800b62a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800b626:	f7ff fd43 	bl	800b0b0 <process_restart>
    entropy->restarts_to_go--;
 800b62a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b62c:	3b01      	subs	r3, #1
 800b62e:	636b      	str	r3, [r5, #52]	@ 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b630:	692b      	ldr	r3, [r5, #16]
 800b632:	3301      	adds	r3, #1
 800b634:	d07a      	beq.n	800b72c <decode_mcu_DC_first+0x11e>
 800b636:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b63a:	f04f 0900 	mov.w	r9, #0
 800b63e:	9301      	str	r3, [sp, #4]
 800b640:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800b644:	454b      	cmp	r3, r9
 800b646:	dd71      	ble.n	800b72c <decode_mcu_DC_first+0x11e>
    block = MCU_data[blkn];
 800b648:	9b03      	ldr	r3, [sp, #12]
    ci = cinfo->MCU_membership[blkn];
 800b64a:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800b64c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800b650:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800b652:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b656:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800b658:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b65c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 800b660:	f8d2 2154 	ldr.w	r2, [r2, #340]	@ 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b664:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800b668:	6952      	ldr	r2, [r2, #20]
 800b66a:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 800b66e:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b670:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b672:	eb00 0b01 	add.w	fp, r0, r1
    if (arith_decode(cinfo, st) == 0)
 800b676:	4620      	mov	r0, r4
 800b678:	4659      	mov	r1, fp
 800b67a:	f7ff fb9f 	bl	800adbc <arith_decode>
 800b67e:	b958      	cbnz	r0, 800b698 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800b680:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800b684:	f8d4 21a4 	ldr.w	r2, [r4, #420]	@ 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b688:	f109 0901 	add.w	r9, r9, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800b68c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b690:	4093      	lsls	r3, r2
 800b692:	9a02      	ldr	r2, [sp, #8]
 800b694:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b696:	e7d3      	b.n	800b640 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800b698:	f10b 0101 	add.w	r1, fp, #1
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7ff fb8d 	bl	800adbc <arith_decode>
      st += 2; st += sign;
 800b6a2:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800b6a4:	4606      	mov	r6, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b6a6:	4620      	mov	r0, r4
      st += 2; st += sign;
 800b6a8:	448b      	add	fp, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b6aa:	4659      	mov	r1, fp
 800b6ac:	f7ff fb86 	bl	800adbc <arith_decode>
 800b6b0:	4680      	mov	r8, r0
 800b6b2:	b138      	cbz	r0, 800b6c4 <decode_mcu_DC_first+0xb6>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800b6b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b6b6:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800b6ba:	4659      	mov	r1, fp
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f7ff fb7d 	bl	800adbc <arith_decode>
 800b6c2:	bb18      	cbnz	r0, 800b70c <decode_mcu_DC_first+0xfe>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800b6c4:	9f00      	ldr	r7, [sp, #0]
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4427      	add	r7, r4
 800b6ca:	f897 20e8 	ldrb.w	r2, [r7, #232]	@ 0xe8
 800b6ce:	fa03 f202 	lsl.w	r2, r3, r2
 800b6d2:	ebb8 0f62 	cmp.w	r8, r2, asr #1
 800b6d6:	db30      	blt.n	800b73a <decode_mcu_DC_first+0x12c>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800b6d8:	f897 20f8 	ldrb.w	r2, [r7, #248]	@ 0xf8
 800b6dc:	fa03 f202 	lsl.w	r2, r3, r2
 800b6e0:	ebb8 0f62 	cmp.w	r8, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800b6e4:	bfcc      	ite	gt
 800b6e6:	1cf2      	addgt	r2, r6, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800b6e8:	1c72      	addle	r2, r6, #1
 800b6ea:	0092      	lsls	r2, r2, #2
      st += 14;
 800b6ec:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800b6f0:	4647      	mov	r7, r8
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800b6f2:	f8ca 2024 	str.w	r2, [sl, #36]	@ 0x24
      while (m >>= 1)
 800b6f6:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b6fa:	d120      	bne.n	800b73e <decode_mcu_DC_first+0x130>
      v += 1; if (sign) v = -v;
 800b6fc:	bb4e      	cbnz	r6, 800b752 <decode_mcu_DC_first+0x144>
 800b6fe:	3701      	adds	r7, #1
      entropy->last_dc_val[ci] += v;
 800b700:	f8da 2014 	ldr.w	r2, [sl, #20]
 800b704:	443a      	add	r2, r7
 800b706:	f8ca 2014 	str.w	r2, [sl, #20]
 800b70a:	e7bb      	b.n	800b684 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800b70c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b710:	f5b8 4f00 	cmp.w	r8, #32768	@ 0x8000
 800b714:	d10e      	bne.n	800b734 <decode_mcu_DC_first+0x126>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	2275      	movs	r2, #117	@ 0x75
 800b71a:	f04f 31ff 	mov.w	r1, #4294967295
 800b71e:	4620      	mov	r0, r4
 800b720:	615a      	str	r2, [r3, #20]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800b726:	f04f 33ff 	mov.w	r3, #4294967295
 800b72a:	612b      	str	r3, [r5, #16]
}
 800b72c:	2001      	movs	r0, #1
 800b72e:	b005      	add	sp, #20
 800b730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800b734:	f10b 0b01 	add.w	fp, fp, #1
 800b738:	e7bf      	b.n	800b6ba <decode_mcu_DC_first+0xac>
 800b73a:	2200      	movs	r2, #0
 800b73c:	e7d6      	b.n	800b6ec <decode_mcu_DC_first+0xde>
	if (arith_decode(cinfo, st)) v |= m;
 800b73e:	4620      	mov	r0, r4
 800b740:	9100      	str	r1, [sp, #0]
 800b742:	f7ff fb3b 	bl	800adbc <arith_decode>
 800b746:	9900      	ldr	r1, [sp, #0]
 800b748:	2800      	cmp	r0, #0
 800b74a:	d0d4      	beq.n	800b6f6 <decode_mcu_DC_first+0xe8>
 800b74c:	ea47 0708 	orr.w	r7, r7, r8
 800b750:	e7d1      	b.n	800b6f6 <decode_mcu_DC_first+0xe8>
      v += 1; if (sign) v = -v;
 800b752:	43ff      	mvns	r7, r7
 800b754:	e7d4      	b.n	800b700 <decode_mcu_DC_first+0xf2>
	...

0800b758 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b758:	6843      	ldr	r3, [r0, #4]
 800b75a:	22bc      	movs	r2, #188	@ 0xbc
 800b75c:	2101      	movs	r1, #1
 800b75e:	681b      	ldr	r3, [r3, #0]
{
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b764:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800b766:	4b14      	ldr	r3, [pc, #80]	@ (800b7b8 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b768:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800b76a:	f8c4 01d0 	str.w	r0, [r4, #464]	@ 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800b76e:	2280      	movs	r2, #128	@ 0x80
  entropy->pub.start_pass = start_pass;
 800b770:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800b774:	2100      	movs	r1, #0
 800b776:	f01e fc9b 	bl	802a0b0 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800b77a:	2371      	movs	r3, #113	@ 0x71
 800b77c:	f885 30b8 	strb.w	r3, [r5, #184]	@ 0xb8

  if (cinfo->progressive_mode) {
 800b780:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b784:	b17b      	cbz	r3, 800b7a6 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b786:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b788:	2101      	movs	r1, #1
 800b78a:	6863      	ldr	r3, [r4, #4]
 800b78c:	4620      	mov	r0, r4
 800b78e:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b790:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4798      	blx	r3
 800b796:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800b798:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b79c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b79e:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800b7a2:	42ab      	cmp	r3, r5
 800b7a4:	dc00      	bgt.n	800b7a8 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800b7a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b7ac:	21ff      	movs	r1, #255	@ 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b7ae:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800b7b0:	f01e fc7e 	bl	802a0b0 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b7b4:	e7f2      	b.n	800b79c <jinit_arith_decoder+0x44>
 800b7b6:	bf00      	nop
 800b7b8:	0800ae91 	.word	0x0800ae91

0800b7bc <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800b7c0:	6803      	ldr	r3, [r0, #0]
 800b7c2:	227b      	movs	r2, #123	@ 0x7b
 800b7c4:	f04f 31ff 	mov.w	r1, #4294967295
{
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800b7cc:	615a      	str	r2, [r3, #20]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800b7d2:	69a3      	ldr	r3, [r4, #24]
 800b7d4:	4a02      	ldr	r2, [pc, #8]	@ (800b7e0 <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800b7d6:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800b7d8:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800b7da:	2202      	movs	r2, #2
 800b7dc:	605a      	str	r2, [r3, #4]
}
 800b7de:	bd10      	pop	{r4, pc}
 800b7e0:	0802d5ac 	.word	0x0802d5ac

0800b7e4 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800b7e4:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800b7e6:	1e0c      	subs	r4, r1, #0
{
 800b7e8:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800b7ea:	dd08      	ble.n	800b7fe <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800b7ec:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800b7ee:	686b      	ldr	r3, [r5, #4]
 800b7f0:	42a3      	cmp	r3, r4
 800b7f2:	db05      	blt.n	800b800 <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800b7f4:	682a      	ldr	r2, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800b7f6:	1b1b      	subs	r3, r3, r4
    src->next_input_byte += (size_t) num_bytes;
 800b7f8:	4422      	add	r2, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800b7fa:	606b      	str	r3, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800b7fc:	602a      	str	r2, [r5, #0]
  }
}
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
      num_bytes -= (long) src->bytes_in_buffer;
 800b800:	1ae4      	subs	r4, r4, r3
      (void) (*src->fill_input_buffer) (cinfo);
 800b802:	4630      	mov	r0, r6
 800b804:	68eb      	ldr	r3, [r5, #12]
 800b806:	4798      	blx	r3
 800b808:	e7f1      	b.n	800b7ee <skip_input_data+0xa>

0800b80a <term_source>:
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr cinfo)
 800b80a:	4770      	bx	lr

0800b80c <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	4604      	mov	r4, r0
 800b810:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800b812:	460d      	mov	r5, r1
 800b814:	b101      	cbz	r1, 800b818 <jpeg_mem_src+0xc>
 800b816:	b92a      	cbnz	r2, 800b824 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800b818:	6823      	ldr	r3, [r4, #0]
 800b81a:	222b      	movs	r2, #43	@ 0x2b
 800b81c:	4620      	mov	r0, r4
 800b81e:	615a      	str	r2, [r3, #20]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800b824:	69a1      	ldr	r1, [r4, #24]
 800b826:	b929      	cbnz	r1, 800b834 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800b828:	6863      	ldr	r3, [r4, #4]
 800b82a:	221c      	movs	r2, #28
 800b82c:	4620      	mov	r0, r4
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800b832:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800b834:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800b836:	4a06      	ldr	r2, [pc, #24]	@ (800b850 <jpeg_mem_src+0x44>)
 800b838:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800b83a:	4a06      	ldr	r2, [pc, #24]	@ (800b854 <jpeg_mem_src+0x48>)
 800b83c:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800b83e:	4a06      	ldr	r2, [pc, #24]	@ (800b858 <jpeg_mem_src+0x4c>)
 800b840:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800b842:	4a06      	ldr	r2, [pc, #24]	@ (800b85c <jpeg_mem_src+0x50>)
 800b844:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800b846:	4a06      	ldr	r2, [pc, #24]	@ (800b860 <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800b848:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800b84c:	619a      	str	r2, [r3, #24]
}
 800b84e:	bd70      	pop	{r4, r5, r6, pc}
 800b850:	0800b7bd 	.word	0x0800b7bd
 800b854:	0800b7c1 	.word	0x0800b7c1
 800b858:	0800b7e5 	.word	0x0800b7e5
 800b85c:	0800f969 	.word	0x0800f969
 800b860:	0800b80b 	.word	0x0800b80b

0800b864 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800b864:	f8d0 2150 	ldr.w	r2, [r0, #336]	@ 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b868:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800b86c:	2a01      	cmp	r2, #1
 800b86e:	dc0f      	bgt.n	800b890 <start_iMCU_row+0x2c>
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800b870:	f8d0 2148 	ldr.w	r2, [r0, #328]	@ 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800b874:	f8d0 1154 	ldr.w	r1, [r0, #340]	@ 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800b878:	3a01      	subs	r2, #1
 800b87a:	f8d0 0094 	ldr.w	r0, [r0, #148]	@ 0x94
 800b87e:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800b880:	bf34      	ite	cc
 800b882:	68ca      	ldrcc	r2, [r1, #12]
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800b884:	6cca      	ldrcs	r2, [r1, #76]	@ 0x4c
    coef->MCU_rows_per_iMCU_row = 1;
 800b886:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800b888:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800b88a:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800b88e:	4770      	bx	lr
 800b890:	2201      	movs	r2, #1
 800b892:	e7f8      	b.n	800b886 <start_iMCU_row+0x22>

0800b894 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800b894:	2200      	movs	r2, #0
 800b896:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
  start_iMCU_row(cinfo);
 800b89a:	f7ff bfe3 	b.w	800b864 <start_iMCU_row>

0800b89e <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800b89e:	2000      	movs	r0, #0
 800b8a0:	4770      	bx	lr

0800b8a2 <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800b8a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a6:	f500 7ba8 	add.w	fp, r0, #336	@ 0x150
 800b8aa:	b08f      	sub	sp, #60	@ 0x3c
 800b8ac:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b8ae:	f8d0 51c0 	ldr.w	r5, [r0, #448]	@ 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b8b2:	465f      	mov	r7, fp
 800b8b4:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b8b6:	f04f 0801 	mov.w	r8, #1
 800b8ba:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b8be:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800b8c2:	42b3      	cmp	r3, r6
 800b8c4:	dc13      	bgt.n	800b8ee <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b8c6:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b8c8:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b8cc:	69eb      	ldr	r3, [r5, #28]
 800b8ce:	42b3      	cmp	r3, r6
 800b8d0:	dc22      	bgt.n	800b918 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800b8d2:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800b8d6:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
 800b8da:	3301      	adds	r3, #1
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800b8e2:	d271      	bcs.n	800b9c8 <consume_data+0x126>
    start_iMCU_row(cinfo);
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f7ff ffbd 	bl	800b864 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800b8ea:	2003      	movs	r0, #3
 800b8ec:	e044      	b.n	800b978 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800b8ee:	f857 1f04 	ldr.w	r1, [r7, #4]!
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b8f2:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800b8f4:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b8f6:	6849      	ldr	r1, [r1, #4]
 800b8f8:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800b8fc:	3112      	adds	r1, #18
 800b8fe:	f8cd 8000 	str.w	r8, [sp]
 800b902:	435a      	muls	r2, r3
 800b904:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800b908:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b90c:	4620      	mov	r0, r4
 800b90e:	47d0      	blx	sl
 800b910:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b914:	3601      	adds	r6, #1
 800b916:	e7d2      	b.n	800b8be <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800b918:	00b3      	lsls	r3, r6, #2
 800b91a:	696f      	ldr	r7, [r5, #20]
 800b91c:	9308      	str	r3, [sp, #32]
 800b91e:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 800b922:	42bb      	cmp	r3, r7
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	d94b      	bls.n	800b9c2 <consume_data+0x120>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b92a:	f8d4 2150 	ldr.w	r2, [r4, #336]	@ 0x150
 800b92e:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800b930:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b932:	9206      	str	r2, [sp, #24]
 800b934:	e013      	b.n	800b95e <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800b936:	f85a 2f04 	ldr.w	r2, [sl, #4]!
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b93a:	f04f 0c00 	mov.w	ip, #0
 800b93e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b942:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	@ 0x38
 800b946:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b948:	fb07 f20e 	mul.w	r2, r7, lr
 800b94c:	01d2      	lsls	r2, r2, #7
 800b94e:	9204      	str	r2, [sp, #16]
 800b950:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800b954:	9209      	str	r2, [sp, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b956:	9a05      	ldr	r2, [sp, #20]
 800b958:	4562      	cmp	r2, ip
 800b95a:	dc10      	bgt.n	800b97e <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b95c:	3301      	adds	r3, #1
 800b95e:	9a06      	ldr	r2, [sp, #24]
 800b960:	429a      	cmp	r2, r3
 800b962:	dce8      	bgt.n	800b936 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800b964:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 800b968:	f105 0120 	add.w	r1, r5, #32
 800b96c:	4620      	mov	r0, r4
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	4798      	blx	r3
 800b972:	bb20      	cbnz	r0, 800b9be <consume_data+0x11c>
	coef->MCU_ctr = MCU_col_num;
 800b974:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800b978:	b00f      	add	sp, #60	@ 0x3c
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b97e:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800b982:	9904      	ldr	r1, [sp, #16]
 800b984:	f852 2008 	ldr.w	r2, [r2, r8]
 800b988:	440a      	add	r2, r1
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b98a:	2100      	movs	r1, #0
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b98c:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b98e:	9a03      	ldr	r2, [sp, #12]
 800b990:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b994:	3207      	adds	r2, #7
 800b996:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800b99a:	9807      	ldr	r0, [sp, #28]
 800b99c:	458e      	cmp	lr, r1
 800b99e:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 800b9a2:	dc08      	bgt.n	800b9b6 <consume_data+0x114>
 800b9a4:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b9a6:	f10c 0c01 	add.w	ip, ip, #1
 800b9aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ac:	f108 0804 	add.w	r8, r8, #4
 800b9b0:	4411      	add	r1, r2
 800b9b2:	9103      	str	r1, [sp, #12]
 800b9b4:	e7cf      	b.n	800b956 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b9b6:	3101      	adds	r1, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800b9b8:	f842 0f04 	str.w	r0, [r2, #4]!
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b9bc:	e7ed      	b.n	800b99a <consume_data+0xf8>
	 MCU_col_num++) {
 800b9be:	3701      	adds	r7, #1
 800b9c0:	e7ad      	b.n	800b91e <consume_data+0x7c>
       yoffset++) {
 800b9c2:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800b9c4:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800b9c6:	e781      	b.n	800b8cc <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800b9c8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800b9d2:	2004      	movs	r0, #4
 800b9d4:	e7d0      	b.n	800b978 <consume_data+0xd6>

0800b9d6 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800b9d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	4604      	mov	r4, r0
 800b9dc:	b089      	sub	sp, #36	@ 0x24
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b9de:	f8d0 61c0 	ldr.w	r6, [r0, #448]	@ 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b9e2:	f8d0 5148 	ldr.w	r5, [r0, #328]	@ 0x148
{
 800b9e6:	9105      	str	r1, [sp, #20]
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b9e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800b9ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	db1d      	blt.n	800ba30 <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800b9f4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b9f8:	d103      	bne.n	800ba02 <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800b9fa:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d916      	bls.n	800ba30 <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ba02:	f105 3bff 	add.w	fp, r5, #4294967295
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800ba06:	f106 0348 	add.w	r3, r6, #72	@ 0x48
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ba0a:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
 800ba0e:	2700      	movs	r7, #0
    buffer = (*cinfo->mem->access_virt_barray)
 800ba10:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ba12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800ba14:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ba18:	42bb      	cmp	r3, r7
 800ba1a:	dc13      	bgt.n	800ba44 <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800ba1c:	1c50      	adds	r0, r2, #1
 800ba1e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800ba22:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
 800ba26:	4298      	cmp	r0, r3
 800ba28:	bf34      	ite	cc
 800ba2a:	2003      	movcc	r0, #3
 800ba2c:	2004      	movcs	r0, #4
 800ba2e:	e006      	b.n	800ba3e <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800ba30:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800ba34:	4620      	mov	r0, r4
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4798      	blx	r3
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d1d4      	bne.n	800b9e8 <decompress_data+0x12>
}
 800ba3e:	b009      	add	sp, #36	@ 0x24
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800ba44:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba46:	b913      	cbnz	r3, 800ba4e <decompress_data+0x78>
       ci++, compptr++) {
 800ba48:	3701      	adds	r7, #1
 800ba4a:	3558      	adds	r5, #88	@ 0x58
 800ba4c:	e7e1      	b.n	800ba12 <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800ba4e:	6861      	ldr	r1, [r4, #4]
 800ba50:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800ba52:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800ba54:	9000      	str	r0, [sp, #0]
 800ba56:	4620      	mov	r0, r4
 800ba58:	6a0e      	ldr	r6, [r1, #32]
 800ba5a:	435a      	muls	r2, r3
 800ba5c:	9906      	ldr	r1, [sp, #24]
 800ba5e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ba62:	47b0      	blx	r6
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ba64:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    buffer = (*cinfo->mem->access_virt_barray)
 800ba68:	9003      	str	r0, [sp, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ba6a:	455b      	cmp	r3, fp
 800ba6c:	68eb      	ldr	r3, [r5, #12]
 800ba6e:	d221      	bcs.n	800bab4 <decompress_data+0xde>
      block_rows = compptr->v_samp_factor;
 800ba70:	9302      	str	r3, [sp, #8]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ba72:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ba76:	f04f 0800 	mov.w	r8, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ba7a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	461e      	mov	r6, r3
    output_ptr = output_buf[ci];
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ba88:	9a02      	ldr	r2, [sp, #8]
 800ba8a:	4590      	cmp	r8, r2
 800ba8c:	dadc      	bge.n	800ba48 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800ba8e:	9a03      	ldr	r2, [sp, #12]
      output_col = 0;
 800ba90:	f04f 0a00 	mov.w	sl, #0
      buffer_ptr = buffer[block_row];
 800ba94:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ba98:	46d1      	mov	r9, sl
      buffer_ptr = buffer[block_row];
 800ba9a:	9204      	str	r2, [sp, #16]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ba9c:	69e9      	ldr	r1, [r5, #28]
 800ba9e:	9a04      	ldr	r2, [sp, #16]
 800baa0:	4549      	cmp	r1, r9
 800baa2:	eb02 12c9 	add.w	r2, r2, r9, lsl #7
 800baa6:	d80f      	bhi.n	800bac8 <decompress_data+0xf2>
      output_ptr += compptr->DCT_v_scaled_size;
 800baa8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
    for (block_row = 0; block_row < block_rows; block_row++) {
 800baaa:	f108 0801 	add.w	r8, r8, #1
      output_ptr += compptr->DCT_v_scaled_size;
 800baae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bab2:	e7e9      	b.n	800ba88 <decompress_data+0xb2>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800bab4:	6a2e      	ldr	r6, [r5, #32]
 800bab6:	fbb6 f2f3 	udiv	r2, r6, r3
 800baba:	fb03 6212 	mls	r2, r3, r2, r6
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800babe:	2a00      	cmp	r2, #0
 800bac0:	bf08      	it	eq
 800bac2:	461a      	moveq	r2, r3
 800bac4:	9202      	str	r2, [sp, #8]
 800bac6:	e7d4      	b.n	800ba72 <decompress_data+0x9c>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800bac8:	f8cd a000 	str.w	sl, [sp]
 800bacc:	4629      	mov	r1, r5
 800bace:	9307      	str	r3, [sp, #28]
 800bad0:	4620      	mov	r0, r4
 800bad2:	47b0      	blx	r6
	output_col += compptr->DCT_h_scaled_size;
 800bad4:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bad6:	f109 0901 	add.w	r9, r9, #1
 800bada:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800badc:	4492      	add	sl, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bade:	e7dd      	b.n	800ba9c <decompress_data+0xc6>

0800bae0 <start_output_pass>:
{
 800bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bae4:	f8d0 51c0 	ldr.w	r5, [r0, #448]	@ 0x1c0
{
 800bae8:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800baea:	692b      	ldr	r3, [r5, #16]
 800baec:	b323      	cbz	r3, 800bb38 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800baee:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d04b      	beq.n	800bb8c <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800baf4:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d047      	beq.n	800bb8c <start_output_pass+0xac>
 800bafc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d043      	beq.n	800bb8c <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800bb04:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bb06:	b93b      	cbnz	r3, 800bb18 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bb08:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800bb0a:	2118      	movs	r1, #24
 800bb0c:	6843      	ldr	r3, [r0, #4]
 800bb0e:	434a      	muls	r2, r1
 800bb10:	2101      	movs	r1, #1
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800bb16:	6728      	str	r0, [r5, #112]	@ 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb18:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800bb1a:	f8d5 c070 	ldr.w	ip, [r5, #112]	@ 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb1e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	@ 0xd8
 800bb22:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800bb26:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800bb2a:	fb0e c703 	mla	r7, lr, r3, ip
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	db07      	blt.n	800bb42 <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800bb32:	b359      	cbz	r1, 800bb8c <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800bb34:	4b16      	ldr	r3, [pc, #88]	@ (800bb90 <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800bb36:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
}
 800bb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800bb42:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bb44:	b312      	cbz	r2, 800bb8c <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800bb46:	8816      	ldrh	r6, [r2, #0]
 800bb48:	b306      	cbz	r6, 800bb8c <start_output_pass+0xac>
 800bb4a:	8856      	ldrh	r6, [r2, #2]
 800bb4c:	b1f6      	cbz	r6, 800bb8c <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800bb4e:	8a16      	ldrh	r6, [r2, #16]
 800bb50:	b1e6      	cbz	r6, 800bb8c <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800bb52:	8c16      	ldrh	r6, [r2, #32]
 800bb54:	b1d6      	cbz	r6, 800bb8c <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800bb56:	8a56      	ldrh	r6, [r2, #18]
 800bb58:	b1c6      	cbz	r6, 800bb8c <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800bb5a:	8892      	ldrh	r2, [r2, #4]
 800bb5c:	b1b2      	cbz	r2, 800bb8c <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800bb5e:	f8d4 60a0 	ldr.w	r6, [r4, #160]	@ 0xa0
 800bb62:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800bb64:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800bb66:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800bb6a:	2a00      	cmp	r2, #0
 800bb6c:	db0e      	blt.n	800bb8c <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800bb6e:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800bb70:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800bb74:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800bb76:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800bb7a:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800bb7e:	bf18      	it	ne
 800bb80:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800bb82:	2a06      	cmp	r2, #6
 800bb84:	d1f4      	bne.n	800bb70 <start_output_pass+0x90>
       ci++, compptr++) {
 800bb86:	3301      	adds	r3, #1
 800bb88:	3058      	adds	r0, #88	@ 0x58
 800bb8a:	e7cd      	b.n	800bb28 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800bb8c:	4b01      	ldr	r3, [pc, #4]	@ (800bb94 <start_output_pass+0xb4>)
 800bb8e:	e7d2      	b.n	800bb36 <start_output_pass+0x56>
 800bb90:	0800bd0f 	.word	0x0800bd0f
 800bb94:	0800b9d7 	.word	0x0800b9d7

0800bb98 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bb98:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
{
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bba0:	3b01      	subs	r3, #1
{
 800bba2:	b08f      	sub	sp, #60	@ 0x3c
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bba4:	f8d0 51c0 	ldr.w	r5, [r0, #448]	@ 0x1c0
{
 800bba8:	4604      	mov	r4, r0
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bbaa:	9307      	str	r3, [sp, #28]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bbac:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
{
 800bbb0:	910a      	str	r1, [sp, #40]	@ 0x28
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	9308      	str	r3, [sp, #32]
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bbb6:	69ab      	ldr	r3, [r5, #24]
 800bbb8:	9302      	str	r3, [sp, #8]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800bbba:	f105 0320 	add.w	r3, r5, #32
 800bbbe:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bbc0:	69eb      	ldr	r3, [r5, #28]
 800bbc2:	9a02      	ldr	r2, [sp, #8]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	dc13      	bgt.n	800bbf0 <decompress_onepass+0x58>
  cinfo->output_iMCU_row++;
 800bbc8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800bbcc:	f8d4 2148 	ldr.w	r2, [r4, #328]	@ 0x148
  cinfo->output_iMCU_row++;
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800bbd6:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800bbda:	3301      	adds	r3, #1
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800bbe2:	f080 808d 	bcs.w	800bd00 <decompress_onepass+0x168>
    start_iMCU_row(cinfo);
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f7ff fe3c 	bl	800b864 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800bbec:	2003      	movs	r0, #3
 800bbee:	e029      	b.n	800bc44 <decompress_onepass+0xac>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800bbf0:	696f      	ldr	r7, [r5, #20]
 800bbf2:	9b07      	ldr	r3, [sp, #28]
 800bbf4:	429f      	cmp	r7, r3
 800bbf6:	d905      	bls.n	800bc04 <decompress_onepass+0x6c>
    coef->MCU_ctr = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800bbfc:	9b02      	ldr	r3, [sp, #8]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	e7dd      	b.n	800bbc0 <decompress_onepass+0x28>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800bc04:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800bc08:	b133      	cbz	r3, 800bc18 <decompress_onepass+0x80>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800bc0a:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 800bc0e:	2100      	movs	r1, #0
 800bc10:	6a28      	ldr	r0, [r5, #32]
 800bc12:	01d2      	lsls	r2, r2, #7
 800bc14:	f01e fa4c 	bl	802a0b0 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800bc18:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	4798      	blx	r3
 800bc24:	b158      	cbz	r0, 800bc3e <decompress_onepass+0xa6>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bc26:	f04f 0b00 	mov.w	fp, #0
 800bc2a:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
      blkn = 0;			/* index of current DCT block within MCU */
 800bc2e:	46da      	mov	sl, fp
 800bc30:	9304      	str	r3, [sp, #16]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bc32:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800bc36:	455b      	cmp	r3, fp
 800bc38:	dc07      	bgt.n	800bc4a <decompress_onepass+0xb2>
	 MCU_col_num++) {
 800bc3a:	3701      	adds	r7, #1
 800bc3c:	e7d9      	b.n	800bbf2 <decompress_onepass+0x5a>
	coef->MCU_vert_offset = yoffset;
 800bc3e:	9b02      	ldr	r3, [sp, #8]
	coef->MCU_ctr = MCU_col_num;
 800bc40:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800bc44:	b00f      	add	sp, #60	@ 0x3c
 800bc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800bc50:	9304      	str	r3, [sp, #16]
	if (! compptr->component_needed) {
 800bc52:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bc54:	b923      	cbnz	r3, 800bc60 <decompress_onepass+0xc8>
	  blkn += compptr->MCU_blocks;
 800bc56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc58:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bc5a:	f10b 0b01 	add.w	fp, fp, #1
 800bc5e:	e7e8      	b.n	800bc32 <decompress_onepass+0x9a>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800bc60:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bc62:	f04f 0900 	mov.w	r9, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800bc66:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800bc6a:	9802      	ldr	r0, [sp, #8]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800bc6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800bc74:	9b07      	ldr	r3, [sp, #28]
 800bc76:	429f      	cmp	r7, r3
 800bc78:	bf34      	ite	cc
 800bc7a:	6b8b      	ldrcc	r3, [r1, #56]	@ 0x38
 800bc7c:	6c8b      	ldrcs	r3, [r1, #72]	@ 0x48
 800bc7e:	9305      	str	r3, [sp, #20]
	  yoffset * compptr->DCT_v_scaled_size;
 800bc80:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800bc82:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800bc84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800bc8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800bc8e:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
 800bc90:	437a      	muls	r2, r7
 800bc92:	9209      	str	r2, [sp, #36]	@ 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bc94:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800bc96:	454a      	cmp	r2, r9
 800bc98:	dddf      	ble.n	800bc5a <decompress_onepass+0xc2>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800bc9a:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800bc9e:	9808      	ldr	r0, [sp, #32]
 800bca0:	4282      	cmp	r2, r0
 800bca2:	d304      	bcc.n	800bcae <decompress_onepass+0x116>
 800bca4:	9a02      	ldr	r2, [sp, #8]
 800bca6:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 800bca8:	444a      	add	r2, r9
 800bcaa:	4290      	cmp	r0, r2
 800bcac:	dd0d      	ble.n	800bcca <decompress_onepass+0x132>
 800bcae:	f10a 4880 	add.w	r8, sl, #1073741824	@ 0x40000000
 800bcb2:	f108 0807 	add.w	r8, r8, #7
 800bcb6:	eb05 0288 	add.w	r2, r5, r8, lsl #2
{
 800bcba:	f04f 0800 	mov.w	r8, #0
 800bcbe:	9206      	str	r2, [sp, #24]
 800bcc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc2:	9203      	str	r2, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800bcc4:	9a05      	ldr	r2, [sp, #20]
 800bcc6:	4590      	cmp	r8, r2
 800bcc8:	db07      	blt.n	800bcda <decompress_onepass+0x142>
	  blkn += compptr->MCU_width;
 800bcca:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bccc:	f109 0901 	add.w	r9, r9, #1
	  blkn += compptr->MCU_width;
 800bcd0:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800bcd2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800bcd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bcd8:	e7dc      	b.n	800bc94 <decompress_onepass+0xfc>
	      (*inverse_DCT) (cinfo, compptr,
 800bcda:	9806      	ldr	r0, [sp, #24]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800bcdc:	f108 0801 	add.w	r8, r8, #1
	      (*inverse_DCT) (cinfo, compptr,
 800bce0:	9a03      	ldr	r2, [sp, #12]
 800bce2:	930d      	str	r3, [sp, #52]	@ 0x34
 800bce4:	9200      	str	r2, [sp, #0]
 800bce6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800bcea:	910c      	str	r1, [sp, #48]	@ 0x30
 800bcec:	9006      	str	r0, [sp, #24]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800bcf2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800bcf8:	4413      	add	r3, r2
 800bcfa:	9303      	str	r3, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800bcfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcfe:	e7e1      	b.n	800bcc4 <decompress_onepass+0x12c>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800bd00:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800bd04:	4620      	mov	r0, r4
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800bd0a:	2004      	movs	r0, #4
 800bd0c:	e79a      	b.n	800bc44 <decompress_onepass+0xac>

0800bd0e <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800bd0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bd12:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
{
 800bd16:	b0c3      	sub	sp, #268	@ 0x10c
 800bd18:	4605      	mov	r5, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bd1a:	f8d0 4148 	ldr.w	r4, [r0, #328]	@ 0x148
{
 800bd1e:	9120      	str	r1, [sp, #128]	@ 0x80
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bd20:	931c      	str	r3, [sp, #112]	@ 0x70
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800bd22:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800bd26:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800bd2a:	428b      	cmp	r3, r1
 800bd2c:	dc03      	bgt.n	800bd36 <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800bd2e:	f8d5 21c8 	ldr.w	r2, [r5, #456]	@ 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800bd32:	6950      	ldr	r0, [r2, #20]
 800bd34:	b198      	cbz	r0, 800bd5e <decompress_smooth_data+0x50>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bd36:	1e63      	subs	r3, r4, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bd38:	f8d5 60d8 	ldr.w	r6, [r5, #216]	@ 0xd8
 800bd3c:	2700      	movs	r7, #0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bd3e:	931e      	str	r3, [sp, #120]	@ 0x78
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bd40:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800bd42:	f8d5 209c 	ldr.w	r2, [r5, #156]	@ 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bd46:	42bb      	cmp	r3, r7
 800bd48:	dc1e      	bgt.n	800bd88 <decompress_smooth_data+0x7a>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800bd4a:	1c50      	adds	r0, r2, #1
 800bd4c:	f8d5 3148 	ldr.w	r3, [r5, #328]	@ 0x148
 800bd50:	f8c5 009c 	str.w	r0, [r5, #156]	@ 0x9c
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
 800bd54:	4298      	cmp	r0, r3
 800bd56:	bf34      	ite	cc
 800bd58:	2003      	movcc	r0, #3
 800bd5a:	2004      	movcs	r0, #4
 800bd5c:	e011      	b.n	800bd82 <decompress_smooth_data+0x74>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800bd5e:	428b      	cmp	r3, r1
 800bd60:	d10a      	bne.n	800bd78 <decompress_smooth_data+0x6a>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800bd62:	f8d5 1198 	ldr.w	r1, [r5, #408]	@ 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800bd66:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800bd6a:	2900      	cmp	r1, #0
 800bd6c:	bf08      	it	eq
 800bd6e:	3301      	addeq	r3, #1
 800bd70:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800bd74:	4299      	cmp	r1, r3
 800bd76:	d8de      	bhi.n	800bd36 <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800bd78:	6813      	ldr	r3, [r2, #0]
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	4798      	blx	r3
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d1cf      	bne.n	800bd22 <decompress_smooth_data+0x14>
}
 800bd82:	b043      	add	sp, #268	@ 0x10c
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800bd88:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800bd8a:	b913      	cbnz	r3, 800bd92 <decompress_smooth_data+0x84>
       ci++, compptr++) {
 800bd8c:	3701      	adds	r7, #1
 800bd8e:	3658      	adds	r6, #88	@ 0x58
 800bd90:	e7d6      	b.n	800bd40 <decompress_smooth_data+0x32>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800bd92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      block_rows = compptr->v_samp_factor;
 800bd94:	68f0      	ldr	r0, [r6, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800bd96:	4293      	cmp	r3, r2
 800bd98:	f240 8158 	bls.w	800c04c <decompress_smooth_data+0x33e>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800bd9c:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800bd9e:	4681      	mov	r9, r0
      last_row = FALSE;
 800bda0:	2100      	movs	r1, #0
      last_row = TRUE;
 800bda2:	910d      	str	r1, [sp, #52]	@ 0x34
      buffer = (*cinfo->mem->access_virt_barray)
 800bda4:	6869      	ldr	r1, [r5, #4]
 800bda6:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800bdaa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800bdac:	3148      	adds	r1, #72	@ 0x48
 800bdae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	f000 8158 	beq.w	800c068 <decompress_smooth_data+0x35a>
      buffer = (*cinfo->mem->access_virt_barray)
 800bdb8:	2400      	movs	r4, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800bdba:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800bdbc:	4403      	add	r3, r0
 800bdbe:	4342      	muls	r2, r0
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	9400      	str	r4, [sp, #0]
 800bdc4:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800bdc6:	68f3      	ldr	r3, [r6, #12]
      first_row = FALSE;
 800bdc8:	941b      	str	r4, [sp, #108]	@ 0x6c
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800bdca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800bdce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800bdd0:	2218      	movs	r2, #24
 800bdd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd4:	fb02 3307 	mla	r3, r2, r7, r3
 800bdd8:	9303      	str	r3, [sp, #12]
    quanttbl = compptr->quant_table;
 800bdda:	6d33      	ldr	r3, [r6, #80]	@ 0x50
    Q00 = quanttbl->quantval[0];
 800bddc:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800bdde:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800bde2:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800bde6:	8c1c      	ldrh	r4, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800bde8:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800bdea:	9204      	str	r2, [sp, #16]
    Q02 = quanttbl->quantval[Q02_POS];
 800bdec:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800bdee:	f8d5 31d4 	ldr.w	r3, [r5, #468]	@ 0x1d4
 800bdf2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	931f      	str	r3, [sp, #124]	@ 0x7c
    output_ptr = output_buf[ci];
 800bdfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdfc:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800be00:	930c      	str	r3, [sp, #48]	@ 0x30
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800be02:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800be06:	9311      	str	r3, [sp, #68]	@ 0x44
 800be08:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800be0c:	9312      	str	r3, [sp, #72]	@ 0x48
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800be0e:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800be12:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be14:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800be18:	9314      	str	r3, [sp, #80]	@ 0x50
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800be1a:	01e3      	lsls	r3, r4, #7
 800be1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800be1e:	0223      	lsls	r3, r4, #8
 800be20:	9316      	str	r3, [sp, #88]	@ 0x58
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800be22:	01cb      	lsls	r3, r1, #7
 800be24:	9317      	str	r3, [sp, #92]	@ 0x5c
 800be26:	020b      	lsls	r3, r1, #8
 800be28:	9318      	str	r3, [sp, #96]	@ 0x60
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800be2a:	01d3      	lsls	r3, r2, #7
 800be2c:	9319      	str	r3, [sp, #100]	@ 0x64
 800be2e:	0213      	lsls	r3, r2, #8
 800be30:	931a      	str	r3, [sp, #104]	@ 0x68
 800be32:	1f03      	subs	r3, r0, #4
 800be34:	930b      	str	r3, [sp, #44]	@ 0x2c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800be36:	2300      	movs	r3, #0
 800be38:	9302      	str	r3, [sp, #8]
      if (last_row && block_row == block_rows-1)
 800be3a:	f109 33ff 	add.w	r3, r9, #4294967295
 800be3e:	9321      	str	r3, [sp, #132]	@ 0x84
    for (block_row = 0; block_row < block_rows; block_row++) {
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	454b      	cmp	r3, r9
 800be44:	daa2      	bge.n	800bd8c <decompress_smooth_data+0x7e>
      buffer_ptr = buffer[block_row];
 800be46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be48:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800be4c:	930b      	str	r3, [sp, #44]	@ 0x2c
      if (first_row && block_row == 0)
 800be4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800be50:	b11b      	cbz	r3, 800be5a <decompress_smooth_data+0x14c>
 800be52:	9b02      	ldr	r3, [sp, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 810d 	beq.w	800c074 <decompress_smooth_data+0x366>
	prev_block_row = buffer[block_row-1];
 800be5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be5c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800be60:	9305      	str	r3, [sp, #20]
      if (last_row && block_row == block_rows-1)
 800be62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be64:	b123      	cbz	r3, 800be70 <decompress_smooth_data+0x162>
 800be66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be68:	9a02      	ldr	r2, [sp, #8]
 800be6a:	4293      	cmp	r3, r2
 800be6c:	f000 8105 	beq.w	800c07a <decompress_smooth_data+0x36c>
	next_block_row = buffer[block_row+1];
 800be70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	9306      	str	r3, [sp, #24]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800be76:	9b05      	ldr	r3, [sp, #20]
      last_block_column = compptr->width_in_blocks - 1;
 800be78:	69f2      	ldr	r2, [r6, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800be7a:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800be7e:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800be80:	9310      	str	r3, [sp, #64]	@ 0x40
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800be82:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800be86:	921d      	str	r2, [sp, #116]	@ 0x74
      output_col = 0;
 800be88:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800be8a:	461c      	mov	r4, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800be8c:	9b06      	ldr	r3, [sp, #24]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800be8e:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800be92:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800be96:	46a2      	mov	sl, r4
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800be98:	9307      	str	r3, [sp, #28]
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800be9a:	e9cd 2209 	strd	r2, r2, [sp, #36]	@ 0x24
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800be9e:	2201      	movs	r2, #1
 800bea0:	a922      	add	r1, sp, #136	@ 0x88
 800bea2:	4640      	mov	r0, r8
 800bea4:	9308      	str	r3, [sp, #32]
 800bea6:	f00b fd6c 	bl	8017982 <jcopy_block_row>
	if (block_num < last_block_column) {
 800beaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800beac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800beae:	4293      	cmp	r3, r2
 800beb0:	9b08      	ldr	r3, [sp, #32]
 800beb2:	f240 80ec 	bls.w	800c08e <decompress_smooth_data+0x380>
	  DC3 = (int) prev_block_row[1][0];
 800beb6:	9a05      	ldr	r2, [sp, #20]
 800beb8:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	@ 0x80
 800bebc:	920e      	str	r2, [sp, #56]	@ 0x38
	  DC6 = (int) buffer_ptr[1][0];
 800bebe:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	@ 0x80
 800bec2:	9208      	str	r2, [sp, #32]
	  DC9 = (int) next_block_row[1][0];
 800bec4:	9a06      	ldr	r2, [sp, #24]
 800bec6:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	@ 0x80
 800beca:	920f      	str	r2, [sp, #60]	@ 0x3c
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800becc:	9a03      	ldr	r2, [sp, #12]
 800bece:	6851      	ldr	r1, [r2, #4]
 800bed0:	b1c1      	cbz	r1, 800bf04 <decompress_smooth_data+0x1f6>
 800bed2:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	@ 0x8a
 800bed6:	b9aa      	cbnz	r2, 800bf04 <decompress_smooth_data+0x1f6>
	  num = 36 * Q00 * (DC4 - DC6);
 800bed8:	9808      	ldr	r0, [sp, #32]
 800beda:	1a22      	subs	r2, r4, r0
 800bedc:	9804      	ldr	r0, [sp, #16]
 800bede:	4342      	muls	r2, r0
	  if (num >= 0) {
 800bee0:	2024      	movs	r0, #36	@ 0x24
 800bee2:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800bee4:	9811      	ldr	r0, [sp, #68]	@ 0x44
	  if (num >= 0) {
 800bee6:	f100 80d9 	bmi.w	800c09c <decompress_smooth_data+0x38e>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800beea:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800beec:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800beee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bef0:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800bef4:	dd04      	ble.n	800bf00 <decompress_smooth_data+0x1f2>
 800bef6:	2001      	movs	r0, #1
 800bef8:	4088      	lsls	r0, r1
 800befa:	4290      	cmp	r0, r2
 800befc:	dc00      	bgt.n	800bf00 <decompress_smooth_data+0x1f2>
	      pred = (1<<Al)-1;
 800befe:	1e42      	subs	r2, r0, #1
	  workspace[1] = (JCOEF) pred;
 800bf00:	f8ad 208a 	strh.w	r2, [sp, #138]	@ 0x8a
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800bf04:	9a03      	ldr	r2, [sp, #12]
 800bf06:	6891      	ldr	r1, [r2, #8]
 800bf08:	b1c9      	cbz	r1, 800bf3e <decompress_smooth_data+0x230>
 800bf0a:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	@ 0x98
 800bf0e:	b9b2      	cbnz	r2, 800bf3e <decompress_smooth_data+0x230>
	  num = 36 * Q00 * (DC2 - DC8);
 800bf10:	9a07      	ldr	r2, [sp, #28]
 800bf12:	9804      	ldr	r0, [sp, #16]
 800bf14:	ebab 0202 	sub.w	r2, fp, r2
 800bf18:	4342      	muls	r2, r0
	  if (num >= 0) {
 800bf1a:	2024      	movs	r0, #36	@ 0x24
 800bf1c:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800bf1e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
	  if (num >= 0) {
 800bf20:	f100 80ca 	bmi.w	800c0b8 <decompress_smooth_data+0x3aa>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800bf24:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800bf26:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800bf28:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800bf2a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800bf2e:	dd04      	ble.n	800bf3a <decompress_smooth_data+0x22c>
 800bf30:	2001      	movs	r0, #1
 800bf32:	4088      	lsls	r0, r1
 800bf34:	4290      	cmp	r0, r2
 800bf36:	dc00      	bgt.n	800bf3a <decompress_smooth_data+0x22c>
	      pred = (1<<Al)-1;
 800bf38:	1e42      	subs	r2, r0, #1
	  workspace[8] = (JCOEF) pred;
 800bf3a:	f8ad 2098 	strh.w	r2, [sp, #152]	@ 0x98
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800bf3e:	9a03      	ldr	r2, [sp, #12]
 800bf40:	68d1      	ldr	r1, [r2, #12]
 800bf42:	b1d1      	cbz	r1, 800bf7a <decompress_smooth_data+0x26c>
 800bf44:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	@ 0xa8
 800bf48:	b9ba      	cbnz	r2, 800bf7a <decompress_smooth_data+0x26c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800bf4a:	9a07      	ldr	r2, [sp, #28]
 800bf4c:	9804      	ldr	r0, [sp, #16]
 800bf4e:	445a      	add	r2, fp
 800bf50:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800bf54:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800bf56:	9815      	ldr	r0, [sp, #84]	@ 0x54
	  if (num >= 0) {
 800bf58:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800bf5c:	f100 80ba 	bmi.w	800c0d4 <decompress_smooth_data+0x3c6>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800bf60:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800bf62:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800bf64:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bf66:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800bf6a:	dd04      	ble.n	800bf76 <decompress_smooth_data+0x268>
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	4088      	lsls	r0, r1
 800bf70:	4290      	cmp	r0, r2
 800bf72:	dc00      	bgt.n	800bf76 <decompress_smooth_data+0x268>
	      pred = (1<<Al)-1;
 800bf74:	1e42      	subs	r2, r0, #1
	  workspace[16] = (JCOEF) pred;
 800bf76:	f8ad 20a8 	strh.w	r2, [sp, #168]	@ 0xa8
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800bf7a:	9a03      	ldr	r2, [sp, #12]
 800bf7c:	6912      	ldr	r2, [r2, #16]
 800bf7e:	b1ea      	cbz	r2, 800bfbc <decompress_smooth_data+0x2ae>
 800bf80:	f9bd 109a 	ldrsh.w	r1, [sp, #154]	@ 0x9a
 800bf84:	b9d1      	cbnz	r1, 800bfbc <decompress_smooth_data+0x2ae>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800bf86:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bf88:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bf8a:	1a09      	subs	r1, r1, r0
 800bf8c:	1acb      	subs	r3, r1, r3
 800bf8e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bf90:	440b      	add	r3, r1
 800bf92:	9904      	ldr	r1, [sp, #16]
 800bf94:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800bf96:	9917      	ldr	r1, [sp, #92]	@ 0x5c
	  if (num >= 0) {
 800bf98:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800bf9c:	f100 80a8 	bmi.w	800c0f0 <decompress_smooth_data+0x3e2>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800bfa0:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800bfa2:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800bfa4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bfa6:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800bfaa:	dd05      	ble.n	800bfb8 <decompress_smooth_data+0x2aa>
 800bfac:	2101      	movs	r1, #1
 800bfae:	fa01 f202 	lsl.w	r2, r1, r2
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	dc00      	bgt.n	800bfb8 <decompress_smooth_data+0x2aa>
	      pred = (1<<Al)-1;
 800bfb6:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800bfb8:	f8ad 309a 	strh.w	r3, [sp, #154]	@ 0x9a
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	695a      	ldr	r2, [r3, #20]
 800bfc0:	b1e2      	cbz	r2, 800bffc <decompress_smooth_data+0x2ee>
 800bfc2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800bfc6:	b9cb      	cbnz	r3, 800bffc <decompress_smooth_data+0x2ee>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800bfc8:	9908      	ldr	r1, [sp, #32]
 800bfca:	4623      	mov	r3, r4
 800bfcc:	440b      	add	r3, r1
 800bfce:	9904      	ldr	r1, [sp, #16]
 800bfd0:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800bfd4:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800bfd6:	9919      	ldr	r1, [sp, #100]	@ 0x64
	  if (num >= 0) {
 800bfd8:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800bfdc:	f100 8097 	bmi.w	800c10e <decompress_smooth_data+0x400>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800bfe0:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800bfe2:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800bfe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfe6:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800bfea:	dd05      	ble.n	800bff8 <decompress_smooth_data+0x2ea>
 800bfec:	2101      	movs	r1, #1
 800bfee:	fa01 f202 	lsl.w	r2, r1, r2
 800bff2:	429a      	cmp	r2, r3
 800bff4:	dc00      	bgt.n	800bff8 <decompress_smooth_data+0x2ea>
	      pred = (1<<Al)-1;
 800bff6:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800bff8:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800bffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bffe:	aa22      	add	r2, sp, #136	@ 0x88
 800c000:	4631      	mov	r1, r6
 800c002:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	4628      	mov	r0, r5
 800c008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c00a:	f108 0880 	add.w	r8, r8, #128	@ 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800c00e:	47a0      	blx	r4
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c010:	9b05      	ldr	r3, [sp, #20]
	output_col += compptr->DCT_h_scaled_size;
 800c012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c014:	4654      	mov	r4, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c016:	3380      	adds	r3, #128	@ 0x80
 800c018:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800c01c:	9305      	str	r3, [sp, #20]
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	3380      	adds	r3, #128	@ 0x80
 800c022:	9306      	str	r3, [sp, #24]
	output_col += compptr->DCT_h_scaled_size;
 800c024:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800c026:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c028:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	output_col += compptr->DCT_h_scaled_size;
 800c02a:	9309      	str	r3, [sp, #36]	@ 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c02e:	3301      	adds	r3, #1
 800c030:	930a      	str	r3, [sp, #40]	@ 0x28
 800c032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c034:	9b07      	ldr	r3, [sp, #28]
 800c036:	428a      	cmp	r2, r1
 800c038:	d222      	bcs.n	800c080 <decompress_smooth_data+0x372>
      output_ptr += compptr->DCT_v_scaled_size;
 800c03a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c03c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800c03e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c042:	930c      	str	r3, [sp, #48]	@ 0x30
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	3301      	adds	r3, #1
 800c048:	9302      	str	r3, [sp, #8]
 800c04a:	e6f9      	b.n	800be40 <decompress_smooth_data+0x132>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c04c:	6a33      	ldr	r3, [r6, #32]
 800c04e:	fbb3 f1f0 	udiv	r1, r3, r0
 800c052:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800c056:	f1b9 0f00 	cmp.w	r9, #0
 800c05a:	d103      	bne.n	800c064 <decompress_smooth_data+0x356>
 800c05c:	4603      	mov	r3, r0
 800c05e:	4681      	mov	r9, r0
      last_row = TRUE;
 800c060:	2101      	movs	r1, #1
 800c062:	e69e      	b.n	800bda2 <decompress_smooth_data+0x94>
 800c064:	464b      	mov	r3, r9
 800c066:	e7fb      	b.n	800c060 <decompress_smooth_data+0x352>
      buffer = (*cinfo->mem->access_virt_barray)
 800c068:	4628      	mov	r0, r5
 800c06a:	9200      	str	r2, [sp, #0]
 800c06c:	47c0      	blx	r8
      first_row = TRUE;
 800c06e:	2301      	movs	r3, #1
 800c070:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c072:	e6ac      	b.n	800bdce <decompress_smooth_data+0xc0>
      buffer_ptr = buffer[block_row];
 800c074:	f8cd 8014 	str.w	r8, [sp, #20]
 800c078:	e6f3      	b.n	800be62 <decompress_smooth_data+0x154>
 800c07a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c07e:	e6fa      	b.n	800be76 <decompress_smooth_data+0x168>
	DC7 = DC8; DC8 = DC9;
 800c080:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	DC4 = DC5; DC5 = DC6;
 800c082:	f8dd a020 	ldr.w	sl, [sp, #32]
	DC1 = DC2; DC2 = DC3;
 800c086:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
	DC7 = DC8; DC8 = DC9;
 800c08a:	9207      	str	r2, [sp, #28]
 800c08c:	e707      	b.n	800be9e <decompress_smooth_data+0x190>
 800c08e:	9a07      	ldr	r2, [sp, #28]
 800c090:	f8cd a020 	str.w	sl, [sp, #32]
 800c094:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c096:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c09a:	e717      	b.n	800becc <decompress_smooth_data+0x1be>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c09c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c09e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c0a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c0a2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0a6:	dd05      	ble.n	800c0b4 <decompress_smooth_data+0x3a6>
 800c0a8:	2001      	movs	r0, #1
 800c0aa:	4088      	lsls	r0, r1
 800c0ac:	4290      	cmp	r0, r2
	      pred = (1<<Al)-1;
 800c0ae:	bfd8      	it	le
 800c0b0:	f100 32ff 	addle.w	r2, r0, #4294967295
	    pred = -pred;
 800c0b4:	4252      	negs	r2, r2
 800c0b6:	e723      	b.n	800bf00 <decompress_smooth_data+0x1f2>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c0b8:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c0ba:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c0bc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c0be:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0c2:	dd05      	ble.n	800c0d0 <decompress_smooth_data+0x3c2>
 800c0c4:	2001      	movs	r0, #1
 800c0c6:	4088      	lsls	r0, r1
 800c0c8:	4290      	cmp	r0, r2
	      pred = (1<<Al)-1;
 800c0ca:	bfd8      	it	le
 800c0cc:	f100 32ff 	addle.w	r2, r0, #4294967295
	    pred = -pred;
 800c0d0:	4252      	negs	r2, r2
 800c0d2:	e732      	b.n	800bf3a <decompress_smooth_data+0x22c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c0d4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c0d6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c0d8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c0da:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0de:	dd05      	ble.n	800c0ec <decompress_smooth_data+0x3de>
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	4088      	lsls	r0, r1
 800c0e4:	4290      	cmp	r0, r2
	      pred = (1<<Al)-1;
 800c0e6:	bfd8      	it	le
 800c0e8:	f100 32ff 	addle.w	r2, r0, #4294967295
	    pred = -pred;
 800c0ec:	4252      	negs	r2, r2
 800c0ee:	e742      	b.n	800bf76 <decompress_smooth_data+0x268>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c0f0:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800c0f2:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c0f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c0f6:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c0fa:	dd06      	ble.n	800c10a <decompress_smooth_data+0x3fc>
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	fa01 f202 	lsl.w	r2, r1, r2
 800c102:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800c104:	bfd8      	it	le
 800c106:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800c10a:	425b      	negs	r3, r3
 800c10c:	e754      	b.n	800bfb8 <decompress_smooth_data+0x2aa>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c10e:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800c110:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c112:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c114:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c118:	dd06      	ble.n	800c128 <decompress_smooth_data+0x41a>
 800c11a:	2101      	movs	r1, #1
 800c11c:	fa01 f202 	lsl.w	r2, r1, r2
 800c120:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800c122:	bfd8      	it	le
 800c124:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800c128:	425b      	negs	r3, r3
 800c12a:	e765      	b.n	800bff8 <decompress_smooth_data+0x2ea>

0800c12c <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c12c:	6843      	ldr	r3, [r0, #4]
{
 800c12e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c132:	681b      	ldr	r3, [r3, #0]
{
 800c134:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c136:	2274      	movs	r2, #116	@ 0x74
 800c138:	2101      	movs	r1, #1
{
 800c13a:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c13c:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800c13e:	4b2c      	ldr	r3, [pc, #176]	@ (800c1f0 <jinit_d_coef_controller+0xc4>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800c140:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800c142:	f8c5 01c0 	str.w	r0, [r5, #448]	@ 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c146:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800c148:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800c14a:	f100 0844 	add.w	r8, r0, #68	@ 0x44
 800c14e:	4b29      	ldr	r3, [pc, #164]	@ (800c1f4 <jinit_d_coef_controller+0xc8>)
  coef->coef_bits_latch = NULL;
 800c150:	6707      	str	r7, [r0, #112]	@ 0x70
  coef->pub.start_output_pass = start_output_pass;
 800c152:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800c154:	b386      	cbz	r6, 800c1b8 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c156:	f8d5 60d8 	ldr.w	r6, [r5, #216]	@ 0xd8
 800c15a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c15c:	42bb      	cmp	r3, r7
 800c15e:	dc09      	bgt.n	800c174 <jinit_d_coef_controller+0x48>
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800c160:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800c164:	4924      	ldr	r1, [pc, #144]	@ (800c1f8 <jinit_d_coef_controller+0xcc>)
 800c166:	4a25      	ldr	r2, [pc, #148]	@ (800c1fc <jinit_d_coef_controller+0xd0>)
    coef->pub.consume_data = consume_data;
 800c168:	6061      	str	r1, [r4, #4]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800c16a:	e9c4 2303 	strd	r2, r3, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800c16e:	b003      	add	sp, #12
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800c174:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
      access_rows = compptr->v_samp_factor;
 800c178:	f8d6 900c 	ldr.w	r9, [r6, #12]
      if (cinfo->progressive_mode)
 800c17c:	b10b      	cbz	r3, 800c182 <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800c17e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c182:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800c184:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c186:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800c188:	3658      	adds	r6, #88	@ 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c18a:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c18e:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c192:	f00b fbdc 	bl	801794e <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800c196:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c19a:	4682      	mov	sl, r0
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800c19c:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800c1a0:	f00b fbd5 	bl	801794e <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	4653      	mov	r3, sl
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	e9cd 0900 	strd	r0, r9, [sp]
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47d8      	blx	fp
 800c1b2:	f848 0f04 	str.w	r0, [r8, #4]!
	 ci++, compptr++) {
 800c1b6:	e7d0      	b.n	800c15a <jinit_d_coef_controller+0x2e>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c1b8:	686b      	ldr	r3, [r5, #4]
 800c1ba:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800c1be:	2101      	movs	r1, #1
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c1c6:	f104 031c 	add.w	r3, r4, #28
 800c1ca:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800c1cc:	f843 2f04 	str.w	r2, [r3, #4]!
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c1d0:	4543      	cmp	r3, r8
 800c1d2:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 800c1d6:	d1f9      	bne.n	800c1cc <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800c1d8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	@ 0x1b0
 800c1dc:	b919      	cbnz	r1, 800c1e6 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800c1de:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800c1e2:	f01d ff65 	bl	802a0b0 <memset>
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800c1e6:	4906      	ldr	r1, [pc, #24]	@ (800c200 <jinit_d_coef_controller+0xd4>)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4a06      	ldr	r2, [pc, #24]	@ (800c204 <jinit_d_coef_controller+0xd8>)
 800c1ec:	e7bc      	b.n	800c168 <jinit_d_coef_controller+0x3c>
 800c1ee:	bf00      	nop
 800c1f0:	0800b895 	.word	0x0800b895
 800c1f4:	0800bae1 	.word	0x0800bae1
 800c1f8:	0800b8a3 	.word	0x0800b8a3
 800c1fc:	0800b9d7 	.word	0x0800b9d7
 800c200:	0800b89f 	.word	0x0800b89f
 800c204:	0800bb99 	.word	0x0800bb99

0800c208 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c208:	6843      	ldr	r3, [r0, #4]
 800c20a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c20e:	2101      	movs	r1, #1
 800c210:	681b      	ldr	r3, [r3, #0]
{
 800c212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c216:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c218:	f8d0 51dc 	ldr.w	r5, [r0, #476]	@ 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c21c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c21e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c222:	6863      	ldr	r3, [r4, #4]
 800c224:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800c226:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c228:	4620      	mov	r0, r4
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c22e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800c230:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2101      	movs	r1, #1
 800c23a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c23c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800c2bc <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c240:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c242:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800c244:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c246:	2101      	movs	r1, #1
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4620      	mov	r0, r4
 800c24c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c250:	4f17      	ldr	r7, [pc, #92]	@ (800c2b0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c252:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c254:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800c256:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c258:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c25a:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800c2c0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c25e:	4915      	ldr	r1, [pc, #84]	@ (800c2b4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800c260:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c264:	4d14      	ldr	r5, [pc, #80]	@ (800c2b8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c266:	fb08 e203 	mla	r2, r8, r3, lr
 800c26a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800c26c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c270:	fb07 f203 	mul.w	r2, r7, r3
 800c274:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 800c278:	f5a2 42a2 	sub.w	r2, r2, #20736	@ 0x5100
 800c27c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800c27e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c282:	fb05 f203 	mul.w	r2, r5, r3
 800c286:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 800c28a:	f502 42d2 	add.w	r2, r2, #26880	@ 0x6900
 800c28e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c292:	fb01 f203 	mul.w	r2, r1, r3
 800c296:	f502 1232 	add.w	r2, r2, #2916352	@ 0x2c8000
 800c29a:	f502 6250 	add.w	r2, r2, #3328	@ 0xd00
 800c29e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2a8:	d1dd      	bne.n	800c266 <build_ycc_rgb_table+0x5e>
  }
}
 800c2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ae:	bf00      	nop
 800c2b0:	0001c5a2 	.word	0x0001c5a2
 800c2b4:	ffffa7e6 	.word	0xffffa7e6
 800c2b8:	ffff492e 	.word	0xffff492e
 800c2bc:	000166e9 	.word	0x000166e9
 800c2c0:	ff4d0b80 	.word	0xff4d0b80

0800c2c4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c2c8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	@ 0x1dc
{
 800c2cc:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c2ce:	6f05      	ldr	r5, [r0, #112]	@ 0x70
 800c2d0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c2d4:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c2d8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c2dc:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800c2de:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800c2e0:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c2e2:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800c2e6:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c2e8:	6920      	ldr	r0, [r4, #16]
 800c2ea:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c2ec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c2ee:	3a01      	subs	r2, #1
 800c2f0:	9210      	str	r2, [sp, #64]	@ 0x40
 800c2f2:	d502      	bpl.n	800c2fa <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c2f4:	b007      	add	sp, #28
 800c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c2fa:	9a05      	ldr	r2, [sp, #20]
 800c2fc:	680c      	ldr	r4, [r1, #0]
 800c2fe:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800c300:	f853 0b04 	ldr.w	r0, [r3], #4
 800c304:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800c308:	684c      	ldr	r4, [r1, #4]
 800c30a:	5964      	ldr	r4, [r4, r5]
 800c30c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800c310:	688c      	ldr	r4, [r1, #8]
 800c312:	5967      	ldr	r7, [r4, r5]
 800c314:	9c01      	ldr	r4, [sp, #4]
 800c316:	3f01      	subs	r7, #1
 800c318:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800c31c:	45d0      	cmp	r8, sl
 800c31e:	f100 0003 	add.w	r0, r0, #3
 800c322:	d0e3      	beq.n	800c2ec <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c324:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800c328:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c32c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800c32e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c332:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800c336:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c338:	fa0f fb8b 	sxth.w	fp, fp
 800c33c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c33e:	5d65      	ldrb	r5, [r4, r5]
 800c340:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c344:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800c348:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800c34c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c34e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c350:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800c352:	5d65      	ldrb	r5, [r4, r5]
 800c354:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c358:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800c35c:	5d64      	ldrb	r4, [r4, r5]
 800c35e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800c362:	e7db      	b.n	800c31c <ycc_rgb_convert+0x58>

0800c364 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c368:	f8d0 41dc 	ldr.w	r4, [r0, #476]	@ 0x1dc
 800c36c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800c370:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c372:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c374:	6f07      	ldr	r7, [r0, #112]	@ 0x70

  while (--num_rows >= 0) {
 800c376:	3d01      	subs	r5, #1
 800c378:	d501      	bpl.n	800c37e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800c37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c37e:	189c      	adds	r4, r3, r2
 800c380:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800c382:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800c386:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800c38a:	6848      	ldr	r0, [r1, #4]
 800c38c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800c390:	6888      	ldr	r0, [r1, #8]
 800c392:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800c396:	2000      	movs	r0, #0
 800c398:	42b8      	cmp	r0, r7
 800c39a:	d0ec      	beq.n	800c376 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800c39c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800c3a0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800c3a4:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 800c3a8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800c3ac:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800c3b0:	4454      	add	r4, sl
 800c3b2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800c3b6:	f50a 7a00 	add.w	sl, sl, #512	@ 0x200
 800c3ba:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800c3be:	4454      	add	r4, sl
		 >> SCALEBITS);
 800c3c0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800c3c2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	e7e6      	b.n	800c398 <rgb_gray_convert+0x34>

0800c3ca <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800c3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ce:	9d06      	ldr	r5, [sp, #24]
 800c3d0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c3d4:	6f06      	ldr	r6, [r0, #112]	@ 0x70

  while (--num_rows >= 0) {
 800c3d6:	3d01      	subs	r5, #1
 800c3d8:	d501      	bpl.n	800c3de <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800c3de:	1898      	adds	r0, r3, r2
 800c3e0:	680c      	ldr	r4, [r1, #0]
 800c3e2:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800c3e4:	684c      	ldr	r4, [r1, #4]
 800c3e6:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800c3ea:	688c      	ldr	r4, [r1, #8]
 800c3ec:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	f853 4b04 	ldr.w	r4, [r3], #4
 800c3f6:	42b0      	cmp	r0, r6
 800c3f8:	f104 0403 	add.w	r4, r4, #3
 800c3fc:	d0eb      	beq.n	800c3d6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800c3fe:	f817 8000 	ldrb.w	r8, [r7, r0]
 800c402:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800c406:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800c40a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800c40e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800c412:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800c414:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800c418:	e7ed      	b.n	800c3f6 <rgb_convert+0x2c>

0800c41a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800c41a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c41e:	9e07      	ldr	r6, [sp, #28]
 800c420:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800c424:	6a47      	ldr	r7, [r0, #36]	@ 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800c426:	f8d0 e070 	ldr.w	lr, [r0, #112]	@ 0x70
  int ci;

  while (--num_rows >= 0) {
 800c42a:	3e01      	subs	r6, #1
 800c42c:	d418      	bmi.n	800c460 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800c42e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800c432:	2000      	movs	r0, #0
 800c434:	e00a      	b.n	800c44c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800c436:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800c43a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800c43e:	681c      	ldr	r4, [r3, #0]
 800c440:	eb05 080e 	add.w	r8, r5, lr
 800c444:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800c446:	4545      	cmp	r5, r8
 800c448:	d104      	bne.n	800c454 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800c44a:	3001      	adds	r0, #1
 800c44c:	42b8      	cmp	r0, r7
 800c44e:	dbf2      	blt.n	800c436 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800c450:	3304      	adds	r3, #4
 800c452:	e7ea      	b.n	800c42a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800c454:	f815 9b01 	ldrb.w	r9, [r5], #1
 800c458:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800c45c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800c45e:	e7f2      	b.n	800c446 <null_convert+0x2c>
  }
}
 800c460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c464 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c466:	9d05      	ldr	r5, [sp, #20]
 800c468:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c46c:	6f07      	ldr	r7, [r0, #112]	@ 0x70

  while (--num_rows >= 0) {
 800c46e:	3d01      	subs	r5, #1
 800c470:	d500      	bpl.n	800c474 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800c474:	6808      	ldr	r0, [r1, #0]
 800c476:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800c478:	f853 0b04 	ldr.w	r0, [r3], #4
 800c47c:	58a4      	ldr	r4, [r4, r2]
 800c47e:	eb04 0c07 	add.w	ip, r4, r7
 800c482:	4564      	cmp	r4, ip
 800c484:	f100 0003 	add.w	r0, r0, #3
 800c488:	d0f1      	beq.n	800c46e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800c48a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800c48e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800c492:	f800 6c02 	strb.w	r6, [r0, #-2]
 800c496:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800c49a:	e7f2      	b.n	800c482 <gray_rgb_convert+0x1e>

0800c49c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800c49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c4a0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	@ 0x1dc
{
 800c4a4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c4a6:	6f05      	ldr	r5, [r0, #112]	@ 0x70
 800c4a8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c4ac:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c4b0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800c4b4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c4b6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800c4ba:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c4bc:	6920      	ldr	r0, [r4, #16]
 800c4be:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c4c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c4c2:	3a01      	subs	r2, #1
 800c4c4:	9210      	str	r2, [sp, #64]	@ 0x40
 800c4c6:	d502      	bpl.n	800c4ce <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800c4c8:	b007      	add	sp, #28
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c4ce:	eb03 0008 	add.w	r0, r3, r8
 800c4d2:	680a      	ldr	r2, [r1, #0]
 800c4d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4d8:	5812      	ldr	r2, [r2, r0]
 800c4da:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800c4dc:	684a      	ldr	r2, [r1, #4]
 800c4de:	5812      	ldr	r2, [r2, r0]
 800c4e0:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800c4e2:	688a      	ldr	r2, [r1, #8]
 800c4e4:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800c4e8:	68ca      	ldr	r2, [r1, #12]
 800c4ea:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	9800      	ldr	r0, [sp, #0]
 800c4f2:	3504      	adds	r5, #4
 800c4f4:	4282      	cmp	r2, r0
 800c4f6:	d0e3      	beq.n	800c4c0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c4f8:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800c4fc:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800c4fe:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800c500:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800c504:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c506:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c50a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c50e:	4404      	add	r4, r0
 800c510:	f1c4 04ff 	rsb	r4, r4, #255	@ 0xff
 800c514:	5d34      	ldrb	r4, [r6, r4]
 800c516:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c51a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800c51e:	9405      	str	r4, [sp, #20]
 800c520:	9c02      	ldr	r4, [sp, #8]
 800c522:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800c526:	9c05      	ldr	r4, [sp, #20]
 800c528:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800c52a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800c52e:	f1c4 04ff 	rsb	r4, r4, #255	@ 0xff
 800c532:	5d34      	ldrb	r4, [r6, r4]
 800c534:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800c538:	9c01      	ldr	r4, [sp, #4]
 800c53a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800c53e:	4420      	add	r0, r4
 800c540:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 800c544:	5c30      	ldrb	r0, [r6, r0]
 800c546:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c54a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800c54e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c550:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800c554:	e7cc      	b.n	800c4f0 <ycck_cmyk_convert+0x54>

0800c556 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800c556:	4770      	bx	lr

0800c558 <grayscale_convert>:
{
 800c558:	b513      	push	{r0, r1, r4, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	4611      	mov	r1, r2
 800c55e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800c560:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	9b04      	ldr	r3, [sp, #16]
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2300      	movs	r3, #0
 800c56a:	6820      	ldr	r0, [r4, #0]
 800c56c:	f00b f9f7 	bl	801795e <jcopy_sample_rows>
}
 800c570:	b002      	add	sp, #8
 800c572:	bd10      	pop	{r4, pc}

0800c574 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c574:	6843      	ldr	r3, [r0, #4]
 800c576:	221c      	movs	r2, #28
 800c578:	2101      	movs	r1, #1
 800c57a:	681b      	ldr	r3, [r3, #0]
{
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c580:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800c582:	4b4a      	ldr	r3, [pc, #296]	@ (800c6ac <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c584:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800c586:	f8c4 01dc 	str.w	r0, [r4, #476]	@ 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800c58a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800c58c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c590:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c592:	2b03      	cmp	r3, #3
 800c594:	d821      	bhi.n	800c5da <jinit_color_deconverter+0x66>
 800c596:	2b01      	cmp	r3, #1
 800c598:	d82d      	bhi.n	800c5f6 <jinit_color_deconverter+0x82>
 800c59a:	d023      	beq.n	800c5e4 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	dd23      	ble.n	800c5e8 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800c5a0:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c5a4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
  switch (cinfo->out_color_space) {
 800c5a8:	2902      	cmp	r1, #2
 800c5aa:	d055      	beq.n	800c658 <jinit_color_deconverter+0xe4>
 800c5ac:	2904      	cmp	r1, #4
 800c5ae:	d066      	beq.n	800c67e <jinit_color_deconverter+0x10a>
 800c5b0:	2901      	cmp	r1, #1
 800c5b2:	d16d      	bne.n	800c690 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c5b4:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
    cinfo->out_color_components = 1;
 800c5b8:	67a1      	str	r1, [r4, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c5ba:	2a01      	cmp	r2, #1
 800c5bc:	d124      	bne.n	800c608 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800c5be:	4b3c      	ldr	r3, [pc, #240]	@ (800c6b0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800c5c0:	2058      	movs	r0, #88	@ 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c5c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800c5c4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c5c6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800c5c8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c5ca:	4299      	cmp	r1, r3
 800c5cc:	dc15      	bgt.n	800c5fa <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800c5ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d169      	bne.n	800c6a8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800c5d4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800c5d6:	67e3      	str	r3, [r4, #124]	@ 0x7c
}
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800c5da:	3b04      	subs	r3, #4
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d8dd      	bhi.n	800c59c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800c5e0:	2a04      	cmp	r2, #4
 800c5e2:	e000      	b.n	800c5e6 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800c5e4:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800c5e6:	d0db      	beq.n	800c5a0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	220b      	movs	r2, #11
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	615a      	str	r2, [r3, #20]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4798      	blx	r3
 800c5f4:	e7d4      	b.n	800c5a0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800c5f6:	2a03      	cmp	r2, #3
 800c5f8:	e7f5      	b.n	800c5e6 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800c5fa:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 800c5fe:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c602:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800c604:	6355      	str	r5, [r2, #52]	@ 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c606:	e7e0      	b.n	800c5ca <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d146      	bne.n	800c69a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800c60c:	4b29      	ldr	r3, [pc, #164]	@ (800c6b4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c60e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800c612:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800c614:	f644 468b 	movw	r6, #19595	@ 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800c618:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c61a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c61c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	@ 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c624:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800c626:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c628:	f641 512f 	movw	r1, #7471	@ 0x1d2f
 800c62c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800c62e:	f249 6546 	movw	r5, #38470	@ 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800c632:	fb06 f203 	mul.w	r2, r6, r3
 800c636:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800c63a:	fb05 f203 	mul.w	r2, r5, r3
 800c63e:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c642:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c646:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c648:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c64c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c650:	f8c0 2800 	str.w	r2, [r0, #2048]	@ 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c654:	d1ed      	bne.n	800c632 <jinit_color_deconverter+0xbe>
 800c656:	e7ba      	b.n	800c5ce <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800c658:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800c65a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800c65c:	67a2      	str	r2, [r4, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800c65e:	d105      	bne.n	800c66c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800c660:	4b15      	ldr	r3, [pc, #84]	@ (800c6b8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800c662:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800c664:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800c666:	f7ff fdcf 	bl	800c208 <build_ycc_rgb_table>
 800c66a:	e7b0      	b.n	800c5ce <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d102      	bne.n	800c676 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800c670:	4b12      	ldr	r3, [pc, #72]	@ (800c6bc <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800c672:	606b      	str	r3, [r5, #4]
 800c674:	e7ab      	b.n	800c5ce <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800c676:	2b02      	cmp	r3, #2
 800c678:	d10f      	bne.n	800c69a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800c67a:	4b11      	ldr	r3, [pc, #68]	@ (800c6c0 <jinit_color_deconverter+0x14c>)
 800c67c:	e7f9      	b.n	800c672 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800c67e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800c680:	67a1      	str	r1, [r4, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800c682:	d101      	bne.n	800c688 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800c684:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c4 <jinit_color_deconverter+0x150>)
 800c686:	e7ec      	b.n	800c662 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800c688:	2b04      	cmp	r3, #4
 800c68a:	d106      	bne.n	800c69a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800c68c:	4b0e      	ldr	r3, [pc, #56]	@ (800c6c8 <jinit_color_deconverter+0x154>)
 800c68e:	e7f0      	b.n	800c672 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800c690:	4299      	cmp	r1, r3
 800c692:	d102      	bne.n	800c69a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800c694:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c696:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c698:	e7f8      	b.n	800c68c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	221c      	movs	r2, #28
 800c69e:	4620      	mov	r0, r4
 800c6a0:	615a      	str	r2, [r3, #20]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4798      	blx	r3
 800c6a6:	e792      	b.n	800c5ce <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e794      	b.n	800c5d6 <jinit_color_deconverter+0x62>
 800c6ac:	0800c557 	.word	0x0800c557
 800c6b0:	0800c559 	.word	0x0800c559
 800c6b4:	0800c365 	.word	0x0800c365
 800c6b8:	0800c2c5 	.word	0x0800c2c5
 800c6bc:	0800c465 	.word	0x0800c465
 800c6c0:	0800c3cb 	.word	0x0800c3cb
 800c6c4:	0800c49d 	.word	0x0800c49d
 800c6c8:	0800c41b 	.word	0x0800c41b

0800c6cc <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800c6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800c6d0:	2500      	movs	r5, #0
{
 800c6d2:	4606      	mov	r6, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6d4:	f8d0 70d8 	ldr.w	r7, [r0, #216]	@ 0xd8
 800c6d8:	f8d0 81d4 	ldr.w	r8, [r0, #468]	@ 0x1d4
  int method = 0;
 800c6dc:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6de:	46a9      	mov	r9, r5
 800c6e0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800c6e2:	454b      	cmp	r3, r9
 800c6e4:	dc02      	bgt.n	800c6ec <start_pass+0x20>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800c6e6:	b003      	add	sp, #12
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c6ec:	e9d7 1209 	ldrd	r1, r2, [r7, #36]	@ 0x24
 800c6f0:	f240 700e 	movw	r0, #1806	@ 0x70e
 800c6f4:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800c6f8:	4283      	cmp	r3, r0
 800c6fa:	f000 80b9 	beq.w	800c870 <start_pass+0x1a4>
 800c6fe:	dc58      	bgt.n	800c7b2 <start_pass+0xe6>
 800c700:	f240 4004 	movw	r0, #1028	@ 0x404
 800c704:	4283      	cmp	r3, r0
 800c706:	f000 80b6 	beq.w	800c876 <start_pass+0x1aa>
 800c70a:	dc2f      	bgt.n	800c76c <start_pass+0xa0>
 800c70c:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800c710:	f000 80b3 	beq.w	800c87a <start_pass+0x1ae>
 800c714:	dc1a      	bgt.n	800c74c <start_pass+0x80>
 800c716:	f240 2001 	movw	r0, #513	@ 0x201
 800c71a:	4283      	cmp	r3, r0
 800c71c:	f000 80af 	beq.w	800c87e <start_pass+0x1b2>
 800c720:	dc0e      	bgt.n	800c740 <start_pass+0x74>
 800c722:	f240 1001 	movw	r0, #257	@ 0x101
 800c726:	4283      	cmp	r3, r0
 800c728:	f000 80ab 	beq.w	800c882 <start_pass+0x1b6>
 800c72c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800c730:	f000 80a9 	beq.w	800c886 <start_pass+0x1ba>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800c734:	6833      	ldr	r3, [r6, #0]
 800c736:	2007      	movs	r0, #7
 800c738:	61da      	str	r2, [r3, #28]
 800c73a:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800c73e:	e093      	b.n	800c868 <start_pass+0x19c>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c740:	f240 2002 	movw	r0, #514	@ 0x202
 800c744:	4283      	cmp	r3, r0
 800c746:	d1f5      	bne.n	800c734 <start_pass+0x68>
 800c748:	4d89      	ldr	r5, [pc, #548]	@ (800c970 <start_pass+0x2a4>)
 800c74a:	e092      	b.n	800c872 <start_pass+0x1a6>
 800c74c:	f240 3006 	movw	r0, #774	@ 0x306
 800c750:	4283      	cmp	r3, r0
 800c752:	f000 809a 	beq.w	800c88a <start_pass+0x1be>
 800c756:	f240 4002 	movw	r0, #1026	@ 0x402
 800c75a:	4283      	cmp	r3, r0
 800c75c:	f000 8097 	beq.w	800c88e <start_pass+0x1c2>
 800c760:	f240 3003 	movw	r0, #771	@ 0x303
 800c764:	4283      	cmp	r3, r0
 800c766:	d1e5      	bne.n	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_3x3;
 800c768:	4d82      	ldr	r5, [pc, #520]	@ (800c974 <start_pass+0x2a8>)
 800c76a:	e082      	b.n	800c872 <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c76c:	f240 6003 	movw	r0, #1539	@ 0x603
 800c770:	4283      	cmp	r3, r0
 800c772:	f000 808e 	beq.w	800c892 <start_pass+0x1c6>
 800c776:	dc0e      	bgt.n	800c796 <start_pass+0xca>
 800c778:	f240 5005 	movw	r0, #1285	@ 0x505
 800c77c:	4283      	cmp	r3, r0
 800c77e:	f000 808a 	beq.w	800c896 <start_pass+0x1ca>
 800c782:	f240 500a 	movw	r0, #1290	@ 0x50a
 800c786:	4283      	cmp	r3, r0
 800c788:	f000 8087 	beq.w	800c89a <start_pass+0x1ce>
 800c78c:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 800c790:	d1d0      	bne.n	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_4x8;
 800c792:	4d79      	ldr	r5, [pc, #484]	@ (800c978 <start_pass+0x2ac>)
 800c794:	e06d      	b.n	800c872 <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c796:	f240 600c 	movw	r0, #1548	@ 0x60c
 800c79a:	4283      	cmp	r3, r0
 800c79c:	d07f      	beq.n	800c89e <start_pass+0x1d2>
 800c79e:	f240 7007 	movw	r0, #1799	@ 0x707
 800c7a2:	4283      	cmp	r3, r0
 800c7a4:	d07d      	beq.n	800c8a2 <start_pass+0x1d6>
 800c7a6:	f240 6006 	movw	r0, #1542	@ 0x606
 800c7aa:	4283      	cmp	r3, r0
 800c7ac:	d1c2      	bne.n	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_6x6;
 800c7ae:	4d73      	ldr	r5, [pc, #460]	@ (800c97c <start_pass+0x2b0>)
 800c7b0:	e05f      	b.n	800c872 <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c7b2:	f640 4006 	movw	r0, #3078	@ 0xc06
 800c7b6:	4283      	cmp	r3, r0
 800c7b8:	d075      	beq.n	800c8a6 <start_pass+0x1da>
 800c7ba:	dc1f      	bgt.n	800c7fc <start_pass+0x130>
 800c7bc:	f640 1009 	movw	r0, #2313	@ 0x909
 800c7c0:	4283      	cmp	r3, r0
 800c7c2:	d072      	beq.n	800c8aa <start_pass+0x1de>
 800c7c4:	dc0c      	bgt.n	800c7e0 <start_pass+0x114>
 800c7c6:	f640 0008 	movw	r0, #2056	@ 0x808
 800c7ca:	4283      	cmp	r3, r0
 800c7cc:	d038      	beq.n	800c840 <start_pass+0x174>
 800c7ce:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 800c7d2:	d06c      	beq.n	800c8ae <start_pass+0x1e2>
 800c7d4:	f640 0004 	movw	r0, #2052	@ 0x804
 800c7d8:	4283      	cmp	r3, r0
 800c7da:	d1ab      	bne.n	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_8x4;
 800c7dc:	4d68      	ldr	r5, [pc, #416]	@ (800c980 <start_pass+0x2b4>)
 800c7de:	e048      	b.n	800c872 <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c7e0:	f640 200a 	movw	r0, #2570	@ 0xa0a
 800c7e4:	4283      	cmp	r3, r0
 800c7e6:	d064      	beq.n	800c8b2 <start_pass+0x1e6>
 800c7e8:	f640 300b 	movw	r0, #2827	@ 0xb0b
 800c7ec:	4283      	cmp	r3, r0
 800c7ee:	d062      	beq.n	800c8b6 <start_pass+0x1ea>
 800c7f0:	f640 2005 	movw	r0, #2565	@ 0xa05
 800c7f4:	4283      	cmp	r3, r0
 800c7f6:	d19d      	bne.n	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_10x5;
 800c7f8:	4d62      	ldr	r5, [pc, #392]	@ (800c984 <start_pass+0x2b8>)
 800c7fa:	e03a      	b.n	800c872 <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c7fc:	f640 600e 	movw	r0, #3598	@ 0xe0e
 800c800:	4283      	cmp	r3, r0
 800c802:	d05a      	beq.n	800c8ba <start_pass+0x1ee>
 800c804:	dc0d      	bgt.n	800c822 <start_pass+0x156>
 800c806:	f640 500d 	movw	r0, #3341	@ 0xd0d
 800c80a:	4283      	cmp	r3, r0
 800c80c:	d057      	beq.n	800c8be <start_pass+0x1f2>
 800c80e:	f640 6007 	movw	r0, #3591	@ 0xe07
 800c812:	4283      	cmp	r3, r0
 800c814:	d055      	beq.n	800c8c2 <start_pass+0x1f6>
 800c816:	f640 400c 	movw	r0, #3084	@ 0xc0c
 800c81a:	4283      	cmp	r3, r0
 800c81c:	d18a      	bne.n	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_12x12;
 800c81e:	4d5a      	ldr	r5, [pc, #360]	@ (800c988 <start_pass+0x2bc>)
 800c820:	e027      	b.n	800c872 <start_pass+0x1a6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c822:	f241 0008 	movw	r0, #4104	@ 0x1008
 800c826:	4283      	cmp	r3, r0
 800c828:	d04d      	beq.n	800c8c6 <start_pass+0x1fa>
 800c82a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800c82e:	4283      	cmp	r3, r0
 800c830:	d04b      	beq.n	800c8ca <start_pass+0x1fe>
 800c832:	f640 700f 	movw	r0, #3855	@ 0xf0f
 800c836:	4283      	cmp	r3, r0
 800c838:	f47f af7c 	bne.w	800c734 <start_pass+0x68>
      method_ptr = jpeg_idct_15x15;
 800c83c:	4d53      	ldr	r5, [pc, #332]	@ (800c98c <start_pass+0x2c0>)
 800c83e:	e018      	b.n	800c872 <start_pass+0x1a6>
      switch (cinfo->dct_method) {
 800c840:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800c844:	2b02      	cmp	r3, #2
 800c846:	d80c      	bhi.n	800c862 <start_pass+0x196>
 800c848:	461c      	mov	r4, r3
 800c84a:	4b51      	ldr	r3, [pc, #324]	@ (800c990 <start_pass+0x2c4>)
 800c84c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800c850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800c852:	f848 5f04 	str.w	r5, [r8, #4]!
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800c856:	2b00      	cmp	r3, #0
 800c858:	d139      	bne.n	800c8ce <start_pass+0x202>
       ci++, compptr++) {
 800c85a:	f109 0901 	add.w	r9, r9, #1
 800c85e:	3758      	adds	r7, #88	@ 0x58
 800c860:	e73e      	b.n	800c6e0 <start_pass+0x14>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800c862:	6833      	ldr	r3, [r6, #0]
 800c864:	2231      	movs	r2, #49	@ 0x31
 800c866:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4630      	mov	r0, r6
 800c86c:	4798      	blx	r3
      break;
 800c86e:	e7ef      	b.n	800c850 <start_pass+0x184>
      method_ptr = jpeg_idct_7x14;
 800c870:	4d48      	ldr	r5, [pc, #288]	@ (800c994 <start_pass+0x2c8>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800c872:	2400      	movs	r4, #0
 800c874:	e7ec      	b.n	800c850 <start_pass+0x184>
      method_ptr = jpeg_idct_4x4;
 800c876:	4d48      	ldr	r5, [pc, #288]	@ (800c998 <start_pass+0x2cc>)
 800c878:	e7fb      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_2x4;
 800c87a:	4d48      	ldr	r5, [pc, #288]	@ (800c99c <start_pass+0x2d0>)
 800c87c:	e7f9      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_2x1;
 800c87e:	4d48      	ldr	r5, [pc, #288]	@ (800c9a0 <start_pass+0x2d4>)
 800c880:	e7f7      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_1x1;
 800c882:	4d48      	ldr	r5, [pc, #288]	@ (800c9a4 <start_pass+0x2d8>)
 800c884:	e7f5      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_1x2;
 800c886:	4d48      	ldr	r5, [pc, #288]	@ (800c9a8 <start_pass+0x2dc>)
 800c888:	e7f3      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_3x6;
 800c88a:	4d48      	ldr	r5, [pc, #288]	@ (800c9ac <start_pass+0x2e0>)
 800c88c:	e7f1      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_4x2;
 800c88e:	4d48      	ldr	r5, [pc, #288]	@ (800c9b0 <start_pass+0x2e4>)
 800c890:	e7ef      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_6x3;
 800c892:	4d48      	ldr	r5, [pc, #288]	@ (800c9b4 <start_pass+0x2e8>)
 800c894:	e7ed      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_5x5;
 800c896:	4d48      	ldr	r5, [pc, #288]	@ (800c9b8 <start_pass+0x2ec>)
 800c898:	e7eb      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_5x10;
 800c89a:	4d48      	ldr	r5, [pc, #288]	@ (800c9bc <start_pass+0x2f0>)
 800c89c:	e7e9      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_6x12;
 800c89e:	4d48      	ldr	r5, [pc, #288]	@ (800c9c0 <start_pass+0x2f4>)
 800c8a0:	e7e7      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_7x7;
 800c8a2:	4d48      	ldr	r5, [pc, #288]	@ (800c9c4 <start_pass+0x2f8>)
 800c8a4:	e7e5      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_12x6;
 800c8a6:	4d48      	ldr	r5, [pc, #288]	@ (800c9c8 <start_pass+0x2fc>)
 800c8a8:	e7e3      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_9x9;
 800c8aa:	4d48      	ldr	r5, [pc, #288]	@ (800c9cc <start_pass+0x300>)
 800c8ac:	e7e1      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_8x16;
 800c8ae:	4d48      	ldr	r5, [pc, #288]	@ (800c9d0 <start_pass+0x304>)
 800c8b0:	e7df      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_10x10;
 800c8b2:	4d48      	ldr	r5, [pc, #288]	@ (800c9d4 <start_pass+0x308>)
 800c8b4:	e7dd      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_11x11;
 800c8b6:	4d48      	ldr	r5, [pc, #288]	@ (800c9d8 <start_pass+0x30c>)
 800c8b8:	e7db      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_14x14;
 800c8ba:	4d48      	ldr	r5, [pc, #288]	@ (800c9dc <start_pass+0x310>)
 800c8bc:	e7d9      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_13x13;
 800c8be:	4d48      	ldr	r5, [pc, #288]	@ (800c9e0 <start_pass+0x314>)
 800c8c0:	e7d7      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_14x7;
 800c8c2:	4d48      	ldr	r5, [pc, #288]	@ (800c9e4 <start_pass+0x318>)
 800c8c4:	e7d5      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_16x8;
 800c8c6:	4d48      	ldr	r5, [pc, #288]	@ (800c9e8 <start_pass+0x31c>)
 800c8c8:	e7d3      	b.n	800c872 <start_pass+0x1a6>
      method_ptr = jpeg_idct_16x16;
 800c8ca:	4d48      	ldr	r5, [pc, #288]	@ (800c9ec <start_pass+0x320>)
 800c8cc:	e7d1      	b.n	800c872 <start_pass+0x1a6>
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800c8ce:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 800c8d2:	42a3      	cmp	r3, r4
 800c8d4:	d0c1      	beq.n	800c85a <start_pass+0x18e>
    qtbl = compptr->quant_table;
 800c8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0be      	beq.n	800c85a <start_pass+0x18e>
    switch (method) {
 800c8dc:	2c01      	cmp	r4, #1
 800c8de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
    idct->cur_method[ci] = method;
 800c8e0:	f8c8 4028 	str.w	r4, [r8, #40]	@ 0x28
    switch (method) {
 800c8e4:	d00a      	beq.n	800c8fc <start_pass+0x230>
 800c8e6:	2c02      	cmp	r4, #2
 800c8e8:	d01a      	beq.n	800c920 <start_pass+0x254>
	for (i = 0; i < DCTSIZE2; i++) {
 800c8ea:	2200      	movs	r2, #0
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800c8ec:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800c8f0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800c8f4:	3201      	adds	r2, #1
 800c8f6:	2a40      	cmp	r2, #64	@ 0x40
 800c8f8:	d1f8      	bne.n	800c8ec <start_pass+0x220>
 800c8fa:	e7ae      	b.n	800c85a <start_pass+0x18e>
	for (i = 0; i < DCTSIZE2; i++) {
 800c8fc:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 800c9f0 <start_pass+0x324>
 800c900:	2000      	movs	r0, #0
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800c902:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 800c906:	f93c eb02 	ldrsh.w	lr, [ip], #2
 800c90a:	fb0e f202 	mul.w	r2, lr, r2
 800c90e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c912:	1312      	asrs	r2, r2, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800c914:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800c918:	3001      	adds	r0, #1
 800c91a:	2840      	cmp	r0, #64	@ 0x40
 800c91c:	d1f1      	bne.n	800c902 <start_pass+0x236>
 800c91e:	e79c      	b.n	800c85a <start_pass+0x18e>
	for (row = 0; row < DCTSIZE; row++) {
 800c920:	f8df c0d0 	ldr.w	ip, [pc, #208]	@ 800c9f4 <start_pass+0x328>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c924:	eeb4 5b00 	vmov.f64	d5, #64	@ 0x3e000000  0.125
	i = 0;
 800c928:	2200      	movs	r2, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800c92a:	46e2      	mov	sl, ip
	  for (col = 0; col < DCTSIZE; col++) {
 800c92c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 800c930:	f103 0b10 	add.w	fp, r3, #16
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c934:	f8cd c004 	str.w	ip, [sp, #4]
 800c938:	ecba 6b02 	vldmia	sl!, {d6}
	      ((double) qtbl->quantval[i] *
 800c93c:	f833 0b02 	ldrh.w	r0, [r3], #2
 800c940:	ee07 0a10 	vmov	s14, r0
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c944:	9801      	ldr	r0, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800c946:	455b      	cmp	r3, fp
	      ((double) qtbl->quantval[i] *
 800c948:	eeb8 7b47 	vcvt.f64.u32	d7, s14
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c94c:	ecb0 4b02 	vldmia	r0!, {d4}
	      ((double) qtbl->quantval[i] *
 800c950:	ee27 7b06 	vmul.f64	d7, d7, d6
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c954:	9001      	str	r0, [sp, #4]
 800c956:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c95a:	ee27 7b05 	vmul.f64	d7, d7, d5
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800c95e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800c962:	ecae 7a01 	vstmia	lr!, {s14}
	  for (col = 0; col < DCTSIZE; col++) {
 800c966:	d1e9      	bne.n	800c93c <start_pass+0x270>
	    i++;
 800c968:	3208      	adds	r2, #8
	for (row = 0; row < DCTSIZE; row++) {
 800c96a:	2a40      	cmp	r2, #64	@ 0x40
 800c96c:	d1de      	bne.n	800c92c <start_pass+0x260>
 800c96e:	e774      	b.n	800c85a <start_pass+0x18e>
 800c970:	08011a99 	.word	0x08011a99
 800c974:	080119a5 	.word	0x080119a5
 800c978:	080158cd 	.word	0x080158cd
 800c97c:	08011549 	.word	0x08011549
 800c980:	08014849 	.word	0x08014849
 800c984:	080145f9 	.word	0x080145f9
 800c988:	080124fd 	.word	0x080124fd
 800c98c:	080131a9 	.word	0x080131a9
 800c990:	0802d5b0 	.word	0x0802d5b0
 800c994:	0801506d 	.word	0x0801506d
 800c998:	08011879 	.word	0x08011879
 800c99c:	08015c35 	.word	0x08015c35
 800c9a0:	08014c5d 	.word	0x08014c5d
 800c9a4:	08011b15 	.word	0x08011b15
 800c9a8:	08015d0d 	.word	0x08015d0d
 800c9ac:	08015ae5 	.word	0x08015ae5
 800c9b0:	08014b91 	.word	0x08014b91
 800c9b4:	08014a35 	.word	0x08014a35
 800c9b8:	080116f9 	.word	0x080116f9
 800c9bc:	08015695 	.word	0x08015695
 800c9c0:	080153dd 	.word	0x080153dd
 800c9c4:	080112b5 	.word	0x080112b5
 800c9c8:	08014341 	.word	0x08014341
 800c9cc:	08011b39 	.word	0x08011b39
 800c9d0:	08014c95 	.word	0x08014c95
 800c9d4:	08011dfd 	.word	0x08011dfd
 800c9d8:	08012101 	.word	0x08012101
 800c9dc:	08012d61 	.word	0x08012d61
 800c9e0:	080128c9 	.word	0x080128c9
 800c9e4:	08013fb5 	.word	0x08013fb5
 800c9e8:	08013b7d 	.word	0x08013b7d
 800c9ec:	0801363d 	.word	0x0801363d
 800c9f0:	0802d600 	.word	0x0802d600
 800c9f4:	0802d5c0 	.word	0x0802d5c0

0800c9f8 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c9fa:	6843      	ldr	r3, [r0, #4]
{
 800c9fc:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c9fe:	2254      	movs	r2, #84	@ 0x54
 800ca00:	2101      	movs	r1, #1
 800ca02:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ca04:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca06:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800ca08:	4b0f      	ldr	r3, [pc, #60]	@ (800ca48 <jinit_inverse_dct+0x50>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca0a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ca0c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	@ 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800ca10:	f8c5 01d4 	str.w	r0, [r5, #468]	@ 0x1d4
  idct->pub.start_pass = start_pass;
 800ca14:	f844 3b28 	str.w	r3, [r4], #40
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ca18:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ca1a:	42b3      	cmp	r3, r6
 800ca1c:	dc00      	bgt.n	800ca20 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800ca1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca20:	686b      	ldr	r3, [r5, #4]
 800ca22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca26:	2101      	movs	r1, #1
 800ca28:	4628      	mov	r0, r5
 800ca2a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800ca2c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca2e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800ca30:	f44f 7280 	mov.w	r2, #256	@ 0x100
    compptr->dct_table =
 800ca34:	6578      	str	r0, [r7, #84]	@ 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800ca36:	2100      	movs	r1, #0
 800ca38:	f01d fb3a 	bl	802a0b0 <memset>
    idct->cur_method[ci] = -1;
 800ca3c:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800ca40:	3758      	adds	r7, #88	@ 0x58
    idct->cur_method[ci] = -1;
 800ca42:	f844 3f04 	str.w	r3, [r4, #4]!
       ci++, compptr++) {
 800ca46:	e7e7      	b.n	800ca18 <jinit_inverse_dct+0x20>
 800ca48:	0800c6cd 	.word	0x0800c6cd

0800ca4c <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800ca4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800ca50:	6905      	ldr	r5, [r0, #16]
{
 800ca52:	4606      	mov	r6, r0
 800ca54:	460f      	mov	r7, r1
 800ca56:	4692      	mov	sl, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800ca58:	f8d5 81b4 	ldr.w	r8, [r5, #436]	@ 0x1b4
{
 800ca5c:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800ca5e:	e9d0 4b00 	ldrd	r4, fp, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800ca62:	f1b8 0f00 	cmp.w	r8, #0
 800ca66:	d044      	beq.n	800caf2 <jpeg_fill_bit_buffer+0xa6>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800ca68:	45ca      	cmp	sl, r9
 800ca6a:	da45      	bge.n	800caf8 <jpeg_fill_bit_buffer+0xac>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800ca6c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	@ 0x1d0
 800ca70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca72:	b95b      	cbnz	r3, 800ca8c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	2278      	movs	r2, #120	@ 0x78
 800ca78:	f04f 31ff 	mov.w	r1, #4294967295
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	615a      	str	r2, [r3, #20]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800ca84:	f8d5 31d0 	ldr.w	r3, [r5, #464]	@ 0x1d0
 800ca88:	2201      	movs	r2, #1
 800ca8a:	625a      	str	r2, [r3, #36]	@ 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800ca8c:	f1ca 0a19 	rsb	sl, sl, #25
 800ca90:	fa07 f70a 	lsl.w	r7, r7, sl
      bits_left = MIN_GET_BITS;
 800ca94:	f04f 0a19 	mov.w	sl, #25
 800ca98:	e02e      	b.n	800caf8 <jpeg_fill_bit_buffer+0xac>
      if (bytes_in_buffer == 0) {
 800ca9a:	f1bb 0f00 	cmp.w	fp, #0
 800ca9e:	d107      	bne.n	800cab0 <jpeg_fill_bit_buffer+0x64>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800caa0:	69ab      	ldr	r3, [r5, #24]
 800caa2:	4628      	mov	r0, r5
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	4798      	blx	r3
 800caa8:	b360      	cbz	r0, 800cb04 <jpeg_fill_bit_buffer+0xb8>
	next_input_byte = cinfo->src->next_input_byte;
 800caaa:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800caac:	e9d3 4b00 	ldrd	r4, fp, [r3]
      c = GETJOCTET(*next_input_byte++);
 800cab0:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800cab4:	f10b 3bff 	add.w	fp, fp, #4294967295
      if (c == 0xFF) {
 800cab8:	2aff      	cmp	r2, #255	@ 0xff
 800caba:	d116      	bne.n	800caea <jpeg_fill_bit_buffer+0x9e>
	  if (bytes_in_buffer == 0) {
 800cabc:	f1bb 0f00 	cmp.w	fp, #0
 800cac0:	d109      	bne.n	800cad6 <jpeg_fill_bit_buffer+0x8a>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800cac2:	69ab      	ldr	r3, [r5, #24]
 800cac4:	4628      	mov	r0, r5
 800cac6:	9201      	str	r2, [sp, #4]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	4798      	blx	r3
 800cacc:	b1d0      	cbz	r0, 800cb04 <jpeg_fill_bit_buffer+0xb8>
	    next_input_byte = cinfo->src->next_input_byte;
 800cace:	69ab      	ldr	r3, [r5, #24]
 800cad0:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800cad2:	e9d3 4b00 	ldrd	r4, fp, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800cad6:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800cada:	f10b 3bff 	add.w	fp, fp, #4294967295
	} while (c == 0xFF);
 800cade:	2bff      	cmp	r3, #255	@ 0xff
 800cae0:	d0ec      	beq.n	800cabc <jpeg_fill_bit_buffer+0x70>
	if (c == 0) {
 800cae2:	b113      	cbz	r3, 800caea <jpeg_fill_bit_buffer+0x9e>
	  cinfo->unread_marker = c;
 800cae4:	f8c5 31b4 	str.w	r3, [r5, #436]	@ 0x1b4
	  goto no_more_bytes;
 800cae8:	e7be      	b.n	800ca68 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800caea:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
      bits_left += 8;
 800caee:	f10a 0a08 	add.w	sl, sl, #8
    while (bits_left < MIN_GET_BITS) {
 800caf2:	f1ba 0f18 	cmp.w	sl, #24
 800caf6:	ddd0      	ble.n	800ca9a <jpeg_fill_bit_buffer+0x4e>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800caf8:	f04f 0801 	mov.w	r8, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800cafc:	e9c6 4b00 	strd	r4, fp, [r6]
  state->bits_left = bits_left;
 800cb00:	e9c6 7a02 	strd	r7, sl, [r6, #8]
}
 800cb04:	4640      	mov	r0, r8
 800cb06:	b003      	add	sp, #12
 800cb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb0c <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	9d06      	ldr	r5, [sp, #24]
 800cb10:	4606      	mov	r6, r0
 800cb12:	468c      	mov	ip, r1
 800cb14:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800cb16:	4295      	cmp	r5, r2
{
 800cb18:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800cb1a:	dd08      	ble.n	800cb2e <jpeg_huff_decode+0x22>
 800cb1c:	462b      	mov	r3, r5
 800cb1e:	f7ff ff95 	bl	800ca4c <jpeg_fill_bit_buffer>
 800cb22:	b910      	cbnz	r0, 800cb2a <jpeg_huff_decode+0x1e>
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800cb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800cb2a:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800cb2e:	1b62      	subs	r2, r4, r5
 800cb30:	4b1b      	ldr	r3, [pc, #108]	@ (800cba0 <jpeg_huff_decode+0x94>)
 800cb32:	fa4c f002 	asr.w	r0, ip, r2
 800cb36:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cb3a:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800cb3c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800cb40:	4283      	cmp	r3, r0
 800cb42:	db0d      	blt.n	800cb60 <jpeg_huff_decode+0x54>
  if (l > 16) {
 800cb44:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800cb46:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800cb4a:	dd1f      	ble.n	800cb8c <jpeg_huff_decode+0x80>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800cb4c:	6930      	ldr	r0, [r6, #16]
 800cb4e:	2279      	movs	r2, #121	@ 0x79
 800cb50:	f04f 31ff 	mov.w	r1, #4294967295
 800cb54:	6803      	ldr	r3, [r0, #0]
 800cb56:	615a      	str	r2, [r3, #20]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	e7e3      	b.n	800cb28 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800cb60:	2a00      	cmp	r2, #0
    code <<= 1;
 800cb62:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800cb66:	dc08      	bgt.n	800cb7a <jpeg_huff_decode+0x6e>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4661      	mov	r1, ip
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff ff6d 	bl	800ca4c <jpeg_fill_bit_buffer>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d0d6      	beq.n	800cb24 <jpeg_huff_decode+0x18>
 800cb76:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800cb7a:	3a01      	subs	r2, #1
    l++;
 800cb7c:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800cb7e:	fa4c f302 	asr.w	r3, ip, r2
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	ea43 0004 	orr.w	r0, r3, r4
    l++;
 800cb8a:	e7d7      	b.n	800cb3c <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800cb8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb90:	3512      	adds	r5, #18
 800cb92:	4403      	add	r3, r0
 800cb94:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800cb98:	4413      	add	r3, r2
 800cb9a:	7c58      	ldrb	r0, [r3, #17]
 800cb9c:	e7c4      	b.n	800cb28 <jpeg_huff_decode+0x1c>
 800cb9e:	bf00      	nop
 800cba0:	0802d680 	.word	0x0802d680

0800cba4 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800cba4:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cba6:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	@ 0x1cc
  entropy->bitstate.bits_left = 0;
 800cbaa:	2600      	movs	r6, #0
{
 800cbac:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cbae:	68eb      	ldr	r3, [r5, #12]
 800cbb0:	6991      	ldr	r1, [r2, #24]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	bfb8      	it	lt
 800cbb6:	3307      	addlt	r3, #7
 800cbb8:	eb01 01e3 	add.w	r1, r1, r3, asr #3

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800cbbc:	6893      	ldr	r3, [r2, #8]
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cbbe:	6191      	str	r1, [r2, #24]
  entropy->bitstate.bits_left = 0;
 800cbc0:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800cbc2:	4798      	blx	r3
 800cbc4:	b188      	cbz	r0, 800cbea <process_restart+0x46>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800cbc6:	f8d4 2150 	ldr.w	r2, [r4, #336]	@ 0x150
 800cbca:	4631      	mov	r1, r6
 800cbcc:	f105 0014 	add.w	r0, r5, #20
 800cbd0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800cbd4:	0092      	lsls	r2, r2, #2
 800cbd6:	f01d fa6b 	bl	802a0b0 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800cbda:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
  entropy->saved.EOBRUN = 0;
 800cbde:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800cbe0:	62ab      	str	r3, [r5, #40]	@ 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800cbe2:	f8d4 31b4 	ldr.w	r3, [r4, #436]	@ 0x1b4
 800cbe6:	b10b      	cbz	r3, 800cbec <process_restart+0x48>
    entropy->insufficient_data = FALSE;

  return TRUE;
 800cbe8:	2001      	movs	r0, #1
}
 800cbea:	bd70      	pop	{r4, r5, r6, pc}
    entropy->insufficient_data = FALSE;
 800cbec:	626b      	str	r3, [r5, #36]	@ 0x24
 800cbee:	e7fb      	b.n	800cbe8 <process_restart+0x44>

0800cbf0 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800cbf4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
{   
 800cbf8:	b091      	sub	sp, #68	@ 0x44
 800cbfa:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cbfc:	f8d0 41d0 	ldr.w	r4, [r0, #464]	@ 0x1d0
  int Al = cinfo->Al;
 800cc00:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800cc02:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800cc06:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800cc08:	b933      	cbnz	r3, 800cc18 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800cc0a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800cc0c:	b17e      	cbz	r6, 800cc2e <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800cc0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28

  return TRUE;
 800cc10:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cc12:	3b01      	subs	r3, #1
 800cc14:	62a3      	str	r3, [r4, #40]	@ 0x28
  return TRUE;
 800cc16:	e007      	b.n	800cc28 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800cc18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1f5      	bne.n	800cc0a <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800cc1e:	f7ff ffc1 	bl	800cba4 <process_restart>
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d1f1      	bne.n	800cc0a <decode_mcu_DC_first+0x1a>
	return FALSE;
 800cc26:	2000      	movs	r0, #0
}
 800cc28:	b011      	add	sp, #68	@ 0x44
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cc2e:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800cc30:	f104 0810 	add.w	r8, r4, #16
 800cc34:	af0b      	add	r7, sp, #44	@ 0x2c
 800cc36:	f505 79b6 	add.w	r9, r5, #364	@ 0x16c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	f104 0b10 	add.w	fp, r4, #16
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	9206      	str	r2, [sp, #24]
 800cc44:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800cc46:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800cd60 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cc4a:	950a      	str	r5, [sp, #40]	@ 0x28
    ASSIGN_STATE(state, entropy->saved);
 800cc4c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cc50:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800cc54:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cc56:	f8d8 3000 	ldr.w	r3, [r8]
 800cc5a:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cc5c:	f8d5 316c 	ldr.w	r3, [r5, #364]	@ 0x16c
 800cc60:	42b3      	cmp	r3, r6
 800cc62:	dc0d      	bgt.n	800cc80 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cc64:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800cc66:	ae0b      	add	r6, sp, #44	@ 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cc68:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800cc6a:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cc6c:	601a      	str	r2, [r3, #0]
 800cc6e:	9a07      	ldr	r2, [sp, #28]
 800cc70:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800cc72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cc74:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800cc78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc7a:	6833      	ldr	r3, [r6, #0]
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	e7c6      	b.n	800cc0e <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800cc80:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800cc82:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800cc86:	f859 7f04 	ldr.w	r7, [r9, #4]!
      block = MCU_data[blkn];
 800cc8a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800cc8e:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800cc90:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800cc94:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc9e:	f8d3 802c 	ldr.w	r8, [r3, #44]	@ 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800cca2:	dc0c      	bgt.n	800ccbe <decode_mcu_DC_first+0xce>
 800cca4:	2300      	movs	r3, #0
 800cca6:	4662      	mov	r2, ip
 800cca8:	4671      	mov	r1, lr
 800ccaa:	a806      	add	r0, sp, #24
 800ccac:	f7ff fece 	bl	800ca4c <jpeg_fill_bit_buffer>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d0b8      	beq.n	800cc26 <decode_mcu_DC_first+0x36>
 800ccb4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800ccb8:	f1bc 0f07 	cmp.w	ip, #7
 800ccbc:	dd3e      	ble.n	800cd3c <decode_mcu_DC_first+0x14c>
 800ccbe:	f1ac 0308 	sub.w	r3, ip, #8
 800ccc2:	fa4e f303 	asr.w	r3, lr, r3
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800cccc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	d042      	beq.n	800cd5a <decode_mcu_DC_first+0x16a>
 800ccd4:	4443      	add	r3, r8
 800ccd6:	ebac 0c02 	sub.w	ip, ip, r2
 800ccda:	f893 8490 	ldrb.w	r8, [r3, #1168]	@ 0x490
      if (s) {
 800ccde:	f1b8 0f00 	cmp.w	r8, #0
 800cce2:	d01b      	beq.n	800cd1c <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cce4:	45e0      	cmp	r8, ip
 800cce6:	dd09      	ble.n	800ccfc <decode_mcu_DC_first+0x10c>
 800cce8:	4643      	mov	r3, r8
 800ccea:	4662      	mov	r2, ip
 800ccec:	4671      	mov	r1, lr
 800ccee:	a806      	add	r0, sp, #24
 800ccf0:	f7ff feac 	bl	800ca4c <jpeg_fill_bit_buffer>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d096      	beq.n	800cc26 <decode_mcu_DC_first+0x36>
 800ccf8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800ccfc:	ebac 0c08 	sub.w	ip, ip, r8
 800cd00:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800cd04:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800cd08:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800cd0c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800cd10:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800cd12:	4299      	cmp	r1, r3
 800cd14:	bfac      	ite	ge
 800cd16:	eba3 0802 	subge.w	r8, r3, r2
 800cd1a:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800cd1c:	ab10      	add	r3, sp, #64	@ 0x40
      (*block)[0] = (JCOEF) (s << Al);
 800cd1e:	9a03      	ldr	r2, [sp, #12]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cd20:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800cd22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd26:	f857 3c10 	ldr.w	r3, [r7, #-16]
 800cd2a:	4443      	add	r3, r8
      (*block)[0] = (JCOEF) (s << Al);
 800cd2c:	fa03 f802 	lsl.w	r8, r3, r2
      state.last_dc_val[ci] = s;
 800cd30:	f847 3c10 	str.w	r3, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800cd34:	9b04      	ldr	r3, [sp, #16]
 800cd36:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cd3a:	e78f      	b.n	800cc5c <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	4662      	mov	r2, ip
 800cd42:	4643      	mov	r3, r8
 800cd44:	4671      	mov	r1, lr
 800cd46:	a806      	add	r0, sp, #24
 800cd48:	f7ff fee0 	bl	800cb0c <jpeg_huff_decode>
 800cd4c:	f1b0 0800 	subs.w	r8, r0, #0
 800cd50:	f6ff af69 	blt.w	800cc26 <decode_mcu_DC_first+0x36>
 800cd54:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cd58:	e7c1      	b.n	800ccde <decode_mcu_DC_first+0xee>
 800cd5a:	2309      	movs	r3, #9
 800cd5c:	e7ef      	b.n	800cd3e <decode_mcu_DC_first+0x14e>
 800cd5e:	bf00      	nop
 800cd60:	0802d680 	.word	0x0802d680

0800cd64 <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800cd64:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	b08d      	sub	sp, #52	@ 0x34
 800cd70:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cd72:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800cd76:	b933      	cbnz	r3, 800cd86 <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800cd78:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800cd7a:	b17b      	cbz	r3, 800cd9c <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800cd7c:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  return TRUE;
 800cd7e:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cd80:	3b01      	subs	r3, #1
 800cd82:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800cd84:	e007      	b.n	800cd96 <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800cd86:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1f5      	bne.n	800cd78 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800cd8c:	f7ff ff0a 	bl	800cba4 <process_restart>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d1f1      	bne.n	800cd78 <decode_mcu_AC_first+0x14>
	return FALSE;
 800cd94:	2000      	movs	r0, #0
}
 800cd96:	b00d      	add	sp, #52	@ 0x34
 800cd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800cd9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800cda0:	692e      	ldr	r6, [r5, #16]
    Se = cinfo->Se;
 800cda2:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800cda4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    natural_order = cinfo->natural_order;
 800cda8:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	@ 0x1ac
    Al = cinfo->Al;
 800cdac:	9304      	str	r3, [sp, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800cdae:	b116      	cbz	r6, 800cdb6 <decode_mcu_AC_first+0x52>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800cdb0:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800cdb2:	612e      	str	r6, [r5, #16]
 800cdb4:	e7e2      	b.n	800cd7c <decode_mcu_AC_first+0x18>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cdb6:	69bb      	ldr	r3, [r7, #24]
      tbl = entropy->ac_derived_tbl;
 800cdb8:	f8d5 903c 	ldr.w	r9, [r5, #60]	@ 0x3c
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	9207      	str	r2, [sp, #28]
 800cdc2:	9308      	str	r3, [sp, #32]
      for (k = cinfo->Ss; k <= Se; k++) {
 800cdc4:	f8d7 8198 	ldr.w	r8, [r7, #408]	@ 0x198
      block = MCU_data[0];
 800cdc8:	6823      	ldr	r3, [r4, #0]
	  r = GET_BITS(s);
 800cdca:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 800cec0 <decode_mcu_AC_first+0x15c>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cdce:	970b      	str	r7, [sp, #44]	@ 0x2c
      block = MCU_data[0];
 800cdd0:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cdd2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	4598      	cmp	r8, r3
 800cdda:	dc68      	bgt.n	800ceae <decode_mcu_AC_first+0x14a>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800cddc:	2a07      	cmp	r2, #7
 800cdde:	dc09      	bgt.n	800cdf4 <decode_mcu_AC_first+0x90>
 800cde0:	2300      	movs	r3, #0
 800cde2:	a807      	add	r0, sp, #28
 800cde4:	f7ff fe32 	bl	800ca4c <jpeg_fill_bit_buffer>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d0d3      	beq.n	800cd94 <decode_mcu_AC_first+0x30>
 800cdec:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800cdf0:	2a07      	cmp	r2, #7
 800cdf2:	dd32      	ble.n	800ce5a <decode_mcu_AC_first+0xf6>
 800cdf4:	f1a2 0308 	sub.w	r3, r2, #8
 800cdf8:	fa41 f303 	asr.w	r3, r1, r3
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ce02:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800ce06:	b398      	cbz	r0, 800ce70 <decode_mcu_AC_first+0x10c>
 800ce08:	444b      	add	r3, r9
 800ce0a:	1a12      	subs	r2, r2, r0
 800ce0c:	f893 4490 	ldrb.w	r4, [r3, #1168]	@ 0x490
	r = s >> 4;
 800ce10:	1123      	asrs	r3, r4, #4
	if (s) {
 800ce12:	f014 040f 	ands.w	r4, r4, #15
 800ce16:	d02d      	beq.n	800ce74 <decode_mcu_AC_first+0x110>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ce18:	42a2      	cmp	r2, r4
	  k += r;
 800ce1a:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ce1c:	da07      	bge.n	800ce2e <decode_mcu_AC_first+0xca>
 800ce1e:	4623      	mov	r3, r4
 800ce20:	a807      	add	r0, sp, #28
 800ce22:	f7ff fe13 	bl	800ca4c <jpeg_fill_bit_buffer>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d0b4      	beq.n	800cd94 <decode_mcu_AC_first+0x30>
 800ce2a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
	  r = GET_BITS(s);
 800ce2e:	1b12      	subs	r2, r2, r4
 800ce30:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800ce34:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800ce36:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800ce3a:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800ce3e:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800ce40:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800ce42:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800ce44:	bfa8      	it	ge
 800ce46:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800ce48:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800ce4c:	40a3      	lsls	r3, r4
 800ce4e:	9c05      	ldr	r4, [sp, #20]
 800ce50:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800ce54:	f108 0801 	add.w	r8, r8, #1
 800ce58:	e7bd      	b.n	800cdd6 <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	a807      	add	r0, sp, #28
 800ce60:	464b      	mov	r3, r9
 800ce62:	f7ff fe53 	bl	800cb0c <jpeg_huff_decode>
 800ce66:	1e04      	subs	r4, r0, #0
 800ce68:	db94      	blt.n	800cd94 <decode_mcu_AC_first+0x30>
 800ce6a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800ce6e:	e7cf      	b.n	800ce10 <decode_mcu_AC_first+0xac>
 800ce70:	2309      	movs	r3, #9
 800ce72:	e7f3      	b.n	800ce5c <decode_mcu_AC_first+0xf8>
	  if (r == 15) {	/* ZRL */
 800ce74:	2b0f      	cmp	r3, #15
 800ce76:	d102      	bne.n	800ce7e <decode_mcu_AC_first+0x11a>
	    k += 15;		/* skip 15 zeroes in band */
 800ce78:	f108 080f 	add.w	r8, r8, #15
 800ce7c:	e7ea      	b.n	800ce54 <decode_mcu_AC_first+0xf0>
	    EOBRUN = 1 << r;
 800ce7e:	2601      	movs	r6, #1
 800ce80:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800ce82:	b19b      	cbz	r3, 800ceac <decode_mcu_AC_first+0x148>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800ce84:	429a      	cmp	r2, r3
 800ce86:	da09      	bge.n	800ce9c <decode_mcu_AC_first+0x138>
 800ce88:	a807      	add	r0, sp, #28
 800ce8a:	9303      	str	r3, [sp, #12]
 800ce8c:	f7ff fdde 	bl	800ca4c <jpeg_fill_bit_buffer>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	f43f af7f 	beq.w	800cd94 <decode_mcu_AC_first+0x30>
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
	      r = GET_BITS(r);
 800ce9c:	1ad2      	subs	r2, r2, r3
 800ce9e:	4808      	ldr	r0, [pc, #32]	@ (800cec0 <decode_mcu_AC_first+0x15c>)
 800cea0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cea4:	fa41 f302 	asr.w	r3, r1, r2
 800cea8:	4003      	ands	r3, r0
	      EOBRUN += r;
 800ceaa:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800ceac:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	9807      	ldr	r0, [sp, #28]
 800ceb2:	6018      	str	r0, [r3, #0]
 800ceb4:	9808      	ldr	r0, [sp, #32]
 800ceb6:	6058      	str	r0, [r3, #4]
 800ceb8:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800cebc:	e779      	b.n	800cdb2 <decode_mcu_AC_first+0x4e>
 800cebe:	bf00      	nop
 800cec0:	0802d680 	.word	0x0802d680

0800cec4 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800cec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800cec8:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
 800cecc:	2701      	movs	r7, #1
{   
 800cece:	b087      	sub	sp, #28
 800ced0:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ced2:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800ced4:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800ced8:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ceda:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800cede:	b9c3      	cbnz	r3, 800cf12 <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cee0:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cee2:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cee4:	9405      	str	r4, [sp, #20]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	9201      	str	r2, [sp, #4]
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cef2:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800cef6:	42b3      	cmp	r3, r6
 800cef8:	dc16      	bgt.n	800cf28 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cefa:	69a3      	ldr	r3, [r4, #24]
 800cefc:	9801      	ldr	r0, [sp, #4]
 800cefe:	6018      	str	r0, [r3, #0]
 800cf00:	9802      	ldr	r0, [sp, #8]
 800cf02:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800cf04:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cf06:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800cf08:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cf0a:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800cf0e:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800cf10:	e007      	b.n	800cf22 <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800cf12:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e3      	bne.n	800cee0 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800cf18:	f7ff fe44 	bl	800cba4 <process_restart>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d1df      	bne.n	800cee0 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800cf20:	2000      	movs	r0, #0
}
 800cf22:	b007      	add	sp, #28
 800cf24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800cf28:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800cf2a:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800cf2e:	dc07      	bgt.n	800cf40 <decode_mcu_DC_refine+0x7c>
 800cf30:	2301      	movs	r3, #1
 800cf32:	a801      	add	r0, sp, #4
 800cf34:	f7ff fd8a 	bl	800ca4c <jpeg_fill_bit_buffer>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d0f1      	beq.n	800cf20 <decode_mcu_DC_refine+0x5c>
 800cf3c:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800cf40:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cf42:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800cf44:	fa41 f302 	asr.w	r3, r1, r2
 800cf48:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800cf4a:	bf42      	ittt	mi
 800cf4c:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800cf50:	433b      	orrmi	r3, r7
 800cf52:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cf56:	e7cc      	b.n	800cef2 <decode_mcu_DC_refine+0x2e>

0800cf58 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800cf58:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{   
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4605      	mov	r5, r0
 800cf62:	b0d1      	sub	sp, #324	@ 0x144
 800cf64:	460e      	mov	r6, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cf66:	f8d0 71d0 	ldr.w	r7, [r0, #464]	@ 0x1d0
  if (cinfo->restart_interval) {
 800cf6a:	b94b      	cbnz	r3, 800cf80 <decode_mcu_AC_refine+0x28>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800cf6c:	f8d7 a024 	ldr.w	sl, [r7, #36]	@ 0x24
 800cf70:	f1ba 0f00 	cmp.w	sl, #0
 800cf74:	d00f      	beq.n	800cf96 <decode_mcu_AC_refine+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  return TRUE;
 800cf78:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return TRUE;
 800cf7e:	e007      	b.n	800cf90 <decode_mcu_AC_refine+0x38>
    if (entropy->restarts_to_go == 0)
 800cf80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1f2      	bne.n	800cf6c <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800cf86:	f7ff fe0d 	bl	800cba4 <process_restart>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d1ee      	bne.n	800cf6c <decode_mcu_AC_refine+0x14>
	return FALSE;
 800cf8e:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800cf90:	b051      	add	sp, #324	@ 0x144
 800cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800cf96:	f8d5 319c 	ldr.w	r3, [r5, #412]	@ 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800cf9a:	2201      	movs	r2, #1
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800cf9c:	f8d7 b010 	ldr.w	fp, [r7, #16]
    Se = cinfo->Se;
 800cfa0:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800cfa2:	f8d5 31a4 	ldr.w	r3, [r5, #420]	@ 0x1a4
    block = MCU_data[0];
 800cfa6:	f8d6 8000 	ldr.w	r8, [r6]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800cfaa:	409a      	lsls	r2, r3
    k = cinfo->Ss;
 800cfac:	f8d5 6198 	ldr.w	r6, [r5, #408]	@ 0x198
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfb0:	950f      	str	r5, [sp, #60]	@ 0x3c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800cfb2:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfbc:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800cfbe:	f8d5 31ac 	ldr.w	r3, [r5, #428]	@ 0x1ac
 800cfc2:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfc4:	69ab      	ldr	r3, [r5, #24]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cfcc:	930c      	str	r3, [sp, #48]	@ 0x30
    tbl = entropy->ac_derived_tbl;
 800cfce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfd0:	e9d7 4202 	ldrd	r4, r2, [r7, #8]
    tbl = entropy->ac_derived_tbl;
 800cfd4:	9309      	str	r3, [sp, #36]	@ 0x24
    if (EOBRUN == 0) {
 800cfd6:	f1bb 0f00 	cmp.w	fp, #0
 800cfda:	f000 80c3 	beq.w	800d164 <decode_mcu_AC_refine+0x20c>
      for (; k <= Se; k++) {
 800cfde:	9b06      	ldr	r3, [sp, #24]
 800cfe0:	429e      	cmp	r6, r3
 800cfe2:	f340 80cd 	ble.w	800d180 <decode_mcu_AC_refine+0x228>
      EOBRUN--;
 800cfe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cfea:	e0bf      	b.n	800d16c <decode_mcu_AC_refine+0x214>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800cfec:	2a07      	cmp	r2, #7
 800cfee:	dc0a      	bgt.n	800d006 <decode_mcu_AC_refine+0xae>
 800cff0:	2300      	movs	r3, #0
 800cff2:	4621      	mov	r1, r4
 800cff4:	a80b      	add	r0, sp, #44	@ 0x2c
 800cff6:	f7ff fd29 	bl	800ca4c <jpeg_fill_bit_buffer>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d06e      	beq.n	800d0dc <decode_mcu_AC_refine+0x184>
 800cffe:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
 800d002:	2a07      	cmp	r2, #7
 800d004:	dd61      	ble.n	800d0ca <decode_mcu_AC_refine+0x172>
 800d006:	f1a2 0308 	sub.w	r3, r2, #8
 800d00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d00c:	fa44 f303 	asr.w	r3, r4, r3
 800d010:	b2db      	uxtb	r3, r3
 800d012:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d016:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800d01a:	2900      	cmp	r1, #0
 800d01c:	d06b      	beq.n	800d0f6 <decode_mcu_AC_refine+0x19e>
 800d01e:	4403      	add	r3, r0
 800d020:	1a52      	subs	r2, r2, r1
 800d022:	f893 0490 	ldrb.w	r0, [r3, #1168]	@ 0x490
	if (s) {
 800d026:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800d02a:	ea4f 1920 	mov.w	r9, r0, asr #4
	if (s) {
 800d02e:	9304      	str	r3, [sp, #16]
 800d030:	d066      	beq.n	800d100 <decode_mcu_AC_refine+0x1a8>
	  if (s != 1)		/* size of new coef should always be 1 */
 800d032:	2b01      	cmp	r3, #1
 800d034:	d009      	beq.n	800d04a <decode_mcu_AC_refine+0xf2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	2179      	movs	r1, #121	@ 0x79
 800d03a:	4628      	mov	r0, r5
 800d03c:	9204      	str	r2, [sp, #16]
 800d03e:	6159      	str	r1, [r3, #20]
 800d040:	f04f 31ff 	mov.w	r1, #4294967295
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	4798      	blx	r3
 800d048:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	dc08      	bgt.n	800d060 <decode_mcu_AC_refine+0x108>
 800d04e:	2301      	movs	r3, #1
 800d050:	4621      	mov	r1, r4
 800d052:	a80b      	add	r0, sp, #44	@ 0x2c
 800d054:	f7ff fcfa 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d03f      	beq.n	800d0dc <decode_mcu_AC_refine+0x184>
 800d05c:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	  if (GET_BITS(1))
 800d060:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800d062:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800d064:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800d068:	f013 0f01 	tst.w	r3, #1
 800d06c:	9b03      	ldr	r3, [sp, #12]
 800d06e:	bf08      	it	eq
 800d070:	460b      	moveq	r3, r1
 800d072:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800d074:	9b08      	ldr	r3, [sp, #32]
 800d076:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800d07a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800d07c:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05e      	beq.n	800d142 <decode_mcu_AC_refine+0x1ea>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d084:	2a00      	cmp	r2, #0
 800d086:	dc07      	bgt.n	800d098 <decode_mcu_AC_refine+0x140>
 800d088:	2301      	movs	r3, #1
 800d08a:	4621      	mov	r1, r4
 800d08c:	a80b      	add	r0, sp, #44	@ 0x2c
 800d08e:	f7ff fcdd 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d092:	b318      	cbz	r0, 800d0dc <decode_mcu_AC_refine+0x184>
 800d094:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	    if (GET_BITS(1)) {
 800d098:	3a01      	subs	r2, #1
 800d09a:	fa44 f302 	asr.w	r3, r4, r2
 800d09e:	07d9      	lsls	r1, r3, #31
 800d0a0:	d50e      	bpl.n	800d0c0 <decode_mcu_AC_refine+0x168>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800d0a2:	9b05      	ldr	r3, [sp, #20]
 800d0a4:	f938 1013 	ldrsh.w	r1, [r8, r3, lsl #1]
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	4219      	tst	r1, r3
 800d0ac:	d108      	bne.n	800d0c0 <decode_mcu_AC_refine+0x168>
		if (*thiscoef >= 0)
 800d0ae:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800d0b0:	b28b      	uxth	r3, r1
 800d0b2:	bfac      	ite	ge
 800d0b4:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800d0b6:	9907      	ldrlt	r1, [sp, #28]
 800d0b8:	440b      	add	r3, r1
 800d0ba:	9905      	ldr	r1, [sp, #20]
 800d0bc:	f828 3011 	strh.w	r3, [r8, r1, lsl #1]
	  k++;
 800d0c0:	3601      	adds	r6, #1
	} while (k <= Se);
 800d0c2:	9b06      	ldr	r3, [sp, #24]
 800d0c4:	42b3      	cmp	r3, r6
 800d0c6:	dad5      	bge.n	800d074 <decode_mcu_AC_refine+0x11c>
 800d0c8:	e03e      	b.n	800d148 <decode_mcu_AC_refine+0x1f0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d2:	a80b      	add	r0, sp, #44	@ 0x2c
 800d0d4:	f7ff fd1a 	bl	800cb0c <jpeg_huff_decode>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	da0e      	bge.n	800d0fa <decode_mcu_AC_refine+0x1a2>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800d0dc:	ab10      	add	r3, sp, #64	@ 0x40
 800d0de:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800d0e0:	f1ba 0f00 	cmp.w	sl, #0
 800d0e4:	f43f af53 	beq.w	800cf8e <decode_mcu_AC_refine+0x36>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800d0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0ec:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d0f0:	f828 2011 	strh.w	r2, [r8, r1, lsl #1]
 800d0f4:	e7f4      	b.n	800d0e0 <decode_mcu_AC_refine+0x188>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d0f6:	2309      	movs	r3, #9
 800d0f8:	e7e8      	b.n	800d0cc <decode_mcu_AC_refine+0x174>
 800d0fa:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
 800d0fe:	e792      	b.n	800d026 <decode_mcu_AC_refine+0xce>
	  if (r != 15) {
 800d100:	f1b9 0f0f 	cmp.w	r9, #15
 800d104:	d0b6      	beq.n	800d074 <decode_mcu_AC_refine+0x11c>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800d106:	2301      	movs	r3, #1
 800d108:	fa03 fb09 	lsl.w	fp, r3, r9
	    if (r) {
 800d10c:	f1b9 0f00 	cmp.w	r9, #0
 800d110:	d013      	beq.n	800d13a <decode_mcu_AC_refine+0x1e2>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800d112:	454a      	cmp	r2, r9
 800d114:	da08      	bge.n	800d128 <decode_mcu_AC_refine+0x1d0>
 800d116:	464b      	mov	r3, r9
 800d118:	4621      	mov	r1, r4
 800d11a:	a80b      	add	r0, sp, #44	@ 0x2c
 800d11c:	f7ff fc96 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d120:	2800      	cmp	r0, #0
 800d122:	d0db      	beq.n	800d0dc <decode_mcu_AC_refine+0x184>
 800d124:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	      r = GET_BITS(r);
 800d128:	4b28      	ldr	r3, [pc, #160]	@ (800d1cc <decode_mcu_AC_refine+0x274>)
 800d12a:	eba2 0209 	sub.w	r2, r2, r9
 800d12e:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 800d132:	fa44 f302 	asr.w	r3, r4, r2
 800d136:	400b      	ands	r3, r1
	      EOBRUN += r;
 800d138:	449b      	add	fp, r3
    if (EOBRUN > 0) {
 800d13a:	f1bb 0f00 	cmp.w	fp, #0
 800d13e:	d015      	beq.n	800d16c <decode_mcu_AC_refine+0x214>
 800d140:	e74d      	b.n	800cfde <decode_mcu_AC_refine+0x86>
	    if (--r < 0)
 800d142:	f1b9 0901 	subs.w	r9, r9, #1
 800d146:	d2bb      	bcs.n	800d0c0 <decode_mcu_AC_refine+0x168>
	if (s) {
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	b153      	cbz	r3, 800d162 <decode_mcu_AC_refine+0x20a>
	  int pos = natural_order[k];
 800d14c:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800d14e:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800d150:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800d154:	f828 1013 	strh.w	r1, [r8, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800d158:	a910      	add	r1, sp, #64	@ 0x40
 800d15a:	f841 302a 	str.w	r3, [r1, sl, lsl #2]
 800d15e:	f10a 0a01 	add.w	sl, sl, #1
      for (; k <= Se; k++) {
 800d162:	3601      	adds	r6, #1
 800d164:	9b06      	ldr	r3, [sp, #24]
 800d166:	429e      	cmp	r6, r3
 800d168:	f77f af40 	ble.w	800cfec <decode_mcu_AC_refine+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d16c:	69ab      	ldr	r3, [r5, #24]
 800d16e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d170:	6019      	str	r1, [r3, #0]
 800d172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d174:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800d176:	f8c7 b010 	str.w	fp, [r7, #16]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d17a:	e9c7 4202 	strd	r4, r2, [r7, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800d17e:	e6fa      	b.n	800cf76 <decode_mcu_AC_refine+0x1e>
	thiscoef = *block + natural_order[k];
 800d180:	9b08      	ldr	r3, [sp, #32]
 800d182:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
	if (*thiscoef != 0) {
 800d186:	f938 3019 	ldrsh.w	r3, [r8, r9, lsl #1]
 800d18a:	b1e3      	cbz	r3, 800d1c6 <decode_mcu_AC_refine+0x26e>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d18c:	2a00      	cmp	r2, #0
 800d18e:	dc08      	bgt.n	800d1a2 <decode_mcu_AC_refine+0x24a>
 800d190:	2301      	movs	r3, #1
 800d192:	4621      	mov	r1, r4
 800d194:	a80b      	add	r0, sp, #44	@ 0x2c
 800d196:	f7ff fc59 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d09e      	beq.n	800d0dc <decode_mcu_AC_refine+0x184>
 800d19e:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	@ 0x34
	  if (GET_BITS(1)) {
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	fa44 f302 	asr.w	r3, r4, r2
 800d1a8:	07db      	lsls	r3, r3, #31
 800d1aa:	d50c      	bpl.n	800d1c6 <decode_mcu_AC_refine+0x26e>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800d1ac:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	4219      	tst	r1, r3
 800d1b4:	d107      	bne.n	800d1c6 <decode_mcu_AC_refine+0x26e>
	      if (*thiscoef >= 0)
 800d1b6:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800d1b8:	b28b      	uxth	r3, r1
 800d1ba:	bfac      	ite	ge
 800d1bc:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800d1be:	9907      	ldrlt	r1, [sp, #28]
 800d1c0:	440b      	add	r3, r1
 800d1c2:	f828 3019 	strh.w	r3, [r8, r9, lsl #1]
      for (; k <= Se; k++) {
 800d1c6:	3601      	adds	r6, #1
 800d1c8:	e709      	b.n	800cfde <decode_mcu_AC_refine+0x86>
 800d1ca:	bf00      	nop
 800d1cc:	0802d680 	.word	0x0802d680

0800d1d0 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d1d4:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800d1d8:	b093      	sub	sp, #76	@ 0x4c
 800d1da:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d1dc:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800d1e0:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800d1e2:	b933      	cbnz	r3, 800d1f2 <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d1e4:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 800d1e6:	b17f      	cbz	r7, 800d208 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d1e8:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  return TRUE;
 800d1ea:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800d1f0:	e007      	b.n	800d202 <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800d1f2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1f5      	bne.n	800d1e4 <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800d1f8:	f7ff fcd4 	bl	800cba4 <process_restart>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d1f1      	bne.n	800d1e4 <decode_mcu_sub+0x14>
	return FALSE;
 800d200:	2000      	movs	r0, #0
}
 800d202:	b013      	add	sp, #76	@ 0x4c
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800d208:	f8d6 31ac 	ldr.w	r3, [r6, #428]	@ 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800d20c:	f105 0810 	add.w	r8, r5, #16
 800d210:	ac0d      	add	r4, sp, #52	@ 0x34
 800d212:	f105 095c 	add.w	r9, r5, #92	@ 0x5c
    natural_order = cinfo->natural_order;
 800d216:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800d218:	f8d6 31b0 	ldr.w	r3, [r6, #432]	@ 0x1b0
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d21c:	960c      	str	r6, [sp, #48]	@ 0x30
    Se = cinfo->lim_Se;
 800d21e:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d220:	69b3      	ldr	r3, [r6, #24]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	9208      	str	r2, [sp, #32]
 800d228:	9309      	str	r3, [sp, #36]	@ 0x24
    ASSIGN_STATE(state, entropy->saved);
 800d22a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d22e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d234:	f8d8 3000 	ldr.w	r3, [r8]
 800d238:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d23a:	f8d6 316c 	ldr.w	r3, [r6, #364]	@ 0x16c
 800d23e:	42bb      	cmp	r3, r7
 800d240:	dc0e      	bgt.n	800d260 <decode_mcu_sub+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d242:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d244:	ae0d      	add	r6, sp, #52	@ 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d246:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800d248:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d250:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d254:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d25a:	6833      	ldr	r3, [r6, #0]
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	e7c3      	b.n	800d1e8 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800d260:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d262:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800d266:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800d26a:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d26e:	dc0c      	bgt.n	800d28a <decode_mcu_sub+0xba>
 800d270:	2300      	movs	r3, #0
 800d272:	4662      	mov	r2, ip
 800d274:	4671      	mov	r1, lr
 800d276:	a808      	add	r0, sp, #32
 800d278:	f7ff fbe8 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d0bf      	beq.n	800d200 <decode_mcu_sub+0x30>
 800d280:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d284:	f1bc 0f07 	cmp.w	ip, #7
 800d288:	dd4c      	ble.n	800d324 <decode_mcu_sub+0x154>
 800d28a:	f1ac 0308 	sub.w	r3, ip, #8
 800d28e:	fa4e f303 	asr.w	r3, lr, r3
 800d292:	b2db      	uxtb	r3, r3
 800d294:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d298:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d29c:	2a00      	cmp	r2, #0
 800d29e:	d04f      	beq.n	800d340 <decode_mcu_sub+0x170>
 800d2a0:	4423      	add	r3, r4
 800d2a2:	ebac 0c02 	sub.w	ip, ip, r2
 800d2a6:	f893 4490 	ldrb.w	r4, [r3, #1168]	@ 0x490
      coef_limit = entropy->coef_limit[blkn];
 800d2aa:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800d2ae:	f8d9 8028 	ldr.w	r8, [r9, #40]	@ 0x28
      coef_limit = entropy->coef_limit[blkn];
 800d2b2:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f000 80a1 	beq.w	800d3fc <decode_mcu_sub+0x22c>
	if (s) {
 800d2ba:	b1d4      	cbz	r4, 800d2f2 <decode_mcu_sub+0x122>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d2bc:	45a4      	cmp	ip, r4
 800d2be:	da09      	bge.n	800d2d4 <decode_mcu_sub+0x104>
 800d2c0:	4623      	mov	r3, r4
 800d2c2:	4662      	mov	r2, ip
 800d2c4:	4671      	mov	r1, lr
 800d2c6:	a808      	add	r0, sp, #32
 800d2c8:	f7ff fbc0 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d097      	beq.n	800d200 <decode_mcu_sub+0x30>
 800d2d0:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	  r = GET_BITS(s);
 800d2d4:	ebac 0c04 	sub.w	ip, ip, r4
 800d2d8:	4977      	ldr	r1, [pc, #476]	@ (800d4b8 <decode_mcu_sub+0x2e8>)
 800d2da:	fa4e f30c 	asr.w	r3, lr, ip
 800d2de:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d2e2:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d2e4:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800d2e6:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800d2ea:	4299      	cmp	r1, r3
 800d2ec:	bfac      	ite	ge
 800d2ee:	1a9c      	subge	r4, r3, r2
 800d2f0:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800d2f2:	f506 73b8 	add.w	r3, r6, #368	@ 0x170
	    r = GET_BITS(s);
 800d2f6:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 800d4b8 <decode_mcu_sub+0x2e8>
	ci = cinfo->MCU_membership[blkn];
 800d2fa:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800d2fe:	ab12      	add	r3, sp, #72	@ 0x48
 800d300:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d304:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800d308:	4423      	add	r3, r4
      k = 1;
 800d30a:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800d30c:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800d310:	f8aa 3000 	strh.w	r3, [sl]
	for (; k < coef_limit; k++) {
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	429c      	cmp	r4, r3
 800d318:	db14      	blt.n	800d344 <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800d31a:	9b05      	ldr	r3, [sp, #20]
 800d31c:	429c      	cmp	r4, r3
 800d31e:	dd7f      	ble.n	800d420 <decode_mcu_sub+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d320:	3701      	adds	r7, #1
 800d322:	e78a      	b.n	800d23a <decode_mcu_sub+0x6a>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d324:	2301      	movs	r3, #1
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	4662      	mov	r2, ip
 800d32a:	4623      	mov	r3, r4
 800d32c:	4671      	mov	r1, lr
 800d32e:	a808      	add	r0, sp, #32
 800d330:	f7ff fbec 	bl	800cb0c <jpeg_huff_decode>
 800d334:	1e04      	subs	r4, r0, #0
 800d336:	f6ff af63 	blt.w	800d200 <decode_mcu_sub+0x30>
 800d33a:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d33e:	e7b4      	b.n	800d2aa <decode_mcu_sub+0xda>
 800d340:	2309      	movs	r3, #9
 800d342:	e7f0      	b.n	800d326 <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d344:	f1bc 0f07 	cmp.w	ip, #7
 800d348:	dc0d      	bgt.n	800d366 <decode_mcu_sub+0x196>
 800d34a:	2300      	movs	r3, #0
 800d34c:	4662      	mov	r2, ip
 800d34e:	4671      	mov	r1, lr
 800d350:	a808      	add	r0, sp, #32
 800d352:	f7ff fb7b 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d356:	2800      	cmp	r0, #0
 800d358:	f43f af52 	beq.w	800d200 <decode_mcu_sub+0x30>
 800d35c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d360:	f1bc 0f07 	cmp.w	ip, #7
 800d364:	dd36      	ble.n	800d3d4 <decode_mcu_sub+0x204>
 800d366:	f1ac 0308 	sub.w	r3, ip, #8
 800d36a:	fa4e f303 	asr.w	r3, lr, r3
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d374:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d378:	2a00      	cmp	r2, #0
 800d37a:	d039      	beq.n	800d3f0 <decode_mcu_sub+0x220>
 800d37c:	4443      	add	r3, r8
 800d37e:	ebac 0c02 	sub.w	ip, ip, r2
 800d382:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
	  r = s >> 4;
 800d386:	111a      	asrs	r2, r3, #4
	  if (s) {
 800d388:	f013 030f 	ands.w	r3, r3, #15
 800d38c:	d032      	beq.n	800d3f4 <decode_mcu_sub+0x224>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d38e:	459c      	cmp	ip, r3
	    k += r;
 800d390:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d392:	da0b      	bge.n	800d3ac <decode_mcu_sub+0x1dc>
 800d394:	4662      	mov	r2, ip
 800d396:	4671      	mov	r1, lr
 800d398:	a808      	add	r0, sp, #32
 800d39a:	9307      	str	r3, [sp, #28]
 800d39c:	f7ff fb56 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	f43f af2d 	beq.w	800d200 <decode_mcu_sub+0x30>
 800d3a6:	9b07      	ldr	r3, [sp, #28]
 800d3a8:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	    r = GET_BITS(s);
 800d3ac:	ebac 0c03 	sub.w	ip, ip, r3
 800d3b0:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800d3b4:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800d3b6:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800d3ba:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
	    r = GET_BITS(s);
 800d3be:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800d3c0:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800d3c2:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800d3c4:	bfa8      	it	ge
 800d3c6:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800d3c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d3cc:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800d3d0:	3401      	adds	r4, #1
 800d3d2:	e79f      	b.n	800d314 <decode_mcu_sub+0x144>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	4662      	mov	r2, ip
 800d3da:	4643      	mov	r3, r8
 800d3dc:	4671      	mov	r1, lr
 800d3de:	a808      	add	r0, sp, #32
 800d3e0:	f7ff fb94 	bl	800cb0c <jpeg_huff_decode>
 800d3e4:	1e03      	subs	r3, r0, #0
 800d3e6:	f6ff af0b 	blt.w	800d200 <decode_mcu_sub+0x30>
 800d3ea:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d3ee:	e7ca      	b.n	800d386 <decode_mcu_sub+0x1b6>
 800d3f0:	2309      	movs	r3, #9
 800d3f2:	e7f0      	b.n	800d3d6 <decode_mcu_sub+0x206>
	    if (r != 15)
 800d3f4:	2a0f      	cmp	r2, #15
 800d3f6:	d193      	bne.n	800d320 <decode_mcu_sub+0x150>
	    k += 15;
 800d3f8:	340f      	adds	r4, #15
 800d3fa:	e7e9      	b.n	800d3d0 <decode_mcu_sub+0x200>
	if (s) {
 800d3fc:	b174      	cbz	r4, 800d41c <decode_mcu_sub+0x24c>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d3fe:	45a4      	cmp	ip, r4
 800d400:	da0a      	bge.n	800d418 <decode_mcu_sub+0x248>
 800d402:	4623      	mov	r3, r4
 800d404:	4662      	mov	r2, ip
 800d406:	4671      	mov	r1, lr
 800d408:	a808      	add	r0, sp, #32
 800d40a:	f7ff fb1f 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d40e:	2800      	cmp	r0, #0
 800d410:	f43f aef6 	beq.w	800d200 <decode_mcu_sub+0x30>
 800d414:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	  DROP_BITS(s);
 800d418:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800d41c:	2401      	movs	r4, #1
 800d41e:	e77c      	b.n	800d31a <decode_mcu_sub+0x14a>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d420:	f1bc 0f07 	cmp.w	ip, #7
 800d424:	dc0d      	bgt.n	800d442 <decode_mcu_sub+0x272>
 800d426:	2300      	movs	r3, #0
 800d428:	4662      	mov	r2, ip
 800d42a:	4671      	mov	r1, lr
 800d42c:	a808      	add	r0, sp, #32
 800d42e:	f7ff fb0d 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d432:	2800      	cmp	r0, #0
 800d434:	f43f aee4 	beq.w	800d200 <decode_mcu_sub+0x30>
 800d438:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d43c:	f1bc 0f07 	cmp.w	ip, #7
 800d440:	dd25      	ble.n	800d48e <decode_mcu_sub+0x2be>
 800d442:	f1ac 0308 	sub.w	r3, ip, #8
 800d446:	fa4e f303 	asr.w	r3, lr, r3
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d450:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d454:	b34a      	cbz	r2, 800d4aa <decode_mcu_sub+0x2da>
 800d456:	4443      	add	r3, r8
 800d458:	ebac 0c02 	sub.w	ip, ip, r2
 800d45c:	f893 0490 	ldrb.w	r0, [r3, #1168]	@ 0x490
	if (s) {
 800d460:	f010 0a0f 	ands.w	sl, r0, #15
	r = s >> 4;
 800d464:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d468:	d021      	beq.n	800d4ae <decode_mcu_sub+0x2de>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d46a:	45d4      	cmp	ip, sl
	  k += r;
 800d46c:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d46e:	da0a      	bge.n	800d486 <decode_mcu_sub+0x2b6>
 800d470:	4653      	mov	r3, sl
 800d472:	4662      	mov	r2, ip
 800d474:	4671      	mov	r1, lr
 800d476:	a808      	add	r0, sp, #32
 800d478:	f7ff fae8 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	f43f aebf 	beq.w	800d200 <decode_mcu_sub+0x30>
 800d482:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
	  DROP_BITS(s);
 800d486:	ebac 0c0a 	sub.w	ip, ip, sl
      for (; k <= Se; k++) {
 800d48a:	3401      	adds	r4, #1
 800d48c:	e745      	b.n	800d31a <decode_mcu_sub+0x14a>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d48e:	2301      	movs	r3, #1
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	4662      	mov	r2, ip
 800d494:	4643      	mov	r3, r8
 800d496:	4671      	mov	r1, lr
 800d498:	a808      	add	r0, sp, #32
 800d49a:	f7ff fb37 	bl	800cb0c <jpeg_huff_decode>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f6ff aeae 	blt.w	800d200 <decode_mcu_sub+0x30>
 800d4a4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	@ 0x28
 800d4a8:	e7da      	b.n	800d460 <decode_mcu_sub+0x290>
 800d4aa:	2309      	movs	r3, #9
 800d4ac:	e7f0      	b.n	800d490 <decode_mcu_sub+0x2c0>
	  if (r != 15)
 800d4ae:	2b0f      	cmp	r3, #15
 800d4b0:	f47f af36 	bne.w	800d320 <decode_mcu_sub+0x150>
	  k += 15;
 800d4b4:	340f      	adds	r4, #15
 800d4b6:	e7e8      	b.n	800d48a <decode_mcu_sub+0x2ba>
 800d4b8:	0802d680 	.word	0x0802d680

0800d4bc <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d4c0:	f8d0 3118 	ldr.w	r3, [r0, #280]	@ 0x118
{
 800d4c4:	b091      	sub	sp, #68	@ 0x44
 800d4c6:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d4c8:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
{
 800d4cc:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800d4ce:	b933      	cbnz	r3, 800d4de <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d4d0:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 800d4d2:	b17f      	cbz	r7, 800d4f4 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d4d4:	6aab      	ldr	r3, [r5, #40]	@ 0x28

  return TRUE;
 800d4d6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	62ab      	str	r3, [r5, #40]	@ 0x28
  return TRUE;
 800d4dc:	e007      	b.n	800d4ee <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800d4de:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f5      	bne.n	800d4d0 <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800d4e4:	f7ff fb5e 	bl	800cba4 <process_restart>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d1f1      	bne.n	800d4d0 <decode_mcu+0x14>
	return FALSE;
 800d4ec:	2000      	movs	r0, #0
}
 800d4ee:	b011      	add	sp, #68	@ 0x44
 800d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d4f4:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800d4f6:	f105 0810 	add.w	r8, r5, #16
 800d4fa:	ac0b      	add	r4, sp, #44	@ 0x2c
 800d4fc:	f105 095c 	add.w	r9, r5, #92	@ 0x5c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	9206      	str	r2, [sp, #24]
 800d506:	9307      	str	r3, [sp, #28]
 800d508:	960a      	str	r6, [sp, #40]	@ 0x28
    ASSIGN_STATE(state, entropy->saved);
 800d50a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d50e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d514:	f8d8 3000 	ldr.w	r3, [r8]
 800d518:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d51a:	f8d6 316c 	ldr.w	r3, [r6, #364]	@ 0x16c
 800d51e:	42bb      	cmp	r3, r7
 800d520:	dc0e      	bgt.n	800d540 <decode_mcu+0x84>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d522:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d524:	ae0b      	add	r6, sp, #44	@ 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d526:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d528:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	9a07      	ldr	r2, [sp, #28]
 800d530:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d532:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d534:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d53a:	6833      	ldr	r3, [r6, #0]
 800d53c:	6023      	str	r3, [r4, #0]
 800d53e:	e7c9      	b.n	800d4d4 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800d540:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d542:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800d546:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800d54a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d54e:	9302      	str	r3, [sp, #8]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d550:	dc0c      	bgt.n	800d56c <decode_mcu+0xb0>
 800d552:	2300      	movs	r3, #0
 800d554:	4662      	mov	r2, ip
 800d556:	4671      	mov	r1, lr
 800d558:	a806      	add	r0, sp, #24
 800d55a:	f7ff fa77 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d0c4      	beq.n	800d4ec <decode_mcu+0x30>
 800d562:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d566:	f1bc 0f07 	cmp.w	ip, #7
 800d56a:	dd4d      	ble.n	800d608 <decode_mcu+0x14c>
 800d56c:	f1ac 0308 	sub.w	r3, ip, #8
 800d570:	fa4e f303 	asr.w	r3, lr, r3
 800d574:	b2db      	uxtb	r3, r3
 800d576:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d57a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d57e:	2a00      	cmp	r2, #0
 800d580:	d050      	beq.n	800d624 <decode_mcu+0x168>
 800d582:	4423      	add	r3, r4
 800d584:	ebac 0c02 	sub.w	ip, ip, r2
 800d588:	f893 4490 	ldrb.w	r4, [r3, #1168]	@ 0x490
      coef_limit = entropy->coef_limit[blkn];
 800d58c:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800d590:	f8d9 8028 	ldr.w	r8, [r9, #40]	@ 0x28
      coef_limit = entropy->coef_limit[blkn];
 800d594:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 80a2 	beq.w	800d6e0 <decode_mcu+0x224>
	if (s) {
 800d59c:	b1d4      	cbz	r4, 800d5d4 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d59e:	45a4      	cmp	ip, r4
 800d5a0:	da09      	bge.n	800d5b6 <decode_mcu+0xfa>
 800d5a2:	4623      	mov	r3, r4
 800d5a4:	4662      	mov	r2, ip
 800d5a6:	4671      	mov	r1, lr
 800d5a8:	a806      	add	r0, sp, #24
 800d5aa:	f7ff fa4f 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d09c      	beq.n	800d4ec <decode_mcu+0x30>
 800d5b2:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800d5b6:	ebac 0c04 	sub.w	ip, ip, r4
 800d5ba:	4978      	ldr	r1, [pc, #480]	@ (800d79c <decode_mcu+0x2e0>)
 800d5bc:	fa4e f30c 	asr.w	r3, lr, ip
 800d5c0:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d5c4:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d5c6:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800d5c8:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800d5cc:	4299      	cmp	r1, r3
 800d5ce:	bfac      	ite	ge
 800d5d0:	1a9c      	subge	r4, r3, r2
 800d5d2:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800d5d4:	f506 73b8 	add.w	r3, r6, #368	@ 0x170
	    r = GET_BITS(s);
 800d5d8:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 800d79c <decode_mcu+0x2e0>
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800d5dc:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 800d7a0 <decode_mcu+0x2e4>
	ci = cinfo->MCU_membership[blkn];
 800d5e0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800d5e4:	ab10      	add	r3, sp, #64	@ 0x40
 800d5e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d5ea:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800d5ee:	4423      	add	r3, r4
      k = 1;
 800d5f0:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800d5f2:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800d5f6:	9a02      	ldr	r2, [sp, #8]
 800d5f8:	8013      	strh	r3, [r2, #0]
	for (; k < coef_limit; k++) {
 800d5fa:	9b03      	ldr	r3, [sp, #12]
 800d5fc:	429c      	cmp	r4, r3
 800d5fe:	db13      	blt.n	800d628 <decode_mcu+0x16c>
      for (; k < DCTSIZE2; k++) {
 800d600:	2c3f      	cmp	r4, #63	@ 0x3f
 800d602:	dd7f      	ble.n	800d704 <decode_mcu+0x248>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d604:	3701      	adds	r7, #1
 800d606:	e788      	b.n	800d51a <decode_mcu+0x5e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d608:	2301      	movs	r3, #1
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	4662      	mov	r2, ip
 800d60e:	4623      	mov	r3, r4
 800d610:	4671      	mov	r1, lr
 800d612:	a806      	add	r0, sp, #24
 800d614:	f7ff fa7a 	bl	800cb0c <jpeg_huff_decode>
 800d618:	1e04      	subs	r4, r0, #0
 800d61a:	f6ff af67 	blt.w	800d4ec <decode_mcu+0x30>
 800d61e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d622:	e7b3      	b.n	800d58c <decode_mcu+0xd0>
 800d624:	2309      	movs	r3, #9
 800d626:	e7f0      	b.n	800d60a <decode_mcu+0x14e>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d628:	f1bc 0f07 	cmp.w	ip, #7
 800d62c:	dc0d      	bgt.n	800d64a <decode_mcu+0x18e>
 800d62e:	2300      	movs	r3, #0
 800d630:	4662      	mov	r2, ip
 800d632:	4671      	mov	r1, lr
 800d634:	a806      	add	r0, sp, #24
 800d636:	f7ff fa09 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	f43f af56 	beq.w	800d4ec <decode_mcu+0x30>
 800d640:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d644:	f1bc 0f07 	cmp.w	ip, #7
 800d648:	dd36      	ble.n	800d6b8 <decode_mcu+0x1fc>
 800d64a:	f1ac 0308 	sub.w	r3, ip, #8
 800d64e:	fa4e f303 	asr.w	r3, lr, r3
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d658:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d65c:	2a00      	cmp	r2, #0
 800d65e:	d039      	beq.n	800d6d4 <decode_mcu+0x218>
 800d660:	4443      	add	r3, r8
 800d662:	ebac 0c02 	sub.w	ip, ip, r2
 800d666:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
	  r = s >> 4;
 800d66a:	111a      	asrs	r2, r3, #4
	  if (s) {
 800d66c:	f013 030f 	ands.w	r3, r3, #15
 800d670:	d032      	beq.n	800d6d8 <decode_mcu+0x21c>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d672:	459c      	cmp	ip, r3
	    k += r;
 800d674:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d676:	da0b      	bge.n	800d690 <decode_mcu+0x1d4>
 800d678:	4662      	mov	r2, ip
 800d67a:	4671      	mov	r1, lr
 800d67c:	a806      	add	r0, sp, #24
 800d67e:	9305      	str	r3, [sp, #20]
 800d680:	f7ff f9e4 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d684:	2800      	cmp	r0, #0
 800d686:	f43f af31 	beq.w	800d4ec <decode_mcu+0x30>
 800d68a:	9b05      	ldr	r3, [sp, #20]
 800d68c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800d690:	ebac 0c03 	sub.w	ip, ip, r3
 800d694:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800d698:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800d69a:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800d69e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800d6a2:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800d6a4:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800d6a6:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800d6aa:	bfa8      	it	ge
 800d6ac:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800d6ae:	9902      	ldr	r1, [sp, #8]
 800d6b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800d6b4:	3401      	adds	r4, #1
 800d6b6:	e7a0      	b.n	800d5fa <decode_mcu+0x13e>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4662      	mov	r2, ip
 800d6be:	4643      	mov	r3, r8
 800d6c0:	4671      	mov	r1, lr
 800d6c2:	a806      	add	r0, sp, #24
 800d6c4:	f7ff fa22 	bl	800cb0c <jpeg_huff_decode>
 800d6c8:	1e03      	subs	r3, r0, #0
 800d6ca:	f6ff af0f 	blt.w	800d4ec <decode_mcu+0x30>
 800d6ce:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d6d2:	e7ca      	b.n	800d66a <decode_mcu+0x1ae>
 800d6d4:	2309      	movs	r3, #9
 800d6d6:	e7f0      	b.n	800d6ba <decode_mcu+0x1fe>
	    if (r != 15)
 800d6d8:	2a0f      	cmp	r2, #15
 800d6da:	d193      	bne.n	800d604 <decode_mcu+0x148>
	    k += 15;
 800d6dc:	340f      	adds	r4, #15
 800d6de:	e7e9      	b.n	800d6b4 <decode_mcu+0x1f8>
	if (s) {
 800d6e0:	b174      	cbz	r4, 800d700 <decode_mcu+0x244>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d6e2:	45a4      	cmp	ip, r4
 800d6e4:	da0a      	bge.n	800d6fc <decode_mcu+0x240>
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	4662      	mov	r2, ip
 800d6ea:	4671      	mov	r1, lr
 800d6ec:	a806      	add	r0, sp, #24
 800d6ee:	f7ff f9ad 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f43f aefa 	beq.w	800d4ec <decode_mcu+0x30>
 800d6f8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800d6fc:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800d700:	2401      	movs	r4, #1
 800d702:	e77d      	b.n	800d600 <decode_mcu+0x144>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d704:	f1bc 0f07 	cmp.w	ip, #7
 800d708:	dc0d      	bgt.n	800d726 <decode_mcu+0x26a>
 800d70a:	2300      	movs	r3, #0
 800d70c:	4662      	mov	r2, ip
 800d70e:	4671      	mov	r1, lr
 800d710:	a806      	add	r0, sp, #24
 800d712:	f7ff f99b 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d716:	2800      	cmp	r0, #0
 800d718:	f43f aee8 	beq.w	800d4ec <decode_mcu+0x30>
 800d71c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d720:	f1bc 0f07 	cmp.w	ip, #7
 800d724:	dd25      	ble.n	800d772 <decode_mcu+0x2b6>
 800d726:	f1ac 0308 	sub.w	r3, ip, #8
 800d72a:	fa4e f303 	asr.w	r3, lr, r3
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800d734:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d738:	b34a      	cbz	r2, 800d78e <decode_mcu+0x2d2>
 800d73a:	4443      	add	r3, r8
 800d73c:	ebac 0c02 	sub.w	ip, ip, r2
 800d740:	f893 0490 	ldrb.w	r0, [r3, #1168]	@ 0x490
	if (s) {
 800d744:	f010 0a0f 	ands.w	sl, r0, #15
	r = s >> 4;
 800d748:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d74c:	d021      	beq.n	800d792 <decode_mcu+0x2d6>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d74e:	45d4      	cmp	ip, sl
	  k += r;
 800d750:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d752:	da0a      	bge.n	800d76a <decode_mcu+0x2ae>
 800d754:	4653      	mov	r3, sl
 800d756:	4662      	mov	r2, ip
 800d758:	4671      	mov	r1, lr
 800d75a:	a806      	add	r0, sp, #24
 800d75c:	f7ff f976 	bl	800ca4c <jpeg_fill_bit_buffer>
 800d760:	2800      	cmp	r0, #0
 800d762:	f43f aec3 	beq.w	800d4ec <decode_mcu+0x30>
 800d766:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800d76a:	ebac 0c0a 	sub.w	ip, ip, sl
      for (; k < DCTSIZE2; k++) {
 800d76e:	3401      	adds	r4, #1
 800d770:	e746      	b.n	800d600 <decode_mcu+0x144>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d772:	2301      	movs	r3, #1
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	4662      	mov	r2, ip
 800d778:	4643      	mov	r3, r8
 800d77a:	4671      	mov	r1, lr
 800d77c:	a806      	add	r0, sp, #24
 800d77e:	f7ff f9c5 	bl	800cb0c <jpeg_huff_decode>
 800d782:	2800      	cmp	r0, #0
 800d784:	f6ff aeb2 	blt.w	800d4ec <decode_mcu+0x30>
 800d788:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d78c:	e7da      	b.n	800d744 <decode_mcu+0x288>
 800d78e:	2309      	movs	r3, #9
 800d790:	e7f0      	b.n	800d774 <decode_mcu+0x2b8>
	  if (r != 15)
 800d792:	2b0f      	cmp	r3, #15
 800d794:	f47f af36 	bne.w	800d604 <decode_mcu+0x148>
	  k += 15;
 800d798:	340f      	adds	r4, #15
 800d79a:	e7e8      	b.n	800d76e <decode_mcu+0x2b2>
 800d79c:	0802d680 	.word	0x0802d680
 800d7a0:	0802f304 	.word	0x0802f304

0800d7a4 <jpeg_make_d_derived_tbl>:
{
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800d7a8:	2a03      	cmp	r2, #3
{
 800d7aa:	f2ad 5d24 	subw	sp, sp, #1316	@ 0x524
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4616      	mov	r6, r2
 800d7b2:	461f      	mov	r7, r3
 800d7b4:	9102      	str	r1, [sp, #8]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800d7b6:	d905      	bls.n	800d7c4 <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800d7b8:	6803      	ldr	r3, [r0, #0]
 800d7ba:	2234      	movs	r2, #52	@ 0x34
 800d7bc:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d042      	beq.n	800d850 <jpeg_make_d_derived_tbl+0xac>
 800d7ca:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d7ce:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
  if (htbl == NULL)
 800d7d2:	b935      	cbnz	r5, 800d7e2 <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	2234      	movs	r2, #52	@ 0x34
 800d7d8:	4620      	mov	r0, r4
 800d7da:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4798      	blx	r3
  if (*pdtbl == NULL)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	b93b      	cbnz	r3, 800d7f6 <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d7e6:	6863      	ldr	r3, [r4, #4]
 800d7e8:	f44f 62b2 	mov.w	r2, #1424	@ 0x590
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800d7f4:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800d7f6:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800d7fa:	2601      	movs	r6, #1
  p = 0;
 800d7fc:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d7fe:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800d802:	f8c8 508c 	str.w	r5, [r8, #140]	@ 0x8c
    i = (int) htbl->bits[l];
 800d806:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800d80a:	46ba      	mov	sl, r7
 800d80c:	444f      	add	r7, r9
 800d80e:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
 800d812:	dd05      	ble.n	800d820 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	4620      	mov	r0, r4
 800d818:	f8c3 b014 	str.w	fp, [r3, #20]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4798      	blx	r3
 800d820:	f10a 0318 	add.w	r3, sl, #24
 800d824:	446b      	add	r3, sp
    while (i--)
 800d826:	f1b9 0901 	subs.w	r9, r9, #1
 800d82a:	d216      	bcs.n	800d85a <jpeg_make_d_derived_tbl+0xb6>
  for (l = 1; l <= 16; l++) {
 800d82c:	3601      	adds	r6, #1
 800d82e:	2e11      	cmp	r6, #17
 800d830:	d1e9      	bne.n	800d806 <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800d832:	2200      	movs	r2, #0
 800d834:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800d836:	f50d 7a8e 	add.w	sl, sp, #284	@ 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800d83a:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800d83e:	55da      	strb	r2, [r3, r7]
  p = 0;
 800d840:	4616      	mov	r6, r2
  si = huffsize[0];
 800d842:	f89d 9018 	ldrb.w	r9, [sp, #24]
  while (huffsize[p]) {
 800d846:	ab06      	add	r3, sp, #24
 800d848:	5d9b      	ldrb	r3, [r3, r6]
 800d84a:	b30b      	cbz	r3, 800d890 <jpeg_make_d_derived_tbl+0xec>
 800d84c:	1b92      	subs	r2, r2, r6
 800d84e:	e00a      	b.n	800d866 <jpeg_make_d_derived_tbl+0xc2>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800d850:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d854:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 800d858:	e7bb      	b.n	800d7d2 <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800d85a:	f803 6b01 	strb.w	r6, [r3], #1
 800d85e:	e7e2      	b.n	800d826 <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800d860:	f84a 3026 	str.w	r3, [sl, r6, lsl #2]
      code++;
 800d864:	3601      	adds	r6, #1
    while (((int) huffsize[p]) == si) {
 800d866:	a906      	add	r1, sp, #24
 800d868:	18b3      	adds	r3, r6, r2
 800d86a:	5d89      	ldrb	r1, [r1, r6]
 800d86c:	4549      	cmp	r1, r9
 800d86e:	d0f7      	beq.n	800d860 <jpeg_make_d_derived_tbl+0xbc>
    if (((INT32) code) >= (((INT32) 1) << si))
 800d870:	fa0b f209 	lsl.w	r2, fp, r9
 800d874:	429a      	cmp	r2, r3
 800d876:	dc07      	bgt.n	800d888 <jpeg_make_d_derived_tbl+0xe4>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d878:	6822      	ldr	r2, [r4, #0]
 800d87a:	2109      	movs	r1, #9
 800d87c:	4620      	mov	r0, r4
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	6151      	str	r1, [r2, #20]
 800d882:	6812      	ldr	r2, [r2, #0]
 800d884:	4790      	blx	r2
 800d886:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800d888:	005a      	lsls	r2, r3, #1
    si++;
 800d88a:	f109 0901 	add.w	r9, r9, #1
 800d88e:	e7da      	b.n	800d846 <jpeg_make_d_derived_tbl+0xa2>
 800d890:	f105 0210 	add.w	r2, r5, #16
 800d894:	4628      	mov	r0, r5
 800d896:	4646      	mov	r6, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d898:	f50d 7c8e 	add.w	ip, sp, #284	@ 0x11c
 800d89c:	9201      	str	r2, [sp, #4]
    if (htbl->bits[l]) {
 800d89e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800d8a2:	b349      	cbz	r1, 800d8f8 <jpeg_make_d_derived_tbl+0x154>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d8a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d8a8:	1a9a      	subs	r2, r3, r2
      p += htbl->bits[l];
 800d8aa:	440b      	add	r3, r1
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d8ac:	64f2      	str	r2, [r6, #76]	@ 0x4c
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800d8ae:	1e5a      	subs	r2, r3, #1
 800d8b0:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800d8b4:	f846 2f04 	str.w	r2, [r6, #4]!
  for (l = 1; l <= 16; l++) {
 800d8b8:	9a01      	ldr	r2, [sp, #4]
 800d8ba:	4290      	cmp	r0, r2
 800d8bc:	d1ef      	bne.n	800d89e <jpeg_make_d_derived_tbl+0xfa>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800d8be:	4b2d      	ldr	r3, [pc, #180]	@ (800d974 <jpeg_make_d_derived_tbl+0x1d0>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800d8c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	f108 0090 	add.w	r0, r8, #144	@ 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800d8ca:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800d8ce:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800d8d0:	f01c fbee 	bl	802a0b0 <memset>
  p = 0;
 800d8d4:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d8d8:	ab47      	add	r3, sp, #284	@ 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d8da:	5daa      	ldrb	r2, [r5, r6]
 800d8dc:	f1c6 0b08 	rsb	fp, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d8e0:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d8e2:	9200      	str	r2, [sp, #0]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	9900      	ldr	r1, [sp, #0]
 800d8e8:	fa02 f20b 	lsl.w	r2, r2, fp
 800d8ec:	4451      	add	r1, sl
 800d8ee:	9103      	str	r1, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d8f0:	f105 0111 	add.w	r1, r5, #17
 800d8f4:	9104      	str	r1, [sp, #16]
 800d8f6:	e01f      	b.n	800d938 <jpeg_make_d_derived_tbl+0x194>
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fc:	e7da      	b.n	800d8b4 <jpeg_make_d_derived_tbl+0x110>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d8fe:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d902:	4696      	mov	lr, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d904:	9904      	ldr	r1, [sp, #16]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d906:	fa00 f00b 	lsl.w	r0, r0, fp
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d90a:	f811 1009 	ldrb.w	r1, [r1, r9]
 800d90e:	f100 4c80 	add.w	ip, r0, #1073741824	@ 0x40000000
 800d912:	f10c 0c23 	add.w	ip, ip, #35	@ 0x23
 800d916:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d91a:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800d91e:	f84c 6f04 	str.w	r6, [ip, #4]!
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d922:	d1fa      	bne.n	800d91a <jpeg_make_d_derived_tbl+0x176>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d924:	f500 6092 	add.w	r0, r0, #1168	@ 0x490
 800d928:	9205      	str	r2, [sp, #20]
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d92a:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d92e:	4440      	add	r0, r8
 800d930:	f01c fbbe 	bl	802a0b0 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d934:	ab47      	add	r3, sp, #284	@ 0x11c
 800d936:	9a05      	ldr	r2, [sp, #20]
 800d938:	9903      	ldr	r1, [sp, #12]
 800d93a:	4589      	cmp	r9, r1
 800d93c:	d1df      	bne.n	800d8fe <jpeg_make_d_derived_tbl+0x15a>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800d93e:	3601      	adds	r6, #1
 800d940:	9a00      	ldr	r2, [sp, #0]
 800d942:	2e09      	cmp	r6, #9
 800d944:	4492      	add	sl, r2
 800d946:	d1c8      	bne.n	800d8da <jpeg_make_d_derived_tbl+0x136>
  if (isDC) {
 800d948:	9b02      	ldr	r3, [sp, #8]
 800d94a:	b123      	cbz	r3, 800d956 <jpeg_make_d_derived_tbl+0x1b2>
 800d94c:	9b01      	ldr	r3, [sp, #4]
 800d94e:	3510      	adds	r5, #16
 800d950:	441f      	add	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800d952:	42af      	cmp	r7, r5
 800d954:	d103      	bne.n	800d95e <jpeg_make_d_derived_tbl+0x1ba>
}
 800d956:	f20d 5d24 	addw	sp, sp, #1316	@ 0x524
 800d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sym < 0 || sym > 15)
 800d95e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800d962:	2b0f      	cmp	r3, #15
 800d964:	d9f5      	bls.n	800d952 <jpeg_make_d_derived_tbl+0x1ae>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	4620      	mov	r0, r4
 800d96a:	615e      	str	r6, [r3, #20]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800d970:	e7ef      	b.n	800d952 <jpeg_make_d_derived_tbl+0x1ae>
 800d972:	bf00      	nop
 800d974:	000fffff 	.word	0x000fffff

0800d978 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800d978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800d97c:	f8d0 70e0 	ldr.w	r7, [r0, #224]	@ 0xe0
{
 800d980:	4604      	mov	r4, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d982:	f8d0 51d0 	ldr.w	r5, [r0, #464]	@ 0x1d0
  if (cinfo->progressive_mode) {
 800d986:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800d98a:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
  if (cinfo->progressive_mode) {
 800d98e:	2f00      	cmp	r7, #0
 800d990:	f000 80ad 	beq.w	800daee <start_pass_huff_decoder+0x176>
    if (cinfo->Ss == 0) {
 800d994:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	@ 0x19c
 800d998:	f8d0 01a4 	ldr.w	r0, [r0, #420]	@ 0x1a4
 800d99c:	b962      	cbnz	r2, 800d9b8 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800d99e:	b1a9      	cbz	r1, 800d9cc <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	f04f 0c11 	mov.w	ip, #17
 800d9a6:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800d9aa:	e9c3 c205 	strd	ip, r2, [r3, #20]
 800d9ae:	6258      	str	r0, [r3, #36]	@ 0x24
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4798      	blx	r3
 800d9b6:	e00f      	b.n	800d9d8 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800d9b8:	428a      	cmp	r2, r1
 800d9ba:	dcf1      	bgt.n	800d9a0 <start_pass_huff_decoder+0x28>
 800d9bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800d9c0:	428b      	cmp	r3, r1
 800d9c2:	dbed      	blt.n	800d9a0 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800d9c4:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d1e9      	bne.n	800d9a0 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800d9cc:	b117      	cbz	r7, 800d9d4 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800d9ce:	1e7b      	subs	r3, r7, #1
 800d9d0:	4283      	cmp	r3, r0
 800d9d2:	d1e5      	bne.n	800d9a0 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800d9d4:	280d      	cmp	r0, #13
 800d9d6:	dce3      	bgt.n	800d9a0 <start_pass_huff_decoder+0x28>
{
 800d9d8:	46b3      	mov	fp, r6
 800d9da:	f04f 0a00 	mov.w	sl, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d9de:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800d9e2:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d9e6:	4553      	cmp	r3, sl
 800d9e8:	dc1d      	bgt.n	800da26 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800d9ea:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d155      	bne.n	800da9e <start_pass_huff_decoder+0x126>
      if (cinfo->Ss == 0)
 800d9f2:	4bbc      	ldr	r3, [pc, #752]	@ (800dce4 <start_pass_huff_decoder+0x36c>)
 800d9f4:	49bc      	ldr	r1, [pc, #752]	@ (800dce8 <start_pass_huff_decoder+0x370>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800d9f6:	f04f 0800 	mov.w	r8, #0
    } else {
      if (cinfo->Ss == 0)
 800d9fa:	2a00      	cmp	r2, #0
 800d9fc:	bf18      	it	ne
 800d9fe:	460b      	movne	r3, r1
 800da00:	f105 0910 	add.w	r9, r5, #16
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800da04:	46c2      	mov	sl, r8
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800da06:	606b      	str	r3, [r5, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800da08:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800da0c:	4543      	cmp	r3, r8
 800da0e:	dc49      	bgt.n	800daa4 <start_pass_huff_decoder+0x12c>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	612b      	str	r3, [r5, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800da14:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800da16:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->insufficient_data = FALSE;
 800da1a:	626b      	str	r3, [r5, #36]	@ 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800da1c:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800da20:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 800da22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800da26:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800da2a:	f8d3 9004 	ldr.w	r9, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800da2e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800da32:	ea4f 2109 	mov.w	r1, r9, lsl #8
 800da36:	eb03 2809 	add.w	r8, r3, r9, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800da3a:	b16a      	cbz	r2, 800da58 <start_pass_huff_decoder+0xe0>
 800da3c:	585b      	ldr	r3, [r3, r1]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	da0a      	bge.n	800da58 <start_pass_huff_decoder+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	2276      	movs	r2, #118	@ 0x76
 800da46:	f04f 31ff 	mov.w	r1, #4294967295
 800da4a:	4620      	mov	r0, r4
 800da4c:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800da50:	2200      	movs	r2, #0
 800da52:	61da      	str	r2, [r3, #28]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800da58:	f8d4 7198 	ldr.w	r7, [r4, #408]	@ 0x198
 800da5c:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800da60:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800da64:	42bb      	cmp	r3, r7
 800da66:	da02      	bge.n	800da6e <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800da68:	f10a 0a01 	add.w	sl, sl, #1
 800da6c:	e7b7      	b.n	800d9de <start_pass_huff_decoder+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800da6e:	f8d8 3000 	ldr.w	r3, [r8]
	if (cinfo->Ah != expected)
 800da72:	f8d4 21a0 	ldr.w	r2, [r4, #416]	@ 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800da76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d009      	beq.n	800da92 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	2276      	movs	r2, #118	@ 0x76
 800da82:	f04f 31ff 	mov.w	r1, #4294967295
 800da86:	4620      	mov	r0, r4
 800da88:	61df      	str	r7, [r3, #28]
 800da8a:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800da92:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800da96:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800da98:	f848 3b04 	str.w	r3, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800da9c:	e7e0      	b.n	800da60 <start_pass_huff_decoder+0xe8>
      if (cinfo->Ss == 0)
 800da9e:	4b93      	ldr	r3, [pc, #588]	@ (800dcec <start_pass_huff_decoder+0x374>)
 800daa0:	4993      	ldr	r1, [pc, #588]	@ (800dcf0 <start_pass_huff_decoder+0x378>)
 800daa2:	e7a8      	b.n	800d9f6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800daa4:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
      compptr = cinfo->cur_comp_info[ci];
 800daa8:	f856 3f04 	ldr.w	r3, [r6, #4]!
      if (cinfo->Ss == 0) {
 800daac:	b982      	cbnz	r2, 800dad0 <start_pass_huff_decoder+0x158>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800daae:	f8d4 21a0 	ldr.w	r2, [r4, #416]	@ 0x1a0
 800dab2:	b942      	cbnz	r2, 800dac6 <start_pass_huff_decoder+0x14e>
	  tbl = compptr->dc_tbl_no;
 800dab4:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800dab6:	2101      	movs	r1, #1
 800dab8:	4620      	mov	r0, r4
 800daba:	f102 030b 	add.w	r3, r2, #11
 800dabe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dac2:	f7ff fe6f 	bl	800d7a4 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dac6:	f108 0801 	add.w	r8, r8, #1
      entropy->saved.last_dc_val[ci] = 0;
 800daca:	f849 af04 	str.w	sl, [r9, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dace:	e79b      	b.n	800da08 <start_pass_huff_decoder+0x90>
	tbl = compptr->ac_tbl_no;
 800dad0:	699f      	ldr	r7, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dad2:	2100      	movs	r1, #0
 800dad4:	4620      	mov	r0, r4
 800dad6:	f107 030b 	add.w	r3, r7, #11
 800dada:	463a      	mov	r2, r7
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800dadc:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dae0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dae4:	f7ff fe5e 	bl	800d7a4 <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800dae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daea:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800daec:	e7eb      	b.n	800dac6 <start_pass_huff_decoder+0x14e>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800daee:	b982      	cbnz	r2, 800db12 <start_pass_huff_decoder+0x19a>
 800daf0:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 800daf4:	b96b      	cbnz	r3, 800db12 <start_pass_huff_decoder+0x19a>
 800daf6:	f8d0 31a4 	ldr.w	r3, [r0, #420]	@ 0x1a4
 800dafa:	b953      	cbnz	r3, 800db12 <start_pass_huff_decoder+0x19a>
 800dafc:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
      if (cinfo->Se != 0)
 800db00:	f8d0 319c 	ldr.w	r3, [r0, #412]	@ 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800db04:	b90a      	cbnz	r2, 800db0a <start_pass_huff_decoder+0x192>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800db06:	2b3f      	cmp	r3, #63	@ 0x3f
 800db08:	dc0b      	bgt.n	800db22 <start_pass_huff_decoder+0x1aa>
 800db0a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	@ 0x1b0
 800db0e:	429a      	cmp	r2, r3
 800db10:	d007      	beq.n	800db22 <start_pass_huff_decoder+0x1aa>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	227d      	movs	r2, #125	@ 0x7d
 800db16:	f04f 31ff 	mov.w	r1, #4294967295
 800db1a:	4620      	mov	r0, r4
 800db1c:	615a      	str	r2, [r3, #20]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800db22:	f8d4 11b0 	ldr.w	r1, [r4, #432]	@ 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800db26:	f04f 0800 	mov.w	r8, #0
      entropy->pub.decode_mcu = decode_mcu_sub;
 800db2a:	4b72      	ldr	r3, [pc, #456]	@ (800dcf4 <start_pass_huff_decoder+0x37c>)
 800db2c:	f105 0910 	add.w	r9, r5, #16
 800db30:	4a71      	ldr	r2, [pc, #452]	@ (800dcf8 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800db32:	46c2      	mov	sl, r8
      entropy->pub.decode_mcu = decode_mcu_sub;
 800db34:	293f      	cmp	r1, #63	@ 0x3f
 800db36:	bf18      	it	ne
 800db38:	4613      	movne	r3, r2
 800db3a:	606b      	str	r3, [r5, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800db3c:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800db40:	4543      	cmp	r3, r8
 800db42:	dc39      	bgt.n	800dbb8 <start_pass_huff_decoder+0x240>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800db44:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
 800db48:	f105 025c 	add.w	r2, r5, #92	@ 0x5c
 800db4c:	f504 71b6 	add.w	r1, r4, #364	@ 0x16c
 800db50:	42b8      	cmp	r0, r7
 800db52:	f77f af5f 	ble.w	800da14 <start_pass_huff_decoder+0x9c>
      compptr = cinfo->cur_comp_info[ci];
 800db56:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800db5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db5e:	f8d3 6154 	ldr.w	r6, [r3, #340]	@ 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800db62:	6973      	ldr	r3, [r6, #20]
 800db64:	3310      	adds	r3, #16
 800db66:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800db6a:	f842 3f04 	str.w	r3, [r2, #4]!
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800db6e:	69b3      	ldr	r3, [r6, #24]
 800db70:	3314      	adds	r3, #20
 800db72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800db76:	6293      	str	r3, [r2, #40]	@ 0x28
      if (compptr->component_needed) {
 800db78:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d067      	beq.n	800dc4e <start_pass_huff_decoder+0x2d6>
	i = compptr->DCT_h_scaled_size;
 800db7e:	e9d6 c309 	ldrd	ip, r3, [r6, #36]	@ 0x24
	switch (cinfo->lim_Se) {
 800db82:	f8d4 61b0 	ldr.w	r6, [r4, #432]	@ 0x1b0
 800db86:	2e0f      	cmp	r6, #15
 800db88:	d077      	beq.n	800dc7a <start_pass_huff_decoder+0x302>
 800db8a:	dc33      	bgt.n	800dbf4 <start_pass_huff_decoder+0x27c>
 800db8c:	2e03      	cmp	r6, #3
 800db8e:	d04d      	beq.n	800dc2c <start_pass_huff_decoder+0x2b4>
 800db90:	2e08      	cmp	r6, #8
 800db92:	d05f      	beq.n	800dc54 <start_pass_huff_decoder+0x2dc>
 800db94:	2e00      	cmp	r6, #0
 800db96:	f000 80a3 	beq.w	800dce0 <start_pass_huff_decoder+0x368>
	  if (ci <= 0 || ci > 8) ci = 8;
 800db9a:	1e5e      	subs	r6, r3, #1
 800db9c:	2e08      	cmp	r6, #8
	  if (i <= 0 || i > 8) i = 8;
 800db9e:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800dba2:	bf28      	it	cs
 800dba4:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800dba6:	2e08      	cmp	r6, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800dba8:	4e54      	ldr	r6, [pc, #336]	@ (800dcfc <start_pass_huff_decoder+0x384>)
	  if (i <= 0 || i > 8) i = 8;
 800dbaa:	bf28      	it	cs
 800dbac:	f04f 0c08 	movcs.w	ip, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800dbb0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800dbb4:	3b09      	subs	r3, #9
 800dbb6:	e047      	b.n	800dc48 <start_pass_huff_decoder+0x2d0>
      compptr = cinfo->cur_comp_info[ci];
 800dbb8:	f856 bf04 	ldr.w	fp, [r6, #4]!
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	4620      	mov	r0, r4
      tbl = compptr->dc_tbl_no;
 800dbc0:	f8db 2014 	ldr.w	r2, [fp, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800dbc4:	f102 0310 	add.w	r3, r2, #16
 800dbc8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dbcc:	f7ff fdea 	bl	800d7a4 <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800dbd0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800dbd4:	b14b      	cbz	r3, 800dbea <start_pass_huff_decoder+0x272>
	tbl = compptr->ac_tbl_no;
 800dbd6:	f8db 2018 	ldr.w	r2, [fp, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dbda:	2100      	movs	r1, #0
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f102 0314 	add.w	r3, r2, #20
 800dbe2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dbe6:	f7ff fddd 	bl	800d7a4 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dbea:	f108 0801 	add.w	r8, r8, #1
      entropy->saved.last_dc_val[ci] = 0;
 800dbee:	f849 af04 	str.w	sl, [r9, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dbf2:	e7a3      	b.n	800db3c <start_pass_huff_decoder+0x1c4>
	switch (cinfo->lim_Se) {
 800dbf4:	2e23      	cmp	r6, #35	@ 0x23
 800dbf6:	f103 38ff 	add.w	r8, r3, #4294967295
 800dbfa:	f10c 3eff 	add.w	lr, ip, #4294967295
 800dbfe:	d04b      	beq.n	800dc98 <start_pass_huff_decoder+0x320>
 800dc00:	2e30      	cmp	r6, #48	@ 0x30
 800dc02:	d05b      	beq.n	800dcbc <start_pass_huff_decoder+0x344>
 800dc04:	2e18      	cmp	r6, #24
 800dc06:	d1c8      	bne.n	800db9a <start_pass_huff_decoder+0x222>
	  if (ci <= 0 || ci > 5) ci = 5;
 800dc08:	f1b8 0f05 	cmp.w	r8, #5
 800dc0c:	bf28      	it	cs
 800dc0e:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800dc10:	f1be 0f05 	cmp.w	lr, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800dc14:	f103 36ff 	add.w	r6, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800dc18:	bf28      	it	cs
 800dc1a:	f04f 0c05 	movcs.w	ip, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800dc1e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800dc22:	f10c 33ff 	add.w	r3, ip, #4294967295
 800dc26:	4433      	add	r3, r6
 800dc28:	4e35      	ldr	r6, [pc, #212]	@ (800dd00 <start_pass_huff_decoder+0x388>)
 800dc2a:	e00d      	b.n	800dc48 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 2) ci = 2;
 800dc2c:	1e5e      	subs	r6, r3, #1
 800dc2e:	2e02      	cmp	r6, #2
	  if (i <= 0 || i > 2) i = 2;
 800dc30:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800dc34:	bf28      	it	cs
 800dc36:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800dc38:	2e02      	cmp	r6, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800dc3a:	4e32      	ldr	r6, [pc, #200]	@ (800dd04 <start_pass_huff_decoder+0x38c>)
	  if (i <= 0 || i > 2) i = 2;
 800dc3c:	bf28      	it	cs
 800dc3e:	f04f 0c02 	movcs.w	ip, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800dc42:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800dc46:	3b03      	subs	r3, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800dc48:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800dc4c:	3301      	adds	r3, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800dc4e:	3701      	adds	r7, #1
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800dc50:	6513      	str	r3, [r2, #80]	@ 0x50
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800dc52:	e77d      	b.n	800db50 <start_pass_huff_decoder+0x1d8>
	  if (ci <= 0 || ci > 3) ci = 3;
 800dc54:	1e5e      	subs	r6, r3, #1
 800dc56:	2e03      	cmp	r6, #3
	  if (i <= 0 || i > 3) i = 3;
 800dc58:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800dc5c:	bf28      	it	cs
 800dc5e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800dc60:	2e03      	cmp	r6, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800dc62:	f103 36ff 	add.w	r6, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800dc66:	bf28      	it	cs
 800dc68:	f04f 0c03 	movcs.w	ip, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800dc6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800dc70:	f10c 33ff 	add.w	r3, ip, #4294967295
 800dc74:	4433      	add	r3, r6
 800dc76:	4e24      	ldr	r6, [pc, #144]	@ (800dd08 <start_pass_huff_decoder+0x390>)
 800dc78:	e7e6      	b.n	800dc48 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 4) ci = 4;
 800dc7a:	1e5e      	subs	r6, r3, #1
 800dc7c:	2e04      	cmp	r6, #4
	  if (i <= 0 || i > 4) i = 4;
 800dc7e:	f10c 36ff 	add.w	r6, ip, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800dc82:	bf28      	it	cs
 800dc84:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800dc86:	2e04      	cmp	r6, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800dc88:	4e20      	ldr	r6, [pc, #128]	@ (800dd0c <start_pass_huff_decoder+0x394>)
	  if (i <= 0 || i > 4) i = 4;
 800dc8a:	bf28      	it	cs
 800dc8c:	f04f 0c04 	movcs.w	ip, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800dc90:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800dc94:	3b05      	subs	r3, #5
 800dc96:	e7d7      	b.n	800dc48 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 6) ci = 6;
 800dc98:	f1b8 0f06 	cmp.w	r8, #6
 800dc9c:	bf28      	it	cs
 800dc9e:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800dca0:	f1be 0f06 	cmp.w	lr, #6
 800dca4:	bf28      	it	cs
 800dca6:	f04f 0c06 	movcs.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800dcaa:	1e5e      	subs	r6, r3, #1
 800dcac:	f10c 33ff 	add.w	r3, ip, #4294967295
 800dcb0:	f04f 0c06 	mov.w	ip, #6
 800dcb4:	fb0c 3306 	mla	r3, ip, r6, r3
 800dcb8:	4e15      	ldr	r6, [pc, #84]	@ (800dd10 <start_pass_huff_decoder+0x398>)
 800dcba:	e7c5      	b.n	800dc48 <start_pass_huff_decoder+0x2d0>
	  if (ci <= 0 || ci > 7) ci = 7;
 800dcbc:	f1b8 0f07 	cmp.w	r8, #7
 800dcc0:	bf28      	it	cs
 800dcc2:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800dcc4:	f1be 0f07 	cmp.w	lr, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800dcc8:	f103 36ff 	add.w	r6, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800dccc:	bf28      	it	cs
 800dcce:	f04f 0c07 	movcs.w	ip, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800dcd2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800dcd6:	f10c 33ff 	add.w	r3, ip, #4294967295
 800dcda:	4433      	add	r3, r6
 800dcdc:	4e0d      	ldr	r6, [pc, #52]	@ (800dd14 <start_pass_huff_decoder+0x39c>)
 800dcde:	e7b3      	b.n	800dc48 <start_pass_huff_decoder+0x2d0>
	switch (cinfo->lim_Se) {
 800dce0:	2301      	movs	r3, #1
 800dce2:	e7b4      	b.n	800dc4e <start_pass_huff_decoder+0x2d6>
 800dce4:	0800cbf1 	.word	0x0800cbf1
 800dce8:	0800cd65 	.word	0x0800cd65
 800dcec:	0800cec5 	.word	0x0800cec5
 800dcf0:	0800cf59 	.word	0x0800cf59
 800dcf4:	0800d4bd 	.word	0x0800d4bd
 800dcf8:	0800d1d1 	.word	0x0800d1d1
 800dcfc:	0802d8ec 	.word	0x0802d8ec
 800dd00:	0802d734 	.word	0x0802d734
 800dd04:	0802d6c0 	.word	0x0802d6c0
 800dd08:	0802d6d0 	.word	0x0802d6d0
 800dd0c:	0802d6f4 	.word	0x0802d6f4
 800dd10:	0802d798 	.word	0x0802d798
 800dd14:	0802d828 	.word	0x0802d828

0800dd18 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dd1a:	6843      	ldr	r3, [r0, #4]
 800dd1c:	22d8      	movs	r2, #216	@ 0xd8
 800dd1e:	2101      	movs	r1, #1
{
 800dd20:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800dd26:	4b17      	ldr	r3, [pc, #92]	@ (800dd84 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800dd28:	f8c5 01d0 	str.w	r0, [r5, #464]	@ 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dd2c:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800dd2e:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800dd30:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800dd34:	b943      	cbnz	r3, 800dd48 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800dd36:	6503      	str	r3, [r0, #80]	@ 0x50
 800dd38:	6403      	str	r3, [r0, #64]	@ 0x40
 800dd3a:	6543      	str	r3, [r0, #84]	@ 0x54
 800dd3c:	6443      	str	r3, [r0, #68]	@ 0x44
 800dd3e:	6583      	str	r3, [r0, #88]	@ 0x58
 800dd40:	6483      	str	r3, [r0, #72]	@ 0x48
 800dd42:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800dd44:	64c3      	str	r3, [r0, #76]	@ 0x4c
    }
  }
}
 800dd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dd48:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	686b      	ldr	r3, [r5, #4]
 800dd4e:	4628      	mov	r0, r5
 800dd50:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800dd52:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4798      	blx	r3
 800dd58:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800dd5a:	f8c5 00a0 	str.w	r0, [r5, #160]	@ 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800dd5e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800dd60:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800dd64:	42b3      	cmp	r3, r6
 800dd66:	dd06      	ble.n	800dd76 <jinit_huff_decoder+0x5e>
	*coef_bit_ptr++ = -1;
 800dd68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dd6c:	21ff      	movs	r1, #255	@ 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800dd6e:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800dd70:	f01c f99e 	bl	802a0b0 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800dd74:	e7f3      	b.n	800dd5e <jinit_huff_decoder+0x46>
      entropy->derived_tbls[i] = NULL;
 800dd76:	2300      	movs	r3, #0
 800dd78:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 800dd7c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
}
 800dd80:	e7e1      	b.n	800dd46 <jinit_huff_decoder+0x2e>
 800dd82:	bf00      	nop
 800dd84:	0800d979 	.word	0x0800d979

0800dd88 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800dd88:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
 800dd8c:	4a01      	ldr	r2, [pc, #4]	@ (800dd94 <finish_input_pass+0xc>)
 800dd8e:	601a      	str	r2, [r3, #0]
}
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	0800df51 	.word	0x0800df51

0800dd98 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800dd98:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800dd9a:	4a0a      	ldr	r2, [pc, #40]	@ (800ddc4 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800dd9c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800dd9e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	@ 0x1c8
{
 800dda2:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800dda4:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800dda6:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800dda8:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800ddac:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800ddae:	6803      	ldr	r3, [r0, #0]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800ddb4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800ddb8:	4620      	mov	r0, r4
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800ddbe:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
}
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	0800df51 	.word	0x0800df51

0800ddc8 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800ddc8:	f8d0 2150 	ldr.w	r2, [r0, #336]	@ 0x150
 800ddcc:	2a01      	cmp	r2, #1
{
 800ddce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
  if (cinfo->comps_in_scan == 1) {
 800ddd8:	d135      	bne.n	800de46 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800ddda:	f8d0 3154 	ldr.w	r3, [r0, #340]	@ 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800ddde:	69d9      	ldr	r1, [r3, #28]
 800dde0:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800dde4:	6a19      	ldr	r1, [r3, #32]
 800dde6:	f8c0 1168 	str.w	r1, [r0, #360]	@ 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800ddea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    compptr->MCU_blocks = 1;
 800ddec:	641a      	str	r2, [r3, #64]	@ 0x40
    compptr->last_col_width = 1;
 800ddee:	e9c3 0211 	strd	r0, r2, [r3, #68]	@ 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800ddf2:	68d8      	ldr	r0, [r3, #12]
 800ddf4:	fbb1 f5f0 	udiv	r5, r1, r0
 800ddf8:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	bf08      	it	eq
 800de00:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800de02:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
    compptr->last_row_height = tmp;
 800de06:	64d9      	str	r1, [r3, #76]	@ 0x4c
    cinfo->MCU_membership[0] = 0;
 800de08:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800de0a:	f8c4 216c 	str.w	r2, [r4, #364]	@ 0x16c
    cinfo->MCU_membership[0] = 0;
 800de0e:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
 800de12:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de14:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800de16:	f04f 0a36 	mov.w	sl, #54	@ 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de1a:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800de1e:	429f      	cmp	r7, r3
 800de20:	db71      	blt.n	800df06 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800de22:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 800de26:	4620      	mov	r0, r4
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800de2c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	@ 0x1c0
 800de30:	4620      	mov	r0, r4
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800de36:	f8d4 21c0 	ldr.w	r2, [r4, #448]	@ 0x1c0
 800de3a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800de3e:	6852      	ldr	r2, [r2, #4]
 800de40:	601a      	str	r2, [r3, #0]
}
 800de42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800de46:	1e53      	subs	r3, r2, #1
 800de48:	2b03      	cmp	r3, #3
 800de4a:	d907      	bls.n	800de5c <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800de4c:	6803      	ldr	r3, [r0, #0]
 800de4e:	211b      	movs	r1, #27
 800de50:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800de54:	2204      	movs	r2, #4
 800de56:	61da      	str	r2, [r3, #28]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800de5c:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
    cinfo->blocks_in_MCU = 0;
 800de60:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800de62:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800de66:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800de68:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800de6a:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800de6e:	4359      	muls	r1, r3
 800de70:	f009 fd68 	bl	8017944 <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800de74:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 800de78:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800de7c:	f8c4 0164 	str.w	r0, [r4, #356]	@ 0x164
      jdiv_round_up((long) cinfo->image_height,
 800de80:	4359      	muls	r1, r3
 800de82:	6a20      	ldr	r0, [r4, #32]
 800de84:	f009 fd5e 	bl	8017944 <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800de88:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800de8c:	f8c4 0168 	str.w	r0, [r4, #360]	@ 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de90:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800de94:	429d      	cmp	r5, r3
 800de96:	dabc      	bge.n	800de12 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800de98:	f858 3f04 	ldr.w	r3, [r8, #4]!
      compptr->MCU_width = compptr->h_samp_factor;
 800de9c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800de9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800dea0:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800dea2:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800dea4:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800dea8:	645a      	str	r2, [r3, #68]	@ 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800deaa:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800deac:	6399      	str	r1, [r3, #56]	@ 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800deae:	63d8      	str	r0, [r3, #60]	@ 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800deb0:	641f      	str	r7, [r3, #64]	@ 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800deb2:	fbb2 fcf1 	udiv	ip, r2, r1
 800deb6:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800deba:	2a00      	cmp	r2, #0
 800debc:	bf08      	it	eq
 800debe:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800dec0:	649a      	str	r2, [r3, #72]	@ 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800dec2:	6a1a      	ldr	r2, [r3, #32]
 800dec4:	fbb2 f1f0 	udiv	r1, r2, r0
 800dec8:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800decc:	2a00      	cmp	r2, #0
 800dece:	bf08      	it	eq
 800ded0:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800ded2:	64da      	str	r2, [r3, #76]	@ 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800ded4:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800ded8:	443b      	add	r3, r7
 800deda:	2b0a      	cmp	r3, #10
 800dedc:	dd05      	ble.n	800deea <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	4620      	mov	r0, r4
 800dee2:	f8c3 9014 	str.w	r9, [r3, #20]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4798      	blx	r3
      while (mcublks-- > 0) {
 800deea:	2f00      	cmp	r7, #0
 800deec:	dc01      	bgt.n	800def2 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800deee:	3501      	adds	r5, #1
 800def0:	e7ce      	b.n	800de90 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800def2:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 800def6:	3f01      	subs	r7, #1
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	335c      	adds	r3, #92	@ 0x5c
 800defc:	f8c4 216c 	str.w	r2, [r4, #364]	@ 0x16c
 800df00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800df04:	e7f1      	b.n	800deea <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800df06:	f859 6f04 	ldr.w	r6, [r9, #4]!
    if (compptr->quant_table != NULL)
 800df0a:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800df0c:	b9eb      	cbnz	r3, 800df4a <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800df0e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800df10:	2a03      	cmp	r2, #3
 800df12:	f102 0528 	add.w	r5, r2, #40	@ 0x28
 800df16:	d803      	bhi.n	800df20 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800df18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	b92b      	cbnz	r3, 800df2c <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800df20:	6823      	ldr	r3, [r4, #0]
 800df22:	4620      	mov	r0, r4
 800df24:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	2284      	movs	r2, #132	@ 0x84
 800df30:	2101      	movs	r1, #1
 800df32:	4620      	mov	r0, r4
 800df34:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800df36:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df3a:	4798      	blx	r3
 800df3c:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800df3e:	2284      	movs	r2, #132	@ 0x84
 800df40:	6869      	ldr	r1, [r5, #4]
 800df42:	f01c f9ec 	bl	802a31e <memcpy>
    compptr->quant_table = qtbl;
 800df46:	f8c6 8050 	str.w	r8, [r6, #80]	@ 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800df4a:	3701      	adds	r7, #1
 800df4c:	e765      	b.n	800de1a <start_input_pass+0x52>
	...

0800df50 <consume_markers>:
{
 800df50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800df54:	f8d0 61c8 	ldr.w	r6, [r0, #456]	@ 0x1c8
{
 800df58:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800df5a:	6973      	ldr	r3, [r6, #20]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f040 8168 	bne.w	800e232 <consume_markers+0x2e2>
    val = (*cinfo->marker->read_markers) (cinfo);
 800df62:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800df66:	4620      	mov	r0, r4
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	4798      	blx	r3
    switch (val) {
 800df6c:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800df6e:	4607      	mov	r7, r0
    switch (val) {
 800df70:	d005      	beq.n	800df7e <consume_markers+0x2e>
 800df72:	2802      	cmp	r0, #2
 800df74:	f000 814f 	beq.w	800e216 <consume_markers+0x2c6>
}
 800df78:	4638      	mov	r0, r7
 800df7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800df7e:	69b3      	ldr	r3, [r6, #24]
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 8137 	beq.w	800e1f4 <consume_markers+0x2a4>
	if (inputctl->inheaders == 1)
 800df86:	2b01      	cmp	r3, #1
 800df88:	f040 80db 	bne.w	800e142 <consume_markers+0x1f2>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800df8c:	6a22      	ldr	r2, [r4, #32]
 800df8e:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 800df92:	429a      	cmp	r2, r3
 800df94:	dc02      	bgt.n	800df9c <consume_markers+0x4c>
 800df96:	69e2      	ldr	r2, [r4, #28]
 800df98:	429a      	cmp	r2, r3
 800df9a:	dd08      	ble.n	800dfae <consume_markers+0x5e>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	212a      	movs	r1, #42	@ 0x2a
 800dfa0:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800dfae:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
 800dfb2:	2a08      	cmp	r2, #8
 800dfb4:	d006      	beq.n	800dfc4 <consume_markers+0x74>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	2110      	movs	r1, #16
 800dfba:	4620      	mov	r0, r4
 800dfbc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800dfc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800dfc6:	2a0a      	cmp	r2, #10
 800dfc8:	dd08      	ble.n	800dfdc <consume_markers+0x8c>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800dfca:	6823      	ldr	r3, [r4, #0]
 800dfcc:	211b      	movs	r1, #27
 800dfce:	4620      	mov	r0, r4
 800dfd0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800dfd4:	220a      	movs	r2, #10
 800dfd6:	61da      	str	r2, [r3, #28]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4798      	blx	r3
  cinfo->max_h_samp_factor = 1;
 800dfdc:	2301      	movs	r3, #1
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dfde:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
 800dfe2:	f04f 0800 	mov.w	r8, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800dfe6:	f04f 0913 	mov.w	r9, #19
  cinfo->max_v_samp_factor = 1;
 800dfea:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dfee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dff0:	4598      	cmp	r8, r3
 800dff2:	db10      	blt.n	800e016 <consume_markers+0xc6>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800dff4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 800dff8:	b92b      	cbnz	r3, 800e006 <consume_markers+0xb6>
 800dffa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800dffe:	b37b      	cbz	r3, 800e060 <consume_markers+0x110>
 800e000:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e004:	b363      	cbz	r3, 800e060 <consume_markers+0x110>
    cinfo->block_size = DCTSIZE;
 800e006:	2308      	movs	r3, #8
      cinfo->block_size = 16;
 800e008:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800e00c:	4b8e      	ldr	r3, [pc, #568]	@ (800e248 <consume_markers+0x2f8>)
 800e00e:	f8c4 31ac 	str.w	r3, [r4, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800e012:	233f      	movs	r3, #63	@ 0x3f
 800e014:	e06f      	b.n	800e0f6 <consume_markers+0x1a6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800e016:	68ab      	ldr	r3, [r5, #8]
 800e018:	3b01      	subs	r3, #1
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d803      	bhi.n	800e026 <consume_markers+0xd6>
 800e01e:	68eb      	ldr	r3, [r5, #12]
 800e020:	3b01      	subs	r3, #1
 800e022:	2b03      	cmp	r3, #3
 800e024:	d905      	bls.n	800e032 <consume_markers+0xe2>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	4620      	mov	r0, r4
 800e02a:	f8c3 9014 	str.w	r9, [r3, #20]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e032:	68ab      	ldr	r3, [r5, #8]
       ci++, compptr++) {
 800e034:	f108 0801 	add.w	r8, r8, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e038:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
       ci++, compptr++) {
 800e03c:	3558      	adds	r5, #88	@ 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e03e:	429a      	cmp	r2, r3
 800e040:	bfac      	ite	ge
 800e042:	f8c4 2138 	strge.w	r2, [r4, #312]	@ 0x138
 800e046:	f8c4 3138 	strlt.w	r3, [r4, #312]	@ 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800e04a:	f8d4 213c 	ldr.w	r2, [r4, #316]	@ 0x13c
 800e04e:	f855 3c4c 	ldr.w	r3, [r5, #-76]
 800e052:	429a      	cmp	r2, r3
 800e054:	bfac      	ite	ge
 800e056:	f8c4 213c 	strge.w	r2, [r4, #316]	@ 0x13c
 800e05a:	f8c4 313c 	strlt.w	r3, [r4, #316]	@ 0x13c
       ci++, compptr++) {
 800e05e:	e7c6      	b.n	800dfee <consume_markers+0x9e>
    switch (cinfo->Se) {
 800e060:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 800e064:	2b50      	cmp	r3, #80	@ 0x50
 800e066:	f000 8089 	beq.w	800e17c <consume_markers+0x22c>
 800e06a:	dc2b      	bgt.n	800e0c4 <consume_markers+0x174>
 800e06c:	2b18      	cmp	r3, #24
 800e06e:	d079      	beq.n	800e164 <consume_markers+0x214>
 800e070:	dc1d      	bgt.n	800e0ae <consume_markers+0x15e>
 800e072:	2b08      	cmp	r3, #8
 800e074:	d071      	beq.n	800e15a <consume_markers+0x20a>
 800e076:	dc13      	bgt.n	800e0a0 <consume_markers+0x150>
 800e078:	b3bb      	cbz	r3, 800e0ea <consume_markers+0x19a>
 800e07a:	2b03      	cmp	r3, #3
 800e07c:	d068      	beq.n	800e150 <consume_markers+0x200>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800e07e:	6822      	ldr	r2, [r4, #0]
 800e080:	2111      	movs	r1, #17
 800e082:	4620      	mov	r0, r4
 800e084:	6151      	str	r1, [r2, #20]
 800e086:	f8d4 1198 	ldr.w	r1, [r4, #408]	@ 0x198
 800e08a:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800e08e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800e092:	6213      	str	r3, [r2, #32]
 800e094:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 800e098:	6253      	str	r3, [r2, #36]	@ 0x24
 800e09a:	6813      	ldr	r3, [r2, #0]
 800e09c:	4798      	blx	r3
      break;
 800e09e:	e02c      	b.n	800e0fa <consume_markers+0x1aa>
    switch (cinfo->Se) {
 800e0a0:	2b0f      	cmp	r3, #15
 800e0a2:	d1ec      	bne.n	800e07e <consume_markers+0x12e>
      cinfo->block_size = 4;
 800e0a4:	2204      	movs	r2, #4
 800e0a6:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800e0aa:	4a68      	ldr	r2, [pc, #416]	@ (800e24c <consume_markers+0x2fc>)
 800e0ac:	e021      	b.n	800e0f2 <consume_markers+0x1a2>
    switch (cinfo->Se) {
 800e0ae:	2b30      	cmp	r3, #48	@ 0x30
 800e0b0:	d05d      	beq.n	800e16e <consume_markers+0x21e>
 800e0b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800e0b4:	d060      	beq.n	800e178 <consume_markers+0x228>
 800e0b6:	2b23      	cmp	r3, #35	@ 0x23
 800e0b8:	d1e1      	bne.n	800e07e <consume_markers+0x12e>
      cinfo->block_size = 6;
 800e0ba:	2206      	movs	r2, #6
 800e0bc:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800e0c0:	4a63      	ldr	r2, [pc, #396]	@ (800e250 <consume_markers+0x300>)
 800e0c2:	e016      	b.n	800e0f2 <consume_markers+0x1a2>
    switch (cinfo->Se) {
 800e0c4:	2ba8      	cmp	r3, #168	@ 0xa8
 800e0c6:	d05f      	beq.n	800e188 <consume_markers+0x238>
 800e0c8:	dc07      	bgt.n	800e0da <consume_markers+0x18a>
 800e0ca:	2b78      	cmp	r3, #120	@ 0x78
 800e0cc:	d058      	beq.n	800e180 <consume_markers+0x230>
 800e0ce:	2b8f      	cmp	r3, #143	@ 0x8f
 800e0d0:	d058      	beq.n	800e184 <consume_markers+0x234>
 800e0d2:	2b63      	cmp	r3, #99	@ 0x63
 800e0d4:	d1d3      	bne.n	800e07e <consume_markers+0x12e>
      cinfo->block_size = 10;
 800e0d6:	230a      	movs	r3, #10
 800e0d8:	e796      	b.n	800e008 <consume_markers+0xb8>
    switch (cinfo->Se) {
 800e0da:	2be0      	cmp	r3, #224	@ 0xe0
 800e0dc:	d056      	beq.n	800e18c <consume_markers+0x23c>
 800e0de:	2bff      	cmp	r3, #255	@ 0xff
 800e0e0:	d056      	beq.n	800e190 <consume_markers+0x240>
 800e0e2:	2bc3      	cmp	r3, #195	@ 0xc3
 800e0e4:	d1cb      	bne.n	800e07e <consume_markers+0x12e>
      cinfo->block_size = 14;
 800e0e6:	230e      	movs	r3, #14
 800e0e8:	e78e      	b.n	800e008 <consume_markers+0xb8>
      cinfo->block_size = 1;
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800e0f0:	4a55      	ldr	r2, [pc, #340]	@ (800e248 <consume_markers+0x2f8>)
 800e0f2:	f8c4 21ac 	str.w	r2, [r4, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800e0f6:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e0fa:	f04f 0800 	mov.w	r8, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800e0fe:	f8d4 31a8 	ldr.w	r3, [r4, #424]	@ 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e102:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
    compptr->component_needed = TRUE;
 800e106:	f04f 0a01 	mov.w	sl, #1
    compptr->quant_table = NULL;
 800e10a:	46c1      	mov	r9, r8
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800e10c:	e9c4 3350 	strd	r3, r3, [r4, #320]	@ 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e110:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800e112:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e116:	4598      	cmp	r8, r3
 800e118:	db3c      	blt.n	800e194 <consume_markers+0x244>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e11a:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800e11e:	6a20      	ldr	r0, [r4, #32]
 800e120:	4359      	muls	r1, r3
 800e122:	f009 fc0f 	bl	8017944 <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800e126:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e128:	f8d4 2150 	ldr.w	r2, [r4, #336]	@ 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800e12c:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800e130:	429a      	cmp	r2, r3
 800e132:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800e136:	db02      	blt.n	800e13e <consume_markers+0x1ee>
 800e138:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800e13c:	b102      	cbz	r2, 800e140 <consume_markers+0x1f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800e13e:	2201      	movs	r2, #1
    cinfo->inputctl->has_multiple_scans = FALSE;
 800e140:	611a      	str	r2, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800e142:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e146:	2b00      	cmp	r3, #0
 800e148:	d151      	bne.n	800e1ee <consume_markers+0x29e>
	  inputctl->inheaders = 2;
 800e14a:	2302      	movs	r3, #2
 800e14c:	61b3      	str	r3, [r6, #24]
	  break;
 800e14e:	e708      	b.n	800df62 <consume_markers+0x12>
      cinfo->block_size = 2;
 800e150:	2202      	movs	r2, #2
 800e152:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800e156:	4a3f      	ldr	r2, [pc, #252]	@ (800e254 <consume_markers+0x304>)
 800e158:	e7cb      	b.n	800e0f2 <consume_markers+0x1a2>
      cinfo->block_size = 3;
 800e15a:	2203      	movs	r2, #3
 800e15c:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800e160:	4a3d      	ldr	r2, [pc, #244]	@ (800e258 <consume_markers+0x308>)
 800e162:	e7c6      	b.n	800e0f2 <consume_markers+0x1a2>
      cinfo->block_size = 5;
 800e164:	2205      	movs	r2, #5
 800e166:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800e16a:	4a3c      	ldr	r2, [pc, #240]	@ (800e25c <consume_markers+0x30c>)
 800e16c:	e7c1      	b.n	800e0f2 <consume_markers+0x1a2>
      cinfo->block_size = 7;
 800e16e:	2207      	movs	r2, #7
 800e170:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800e174:	4a3a      	ldr	r2, [pc, #232]	@ (800e260 <consume_markers+0x310>)
 800e176:	e7bc      	b.n	800e0f2 <consume_markers+0x1a2>
      cinfo->block_size = 8;
 800e178:	2208      	movs	r2, #8
 800e17a:	e7b7      	b.n	800e0ec <consume_markers+0x19c>
      cinfo->block_size = 9;
 800e17c:	2309      	movs	r3, #9
 800e17e:	e743      	b.n	800e008 <consume_markers+0xb8>
      cinfo->block_size = 11;
 800e180:	230b      	movs	r3, #11
 800e182:	e741      	b.n	800e008 <consume_markers+0xb8>
      cinfo->block_size = 12;
 800e184:	230c      	movs	r3, #12
 800e186:	e73f      	b.n	800e008 <consume_markers+0xb8>
      cinfo->block_size = 13;
 800e188:	230d      	movs	r3, #13
 800e18a:	e73d      	b.n	800e008 <consume_markers+0xb8>
      cinfo->block_size = 15;
 800e18c:	230f      	movs	r3, #15
 800e18e:	e73b      	b.n	800e008 <consume_markers+0xb8>
      cinfo->block_size = 16;
 800e190:	2310      	movs	r3, #16
 800e192:	e739      	b.n	800e008 <consume_markers+0xb8>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800e194:	e9c5 1109 	strd	r1, r1, [r5, #36]	@ 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e198:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800e19a:	f108 0801 	add.w	r8, r8, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e19e:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e1a2:	69e3      	ldr	r3, [r4, #28]
 800e1a4:	4351      	muls	r1, r2
 800e1a6:	4358      	muls	r0, r3
 800e1a8:	f009 fbcc 	bl	8017944 <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800e1ac:	61e8      	str	r0, [r5, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e1ae:	68e8      	ldr	r0, [r5, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e1b0:	f8d4 213c 	ldr.w	r2, [r4, #316]	@ 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e1b4:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e1b6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e1ba:	4358      	muls	r0, r3
 800e1bc:	4351      	muls	r1, r2
 800e1be:	f009 fbc1 	bl	8017944 <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800e1c2:	6228      	str	r0, [r5, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e1c4:	68a8      	ldr	r0, [r5, #8]
 800e1c6:	69e3      	ldr	r3, [r4, #28]
 800e1c8:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
 800e1cc:	4358      	muls	r0, r3
 800e1ce:	f009 fbb9 	bl	8017944 <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800e1d2:	62e8      	str	r0, [r5, #44]	@ 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e1d4:	68e8      	ldr	r0, [r5, #12]
 800e1d6:	6a23      	ldr	r3, [r4, #32]
 800e1d8:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
 800e1dc:	4358      	muls	r0, r3
 800e1de:	f009 fbb1 	bl	8017944 <jdiv_round_up>
    compptr->quant_table = NULL;
 800e1e2:	f8c5 9050 	str.w	r9, [r5, #80]	@ 0x50
    compptr->component_needed = TRUE;
 800e1e6:	e9c5 0a0c 	strd	r0, sl, [r5, #48]	@ 0x30
       ci++, compptr++) {
 800e1ea:	3558      	adds	r5, #88	@ 0x58
 800e1ec:	e790      	b.n	800e110 <consume_markers+0x1c0>
	inputctl->inheaders = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61b3      	str	r3, [r6, #24]
 800e1f2:	e6c1      	b.n	800df78 <consume_markers+0x28>
	if (! inputctl->pub.has_multiple_scans)
 800e1f4:	6933      	ldr	r3, [r6, #16]
 800e1f6:	b92b      	cbnz	r3, 800e204 <consume_markers+0x2b4>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	2224      	movs	r2, #36	@ 0x24
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	615a      	str	r2, [r3, #20]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800e204:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f43f aeaa 	beq.w	800df62 <consume_markers+0x12>
	start_input_pass(cinfo);
 800e20e:	4620      	mov	r0, r4
 800e210:	f7ff fdda 	bl	800ddc8 <start_input_pass>
 800e214:	e6b0      	b.n	800df78 <consume_markers+0x28>
      inputctl->pub.eoi_reached = TRUE;
 800e216:	2301      	movs	r3, #1
 800e218:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800e21a:	69b3      	ldr	r3, [r6, #24]
 800e21c:	b15b      	cbz	r3, 800e236 <consume_markers+0x2e6>
	if (cinfo->marker->saw_SOF)
 800e21e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	b12b      	cbz	r3, 800e232 <consume_markers+0x2e2>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	223d      	movs	r2, #61	@ 0x3d
 800e22a:	4620      	mov	r0, r4
 800e22c:	615a      	str	r2, [r3, #20]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4798      	blx	r3
    return JPEG_REACHED_EOI;
 800e232:	2702      	movs	r7, #2
 800e234:	e6a0      	b.n	800df78 <consume_markers+0x28>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800e236:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e23a:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800e23e:	429a      	cmp	r2, r3
 800e240:	ddf7      	ble.n	800e232 <consume_markers+0x2e2>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800e242:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800e246:	e7f4      	b.n	800e232 <consume_markers+0x2e2>
 800e248:	0802f304 	.word	0x0802f304
 800e24c:	0802f00c 	.word	0x0802f00c
 800e250:	0802f130 	.word	0x0802f130
 800e254:	0802ef58 	.word	0x0802ef58
 800e258:	0802efa8 	.word	0x0802efa8
 800e25c:	0802f08c 	.word	0x0802f08c
 800e260:	0802f200 	.word	0x0802f200

0800e264 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800e264:	f8d0 11a8 	ldr.w	r1, [r0, #424]	@ 0x1a8
 800e268:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e26a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e26c:	434a      	muls	r2, r1
 800e26e:	429a      	cmp	r2, r3
{
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800e274:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800e276:	d813      	bhi.n	800e2a0 <jpeg_core_output_dimensions+0x3c>
    cinfo->output_width = (JDIMENSION)
 800e278:	2501      	movs	r5, #1
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800e27a:	f009 fb63 	bl	8017944 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800e27e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
    cinfo->output_width = (JDIMENSION)
 800e282:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800e284:	6a20      	ldr	r0, [r4, #32]
 800e286:	f009 fb5d 	bl	8017944 <jdiv_round_up>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e28a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800e28e:	2200      	movs	r2, #0
 800e290:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    cinfo->output_height = (JDIMENSION)
 800e292:	6760      	str	r0, [r4, #116]	@ 0x74
    cinfo->min_DCT_v_scaled_size = 1;
 800e294:	e9c4 5550 	strd	r5, r5, [r4, #320]	@ 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e298:	4291      	cmp	r1, r2
 800e29a:	f300 80bf 	bgt.w	800e41c <jpeg_core_output_dimensions+0x1b8>
}
 800e29e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800e2a0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800e2a4:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e2a8:	d80b      	bhi.n	800e2c2 <jpeg_core_output_dimensions+0x5e>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800e2aa:	0040      	lsls	r0, r0, #1
 800e2ac:	2502      	movs	r5, #2
 800e2ae:	f009 fb49 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e2b2:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800e2b4:	6a20      	ldr	r0, [r4, #32]
 800e2b6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e2ba:	0040      	lsls	r0, r0, #1
 800e2bc:	f009 fb42 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 2;
 800e2c0:	e7e3      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800e2c2:	441d      	add	r5, r3
 800e2c4:	42aa      	cmp	r2, r5
 800e2c6:	d80d      	bhi.n	800e2e4 <jpeg_core_output_dimensions+0x80>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800e2c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e2cc:	2503      	movs	r5, #3
 800e2ce:	f009 fb39 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e2d2:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800e2d4:	6a20      	ldr	r0, [r4, #32]
 800e2d6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e2da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e2de:	f009 fb31 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 3;
 800e2e2:	e7d2      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800e2e4:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800e2e8:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800e2ec:	d80b      	bhi.n	800e306 <jpeg_core_output_dimensions+0xa2>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800e2ee:	0080      	lsls	r0, r0, #2
 800e2f0:	2504      	movs	r5, #4
 800e2f2:	f009 fb27 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e2f6:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800e2f8:	6a20      	ldr	r0, [r4, #32]
 800e2fa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e2fe:	0080      	lsls	r0, r0, #2
 800e300:	f009 fb20 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 4;
 800e304:	e7c1      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800e306:	441d      	add	r5, r3
 800e308:	42aa      	cmp	r2, r5
 800e30a:	d80d      	bhi.n	800e328 <jpeg_core_output_dimensions+0xc4>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800e30c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e310:	2505      	movs	r5, #5
 800e312:	f009 fb17 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e316:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800e318:	6a20      	ldr	r0, [r4, #32]
 800e31a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e31e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e322:	f009 fb0f 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 5;
 800e326:	e7b0      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800e328:	2506      	movs	r5, #6
 800e32a:	fb05 f603 	mul.w	r6, r5, r3
 800e32e:	42b2      	cmp	r2, r6
 800e330:	d80a      	bhi.n	800e348 <jpeg_core_output_dimensions+0xe4>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800e332:	4368      	muls	r0, r5
 800e334:	f009 fb06 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e338:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800e33a:	6a20      	ldr	r0, [r4, #32]
 800e33c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e340:	4368      	muls	r0, r5
 800e342:	f009 faff 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 14;
 800e346:	e7a0      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800e348:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800e34c:	00dd      	lsls	r5, r3, #3
 800e34e:	42b2      	cmp	r2, r6
 800e350:	d80d      	bhi.n	800e36e <jpeg_core_output_dimensions+0x10a>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800e352:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800e356:	2507      	movs	r5, #7
 800e358:	f009 faf4 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e35c:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800e35e:	6a20      	ldr	r0, [r4, #32]
 800e360:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e364:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800e368:	f009 faec 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 7;
 800e36c:	e78d      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800e36e:	42aa      	cmp	r2, r5
 800e370:	d80b      	bhi.n	800e38a <jpeg_core_output_dimensions+0x126>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800e372:	00c0      	lsls	r0, r0, #3
 800e374:	2508      	movs	r5, #8
 800e376:	f009 fae5 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e37a:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800e37c:	6a20      	ldr	r0, [r4, #32]
 800e37e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e382:	00c0      	lsls	r0, r0, #3
 800e384:	f009 fade 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 8;
 800e388:	e77f      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800e38a:	441d      	add	r5, r3
 800e38c:	42aa      	cmp	r2, r5
 800e38e:	d80d      	bhi.n	800e3ac <jpeg_core_output_dimensions+0x148>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800e390:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800e394:	2509      	movs	r5, #9
 800e396:	f009 fad5 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e39a:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800e39c:	6a20      	ldr	r0, [r4, #32]
 800e39e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e3a2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800e3a6:	f009 facd 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 9;
 800e3aa:	e76e      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800e3ac:	250a      	movs	r5, #10
 800e3ae:	fb05 f603 	mul.w	r6, r5, r3
 800e3b2:	42b2      	cmp	r2, r6
 800e3b4:	d9bd      	bls.n	800e332 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800e3b6:	250b      	movs	r5, #11
 800e3b8:	fb05 f603 	mul.w	r6, r5, r3
 800e3bc:	42b2      	cmp	r2, r6
 800e3be:	d9b8      	bls.n	800e332 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800e3c0:	250c      	movs	r5, #12
 800e3c2:	fb05 f603 	mul.w	r6, r5, r3
 800e3c6:	42b2      	cmp	r2, r6
 800e3c8:	d9b3      	bls.n	800e332 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800e3ca:	250d      	movs	r5, #13
 800e3cc:	fb05 f603 	mul.w	r6, r5, r3
 800e3d0:	42b2      	cmp	r2, r6
 800e3d2:	d9ae      	bls.n	800e332 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800e3d4:	250e      	movs	r5, #14
 800e3d6:	fb05 f603 	mul.w	r6, r5, r3
 800e3da:	42b2      	cmp	r2, r6
 800e3dc:	d9a9      	bls.n	800e332 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800e3de:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800e3e8:	d80c      	bhi.n	800e404 <jpeg_core_output_dimensions+0x1a0>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800e3ea:	1a18      	subs	r0, r3, r0
 800e3ec:	250f      	movs	r5, #15
 800e3ee:	f009 faa9 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e3f2:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800e3f4:	6a20      	ldr	r0, [r4, #32]
 800e3f6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e3fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800e3fe:	f009 faa1 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 15;
 800e402:	e742      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800e404:	4618      	mov	r0, r3
    cinfo->output_height = (JDIMENSION)
 800e406:	2510      	movs	r5, #16
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800e408:	f009 fa9c 	bl	8017944 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e40c:	6720      	str	r0, [r4, #112]	@ 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800e40e:	6a20      	ldr	r0, [r4, #32]
 800e410:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 800e414:	0100      	lsls	r0, r0, #4
 800e416:	f009 fa95 	bl	8017944 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 16;
 800e41a:	e736      	b.n	800e28a <jpeg_core_output_dimensions+0x26>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800e41c:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
       ci++, compptr++) {
 800e420:	3201      	adds	r2, #1
 800e422:	3358      	adds	r3, #88	@ 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800e424:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800e428:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
 800e42c:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800e430:	e732      	b.n	800e298 <jpeg_core_output_dimensions+0x34>
	...

0800e434 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e434:	6843      	ldr	r3, [r0, #4]
 800e436:	221c      	movs	r2, #28
 800e438:	2100      	movs	r1, #0
 800e43a:	681b      	ldr	r3, [r3, #0]
{
 800e43c:	b510      	push	{r4, lr}
 800e43e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e440:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800e442:	4b08      	ldr	r3, [pc, #32]	@ (800e464 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800e444:	f8c4 01c8 	str.w	r0, [r4, #456]	@ 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800e448:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800e44a:	4b07      	ldr	r3, [pc, #28]	@ (800e468 <jinit_input_controller+0x34>)
 800e44c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800e44e:	4b07      	ldr	r3, [pc, #28]	@ (800e46c <jinit_input_controller+0x38>)
 800e450:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800e452:	4b07      	ldr	r3, [pc, #28]	@ (800e470 <jinit_input_controller+0x3c>)
 800e454:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800e456:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800e458:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800e45c:	2301      	movs	r3, #1
 800e45e:	6183      	str	r3, [r0, #24]
}
 800e460:	bd10      	pop	{r4, pc}
 800e462:	bf00      	nop
 800e464:	0800df51 	.word	0x0800df51
 800e468:	0800dd99 	.word	0x0800dd99
 800e46c:	0800ddc9 	.word	0x0800ddc9
 800e470:	0800dd89 	.word	0x0800dd89

0800e474 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800e474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e478:	f8d0 41bc 	ldr.w	r4, [r0, #444]	@ 0x1bc
{
 800e47c:	4698      	mov	r8, r3
 800e47e:	4605      	mov	r5, r0
 800e480:	460e      	mov	r6, r1
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800e482:	6b23      	ldr	r3, [r4, #48]	@ 0x30
{
 800e484:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800e486:	f104 0a08 	add.w	sl, r4, #8
  if (! main->buffer_full) {
 800e48a:	b93b      	cbnz	r3, 800e49c <process_data_simple_main+0x28>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800e48c:	f8d0 31c0 	ldr.w	r3, [r0, #448]	@ 0x1c0
 800e490:	4651      	mov	r1, sl
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	4798      	blx	r3
 800e496:	b1a8      	cbz	r0, 800e4c4 <process_data_simple_main+0x50>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800e498:	2301      	movs	r3, #1
 800e49a:	6323      	str	r3, [r4, #48]	@ 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800e49c:	f8d5 9144 	ldr.w	r9, [r5, #324]	@ 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800e4a0:	f104 0234 	add.w	r2, r4, #52	@ 0x34
 800e4a4:	f8d5 31c4 	ldr.w	r3, [r5, #452]	@ 0x1c4
 800e4a8:	4651      	mov	r1, sl
 800e4aa:	9600      	str	r6, [sp, #0]
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e4b2:	685e      	ldr	r6, [r3, #4]
 800e4b4:	464b      	mov	r3, r9
 800e4b6:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800e4b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4ba:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800e4bc:	bf24      	itt	cs
 800e4be:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800e4c0:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	@ 0x30
  }
}
 800e4c4:	b004      	add	sp, #16
 800e4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e4ca <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800e4ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e4ce:	f8d0 41bc 	ldr.w	r4, [r0, #444]	@ 0x1bc
{
 800e4d2:	4698      	mov	r8, r3
 800e4d4:	b08b      	sub	sp, #44	@ 0x2c
 800e4d6:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800e4d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
{
 800e4da:	4689      	mov	r9, r1
 800e4dc:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800e4de:	b973      	cbnz	r3, 800e4fe <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800e4e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4e2:	f8d0 21c0 	ldr.w	r2, [r0, #448]	@ 0x1c0
 800e4e6:	330e      	adds	r3, #14
 800e4e8:	68d2      	ldr	r2, [r2, #12]
 800e4ea:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800e4ee:	4790      	blx	r2
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d05a      	beq.n	800e5aa <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	6323      	str	r3, [r4, #48]	@ 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800e4f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800e4fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e500:	2b01      	cmp	r3, #1
 800e502:	d011      	beq.n	800e528 <process_data_context_main+0x5e>
 800e504:	2b02      	cmp	r3, #2
 800e506:	d036      	beq.n	800e576 <process_data_context_main+0xac>
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d14e      	bne.n	800e5aa <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e50c:	f8d5 c144 	ldr.w	ip, [r5, #324]	@ 0x144
    main->rowgroup_ctr = 0;
 800e510:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800e512:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e514:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800e518:	6366      	str	r6, [r4, #52]	@ 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e51a:	64a3      	str	r3, [r4, #72]	@ 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800e51c:	f8d5 3148 	ldr.w	r3, [r5, #328]	@ 0x148
 800e520:	429a      	cmp	r2, r3
 800e522:	d045      	beq.n	800e5b0 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800e524:	2301      	movs	r3, #1
 800e526:	6463      	str	r3, [r4, #68]	@ 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800e528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e52a:	f104 0234 	add.w	r2, r4, #52	@ 0x34
 800e52e:	4628      	mov	r0, r5
 800e530:	f103 010e 	add.w	r1, r3, #14
 800e534:	f8d5 31c4 	ldr.w	r3, [r5, #452]	@ 0x1c4
 800e538:	f8cd 9000 	str.w	r9, [sp]
 800e53c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e540:	685e      	ldr	r6, [r3, #4]
 800e542:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e546:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e548:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800e54a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e54c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e54e:	429a      	cmp	r2, r3
 800e550:	d32b      	bcc.n	800e5aa <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800e552:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800e554:	f8d5 0144 	ldr.w	r0, [r5, #324]	@ 0x144
    if (main->iMCU_row_ctr == 1)
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d063      	beq.n	800e624 <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800e55c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e55e:	f083 0301 	eor.w	r3, r3, #1
 800e562:	6423      	str	r3, [r4, #64]	@ 0x40
    main->buffer_full = FALSE;
 800e564:	2300      	movs	r3, #0
 800e566:	6323      	str	r3, [r4, #48]	@ 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e568:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800e56a:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e56c:	6363      	str	r3, [r4, #52]	@ 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800e56e:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800e570:	64a0      	str	r0, [r4, #72]	@ 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800e572:	6463      	str	r3, [r4, #68]	@ 0x44
 800e574:	e019      	b.n	800e5aa <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800e576:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e578:	f104 0234 	add.w	r2, r4, #52	@ 0x34
 800e57c:	4628      	mov	r0, r5
 800e57e:	f103 010e 	add.w	r1, r3, #14
 800e582:	f8d5 31c4 	ldr.w	r3, [r5, #452]	@ 0x1c4
 800e586:	f8cd 9000 	str.w	r9, [sp]
 800e58a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e58e:	685e      	ldr	r6, [r3, #4]
 800e590:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e594:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e596:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800e598:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e59a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d304      	bcc.n	800e5aa <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	6463      	str	r3, [r4, #68]	@ 0x44
    if (*out_row_ctr >= out_rows_avail)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	4543      	cmp	r3, r8
 800e5a8:	d3b0      	bcc.n	800e50c <process_data_context_main+0x42>
  }
}
 800e5aa:	b00b      	add	sp, #44	@ 0x2c
 800e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e5b0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e5b2:	f06f 4e40 	mvn.w	lr, #3221225472	@ 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e5b6:	f8d5 11bc 	ldr.w	r1, [r5, #444]	@ 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e5ba:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 800e5be:	9206      	str	r2, [sp, #24]
 800e5c0:	9a06      	ldr	r2, [sp, #24]
 800e5c2:	4296      	cmp	r6, r2
 800e5c4:	daae      	bge.n	800e524 <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800e5c6:	68d8      	ldr	r0, [r3, #12]
 800e5c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e5ca:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800e5cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e5ce:	fbb0 fbf2 	udiv	fp, r0, r2
 800e5d2:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800e5d6:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	bf08      	it	eq
 800e5de:	4610      	moveq	r0, r2
    if (ci == 0) {
 800e5e0:	b926      	cbnz	r6, 800e5ec <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800e5e2:	1e42      	subs	r2, r0, #1
 800e5e4:	fb92 f2fa 	sdiv	r2, r2, sl
 800e5e8:	3201      	adds	r2, #1
 800e5ea:	648a      	str	r2, [r1, #72]	@ 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800e5ec:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e5ee:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800e5f0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800e5f4:	320e      	adds	r2, #14
 800e5f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e5fa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e5fe:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800e602:	2000      	movs	r0, #0
 800e604:	465a      	mov	r2, fp
 800e606:	3204      	adds	r2, #4
 800e608:	9005      	str	r0, [sp, #20]
 800e60a:	9805      	ldr	r0, [sp, #20]
 800e60c:	4550      	cmp	r0, sl
 800e60e:	db02      	blt.n	800e616 <process_data_context_main+0x14c>
       ci++, compptr++) {
 800e610:	3601      	adds	r6, #1
 800e612:	3358      	adds	r3, #88	@ 0x58
 800e614:	e7d4      	b.n	800e5c0 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e616:	f8db 0000 	ldr.w	r0, [fp]
 800e61a:	f842 0b04 	str.w	r0, [r2], #4
    for (i = 0; i < rgroup * 2; i++) {
 800e61e:	9805      	ldr	r0, [sp, #20]
 800e620:	3001      	adds	r0, #1
 800e622:	e7f1      	b.n	800e608 <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e624:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e628:	f8d5 81bc 	ldr.w	r8, [r5, #444]	@ 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800e630:	2500      	movs	r5, #0
 800e632:	9307      	str	r3, [sp, #28]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e634:	1c43      	adds	r3, r0, #1
 800e636:	9309      	str	r3, [sp, #36]	@ 0x24
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e638:	9b07      	ldr	r3, [sp, #28]
 800e63a:	429d      	cmp	r5, r3
 800e63c:	da8e      	bge.n	800e55c <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e63e:	9b05      	ldr	r3, [sp, #20]
 800e640:	68da      	ldr	r2, [r3, #12]
 800e642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e644:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800e646:	f8d8 3038 	ldr.w	r3, [r8, #56]	@ 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e64a:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800e64e:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800e652:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
 800e656:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800e65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e65c:	4353      	muls	r3, r2
 800e65e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800e662:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800e666:	4413      	add	r3, r2
 800e668:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800e66a:	2100      	movs	r1, #0
 800e66c:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800e670:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800e674:	461e      	mov	r6, r3
 800e676:	f06f 0303 	mvn.w	r3, #3
 800e67a:	fb03 fe02 	mul.w	lr, r3, r2
 800e67e:	eb07 030e 	add.w	r3, r7, lr
 800e682:	44e6      	add	lr, ip
 800e684:	9308      	str	r3, [sp, #32]
 800e686:	428a      	cmp	r2, r1
 800e688:	dc04      	bgt.n	800e694 <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800e68a:	9b05      	ldr	r3, [sp, #20]
 800e68c:	3501      	adds	r5, #1
 800e68e:	3358      	adds	r3, #88	@ 0x58
 800e690:	9305      	str	r3, [sp, #20]
 800e692:	e7d1      	b.n	800e638 <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800e694:	9b06      	ldr	r3, [sp, #24]
 800e696:	f853 bb04 	ldr.w	fp, [r3], #4
 800e69a:	9306      	str	r3, [sp, #24]
 800e69c:	9b08      	ldr	r3, [sp, #32]
 800e69e:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800e6a2:	f85a bb04 	ldr.w	fp, [sl], #4
 800e6a6:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800e6aa:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800e6ae:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800e6b2:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800e6b6:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800e6b8:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800e6bc:	e7e3      	b.n	800e686 <process_data_context_main+0x1bc>

0800e6be <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800e6be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800e6c0:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
 800e6c4:	9100      	str	r1, [sp, #0]
 800e6c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	6864      	ldr	r4, [r4, #4]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800e6d4:	b004      	add	sp, #16
 800e6d6:	bd10      	pop	{r4, pc}

0800e6d8 <start_pass_main>:
{
 800e6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e6dc:	f8d0 31bc 	ldr.w	r3, [r0, #444]	@ 0x1bc
{
 800e6e0:	4602      	mov	r2, r0
  switch (pass_mode) {
 800e6e2:	b149      	cbz	r1, 800e6f8 <start_pass_main+0x20>
 800e6e4:	2902      	cmp	r1, #2
 800e6e6:	d071      	beq.n	800e7cc <start_pass_main+0xf4>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e6e8:	6803      	ldr	r3, [r0, #0]
 800e6ea:	2203      	movs	r2, #3
 800e6ec:	615a      	str	r2, [r3, #20]
 800e6ee:	681b      	ldr	r3, [r3, #0]
}
 800e6f0:	b003      	add	sp, #12
 800e6f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e6f6:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800e6f8:	f8d0 01d8 	ldr.w	r0, [r0, #472]	@ 0x1d8
 800e6fc:	6880      	ldr	r0, [r0, #8]
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d061      	beq.n	800e7c6 <start_pass_main+0xee>
  int M = cinfo->min_DCT_v_scaled_size;
 800e702:	f8d2 c144 	ldr.w	ip, [r2, #324]	@ 0x144
      main->pub.process_data = process_data_context_main;
 800e706:	461f      	mov	r7, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e708:	f8d2 60d8 	ldr.w	r6, [r2, #216]	@ 0xd8
 800e70c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      main->pub.process_data = process_data_context_main;
 800e70e:	4831      	ldr	r0, [pc, #196]	@ (800e7d4 <start_pass_main+0xfc>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e710:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e712:	f10c 0202 	add.w	r2, ip, #2
      main->pub.process_data = process_data_context_main;
 800e716:	f847 0f04 	str.w	r0, [r7, #4]!
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e71a:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e71c:	9a00      	ldr	r2, [sp, #0]
 800e71e:	4291      	cmp	r1, r2
 800e720:	db09      	blt.n	800e736 <start_pass_main+0x5e>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800e722:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800e724:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
      main->iMCU_row_ctr = 0;
 800e728:	64da      	str	r2, [r3, #76]	@ 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800e72a:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800e72c:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
}
 800e730:	b003      	add	sp, #12
 800e732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e736:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800e738:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e73a:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e73c:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800e73e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    buf = main->buffer[ci];
 800e740:	f857 4f04 	ldr.w	r4, [r7, #4]!
    xbuf0 = main->xbuffer[0][ci];
 800e744:	f850 e021 	ldr.w	lr, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800e748:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e74a:	fb92 f2fc 	sdiv	r2, r2, ip
    xbuf1 = main->xbuffer[1][ci];
 800e74e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e752:	fb02 f905 	mul.w	r9, r2, r5
 800e756:	2500      	movs	r5, #0
 800e758:	454d      	cmp	r5, r9
 800e75a:	db1c      	blt.n	800e796 <start_pass_main+0xbe>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e75c:	fb02 fb0c 	mul.w	fp, r2, ip
 800e760:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800e764:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e768:	fb05 b502 	mla	r5, r5, r2, fp
 800e76c:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800e770:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800e774:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800e778:	2400      	movs	r4, #0
 800e77a:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800e77e:	4554      	cmp	r4, sl
 800e780:	db11      	blt.n	800e7a6 <start_pass_main+0xce>
 800e782:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800e786:	2400      	movs	r4, #0
 800e788:	fb00 e502 	mla	r5, r0, r2, lr
 800e78c:	42a2      	cmp	r2, r4
 800e78e:	dc14      	bgt.n	800e7ba <start_pass_main+0xe2>
       ci++, compptr++) {
 800e790:	3101      	adds	r1, #1
 800e792:	3658      	adds	r6, #88	@ 0x58
 800e794:	e7c2      	b.n	800e71c <start_pass_main+0x44>
      xbuf0[i] = xbuf1[i] = buf[i];
 800e796:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800e79a:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800e79e:	f84e 8025 	str.w	r8, [lr, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e7a2:	3501      	adds	r5, #1
 800e7a4:	e7d8      	b.n	800e758 <start_pass_main+0x80>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e7a6:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800e7aa:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e7ac:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800e7b0:	f855 bb04 	ldr.w	fp, [r5], #4
 800e7b4:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800e7b8:	e7e1      	b.n	800e77e <start_pass_main+0xa6>
      xbuf0[i - rgroup] = xbuf0[0];
 800e7ba:	f8de 0000 	ldr.w	r0, [lr]
 800e7be:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800e7c2:	3401      	adds	r4, #1
 800e7c4:	e7e2      	b.n	800e78c <start_pass_main+0xb4>
      main->pub.process_data = process_data_simple_main;
 800e7c6:	4a04      	ldr	r2, [pc, #16]	@ (800e7d8 <start_pass_main+0x100>)
 800e7c8:	605a      	str	r2, [r3, #4]
 800e7ca:	e7ae      	b.n	800e72a <start_pass_main+0x52>
    main->pub.process_data = process_data_crank_post;
 800e7cc:	4a03      	ldr	r2, [pc, #12]	@ (800e7dc <start_pass_main+0x104>)
 800e7ce:	605a      	str	r2, [r3, #4]
    break;
 800e7d0:	e7ae      	b.n	800e730 <start_pass_main+0x58>
 800e7d2:	bf00      	nop
 800e7d4:	0800e4cb 	.word	0x0800e4cb
 800e7d8:	0800e475 	.word	0x0800e475
 800e7dc:	0800e6bf 	.word	0x0800e6bf

0800e7e0 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800e7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e7e4:	6843      	ldr	r3, [r0, #4]
{
 800e7e6:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e7e8:	2250      	movs	r2, #80	@ 0x50
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	681b      	ldr	r3, [r3, #0]
{
 800e7ee:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e7f0:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800e7f2:	4b3a      	ldr	r3, [pc, #232]	@ (800e8dc <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800e7f4:	f8c4 01bc 	str.w	r0, [r4, #444]	@ 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e7f8:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800e7fa:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800e7fc:	b12d      	cbz	r5, 800e80a <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	2203      	movs	r2, #3
 800e802:	4620      	mov	r0, r4
 800e804:	615a      	str	r2, [r3, #20]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800e80a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	@ 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800e80e:	f8d4 5144 	ldr.w	r5, [r4, #324]	@ 0x144
  if (cinfo->upsample->need_context_rows) {
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	b31b      	cbz	r3, 800e85e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800e816:	2d01      	cmp	r5, #1
 800e818:	dc05      	bgt.n	800e826 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	2230      	movs	r2, #48	@ 0x30
 800e81e:	4620      	mov	r0, r4
 800e820:	615a      	str	r2, [r3, #20]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e826:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e828:	2101      	movs	r1, #1
 800e82a:	6863      	ldr	r3, [r4, #4]
 800e82c:	4620      	mov	r0, r4
 800e82e:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e830:	f8d4 71bc 	ldr.w	r7, [r4, #444]	@ 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e834:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e836:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800e83a:	f8d4 9144 	ldr.w	r9, [r4, #324]	@ 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e83e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800e840:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800e842:	63b8      	str	r0, [r7, #56]	@ 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800e844:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800e848:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e84c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800e850:	63f8      	str	r0, [r7, #60]	@ 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e852:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800e854:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e858:	4590      	cmp	r8, r2
 800e85a:	db0a      	blt.n	800e872 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800e85c:	1c9d      	adds	r5, r3, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e85e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	@ 0xd8
 800e862:	3604      	adds	r6, #4
 800e864:	f04f 0800 	mov.w	r8, #0
 800e868:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e86a:	4543      	cmp	r3, r8
 800e86c:	dc1d      	bgt.n	800e8aa <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800e86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e872:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e874:	4620      	mov	r0, r4
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e876:	68ea      	ldr	r2, [r5, #12]
       ci++, compptr++) {
 800e878:	3558      	adds	r5, #88	@ 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e87a:	434a      	muls	r2, r1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e87c:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e87e:	fb92 fbf3 	sdiv	fp, r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e882:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800e884:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e88e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800e890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800e892:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800e896:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800e89a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800e89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8a0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800e8a4:	f108 0801 	add.w	r8, r8, #1
 800e8a8:	e7d3      	b.n	800e852 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e8aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
       ci++, compptr++) {
 800e8ac:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e8b0:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800e8b2:	3758      	adds	r7, #88	@ 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800e8b4:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e8b8:	4353      	muls	r3, r2
 800e8ba:	f8d4 2144 	ldr.w	r2, [r4, #324]	@ 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800e8be:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e8c0:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800e8c4:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800e8c8:	436b      	muls	r3, r5
 800e8ca:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	434a      	muls	r2, r1
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	47c8      	blx	r9
 800e8d6:	f846 0f04 	str.w	r0, [r6, #4]!
       ci++, compptr++) {
 800e8da:	e7c5      	b.n	800e868 <jinit_d_main_controller+0x88>
 800e8dc:	0800e6d9 	.word	0x0800e6d9

0800e8e0 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800e8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800e8e4:	6986      	ldr	r6, [r0, #24]
{
 800e8e6:	4617      	mov	r7, r2
 800e8e8:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800e8ea:	e9d6 2500 	ldrd	r2, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800e8ee:	e9c0 1737 	strd	r1, r7, [r0, #220]	@ 0xdc
  cinfo->arith_code = is_arith;
 800e8f2:	f8c0 30e4 	str.w	r3, [r0, #228]	@ 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e8f6:	b93d      	cbnz	r5, 800e908 <get_sof+0x28>
 800e8f8:	68f3      	ldr	r3, [r6, #12]
 800e8fa:	4798      	blx	r3
 800e8fc:	b910      	cbnz	r0, 800e904 <get_sof+0x24>
 800e8fe:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800e900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e904:	e9d6 2500 	ldrd	r2, r5, [r6]
 800e908:	1e6b      	subs	r3, r5, #1
 800e90a:	7817      	ldrb	r7, [r2, #0]
 800e90c:	f000 8087 	beq.w	800ea1e <get_sof+0x13e>
 800e910:	1c55      	adds	r5, r2, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e912:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e914:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e918:	f000 808a 	beq.w	800ea30 <get_sof+0x150>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e91c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e91e:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e920:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e922:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e926:	f000 808c 	beq.w	800ea42 <get_sof+0x162>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e92a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e92c:	782a      	ldrb	r2, [r5, #0]
 800e92e:	3b01      	subs	r3, #1
 800e930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e934:	6222      	str	r2, [r4, #32]
 800e936:	f000 808d 	beq.w	800ea54 <get_sof+0x174>
 800e93a:	3501      	adds	r5, #1
 800e93c:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e93e:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e940:	6a22      	ldr	r2, [r4, #32]
 800e942:	440a      	add	r2, r1
 800e944:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e946:	f000 808e 	beq.w	800ea66 <get_sof+0x186>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e94a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e94c:	782a      	ldrb	r2, [r5, #0]
 800e94e:	3b01      	subs	r3, #1
 800e950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e954:	61e2      	str	r2, [r4, #28]
 800e956:	f000 808f 	beq.w	800ea78 <get_sof+0x198>
 800e95a:	3501      	adds	r5, #1
 800e95c:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e95e:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e960:	69e2      	ldr	r2, [r4, #28]
 800e962:	440a      	add	r2, r1
 800e964:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e966:	f000 8090 	beq.w	800ea8a <get_sof+0x1aa>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e96a:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e96c:	f103 39ff 	add.w	r9, r3, #4294967295
 800e970:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e974:	f8d4 21b4 	ldr.w	r2, [r4, #436]	@ 0x1b4
 800e978:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e97a:	6263      	str	r3, [r4, #36]	@ 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e97c:	4620      	mov	r0, r4
 800e97e:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e980:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e984:	619a      	str	r2, [r3, #24]
  length -= 8;
 800e986:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e98a:	69e2      	ldr	r2, [r4, #28]
 800e98c:	61da      	str	r2, [r3, #28]
 800e98e:	6a22      	ldr	r2, [r4, #32]
 800e990:	621a      	str	r2, [r3, #32]
 800e992:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e994:	625a      	str	r2, [r3, #36]	@ 0x24
 800e996:	2266      	movs	r2, #102	@ 0x66
 800e998:	615a      	str	r2, [r3, #20]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800e99e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800e9a2:	691b      	ldr	r3, [r3, #16]
 800e9a4:	b12b      	cbz	r3, 800e9b2 <get_sof+0xd2>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800e9a6:	6823      	ldr	r3, [r4, #0]
 800e9a8:	223c      	movs	r2, #60	@ 0x3c
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	615a      	str	r2, [r3, #20]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800e9b2:	6a23      	ldr	r3, [r4, #32]
 800e9b4:	b123      	cbz	r3, 800e9c0 <get_sof+0xe0>
 800e9b6:	69e3      	ldr	r3, [r4, #28]
 800e9b8:	b113      	cbz	r3, 800e9c0 <get_sof+0xe0>
      || cinfo->num_components <= 0)
 800e9ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	dc05      	bgt.n	800e9cc <get_sof+0xec>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	2221      	movs	r2, #33	@ 0x21
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	615a      	str	r2, [r3, #20]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800e9cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e9ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e9d2:	4543      	cmp	r3, r8
 800e9d4:	d005      	beq.n	800e9e2 <get_sof+0x102>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	220c      	movs	r2, #12
 800e9da:	4620      	mov	r0, r4
 800e9dc:	615a      	str	r2, [r3, #20]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800e9e2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800e9e6:	b94b      	cbnz	r3, 800e9fc <get_sof+0x11c>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800e9e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e9ea:	2158      	movs	r1, #88	@ 0x58
 800e9ec:	6863      	ldr	r3, [r4, #4]
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	434a      	muls	r2, r1
 800e9f2:	2101      	movs	r1, #1
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4798      	blx	r3
 800e9f8:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e9fc:	f8d4 70d8 	ldr.w	r7, [r4, #216]	@ 0xd8
 800ea00:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ea04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea08:	3758      	adds	r7, #88	@ 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ea0c:	4543      	cmp	r3, r8
 800ea0e:	dc45      	bgt.n	800ea9c <get_sof+0x1bc>
  cinfo->marker->saw_SOF = TRUE;
 800ea10:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800ea14:	2001      	movs	r0, #1
 800ea16:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800ea18:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800ea1c:	e770      	b.n	800e900 <get_sof+0x20>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ea1e:	68f3      	ldr	r3, [r6, #12]
 800ea20:	4620      	mov	r0, r4
 800ea22:	4798      	blx	r3
 800ea24:	2800      	cmp	r0, #0
 800ea26:	f43f af6a 	beq.w	800e8fe <get_sof+0x1e>
 800ea2a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea2e:	e770      	b.n	800e912 <get_sof+0x32>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ea30:	68f3      	ldr	r3, [r6, #12]
 800ea32:	4620      	mov	r0, r4
 800ea34:	4798      	blx	r3
 800ea36:	2800      	cmp	r0, #0
 800ea38:	f43f af61 	beq.w	800e8fe <get_sof+0x1e>
 800ea3c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea40:	e76d      	b.n	800e91e <get_sof+0x3e>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ea42:	68f3      	ldr	r3, [r6, #12]
 800ea44:	4620      	mov	r0, r4
 800ea46:	4798      	blx	r3
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	f43f af58 	beq.w	800e8fe <get_sof+0x1e>
 800ea4e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea52:	e76b      	b.n	800e92c <get_sof+0x4c>
 800ea54:	68f3      	ldr	r3, [r6, #12]
 800ea56:	4620      	mov	r0, r4
 800ea58:	4798      	blx	r3
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	f43f af4f 	beq.w	800e8fe <get_sof+0x1e>
 800ea60:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea64:	e76a      	b.n	800e93c <get_sof+0x5c>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800ea66:	68f3      	ldr	r3, [r6, #12]
 800ea68:	4620      	mov	r0, r4
 800ea6a:	4798      	blx	r3
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	f43f af46 	beq.w	800e8fe <get_sof+0x1e>
 800ea72:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea76:	e769      	b.n	800e94c <get_sof+0x6c>
 800ea78:	68f3      	ldr	r3, [r6, #12]
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4798      	blx	r3
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f43f af3d 	beq.w	800e8fe <get_sof+0x1e>
 800ea84:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea88:	e768      	b.n	800e95c <get_sof+0x7c>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800ea8a:	68f3      	ldr	r3, [r6, #12]
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	4798      	blx	r3
 800ea90:	2800      	cmp	r0, #0
 800ea92:	f43f af34 	beq.w	800e8fe <get_sof+0x1e>
 800ea96:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ea9a:	e767      	b.n	800e96c <get_sof+0x8c>
    compptr->component_index = ci;
 800ea9c:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800eaa0:	f1b9 0f00 	cmp.w	r9, #0
 800eaa4:	d107      	bne.n	800eab6 <get_sof+0x1d6>
 800eaa6:	68f3      	ldr	r3, [r6, #12]
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	4798      	blx	r3
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f af26 	beq.w	800e8fe <get_sof+0x1e>
 800eab2:	e9d6 5900 	ldrd	r5, r9, [r6]
 800eab6:	782b      	ldrb	r3, [r5, #0]
 800eab8:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800eabc:	f1b9 0301 	subs.w	r3, r9, #1
 800eac0:	d029      	beq.n	800eb16 <get_sof+0x236>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800eac2:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800eac4:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800eac6:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800eac8:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800eacc:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800ead0:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800ead4:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ead8:	d026      	beq.n	800eb28 <get_sof+0x248>
    INPUT_BYTE(cinfo, c, return FALSE);
 800eada:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800eadc:	f103 39ff 	add.w	r9, r3, #4294967295
 800eae0:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800eae4:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800eae8:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800eaea:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800eaee:	4620      	mov	r0, r4
 800eaf0:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800eaf2:	f108 0801 	add.w	r8, r8, #1
 800eaf6:	3758      	adds	r7, #88	@ 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800eaf8:	619a      	str	r2, [r3, #24]
 800eafa:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800eafe:	61da      	str	r2, [r3, #28]
 800eb00:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800eb04:	621a      	str	r2, [r3, #32]
 800eb06:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800eb0a:	f8c3 a014 	str.w	sl, [r3, #20]
 800eb0e:	625a      	str	r2, [r3, #36]	@ 0x24
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	4798      	blx	r3
       ci++, compptr++) {
 800eb14:	e779      	b.n	800ea0a <get_sof+0x12a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800eb16:	68f3      	ldr	r3, [r6, #12]
 800eb18:	4620      	mov	r0, r4
 800eb1a:	4798      	blx	r3
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	f43f aeee 	beq.w	800e8fe <get_sof+0x1e>
 800eb22:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eb26:	e7cd      	b.n	800eac4 <get_sof+0x1e4>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800eb28:	68f3      	ldr	r3, [r6, #12]
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4798      	blx	r3
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f43f aee5 	beq.w	800e8fe <get_sof+0x1e>
 800eb34:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eb38:	e7d0      	b.n	800eadc <get_sof+0x1fc>

0800eb3a <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800eb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800eb3e:	2a0d      	cmp	r2, #13
{
 800eb40:	460d      	mov	r5, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800eb42:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800eb44:	eb02 0603 	add.w	r6, r2, r3
{
 800eb48:	4604      	mov	r4, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800eb4a:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800eb4c:	d967      	bls.n	800ec1e <examine_app0+0xe4>
 800eb4e:	782a      	ldrb	r2, [r5, #0]
 800eb50:	2a4a      	cmp	r2, #74	@ 0x4a
 800eb52:	f040 8089 	bne.w	800ec68 <examine_app0+0x12e>
      GETJOCTET(data[0]) == 0x4A &&
 800eb56:	786a      	ldrb	r2, [r5, #1]
 800eb58:	2a46      	cmp	r2, #70	@ 0x46
 800eb5a:	f040 8085 	bne.w	800ec68 <examine_app0+0x12e>
      GETJOCTET(data[1]) == 0x46 &&
 800eb5e:	78aa      	ldrb	r2, [r5, #2]
 800eb60:	2a49      	cmp	r2, #73	@ 0x49
 800eb62:	d164      	bne.n	800ec2e <examine_app0+0xf4>
      GETJOCTET(data[2]) == 0x49 &&
 800eb64:	78ea      	ldrb	r2, [r5, #3]
 800eb66:	2a46      	cmp	r2, #70	@ 0x46
 800eb68:	d161      	bne.n	800ec2e <examine_app0+0xf4>
      GETJOCTET(data[3]) == 0x46 &&
 800eb6a:	792a      	ldrb	r2, [r5, #4]
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	d15e      	bne.n	800ec2e <examine_app0+0xf4>
    cinfo->saw_JFIF_marker = TRUE;
 800eb70:	2201      	movs	r2, #1
 800eb72:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800eb76:	796a      	ldrb	r2, [r5, #5]
 800eb78:	f880 2120 	strb.w	r2, [r0, #288]	@ 0x120
    if (cinfo->JFIF_major_version != 1)
 800eb7c:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800eb7e:	f895 c006 	ldrb.w	ip, [r5, #6]
 800eb82:	f880 c121 	strb.w	ip, [r0, #289]	@ 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800eb86:	79ef      	ldrb	r7, [r5, #7]
 800eb88:	f880 7122 	strb.w	r7, [r0, #290]	@ 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800eb8c:	892f      	ldrh	r7, [r5, #8]
 800eb8e:	ba7f      	rev16	r7, r7
 800eb90:	f8a0 7124 	strh.w	r7, [r0, #292]	@ 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800eb94:	896f      	ldrh	r7, [r5, #10]
 800eb96:	ba7f      	rev16	r7, r7
 800eb98:	f8a0 7126 	strh.w	r7, [r0, #294]	@ 0x126
    if (cinfo->JFIF_major_version != 1)
 800eb9c:	d007      	beq.n	800ebae <examine_app0+0x74>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800eb9e:	277a      	movs	r7, #122	@ 0x7a
 800eba0:	f8c1 c01c 	str.w	ip, [r1, #28]
 800eba4:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800eba8:	f04f 31ff 	mov.w	r1, #4294967295
 800ebac:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	f894 2120 	ldrb.w	r2, [r4, #288]	@ 0x120
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	619a      	str	r2, [r3, #24]
 800ebba:	f894 2121 	ldrb.w	r2, [r4, #289]	@ 0x121
 800ebbe:	61da      	str	r2, [r3, #28]
 800ebc0:	f8b4 2124 	ldrh.w	r2, [r4, #292]	@ 0x124
 800ebc4:	621a      	str	r2, [r3, #32]
 800ebc6:	f8b4 2126 	ldrh.w	r2, [r4, #294]	@ 0x126
 800ebca:	625a      	str	r2, [r3, #36]	@ 0x24
 800ebcc:	f894 2122 	ldrb.w	r2, [r4, #290]	@ 0x122
 800ebd0:	629a      	str	r2, [r3, #40]	@ 0x28
 800ebd2:	2259      	movs	r2, #89	@ 0x59
 800ebd4:	615a      	str	r2, [r3, #20]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800ebda:	7b2b      	ldrb	r3, [r5, #12]
 800ebdc:	7b6a      	ldrb	r2, [r5, #13]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	d00a      	beq.n	800ebf8 <examine_app0+0xbe>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	225c      	movs	r2, #92	@ 0x5c
 800ebe6:	2101      	movs	r1, #1
 800ebe8:	4620      	mov	r0, r4
 800ebea:	615a      	str	r2, [r3, #20]
 800ebec:	7b2a      	ldrb	r2, [r5, #12]
 800ebee:	619a      	str	r2, [r3, #24]
 800ebf0:	7b6a      	ldrb	r2, [r5, #13]
 800ebf2:	61da      	str	r2, [r3, #28]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ebf8:	7b2b      	ldrb	r3, [r5, #12]
    totallen -= APP0_DATA_LEN;
 800ebfa:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ebfc:	7b6a      	ldrb	r2, [r5, #13]
 800ebfe:	fb13 f302 	smulbb	r3, r3, r2
 800ec02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (totallen !=
 800ec06:	42b3      	cmp	r3, r6
 800ec08:	d030      	beq.n	800ec6c <examine_app0+0x132>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	225a      	movs	r2, #90	@ 0x5a
 800ec0e:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800ec12:	685b      	ldr	r3, [r3, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ec14:	4620      	mov	r0, r4
 800ec16:	2101      	movs	r1, #1
  }
}
 800ec18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ec1c:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800ec1e:	2a05      	cmp	r2, #5
 800ec20:	d922      	bls.n	800ec68 <examine_app0+0x12e>
 800ec22:	782a      	ldrb	r2, [r5, #0]
 800ec24:	2a4a      	cmp	r2, #74	@ 0x4a
 800ec26:	d11f      	bne.n	800ec68 <examine_app0+0x12e>
      GETJOCTET(data[0]) == 0x4A &&
 800ec28:	786a      	ldrb	r2, [r5, #1]
 800ec2a:	2a46      	cmp	r2, #70	@ 0x46
 800ec2c:	d11c      	bne.n	800ec68 <examine_app0+0x12e>
      GETJOCTET(data[1]) == 0x46 &&
 800ec2e:	78aa      	ldrb	r2, [r5, #2]
 800ec30:	2a58      	cmp	r2, #88	@ 0x58
 800ec32:	d119      	bne.n	800ec68 <examine_app0+0x12e>
      GETJOCTET(data[2]) == 0x58 &&
 800ec34:	78ea      	ldrb	r2, [r5, #3]
 800ec36:	2a58      	cmp	r2, #88	@ 0x58
 800ec38:	d116      	bne.n	800ec68 <examine_app0+0x12e>
      GETJOCTET(data[3]) == 0x58 &&
 800ec3a:	792a      	ldrb	r2, [r5, #4]
 800ec3c:	b9a2      	cbnz	r2, 800ec68 <examine_app0+0x12e>
    switch (GETJOCTET(data[5])) {
 800ec3e:	796a      	ldrb	r2, [r5, #5]
 800ec40:	2a11      	cmp	r2, #17
 800ec42:	d007      	beq.n	800ec54 <examine_app0+0x11a>
 800ec44:	2a13      	cmp	r2, #19
 800ec46:	d007      	beq.n	800ec58 <examine_app0+0x11e>
 800ec48:	2a10      	cmp	r2, #16
 800ec4a:	d107      	bne.n	800ec5c <examine_app0+0x122>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800ec4c:	226e      	movs	r2, #110	@ 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ec4e:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800ec52:	e7df      	b.n	800ec14 <examine_app0+0xda>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800ec54:	226f      	movs	r2, #111	@ 0x6f
 800ec56:	e7fa      	b.n	800ec4e <examine_app0+0x114>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800ec58:	2270      	movs	r2, #112	@ 0x70
 800ec5a:	e7f8      	b.n	800ec4e <examine_app0+0x114>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800ec5c:	225b      	movs	r2, #91	@ 0x5b
 800ec5e:	614a      	str	r2, [r1, #20]
 800ec60:	796a      	ldrb	r2, [r5, #5]
 800ec62:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800ec66:	e7d5      	b.n	800ec14 <examine_app0+0xda>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ec68:	224f      	movs	r2, #79	@ 0x4f
 800ec6a:	e7f0      	b.n	800ec4e <examine_app0+0x114>
}
 800ec6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec70 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800ec70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800ec74:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800ec76:	6804      	ldr	r4, [r0, #0]
{
 800ec78:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800ec7a:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800ec7c:	d92a      	bls.n	800ecd4 <examine_app14+0x64>
 800ec7e:	780f      	ldrb	r7, [r1, #0]
 800ec80:	2f41      	cmp	r7, #65	@ 0x41
 800ec82:	d127      	bne.n	800ecd4 <examine_app14+0x64>
      GETJOCTET(data[0]) == 0x41 &&
 800ec84:	784f      	ldrb	r7, [r1, #1]
 800ec86:	2f64      	cmp	r7, #100	@ 0x64
 800ec88:	d124      	bne.n	800ecd4 <examine_app14+0x64>
      GETJOCTET(data[1]) == 0x64 &&
 800ec8a:	788f      	ldrb	r7, [r1, #2]
 800ec8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec8e:	d121      	bne.n	800ecd4 <examine_app14+0x64>
      GETJOCTET(data[2]) == 0x6F &&
 800ec90:	78cf      	ldrb	r7, [r1, #3]
 800ec92:	2f62      	cmp	r7, #98	@ 0x62
 800ec94:	d11e      	bne.n	800ecd4 <examine_app14+0x64>
      GETJOCTET(data[3]) == 0x62 &&
 800ec96:	790f      	ldrb	r7, [r1, #4]
 800ec98:	2f65      	cmp	r7, #101	@ 0x65
 800ec9a:	d11b      	bne.n	800ecd4 <examine_app14+0x64>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800ec9c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 800eca0:	f8b1 2007 	ldrh.w	r2, [r1, #7]
    transform = GETJOCTET(data[11]);
 800eca4:	7acf      	ldrb	r7, [r1, #11]
 800eca6:	ba5b      	rev16	r3, r3
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800eca8:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800ecac:	ba52      	rev16	r2, r2
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	ba49      	rev16	r1, r1
 800ecb2:	b292      	uxth	r2, r2
 800ecb4:	b289      	uxth	r1, r1
 800ecb6:	e9c4 3708 	strd	r3, r7, [r4, #32]
 800ecba:	234e      	movs	r3, #78	@ 0x4e
 800ecbc:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800ecc0:	6163      	str	r3, [r4, #20]
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800ecc6:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800ecc8:	f885 712c 	strb.w	r7, [r5, #300]	@ 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800eccc:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800ecd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800ecd4:	2150      	movs	r1, #80	@ 0x50
 800ecd6:	4413      	add	r3, r2
 800ecd8:	4628      	mov	r0, r5
 800ecda:	6161      	str	r1, [r4, #20]
 800ecdc:	2101      	movs	r1, #1
 800ecde:	61a3      	str	r3, [r4, #24]
 800ece0:	4633      	mov	r3, r6
}
 800ece2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800ece6:	4718      	bx	r3

0800ece8 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800ece8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800ecec:	6986      	ldr	r6, [r0, #24]
{
 800ecee:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800ecf0:	e9d6 4700 	ldrd	r4, r7, [r6]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800ecf4:	b947      	cbnz	r7, 800ed08 <get_interesting_appn+0x20>
 800ecf6:	68f3      	ldr	r3, [r6, #12]
 800ecf8:	4798      	blx	r3
 800ecfa:	b918      	cbnz	r0, 800ed04 <get_interesting_appn+0x1c>
 800ecfc:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800ecfe:	b004      	add	sp, #16
 800ed00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed04:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ed08:	f894 9000 	ldrb.w	r9, [r4]
 800ed0c:	3f01      	subs	r7, #1
 800ed0e:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800ed12:	d01f      	beq.n	800ed54 <get_interesting_appn+0x6c>
 800ed14:	3401      	adds	r4, #1
 800ed16:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ed1a:	3f01      	subs	r7, #1
 800ed1c:	444d      	add	r5, r9
  length -= 2;
 800ed1e:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800ed20:	2d0d      	cmp	r5, #13
 800ed22:	dc1f      	bgt.n	800ed64 <get_interesting_appn+0x7c>
  else if (length > 0)
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	dd30      	ble.n	800ed8a <get_interesting_appn+0xa2>
    numtoread = (unsigned int) length;
 800ed28:	46a9      	mov	r9, r5
  for (i = 0; i < numtoread; i++)
 800ed2a:	f04f 0a00 	mov.w	sl, #0
 800ed2e:	45ca      	cmp	sl, r9
 800ed30:	d11b      	bne.n	800ed6a <get_interesting_appn+0x82>
  switch (cinfo->unread_marker) {
 800ed32:	f8d8 21b4 	ldr.w	r2, [r8, #436]	@ 0x1b4
  length -= numtoread;
 800ed36:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800ed3a:	2ae0      	cmp	r2, #224	@ 0xe0
 800ed3c:	d028      	beq.n	800ed90 <get_interesting_appn+0xa8>
 800ed3e:	2aee      	cmp	r2, #238	@ 0xee
 800ed40:	d032      	beq.n	800eda8 <get_interesting_appn+0xc0>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ed42:	f8d8 3000 	ldr.w	r3, [r8]
 800ed46:	2146      	movs	r1, #70	@ 0x46
 800ed48:	4640      	mov	r0, r8
 800ed4a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4798      	blx	r3
    break;
 800ed52:	e023      	b.n	800ed9c <get_interesting_appn+0xb4>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed54:	68f3      	ldr	r3, [r6, #12]
 800ed56:	4640      	mov	r0, r8
 800ed58:	4798      	blx	r3
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0ce      	beq.n	800ecfc <get_interesting_appn+0x14>
 800ed5e:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ed62:	e7d8      	b.n	800ed16 <get_interesting_appn+0x2e>
    numtoread = APPN_DATA_LEN;
 800ed64:	f04f 090e 	mov.w	r9, #14
 800ed68:	e7df      	b.n	800ed2a <get_interesting_appn+0x42>
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800ed6a:	b937      	cbnz	r7, 800ed7a <get_interesting_appn+0x92>
 800ed6c:	68f3      	ldr	r3, [r6, #12]
 800ed6e:	4640      	mov	r0, r8
 800ed70:	4798      	blx	r3
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d0c2      	beq.n	800ecfc <get_interesting_appn+0x14>
 800ed76:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ed7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed7e:	3f01      	subs	r7, #1
 800ed80:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800ed84:	f10a 0a01 	add.w	sl, sl, #1
 800ed88:	e7d1      	b.n	800ed2e <get_interesting_appn+0x46>
    numtoread = 0;
 800ed8a:	f04f 0900 	mov.w	r9, #0
 800ed8e:	e7d0      	b.n	800ed32 <get_interesting_appn+0x4a>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800ed90:	462b      	mov	r3, r5
 800ed92:	464a      	mov	r2, r9
 800ed94:	4669      	mov	r1, sp
 800ed96:	4640      	mov	r0, r8
 800ed98:	f7ff fecf 	bl	800eb3a <examine_app0>
  if (length > 0)
 800ed9c:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800ed9e:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800eda2:	dc08      	bgt.n	800edb6 <get_interesting_appn+0xce>
  return TRUE;
 800eda4:	2001      	movs	r0, #1
 800eda6:	e7aa      	b.n	800ecfe <get_interesting_appn+0x16>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800eda8:	462b      	mov	r3, r5
 800edaa:	464a      	mov	r2, r9
 800edac:	4669      	mov	r1, sp
 800edae:	4640      	mov	r0, r8
 800edb0:	f7ff ff5e 	bl	800ec70 <examine_app14>
    break;
 800edb4:	e7f2      	b.n	800ed9c <get_interesting_appn+0xb4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800edb6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800edba:	4629      	mov	r1, r5
 800edbc:	4640      	mov	r0, r8
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	4798      	blx	r3
 800edc2:	e7ef      	b.n	800eda4 <get_interesting_appn+0xbc>

0800edc4 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800edc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800edc8:	6984      	ldr	r4, [r0, #24]
{
 800edca:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800edcc:	e9d4 5300 	ldrd	r5, r3, [r4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800edd0:	b93b      	cbnz	r3, 800ede2 <skip_variable+0x1e>
 800edd2:	68e3      	ldr	r3, [r4, #12]
 800edd4:	4798      	blx	r3
 800edd6:	b910      	cbnz	r0, 800edde <skip_variable+0x1a>
 800edd8:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800edda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800edde:	e9d4 5300 	ldrd	r5, r3, [r4]
 800ede2:	f895 9000 	ldrb.w	r9, [r5]
 800ede6:	f1b3 0801 	subs.w	r8, r3, #1
 800edea:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800edee:	d017      	beq.n	800ee20 <skip_variable+0x5c>
 800edf0:	3501      	adds	r5, #1
 800edf2:	f815 6b01 	ldrb.w	r6, [r5], #1
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800edf6:	235d      	movs	r3, #93	@ 0x5d
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800edfc:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800edfe:	4638      	mov	r0, r7
 800ee00:	6153      	str	r3, [r2, #20]
  length -= 2;
 800ee02:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800ee04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ee08:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800ee0c:	6853      	ldr	r3, [r2, #4]
 800ee0e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee10:	f108 33ff 	add.w	r3, r8, #4294967295
  if (length > 0)
 800ee14:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800ee16:	6025      	str	r5, [r4, #0]
 800ee18:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800ee1a:	dc09      	bgt.n	800ee30 <skip_variable+0x6c>
  return TRUE;
 800ee1c:	2001      	movs	r0, #1
 800ee1e:	e7dc      	b.n	800edda <skip_variable+0x16>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee20:	68e3      	ldr	r3, [r4, #12]
 800ee22:	4638      	mov	r0, r7
 800ee24:	4798      	blx	r3
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d0d6      	beq.n	800edd8 <skip_variable+0x14>
 800ee2a:	e9d4 5800 	ldrd	r5, r8, [r4]
 800ee2e:	e7e0      	b.n	800edf2 <skip_variable+0x2e>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	4631      	mov	r1, r6
 800ee34:	4638      	mov	r0, r7
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	4798      	blx	r3
 800ee3a:	e7ef      	b.n	800ee1c <skip_variable+0x58>

0800ee3c <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800ee40:	6986      	ldr	r6, [r0, #24]
{
 800ee42:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800ee44:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800ee48:	b987      	cbnz	r7, 800ee6c <next_marker+0x30>
 800ee4a:	68f3      	ldr	r3, [r6, #12]
 800ee4c:	4640      	mov	r0, r8
 800ee4e:	4798      	blx	r3
 800ee50:	b950      	cbnz	r0, 800ee68 <next_marker+0x2c>
 800ee52:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800ee58:	f8d8 21cc 	ldr.w	r2, [r8, #460]	@ 0x1cc
 800ee5c:	6993      	ldr	r3, [r2, #24]
 800ee5e:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800ee60:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800ee62:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800ee66:	e7ef      	b.n	800ee48 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800ee68:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ee6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee70:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800ee72:	2bff      	cmp	r3, #255	@ 0xff
 800ee74:	d1f0      	bne.n	800ee58 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800ee76:	b937      	cbnz	r7, 800ee86 <next_marker+0x4a>
 800ee78:	68f3      	ldr	r3, [r6, #12]
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	4798      	blx	r3
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d0e7      	beq.n	800ee52 <next_marker+0x16>
 800ee82:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ee86:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ee8a:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800ee8c:	2dff      	cmp	r5, #255	@ 0xff
 800ee8e:	d0f2      	beq.n	800ee76 <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800ee90:	f8d8 21cc 	ldr.w	r2, [r8, #460]	@ 0x1cc
 800ee94:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800ee96:	b90d      	cbnz	r5, 800ee9c <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800ee98:	3302      	adds	r3, #2
 800ee9a:	e7e1      	b.n	800ee60 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800ee9c:	b173      	cbz	r3, 800eebc <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800ee9e:	f8d8 2000 	ldr.w	r2, [r8]
 800eea2:	2177      	movs	r1, #119	@ 0x77
 800eea4:	4640      	mov	r0, r8
 800eea6:	61d5      	str	r5, [r2, #28]
 800eea8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800eeac:	6853      	ldr	r3, [r2, #4]
 800eeae:	f04f 31ff 	mov.w	r1, #4294967295
 800eeb2:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800eeb4:	f8d8 31cc 	ldr.w	r3, [r8, #460]	@ 0x1cc
 800eeb8:	2200      	movs	r2, #0
 800eeba:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800eebc:	f8c8 51b4 	str.w	r5, [r8, #436]	@ 0x1b4
  return TRUE;
 800eec0:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800eec2:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800eec6:	e7c5      	b.n	800ee54 <next_marker+0x18>

0800eec8 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800eec8:	f8d0 31b4 	ldr.w	r3, [r0, #436]	@ 0x1b4
{
 800eecc:	b510      	push	{r4, lr}
 800eece:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800eed0:	b1e3      	cbz	r3, 800ef0c <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800eed2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
  if (cinfo->unread_marker ==
 800eed6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	@ 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800eeda:	6959      	ldr	r1, [r3, #20]
 800eedc:	f101 03d0 	add.w	r3, r1, #208	@ 0xd0
  if (cinfo->unread_marker ==
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d119      	bne.n	800ef18 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800eee4:	6823      	ldr	r3, [r4, #0]
 800eee6:	2264      	movs	r2, #100	@ 0x64
 800eee8:	4620      	mov	r0, r4
 800eeea:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	2103      	movs	r1, #3
 800eef2:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800eefa:	f8d4 21cc 	ldr.w	r2, [r4, #460]	@ 0x1cc

  return TRUE;
 800eefe:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800ef00:	6953      	ldr	r3, [r2, #20]
 800ef02:	3301      	adds	r3, #1
 800ef04:	f003 0307 	and.w	r3, r3, #7
 800ef08:	6153      	str	r3, [r2, #20]
  return TRUE;
 800ef0a:	e004      	b.n	800ef16 <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800ef0c:	f7ff ff96 	bl	800ee3c <next_marker>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d1de      	bne.n	800eed2 <read_restart_marker+0xa>
      return FALSE;
 800ef14:	2000      	movs	r0, #0
}
 800ef16:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800ef18:	69a3      	ldr	r3, [r4, #24]
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	4798      	blx	r3
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d1ea      	bne.n	800eefa <read_restart_marker+0x32>
 800ef24:	e7f6      	b.n	800ef14 <read_restart_marker+0x4c>

0800ef26 <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800ef26:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800ef28:	f8d0 21cc 	ldr.w	r2, [r0, #460]	@ 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800ef2c:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800ef30:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800ef34:	f8c0 31b4 	str.w	r3, [r0, #436]	@ 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800ef38:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800ef3a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  marker->pub.saw_SOF = FALSE;
 800ef3e:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800ef42:	4770      	bx	lr

0800ef44 <get_dht>:
{
 800ef44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800ef48:	6987      	ldr	r7, [r0, #24]
{
 800ef4a:	b0c9      	sub	sp, #292	@ 0x124
 800ef4c:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800ef4e:	e9d7 4600 	ldrd	r4, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ef52:	b946      	cbnz	r6, 800ef66 <get_dht+0x22>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	4798      	blx	r3
 800ef58:	b918      	cbnz	r0, 800ef62 <get_dht+0x1e>
 800ef5a:	2000      	movs	r0, #0
}
 800ef5c:	b049      	add	sp, #292	@ 0x124
 800ef5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ef62:	e9d7 4600 	ldrd	r4, r6, [r7]
 800ef66:	f894 8000 	ldrb.w	r8, [r4]
 800ef6a:	3e01      	subs	r6, #1
 800ef6c:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800ef70:	d018      	beq.n	800efa4 <get_dht+0x60>
 800ef72:	3401      	adds	r4, #1
 800ef74:	f814 9b01 	ldrb.w	r9, [r4], #1
 800ef78:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800ef7a:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ef7e:	44c1      	add	r9, r8
  length -= 2;
 800ef80:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800ef84:	f1b9 0f10 	cmp.w	r9, #16
 800ef88:	dc14      	bgt.n	800efb4 <get_dht+0x70>
  if (length != 0)
 800ef8a:	f1b9 0f00 	cmp.w	r9, #0
 800ef8e:	d005      	beq.n	800ef9c <get_dht+0x58>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	220c      	movs	r2, #12
 800ef94:	4628      	mov	r0, r5
 800ef96:	615a      	str	r2, [r3, #20]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4798      	blx	r3
  return TRUE;
 800ef9c:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800ef9e:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800efa2:	e7db      	b.n	800ef5c <get_dht+0x18>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4628      	mov	r0, r5
 800efa8:	4798      	blx	r3
 800efaa:	2800      	cmp	r0, #0
 800efac:	d0d5      	beq.n	800ef5a <get_dht+0x16>
 800efae:	e9d7 4600 	ldrd	r4, r6, [r7]
 800efb2:	e7df      	b.n	800ef74 <get_dht+0x30>
    INPUT_BYTE(cinfo, index, return FALSE);
 800efb4:	b936      	cbnz	r6, 800efc4 <get_dht+0x80>
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4628      	mov	r0, r5
 800efba:	4790      	blx	r2
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d0cc      	beq.n	800ef5a <get_dht+0x16>
 800efc0:	e9d7 4600 	ldrd	r4, r6, [r7]
 800efc4:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800efc8:	2152      	movs	r1, #82	@ 0x52
 800efca:	682a      	ldr	r2, [r5, #0]
 800efcc:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800efce:	f8cd 8000 	str.w	r8, [sp]
 800efd2:	3e01      	subs	r6, #1
    count = 0;
 800efd4:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800efd8:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800efdc:	6852      	ldr	r2, [r2, #4]
 800efde:	2101      	movs	r1, #1
 800efe0:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800efe2:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800efe4:	b946      	cbnz	r6, 800eff8 <get_dht+0xb4>
 800efe6:	68f9      	ldr	r1, [r7, #12]
 800efe8:	4628      	mov	r0, r5
 800efea:	9201      	str	r2, [sp, #4]
 800efec:	4788      	blx	r1
 800efee:	2800      	cmp	r0, #0
 800eff0:	d0b3      	beq.n	800ef5a <get_dht+0x16>
 800eff2:	9a01      	ldr	r2, [sp, #4]
 800eff4:	e9d7 4600 	ldrd	r4, r6, [r7]
 800eff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800effc:	3e01      	subs	r6, #1
 800effe:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800f002:	3201      	adds	r2, #1
      count += bits[i];
 800f004:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800f006:	2a11      	cmp	r2, #17
 800f008:	d1ec      	bne.n	800efe4 <get_dht+0xa0>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f00a:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800f00c:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f010:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800f014:	f04f 0958 	mov.w	r9, #88	@ 0x58
 800f018:	4628      	mov	r0, r5
    length -= 1 + 16;
 800f01a:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f01c:	6191      	str	r1, [r2, #24]
 800f01e:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800f022:	f8c2 9014 	str.w	r9, [r2, #20]
 800f026:	61d1      	str	r1, [r2, #28]
 800f028:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800f02c:	6211      	str	r1, [r2, #32]
 800f02e:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800f032:	6251      	str	r1, [r2, #36]	@ 0x24
 800f034:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800f038:	6291      	str	r1, [r2, #40]	@ 0x28
 800f03a:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800f03e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800f040:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800f044:	6311      	str	r1, [r2, #48]	@ 0x30
 800f046:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800f04a:	6351      	str	r1, [r2, #52]	@ 0x34
 800f04c:	2102      	movs	r1, #2
 800f04e:	6852      	ldr	r2, [r2, #4]
 800f050:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f052:	682a      	ldr	r2, [r5, #0]
 800f054:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800f058:	4628      	mov	r0, r5
 800f05a:	f8c2 9014 	str.w	r9, [r2, #20]
 800f05e:	6191      	str	r1, [r2, #24]
 800f060:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800f064:	61d1      	str	r1, [r2, #28]
 800f066:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800f06a:	6211      	str	r1, [r2, #32]
 800f06c:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800f070:	6251      	str	r1, [r2, #36]	@ 0x24
 800f072:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800f076:	6291      	str	r1, [r2, #40]	@ 0x28
 800f078:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800f07c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800f07e:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800f082:	6311      	str	r1, [r2, #48]	@ 0x30
 800f084:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800f088:	6351      	str	r1, [r2, #52]	@ 0x34
 800f08a:	2102      	movs	r1, #2
 800f08c:	6852      	ldr	r2, [r2, #4]
 800f08e:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800f090:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
 800f094:	dc02      	bgt.n	800f09c <get_dht+0x158>
 800f096:	9b01      	ldr	r3, [sp, #4]
 800f098:	4553      	cmp	r3, sl
 800f09a:	da05      	bge.n	800f0a8 <get_dht+0x164>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800f09c:	682a      	ldr	r2, [r5, #0]
 800f09e:	2109      	movs	r1, #9
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	6151      	str	r1, [r2, #20]
 800f0a4:	6812      	ldr	r2, [r2, #0]
 800f0a6:	4790      	blx	r2
 800f0a8:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800f0ac:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800f0ae:	45d1      	cmp	r9, sl
 800f0b0:	d13f      	bne.n	800f132 <get_dht+0x1ee>
    if (index & 0x10) {		/* AC table definition */
 800f0b2:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800f0bc:	bf17      	itett	ne
 800f0be:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800f0c2:	f108 082d 	addeq.w	r8, r8, #45	@ 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800f0c6:	f108 0821 	addne.w	r8, r8, #33	@ 0x21
      index -= 0x10;
 800f0ca:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800f0cc:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800f0ce:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	dd06      	ble.n	800f0e4 <get_dht+0x1a0>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800f0d6:	682a      	ldr	r2, [r5, #0]
 800f0d8:	211f      	movs	r1, #31
 800f0da:	4628      	mov	r0, r5
 800f0dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f0e0:	6812      	ldr	r2, [r2, #0]
 800f0e2:	4790      	blx	r2
    if (*htblptr == NULL)
 800f0e4:	f8d8 2000 	ldr.w	r2, [r8]
 800f0e8:	b922      	cbnz	r2, 800f0f4 <get_dht+0x1b0>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f7fb fc2a 	bl	800a944 <jpeg_alloc_huff_table>
 800f0f0:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	46de      	mov	lr, fp
 800f0f8:	f10d 0a1c 	add.w	sl, sp, #28
 800f0fc:	f88b 2000 	strb.w	r2, [fp]
 800f100:	f8d8 2000 	ldr.w	r2, [r8]
 800f104:	46f4      	mov	ip, lr
 800f106:	3208      	adds	r2, #8
 800f108:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800f10c:	45d4      	cmp	ip, sl
 800f10e:	f842 0c08 	str.w	r0, [r2, #-8]
 800f112:	f842 1c04 	str.w	r1, [r2, #-4]
 800f116:	46e6      	mov	lr, ip
 800f118:	d1f4      	bne.n	800f104 <get_dht+0x1c0>
 800f11a:	f89c 1000 	ldrb.w	r1, [ip]
 800f11e:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800f120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f124:	f8d8 0000 	ldr.w	r0, [r8]
 800f128:	a908      	add	r1, sp, #32
 800f12a:	3011      	adds	r0, #17
 800f12c:	f01b f8f7 	bl	802a31e <memcpy>
 800f130:	e728      	b.n	800ef84 <get_dht+0x40>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800f132:	b946      	cbnz	r6, 800f146 <get_dht+0x202>
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	4628      	mov	r0, r5
 800f138:	4790      	blx	r2
 800f13a:	2800      	cmp	r0, #0
 800f13c:	f43f af0d 	beq.w	800ef5a <get_dht+0x16>
 800f140:	a908      	add	r1, sp, #32
 800f142:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f146:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f14a:	3e01      	subs	r6, #1
 800f14c:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800f150:	f109 0901 	add.w	r9, r9, #1
 800f154:	e7ab      	b.n	800f0ae <get_dht+0x16a>
	...

0800f158 <read_markers>:
{
 800f158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15c:	4604      	mov	r4, r0
 800f15e:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800f160:	f8d4 31b4 	ldr.w	r3, [r4, #436]	@ 0x1b4
 800f164:	bb4b      	cbnz	r3, 800f1ba <read_markers+0x62>
      if (! cinfo->marker->saw_SOI) {
 800f166:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d179      	bne.n	800f264 <read_markers+0x10c>
  INPUT_VARS(cinfo);
 800f170:	69a6      	ldr	r6, [r4, #24]
 800f172:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f176:	b933      	cbnz	r3, 800f186 <read_markers+0x2e>
 800f178:	68f3      	ldr	r3, [r6, #12]
 800f17a:	4620      	mov	r0, r4
 800f17c:	4798      	blx	r3
 800f17e:	2800      	cmp	r0, #0
 800f180:	d075      	beq.n	800f26e <read_markers+0x116>
 800f182:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f186:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f188:	782f      	ldrb	r7, [r5, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f18a:	d064      	beq.n	800f256 <read_markers+0xfe>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f18c:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800f18e:	2fff      	cmp	r7, #255	@ 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f190:	f103 38ff 	add.w	r8, r3, #4294967295
 800f194:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800f198:	d102      	bne.n	800f1a0 <read_markers+0x48>
 800f19a:	f1b9 0fd8 	cmp.w	r9, #216	@ 0xd8
 800f19e:	d008      	beq.n	800f1b2 <read_markers+0x5a>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	2237      	movs	r2, #55	@ 0x37
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f8c3 901c 	str.w	r9, [r3, #28]
 800f1aa:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800f1b2:	f8c4 91b4 	str.w	r9, [r4, #436]	@ 0x1b4
  INPUT_SYNC(cinfo);
 800f1b6:	e9c6 5800 	strd	r5, r8, [r6]
    switch (cinfo->unread_marker) {
 800f1ba:	f8d4 31b4 	ldr.w	r3, [r4, #436]	@ 0x1b4
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	f000 83b4 	beq.w	800f92c <read_markers+0x7d4>
 800f1c4:	f1a3 02c0 	sub.w	r2, r3, #192	@ 0xc0
 800f1c8:	2a3e      	cmp	r2, #62	@ 0x3e
 800f1ca:	f200 83bc 	bhi.w	800f946 <read_markers+0x7ee>
 800f1ce:	2a3e      	cmp	r2, #62	@ 0x3e
 800f1d0:	f200 83b9 	bhi.w	800f946 <read_markers+0x7ee>
 800f1d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f1d8:	0094008b 	.word	0x0094008b
 800f1dc:	00a00097 	.word	0x00a00097
 800f1e0:	00a00232 	.word	0x00a00232
 800f1e4:	00a000a0 	.word	0x00a000a0
 800f1e8:	009b00a0 	.word	0x009b00a0
 800f1ec:	00a0009d 	.word	0x00a0009d
 800f1f0:	00a001b9 	.word	0x00a001b9
 800f1f4:	00a000a0 	.word	0x00a000a0
 800f1f8:	03aa03aa 	.word	0x03aa03aa
 800f1fc:	03aa03aa 	.word	0x03aa03aa
 800f200:	03aa03aa 	.word	0x03aa03aa
 800f204:	03aa03aa 	.word	0x03aa03aa
 800f208:	01ad004d 	.word	0x01ad004d
 800f20c:	023600a8 	.word	0x023600a8
 800f210:	034c03b3 	.word	0x034c03b3
 800f214:	03b703b7 	.word	0x03b703b7
 800f218:	039e039e 	.word	0x039e039e
 800f21c:	039e039e 	.word	0x039e039e
 800f220:	039e039e 	.word	0x039e039e
 800f224:	039e039e 	.word	0x039e039e
 800f228:	039e039e 	.word	0x039e039e
 800f22c:	039e039e 	.word	0x039e039e
 800f230:	039e039e 	.word	0x039e039e
 800f234:	039e039e 	.word	0x039e039e
 800f238:	03b703b7 	.word	0x03b703b7
 800f23c:	03b703b7 	.word	0x03b703b7
 800f240:	03b703b7 	.word	0x03b703b7
 800f244:	03b703b7 	.word	0x03b703b7
 800f248:	03b703b7 	.word	0x03b703b7
 800f24c:	03b703b7 	.word	0x03b703b7
 800f250:	03b703b7 	.word	0x03b703b7
 800f254:	03a6      	.short	0x03a6
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f256:	68f3      	ldr	r3, [r6, #12]
 800f258:	4620      	mov	r0, r4
 800f25a:	4798      	blx	r3
 800f25c:	b138      	cbz	r0, 800f26e <read_markers+0x116>
 800f25e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f262:	e794      	b.n	800f18e <read_markers+0x36>
	if (! next_marker(cinfo))
 800f264:	4620      	mov	r0, r4
 800f266:	f7ff fde9 	bl	800ee3c <next_marker>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d1a5      	bne.n	800f1ba <read_markers+0x62>
	  return JPEG_SUSPENDED;
 800f26e:	2000      	movs	r0, #0
 800f270:	e0ea      	b.n	800f448 <read_markers+0x2f0>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	2268      	movs	r2, #104	@ 0x68
 800f276:	2101      	movs	r1, #1
 800f278:	4620      	mov	r0, r4
 800f27a:	615a      	str	r2, [r3, #20]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800f280:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	b12b      	cbz	r3, 800f294 <read_markers+0x13c>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800f288:	6823      	ldr	r3, [r4, #0]
 800f28a:	223f      	movs	r2, #63	@ 0x3f
 800f28c:	4620      	mov	r0, r4
 800f28e:	615a      	str	r2, [r3, #20]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800f294:	2210      	movs	r2, #16
 800f296:	2100      	movs	r1, #0
 800f298:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800f29c:	f01a ff08 	bl	802a0b0 <memset>
    cinfo->arith_dc_U[i] = 1;
 800f2a0:	2210      	movs	r2, #16
 800f2a2:	2101      	movs	r1, #1
 800f2a4:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 800f2a8:	f01a ff02 	bl	802a0b0 <memset>
    cinfo->arith_ac_K[i] = 5;
 800f2ac:	2210      	movs	r2, #16
 800f2ae:	2105      	movs	r1, #5
 800f2b0:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 800f2b4:	f01a fefc 	bl	802a0b0 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800f2b8:	f240 1201 	movw	r2, #257	@ 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800f2bc:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800f2be:	f8a4 2120 	strh.w	r2, [r4, #288]	@ 0x120
  cinfo->X_density = 1;
 800f2c2:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800f2c6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800f2ca:	f8c4 3130 	str.w	r3, [r4, #304]	@ 0x130
  cinfo->density_unit = 0;
 800f2ce:	f884 3122 	strb.w	r3, [r4, #290]	@ 0x122
  cinfo->Adobe_transform = 0;
 800f2d2:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800f2d6:	e9c4 2349 	strd	r2, r3, [r4, #292]	@ 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800f2da:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
  cinfo->marker->saw_SOI = TRUE;
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f2e4:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
    if (cinfo->unread_marker == 0) {
 800f2ec:	e738      	b.n	800f160 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7ff faf3 	bl	800e8e0 <get_sof>
      if (! skip_variable(cinfo))
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d1f3      	bne.n	800f2e6 <read_markers+0x18e>
 800f2fe:	e7b6      	b.n	800f26e <read_markers+0x116>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800f300:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f302:	2200      	movs	r2, #0
 800f304:	e001      	b.n	800f30a <read_markers+0x1b2>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800f306:	2300      	movs	r3, #0
 800f308:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f30a:	2100      	movs	r1, #0
 800f30c:	e7f2      	b.n	800f2f4 <read_markers+0x19c>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f30e:	2301      	movs	r3, #1
 800f310:	e7f7      	b.n	800f302 <read_markers+0x1aa>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f312:	2301      	movs	r3, #1
 800f314:	461a      	mov	r2, r3
 800f316:	e7f8      	b.n	800f30a <read_markers+0x1b2>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800f318:	6822      	ldr	r2, [r4, #0]
 800f31a:	213e      	movs	r1, #62	@ 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f31c:	4620      	mov	r0, r4
 800f31e:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f322:	6813      	ldr	r3, [r2, #0]
 800f324:	4798      	blx	r3
      break;
 800f326:	e7de      	b.n	800f2e6 <read_markers+0x18e>
  if (! cinfo->marker->saw_SOF)
 800f328:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
  INPUT_VARS(cinfo);
 800f32c:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800f32e:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800f330:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800f334:	b92b      	cbnz	r3, 800f342 <read_markers+0x1ea>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800f336:	6823      	ldr	r3, [r4, #0]
 800f338:	2240      	movs	r2, #64	@ 0x40
 800f33a:	4620      	mov	r0, r4
 800f33c:	615a      	str	r2, [r3, #20]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f342:	b936      	cbnz	r6, 800f352 <read_markers+0x1fa>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	4620      	mov	r0, r4
 800f348:	4798      	blx	r3
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d08f      	beq.n	800f26e <read_markers+0x116>
 800f34e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f352:	f895 9000 	ldrb.w	r9, [r5]
 800f356:	3e01      	subs	r6, #1
 800f358:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f35c:	d077      	beq.n	800f44e <read_markers+0x2f6>
 800f35e:	3501      	adds	r5, #1
 800f360:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f364:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f366:	44c8      	add	r8, r9
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f368:	d07a      	beq.n	800f460 <read_markers+0x308>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f36a:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f36c:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800f370:	2269      	movs	r2, #105	@ 0x69
 800f372:	6823      	ldr	r3, [r4, #0]
 800f374:	2101      	movs	r1, #1
 800f376:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f378:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800f37a:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800f382:	f109 0303 	add.w	r3, r9, #3
 800f386:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800f38a:	d108      	bne.n	800f39e <read_markers+0x246>
 800f38c:	f1b9 0f04 	cmp.w	r9, #4
 800f390:	dc05      	bgt.n	800f39e <read_markers+0x246>
 800f392:	f1b9 0f00 	cmp.w	r9, #0
 800f396:	d108      	bne.n	800f3aa <read_markers+0x252>
      (n == 0 && !cinfo->progressive_mode))
 800f398:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800f39c:	b92b      	cbnz	r3, 800f3aa <read_markers+0x252>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	220c      	movs	r2, #12
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	615a      	str	r2, [r3, #20]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800f3aa:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
  for (i = 0; i < n; i++) {
 800f3ae:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800f3b2:	f8c4 9150 	str.w	r9, [r4, #336]	@ 0x150
  for (i = 0; i < n; i++) {
 800f3b6:	9301      	str	r3, [sp, #4]
 800f3b8:	45d1      	cmp	r9, sl
 800f3ba:	dc5a      	bgt.n	800f472 <read_markers+0x31a>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3bc:	b93e      	cbnz	r6, 800f3ce <read_markers+0x276>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	4798      	blx	r3
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	f43f af52 	beq.w	800f26e <read_markers+0x116>
 800f3ca:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f3ce:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3d0:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3d2:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3d6:	f000 809a 	beq.w	800f50e <read_markers+0x3b6>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3da:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3dc:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3de:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3e0:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3e4:	f000 809c 	beq.w	800f520 <read_markers+0x3c8>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3e8:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3ea:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3f2:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800f3f4:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800f3f6:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800f3fa:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
  cinfo->Al = (c     ) & 15;
 800f3fe:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800f402:	f8d4 2198 	ldr.w	r2, [r4, #408]	@ 0x198
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	619a      	str	r2, [r3, #24]
 800f40a:	f8d4 219c 	ldr.w	r2, [r4, #412]	@ 0x19c
 800f40e:	61da      	str	r2, [r3, #28]
 800f410:	f8d4 21a0 	ldr.w	r2, [r4, #416]	@ 0x1a0
 800f414:	621a      	str	r2, [r3, #32]
 800f416:	f8d4 21a4 	ldr.w	r2, [r4, #420]	@ 0x1a4
 800f41a:	625a      	str	r2, [r3, #36]	@ 0x24
 800f41c:	226b      	movs	r2, #107	@ 0x6b
 800f41e:	615a      	str	r2, [r3, #20]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800f424:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f428:	2200      	movs	r2, #0
 800f42a:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800f42c:	f1b9 0f00 	cmp.w	r9, #0
 800f430:	d004      	beq.n	800f43c <read_markers+0x2e4>
 800f432:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800f436:	3301      	adds	r3, #1
 800f438:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800f43c:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800f43e:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f440:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800f444:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
}
 800f448:	b005      	add	sp, #20
 800f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	4620      	mov	r0, r4
 800f452:	4798      	blx	r3
 800f454:	2800      	cmp	r0, #0
 800f456:	f43f af0a 	beq.w	800f26e <read_markers+0x116>
 800f45a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f45e:	e77f      	b.n	800f360 <read_markers+0x208>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	4620      	mov	r0, r4
 800f464:	4798      	blx	r3
 800f466:	2800      	cmp	r0, #0
 800f468:	f43f af01 	beq.w	800f26e <read_markers+0x116>
 800f46c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f470:	e77c      	b.n	800f36c <read_markers+0x214>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f472:	b93e      	cbnz	r6, 800f484 <read_markers+0x32c>
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	4620      	mov	r0, r4
 800f478:	4798      	blx	r3
 800f47a:	2800      	cmp	r0, #0
 800f47c:	f43f aef7 	beq.w	800f26e <read_markers+0x116>
 800f480:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f484:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f486:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f48a:	d02f      	beq.n	800f4ec <read_markers+0x394>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f48c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800f48e:	3e01      	subs	r6, #1
 800f490:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f494:	f8d4 80d8 	ldr.w	r8, [r4, #216]	@ 0xd8
 800f498:	2000      	movs	r0, #0
 800f49a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f49c:	4290      	cmp	r0, r2
 800f49e:	db2e      	blt.n	800f4fe <read_markers+0x3a6>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800f4a0:	6821      	ldr	r1, [r4, #0]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	9302      	str	r3, [sp, #8]
 800f4a6:	2304      	movs	r3, #4
 800f4a8:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800f4ac:	6809      	ldr	r1, [r1, #0]
 800f4ae:	4788      	blx	r1
 800f4b0:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800f4b2:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800f4b4:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800f4b6:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f4ba:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800f4bc:	f842 8f04 	str.w	r8, [r2, #4]!
  for (i = 0; i < n; i++) {
 800f4c0:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800f4c4:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f4c8:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800f4ca:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f4ce:	f8c1 b018 	str.w	fp, [r1, #24]
 800f4d2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800f4d6:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f4d8:	61cb      	str	r3, [r1, #28]
 800f4da:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f4de:	620b      	str	r3, [r1, #32]
 800f4e0:	236a      	movs	r3, #106	@ 0x6a
 800f4e2:	614b      	str	r3, [r1, #20]
 800f4e4:	684b      	ldr	r3, [r1, #4]
 800f4e6:	2101      	movs	r1, #1
 800f4e8:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800f4ea:	e765      	b.n	800f3b8 <read_markers+0x260>
    INPUT_BYTE(cinfo, c, return FALSE);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	4798      	blx	r3
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	f43f aebb 	beq.w	800f26e <read_markers+0x116>
 800f4f8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f4fc:	e7c7      	b.n	800f48e <read_markers+0x336>
      if (cc == compptr->component_id)
 800f4fe:	f8d8 1000 	ldr.w	r1, [r8]
 800f502:	458b      	cmp	fp, r1
 800f504:	d0d5      	beq.n	800f4b2 <read_markers+0x35a>
	 ci++, compptr++) {
 800f506:	3001      	adds	r0, #1
 800f508:	f108 0858 	add.w	r8, r8, #88	@ 0x58
 800f50c:	e7c6      	b.n	800f49c <read_markers+0x344>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	4620      	mov	r0, r4
 800f512:	4798      	blx	r3
 800f514:	2800      	cmp	r0, #0
 800f516:	f43f aeaa 	beq.w	800f26e <read_markers+0x116>
 800f51a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f51e:	e75d      	b.n	800f3dc <read_markers+0x284>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4620      	mov	r0, r4
 800f524:	4798      	blx	r3
 800f526:	2800      	cmp	r0, #0
 800f528:	f43f aea1 	beq.w	800f26e <read_markers+0x116>
 800f52c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f530:	e75b      	b.n	800f3ea <read_markers+0x292>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	2257      	movs	r2, #87	@ 0x57
 800f536:	4620      	mov	r0, r4
 800f538:	2101      	movs	r1, #1
 800f53a:	615a      	str	r2, [r3, #20]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800f540:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800f542:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800f544:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
      return JPEG_REACHED_EOI;
 800f548:	e77e      	b.n	800f448 <read_markers+0x2f0>
  INPUT_VARS(cinfo);
 800f54a:	69a7      	ldr	r7, [r4, #24]
 800f54c:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f550:	b93e      	cbnz	r6, 800f562 <read_markers+0x40a>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	4620      	mov	r0, r4
 800f556:	4798      	blx	r3
 800f558:	2800      	cmp	r0, #0
 800f55a:	f43f ae88 	beq.w	800f26e <read_markers+0x116>
 800f55e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f562:	f895 9000 	ldrb.w	r9, [r5]
 800f566:	3e01      	subs	r6, #1
 800f568:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f56c:	d013      	beq.n	800f596 <read_markers+0x43e>
 800f56e:	3501      	adds	r5, #1
 800f570:	f815 8b01 	ldrb.w	r8, [r5], #1
 800f574:	3e01      	subs	r6, #1
 800f576:	44c8      	add	r8, r9
  length -= 2;
 800f578:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800f57c:	f1b8 0f00 	cmp.w	r8, #0
 800f580:	dc12      	bgt.n	800f5a8 <read_markers+0x450>
  if (length != 0)
 800f582:	d005      	beq.n	800f590 <read_markers+0x438>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f584:	6823      	ldr	r3, [r4, #0]
 800f586:	220c      	movs	r2, #12
 800f588:	4620      	mov	r0, r4
 800f58a:	615a      	str	r2, [r3, #20]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800f590:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800f592:	607e      	str	r6, [r7, #4]
  return TRUE;
 800f594:	e6a7      	b.n	800f2e6 <read_markers+0x18e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	4620      	mov	r0, r4
 800f59a:	4798      	blx	r3
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f43f ae66 	beq.w	800f26e <read_markers+0x116>
 800f5a2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f5a6:	e7e3      	b.n	800f570 <read_markers+0x418>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f5a8:	b93e      	cbnz	r6, 800f5ba <read_markers+0x462>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	4798      	blx	r3
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	f43f ae5c 	beq.w	800f26e <read_markers+0x116>
 800f5b6:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800f5ba:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800f5bc:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800f5c0:	d01e      	beq.n	800f600 <read_markers+0x4a8>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f5c2:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f5c4:	6822      	ldr	r2, [r4, #0]
 800f5c6:	2351      	movs	r3, #81	@ 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800f5c8:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800f5d0:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f5d2:	f8c2 901c 	str.w	r9, [r2, #28]
    length -= 2;
 800f5d6:	f1a8 0802 	sub.w	r8, r8, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f5da:	eb04 0a0b 	add.w	sl, r4, fp
 800f5de:	e9c2 3b05 	strd	r3, fp, [r2, #20]
 800f5e2:	6852      	ldr	r2, [r2, #4]
 800f5e4:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800f5e6:	f1bb 0f1f 	cmp.w	fp, #31
 800f5ea:	d912      	bls.n	800f612 <read_markers+0x4ba>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800f5ec:	6821      	ldr	r1, [r4, #0]
 800f5ee:	231d      	movs	r3, #29
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800f5f6:	680b      	ldr	r3, [r1, #0]
 800f5f8:	4798      	blx	r3
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800f5fa:	f88a 90f8 	strb.w	r9, [sl, #248]	@ 0xf8
 800f5fe:	e7bd      	b.n	800f57c <read_markers+0x424>
    INPUT_BYTE(cinfo, val, return FALSE);
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	4620      	mov	r0, r4
 800f604:	4790      	blx	r2
 800f606:	2800      	cmp	r0, #0
 800f608:	f43f ae31 	beq.w	800f26e <read_markers+0x116>
 800f60c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f610:	e7d8      	b.n	800f5c4 <read_markers+0x46c>
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800f612:	f1bb 0f0f 	cmp.w	fp, #15
 800f616:	dcf0      	bgt.n	800f5fa <read_markers+0x4a2>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800f618:	f009 010f 	and.w	r1, r9, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800f61c:	ea4f 1319 	mov.w	r3, r9, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800f620:	4299      	cmp	r1, r3
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800f622:	f88a 10e8 	strb.w	r1, [sl, #232]	@ 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800f626:	f88a 30f8 	strb.w	r3, [sl, #248]	@ 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800f62a:	d9a7      	bls.n	800f57c <read_markers+0x424>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	221e      	movs	r2, #30
 800f630:	4620      	mov	r0, r4
 800f632:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4798      	blx	r3
 800f63a:	e79f      	b.n	800f57c <read_markers+0x424>
      if (! get_dht(cinfo))
 800f63c:	4620      	mov	r0, r4
 800f63e:	f7ff fc81 	bl	800ef44 <get_dht>
 800f642:	e65a      	b.n	800f2fa <read_markers+0x1a2>
  INPUT_VARS(cinfo);
 800f644:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800f648:	e9d8 5700 	ldrd	r5, r7, [r8]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f64c:	b947      	cbnz	r7, 800f660 <read_markers+0x508>
 800f64e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f652:	4620      	mov	r0, r4
 800f654:	4798      	blx	r3
 800f656:	2800      	cmp	r0, #0
 800f658:	f43f ae09 	beq.w	800f26e <read_markers+0x116>
 800f65c:	e9d8 5700 	ldrd	r5, r7, [r8]
 800f660:	782e      	ldrb	r6, [r5, #0]
 800f662:	3f01      	subs	r7, #1
 800f664:	ea4f 2606 	mov.w	r6, r6, lsl #8
 800f668:	d013      	beq.n	800f692 <read_markers+0x53a>
 800f66a:	3501      	adds	r5, #1
 800f66c:	f815 9b01 	ldrb.w	r9, [r5], #1
 800f670:	3f01      	subs	r7, #1
 800f672:	44b1      	add	r9, r6
  length -= 2;
 800f674:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800f678:	f1b9 0f00 	cmp.w	r9, #0
 800f67c:	dc13      	bgt.n	800f6a6 <read_markers+0x54e>
  if (length != 0)
 800f67e:	d005      	beq.n	800f68c <read_markers+0x534>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f680:	6823      	ldr	r3, [r4, #0]
 800f682:	220c      	movs	r2, #12
 800f684:	4620      	mov	r0, r4
 800f686:	615a      	str	r2, [r3, #20]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800f68c:	e9c8 5700 	strd	r5, r7, [r8]
  return TRUE;
 800f690:	e629      	b.n	800f2e6 <read_markers+0x18e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f692:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f696:	4620      	mov	r0, r4
 800f698:	4798      	blx	r3
 800f69a:	2800      	cmp	r0, #0
 800f69c:	f43f ade7 	beq.w	800f26e <read_markers+0x116>
 800f6a0:	e9d8 5700 	ldrd	r5, r7, [r8]
 800f6a4:	e7e2      	b.n	800f66c <read_markers+0x514>
    length--;
 800f6a6:	f109 39ff 	add.w	r9, r9, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800f6aa:	b947      	cbnz	r7, 800f6be <read_markers+0x566>
 800f6ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	4798      	blx	r3
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	f43f adda 	beq.w	800f26e <read_markers+0x116>
 800f6ba:	e9d8 5700 	ldrd	r5, r7, [r8]
 800f6be:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800f6c2:	2253      	movs	r2, #83	@ 0x53
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	4620      	mov	r0, r4
    prec = n >> 4;
 800f6c8:	ea4f 132a 	mov.w	r3, sl, asr #4
 800f6cc:	f00a 060f 	and.w	r6, sl, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800f6d0:	3f01      	subs	r7, #1
    prec = n >> 4;
 800f6d2:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800f6d4:	6823      	ldr	r3, [r4, #0]
 800f6d6:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800f6da:	9a01      	ldr	r2, [sp, #4]
 800f6dc:	61da      	str	r2, [r3, #28]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	4798      	blx	r3
    if (n >= NUM_QUANT_TBLS)
 800f6e2:	f01a 0f0c 	tst.w	sl, #12
 800f6e6:	d006      	beq.n	800f6f6 <read_markers+0x59e>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	2220      	movs	r2, #32
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4798      	blx	r3
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800f6f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f6fa:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 800f6fe:	b923      	cbnz	r3, 800f70a <read_markers+0x5b2>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800f700:	4620      	mov	r0, r4
 800f702:	f7fb f915 	bl	800a930 <jpeg_alloc_quant_table>
 800f706:	f8c6 00a4 	str.w	r0, [r6, #164]	@ 0xa4
    if (prec) {
 800f70a:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800f70c:	f8d6 60a4 	ldr.w	r6, [r6, #164]	@ 0xa4
    if (prec) {
 800f710:	2b00      	cmp	r3, #0
 800f712:	d055      	beq.n	800f7c0 <read_markers+0x668>
      if (length < DCTSIZE2 * 2) {
 800f714:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800f718:	dc69      	bgt.n	800f7ee <read_markers+0x696>
 800f71a:	1eb3      	subs	r3, r6, #2
 800f71c:	f106 027e 	add.w	r2, r6, #126	@ 0x7e
	  quant_ptr->quantval[i] = 1;
 800f720:	2101      	movs	r1, #1
 800f722:	f823 1f02 	strh.w	r1, [r3, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800f726:	429a      	cmp	r2, r3
 800f728:	d1fb      	bne.n	800f722 <read_markers+0x5ca>
	count = length >> 1;
 800f72a:	ea4f 0b69 	mov.w	fp, r9, asr #1
    switch (count) {
 800f72e:	f1bb 0f19 	cmp.w	fp, #25
 800f732:	d060      	beq.n	800f7f6 <read_markers+0x69e>
 800f734:	dc51      	bgt.n	800f7da <read_markers+0x682>
 800f736:	f1bb 0f09 	cmp.w	fp, #9
 800f73a:	d05e      	beq.n	800f7fa <read_markers+0x6a2>
 800f73c:	f1bb 0f10 	cmp.w	fp, #16
 800f740:	d05d      	beq.n	800f7fe <read_markers+0x6a6>
    default:    natural_order = jpeg_natural_order;  break;
 800f742:	4b82      	ldr	r3, [pc, #520]	@ (800f94c <read_markers+0x7f4>)
 800f744:	4a82      	ldr	r2, [pc, #520]	@ (800f950 <read_markers+0x7f8>)
 800f746:	f1bb 0f04 	cmp.w	fp, #4
 800f74a:	bf18      	it	ne
 800f74c:	4613      	movne	r3, r2
    for (i = 0; i < count; i++) {
 800f74e:	469a      	mov	sl, r3
 800f750:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 800f754:	9302      	str	r3, [sp, #8]
 800f756:	9b02      	ldr	r3, [sp, #8]
 800f758:	4553      	cmp	r3, sl
 800f75a:	d154      	bne.n	800f806 <read_markers+0x6ae>
    if (cinfo->err->trace_level >= 2) {
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f760:	2b01      	cmp	r3, #1
 800f762:	dd24      	ble.n	800f7ae <read_markers+0x656>
 800f764:	f106 0a80 	add.w	sl, r6, #128	@ 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800f768:	225f      	movs	r2, #95	@ 0x5f
 800f76a:	8831      	ldrh	r1, [r6, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800f76c:	3610      	adds	r6, #16
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800f76e:	6823      	ldr	r3, [r4, #0]
 800f770:	4620      	mov	r0, r4
 800f772:	6199      	str	r1, [r3, #24]
 800f774:	f836 1c0e 	ldrh.w	r1, [r6, #-14]
 800f778:	61d9      	str	r1, [r3, #28]
 800f77a:	f836 1c0c 	ldrh.w	r1, [r6, #-12]
 800f77e:	6219      	str	r1, [r3, #32]
 800f780:	f836 1c0a 	ldrh.w	r1, [r6, #-10]
 800f784:	6259      	str	r1, [r3, #36]	@ 0x24
 800f786:	f836 1c08 	ldrh.w	r1, [r6, #-8]
 800f78a:	6299      	str	r1, [r3, #40]	@ 0x28
 800f78c:	f836 1c06 	ldrh.w	r1, [r6, #-6]
 800f790:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800f792:	f836 1c04 	ldrh.w	r1, [r6, #-4]
 800f796:	6319      	str	r1, [r3, #48]	@ 0x30
 800f798:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 800f79c:	615a      	str	r2, [r3, #20]
 800f79e:	6359      	str	r1, [r3, #52]	@ 0x34
 800f7a0:	2102      	movs	r1, #2
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	4798      	blx	r3
      for (i = 0; i < DCTSIZE2; i += 8) {
 800f7a6:	4556      	cmp	r6, sl
 800f7a8:	f04f 025f 	mov.w	r2, #95	@ 0x5f
 800f7ac:	d1dd      	bne.n	800f76a <read_markers+0x612>
    if (prec) length -= count;
 800f7ae:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800f7b0:	eba9 090b 	sub.w	r9, r9, fp
    if (prec) length -= count;
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f43f af5f 	beq.w	800f678 <read_markers+0x520>
 800f7ba:	eba9 090b 	sub.w	r9, r9, fp
 800f7be:	e75b      	b.n	800f678 <read_markers+0x520>
      if (length < DCTSIZE2) {
 800f7c0:	f1b9 0f3f 	cmp.w	r9, #63	@ 0x3f
 800f7c4:	dc13      	bgt.n	800f7ee <read_markers+0x696>
 800f7c6:	1eb3      	subs	r3, r6, #2
 800f7c8:	f106 027e 	add.w	r2, r6, #126	@ 0x7e
	  quant_ptr->quantval[i] = 1;
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	f823 1f02 	strh.w	r1, [r3, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d1fb      	bne.n	800f7ce <read_markers+0x676>
 800f7d6:	46cb      	mov	fp, r9
 800f7d8:	e7a9      	b.n	800f72e <read_markers+0x5d6>
    switch (count) {
 800f7da:	f1bb 0f24 	cmp.w	fp, #36	@ 0x24
 800f7de:	d010      	beq.n	800f802 <read_markers+0x6aa>
    default:    natural_order = jpeg_natural_order;  break;
 800f7e0:	4b5c      	ldr	r3, [pc, #368]	@ (800f954 <read_markers+0x7fc>)
 800f7e2:	4a5b      	ldr	r2, [pc, #364]	@ (800f950 <read_markers+0x7f8>)
 800f7e4:	f1bb 0f31 	cmp.w	fp, #49	@ 0x31
 800f7e8:	bf18      	it	ne
 800f7ea:	4613      	movne	r3, r2
 800f7ec:	e7af      	b.n	800f74e <read_markers+0x5f6>
	count = DCTSIZE2;
 800f7ee:	f04f 0b40 	mov.w	fp, #64	@ 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800f7f2:	4b57      	ldr	r3, [pc, #348]	@ (800f950 <read_markers+0x7f8>)
 800f7f4:	e7ab      	b.n	800f74e <read_markers+0x5f6>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800f7f6:	4b58      	ldr	r3, [pc, #352]	@ (800f958 <read_markers+0x800>)
 800f7f8:	e7a9      	b.n	800f74e <read_markers+0x5f6>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800f7fa:	4b58      	ldr	r3, [pc, #352]	@ (800f95c <read_markers+0x804>)
 800f7fc:	e7a7      	b.n	800f74e <read_markers+0x5f6>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800f7fe:	4b58      	ldr	r3, [pc, #352]	@ (800f960 <read_markers+0x808>)
 800f800:	e7a5      	b.n	800f74e <read_markers+0x5f6>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800f802:	4b58      	ldr	r3, [pc, #352]	@ (800f964 <read_markers+0x80c>)
 800f804:	e7a3      	b.n	800f74e <read_markers+0x5f6>
      if (prec)
 800f806:	9b01      	ldr	r3, [sp, #4]
 800f808:	b323      	cbz	r3, 800f854 <read_markers+0x6fc>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f80a:	b947      	cbnz	r7, 800f81e <read_markers+0x6c6>
 800f80c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f810:	4620      	mov	r0, r4
 800f812:	4798      	blx	r3
 800f814:	2800      	cmp	r0, #0
 800f816:	f43f ad2a 	beq.w	800f26e <read_markers+0x116>
 800f81a:	e9d8 5700 	ldrd	r5, r7, [r8]
 800f81e:	782a      	ldrb	r2, [r5, #0]
 800f820:	3f01      	subs	r7, #1
 800f822:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f826:	d009      	beq.n	800f83c <read_markers+0x6e4>
 800f828:	3501      	adds	r5, #1
 800f82a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f82e:	3f01      	subs	r7, #1
 800f830:	4413      	add	r3, r2
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800f832:	f85a 2b04 	ldr.w	r2, [sl], #4
 800f836:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
    for (i = 0; i < count; i++) {
 800f83a:	e78c      	b.n	800f756 <read_markers+0x5fe>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f83c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f840:	4620      	mov	r0, r4
 800f842:	9203      	str	r2, [sp, #12]
 800f844:	4798      	blx	r3
 800f846:	2800      	cmp	r0, #0
 800f848:	f43f ad11 	beq.w	800f26e <read_markers+0x116>
 800f84c:	9a03      	ldr	r2, [sp, #12]
 800f84e:	e9d8 5700 	ldrd	r5, r7, [r8]
 800f852:	e7ea      	b.n	800f82a <read_markers+0x6d2>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800f854:	b947      	cbnz	r7, 800f868 <read_markers+0x710>
 800f856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f85a:	4620      	mov	r0, r4
 800f85c:	4798      	blx	r3
 800f85e:	2800      	cmp	r0, #0
 800f860:	f43f ad05 	beq.w	800f26e <read_markers+0x116>
 800f864:	e9d8 5700 	ldrd	r5, r7, [r8]
 800f868:	3f01      	subs	r7, #1
 800f86a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f86e:	e7e0      	b.n	800f832 <read_markers+0x6da>
  INPUT_VARS(cinfo);
 800f870:	69a7      	ldr	r7, [r4, #24]
 800f872:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f876:	b93e      	cbnz	r6, 800f888 <read_markers+0x730>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	4620      	mov	r0, r4
 800f87c:	4798      	blx	r3
 800f87e:	2800      	cmp	r0, #0
 800f880:	f43f acf5 	beq.w	800f26e <read_markers+0x116>
 800f884:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f888:	f895 8000 	ldrb.w	r8, [r5]
 800f88c:	3e01      	subs	r6, #1
 800f88e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800f892:	d024      	beq.n	800f8de <read_markers+0x786>
 800f894:	3501      	adds	r5, #1
 800f896:	782b      	ldrb	r3, [r5, #0]
 800f898:	3e01      	subs	r6, #1
 800f89a:	4443      	add	r3, r8
  if (length != 4)
 800f89c:	2b04      	cmp	r3, #4
 800f89e:	d005      	beq.n	800f8ac <read_markers+0x754>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	220c      	movs	r2, #12
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	615a      	str	r2, [r3, #20]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f8ac:	b306      	cbz	r6, 800f8f0 <read_markers+0x798>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f8ae:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f8b0:	f895 9000 	ldrb.w	r9, [r5]
 800f8b4:	3e01      	subs	r6, #1
 800f8b6:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f8ba:	d022      	beq.n	800f902 <read_markers+0x7aa>
 800f8bc:	3501      	adds	r5, #1
 800f8be:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800f8c2:	2254      	movs	r2, #84	@ 0x54
 800f8c4:	6823      	ldr	r3, [r4, #0]
 800f8c6:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f8c8:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800f8ca:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f8cc:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800f8ce:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800f8d6:	f8c4 8118 	str.w	r8, [r4, #280]	@ 0x118
  INPUT_SYNC(cinfo);
 800f8da:	603d      	str	r5, [r7, #0]
 800f8dc:	e659      	b.n	800f592 <read_markers+0x43a>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	4798      	blx	r3
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	f43f acc2 	beq.w	800f26e <read_markers+0x116>
 800f8ea:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f8ee:	e7d2      	b.n	800f896 <read_markers+0x73e>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	4798      	blx	r3
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f43f acb9 	beq.w	800f26e <read_markers+0x116>
 800f8fc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f900:	e7d6      	b.n	800f8b0 <read_markers+0x758>
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	4620      	mov	r0, r4
 800f906:	4798      	blx	r3
 800f908:	2800      	cmp	r0, #0
 800f90a:	f43f acb0 	beq.w	800f26e <read_markers+0x116>
 800f90e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f912:	e7d4      	b.n	800f8be <read_markers+0x766>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800f914:	f8d4 21cc 	ldr.w	r2, [r4, #460]	@ 0x1cc
 800f918:	3bd8      	subs	r3, #216	@ 0xd8
 800f91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800f91e:	4620      	mov	r0, r4
 800f920:	4798      	blx	r3
 800f922:	e4ea      	b.n	800f2fa <read_markers+0x1a2>
 800f924:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 800f928:	69db      	ldr	r3, [r3, #28]
 800f92a:	e7f8      	b.n	800f91e <read_markers+0x7c6>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800f92c:	6822      	ldr	r2, [r4, #0]
 800f92e:	215e      	movs	r1, #94	@ 0x5e
 800f930:	4620      	mov	r0, r4
 800f932:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f936:	6853      	ldr	r3, [r2, #4]
 800f938:	2101      	movs	r1, #1
 800f93a:	4798      	blx	r3
      break;
 800f93c:	e4d3      	b.n	800f2e6 <read_markers+0x18e>
      if (! skip_variable(cinfo))
 800f93e:	4620      	mov	r0, r4
 800f940:	f7ff fa40 	bl	800edc4 <skip_variable>
 800f944:	e4d9      	b.n	800f2fa <read_markers+0x1a2>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f946:	6822      	ldr	r2, [r4, #0]
 800f948:	2146      	movs	r1, #70	@ 0x46
 800f94a:	e4e7      	b.n	800f31c <read_markers+0x1c4>
 800f94c:	0802ef58 	.word	0x0802ef58
 800f950:	0802f304 	.word	0x0802f304
 800f954:	0802f200 	.word	0x0802f200
 800f958:	0802f08c 	.word	0x0802f08c
 800f95c:	0802efa8 	.word	0x0802efa8
 800f960:	0802f00c 	.word	0x0802f00c
 800f964:	0802f130 	.word	0x0802f130

0800f968 <jpeg_resync_to_restart>:
{
 800f968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f96c:	6803      	ldr	r3, [r0, #0]
 800f96e:	227c      	movs	r2, #124	@ 0x7c
  int marker = cinfo->unread_marker;
 800f970:	f8d0 51b4 	ldr.w	r5, [r0, #436]	@ 0x1b4
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800f974:	f04f 0863 	mov.w	r8, #99	@ 0x63
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f978:	61d9      	str	r1, [r3, #28]
{
 800f97a:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f97c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800f980:	4606      	mov	r6, r0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f982:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800f98a:	2dbf      	cmp	r5, #191	@ 0xbf
 800f98c:	dd31      	ble.n	800f9f2 <jpeg_resync_to_restart+0x8a>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800f98e:	f1a5 03d0 	sub.w	r3, r5, #208	@ 0xd0
 800f992:	2b07      	cmp	r3, #7
 800f994:	d82b      	bhi.n	800f9ee <jpeg_resync_to_restart+0x86>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f996:	1c7b      	adds	r3, r7, #1
 800f998:	f003 0307 	and.w	r3, r3, #7
 800f99c:	33d0      	adds	r3, #208	@ 0xd0
 800f99e:	429d      	cmp	r5, r3
 800f9a0:	d025      	beq.n	800f9ee <jpeg_resync_to_restart+0x86>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800f9a2:	1cbb      	adds	r3, r7, #2
 800f9a4:	f003 0307 	and.w	r3, r3, #7
 800f9a8:	33d0      	adds	r3, #208	@ 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f9aa:	429d      	cmp	r5, r3
 800f9ac:	d01f      	beq.n	800f9ee <jpeg_resync_to_restart+0x86>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800f9ae:	1e7b      	subs	r3, r7, #1
 800f9b0:	f003 0307 	and.w	r3, r3, #7
 800f9b4:	33d0      	adds	r3, #208	@ 0xd0
 800f9b6:	429d      	cmp	r5, r3
 800f9b8:	d01b      	beq.n	800f9f2 <jpeg_resync_to_restart+0x8a>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800f9ba:	1ebc      	subs	r4, r7, #2
 800f9bc:	f004 0407 	and.w	r4, r4, #7
 800f9c0:	34d0      	adds	r4, #208	@ 0xd0
      action = 2;		/* invalid marker */
 800f9c2:	42a5      	cmp	r5, r4
 800f9c4:	bf14      	ite	ne
 800f9c6:	2401      	movne	r4, #1
 800f9c8:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800f9ca:	6833      	ldr	r3, [r6, #0]
 800f9cc:	2104      	movs	r1, #4
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	61dc      	str	r4, [r3, #28]
 800f9d2:	e9c3 8505 	strd	r8, r5, [r3, #20]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	4798      	blx	r3
    switch (action) {
 800f9da:	2c02      	cmp	r4, #2
 800f9dc:	d00b      	beq.n	800f9f6 <jpeg_resync_to_restart+0x8e>
 800f9de:	2c03      	cmp	r4, #3
 800f9e0:	d002      	beq.n	800f9e8 <jpeg_resync_to_restart+0x80>
      cinfo->unread_marker = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	f8c6 31b4 	str.w	r3, [r6, #436]	@ 0x1b4
      return TRUE;
 800f9e8:	2001      	movs	r0, #1
}
 800f9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800f9ee:	2403      	movs	r4, #3
 800f9f0:	e7eb      	b.n	800f9ca <jpeg_resync_to_restart+0x62>
      action = 2;		/* invalid marker */
 800f9f2:	2402      	movs	r4, #2
 800f9f4:	e7e9      	b.n	800f9ca <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f7ff fa20 	bl	800ee3c <next_marker>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d0f4      	beq.n	800f9ea <jpeg_resync_to_restart+0x82>
      marker = cinfo->unread_marker;
 800fa00:	f8d6 51b4 	ldr.w	r5, [r6, #436]	@ 0x1b4
      break;
 800fa04:	e7c1      	b.n	800f98a <jpeg_resync_to_restart+0x22>
	...

0800fa08 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800fa08:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fa0a:	6843      	ldr	r3, [r0, #4]
 800fa0c:	22ac      	movs	r2, #172	@ 0xac
 800fa0e:	2100      	movs	r1, #0
{
 800fa10:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800fa16:	4b11      	ldr	r3, [pc, #68]	@ (800fa5c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800fa18:	f8c5 01cc 	str.w	r0, [r5, #460]	@ 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fa1c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800fa1e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800fa20:	f100 015c 	add.w	r1, r0, #92	@ 0x5c
 800fa24:	4b0e      	ldr	r3, [pc, #56]	@ (800fa60 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800fa26:	4a0f      	ldr	r2, [pc, #60]	@ (800fa64 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800fa28:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800fa2a:	4b0f      	ldr	r3, [pc, #60]	@ (800fa68 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800fa2c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800fa2e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	6603      	str	r3, [r0, #96]	@ 0x60
  for (i = 0; i < 16; i++) {
 800fa34:	f100 031c 	add.w	r3, r0, #28
    marker->process_APPn[i] = skip_variable;
 800fa38:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i < 16; i++) {
 800fa3c:	4299      	cmp	r1, r3
 800fa3e:	d1fb      	bne.n	800fa38 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800fa40:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800fa44:	2240      	movs	r2, #64	@ 0x40
 800fa46:	2100      	movs	r1, #0
 800fa48:	f01a fb32 	bl	802a0b0 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800fa4c:	4b07      	ldr	r3, [pc, #28]	@ (800fa6c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800fa4e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800fa50:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800fa52:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800fa54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800fa58:	f7ff ba65 	b.w	800ef26 <reset_marker_reader>
 800fa5c:	0800ef27 	.word	0x0800ef27
 800fa60:	0800f159 	.word	0x0800f159
 800fa64:	0800edc5 	.word	0x0800edc5
 800fa68:	0800eec9 	.word	0x0800eec9
 800fa6c:	0800ece9 	.word	0x0800ece9

0800fa70 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800fa70:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800fa72:	f8d0 51b8 	ldr.w	r5, [r0, #440]	@ 0x1b8
{
 800fa76:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800fa78:	68ab      	ldr	r3, [r5, #8]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d02a      	beq.n	800fad4 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800fa7e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800fa80:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800fa84:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800fa8a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 800fa8e:	2102      	movs	r1, #2
 800fa90:	4620      	mov	r0, r4
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800fa96:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800fa9a:	2102      	movs	r1, #2
 800fa9c:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800fa9e:	4620      	mov	r0, r4
 800faa0:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800faa2:	68a2      	ldr	r2, [r4, #8]
 800faa4:	b1aa      	cbz	r2, 800fad2 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800faa6:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800faa8:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800faaa:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800faac:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800faae:	bf0c      	ite	eq
 800fab0:	2101      	moveq	r1, #1
 800fab2:	2102      	movne	r1, #2
    cinfo->progress->total_passes = master->pass_number +
 800fab4:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800fab6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    cinfo->progress->total_passes = master->pass_number +
 800fab8:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800faba:	b151      	cbz	r1, 800fad2 <prepare_for_output_pass+0x62>
 800fabc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	@ 0x1c8
 800fac0:	6949      	ldr	r1, [r1, #20]
 800fac2:	b931      	cbnz	r1, 800fad2 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800fac4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800fac6:	2900      	cmp	r1, #0
 800fac8:	bf0c      	ite	eq
 800faca:	2101      	moveq	r1, #1
 800facc:	2102      	movne	r1, #2
 800face:	440b      	add	r3, r1
 800fad0:	6113      	str	r3, [r2, #16]
    }
  }
}
 800fad2:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800fad4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800fad6:	b16b      	cbz	r3, 800faf4 <prepare_for_output_pass+0x84>
 800fad8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800fadc:	b953      	cbnz	r3, 800faf4 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800fade:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d037      	beq.n	800fb54 <prepare_for_output_pass+0xe4>
 800fae4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d034      	beq.n	800fb54 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800faea:	69ab      	ldr	r3, [r5, #24]
 800faec:	f8c0 31e0 	str.w	r3, [r0, #480]	@ 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800faf0:	2301      	movs	r3, #1
 800faf2:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800faf4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
 800faf8:	4620      	mov	r0, r4
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800fafe:	f8d4 31c0 	ldr.w	r3, [r4, #448]	@ 0x1c0
 800fb02:	4620      	mov	r0, r4
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800fb08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1c9      	bne.n	800faa2 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800fb0e:	692b      	ldr	r3, [r5, #16]
 800fb10:	b923      	cbnz	r3, 800fb1c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800fb12:	f8d4 31dc 	ldr.w	r3, [r4, #476]	@ 0x1dc
 800fb16:	4620      	mov	r0, r4
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800fb1c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	@ 0x1d8
 800fb20:	4620      	mov	r0, r4
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800fb26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800fb28:	b12b      	cbz	r3, 800fb36 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800fb2a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 800fb2e:	4620      	mov	r0, r4
 800fb30:	68a9      	ldr	r1, [r5, #8]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800fb36:	68aa      	ldr	r2, [r5, #8]
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	bf14      	ite	ne
 800fb44:	2103      	movne	r1, #3
 800fb46:	2100      	moveq	r1, #0
 800fb48:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800fb4a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	@ 0x1bc
 800fb4e:	2100      	movs	r1, #0
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	e7a4      	b.n	800fa9e <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800fb54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb56:	b11b      	cbz	r3, 800fb60 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800fb58:	696b      	ldr	r3, [r5, #20]
 800fb5a:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
 800fb5e:	e7c9      	b.n	800faf4 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	222f      	movs	r2, #47	@ 0x2f
 800fb64:	4620      	mov	r0, r4
 800fb66:	615a      	str	r2, [r3, #20]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4798      	blx	r3
 800fb6c:	e7c2      	b.n	800faf4 <prepare_for_output_pass+0x84>

0800fb6e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800fb6e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
{
 800fb70:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800fb72:	f8d0 41b8 	ldr.w	r4, [r0, #440]	@ 0x1b8
  if (cinfo->quantize_colors)
 800fb76:	b11a      	cbz	r2, 800fb80 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800fb78:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	4798      	blx	r3
  master->pass_number++;
 800fb80:	68e3      	ldr	r3, [r4, #12]
 800fb82:	3301      	adds	r3, #1
 800fb84:	60e3      	str	r3, [r4, #12]
}
 800fb86:	bd10      	pop	{r4, pc}

0800fb88 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800fb88:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
{
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d142      	bne.n	800fc18 <use_merged_upsample+0x90>
 800fb92:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d140      	bne.n	800fc1c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800fb9a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800fb9e:	2b03      	cmp	r3, #3
 800fba0:	d139      	bne.n	800fc16 <use_merged_upsample+0x8e>
 800fba2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	d136      	bne.n	800fc16 <use_merged_upsample+0x8e>
 800fba8:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d132      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->out_color_space != JCS_RGB ||
 800fbb0:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d12f      	bne.n	800fc16 <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800fbb6:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 800fbba:	6899      	ldr	r1, [r3, #8]
 800fbbc:	2902      	cmp	r1, #2
 800fbbe:	d12a      	bne.n	800fc16 <use_merged_upsample+0x8e>
 800fbc0:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800fbc2:	2901      	cmp	r1, #1
 800fbc4:	d127      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800fbc6:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800fbca:	2901      	cmp	r1, #1
 800fbcc:	d123      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800fbce:	68d9      	ldr	r1, [r3, #12]
 800fbd0:	2902      	cmp	r1, #2
 800fbd2:	dc20      	bgt.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800fbd4:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800fbd6:	2901      	cmp	r1, #1
 800fbd8:	d11d      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800fbda:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 800fbde:	2901      	cmp	r1, #1
 800fbe0:	d119      	bne.n	800fc16 <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800fbe2:	f8d2 4140 	ldr.w	r4, [r2, #320]	@ 0x140
 800fbe6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fbe8:	42a1      	cmp	r1, r4
 800fbea:	d114      	bne.n	800fc16 <use_merged_upsample+0x8e>
 800fbec:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 800fbee:	42a1      	cmp	r1, r4
 800fbf0:	d111      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800fbf2:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
 800fbf6:	42a1      	cmp	r1, r4
 800fbf8:	d10d      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800fbfa:	f8d2 1144 	ldr.w	r1, [r2, #324]	@ 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800fbfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fc00:	428a      	cmp	r2, r1
 800fc02:	d108      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800fc04:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800fc08:	428a      	cmp	r2, r1
 800fc0a:	d104      	bne.n	800fc16 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800fc0c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 800fc10:	1a83      	subs	r3, r0, r2
 800fc12:	4258      	negs	r0, r3
 800fc14:	4158      	adcs	r0, r3
}
 800fc16:	bd10      	pop	{r4, pc}
    return FALSE;
 800fc18:	2000      	movs	r0, #0
 800fc1a:	e7fc      	b.n	800fc16 <use_merged_upsample+0x8e>
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	e7fa      	b.n	800fc16 <use_merged_upsample+0x8e>

0800fc20 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800fc20:	6942      	ldr	r2, [r0, #20]
 800fc22:	2aca      	cmp	r2, #202	@ 0xca
{
 800fc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc28:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800fc2a:	d005      	beq.n	800fc38 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800fc2c:	6803      	ldr	r3, [r0, #0]
 800fc2e:	2115      	movs	r1, #21
 800fc30:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800fc38:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fc3a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800fc3c:	f7fe fb12 	bl	800e264 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fc40:	f8d4 50d8 	ldr.w	r5, [r4, #216]	@ 0xd8
 800fc44:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 800fc48:	462b      	mov	r3, r5
 800fc4a:	45b4      	cmp	ip, r6
 800fc4c:	dd79      	ble.n	800fd42 <jpeg_calc_output_dimensions+0x122>
 800fc4e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
    int ssize = 1;
 800fc50:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800fc52:	f8d4 8140 	ldr.w	r8, [r4, #320]	@ 0x140
 800fc56:	2a00      	cmp	r2, #0
 800fc58:	bf14      	ite	ne
 800fc5a:	2708      	movne	r7, #8
 800fc5c:	2704      	moveq	r7, #4
 800fc5e:	e000      	b.n	800fc62 <jpeg_calc_output_dimensions+0x42>
      ssize = ssize * 2;
 800fc60:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800fc62:	fb01 f008 	mul.w	r0, r1, r8
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fc66:	42b8      	cmp	r0, r7
 800fc68:	dc0a      	bgt.n	800fc80 <jpeg_calc_output_dimensions+0x60>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800fc6a:	689a      	ldr	r2, [r3, #8]
 800fc6c:	f8d4 e138 	ldr.w	lr, [r4, #312]	@ 0x138
 800fc70:	434a      	muls	r2, r1
 800fc72:	0052      	lsls	r2, r2, #1
 800fc74:	fb9e f9f2 	sdiv	r9, lr, r2
 800fc78:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fc7c:	2a00      	cmp	r2, #0
 800fc7e:	d0ef      	beq.n	800fc60 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800fc80:	6258      	str	r0, [r3, #36]	@ 0x24
    ssize = 1;
 800fc82:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800fc86:	f8d4 9144 	ldr.w	r9, [r4, #324]	@ 0x144
 800fc8a:	fb08 f109 	mul.w	r1, r8, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fc8e:	42b9      	cmp	r1, r7
 800fc90:	dc0a      	bgt.n	800fca8 <jpeg_calc_output_dimensions+0x88>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800fc92:	68da      	ldr	r2, [r3, #12]
 800fc94:	f8d4 e13c 	ldr.w	lr, [r4, #316]	@ 0x13c
 800fc98:	fb02 f208 	mul.w	r2, r2, r8
 800fc9c:	0052      	lsls	r2, r2, #1
 800fc9e:	fb9e faf2 	sdiv	sl, lr, r2
 800fca2:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fca6:	b14a      	cbz	r2, 800fcbc <jpeg_calc_output_dimensions+0x9c>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800fca8:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800fcac:	6299      	str	r1, [r3, #40]	@ 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800fcae:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800fcb2:	dd06      	ble.n	800fcc2 <jpeg_calc_output_dimensions+0xa2>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800fcb4:	625a      	str	r2, [r3, #36]	@ 0x24
       ci++, compptr++) {
 800fcb6:	3601      	adds	r6, #1
 800fcb8:	3358      	adds	r3, #88	@ 0x58
 800fcba:	e7c6      	b.n	800fc4a <jpeg_calc_output_dimensions+0x2a>
      ssize = ssize * 2;
 800fcbc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800fcc0:	e7e3      	b.n	800fc8a <jpeg_calc_output_dimensions+0x6a>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800fcc2:	0042      	lsls	r2, r0, #1
 800fcc4:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800fcc8:	bfc8      	it	gt
 800fcca:	629a      	strgt	r2, [r3, #40]	@ 0x28
 800fccc:	e7f3      	b.n	800fcb6 <jpeg_calc_output_dimensions+0x96>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800fcce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
       ci++, compptr++) {
 800fcd0:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800fcd2:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800fcd4:	3558      	adds	r5, #88	@ 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800fcd6:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
 800fcda:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800fcde:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800fce0:	69e3      	ldr	r3, [r4, #28]
 800fce2:	4351      	muls	r1, r2
 800fce4:	4358      	muls	r0, r3
 800fce6:	f007 fe2d 	bl	8017944 <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800fcea:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800fcee:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800fcf2:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800fcf6:	f8d4 213c 	ldr.w	r2, [r4, #316]	@ 0x13c
 800fcfa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800fcfe:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800fd00:	6a23      	ldr	r3, [r4, #32]
 800fd02:	4351      	muls	r1, r2
 800fd04:	4358      	muls	r0, r3
 800fd06:	f007 fe1d 	bl	8017944 <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800fd0a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fd0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fd10:	42b3      	cmp	r3, r6
 800fd12:	dcdc      	bgt.n	800fcce <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800fd14:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800fd18:	2a03      	cmp	r2, #3
 800fd1a:	d814      	bhi.n	800fd46 <jpeg_calc_output_dimensions+0x126>
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	d817      	bhi.n	800fd50 <jpeg_calc_output_dimensions+0x130>
 800fd20:	d018      	beq.n	800fd54 <jpeg_calc_output_dimensions+0x134>
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800fd22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if (use_merged_upsample(cinfo))
 800fd24:	4620      	mov	r0, r4
    cinfo->out_color_components = 1;
 800fd26:	67a3      	str	r3, [r4, #120]	@ 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800fd28:	2a00      	cmp	r2, #0
 800fd2a:	bf18      	it	ne
 800fd2c:	2301      	movne	r3, #1
 800fd2e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  if (use_merged_upsample(cinfo))
 800fd30:	f7ff ff2a 	bl	800fb88 <use_merged_upsample>
 800fd34:	b180      	cbz	r0, 800fd58 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800fd36:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 800fd3a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
}
 800fd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fd42:	2600      	movs	r6, #0
 800fd44:	e7e3      	b.n	800fd0e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800fd46:	3a04      	subs	r2, #4
 800fd48:	2a01      	cmp	r2, #1
 800fd4a:	bf98      	it	ls
 800fd4c:	2304      	movls	r3, #4
 800fd4e:	e7e8      	b.n	800fd22 <jpeg_calc_output_dimensions+0x102>
 800fd50:	2303      	movs	r3, #3
 800fd52:	e7e6      	b.n	800fd22 <jpeg_calc_output_dimensions+0x102>
 800fd54:	4613      	mov	r3, r2
 800fd56:	e7e4      	b.n	800fd22 <jpeg_calc_output_dimensions+0x102>
    cinfo->rec_outbuf_height = 1;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e7ee      	b.n	800fd3a <jpeg_calc_output_dimensions+0x11a>

0800fd5c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd5e:	6843      	ldr	r3, [r0, #4]
 800fd60:	221c      	movs	r2, #28
 800fd62:	2101      	movs	r1, #1
{
 800fd64:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd66:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800fd68:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd6a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800fd6c:	4b6d      	ldr	r3, [pc, #436]	@ (800ff24 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800fd6e:	f8c4 01b8 	str.w	r0, [r4, #440]	@ 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd72:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800fd74:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800fd76:	4b6c      	ldr	r3, [pc, #432]	@ (800ff28 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800fd78:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800fd7a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f7ff ff4f 	bl	800fc20 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd82:	6863      	ldr	r3, [r4, #4]
 800fd84:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800fd88:	2101      	movs	r1, #1
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800fd90:	f500 7380 	add.w	r3, r0, #256	@ 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd94:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800fd96:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800fd98:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800fd9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fda0:	f01a f986 	bl	802a0b0 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800fda4:	f107 03ff 	add.w	r3, r7, #255	@ 0xff
 800fda8:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800fdaa:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800fdae:	3101      	adds	r1, #1
 800fdb0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800fdb4:	d1f9      	bne.n	800fdaa <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800fdb6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800fdba:	21ff      	movs	r1, #255	@ 0xff
 800fdbc:	f507 7000 	add.w	r0, r7, #512	@ 0x200
  master->pass_number = 0;
 800fdc0:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800fdc2:	f01a f975 	bl	802a0b0 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800fdc6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800fdca:	2100      	movs	r1, #0
 800fdcc:	f507 7060 	add.w	r0, r7, #896	@ 0x380
 800fdd0:	f01a f96e 	bl	802a0b0 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800fdd4:	2280      	movs	r2, #128	@ 0x80
 800fdd6:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 800fdda:	f507 60a0 	add.w	r0, r7, #1280	@ 0x500
 800fdde:	f01a fa9e 	bl	802a31e <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800fde2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800fde4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800fde6:	f7ff fecf 	bl	800fb88 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800fdea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  master->quantizer_2pass = NULL;
 800fdec:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800fdee:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800fdf2:	b1b3      	cbz	r3, 800fe22 <jinit_master_decompress+0xc6>
 800fdf4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800fdf6:	b1a2      	cbz	r2, 800fe22 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800fdf8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d166      	bne.n	800fecc <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800fdfe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fe00:	2b03      	cmp	r3, #3
 800fe02:	f04f 0301 	mov.w	r3, #1
 800fe06:	d068      	beq.n	800feda <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800fe08:	6663      	str	r3, [r4, #100]	@ 0x64
      cinfo->enable_external_quant = FALSE;
 800fe0a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800fe0c:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
      cinfo->colormap = NULL;
 800fe10:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      jinit_1pass_quantizer(cinfo);
 800fe14:	4620      	mov	r0, r4
 800fe16:	f006 fea9 	bl	8016b6c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800fe1a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 800fe1e:	616b      	str	r3, [r5, #20]
 800fe20:	e062      	b.n	800fee8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800fe22:	e9c4 6619 	strd	r6, r6, [r4, #100]	@ 0x64
    cinfo->enable_2pass_quant = FALSE;
 800fe26:	66e6      	str	r6, [r4, #108]	@ 0x6c
  if (cinfo->quantize_colors) {
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1e5      	bne.n	800fdf8 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800fe2c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fe2e:	b94b      	cbnz	r3, 800fe44 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800fe30:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800fe32:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d069      	beq.n	800ff0c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800fe38:	f000 fa1c 	bl	8010274 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800fe3c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f000 fb98 	bl	8010574 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800fe44:	4620      	mov	r0, r4
 800fe46:	f7fc fdd7 	bl	800c9f8 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800fe4a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
    jinit_arith_decoder(cinfo);
 800fe4e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d061      	beq.n	800ff18 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800fe54:	f7fb fc80 	bl	800b758 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800fe58:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d15d      	bne.n	800ff1e <jinit_master_decompress+0x1c2>
 800fe62:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800fe64:	3900      	subs	r1, #0
 800fe66:	bf18      	it	ne
 800fe68:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f7fc f95e 	bl	800c12c <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800fe70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fe72:	b911      	cbnz	r1, 800fe7a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800fe74:	4620      	mov	r0, r4
 800fe76:	f7fe fcb3 	bl	800e7e0 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800fe7a:	6863      	ldr	r3, [r4, #4]
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	699b      	ldr	r3, [r3, #24]
 800fe80:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800fe82:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
 800fe86:	4620      	mov	r0, r4
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800fe8c:	68a2      	ldr	r2, [r4, #8]
 800fe8e:	b1e2      	cbz	r2, 800feca <jinit_master_decompress+0x16e>
 800fe90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe92:	b9d3      	cbnz	r3, 800feca <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800fe94:	f8d4 31c8 	ldr.w	r3, [r4, #456]	@ 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800fe98:	691b      	ldr	r3, [r3, #16]
 800fe9a:	b1b3      	cbz	r3, 800feca <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800fe9c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800fea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (cinfo->progressive_mode) {
 800fea2:	b111      	cbz	r1, 800feaa <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800fea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fea8:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800feaa:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
    cinfo->progress->pass_counter = 0L;
 800feae:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800feb0:	4359      	muls	r1, r3
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800feb2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    cinfo->progress->pass_counter = 0L;
 800feb4:	6050      	str	r0, [r2, #4]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800feb6:	4283      	cmp	r3, r0
 800feb8:	bf0c      	ite	eq
 800feba:	2302      	moveq	r3, #2
 800febc:	2303      	movne	r3, #3
 800febe:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800fec0:	68eb      	ldr	r3, [r5, #12]
 800fec2:	3301      	adds	r3, #1
    cinfo->progress->completed_passes = 0;
 800fec4:	e9c2 1002 	strd	r1, r0, [r2, #8]
    master->pass_number++;
 800fec8:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800feca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	2230      	movs	r2, #48	@ 0x30
 800fed0:	4620      	mov	r0, r4
 800fed2:	615a      	str	r2, [r3, #20]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4798      	blx	r3
 800fed8:	e791      	b.n	800fdfe <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800feda:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 800fede:	b17a      	cbz	r2, 800ff00 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800fee0:	66a3      	str	r3, [r4, #104]	@ 0x68
    if (cinfo->enable_1pass_quant) {
 800fee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d195      	bne.n	800fe14 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800fee8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800feea:	b913      	cbnz	r3, 800fef2 <jinit_master_decompress+0x196>
 800feec:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d09c      	beq.n	800fe2c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800fef2:	4620      	mov	r0, r4
 800fef4:	f007 fcba 	bl	801786c <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800fef8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 800fefc:	61ab      	str	r3, [r5, #24]
 800fefe:	e795      	b.n	800fe2c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800ff00:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800ff02:	b10a      	cbz	r2, 800ff08 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800ff04:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800ff06:	e7ec      	b.n	800fee2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800ff08:	6663      	str	r3, [r4, #100]	@ 0x64
 800ff0a:	e783      	b.n	800fe14 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800ff0c:	f7fc fb32 	bl	800c574 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fc4f 	bl	80107b4 <jinit_upsampler>
 800ff16:	e791      	b.n	800fe3c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800ff18:	f7fd fefe 	bl	800dd18 <jinit_huff_decoder>
 800ff1c:	e79c      	b.n	800fe58 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ff1e:	2101      	movs	r1, #1
 800ff20:	e7a3      	b.n	800fe6a <jinit_master_decompress+0x10e>
 800ff22:	bf00      	nop
 800ff24:	0800fa71 	.word	0x0800fa71
 800ff28:	0800fb6f 	.word	0x0800fb6f

0800ff2c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ff2c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800ff30:	2200      	movs	r2, #0
 800ff32:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800ff34:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 800ff36:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ff38:	4770      	bx	lr

0800ff3a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800ff3a:	b570      	push	{r4, r5, r6, lr}
 800ff3c:	9d05      	ldr	r5, [sp, #20]
 800ff3e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800ff40:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
			 output_buf + *out_row_ctr);
 800ff44:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800ff46:	68de      	ldr	r6, [r3, #12]
 800ff48:	9b04      	ldr	r3, [sp, #16]
 800ff4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ff4e:	6822      	ldr	r2, [r4, #0]
 800ff50:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800ff52:	682b      	ldr	r3, [r5, #0]
 800ff54:	3301      	adds	r3, #1
 800ff56:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	6023      	str	r3, [r4, #0]
}
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}

0800ff60 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ff64:	f8d0 51d8 	ldr.w	r5, [r0, #472]	@ 0x1d8
{
 800ff68:	b089      	sub	sp, #36	@ 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800ff6a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800ff6e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800ff70:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800ff74:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800ff76:	9601      	str	r6, [sp, #4]
  int * Cbbtab = upsample->Cb_b_tab;
 800ff78:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ff7a:	f8d0 414c 	ldr.w	r4, [r0, #332]	@ 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800ff7e:	9602      	str	r6, [sp, #8]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ff80:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800ff82:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ff84:	9603      	str	r6, [sp, #12]
  inptr0 = input_buf[0][in_row_group_ctr];
 800ff86:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800ff8a:	9504      	str	r5, [sp, #16]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ff8c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ff8e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ff90:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ff94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ff98:	9904      	ldr	r1, [sp, #16]
 800ff9a:	9205      	str	r2, [sp, #20]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ff9c:	6f02      	ldr	r2, [r0, #112]	@ 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800ff9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ffa2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800ffa6:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800ffaa:	9206      	str	r2, [sp, #24]
 800ffac:	9a06      	ldr	r2, [sp, #24]
 800ffae:	3306      	adds	r3, #6
 800ffb0:	3102      	adds	r1, #2
 800ffb2:	4295      	cmp	r5, r2
 800ffb4:	d128      	bne.n	8010008 <h2v1_merged_upsample+0xa8>
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800ffb6:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800ffb8:	07db      	lsls	r3, r3, #31
 800ffba:	d522      	bpl.n	8010002 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800ffbc:	9b05      	ldr	r3, [sp, #20]
 800ffbe:	2106      	movs	r1, #6
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800ffc0:	9f01      	ldr	r7, [sp, #4]
    cred = Crrtab[cr];
 800ffc2:	f813 600e 	ldrb.w	r6, [r3, lr]
 800ffc6:	fb01 f10e 	mul.w	r1, r1, lr
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ffca:	782b      	ldrb	r3, [r5, #0]
 800ffcc:	9d03      	ldr	r5, [sp, #12]
 800ffce:	eb0c 0001 	add.w	r0, ip, r1
 800ffd2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 800ffd6:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ffda:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ffde:	442a      	add	r2, r5
    cblue = Cbbtab[cb];
 800ffe0:	9d02      	ldr	r5, [sp, #8]
 800ffe2:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ffe6:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0);
 800ffea:	9b04      	ldr	r3, [sp, #16]
 800ffec:	f813 301e 	ldrb.w	r3, [r3, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800fff0:	18e7      	adds	r7, r4, r3
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800fff2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800fff4:	5dbe      	ldrb	r6, [r7, r6]
 800fff6:	7086      	strb	r6, [r0, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800fff8:	5cd2      	ldrb	r2, [r2, r3]
 800fffa:	7042      	strb	r2, [r0, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800fffc:	5ce3      	ldrb	r3, [r4, r3]
 800fffe:	f80c 3001 	strb.w	r3, [ip, r1]
  }
}
 8010002:	b009      	add	sp, #36	@ 0x24
 8010004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010008:	f815 ab01 	ldrb.w	sl, [r5], #1
    cred = Crrtab[cr];
 801000c:	f819 2b01 	ldrb.w	r2, [r9], #1
 8010010:	9e01      	ldr	r6, [sp, #4]
 8010012:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010016:	f858 602a 	ldr.w	r6, [r8, sl, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 801001a:	4427      	add	r7, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801001c:	9607      	str	r6, [sp, #28]
 801001e:	9e03      	ldr	r6, [sp, #12]
 8010020:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8010024:	9e07      	ldr	r6, [sp, #28]
 8010026:	4432      	add	r2, r6
    cblue = Cbbtab[cb];
 8010028:	9e02      	ldr	r6, [sp, #8]
 801002a:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 801002e:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0++);
 8010032:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010036:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 8010038:	f817 b00a 	ldrb.w	fp, [r7, sl]
 801003c:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010040:	f812 b00a 	ldrb.w	fp, [r2, sl]
 8010044:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010048:	f816 a00a 	ldrb.w	sl, [r6, sl]
 801004c:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 8010050:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010054:	f817 700a 	ldrb.w	r7, [r7, sl]
 8010058:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 801005c:	f812 200a 	ldrb.w	r2, [r2, sl]
 8010060:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010064:	f816 200a 	ldrb.w	r2, [r6, sl]
 8010068:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 801006c:	e79e      	b.n	800ffac <h2v1_merged_upsample+0x4c>

0801006e <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 801006e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010072:	f8d0 51d8 	ldr.w	r5, [r0, #472]	@ 0x1d8
{
 8010076:	b08d      	sub	sp, #52	@ 0x34
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8010078:	f8d0 414c 	ldr.w	r4, [r0, #332]	@ 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 801007c:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 801007e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 8010082:	9604      	str	r6, [sp, #16]
  int * Cbbtab = upsample->Cb_b_tab;
 8010084:	696e      	ldr	r6, [r5, #20]
 8010086:	9605      	str	r6, [sp, #20]
  INT32 * Crgtab = upsample->Cr_g_tab;
 8010088:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 801008a:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 801008c:	9606      	str	r6, [sp, #24]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 801008e:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 8010092:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010096:	686d      	ldr	r5, [r5, #4]
 8010098:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 801009a:	9607      	str	r6, [sp, #28]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 801009c:	9508      	str	r5, [sp, #32]
  inptr1 = input_buf[1][in_row_group_ctr];
 801009e:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 80100a0:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 80100a2:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 80100a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80100aa:	6f01      	ldr	r1, [r0, #112]	@ 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 80100ac:	9209      	str	r2, [sp, #36]	@ 0x24
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80100ae:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80100bc:	910a      	str	r1, [sp, #40]	@ 0x28
  inptr2 = input_buf[2][in_row_group_ctr];
 80100be:	9909      	ldr	r1, [sp, #36]	@ 0x24
  outptr0 = output_buf[0];
 80100c0:	9201      	str	r2, [sp, #4]
  outptr1 = output_buf[1];
 80100c2:	9302      	str	r3, [sp, #8]
  inptr2 = input_buf[2][in_row_group_ctr];
 80100c4:	9103      	str	r1, [sp, #12]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80100c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80100c8:	3206      	adds	r2, #6
 80100ca:	3306      	adds	r3, #6
 80100cc:	f10e 0e02 	add.w	lr, lr, #2
 80100d0:	4588      	cmp	r8, r1
 80100d2:	f10c 0c02 	add.w	ip, ip, #2
 80100d6:	d138      	bne.n	801014a <h2v2_merged_upsample+0xdc>
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 80100d8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80100da:	07db      	lsls	r3, r3, #31
 80100dc:	d532      	bpl.n	8010144 <h2v2_merged_upsample+0xd6>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 80100de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100e0:	2306      	movs	r3, #6
 80100e2:	9d04      	ldr	r5, [sp, #16]
 80100e4:	5dc0      	ldrb	r0, [r0, r7]
 80100e6:	437b      	muls	r3, r7
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80100e8:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 80100ec:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80100f0:	9d06      	ldr	r5, [sp, #24]
 80100f2:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 80100f6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
 80100fa:	9d05      	ldr	r5, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80100fc:	4460      	add	r0, ip
 80100fe:	9a01      	ldr	r2, [sp, #4]
    cblue = Cbbtab[cb];
 8010100:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
    y  = GETJSAMPLE(*inptr00);
 8010104:	9d07      	ldr	r5, [sp, #28]
 8010106:	18d1      	adds	r1, r2, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010108:	eb04 4020 	add.w	r0, r4, r0, asr #16
 801010c:	9a02      	ldr	r2, [sp, #8]
    y  = GETJSAMPLE(*inptr00);
 801010e:	f815 6017 	ldrb.w	r6, [r5, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010112:	eb0e 0504 	add.w	r5, lr, r4
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010116:	4464      	add	r4, ip
 8010118:	441a      	add	r2, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 801011a:	f815 e006 	ldrb.w	lr, [r5, r6]
 801011e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010122:	f810 e006 	ldrb.w	lr, [r0, r6]
 8010126:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 801012a:	5da1      	ldrb	r1, [r4, r6]
 801012c:	9e01      	ldr	r6, [sp, #4]
 801012e:	54f1      	strb	r1, [r6, r3]
    y  = GETJSAMPLE(*inptr01);
 8010130:	9908      	ldr	r1, [sp, #32]
 8010132:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010136:	5c6d      	ldrb	r5, [r5, r1]
 8010138:	7095      	strb	r5, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 801013a:	5c40      	ldrb	r0, [r0, r1]
 801013c:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 801013e:	5c62      	ldrb	r2, [r4, r1]
 8010140:	9902      	ldr	r1, [sp, #8]
 8010142:	54ca      	strb	r2, [r1, r3]
  }
}
 8010144:	b00d      	add	sp, #52	@ 0x34
 8010146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 801014a:	9d03      	ldr	r5, [sp, #12]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801014c:	f818 9b01 	ldrb.w	r9, [r8], #1
    cred = Crrtab[cr];
 8010150:	f815 1b01 	ldrb.w	r1, [r5], #1
 8010154:	9503      	str	r5, [sp, #12]
 8010156:	9d04      	ldr	r5, [sp, #16]
 8010158:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801015c:	f85a 5029 	ldr.w	r5, [sl, r9, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010160:	4426      	add	r6, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010162:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010164:	9d06      	ldr	r5, [sp, #24]
 8010166:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801016a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801016c:	4429      	add	r1, r5
    cblue = Cbbtab[cb];
 801016e:	9d05      	ldr	r5, [sp, #20]
 8010170:	f855 5029 	ldr.w	r5, [r5, r9, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010174:	eb04 4121 	add.w	r1, r4, r1, asr #16
    y  = GETJSAMPLE(*inptr00++);
 8010178:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 801017c:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 801017e:	f816 b009 	ldrb.w	fp, [r6, r9]
 8010182:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010186:	f811 b009 	ldrb.w	fp, [r1, r9]
 801018a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 801018e:	f815 9009 	ldrb.w	r9, [r5, r9]
 8010192:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 8010196:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 801019a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801019e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80101a2:	f811 b009 	ldrb.w	fp, [r1, r9]
 80101a6:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80101aa:	f815 9009 	ldrb.w	r9, [r5, r9]
 80101ae:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 80101b2:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 80101b6:	f816 b009 	ldrb.w	fp, [r6, r9]
 80101ba:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 80101be:	f811 b009 	ldrb.w	fp, [r1, r9]
 80101c2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 80101c6:	f815 9009 	ldrb.w	r9, [r5, r9]
 80101ca:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 80101ce:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 80101d2:	f816 6009 	ldrb.w	r6, [r6, r9]
 80101d6:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 80101da:	f811 1009 	ldrb.w	r1, [r1, r9]
 80101de:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 80101e2:	f815 1009 	ldrb.w	r1, [r5, r9]
 80101e6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80101ea:	e76c      	b.n	80100c6 <h2v2_merged_upsample+0x58>

080101ec <merged_2v_upsample>:
{
 80101ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80101f0:	f8d0 51d8 	ldr.w	r5, [r0, #472]	@ 0x1d8
{
 80101f4:	4616      	mov	r6, r2
 80101f6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	@ 0x28
  if (upsample->spare_full) {
 80101fa:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 80101fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010200:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 8010204:	b1dc      	cbz	r4, 801023e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 8010206:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8010208:	2401      	movs	r4, #1
 801020a:	f105 0020 	add.w	r0, r5, #32
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	2300      	movs	r3, #0
 8010212:	9400      	str	r4, [sp, #0]
 8010214:	4619      	mov	r1, r3
 8010216:	f007 fba2 	bl	801795e <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 801021a:	2300      	movs	r3, #0
 801021c:	626b      	str	r3, [r5, #36]	@ 0x24
  *out_row_ctr += num_rows;
 801021e:	f8d8 3000 	ldr.w	r3, [r8]
 8010222:	4423      	add	r3, r4
 8010224:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 8010228:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801022a:	1b1b      	subs	r3, r3, r4
 801022c:	62eb      	str	r3, [r5, #44]	@ 0x2c
  if (! upsample->spare_full)
 801022e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010230:	b913      	cbnz	r3, 8010238 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 8010232:	6833      	ldr	r3, [r6, #0]
 8010234:	3301      	adds	r3, #1
 8010236:	6033      	str	r3, [r6, #0]
}
 8010238:	b004      	add	sp, #16
 801023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    out_rows_avail -= *out_row_ctr;
 801023e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010240:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8010242:	1ae4      	subs	r4, r4, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 8010244:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8010248:	2c02      	cmp	r4, #2
 801024a:	9302      	str	r3, [sp, #8]
 801024c:	bf28      	it	cs
 801024e:	2402      	movcs	r4, #2
 8010250:	42bc      	cmp	r4, r7
 8010252:	bf28      	it	cs
 8010254:	463c      	movcs	r4, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 8010256:	68ef      	ldr	r7, [r5, #12]
    if (num_rows > 1) {
 8010258:	2c02      	cmp	r4, #2
      work_ptrs[1] = upsample->spare_row;
 801025a:	bf17      	itett	ne
 801025c:	6a2b      	ldrne	r3, [r5, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 801025e:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 8010260:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 8010262:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 8010264:	bf0c      	ite	eq
 8010266:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 8010268:	626b      	strne	r3, [r5, #36]	@ 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 801026a:	ab02      	add	r3, sp, #8
 801026c:	6832      	ldr	r2, [r6, #0]
 801026e:	47b8      	blx	r7
 8010270:	e7d5      	b.n	801021e <merged_2v_upsample+0x32>
	...

08010274 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010274:	6843      	ldr	r3, [r0, #4]
 8010276:	2230      	movs	r2, #48	@ 0x30
 8010278:	2101      	movs	r1, #1
 801027a:	681b      	ldr	r3, [r3, #0]
{
 801027c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010280:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010282:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 8010284:	4b37      	ldr	r3, [pc, #220]	@ (8010364 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010286:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8010288:	f8c4 01d8 	str.w	r0, [r4, #472]	@ 0x1d8
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 801028c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
  upsample->pub.start_pass = start_pass_merged_upsample;
 801028e:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 8010290:	2000      	movs	r0, #0
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 8010292:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
  upsample->pub.need_context_rows = FALSE;
 8010294:	60a8      	str	r0, [r5, #8]
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 8010296:	435a      	muls	r2, r3

  if (cinfo->max_v_samp_factor == 2) {
 8010298:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 801029c:	2b02      	cmp	r3, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 801029e:	62aa      	str	r2, [r5, #40]	@ 0x28
  if (cinfo->max_v_samp_factor == 2) {
 80102a0:	d15a      	bne.n	8010358 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 80102a2:	4b31      	ldr	r3, [pc, #196]	@ (8010368 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102a4:	2101      	movs	r1, #1
 80102a6:	4620      	mov	r0, r4
    upsample->pub.upsample = merged_2v_upsample;
 80102a8:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v2_merged_upsample;
 80102aa:	4b30      	ldr	r3, [pc, #192]	@ (801036c <jinit_merged_upsampler+0xf8>)
 80102ac:	60eb      	str	r3, [r5, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102ae:	6863      	ldr	r3, [r4, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102b4:	6863      	ldr	r3, [r4, #4]
 80102b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    upsample->spare_row = (JSAMPROW)
 80102ba:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102bc:	2101      	movs	r1, #1
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4620      	mov	r0, r4
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80102c2:	f8d4 51d8 	ldr.w	r5, [r4, #472]	@ 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102c6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102c8:	6863      	ldr	r3, [r4, #4]
 80102ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  upsample->Cr_r_tab = (int *)
 80102ce:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102d0:	2101      	movs	r1, #1
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4620      	mov	r0, r4
 80102d6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102d8:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 80102da:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2101      	movs	r1, #1
 80102e4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 80102e6:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8010384 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102ea:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102ec:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 80102ee:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102f0:	2101      	movs	r1, #1
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4620      	mov	r0, r4
 80102f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 80102fa:	4f1d      	ldr	r7, [pc, #116]	@ (8010370 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80102fc:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 80102fe:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 8010300:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8010302:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010304:	f8df e080 	ldr.w	lr, [pc, #128]	@ 8010388 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8010308:	491a      	ldr	r1, [pc, #104]	@ (8010374 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 801030a:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 801030e:	4d1a      	ldr	r5, [pc, #104]	@ (8010378 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010310:	fb08 e203 	mla	r2, r8, r3, lr
 8010314:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 8010316:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 801031a:	fb07 f203 	mul.w	r2, r7, r3
 801031e:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 8010322:	f5a2 42a2 	sub.w	r2, r2, #20736	@ 0x5100
 8010326:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 8010328:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 801032c:	fb05 f203 	mul.w	r2, r5, r3
 8010330:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 8010334:	f502 42d2 	add.w	r2, r2, #26880	@ 0x6900
 8010338:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 801033c:	fb01 f203 	mul.w	r2, r1, r3
 8010340:	f502 1232 	add.w	r2, r2, #2916352	@ 0x2c8000
 8010344:	f502 6250 	add.w	r2, r2, #3328	@ 0xd00
 8010348:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 801034c:	3301      	adds	r3, #1
 801034e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010352:	d1dd      	bne.n	8010310 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 8010354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 8010358:	4b08      	ldr	r3, [pc, #32]	@ (801037c <jinit_merged_upsampler+0x108>)
 801035a:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v1_merged_upsample;
 801035c:	4b08      	ldr	r3, [pc, #32]	@ (8010380 <jinit_merged_upsampler+0x10c>)
 801035e:	60eb      	str	r3, [r5, #12]
    upsample->spare_row = NULL;
 8010360:	e7a8      	b.n	80102b4 <jinit_merged_upsampler+0x40>
 8010362:	bf00      	nop
 8010364:	0800ff2d 	.word	0x0800ff2d
 8010368:	080101ed 	.word	0x080101ed
 801036c:	0801006f 	.word	0x0801006f
 8010370:	0001c5a2 	.word	0x0001c5a2
 8010374:	ffffa7e6 	.word	0xffffa7e6
 8010378:	ffff492e 	.word	0xffff492e
 801037c:	0800ff3b 	.word	0x0800ff3b
 8010380:	0800ff61 	.word	0x0800ff61
 8010384:	000166e9 	.word	0x000166e9
 8010388:	ff4d0b80 	.word	0xff4d0b80

0801038c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 801038c:	2902      	cmp	r1, #2
{
 801038e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010390:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
  switch (pass_mode) {
 8010394:	d023      	beq.n	80103de <start_pass_dpost+0x52>
 8010396:	2903      	cmp	r1, #3
 8010398:	d019      	beq.n	80103ce <start_pass_dpost+0x42>
 801039a:	2900      	cmp	r1, #0
 801039c:	d128      	bne.n	80103f0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 801039e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80103a0:	b182      	cbz	r2, 80103c4 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 80103a2:	4a16      	ldr	r2, [pc, #88]	@ (80103fc <start_pass_dpost+0x70>)
 80103a4:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 80103a6:	68e2      	ldr	r2, [r4, #12]
 80103a8:	b93a      	cbnz	r2, 80103ba <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 80103aa:	6843      	ldr	r3, [r0, #4]
 80103ac:	2101      	movs	r1, #1
 80103ae:	9100      	str	r1, [sp, #0]
 80103b0:	69dd      	ldr	r5, [r3, #28]
 80103b2:	68a1      	ldr	r1, [r4, #8]
 80103b4:	6923      	ldr	r3, [r4, #16]
 80103b6:	47a8      	blx	r5
 80103b8:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 80103ba:	2300      	movs	r3, #0
 80103bc:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 80103c0:	b003      	add	sp, #12
 80103c2:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 80103c4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
 80103c8:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 80103ca:	6063      	str	r3, [r4, #4]
    break;
 80103cc:	e7f5      	b.n	80103ba <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 80103ce:	68a2      	ldr	r2, [r4, #8]
 80103d0:	b91a      	cbnz	r2, 80103da <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80103d2:	6803      	ldr	r3, [r0, #0]
 80103d4:	6159      	str	r1, [r3, #20]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 80103da:	4b09      	ldr	r3, [pc, #36]	@ (8010400 <start_pass_dpost+0x74>)
 80103dc:	e7f5      	b.n	80103ca <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 80103de:	68a2      	ldr	r2, [r4, #8]
 80103e0:	b922      	cbnz	r2, 80103ec <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80103e2:	6803      	ldr	r3, [r0, #0]
 80103e4:	2203      	movs	r2, #3
 80103e6:	615a      	str	r2, [r3, #20]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 80103ec:	4b05      	ldr	r3, [pc, #20]	@ (8010404 <start_pass_dpost+0x78>)
 80103ee:	e7ec      	b.n	80103ca <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80103f0:	6803      	ldr	r3, [r0, #0]
 80103f2:	2203      	movs	r2, #3
 80103f4:	615a      	str	r2, [r3, #20]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4798      	blx	r3
    break;
 80103fa:	e7de      	b.n	80103ba <start_pass_dpost+0x2e>
 80103fc:	08010409 	.word	0x08010409
 8010400:	08010469 	.word	0x08010469
 8010404:	080104f7 	.word	0x080104f7

08010408 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040c:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 801040e:	f8d0 81c4 	ldr.w	r8, [r0, #452]	@ 0x1c4
{
 8010412:	4604      	mov	r4, r0
 8010414:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 8010416:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010418:	682f      	ldr	r7, [r5, #0]
 801041a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 801041c:	2700      	movs	r7, #0
 801041e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 8010420:	f8d0 71d8 	ldr.w	r7, [r0, #472]	@ 0x1d8
 8010424:	9705      	str	r7, [sp, #20]
 8010426:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801042a:	42be      	cmp	r6, r7
 801042c:	bf94      	ite	ls
 801042e:	9602      	strls	r6, [sp, #8]
 8010430:	9702      	strhi	r7, [sp, #8]
 8010432:	ae07      	add	r6, sp, #28
 8010434:	9601      	str	r6, [sp, #4]
 8010436:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801043a:	9600      	str	r6, [sp, #0]
 801043c:	9e05      	ldr	r6, [sp, #20]
 801043e:	6876      	ldr	r6, [r6, #4]
 8010440:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 8010442:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010444:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
 8010448:	4620      	mov	r0, r4
 801044a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801044c:	685e      	ldr	r6, [r3, #4]
 801044e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010452:	9b07      	ldr	r3, [sp, #28]
 8010454:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8010458:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 801045a:	682b      	ldr	r3, [r5, #0]
 801045c:	9a07      	ldr	r2, [sp, #28]
 801045e:	4413      	add	r3, r2
 8010460:	602b      	str	r3, [r5, #0]
}
 8010462:	b008      	add	sp, #32
 8010464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010468 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 8010468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 801046c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
{
 8010470:	b085      	sub	sp, #20
 8010472:	469a      	mov	sl, r3
 8010474:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8010476:	69a3      	ldr	r3, [r4, #24]
{
 8010478:	460e      	mov	r6, r1
 801047a:	4691      	mov	r9, r2
 801047c:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
  if (post->next_row == 0) {
 8010480:	b943      	cbnz	r3, 8010494 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8010482:	6843      	ldr	r3, [r0, #4]
 8010484:	2201      	movs	r2, #1
 8010486:	9200      	str	r2, [sp, #0]
 8010488:	69df      	ldr	r7, [r3, #28]
 801048a:	68a1      	ldr	r1, [r4, #8]
 801048c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010490:	47b8      	blx	r7
 8010492:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 8010494:	6922      	ldr	r2, [r4, #16]
 8010496:	4631      	mov	r1, r6
 8010498:	f8d5 31d8 	ldr.w	r3, [r5, #472]	@ 0x1d8
 801049c:	4628      	mov	r0, r5
  old_next_row = post->next_row;
 801049e:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 80104a0:	9202      	str	r2, [sp, #8]
 80104a2:	f104 0218 	add.w	r2, r4, #24
 80104a6:	9201      	str	r2, [sp, #4]
 80104a8:	68e2      	ldr	r2, [r4, #12]
 80104aa:	9200      	str	r2, [sp, #0]
 80104ac:	464a      	mov	r2, r9
 80104ae:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80104b2:	4653      	mov	r3, sl
 80104b4:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 80104b6:	69a6      	ldr	r6, [r4, #24]
 80104b8:	42be      	cmp	r6, r7
 80104ba:	d910      	bls.n	80104de <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 80104bc:	f8d5 31e0 	ldr.w	r3, [r5, #480]	@ 0x1e0
    num_rows = post->next_row - old_next_row;
 80104c0:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 80104c2:	68e1      	ldr	r1, [r4, #12]
 80104c4:	2200      	movs	r2, #0
 80104c6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80104ca:	4628      	mov	r0, r5
 80104cc:	4633      	mov	r3, r6
 80104ce:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80104d2:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 80104d4:	f8d8 3000 	ldr.w	r3, [r8]
 80104d8:	4433      	add	r3, r6
 80104da:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 80104de:	6922      	ldr	r2, [r4, #16]
 80104e0:	69a3      	ldr	r3, [r4, #24]
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d304      	bcc.n	80104f0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 80104e6:	6963      	ldr	r3, [r4, #20]
 80104e8:	4413      	add	r3, r2
 80104ea:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 80104ec:	2300      	movs	r3, #0
 80104ee:	61a3      	str	r3, [r4, #24]
  }
}
 80104f0:	b005      	add	sp, #20
 80104f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104f6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 80104f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 80104fa:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
{
 80104fe:	4606      	mov	r6, r0
 8010500:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8010502:	69a3      	ldr	r3, [r4, #24]
 8010504:	b93b      	cbnz	r3, 8010516 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8010506:	6842      	ldr	r2, [r0, #4]
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	69d5      	ldr	r5, [r2, #28]
 801050c:	68a1      	ldr	r1, [r4, #8]
 801050e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010512:	47a8      	blx	r5
 8010514:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 8010516:	6963      	ldr	r3, [r4, #20]
 8010518:	6f75      	ldr	r5, [r6, #116]	@ 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 801051a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 801051c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 801051e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 8010520:	683a      	ldr	r2, [r7, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 8010522:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010524:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010526:	429d      	cmp	r5, r3
 8010528:	bf28      	it	cs
 801052a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 801052c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801052e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010530:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010534:	429d      	cmp	r5, r3
 8010536:	bf28      	it	cs
 8010538:	461d      	movcs	r5, r3
 801053a:	68e3      	ldr	r3, [r4, #12]
 801053c:	9303      	str	r3, [sp, #12]
 801053e:	9803      	ldr	r0, [sp, #12]
 8010540:	f8d6 31e0 	ldr.w	r3, [r6, #480]	@ 0x1e0
 8010544:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010548:	4630      	mov	r0, r6
 801054a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801054e:	462b      	mov	r3, r5
 8010550:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	442b      	add	r3, r5
 8010556:	603b      	str	r3, [r7, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 8010558:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 801055a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 801055c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 801055e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 8010560:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 8010562:	d304      	bcc.n	801056e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 8010564:	6963      	ldr	r3, [r4, #20]
 8010566:	4413      	add	r3, r2
 8010568:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 801056a:	2300      	movs	r3, #0
 801056c:	61a3      	str	r3, [r4, #24]
  }
}
 801056e:	b004      	add	sp, #16
 8010570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010574 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010574:	6843      	ldr	r3, [r0, #4]
 8010576:	221c      	movs	r2, #28
{
 8010578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801057c:	681b      	ldr	r3, [r3, #0]
{
 801057e:	4688      	mov	r8, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010580:	2101      	movs	r1, #1
{
 8010582:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010584:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 8010586:	4b16      	ldr	r3, [pc, #88]	@ (80105e0 <jinit_d_post_controller+0x6c>)
  cinfo->post = (struct jpeg_d_post_controller *) post;
 8010588:	f8c4 01c4 	str.w	r0, [r4, #452]	@ 0x1c4
  post->whole_image = NULL;	/* flag for no virtual arrays */
 801058c:	2700      	movs	r7, #0
  post->pub.start_pass = start_pass_dpost;
 801058e:	6003      	str	r3, [r0, #0]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010590:	4605      	mov	r5, r0
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 8010592:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 8010594:	e9c0 7702 	strd	r7, r7, [r0, #8]
  if (cinfo->quantize_colors) {
 8010598:	b1c3      	cbz	r3, 80105cc <jinit_d_post_controller+0x58>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 801059a:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 801059e:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 80105a0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80105a2:	6862      	ldr	r2, [r4, #4]
 80105a4:	434e      	muls	r6, r1
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 80105a6:	6103      	str	r3, [r0, #16]
    if (need_full_buffer) {
 80105a8:	f1b8 0f00 	cmp.w	r8, #0
 80105ac:	d011      	beq.n	80105d2 <jinit_d_post_controller+0x5e>
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 80105ae:	4619      	mov	r1, r3
 80105b0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80105b2:	f8d2 8010 	ldr.w	r8, [r2, #16]
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 80105b6:	f007 f9ca 	bl	801794e <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80105ba:	692b      	ldr	r3, [r5, #16]
 80105bc:	463a      	mov	r2, r7
 80105be:	2101      	movs	r1, #1
 80105c0:	e9cd 0300 	strd	r0, r3, [sp]
 80105c4:	4633      	mov	r3, r6
 80105c6:	4620      	mov	r0, r4
 80105c8:	47c0      	blx	r8
 80105ca:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 80105cc:	b002      	add	sp, #8
 80105ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 80105d2:	6897      	ldr	r7, [r2, #8]
 80105d4:	2101      	movs	r1, #1
 80105d6:	4632      	mov	r2, r6
 80105d8:	4620      	mov	r0, r4
 80105da:	47b8      	blx	r7
 80105dc:	60e8      	str	r0, [r5, #12]
}
 80105de:	e7f5      	b.n	80105cc <jinit_d_post_controller+0x58>
 80105e0:	0801038d 	.word	0x0801038d

080105e4 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 80105e4:	f8d0 213c 	ldr.w	r2, [r0, #316]	@ 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80105e8:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 80105ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 80105ee:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80105f0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80105f2:	4770      	bx	lr

080105f4 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80105f8:	f8d0 41d8 	ldr.w	r4, [r0, #472]	@ 0x1d8
{
 80105fc:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 80105fe:	f8d0 313c 	ldr.w	r3, [r0, #316]	@ 0x13c
{
 8010602:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010604:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
{
 8010606:	4683      	mov	fp, r0
 8010608:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 801060a:	429a      	cmp	r2, r3
 801060c:	db10      	blt.n	8010630 <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 801060e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	@ 0xd8
 8010612:	2600      	movs	r6, #0
 8010614:	f04f 0a58 	mov.w	sl, #88	@ 0x58
 8010618:	9303      	str	r3, [sp, #12]
 801061a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801061e:	9a03      	ldr	r2, [sp, #12]
 8010620:	fb0a 2106 	mla	r1, sl, r6, r2
 8010624:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 8010628:	42b2      	cmp	r2, r6
 801062a:	dc31      	bgt.n	8010690 <sep_upsample+0x9c>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	65e3      	str	r3, [r4, #92]	@ 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 8010630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010632:	4658      	mov	r0, fp
  out_rows_avail -= *out_row_ctr;
 8010634:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801063a:	1af6      	subs	r6, r6, r3
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 801063c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
  if (num_rows > out_rows_avail)
 801063e:	428e      	cmp	r6, r1
 8010640:	bf28      	it	cs
 8010642:	460e      	movcs	r6, r1
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 8010644:	f8db 113c 	ldr.w	r1, [fp, #316]	@ 0x13c
 8010648:	1a89      	subs	r1, r1, r2
 801064a:	428e      	cmp	r6, r1
 801064c:	bf28      	it	cs
 801064e:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010650:	f8db 11dc 	ldr.w	r1, [fp, #476]	@ 0x1dc
 8010654:	9600      	str	r6, [sp, #0]
 8010656:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801065a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801065c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010660:	f104 010c 	add.w	r1, r4, #12
 8010664:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 8010666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010668:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4433      	add	r3, r6
 801066e:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 8010670:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8010672:	1b9b      	subs	r3, r3, r6
 8010674:	6623      	str	r3, [r4, #96]	@ 0x60
  upsample->next_row_out += num_rows;
 8010676:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010678:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 801067a:	f8db 313c 	ldr.w	r3, [fp, #316]	@ 0x13c
 801067e:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 8010680:	65e6      	str	r6, [r4, #92]	@ 0x5c
    (*in_row_group_ctr)++;
 8010682:	bfa2      	ittt	ge
 8010684:	682b      	ldrge	r3, [r5, #0]
 8010686:	3301      	addge	r3, #1
 8010688:	602b      	strge	r3, [r5, #0]
}
 801068a:	b005      	add	sp, #20
 801068c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 8010690:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      (*upsample->methods[ci]) (cinfo, compptr,
 8010692:	f103 0904 	add.w	r9, r3, #4
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 8010696:	682a      	ldr	r2, [r5, #0]
      (*upsample->methods[ci]) (cinfo, compptr,
 8010698:	3b24      	subs	r3, #36	@ 0x24
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 801069a:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 801069c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801069e:	4607      	mov	r7, r0
 80106a0:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 80106a4:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 80106a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80106aa:	4658      	mov	r0, fp
 80106ac:	47b8      	blx	r7
	 ci++, compptr++) {
 80106ae:	464b      	mov	r3, r9
 80106b0:	e7b5      	b.n	801061e <sep_upsample+0x2a>

080106b2 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 80106b2:	601a      	str	r2, [r3, #0]
}
 80106b4:	4770      	bx	lr

080106b6 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 80106b6:	2200      	movs	r2, #0
 80106b8:	601a      	str	r2, [r3, #0]
}
 80106ba:	4770      	bx	lr

080106bc <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 80106be:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 80106c0:	2300      	movs	r3, #0
 80106c2:	f8d0 113c 	ldr.w	r1, [r0, #316]	@ 0x13c
 80106c6:	4299      	cmp	r1, r3
 80106c8:	dc00      	bgt.n	80106cc <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 80106ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 80106cc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 80106d0:	6f04      	ldr	r4, [r0, #112]	@ 0x70
    inptr = input_data[outrow];
 80106d2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 80106d6:	440c      	add	r4, r1
    while (outptr < outend) {
 80106d8:	42a1      	cmp	r1, r4
 80106da:	d301      	bcc.n	80106e0 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 80106dc:	3301      	adds	r3, #1
 80106de:	e7f0      	b.n	80106c2 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 80106e0:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 80106e4:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 80106e8:	f801 6c01 	strb.w	r6, [r1, #-1]
 80106ec:	e7f4      	b.n	80106d8 <h2v1_upsample+0x1c>

080106ee <int_upsample>:
{
 80106ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f2:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 80106f4:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80106f6:	f8d0 01d8 	ldr.w	r0, [r0, #472]	@ 0x1d8
{
 80106fa:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 80106fc:	684b      	ldr	r3, [r1, #4]
 80106fe:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 8010700:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 8010702:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 8010704:	f893 8096 	ldrb.w	r8, [r3, #150]	@ 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 8010708:	f893 a08c 	ldrb.w	sl, [r3, #140]	@ 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 801070c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010710:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 8010712:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8010716:	42a3      	cmp	r3, r4
 8010718:	dc02      	bgt.n	8010720 <int_upsample+0x32>
}
 801071a:	b005      	add	sp, #20
 801071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 8010720:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 8010724:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    inptr = input_data[inrow];
 8010726:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 801072a:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 801072e:	454b      	cmp	r3, r9
 8010730:	d30e      	bcc.n	8010750 <int_upsample+0x62>
    if (v_expand > 1) {
 8010732:	f1b8 0f01 	cmp.w	r8, #1
 8010736:	dd09      	ble.n	801074c <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010738:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801073a:	463a      	mov	r2, r7
 801073c:	4621      	mov	r1, r4
 801073e:	4638      	mov	r0, r7
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	9b03      	ldr	r3, [sp, #12]
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	1c63      	adds	r3, r4, #1
 8010748:	f007 f909 	bl	801795e <jcopy_sample_rows>
    outrow += v_expand;
 801074c:	4444      	add	r4, r8
 801074e:	e7e0      	b.n	8010712 <int_upsample+0x24>
	*outptr++ = invalue;
 8010750:	4618      	mov	r0, r3
 8010752:	4652      	mov	r2, sl
 8010754:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010758:	f019 fcaa 	bl	802a0b0 <memset>
 801075c:	4603      	mov	r3, r0
 801075e:	4453      	add	r3, sl
 8010760:	e7e5      	b.n	801072e <int_upsample+0x40>

08010762 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010762:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010766:	4605      	mov	r5, r0
 8010768:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 801076a:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 801076c:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 801076e:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 8010772:	f8d5 313c 	ldr.w	r3, [r5, #316]	@ 0x13c
 8010776:	42a3      	cmp	r3, r4
 8010778:	dc02      	bgt.n	8010780 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 801077a:	b002      	add	sp, #8
 801077c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 8010780:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 8010784:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    inptr = input_data[inrow];
 8010786:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 801078a:	441a      	add	r2, r3
    while (outptr < outend) {
 801078c:	4293      	cmp	r3, r2
 801078e:	d30a      	bcc.n	80107a6 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010790:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010792:	4621      	mov	r1, r4
 8010794:	4632      	mov	r2, r6
 8010796:	4630      	mov	r0, r6
 8010798:	e9cd 8300 	strd	r8, r3, [sp]
 801079c:	1c63      	adds	r3, r4, #1
    outrow += 2;
 801079e:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80107a0:	f007 f8dd 	bl	801795e <jcopy_sample_rows>
    outrow += 2;
 80107a4:	e7e5      	b.n	8010772 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 80107a6:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 80107aa:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 80107ae:	f803 0c01 	strb.w	r0, [r3, #-1]
 80107b2:	e7eb      	b.n	801078c <h2v2_upsample+0x2a>

080107b4 <jinit_upsampler>:
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107b4:	6843      	ldr	r3, [r0, #4]
 80107b6:	22a0      	movs	r2, #160	@ 0xa0
 80107b8:	2101      	movs	r1, #1
 80107ba:	681b      	ldr	r3, [r3, #0]
{
 80107bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107c0:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107c2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 80107c4:	4b3e      	ldr	r3, [pc, #248]	@ (80108c0 <jinit_upsampler+0x10c>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107c6:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 80107c8:	f8c4 01d8 	str.w	r0, [r4, #472]	@ 0x1d8
  upsample->pub.start_pass = start_pass_upsample;
 80107cc:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 80107ce:	4b3d      	ldr	r3, [pc, #244]	@ (80108c4 <jinit_upsampler+0x110>)
 80107d0:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 80107d2:	2300      	movs	r3, #0
 80107d4:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 80107d6:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 80107da:	b12b      	cbz	r3, 80107e8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 80107dc:	6823      	ldr	r3, [r4, #0]
 80107de:	221a      	movs	r2, #26
 80107e0:	4620      	mov	r0, r4
 80107e2:	615a      	str	r2, [r3, #20]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80107e8:	f105 060c 	add.w	r6, r5, #12
 80107ec:	f105 088c 	add.w	r8, r5, #140	@ 0x8c
 80107f0:	f1c5 25ff 	rsb	r5, r5, #4278255360	@ 0xff00ff00
 80107f4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	@ 0xd8
    v_out_group = cinfo->max_v_samp_factor;
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
    need_buffer = TRUE;
    if (! compptr->component_needed) {
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
 80107f8:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 80108d8 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80107fc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010800:	3574      	adds	r5, #116	@ 0x74
 8010802:	eb05 0308 	add.w	r3, r5, r8
 8010806:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010808:	429a      	cmp	r2, r3
 801080a:	dc01      	bgt.n	8010810 <jinit_upsampler+0x5c>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 801080c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010812:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010814:	f8d7 c008 	ldr.w	ip, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010818:	434b      	muls	r3, r1
 801081a:	f8d4 1144 	ldr.w	r1, [r4, #324]	@ 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 801081e:	f8d7 e024 	ldr.w	lr, [r7, #36]	@ 0x24
		 cinfo->min_DCT_h_scaled_size;
 8010822:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010826:	fb93 f3f1 	sdiv	r3, r3, r1
    v_out_group = cinfo->max_v_samp_factor;
 801082a:	e9d4 a14e 	ldrd	sl, r1, [r4, #312]	@ 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 801082e:	65b3      	str	r3, [r6, #88]	@ 0x58
    if (! compptr->component_needed) {
 8010830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010832:	b932      	cbnz	r2, 8010842 <jinit_upsampler+0x8e>
      upsample->methods[ci] = noop_upsample;
 8010834:	f8c6 9028 	str.w	r9, [r6, #40]	@ 0x28
       ci++, compptr++) {
 8010838:	3758      	adds	r7, #88	@ 0x58
 801083a:	3604      	adds	r6, #4
 801083c:	f108 0801 	add.w	r8, r8, #1
 8010840:	e7df      	b.n	8010802 <jinit_upsampler+0x4e>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010842:	fb0e f20c 	mul.w	r2, lr, ip
 8010846:	fb92 f2f0 	sdiv	r2, r2, r0
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 801084a:	4552      	cmp	r2, sl
 801084c:	d104      	bne.n	8010858 <jinit_upsampler+0xa4>
 801084e:	428b      	cmp	r3, r1
 8010850:	d102      	bne.n	8010858 <jinit_upsampler+0xa4>
      upsample->methods[ci] = fullsize_upsample;
 8010852:	4b1d      	ldr	r3, [pc, #116]	@ (80108c8 <jinit_upsampler+0x114>)
 8010854:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (need_buffer) {
 8010856:	e7ef      	b.n	8010838 <jinit_upsampler+0x84>
    } else if (h_in_group * 2 == h_out_group &&
 8010858:	ebba 0f42 	cmp.w	sl, r2, lsl #1
 801085c:	d118      	bne.n	8010890 <jinit_upsampler+0xdc>
 801085e:	428b      	cmp	r3, r1
 8010860:	d111      	bne.n	8010886 <jinit_upsampler+0xd2>
      upsample->methods[ci] = h2v1_upsample;
 8010862:	4b1a      	ldr	r3, [pc, #104]	@ (80108cc <jinit_upsampler+0x118>)
      upsample->methods[ci] = h2v2_upsample;
 8010864:	62b3      	str	r3, [r6, #40]	@ 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010866:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010868:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
 801086c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 801086e:	f8d3 a008 	ldr.w	sl, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010872:	f007 f86c 	bl	801794e <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010876:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801087a:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 801087c:	2101      	movs	r1, #1
 801087e:	4620      	mov	r0, r4
 8010880:	47d0      	blx	sl
 8010882:	6030      	str	r0, [r6, #0]
 8010884:	e7d8      	b.n	8010838 <jinit_upsampler+0x84>
    } else if (h_in_group * 2 == h_out_group &&
 8010886:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 801088a:	d101      	bne.n	8010890 <jinit_upsampler+0xdc>
      upsample->methods[ci] = h2v2_upsample;
 801088c:	4b10      	ldr	r3, [pc, #64]	@ (80108d0 <jinit_upsampler+0x11c>)
 801088e:	e7e9      	b.n	8010864 <jinit_upsampler+0xb0>
    } else if ((h_out_group % h_in_group) == 0 &&
 8010890:	fb9a f0f2 	sdiv	r0, sl, r2
 8010894:	fb02 a210 	mls	r2, r2, r0, sl
 8010898:	b95a      	cbnz	r2, 80108b2 <jinit_upsampler+0xfe>
	       (v_out_group % v_in_group) == 0) {
 801089a:	fb91 f2f3 	sdiv	r2, r1, r3
 801089e:	fb03 1112 	mls	r1, r3, r2, r1
    } else if ((h_out_group % h_in_group) == 0 &&
 80108a2:	b931      	cbnz	r1, 80108b2 <jinit_upsampler+0xfe>
      upsample->methods[ci] = int_upsample;
 80108a4:	4b0b      	ldr	r3, [pc, #44]	@ (80108d4 <jinit_upsampler+0x120>)
 80108a6:	62b3      	str	r3, [r6, #40]	@ 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 80108a8:	f888 0000 	strb.w	r0, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 80108ac:	f888 200a 	strb.w	r2, [r8, #10]
    if (need_buffer) {
 80108b0:	e7d9      	b.n	8010866 <jinit_upsampler+0xb2>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 80108b2:	6823      	ldr	r3, [r4, #0]
 80108b4:	2227      	movs	r2, #39	@ 0x27
 80108b6:	4620      	mov	r0, r4
 80108b8:	615a      	str	r2, [r3, #20]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4798      	blx	r3
    if (need_buffer) {
 80108be:	e7d2      	b.n	8010866 <jinit_upsampler+0xb2>
 80108c0:	080105e5 	.word	0x080105e5
 80108c4:	080105f5 	.word	0x080105f5
 80108c8:	080106b3 	.word	0x080106b3
 80108cc:	080106bd 	.word	0x080106bd
 80108d0:	08010763 	.word	0x08010763
 80108d4:	080106ef 	.word	0x080106ef
 80108d8:	080106b7 	.word	0x080106b7

080108dc <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 80108dc:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 80108de:	6803      	ldr	r3, [r0, #0]
{
 80108e0:	b0b3      	sub	sp, #204	@ 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	4669      	mov	r1, sp
 80108e6:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 80108e8:	b033      	add	sp, #204	@ 0xcc
 80108ea:	f85d fb04 	ldr.w	pc, [sp], #4

080108ee <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 80108ee:	2900      	cmp	r1, #0
{
 80108f0:	4603      	mov	r3, r0
 80108f2:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 80108f4:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 80108f6:	da0b      	bge.n	8010910 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 80108f8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80108fa:	b112      	cbz	r2, 8010902 <emit_message+0x14>
 80108fc:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80108fe:	2a02      	cmp	r2, #2
 8010900:	dd02      	ble.n	8010908 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 8010902:	68a2      	ldr	r2, [r4, #8]
 8010904:	4618      	mov	r0, r3
 8010906:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 8010908:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 801090a:	3301      	adds	r3, #1
 801090c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 801090e:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 8010910:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8010912:	428b      	cmp	r3, r1
 8010914:	dbfb      	blt.n	801090e <emit_message+0x20>
      (*err->output_message) (cinfo);
 8010916:	68a3      	ldr	r3, [r4, #8]
}
 8010918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 801091c:	4718      	bx	r3

0801091e <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 801091e:	6803      	ldr	r3, [r0, #0]
 8010920:	2200      	movs	r2, #0
 8010922:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 8010924:	615a      	str	r2, [r3, #20]
}
 8010926:	4770      	bx	lr

08010928 <format_message>:
{
 8010928:	4603      	mov	r3, r0
 801092a:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 801092c:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 801092e:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010930:	2b00      	cmp	r3, #0
{
 8010932:	b530      	push	{r4, r5, lr}
 8010934:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010936:	dd1f      	ble.n	8010978 <format_message+0x50>
 8010938:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 801093a:	4299      	cmp	r1, r3
 801093c:	db1c      	blt.n	8010978 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 801093e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8010940:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 8010944:	b911      	cbnz	r1, 801094c <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 8010946:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 8010948:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801094a:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 801094c:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 801094e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010952:	b9fc      	cbnz	r4, 8010994 <format_message+0x6c>
    sprintf(buffer, msgtext,
 8010954:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8010956:	9305      	str	r3, [sp, #20]
 8010958:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 801095a:	9304      	str	r3, [sp, #16]
 801095c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801095e:	9303      	str	r3, [sp, #12]
 8010960:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010962:	9302      	str	r3, [sp, #8]
 8010964:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8010966:	9301      	str	r3, [sp, #4]
 8010968:	6a13      	ldr	r3, [r2, #32]
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 8010970:	f019 faa6 	bl	8029ec0 <siprintf>
}
 8010974:	b007      	add	sp, #28
 8010976:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 8010978:	6f94      	ldr	r4, [r2, #120]	@ 0x78
 801097a:	2c00      	cmp	r4, #0
 801097c:	d0e3      	beq.n	8010946 <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 801097e:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
  } else if (err->addon_message_table != NULL &&
 8010980:	4299      	cmp	r1, r3
 8010982:	dce0      	bgt.n	8010946 <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010984:	f8d2 5080 	ldr.w	r5, [r2, #128]	@ 0x80
 8010988:	429d      	cmp	r5, r3
 801098a:	dbdc      	blt.n	8010946 <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 801098c:	1a59      	subs	r1, r3, r1
 801098e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8010992:	e7d7      	b.n	8010944 <format_message+0x1c>
    if (ch == '%') {
 8010994:	2c25      	cmp	r4, #37	@ 0x25
 8010996:	d1da      	bne.n	801094e <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	2b73      	cmp	r3, #115	@ 0x73
 801099c:	d1da      	bne.n	8010954 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 801099e:	3218      	adds	r2, #24
}
 80109a0:	b007      	add	sp, #28
 80109a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 80109a6:	f019 ba8b 	b.w	8029ec0 <siprintf>

080109aa <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 80109aa:	6803      	ldr	r3, [r0, #0]
{
 80109ac:	b510      	push	{r4, lr}
 80109ae:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 80109b0:	689b      	ldr	r3, [r3, #8]
 80109b2:	4798      	blx	r3
  jpeg_destroy(cinfo);
 80109b4:	4620      	mov	r0, r4
}
 80109b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 80109ba:	f7f9 bfaf 	b.w	800a91c <jpeg_destroy>
	...

080109c0 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 80109c0:	4a0a      	ldr	r2, [pc, #40]	@ (80109ec <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 80109c2:	490b      	ldr	r1, [pc, #44]	@ (80109f0 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 80109c4:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 80109c6:	4a0b      	ldr	r2, [pc, #44]	@ (80109f4 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 80109c8:	6701      	str	r1, [r0, #112]	@ 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 80109ca:	217e      	movs	r1, #126	@ 0x7e
  err->emit_message = emit_message;
 80109cc:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 80109ce:	4a0a      	ldr	r2, [pc, #40]	@ (80109f8 <jpeg_std_error+0x38>)
 80109d0:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 80109d2:	4a0a      	ldr	r2, [pc, #40]	@ (80109fc <jpeg_std_error+0x3c>)
 80109d4:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 80109d6:	4a0a      	ldr	r2, [pc, #40]	@ (8010a00 <jpeg_std_error+0x40>)
 80109d8:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 80109da:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 80109dc:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 80109e0:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 80109e2:	e9c0 121d 	strd	r1, r2, [r0, #116]	@ 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 80109e6:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c

  return err;
}
 80109ea:	4770      	bx	lr
 80109ec:	080109ab 	.word	0x080109ab
 80109f0:	0802ec3c 	.word	0x0802ec3c
 80109f4:	080108ef 	.word	0x080108ef
 80109f8:	080108dd 	.word	0x080108dd
 80109fc:	08010929 	.word	0x08010929
 8010a00:	0801091f 	.word	0x0801091f

08010a04 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	4699      	mov	r9, r3
 8010a0a:	b0c1      	sub	sp, #260	@ 0x104
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 8010a0c:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8010a0e:	3a02      	subs	r2, #2
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8010a10:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
  wsptr = workspace;
 8010a14:	466c      	mov	r4, sp
 8010a16:	f103 0a20 	add.w	sl, r3, #32

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010a1a:	ed9f 5abd 	vldr	s10, [pc, #756]	@ 8010d10 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010a1e:	ed9f 4abd 	vldr	s8, [pc, #756]	@ 8010d14 <jpeg_idct_float+0x310>
 8010a22:	eddf 4abd 	vldr	s9, [pc, #756]	@ 8010d18 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010a26:	eddf 3abd 	vldr	s7, [pc, #756]	@ 8010d1c <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010a2a:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
      wsptr++;
 8010a2e:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010a30:	f9b2 8022 	ldrsh.w	r8, [r2, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010a34:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	@ 0x32
 8010a38:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010a3c:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	@ 0x52
 8010a40:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8010a44:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	@ 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a48:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 8010a4c:	ecb3 7a01 	vldmia	r3!, {s14}
 8010a50:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010a54:	ea4c 0b08 	orr.w	fp, ip, r8
 8010a58:	ea4e 0b0b 	orr.w	fp, lr, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010a60:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a64:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010a68:	ea41 0b0b 	orr.w	fp, r1, fp
 8010a6c:	ea45 0b0b 	orr.w	fp, r5, fp
 8010a70:	ea50 0b0b 	orrs.w	fp, r0, fp
 8010a74:	f040 80c1 	bne.w	8010bfa <jpeg_idct_float+0x1f6>
      wsptr[DCTSIZE*0] = dcval;
 8010a78:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010a7c:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010a80:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010a84:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8010a88:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010a8c:	edc4 7a27 	vstr	s15, [r4, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010a90:	edc4 7a2f 	vstr	s15, [r4, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010a94:	edc4 7a37 	vstr	s15, [r4, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010a98:	459a      	cmp	sl, r3
 8010a9a:	d1c6      	bne.n	8010a2a <jpeg_idct_float+0x26>
 8010a9c:	f1a9 0404 	sub.w	r4, r9, #4
 8010aa0:	f109 031c 	add.w	r3, r9, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 8010aa4:	4669      	mov	r1, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010aa6:	eddf 2a9e 	vldr	s5, [pc, #632]	@ 8010d20 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010aaa:	eddf 4a99 	vldr	s9, [pc, #612]	@ 8010d10 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010aae:	ed9f 3a99 	vldr	s6, [pc, #612]	@ 8010d14 <jpeg_idct_float+0x310>
 8010ab2:	ed9f 4a99 	vldr	s8, [pc, #612]	@ 8010d18 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010ab6:	eddf 3a99 	vldr	s7, [pc, #612]	@ 8010d1c <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010aba:	edd1 6a00 	vldr	s13, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010abe:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 8010ac0:	ed11 7a04 	vldr	s14, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010ac4:	ee76 6aa2 	vadd.f32	s13, s13, s5
    tmp13 = wsptr[2] + wsptr[6];
 8010ac8:	ed51 5a02 	vldr	s11, [r1, #-8]
    z11 = wsptr[1] + wsptr[7];
 8010acc:	ed11 1a01 	vldr	s2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8010ad0:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 8010ad4:	ee77 7a26 	vadd.f32	s15, s14, s13
    outptr = output_buf[ctr] + output_col;
 8010ad8:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
    tmp11 = z5 - wsptr[4];
 8010ada:	ee76 6ac7 	vsub.f32	s13, s13, s14
    tmp13 = wsptr[2] + wsptr[6];
 8010ade:	ed11 7a06 	vldr	s14, [r1, #-24]	@ 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 8010ae2:	18a8      	adds	r0, r5, r2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010ae4:	9f4a      	ldr	r7, [sp, #296]	@ 0x128
    tmp13 = wsptr[2] + wsptr[6];
 8010ae6:	ee37 6a25 	vadd.f32	s12, s14, s11
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010aea:	42a3      	cmp	r3, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010aec:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010af0:	eeb0 2a46 	vmov.f32	s4, s12
    tmp0 = tmp10 + tmp13;
 8010af4:	ee77 5a86 	vadd.f32	s11, s15, s12
    tmp3 = tmp10 - tmp13;
 8010af8:	ee37 5ac6 	vsub.f32	s10, s15, s12
    z13 = wsptr[5] + wsptr[3];
 8010afc:	ed51 7a03 	vldr	s15, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010b00:	ee97 2a24 	vfnms.f32	s4, s14, s9
    z13 = wsptr[5] + wsptr[3];
 8010b04:	ed11 7a05 	vldr	s14, [r1, #-20]	@ 0xffffffec
 8010b08:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 8010b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 8010b10:	ed11 7a07 	vldr	s14, [r1, #-28]	@ 0xffffffe4
    tmp1 = tmp11 + tmp12;
 8010b14:	ee36 6a82 	vadd.f32	s12, s13, s4
    tmp2 = tmp11 - tmp12;
 8010b18:	ee76 6ac2 	vsub.f32	s13, s13, s4
    z11 = wsptr[1] + wsptr[7];
 8010b1c:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 8010b20:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 8010b24:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 8010b28:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010b2c:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010b30:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010b34:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010b38:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010b3c:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 8010b40:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 8010b44:	eef0 1a67 	vmov.f32	s3, s15
 8010b48:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010b4c:	ee35 2a81 	vadd.f32	s4, s11, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010b50:	ee75 5ac1 	vsub.f32	s11, s11, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010b54:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010b58:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tmp4 = tmp10 - tmp5;
 8010b5c:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010b60:	ee12 2a10 	vmov	r2, s4
 8010b64:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8010b68:	5cb2      	ldrb	r2, [r6, r2]
 8010b6a:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010b6c:	ee15 2a90 	vmov	r2, s11
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010b70:	ee76 5a27 	vadd.f32	s11, s12, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010b74:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010b78:	ee36 6a67 	vsub.f32	s12, s12, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010b7c:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010b80:	5cb2      	ldrb	r2, [r6, r2]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010b82:	eefd 7ac6 	vcvt.s32.f32	s15, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010b86:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010b88:	ee15 2a90 	vmov	r2, s11
 8010b8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8010b90:	5cb2      	ldrb	r2, [r6, r2]
 8010b92:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010b94:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010b98:	ee76 7aa1 	vadd.f32	s15, s13, s3
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010b9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010ba0:	ee76 6ae1 	vsub.f32	s13, s13, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010ba8:	5cb2      	ldrb	r2, [r6, r2]
 8010baa:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010bac:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010bb0:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010bb4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8010bb8:	5cb2      	ldrb	r2, [r6, r2]
 8010bba:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010bbc:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010bc0:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010bc4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010bcc:	5cb2      	ldrb	r2, [r6, r2]
 8010bce:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010bd0:	ee17 2a90 	vmov	r2, s15
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8010bd4:	ee75 7a47 	vsub.f32	s15, s10, s14
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010bd8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8010bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010be0:	5cb2      	ldrb	r2, [r6, r2]
 8010be2:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8010be4:	ee17 2a90 	vmov	r2, s15
 8010be8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8010bec:	5cb2      	ldrb	r2, [r6, r2]
 8010bee:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010bf0:	f47f af63 	bne.w	8010aba <jpeg_idct_float+0xb6>
  }
}
 8010bf4:	b041      	add	sp, #260	@ 0x104
 8010bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bfa:	ee07 8a10 	vmov	s14, r8
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010bfe:	ed93 3a2f 	vldr	s6, [r3, #188]	@ 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c02:	edd3 2a1f 	vldr	s5, [r3, #124]	@ 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c0a:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c0e:	edd3 5a0f 	vldr	s11, [r3, #60]	@ 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c12:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c16:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010c1a:	ed93 1a37 	vldr	s2, [r3, #220]	@ 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c22:	edd3 1a07 	vldr	s3, [r3, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c26:	edd3 0a17 	vldr	s1, [r3, #92]	@ 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c2a:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010c2e:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 8010c32:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010c36:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010c3a:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010c3e:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010c42:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010c46:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8010c4a:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 8010c4e:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010c52:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010c56:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
    tmp1 = tmp11 + tmp12;
 8010c5a:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 8010c5e:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c62:	ee07 ca90 	vmov	s15, ip
 8010c66:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c6a:	ee07 ea90 	vmov	s15, lr
 8010c6e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010c72:	ee07 1a90 	vmov	s15, r1
 8010c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010c7e:	ee07 0a10 	vmov	s14, r0
 8010c82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010c86:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010c8a:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 8010c8e:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010c92:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 8010c96:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 8010c9a:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 8010c9e:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010ca2:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010ca6:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 8010caa:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010cae:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010cb2:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 8010cb6:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010cba:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010cbe:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 8010cc2:	eeb0 6a67 	vmov.f32	s12, s15
 8010cc6:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8010cca:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8010cce:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8010cd2:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8010cd6:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8010cda:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8010cde:	ed84 2a37 	vstr	s4, [r4, #220]	@ 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8010ce2:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 8010ce6:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8010cea:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8010cee:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8010cf2:	edc4 2a2f 	vstr	s5, [r4, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8010cf6:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8010cfa:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8010cfe:	edc4 6a27 	vstr	s13, [r4, #156]	@ 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8010d02:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8010d06:	ee73 7a47 	vsub.f32	s15, s6, s14
 8010d0a:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
    wsptr++;
 8010d0e:	e6c3      	b.n	8010a98 <jpeg_idct_float+0x94>
 8010d10:	3fb504f3 	.word	0x3fb504f3
 8010d14:	3f8a8bd4 	.word	0x3f8a8bd4
 8010d18:	3fec835e 	.word	0x3fec835e
 8010d1c:	40273d75 	.word	0x40273d75
 8010d20:	43008000 	.word	0x43008000

08010d24 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d28:	b0c5      	sub	sp, #276	@ 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 8010d2a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8010d2c:	3a02      	subs	r2, #2
{
 8010d2e:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d30:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8010d34:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010d38:	f105 0320 	add.w	r3, r5, #32
 8010d3c:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8010d3e:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010d40:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8010d44:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010d46:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010d4a:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	@ 0x32
 8010d4e:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010d52:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	@ 0x52
 8010d56:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8010d5a:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	@ 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d5e:	f855 0b04 	ldr.w	r0, [r5], #4
 8010d62:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8010d66:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010d68:	ea46 000c 	orr.w	r0, r6, ip
 8010d6c:	4338      	orrs	r0, r7
 8010d6e:	ea4a 0000 	orr.w	r0, sl, r0
 8010d72:	4308      	orrs	r0, r1
 8010d74:	ea4e 0000 	orr.w	r0, lr, r0
 8010d78:	ea58 0000 	orrs.w	r0, r8, r0
 8010d7c:	d13f      	bne.n	8010dfe <jpeg_idct_ifast+0xda>
      wsptr[DCTSIZE*0] = dcval;
 8010d7e:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010d82:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010d84:	63dc      	str	r4, [r3, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010d86:	65dc      	str	r4, [r3, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8010d88:	67dc      	str	r4, [r3, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010d8a:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010d8e:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010d92:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010d96:	9903      	ldr	r1, [sp, #12]
 8010d98:	42a9      	cmp	r1, r5
 8010d9a:	d1d1      	bne.n	8010d40 <jpeg_idct_ifast+0x1c>
 8010d9c:	9b02      	ldr	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8010d9e:	ad04      	add	r5, sp, #16
 8010da0:	f1a3 0b04 	sub.w	fp, r3, #4
 8010da4:	331c      	adds	r3, #28
 8010da6:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010da8:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8010daa:	f85b af04 	ldr.w	sl, [fp, #4]!
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010dae:	69ea      	ldr	r2, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 8010db0:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8010db4:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
 8010db8:	e9d5 4703 	ldrd	r4, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010dbc:	ea4e 0608 	orr.w	r6, lr, r8
 8010dc0:	4326      	orrs	r6, r4
 8010dc2:	e9d5 3c05 	ldrd	r3, ip, [r5, #20]
 8010dc6:	433e      	orrs	r6, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8010dc8:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010dcc:	431e      	orrs	r6, r3
 8010dce:	ea46 060c 	orr.w	r6, r6, ip
 8010dd2:	4316      	orrs	r6, r2
 8010dd4:	d17e      	bne.n	8010ed4 <jpeg_idct_ifast+0x1b0>
				  & RANGE_MASK];
 8010dd6:	f3c1 1149 	ubfx	r1, r1, #5, #10
      
      outptr[0] = dcval;
 8010dda:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8010ddc:	f819 3001 	ldrb.w	r3, [r9, r1]
      outptr[0] = dcval;
 8010de0:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 8010de4:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 8010de6:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 8010de8:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 8010dea:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 8010dec:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 8010dee:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 8010df0:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010df2:	9b03      	ldr	r3, [sp, #12]
 8010df4:	455b      	cmp	r3, fp
 8010df6:	d1d7      	bne.n	8010da8 <jpeg_idct_ifast+0x84>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010df8:	b045      	add	sp, #276	@ 0x114
 8010dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010dfe:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8010e00:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e04:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8010e06:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e0a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
 8010e0e:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010e12:	eb0a 0004 	add.w	r0, sl, r4
    tmp11 = tmp0 - tmp2;
 8010e16:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010e1a:	ebac 0b0e 	sub.w	fp, ip, lr
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010e1e:	eb0c 0a0e 	add.w	sl, ip, lr
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010e22:	f44f 7cb5 	mov.w	ip, #362	@ 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8010e26:	eb00 0e0a 	add.w	lr, r0, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010e2a:	fb0c fb0b 	mul.w	fp, ip, fp
 8010e2e:	ebca 2b2b 	rsb	fp, sl, fp, asr #8
    tmp3 = tmp10 - tmp13;
 8010e32:	eba0 0a0a 	sub.w	sl, r0, sl
    tmp2 = tmp11 - tmp12;
 8010e36:	eba4 000b 	sub.w	r0, r4, fp
    tmp1 = tmp11 + tmp12;
 8010e3a:	eb04 0c0b 	add.w	ip, r4, fp
    tmp2 = tmp11 - tmp12;
 8010e3e:	9001      	str	r0, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e40:	69e8      	ldr	r0, [r5, #28]
 8010e42:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e44:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 8010e46:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e48:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
 8010e4c:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e4e:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 8010e52:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010e56:	eb07 0801 	add.w	r8, r7, r1
    z10 = tmp6 - tmp5;
 8010e5a:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 8010e5c:	1837      	adds	r7, r6, r0
    z12 = tmp4 - tmp7;
 8010e5e:	1a30      	subs	r0, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010e60:	180e      	adds	r6, r1, r0
    z12 = tmp4 - tmp7;
 8010e62:	4604      	mov	r4, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010e64:	f240 10d9 	movw	r0, #473	@ 0x1d9
    tmp7 = z11 + z13;		/* phase 5 */
 8010e68:	eb08 0b07 	add.w	fp, r8, r7
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010e6c:	eba7 0708 	sub.w	r7, r7, r8
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010e70:	4346      	muls	r6, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010e72:	f46f 7027 	mvn.w	r0, #668	@ 0x29c
 8010e76:	4341      	muls	r1, r0
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010e78:	f44f 70b5 	mov.w	r0, #362	@ 0x16a
 8010e7c:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010e7e:	f240 1015 	movw	r0, #277	@ 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010e82:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010e84:	4344      	muls	r4, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010e86:	eb01 2126 	add.w	r1, r1, r6, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010e8a:	1220      	asrs	r0, r4, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010e8c:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010e90:	eba0 2026 	sub.w	r0, r0, r6, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8010e94:	eb0e 060b 	add.w	r6, lr, fp
    tmp5 = tmp11 - tmp6;
 8010e98:	ebc1 2727 	rsb	r7, r1, r7, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8010e9c:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8010ea0:	ebae 060b 	sub.w	r6, lr, fp
    tmp4 = tmp10 + tmp5;
 8010ea4:	4438      	add	r0, r7
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8010ea6:	f8c3 60dc 	str.w	r6, [r3, #220]	@ 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8010eaa:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8010eae:	ebac 0101 	sub.w	r1, ip, r1
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8010eb2:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8010eb4:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8010eb8:	9901      	ldr	r1, [sp, #4]
 8010eba:	4439      	add	r1, r7
 8010ebc:	63d9      	str	r1, [r3, #60]	@ 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8010ebe:	9901      	ldr	r1, [sp, #4]
 8010ec0:	1bcc      	subs	r4, r1, r7
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8010ec2:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8010ec6:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8010eca:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8010ece:	67d9      	str	r1, [r3, #124]	@ 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8010ed0:	65d8      	str	r0, [r3, #92]	@ 0x5c
    wsptr++;
 8010ed2:	e760      	b.n	8010d96 <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 8010ed4:	187e      	adds	r6, r7, r1
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 8010ed6:	1bc9      	subs	r1, r1, r7
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 8010ed8:	eb08 070c 	add.w	r7, r8, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8010edc:	eba8 080c 	sub.w	r8, r8, ip
 8010ee0:	f44f 7cb5 	mov.w	ip, #362	@ 0x16a
 8010ee4:	fb0c f808 	mul.w	r8, ip, r8
    tmp0 = tmp10 + tmp13;
 8010ee8:	eb06 0c07 	add.w	ip, r6, r7
    tmp3 = tmp10 - tmp13;
 8010eec:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8010eee:	ebc7 2828 	rsb	r8, r7, r8, asr #8
    tmp1 = tmp11 + tmp12;
 8010ef2:	eb01 0708 	add.w	r7, r1, r8
    tmp2 = tmp11 - tmp12;
 8010ef6:	eba1 0108 	sub.w	r1, r1, r8
 8010efa:	9101      	str	r1, [sp, #4]
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8010efc:	18e1      	adds	r1, r4, r3
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 8010efe:	1b1b      	subs	r3, r3, r4
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8010f00:	eb0e 0402 	add.w	r4, lr, r2
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 8010f04:	ebae 0202 	sub.w	r2, lr, r2
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8010f08:	9102      	str	r1, [sp, #8]
    tmp7 = z11 + z13;		/* phase 5 */
 8010f0a:	eb01 0804 	add.w	r8, r1, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010f0e:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8010f12:	eb03 0e02 	add.w	lr, r3, r2
 8010f16:	fb01 fe0e 	mul.w	lr, r1, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010f1a:	f46f 7127 	mvn.w	r1, #668	@ 0x29c
 8010f1e:	434b      	muls	r3, r1
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010f20:	9902      	ldr	r1, [sp, #8]
 8010f22:	1a64      	subs	r4, r4, r1
 8010f24:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010f28:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010f2a:	434c      	muls	r4, r1
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010f2c:	f240 1115 	movw	r1, #277	@ 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010f30:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010f34:	434a      	muls	r2, r1
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010f36:	994e      	ldr	r1, [sp, #312]	@ 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010f38:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010f3c:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 8010f3e:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010f42:	eba2 222e 	sub.w	r2, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010f46:	eb0c 0e08 	add.w	lr, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8010f4a:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 8010f4e:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    tmp4 = tmp10 + tmp5;
 8010f52:	4422      	add	r2, r4
			    & RANGE_MASK];
 8010f54:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010f58:	f819 e00e 	ldrb.w	lr, [r9, lr]
 8010f5c:	f80a e001 	strb.w	lr, [sl, r1]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8010f60:	f819 c00c 	ldrb.w	ip, [r9, ip]
 8010f64:	f880 c007 	strb.w	ip, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8010f68:	eb07 0c03 	add.w	ip, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8010f6c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8010f6e:	f3cc 1c49 	ubfx	ip, ip, #5, #10
			    & RANGE_MASK];
 8010f72:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8010f76:	f819 c00c 	ldrb.w	ip, [r9, ip]
 8010f7a:	f880 c001 	strb.w	ip, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8010f7e:	f819 3007 	ldrb.w	r3, [r9, r7]
 8010f82:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8010f84:	9b01      	ldr	r3, [sp, #4]
 8010f86:	4423      	add	r3, r4
			    & RANGE_MASK];
 8010f88:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8010f8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010f90:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010f92:	9b01      	ldr	r3, [sp, #4]
 8010f94:	1b19      	subs	r1, r3, r4
			    & RANGE_MASK];
 8010f96:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010f9a:	f819 3001 	ldrb.w	r3, [r9, r1]
 8010f9e:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8010fa0:	18b3      	adds	r3, r6, r2
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010fa2:	1ab6      	subs	r6, r6, r2
			    & RANGE_MASK];
 8010fa4:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8010fa8:	f3c6 1649 	ubfx	r6, r6, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8010fac:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010fb0:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010fb2:	f819 3006 	ldrb.w	r3, [r9, r6]
 8010fb6:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010fb8:	e71b      	b.n	8010df2 <jpeg_idct_ifast+0xce>
	...

08010fbc <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	b0c7      	sub	sp, #284	@ 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010fc2:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
{
 8010fc4:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8010fc6:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010fc8:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8010fcc:	3380      	adds	r3, #128	@ 0x80
 8010fce:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010fd0:	1e93      	subs	r3, r2, #2
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	f105 0320 	add.w	r3, r5, #32
 8010fd8:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010fda:	9b00      	ldr	r3, [sp, #0]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8010fdc:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8010fde:	f855 0b04 	ldr.w	r0, [r5], #4
 8010fe2:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010fe4:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8010fe8:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010fec:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	@ 0x32
 8010ff0:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010ff4:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	@ 0x52
 8010ff8:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8010ffc:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	@ 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011000:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8011004:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011006:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801100a:	9200      	str	r2, [sp, #0]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801100c:	ea4e 0000 	orr.w	r0, lr, r0
 8011010:	4330      	orrs	r0, r6
 8011012:	ea48 0000 	orr.w	r0, r8, r0
 8011016:	4320      	orrs	r0, r4
 8011018:	ea59 0000 	orrs.w	r0, r9, r0
 801101c:	d146      	bne.n	80110ac <jpeg_idct_islow+0xf0>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801101e:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 8011020:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8011024:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8011026:	63cb      	str	r3, [r1, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8011028:	65cb      	str	r3, [r1, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801102a:	67cb      	str	r3, [r1, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 801102c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011030:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011034:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011038:	9b04      	ldr	r3, [sp, #16]
 801103a:	42ab      	cmp	r3, r5
 801103c:	d1cd      	bne.n	8010fda <jpeg_idct_islow+0x1e>
 801103e:	9b03      	ldr	r3, [sp, #12]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8011040:	ad06      	add	r5, sp, #24
 8011042:	f1a3 0904 	sub.w	r9, r3, #4
 8011046:	331c      	adds	r3, #28
 8011048:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801104a:	f859 3f04 	ldr.w	r3, [r9, #4]!
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801104e:	f8d5 b01c 	ldr.w	fp, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	9a00      	ldr	r2, [sp, #0]
 8011056:	9b50      	ldr	r3, [sp, #320]	@ 0x140
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8011058:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 801105c:	e9d5 e603 	ldrd	lr, r6, [r5, #12]
    outptr = output_buf[ctr] + output_col;
 8011060:	4413      	add	r3, r2
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011062:	ea4a 0200 	orr.w	r2, sl, r0
 8011066:	ea42 020e 	orr.w	r2, r2, lr
 801106a:	e9d5 8405 	ldrd	r8, r4, [r5, #20]
 801106e:	4332      	orrs	r2, r6
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011070:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011074:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011078:	3110      	adds	r1, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801107a:	4322      	orrs	r2, r4
 801107c:	ea52 020b 	orrs.w	r2, r2, fp
 8011080:	f040 8092 	bne.w	80111a8 <jpeg_idct_islow+0x1ec>
				  & RANGE_MASK];
 8011084:	f3c1 1149 	ubfx	r1, r1, #5, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011088:	9a01      	ldr	r2, [sp, #4]

      outptr[0] = dcval;
 801108a:	9800      	ldr	r0, [sp, #0]
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801108c:	5c52      	ldrb	r2, [r2, r1]
      outptr[0] = dcval;
 801108e:	9950      	ldr	r1, [sp, #320]	@ 0x140
 8011090:	5442      	strb	r2, [r0, r1]
      outptr[1] = dcval;
 8011092:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 8011094:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 8011096:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 8011098:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 801109a:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 801109c:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 801109e:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80110a0:	9b05      	ldr	r3, [sp, #20]
 80110a2:	454b      	cmp	r3, r9
 80110a4:	d1d1      	bne.n	801104a <jpeg_idct_islow+0x8e>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 80110a6:	b047      	add	sp, #284	@ 0x11c
 80110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80110ac:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80110ae:	f241 1251 	movw	r2, #4433	@ 0x1151
    z2 <<= CONST_BITS;
 80110b2:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80110b4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80110b6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80110ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80110be:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80110c0:	183c      	adds	r4, r7, r0
 80110c2:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80110c4:	f641 027e 	movw	r2, #6270	@ 0x187e
 80110c8:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80110cc:	4a74      	ldr	r2, [pc, #464]	@ (80112a0 <jpeg_idct_islow+0x2e4>)
 80110ce:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80110d2:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80110d4:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 80110d6:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 80110da:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 80110de:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 80110e2:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110e4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
    tmp11 = tmp1 + tmp3;
 80110e8:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 80110ea:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110ec:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110ee:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110f2:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110f6:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110fa:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110fe:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
    tmp13 = tmp0 - tmp2;
 8011100:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011102:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011106:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 801110a:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 801110e:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011112:	1930      	adds	r0, r6, r4
 8011114:	4350      	muls	r0, r2
    z2 += z1;
 8011116:	4a63      	ldr	r2, [pc, #396]	@ (80112a4 <jpeg_idct_islow+0x2e8>)
 8011118:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 801111c:	4a62      	ldr	r2, [pc, #392]	@ (80112a8 <jpeg_idct_islow+0x2ec>)
 801111e:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8011122:	eb09 040a 	add.w	r4, r9, sl
 8011126:	4a61      	ldr	r2, [pc, #388]	@ (80112ac <jpeg_idct_islow+0x2f0>)
 8011128:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 801112a:	f640 128e 	movw	r2, #2446	@ 0x98e
 801112e:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8011132:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8011134:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8011138:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801113c:	4a5c      	ldr	r2, [pc, #368]	@ (80112b0 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 801113e:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011142:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8011146:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801114a:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 801114e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8011150:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8011152:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8011156:	f246 2854 	movw	r8, #25172	@ 0x6254
 801115a:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801115e:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011162:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011166:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011168:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801116c:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011170:	f8c1 40dc 	str.w	r4, [r1, #220]	@ 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011174:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011178:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801117c:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801117e:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011180:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011182:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011184:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011186:	f8c1 70bc 	str.w	r7, [r1, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801118a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801118c:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801118e:	63cc      	str	r4, [r1, #60]	@ 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011190:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011194:	9b02      	ldr	r3, [sp, #8]
 8011196:	444b      	add	r3, r9
 8011198:	12db      	asrs	r3, r3, #11
 801119a:	65cb      	str	r3, [r1, #92]	@ 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801119c:	9b02      	ldr	r3, [sp, #8]
 801119e:	eba3 0309 	sub.w	r3, r3, r9
 80111a2:	12db      	asrs	r3, r3, #11
 80111a4:	67cb      	str	r3, [r1, #124]	@ 0x7c
    wsptr++;
 80111a6:	e747      	b.n	8011038 <jpeg_idct_islow+0x7c>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80111a8:	1902      	adds	r2, r0, r4
 80111aa:	f241 1751 	movw	r7, #4433	@ 0x1151
 80111ae:	437a      	muls	r2, r7
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80111b0:	f641 077e 	movw	r7, #6270	@ 0x187e
 80111b4:	fb07 2000 	mla	r0, r7, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80111b8:	4f39      	ldr	r7, [pc, #228]	@ (80112a0 <jpeg_idct_islow+0x2e4>)
 80111ba:	fb07 2204 	mla	r2, r7, r4, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 80111be:	1874      	adds	r4, r6, r1
    tmp1 = (z2 - z3) << CONST_BITS;
 80111c0:	1b89      	subs	r1, r1, r6
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80111c2:	f242 57a1 	movw	r7, #9633	@ 0x25a1
    tmp10 = tmp0 + tmp2;
 80111c6:	eb00 3644 	add.w	r6, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80111ca:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 80111ce:	eb0e 040b 	add.w	r4, lr, fp
    tmp10 = tmp0 + tmp2;
 80111d2:	9602      	str	r6, [sp, #8]
    tmp11 = tmp1 + tmp3;
 80111d4:	eb02 3641 	add.w	r6, r2, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 80111d8:	9003      	str	r0, [sp, #12]
    z3 = tmp1 + tmp3;
 80111da:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 80111de:	ebc2 3241 	rsb	r2, r2, r1, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80111e2:	1821      	adds	r1, r4, r0
    tmp12 = tmp1 - tmp3;
 80111e4:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80111e6:	4379      	muls	r1, r7
    z2 += z1;
 80111e8:	4f2e      	ldr	r7, [pc, #184]	@ (80112a4 <jpeg_idct_islow+0x2e8>)
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80111ea:	9a00      	ldr	r2, [sp, #0]
    z2 += z1;
 80111ec:	fb07 1404 	mla	r4, r7, r4, r1
    z3 += z1;
 80111f0:	4f2d      	ldr	r7, [pc, #180]	@ (80112a8 <jpeg_idct_islow+0x2ec>)
 80111f2:	fb07 1100 	mla	r1, r7, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80111f6:	eb0a 000b 	add.w	r0, sl, fp
 80111fa:	4f2c      	ldr	r7, [pc, #176]	@ (80112ac <jpeg_idct_islow+0x2f0>)
 80111fc:	4378      	muls	r0, r7
    tmp0 += z1 + z2;
 80111fe:	f640 178e 	movw	r7, #2446	@ 0x98e
 8011202:	eb04 0c00 	add.w	ip, r4, r0
    tmp3 += z1 + z3;
 8011206:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8011208:	fb07 cc0b 	mla	ip, r7, fp, ip
    tmp3 += z1 + z3;
 801120c:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011210:	4f27      	ldr	r7, [pc, #156]	@ (80112b0 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 8011212:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011216:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 801121a:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801121e:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011222:	9f02      	ldr	r7, [sp, #8]
    tmp1 += z1 + z3;
 8011224:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8011226:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8011228:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 801122c:	f246 2854 	movw	r8, #25172	@ 0x6254
 8011230:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011234:	eb07 0e00 	add.w	lr, r7, r0
 8011238:	9f01      	ldr	r7, [sp, #4]
			    & RANGE_MASK];
 801123a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801123e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011242:	9f50      	ldr	r7, [sp, #320]	@ 0x140
 8011244:	f802 e007 	strb.w	lr, [r2, r7]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011248:	9f02      	ldr	r7, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801124a:	9a04      	ldr	r2, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801124c:	1a3f      	subs	r7, r7, r0
 801124e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8011250:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011254:	5dc0      	ldrb	r0, [r0, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8011256:	9f01      	ldr	r7, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011258:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801125a:	1930      	adds	r0, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801125c:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 801125e:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8011262:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8011266:	5c38      	ldrb	r0, [r7, r0]
 8011268:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801126a:	5db8      	ldrb	r0, [r7, r6]
 801126c:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801126e:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8011270:	1a52      	subs	r2, r2, r1
			    & RANGE_MASK];
 8011272:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8011276:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801127a:	5c38      	ldrb	r0, [r7, r0]
 801127c:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801127e:	5cba      	ldrb	r2, [r7, r2]
 8011280:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8011282:	9a03      	ldr	r2, [sp, #12]
 8011284:	4462      	add	r2, ip
			    & RANGE_MASK];
 8011286:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801128a:	5cba      	ldrb	r2, [r7, r2]
 801128c:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801128e:	9a03      	ldr	r2, [sp, #12]
 8011290:	eba2 020c 	sub.w	r2, r2, ip
			    & RANGE_MASK];
 8011294:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8011298:	5cba      	ldrb	r2, [r7, r2]
 801129a:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 801129c:	e700      	b.n	80110a0 <jpeg_idct_islow+0xe4>
 801129e:	bf00      	nop
 80112a0:	ffffc4df 	.word	0xffffc4df
 80112a4:	ffffc13b 	.word	0xffffc13b
 80112a8:	fffff384 	.word	0xfffff384
 80112ac:	ffffe333 	.word	0xffffe333
 80112b0:	ffffadfd 	.word	0xffffadfd

080112b4 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80112b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	b0b9      	sub	sp, #228	@ 0xe4
 80112ba:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 80112bc:	1e96      	subs	r6, r2, #2
 80112be:	9303      	str	r3, [sp, #12]
 80112c0:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80112c2:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80112c6:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80112ca:	f103 0880 	add.w	r8, r3, #128	@ 0x80
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80112ce:	f102 030c 	add.w	r3, r2, #12
 80112d2:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112d4:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80112d8:	f640 2112 	movw	r1, #2578	@ 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112dc:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80112e0:	f642 09c6 	movw	r9, #10438	@ 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80112e4:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80112e8:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112ec:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80112ee:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80112f2:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	@ 0x60
    tmp13 <<= CONST_BITS;
 80112f6:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 80112f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112fc:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80112fe:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8011300:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011302:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8011306:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801130a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 801130e:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011310:	f641 4337 	movw	r3, #7223	@ 0x1c37
 8011314:	ebae 0702 	sub.w	r7, lr, r2
 8011318:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801131a:	eba4 030e 	sub.w	r3, r4, lr
 801131e:	434b      	muls	r3, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011320:	9901      	ldr	r1, [sp, #4]
 8011322:	18f8      	adds	r0, r7, r3
 8011324:	4408      	add	r0, r1
 8011326:	4985      	ldr	r1, [pc, #532]	@ (801153c <jpeg_idct_7x7+0x288>)
 8011328:	fb01 010e 	mla	r1, r1, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801132c:	18a0      	adds	r0, r4, r2
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801132e:	9102      	str	r1, [sp, #8]
    tmp0 = z1 + z3;
 8011330:	18a1      	adds	r1, r4, r2
 8011332:	9104      	str	r1, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011334:	9901      	ldr	r1, [sp, #4]
 8011336:	fb09 1100 	mla	r1, r9, r0, r1
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801133a:	f46f 701f 	mvn.w	r0, #636	@ 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801133e:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	@ 0x50
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011342:	fb00 1202 	mla	r2, r0, r2, r1
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8011346:	487e      	ldr	r0, [pc, #504]	@ (8011540 <jpeg_idct_7x7+0x28c>)
 8011348:	fb00 1104 	mla	r1, r0, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801134c:	6a2c      	ldr	r4, [r5, #32]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801134e:	443a      	add	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011350:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8011352:	4419      	add	r1, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011354:	f9b6 3010 	ldrsh.w	r3, [r6, #16]

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011358:	f641 50ef 	movw	r0, #7663	@ 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801135c:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801135e:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	@ 0x30
 8011362:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011364:	f8d5 70a0 	ldr.w	r7, [r5, #160]	@ 0xa0
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011368:	eb03 0b04 	add.w	fp, r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801136c:	fb07 f909 	mul.w	r9, r7, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011370:	1b1f      	subs	r7, r3, r4
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011372:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011376:	f240 5073 	movw	r0, #1395	@ 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 801137a:	444b      	add	r3, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801137c:	444c      	add	r4, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801137e:	4347      	muls	r7, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8011380:	4870      	ldr	r0, [pc, #448]	@ (8011544 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 8011382:	ebab 0a07 	sub.w	sl, fp, r7
    tmp1 += tmp2;
 8011386:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011388:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801138c:	4344      	muls	r4, r0
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 801138e:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011392:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp1 += tmp2;
 8011396:	4427      	add	r7, r4
    tmp0 += z2;
 8011398:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801139a:	fb0b 3309 	mla	r3, fp, r9, r3
 801139e:	4423      	add	r3, r4

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80113a0:	eb02 040a 	add.w	r4, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80113a4:	eba2 020a 	sub.w	r2, r2, sl
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80113a8:	12e4      	asrs	r4, r4, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80113aa:	12d2      	asrs	r2, r2, #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80113ac:	f84c 4c04 	str.w	r4, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80113b0:	f8cc 20a4 	str.w	r2, [ip, #164]	@ 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80113b4:	9a02      	ldr	r2, [sp, #8]
 80113b6:	443a      	add	r2, r7
 80113b8:	12d2      	asrs	r2, r2, #11
 80113ba:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80113be:	9a02      	ldr	r2, [sp, #8]
 80113c0:	1bd0      	subs	r0, r2, r7
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80113c2:	18ca      	adds	r2, r1, r3
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80113c4:	1ac9      	subs	r1, r1, r3
    z2 -= tmp0;
 80113c6:	9b04      	ldr	r3, [sp, #16]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80113c8:	12d2      	asrs	r2, r2, #11
    z2 -= tmp0;
 80113ca:	ebae 0e03 	sub.w	lr, lr, r3
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80113ce:	f642 5341 	movw	r3, #11585	@ 0x2d41
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80113d2:	f8cc 2034 	str.w	r2, [ip, #52]	@ 0x34
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80113d6:	12c0      	asrs	r0, r0, #11
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80113d8:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80113da:	12c9      	asrs	r1, r1, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80113dc:	f8cc 0088 	str.w	r0, [ip, #136]	@ 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80113e0:	fb03 230e 	mla	r3, r3, lr, r2
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80113e4:	f8cc 106c 	str.w	r1, [ip, #108]	@ 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80113e8:	12db      	asrs	r3, r3, #11
 80113ea:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80113ee:	9b05      	ldr	r3, [sp, #20]
 80113f0:	42b3      	cmp	r3, r6
 80113f2:	f47f af6f 	bne.w	80112d4 <jpeg_idct_7x7+0x20>
 80113f6:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 80113f8:	ac07      	add	r4, sp, #28
 80113fa:	f1a3 0904 	sub.w	r9, r3, #4
 80113fe:	3318      	adds	r3, #24
 8011400:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011402:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8011406:	341c      	adds	r4, #28
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011408:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 801140c:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 801140e:	9303      	str	r3, [sp, #12]
 8011410:	189e      	adds	r6, r3, r2
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011412:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 8011416:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801141a:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801141c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 8011420:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011424:	eba3 0c01 	sub.w	ip, r3, r1
 8011428:	f641 4337 	movw	r3, #7223	@ 0x1c37
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801142c:	4f43      	ldr	r7, [pc, #268]	@ (801153c <jpeg_idct_7x7+0x288>)
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801142e:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011432:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8011436:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801143a:	1aea      	subs	r2, r5, r3
 801143c:	f640 2312 	movw	r3, #2578	@ 0xa12
    z3 = (INT32) wsptr[5];
 8011440:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011444:	435a      	muls	r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011446:	9b01      	ldr	r3, [sp, #4]
 8011448:	eb0c 0002 	add.w	r0, ip, r2
 801144c:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 8011450:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8011454:	fb07 0003 	mla	r0, r7, r3, r0
    tmp0 = z1 + z3;
 8011458:	186b      	adds	r3, r5, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801145a:	f642 07c6 	movw	r7, #10438	@ 0x28c6
    tmp0 = z1 + z3;
 801145e:	9304      	str	r3, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011460:	437b      	muls	r3, r7
 8011462:	9f01      	ldr	r7, [sp, #4]
 8011464:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011468:	f46f 771f 	mvn.w	r7, #636	@ 0x27c
 801146c:	fb07 3101 	mla	r1, r7, r1, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8011470:	4f33      	ldr	r7, [pc, #204]	@ (8011540 <jpeg_idct_7x7+0x28c>)
 8011472:	fb07 3305 	mla	r3, r7, r5, r3
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011476:	f240 5773 	movw	r7, #1395	@ 0x573
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801147a:	4461      	add	r1, ip
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801147c:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 801147e:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8011482:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011484:	eb02 0b0a 	add.w	fp, r2, sl
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011488:	eba2 050a 	sub.w	r5, r2, sl
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 801148c:	f641 53ef 	movw	r3, #7663	@ 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011490:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8011492:	44f2      	add	sl, lr
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011494:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011498:	9b42      	ldr	r3, [sp, #264]	@ 0x108
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801149a:	437d      	muls	r5, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801149c:	4f29      	ldr	r7, [pc, #164]	@ (8011544 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 801149e:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 80114a2:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80114a4:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80114a8:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80114ac:	9f03      	ldr	r7, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80114ae:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80114b2:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp1 += tmp2;
 80114b6:	4455      	add	r5, sl
    tmp0 += z2;
 80114b8:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80114ba:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80114be:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80114c2:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80114c6:	4452      	add	r2, sl
			    & RANGE_MASK];
 80114c8:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 80114cc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80114d0:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80114d4:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80114d8:	f818 1001 	ldrb.w	r1, [r8, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80114dc:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80114de:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80114e0:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80114e2:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80114e4:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 80114e8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80114ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 80114f0:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80114f2:	f818 1000 	ldrb.w	r1, [r8, r0]
 80114f6:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80114f8:	1899      	adds	r1, r3, r2
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80114fa:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 80114fc:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8011500:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011504:	f818 1001 	ldrb.w	r1, [r8, r1]
 8011508:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801150a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801150e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 8011510:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8011514:	9a04      	ldr	r2, [sp, #16]
 8011516:	1a9b      	subs	r3, r3, r2
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011518:	f642 5241 	movw	r2, #11585	@ 0x2d41
 801151c:	4353      	muls	r3, r2
 801151e:	9a01      	ldr	r2, [sp, #4]
 8011520:	eb03 3342 	add.w	r3, r3, r2, lsl #13
			    & RANGE_MASK];
 8011524:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8011528:	f818 3003 	ldrb.w	r3, [r8, r3]
 801152c:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801152e:	9b05      	ldr	r3, [sp, #20]
 8011530:	454b      	cmp	r3, r9
 8011532:	f47f af66 	bne.w	8011402 <jpeg_idct_7x7+0x14e>
  }
}
 8011536:	b039      	add	sp, #228	@ 0xe4
 8011538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153c:	ffffc515 	.word	0xffffc515
 8011540:	ffffb0f1 	.word	0xffffb0f1
 8011544:	ffffd3e1 	.word	0xffffd3e1

08011548 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801154c:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8011550:	b0a7      	sub	sp, #156	@ 0x9c
 8011552:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011554:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011556:	3080      	adds	r0, #128	@ 0x80
 8011558:	320a      	adds	r2, #10
 801155a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801155c:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801155e:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8011560:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011562:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011566:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801156a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801156e:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011570:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	@ 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011574:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011576:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801157a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801157e:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 8011580:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011582:	f241 64a1 	movw	r4, #5793	@ 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011586:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	@ 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801158a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801158e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	@ 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011592:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8011594:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8011596:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801159a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801159c:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80115a0:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80115a2:	6a28      	ldr	r0, [r5, #32]
    tmp10 = tmp1 + tmp0;
 80115a4:	eb04 0e02 	add.w	lr, r4, r2
    tmp12 = tmp1 - tmp0;
 80115a8:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80115aa:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 80115ae:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80115b0:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 80115b2:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80115b6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	@ 0xa0
 80115ba:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80115be:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80115c2:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80115c6:	eb02 0c08 	add.w	ip, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80115ca:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80115ce:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80115d2:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80115d6:	eba2 0208 	sub.w	r2, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80115da:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80115de:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80115e0:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80115e4:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80115e8:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80115ec:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80115f0:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80115f4:	f8c7 e074 	str.w	lr, [r7, #116]	@ 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80115f8:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80115fc:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011600:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8011604:	f8c7 e014 	str.w	lr, [r7, #20]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8011608:	65fa      	str	r2, [r7, #92]	@ 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801160a:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801160e:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011612:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011614:	12e4      	asrs	r4, r4, #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011616:	62fa      	str	r2, [r7, #44]	@ 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8011618:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801161a:	647c      	str	r4, [r7, #68]	@ 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801161c:	42b2      	cmp	r2, r6
 801161e:	d1a0      	bne.n	8011562 <jpeg_idct_6x6+0x1a>
 8011620:	f1a3 0e04 	sub.w	lr, r3, #4
 8011624:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8011628:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801162a:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801162e:	f241 60a1 	movw	r0, #5793	@ 0x16a1
    outptr = output_buf[ctr] + output_col;
 8011632:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8011634:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011636:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 801163a:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 801163c:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011640:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011644:	fb00 f402 	mul.w	r4, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011648:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801164c:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8011650:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = tmp0 + tmp10;
 8011654:	eb04 3243 	add.w	r2, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8011658:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 801165c:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011660:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8011664:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011668:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp10 = tmp1 + tmp0;
 801166c:	eb02 0604 	add.w	r6, r2, r4
    tmp12 = tmp1 - tmp0;
 8011670:	eba2 0204 	sub.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8011674:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011678:	eb04 0508 	add.w	r5, r4, r8
 801167c:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011680:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8011684:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8011688:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801168c:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011690:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011692:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8011696:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801169a:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801169e:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80116a2:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80116a6:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 80116aa:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80116ae:	f810 8008 	ldrb.w	r8, [r0, r8]
 80116b2:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 80116b4:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80116b8:	9800      	ldr	r0, [sp, #0]
 80116ba:	5d86      	ldrb	r6, [r0, r6]
 80116bc:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80116be:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80116c2:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 80116c6:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 80116ca:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80116ce:	5d86      	ldrb	r6, [r0, r6]
 80116d0:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80116d2:	5cc3      	ldrb	r3, [r0, r3]
 80116d4:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80116d6:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80116da:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 80116de:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80116e2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80116e6:	5cc3      	ldrb	r3, [r0, r3]
 80116e8:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80116ea:	5c83      	ldrb	r3, [r0, r2]
 80116ec:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 80116ee:	d19c      	bne.n	801162a <jpeg_idct_6x6+0xe2>
  }
}
 80116f0:	b027      	add	sp, #156	@ 0x9c
 80116f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080116f8 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80116f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80116fc:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8011700:	b09d      	sub	sp, #116	@ 0x74
 8011702:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011704:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011706:	3080      	adds	r0, #128	@ 0x80
 8011708:	3208      	adds	r2, #8
 801170a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801170c:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801170e:	f641 1e4c 	movw	lr, #6476	@ 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011712:	f44f 6c35 	mov.w	ip, #2896	@ 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011716:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011718:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801171a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801171e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011720:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011724:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	@ 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011728:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801172a:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
 801172c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011730:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8011732:	0352      	lsls	r2, r2, #13
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011734:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011736:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801173a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801173e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011742:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011746:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	@ 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801174a:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801174e:	6e28      	ldr	r0, [r5, #96]	@ 0x60
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011750:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011754:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011756:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801175a:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801175e:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011762:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8011766:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8011768:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801176c:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8011770:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011774:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8011778:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801177a:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801177e:	f241 0071 	movw	r0, #4209	@ 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8011782:	627a      	str	r2, [r7, #36]	@ 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011784:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011788:	483a      	ldr	r0, [pc, #232]	@ (8011874 <jpeg_idct_5x5+0x17c>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801178a:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801178c:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011790:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011794:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011798:	42b2      	cmp	r2, r6
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801179a:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801179e:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80117a2:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80117a6:	f8c7 904c 	str.w	r9, [r7, #76]	@ 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80117aa:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80117ae:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80117b2:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80117b6:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80117ba:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80117be:	63bc      	str	r4, [r7, #56]	@ 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80117c0:	d1ab      	bne.n	801171a <jpeg_idct_5x5+0x22>
 80117c2:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 80117c6:	a903      	add	r1, sp, #12
 80117c8:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80117ca:	f641 1a4c 	movw	sl, #6476	@ 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80117ce:	f44f 6935 	mov.w	r9, #2896	@ 0xb50
 80117d2:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80117d4:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80117d8:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80117dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80117de:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 80117e0:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80117e4:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117e8:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 80117ec:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117f0:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 80117f4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 80117f8:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80117fc:	189c      	adds	r4, r3, r2
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80117fe:	1a9b      	subs	r3, r3, r2
 8011800:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011804:	fb0a f404 	mul.w	r4, sl, r4
    z3 = tmp12 + z2;
 8011808:	eb03 324c 	add.w	r2, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 801180c:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 801180e:	18a5      	adds	r5, r4, r2
    tmp11 = z3 - z1;
 8011810:	1b12      	subs	r2, r2, r4
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011812:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8011816:	ebc3 334c 	rsb	r3, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801181a:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801181c:	f241 0071 	movw	r0, #4209	@ 0x1071
			    & RANGE_MASK];
 8011820:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011824:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011828:	4812      	ldr	r0, [pc, #72]	@ (8011874 <jpeg_idct_5x5+0x17c>)
 801182a:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801182e:	eb05 0b06 	add.w	fp, r5, r6
 8011832:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011834:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8011836:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801183a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801183e:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8011842:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8011844:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011848:	9800      	ldr	r0, [sp, #0]
 801184a:	5d45      	ldrb	r5, [r0, r5]
 801184c:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801184e:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011850:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8011852:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8011856:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801185a:	5d45      	ldrb	r5, [r0, r5]
 801185c:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801185e:	5c82      	ldrb	r2, [r0, r2]
 8011860:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8011862:	5cc3      	ldrb	r3, [r0, r3]
 8011864:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8011866:	9b01      	ldr	r3, [sp, #4]
 8011868:	4573      	cmp	r3, lr
 801186a:	d1b3      	bne.n	80117d4 <jpeg_idct_5x5+0xdc>
  }
}
 801186c:	b01d      	add	sp, #116	@ 0x74
 801186e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011872:	bf00      	nop
 8011874:	ffffba5c 	.word	0xffffba5c

08011878 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801187c:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
{
 8011880:	b093      	sub	sp, #76	@ 0x4c
 8011882:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011884:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011886:	3680      	adds	r6, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011888:	3206      	adds	r2, #6
 801188a:	3d04      	subs	r5, #4
  wsptr = workspace;
 801188c:	a802      	add	r0, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801188e:	f241 1851 	movw	r8, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011892:	f641 0e7e 	movw	lr, #6270	@ 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011896:	f8df c108 	ldr.w	ip, [pc, #264]	@ 80119a0 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801189a:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801189e:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80118a0:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80118a4:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80118a8:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80118aa:	fb01 f404 	mul.w	r4, r1, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80118ae:	6c29      	ldr	r1, [r5, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80118b0:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80118b4:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118b8:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	@ 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80118bc:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80118c0:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80118c4:	6a29      	ldr	r1, [r5, #32]
 80118c6:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118ca:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80118cc:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80118d0:	eb0a 010b 	add.w	r1, sl, fp
 80118d4:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80118d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80118dc:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80118e0:	fb0c 110b 	mla	r1, ip, fp, r1
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80118e4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80118e8:	ea4f 21e1 	mov.w	r1, r1, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 80118ec:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80118f0:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80118f4:	eb01 0984 	add.w	r9, r1, r4, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 80118f8:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80118fc:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011900:	f8c0 a02c 	str.w	sl, [r0, #44]	@ 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011904:	f8c0 900c 	str.w	r9, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8011908:	61c1      	str	r1, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801190a:	d1c6      	bne.n	801189a <jpeg_idct_4x4+0x22>
 801190c:	1f1d      	subs	r5, r3, #4
 801190e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8011912:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011914:	f241 1951 	movw	r9, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011918:	f641 087e 	movw	r8, #6270	@ 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801191c:	f8df e080 	ldr.w	lr, [pc, #128]	@ 80119a0 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8011920:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8011924:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8011926:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011928:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 801192c:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 801192e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8011932:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8011936:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801193a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 801193e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8011942:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8011946:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801194a:	eb01 020b 	add.w	r2, r1, fp
 801194e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011952:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011956:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801195a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801195e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011962:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8011964:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011968:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
			    & RANGE_MASK];
 801196a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801196e:	f816 b00b 	ldrb.w	fp, [r6, fp]
 8011972:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011976:	5c73      	ldrb	r3, [r6, r1]
 8011978:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801197a:	9b01      	ldr	r3, [sp, #4]
 801197c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8011980:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011984:	5cf3      	ldrb	r3, [r6, r3]
 8011986:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 801198e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011992:	5cb3      	ldrb	r3, [r6, r2]
 8011994:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8011996:	d1c3      	bne.n	8011920 <jpeg_idct_4x4+0xa8>
  }
}
 8011998:	b013      	add	sp, #76	@ 0x4c
 801199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801199e:	bf00      	nop
 80119a0:	ffffc4df 	.word	0xffffc4df

080119a4 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80119a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a8:	b08b      	sub	sp, #44	@ 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80119aa:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 80119ae:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80119b0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80119b4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80119b6:	f100 0e80 	add.w	lr, r0, #128	@ 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80119ba:	f1a1 0c04 	sub.w	ip, r1, #4
 80119be:	3204      	adds	r2, #4
 80119c0:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80119c2:	f241 6aa1 	movw	sl, #5793	@ 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80119c6:	f242 7931 	movw	r9, #10033	@ 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119ca:	f938 1f02 	ldrsh.w	r1, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80119ce:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119d0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119d4:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80119d8:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119da:	fb05 f101 	mul.w	r1, r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119de:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
 80119e2:	f9b8 5020 	ldrsh.w	r5, [r8, #32]
    tmp0 <<= CONST_BITS;
 80119e6:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119ea:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119ee:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80119f2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119f6:	fb07 f70b 	mul.w	r7, r7, fp
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80119fa:	fb0a f505 	mul.w	r5, sl, r5
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80119fe:	fb09 f707 	mul.w	r7, r9, r7
    tmp10 = tmp0 + tmp12;
 8011a02:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8011a06:	eba1 0145 	sub.w	r1, r1, r5, lsl #1

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a0a:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a0e:	eba6 0607 	sub.w	r6, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011a12:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a16:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a1a:	ea4f 26e6 	mov.w	r6, r6, asr #11
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011a1e:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a20:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a24:	6166      	str	r6, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011a26:	d1d0      	bne.n	80119ca <jpeg_idct_3x3+0x26>
 8011a28:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011a2a:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
 8011a2e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011a30:	f242 7b31 	movw	fp, #10033	@ 0x2731
    outptr = output_buf[ctr] + output_col;
 8011a34:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8011a38:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 8011a3a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011a3c:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8011a40:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8011a42:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a46:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011a4a:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011a4e:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a52:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011a56:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011a58:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8011a5c:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8011a60:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011a64:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011a68:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8011a6c:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 8011a70:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8011a74:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8011a78:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011a7c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8011a80:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011a84:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8011a88:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8011a8a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8011a8e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8011a90:	d1d0      	bne.n	8011a34 <jpeg_idct_3x3+0x90>
  }
}
 8011a92:	b00b      	add	sp, #44	@ 0x2c
 8011a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a98 <jpeg_idct_2x2>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011a98:	f8d1 c054 	ldr.w	ip, [r1, #84]	@ 0x54

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011a9c:	f9b2 1000 	ldrsh.w	r1, [r2]
{
 8011aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011aa2:	f8d0 614c 	ldr.w	r6, [r0, #332]	@ 0x14c
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011aa6:	f8dc 0000 	ldr.w	r0, [ip]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011aaa:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011aae:	3680      	adds	r6, #128	@ 0x80
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ab0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011ab2:	f8dc 0020 	ldr.w	r0, [ip, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011ab6:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011aba:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8011abc:	3104      	adds	r1, #4
{
 8011abe:	9f05      	ldr	r7, [sp, #20]
  tmp0 = tmp4 + tmp5;
 8011ac0:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8011ac2:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011ac4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011ac8:	4365      	muls	r5, r4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8011aca:	f9b2 4012 	ldrsh.w	r4, [r2, #18]
 8011ace:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
 8011ad2:	4354      	muls	r4, r2

  tmp1 = tmp4 + tmp5;
 8011ad4:	eb05 0c04 	add.w	ip, r5, r4
  tmp3 = tmp4 - tmp5;
 8011ad8:	1b2a      	subs	r2, r5, r4

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8011ada:	681d      	ldr	r5, [r3, #0]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011adc:	eb00 040c 	add.w	r4, r0, ip
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011ae0:	eba0 000c 	sub.w	r0, r0, ip
  outptr = output_buf[0] + output_col;
 8011ae4:	eb05 0e07 	add.w	lr, r5, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011ae8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011aec:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011af0:	5d34      	ldrb	r4, [r6, r4]
 8011af2:	55ec      	strb	r4, [r5, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011af4:	5c30      	ldrb	r0, [r6, r0]
 8011af6:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8011afa:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011afc:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011afe:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011b00:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 8011b04:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011b06:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011b0a:	5cf3      	ldrb	r3, [r6, r3]
 8011b0c:	55c3      	strb	r3, [r0, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011b0e:	5c73      	ldrb	r3, [r6, r1]
 8011b10:	7063      	strb	r3, [r4, #1]
}
 8011b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b14 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8011b14:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8011b16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b1a:	6809      	ldr	r1, [r1, #0]
 8011b1c:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011b1e:	f8d0 114c 	ldr.w	r1, [r0, #332]	@ 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8011b22:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011b24:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8011b28:	440a      	add	r2, r1
 8011b2a:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	9b00      	ldr	r3, [sp, #0]
 8011b32:	54d1      	strb	r1, [r2, r3]
}
 8011b34:	4770      	bx	lr
	...

08011b38 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	b0d1      	sub	sp, #324	@ 0x144
 8011b3e:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8011b40:	f1a2 0e02 	sub.w	lr, r2, #2
 8011b44:	9306      	str	r3, [sp, #24]
 8011b46:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b48:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011b4c:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b4e:	f103 0a80 	add.w	sl, r3, #128	@ 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b52:	f102 030e 	add.w	r3, r2, #14
 8011b56:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b58:	f93e 5f02 	ldrsh.w	r5, [lr, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b5c:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b5e:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b62:	f9be 1020 	ldrsh.w	r1, [lr, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b66:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b6a:	f9be 2040 	ldrsh.w	r2, [lr, #64]	@ 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b6e:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b70:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b74:	f9be 6060 	ldrsh.w	r6, [lr, #96]	@ 0x60
    tmp0 <<= CONST_BITS;
 8011b78:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b7a:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b7c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011b84:	f9be c050 	ldrsh.w	ip, [lr, #80]	@ 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b88:	4373      	muls	r3, r6
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011b8a:	f241 66a1 	movw	r6, #5793	@ 0x16a1
 8011b8e:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 8011b90:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8011b92:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8011b96:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011b98:	1a8b      	subs	r3, r1, r2
 8011b9a:	4373      	muls	r3, r6
 8011b9c:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011b9e:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8011ba2:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011ba4:	188b      	adds	r3, r1, r2
 8011ba6:	f642 2587 	movw	r5, #10887	@ 0x2a87
 8011baa:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011bac:	f242 25ab 	movw	r5, #8875	@ 0x22ab
 8011bb0:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011bb2:	f240 75dc 	movw	r5, #2012	@ 0x7dc
 8011bb6:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8011bb8:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8011bba:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 8011bbc:	1a7f      	subs	r7, r7, r1
    tmp10 = tmp1 + tmp0 - tmp3;
 8011bbe:	1aad      	subs	r5, r5, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 8011bc0:	18ba      	adds	r2, r7, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8011bc2:	440b      	add	r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bc4:	f9be 1010 	ldrsh.w	r1, [lr, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8011bc8:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bca:	6a22      	ldr	r2, [r4, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011bcc:	6e27      	ldr	r7, [r4, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bce:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011bd0:	f9be 2030 	ldrsh.w	r2, [lr, #48]	@ 0x30
    tmp12 = tmp1 - tmp0 + tmp2;
 8011bd4:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011bd6:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bd8:	f8d4 70a0 	ldr.w	r7, [r4, #160]	@ 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bdc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011be0:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011be4:	f9be 7070 	ldrsh.w	r7, [lr, #112]	@ 0x70
    tmp10 = tmp1 + tmp0 - tmp3;
 8011be8:	9503      	str	r5, [sp, #12]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011bea:	f642 4591 	movw	r5, #11409	@ 0x2c91
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bee:	435f      	muls	r7, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011bf0:	4b81      	ldr	r3, [pc, #516]	@ (8011df8 <jpeg_idct_9x9+0x2c0>)
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011bf2:	eb01 0b0c 	add.w	fp, r1, ip
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011bf6:	435a      	muls	r2, r3
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011bf8:	f641 5317 	movw	r3, #7447	@ 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011bfc:	eb01 0907 	add.w	r9, r1, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011c00:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011c04:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011c08:	f640 737a 	movw	r3, #3962	@ 0xf7a
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011c0c:	1bc9      	subs	r1, r1, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011c0e:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011c12:	ebac 0307 	sub.w	r3, ip, r7
 8011c16:	436b      	muls	r3, r5
    tmp0 = tmp2 + tmp3 - z2;
 8011c18:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011c1c:	461d      	mov	r5, r3
    tmp2 += z2 - tmp1;
 8011c1e:	1ad3      	subs	r3, r2, r3
    tmp0 = tmp2 + tmp3 - z2;
 8011c20:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8011c24:	449b      	add	fp, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011c26:	f242 7331 	movw	r3, #10033	@ 0x2731
    tmp3 += z2 + tmp1;
 8011c2a:	442a      	add	r2, r5
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011c2c:	4359      	muls	r1, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011c2e:	9b03      	ldr	r3, [sp, #12]
    tmp3 += z2 + tmp1;
 8011c30:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011c32:	eba3 0508 	sub.w	r5, r3, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011c36:	eb03 0708 	add.w	r7, r3, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011c3a:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011c3c:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011c3e:	12ff      	asrs	r7, r7, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011c40:	f8c0 50fc 	str.w	r5, [r0, #252]	@ 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011c44:	1875      	adds	r5, r6, r1
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011c46:	1a76      	subs	r6, r6, r1
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011c48:	eb03 010b 	add.w	r1, r3, fp
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011c4c:	eba3 030b 	sub.w	r3, r3, fp
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011c50:	12ed      	asrs	r5, r5, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011c52:	12f6      	asrs	r6, r6, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011c54:	f840 7c04 	str.w	r7, [r0, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011c58:	12db      	asrs	r3, r3, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011c5a:	61c5      	str	r5, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011c5c:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011c5e:	f8c0 60dc 	str.w	r6, [r0, #220]	@ 0xdc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011c62:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8011c66:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011c68:	63c1      	str	r1, [r0, #60]	@ 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8011c6a:	4413      	add	r3, r2
 8011c6c:	12db      	asrs	r3, r3, #11
 8011c6e:	65c3      	str	r3, [r0, #92]	@ 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8011c70:	9b05      	ldr	r3, [sp, #20]
 8011c72:	1a9b      	subs	r3, r3, r2
 8011c74:	12db      	asrs	r3, r3, #11
 8011c76:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8011c7a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8011c7e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8011c82:	12db      	asrs	r3, r3, #11
 8011c84:	67c3      	str	r3, [r0, #124]	@ 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011c86:	9b07      	ldr	r3, [sp, #28]
 8011c88:	4573      	cmp	r3, lr
 8011c8a:	f47f af65 	bne.w	8011b58 <jpeg_idct_9x9+0x20>
 8011c8e:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8011c90:	aa08      	add	r2, sp, #32
 8011c92:	f1a3 0904 	sub.w	r9, r3, #4
 8011c96:	3320      	adds	r3, #32
 8011c98:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011c9a:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011c9e:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
    outptr = output_buf[ctr] + output_col;
 8011ca2:	995a      	ldr	r1, [sp, #360]	@ 0x168
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011ca4:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8011ca6:	9305      	str	r3, [sp, #20]
 8011ca8:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011caa:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8011cae:	f852 0c18 	ldr.w	r0, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011cb2:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011cb6:	f852 3c08 	ldr.w	r3, [r2, #-8]
    z2 = (INT32) wsptr[4];
 8011cba:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011cbe:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8011cc2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8011cc6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 8011cca:	1b9b      	subs	r3, r3, r6
 8011ccc:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011cce:	1a43      	subs	r3, r0, r1
 8011cd0:	fb0c f303 	mul.w	r3, ip, r3
 8011cd4:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011cd6:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8011cda:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011cdc:	1843      	adds	r3, r0, r1
 8011cde:	f642 2587 	movw	r5, #10887	@ 0x2a87
 8011ce2:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011ce4:	f242 25ab 	movw	r5, #8875	@ 0x22ab
 8011ce8:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011cea:	f240 75dc 	movw	r5, #2012	@ 0x7dc
 8011cee:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8011cf0:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8011cf2:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 8011cf4:	1a3f      	subs	r7, r7, r0
    tmp10 = tmp1 + tmp0 - tmp3;
 8011cf6:	1a6d      	subs	r5, r5, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8011cf8:	1879      	adds	r1, r7, r1
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011cfa:	4f3f      	ldr	r7, [pc, #252]	@ (8011df8 <jpeg_idct_9x9+0x2c0>)
    tmp12 = tmp1 - tmp0 + tmp2;
 8011cfc:	4403      	add	r3, r0
    z1 = (INT32) wsptr[1];
 8011cfe:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 8011d02:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 8011d04:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp12 = tmp1 - tmp0 + tmp2;
 8011d08:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011d0a:	f641 5317 	movw	r3, #7447	@ 0x1d17
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011d0e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011d10:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8011d14:	eb00 0b07 	add.w	fp, r0, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011d18:	f852 7c04 	ldr.w	r7, [r2, #-4]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011d1c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011d20:	eb00 0e07 	add.w	lr, r0, r7
 8011d24:	f640 737a 	movw	r3, #3962	@ 0xf7a
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011d28:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011d2c:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011d30:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8011d34:	eba7 0803 	sub.w	r8, r7, r3
 8011d38:	f642 4391 	movw	r3, #11409	@ 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8011d3c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011d40:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011d44:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8011d48:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8011d4c:	eba1 0708 	sub.w	r7, r1, r8
    tmp3 += z2 + tmp1;
 8011d50:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011d52:	1ac0      	subs	r0, r0, r3
 8011d54:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp3 += z2 + tmp1;
 8011d58:	eb01 080e 	add.w	r8, r1, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011d5c:	eb05 0e0c 	add.w	lr, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011d60:	1ac0      	subs	r0, r0, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011d62:	eba5 050c 	sub.w	r5, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011d66:	f242 7331 	movw	r3, #10033	@ 0x2731
			    & RANGE_MASK];
 8011d6a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011d6e:	995a      	ldr	r1, [sp, #360]	@ 0x168
			    & RANGE_MASK];
 8011d70:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011d74:	f81a e00e 	ldrb.w	lr, [sl, lr]
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011d78:	4358      	muls	r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011d7a:	9b05      	ldr	r3, [sp, #20]
    tmp2 += z2 - tmp1;
 8011d7c:	445f      	add	r7, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011d7e:	f803 e001 	strb.w	lr, [r3, r1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011d82:	f81a 5005 	ldrb.w	r5, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011d86:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011d88:	7225      	strb	r5, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011d8a:	1835      	adds	r5, r6, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011d8c:	1a36      	subs	r6, r6, r0
			    & RANGE_MASK];
 8011d8e:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8011d92:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011d96:	f81a 5005 	ldrb.w	r5, [sl, r5]
 8011d9a:	7065      	strb	r5, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011d9c:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8011da0:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011da2:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011da4:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 8011da6:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8011daa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011dae:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8011db2:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011db4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011db8:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8011dba:	9b04      	ldr	r3, [sp, #16]
 8011dbc:	4443      	add	r3, r8
			    & RANGE_MASK];
 8011dbe:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8011dc2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011dc6:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8011dc8:	9b04      	ldr	r3, [sp, #16]
 8011dca:	eba3 0308 	sub.w	r3, r3, r8
			    & RANGE_MASK];
 8011dce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8011dd2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011dd6:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8011dd8:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8011ddc:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
			    & RANGE_MASK];
 8011de0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8011de4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011de8:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 8011dea:	9b06      	ldr	r3, [sp, #24]
 8011dec:	454b      	cmp	r3, r9
 8011dee:	f47f af54 	bne.w	8011c9a <jpeg_idct_9x9+0x162>
  }
}
 8011df2:	b051      	add	sp, #324	@ 0x144
 8011df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df8:	ffffd8cf 	.word	0xffffd8cf

08011dfc <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011e00:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8011e04:	b0d9      	sub	sp, #356	@ 0x164
 8011e06:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8011e08:	f1a2 0b02 	sub.w	fp, r2, #2
 8011e0c:	9304      	str	r3, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011e0e:	f100 0380 	add.w	r3, r0, #128	@ 0x80
 8011e12:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011e14:	a908      	add	r1, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011e16:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011e18:	f102 030e 	add.w	r3, r2, #14
 8011e1c:	9306      	str	r3, [sp, #24]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e1e:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011e22:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e26:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011e2a:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011e2c:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e30:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011e32:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011e36:	f9bb e050 	ldrsh.w	lr, [fp, #80]	@ 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011e3a:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011e3c:	f242 429d 	movw	r2, #9373	@ 0x249d
    z3 <<= CONST_BITS;
 8011e40:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011e42:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011e46:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011e4a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011e4e:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8011e50:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011e52:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 8011e54:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011e56:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011e5a:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e5e:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	@ 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011e62:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e66:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e68:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8011e6c:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011e6e:	19f3      	adds	r3, r6, r7
 8011e70:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8011e72:	f241 0071 	movw	r0, #4209	@ 0x1071
 8011e76:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8011e7a:	48a0      	ldr	r0, [pc, #640]	@ (80120fc <jpeg_idct_10x10+0x300>)
 8011e7c:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8011e80:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8011e84:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011e86:	6e25      	ldr	r5, [r4, #96]	@ 0x60
    tmp21 = tmp11 + tmp13;
 8011e88:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8011e8a:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e8c:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8011e90:	9303      	str	r3, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e92:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e94:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	@ 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e98:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011e9a:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	@ 0x30
    tmp24 = tmp10 - tmp12;
 8011e9e:	9002      	str	r0, [sp, #8]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011ea0:	f640 10e3 	movw	r0, #2531	@ 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011ea4:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011ea6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 8011eaa:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011eae:	f8d4 50e0 	ldr.w	r5, [r4, #224]	@ 0xe0
 8011eb2:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8011eb4:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8011eb8:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011eba:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8011ebe:	f641 606f 	movw	r0, #7791	@ 0x1e6f
 8011ec2:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011ec6:	f642 40b3 	movw	r0, #11443	@ 0x2cb3
    z4 = z5 + tmp12;
 8011eca:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011ece:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011ed2:	f240 7014 	movw	r0, #1812	@ 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011ed6:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011eda:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011edc:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011ede:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011ee2:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011ee4:	1b86      	subs	r6, r0, r6

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011ee6:	9805      	ldr	r0, [sp, #20]
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011ee8:	eba3 030e 	sub.w	r3, r3, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011eec:	f642 0e53 	movw	lr, #10323	@ 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011ef0:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011ef2:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011ef6:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011efa:	009b      	lsls	r3, r3, #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011efc:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011f00:	f241 4a8c 	movw	sl, #5260	@ 0x148c
 8011f04:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011f08:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011f0c:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011f10:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011f14:	442a      	add	r2, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011f16:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011f1a:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011f1e:	12ed      	asrs	r5, r5, #11
 8011f20:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011f24:	ea4f 25ec 	mov.w	r5, ip, asr #11
 8011f28:	f8c1 511c 	str.w	r5, [r1, #284]	@ 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011f2c:	eb07 050e 	add.w	r5, r7, lr
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011f30:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011f34:	12ed      	asrs	r5, r5, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011f36:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011f38:	61cd      	str	r5, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011f3a:	eb03 25e0 	add.w	r5, r3, r0, asr #11
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8011f3e:	ebc3 23e0 	rsb	r3, r3, r0, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011f42:	f8c1 70fc 	str.w	r7, [r1, #252]	@ 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011f46:	63cd      	str	r5, [r1, #60]	@ 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8011f48:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011f4c:	9b03      	ldr	r3, [sp, #12]
 8011f4e:	4413      	add	r3, r2
 8011f50:	12db      	asrs	r3, r3, #11
 8011f52:	65cb      	str	r3, [r1, #92]	@ 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011f54:	9b03      	ldr	r3, [sp, #12]
 8011f56:	1a9b      	subs	r3, r3, r2
 8011f58:	12db      	asrs	r3, r3, #11
 8011f5a:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011f5e:	9b02      	ldr	r3, [sp, #8]
 8011f60:	4433      	add	r3, r6
 8011f62:	12db      	asrs	r3, r3, #11
 8011f64:	67cb      	str	r3, [r1, #124]	@ 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011f66:	9b02      	ldr	r3, [sp, #8]
 8011f68:	1b9b      	subs	r3, r3, r6
 8011f6a:	12db      	asrs	r3, r3, #11
 8011f6c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f70:	9b06      	ldr	r3, [sp, #24]
 8011f72:	455b      	cmp	r3, fp
 8011f74:	f47f af53 	bne.w	8011e1e <jpeg_idct_10x10+0x22>
 8011f78:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8011f7a:	a908      	add	r1, sp, #32
 8011f7c:	f1a3 0b04 	sub.w	fp, r3, #4
 8011f80:	3324      	adds	r3, #36	@ 0x24
 8011f82:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011f84:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011f88:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8011f8c:	9a62      	ldr	r2, [sp, #392]	@ 0x188
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011f8e:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8011f90:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8011f94:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011f96:	f242 429d 	movw	r2, #9373	@ 0x249d
    outptr = output_buf[ctr] + output_col;
 8011f9a:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011f9c:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011fa0:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011fa4:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011fa8:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011faa:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8011fac:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8011fb0:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8011fb2:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8011fb6:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8011fba:	006d      	lsls	r5, r5, #1
 8011fbc:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8011fc0:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8011fc4:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011fc6:	19eb      	adds	r3, r5, r7
 8011fc8:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8011fca:	f241 0071 	movw	r0, #4209	@ 0x1071
 8011fce:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8011fd2:	484a      	ldr	r0, [pc, #296]	@ (80120fc <jpeg_idct_10x10+0x300>)
 8011fd4:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8011fd8:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8011fdc:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8011fde:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 8011fe2:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8011fe4:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8011fe6:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011fe8:	f640 10e3 	movw	r0, #2531	@ 0x9e3
    tmp23 = tmp11 - tmp13;
 8011fec:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8011fee:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 8011ff2:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8011ff6:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8011ffa:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011ffc:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012000:	f641 606f 	movw	r0, #7791	@ 0x1e6f
 8012004:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8012008:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 801200c:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012010:	f642 40b3 	movw	r0, #11443	@ 0x2cb3
 8012014:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012018:	f240 7014 	movw	r0, #1812	@ 0x714
 801201c:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012020:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012022:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012026:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801202a:	f642 0853 	movw	r8, #10323	@ 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801202e:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012032:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012034:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012038:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801203c:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012040:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012044:	f241 4a8c 	movw	sl, #5260	@ 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012048:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801204a:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801204e:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012052:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012054:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012058:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801205c:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012060:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012062:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012064:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012068:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801206a:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801206e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8012070:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8012074:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012078:	5d5d      	ldrb	r5, [r3, r5]
 801207a:	9b62      	ldr	r3, [sp, #392]	@ 0x188
 801207c:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801207e:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012080:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012082:	f813 500c 	ldrb.w	r5, [r3, ip]
 8012086:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012088:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801208c:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 8012090:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8012094:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012098:	5d5d      	ldrb	r5, [r3, r5]
 801209a:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801209c:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801209e:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80120a0:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80120a2:	181d      	adds	r5, r3, r0
 80120a4:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80120a6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80120aa:	5d5d      	ldrb	r5, [r3, r5]
 80120ac:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80120ae:	9b02      	ldr	r3, [sp, #8]
 80120b0:	1a1b      	subs	r3, r3, r0
 80120b2:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80120b4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80120b8:	5cc3      	ldrb	r3, [r0, r3]
 80120ba:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80120bc:	9b04      	ldr	r3, [sp, #16]
 80120be:	4413      	add	r3, r2
			    & RANGE_MASK];
 80120c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80120c4:	5cc3      	ldrb	r3, [r0, r3]
 80120c6:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80120c8:	9b04      	ldr	r3, [sp, #16]
 80120ca:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 80120cc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80120d0:	5cc3      	ldrb	r3, [r0, r3]
 80120d2:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80120d4:	9b03      	ldr	r3, [sp, #12]
 80120d6:	4433      	add	r3, r6
			    & RANGE_MASK];
 80120d8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80120dc:	5cc3      	ldrb	r3, [r0, r3]
 80120de:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80120e0:	9b03      	ldr	r3, [sp, #12]
 80120e2:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 80120e4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80120e8:	5cc3      	ldrb	r3, [r0, r3]
 80120ea:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 80120ec:	9b07      	ldr	r3, [sp, #28]
 80120ee:	455b      	cmp	r3, fp
 80120f0:	f47f af48 	bne.w	8011f84 <jpeg_idct_10x10+0x188>
  }
}
 80120f4:	b059      	add	sp, #356	@ 0x164
 80120f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fa:	bf00      	nop
 80120fc:	ffffba5c 	.word	0xffffba5c

08012100 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	b0e5      	sub	sp, #404	@ 0x194
 8012106:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8012108:	f1a2 0b02 	sub.w	fp, r2, #2
 801210c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801210e:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8012112:	3380      	adds	r3, #128	@ 0x80
 8012114:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012116:	1f0b      	subs	r3, r1, #4
 8012118:	9302      	str	r3, [sp, #8]
 801211a:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 801211e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012120:	930a      	str	r3, [sp, #40]	@ 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012122:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012124:	f642 3e6c 	movw	lr, #11116	@ 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012128:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801212c:	f244 2958 	movw	r9, #16984	@ 0x4258
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012130:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012134:	3204      	adds	r2, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012136:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801213a:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801213c:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801213e:	f9bb 0020 	ldrsh.w	r0, [fp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012142:	f8d1 5080 	ldr.w	r5, [r1, #128]	@ 0x80
    tmp10 <<= CONST_BITS;
 8012146:	035b      	lsls	r3, r3, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012148:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801214a:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	@ 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801214e:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012154:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012156:	f8d1 50c0 	ldr.w	r5, [r1, #192]	@ 0xc0
 801215a:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801215c:	f245 157e 	movw	r5, #20862	@ 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012160:	1a27      	subs	r7, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012162:	eba4 0c06 	sub.w	ip, r4, r6
 8012166:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801216a:	f640 55c9 	movw	r5, #3529	@ 0xdc9
 801216e:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8012170:	1985      	adds	r5, r0, r6
    z4 -= z2;
 8012172:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012174:	fb0e 3301 	mla	r3, lr, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012178:	eb0c 0e07 	add.w	lr, ip, r7
    z4 -= z2;
 801217c:	9109      	str	r1, [sp, #36]	@ 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 801217e:	449e      	add	lr, r3
 8012180:	49d0      	ldr	r1, [pc, #832]	@ (80124c4 <jpeg_idct_11x11+0x3c4>)
 8012182:	fb01 e104 	mla	r1, r1, r4, lr
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012186:	f244 3eb5 	movw	lr, #17333	@ 0x43b5
 801218a:	fb0e 3e06 	mla	lr, lr, r6, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801218e:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012190:	eb0e 010c 	add.w	r1, lr, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012194:	f44f 6e4c 	mov.w	lr, #3264	@ 0xcc0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012198:	9104      	str	r1, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801219a:	49cb      	ldr	r1, [pc, #812]	@ (80124c8 <jpeg_idct_11x11+0x3c8>)
 801219c:	fb01 3c00 	mla	ip, r1, r0, r3
 80121a0:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121a4:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	@ 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121a8:	f9bb c050 	ldrsh.w	ip, [fp, #80]	@ 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80121ac:	9105      	str	r1, [sp, #20]
    tmp24 += tmp25;
 80121ae:	49c7      	ldr	r1, [pc, #796]	@ (80124cc <jpeg_idct_11x11+0x3cc>)
 80121b0:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80121b4:	f601 31be 	addw	r1, r1, #3006	@ 0xbbe
 80121b8:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80121bc:	f643 6639 	movw	r6, #15929	@ 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80121c0:	9106      	str	r1, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80121c2:	49c3      	ldr	r1, [pc, #780]	@ (80124d0 <jpeg_idct_11x11+0x3d0>)
 80121c4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80121c6:	fb06 0004 	mla	r0, r6, r4, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121ca:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121ce:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	@ 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80121d2:	1941      	adds	r1, r0, r5
 80121d4:	9107      	str	r1, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121d6:	9902      	ldr	r1, [sp, #8]
 80121d8:	6a08      	ldr	r0, [r1, #32]
 80121da:	4344      	muls	r4, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121dc:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 80121de:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121e0:	f8d1 00a0 	ldr.w	r0, [r1, #160]	@ 0xa0
 80121e4:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121e8:	f8d1 00e0 	ldr.w	r0, [r1, #224]	@ 0xe0
    tmp10 = tmp11 + tmp12 + tmp13 -
 80121ec:	49b9      	ldr	r1, [pc, #740]	@ (80124d4 <jpeg_idct_11x11+0x3d4>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121ee:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 80121f0:	19e0      	adds	r0, r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80121f2:	eb04 0a0c 	add.w	sl, r4, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80121f6:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80121fa:	eb04 0806 	add.w	r8, r4, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80121fe:	4435      	add	r5, r6
 8012200:	fb0e f505 	mul.w	r5, lr, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8012204:	f641 4e6a 	movw	lr, #7274	@ 0x1c6a
 8012208:	fb0e f000 	mul.w	r0, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801220c:	f241 5e74 	movw	lr, #5492	@ 0x1574
 8012210:	fb0e fa0a 	mul.w	sl, lr, sl
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012214:	f640 3eb8 	movw	lr, #3000	@ 0xbb8
 8012218:	fb0e 5808 	mla	r8, lr, r8, r5
    tmp10 = tmp11 + tmp12 + tmp13 -
 801221c:	eb00 0e0a 	add.w	lr, r0, sl
 8012220:	44c6      	add	lr, r8
 8012222:	fb01 ee04 	mla	lr, r1, r4, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012226:	eb07 040c 	add.w	r4, r7, ip
 801222a:	f2a1 71ad 	subw	r1, r1, #1965	@ 0x7ad
 801222e:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012232:	39ef      	subs	r1, #239	@ 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012234:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012238:	fb01 440c 	mla	r4, r1, ip, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801223c:	49a6      	ldr	r1, [pc, #664]	@ (80124d8 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801223e:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012240:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012242:	4454      	add	r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012244:	f244 3a47 	movw	sl, #17223	@ 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012248:	4348      	muls	r0, r1
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801224a:	9904      	ldr	r1, [sp, #16]
    tmp11 += z1;
 801224c:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801224e:	fb0a 0006 	mla	r0, sl, r6, r0
 8012252:	4440      	add	r0, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012254:	f242 080b 	movw	r8, #8203	@ 0x200b
 8012258:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801225c:	f8df 8280 	ldr.w	r8, [pc, #640]	@ 80124e0 <jpeg_idct_11x11+0x3e0>
 8012260:	fb08 cc07 	mla	ip, r8, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012264:	4f9d      	ldr	r7, [pc, #628]	@ (80124dc <jpeg_idct_11x11+0x3dc>)
 8012266:	fb07 cc06 	mla	ip, r7, r6, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801226a:	44ac      	add	ip, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801226c:	eb01 050e 	add.w	r5, r1, lr
 8012270:	12ed      	asrs	r5, r5, #11
 8012272:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012276:	eba1 050e 	sub.w	r5, r1, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801227a:	9903      	ldr	r1, [sp, #12]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801227c:	12ed      	asrs	r5, r5, #11
 801227e:	f8c2 513c 	str.w	r5, [r2, #316]	@ 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012282:	eb01 0509 	add.w	r5, r1, r9
 8012286:	12ed      	asrs	r5, r5, #11
 8012288:	61d5      	str	r5, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801228a:	eba1 0509 	sub.w	r5, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801228e:	9906      	ldr	r1, [sp, #24]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012290:	12ed      	asrs	r5, r5, #11
 8012292:	f8c2 511c 	str.w	r5, [r2, #284]	@ 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012296:	190d      	adds	r5, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012298:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801229a:	12ed      	asrs	r5, r5, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801229c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801229e:	63d5      	str	r5, [r2, #60]	@ 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122a0:	9905      	ldr	r1, [sp, #20]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80122a2:	f8c2 40fc 	str.w	r4, [r2, #252]	@ 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122a6:	180c      	adds	r4, r1, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80122a8:	1a08      	subs	r0, r1, r0
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80122aa:	9907      	ldr	r1, [sp, #28]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80122ac:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122ae:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80122b0:	f8c2 00dc 	str.w	r0, [r2, #220]	@ 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80122b4:	eb01 000c 	add.w	r0, r1, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122b8:	65d4      	str	r4, [r2, #92]	@ 0x5c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80122ba:	12c0      	asrs	r0, r0, #11
 80122bc:	67d0      	str	r0, [r2, #124]	@ 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80122be:	eba1 000c 	sub.w	r0, r1, ip
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80122c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80122c4:	12c0      	asrs	r0, r0, #11
 80122c6:	f8c2 00bc 	str.w	r0, [r2, #188]	@ 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80122ca:	f645 00ad 	movw	r0, #22701	@ 0x58ad
 80122ce:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 80122d2:	12db      	asrs	r3, r3, #11
 80122d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80122d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122da:	455b      	cmp	r3, fp
 80122dc:	f47f af21 	bne.w	8012122 <jpeg_idct_11x11+0x22>
 80122e0:	9b08      	ldr	r3, [sp, #32]
 80122e2:	3b04      	subs	r3, #4
 80122e4:	9303      	str	r3, [sp, #12]
 80122e6:	9b08      	ldr	r3, [sp, #32]
 80122e8:	3328      	adds	r3, #40	@ 0x28
 80122ea:	930b      	str	r3, [sp, #44]	@ 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 80122ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80122ee:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80122f0:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80122f2:	f245 107e 	movw	r0, #20862	@ 0x517e
    z1 = (INT32) wsptr[2];
 80122f6:	9a02      	ldr	r2, [sp, #8]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80122f8:	f244 2a58 	movw	sl, #16984	@ 0x4258
    outptr = output_buf[ctr] + output_col;
 80122fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z2 = (INT32) wsptr[4];
 8012300:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8012302:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8012304:	9109      	str	r1, [sp, #36]	@ 0x24
 8012306:	9303      	str	r3, [sp, #12]
 8012308:	460b      	mov	r3, r1
 801230a:	996e      	ldr	r1, [sp, #440]	@ 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801230c:	eba6 0e07 	sub.w	lr, r6, r7
    z1 = (INT32) wsptr[2];
 8012310:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8012312:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012314:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8012316:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012318:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801231c:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012320:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012322:	f640 50c9 	movw	r0, #3529	@ 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012326:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012328:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801232a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 801232e:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8012330:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8012332:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012334:	f642 306c 	movw	r0, #11116	@ 0x2b6c
 8012338:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801233c:	eb0e 000c 	add.w	r0, lr, ip
 8012340:	4a60      	ldr	r2, [pc, #384]	@ (80124c4 <jpeg_idct_11x11+0x3c4>)
 8012342:	4418      	add	r0, r3
 8012344:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012348:	f244 30b5 	movw	r0, #17333	@ 0x43b5
 801234c:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012350:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012352:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012356:	986e      	ldr	r0, [sp, #440]	@ 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012358:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801235a:	4a5b      	ldr	r2, [pc, #364]	@ (80124c8 <jpeg_idct_11x11+0x3c8>)
 801235c:	fb02 3e04 	mla	lr, r2, r4, r3
 8012360:	eb0e 020c 	add.w	r2, lr, ip
 8012364:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8012366:	4a59      	ldr	r2, [pc, #356]	@ (80124cc <jpeg_idct_11x11+0x3cc>)
 8012368:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 801236c:	f602 32be 	addw	r2, r2, #3006	@ 0xbbe
 8012370:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012374:	f643 6739 	movw	r7, #15929	@ 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012378:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 801237a:	4a55      	ldr	r2, [pc, #340]	@ (80124d0 <jpeg_idct_11x11+0x3d0>)
 801237c:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801237e:	fb07 4406 	mla	r4, r7, r6, r4
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012382:	f44f 674c 	mov.w	r7, #3264	@ 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012386:	1962      	adds	r2, r4, r5
 8012388:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 801238a:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 801238c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 8012390:	6855      	ldr	r5, [r2, #4]
    z3 = (INT32) wsptr[5];
 8012392:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8012396:	eb05 040e 	add.w	r4, r5, lr
    z4 = (INT32) wsptr[7];
 801239a:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801239e:	eb05 0b08 	add.w	fp, r5, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 80123a2:	4a4c      	ldr	r2, [pc, #304]	@ (80124d4 <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80123a4:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80123a8:	eb05 090c 	add.w	r9, r5, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80123ac:	4466      	add	r6, ip
 80123ae:	437e      	muls	r6, r7
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80123b0:	f641 476a 	movw	r7, #7274	@ 0x1c6a
 80123b4:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80123b6:	f241 5774 	movw	r7, #5492	@ 0x1574
 80123ba:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80123be:	f640 37b8 	movw	r7, #3000	@ 0xbb8
 80123c2:	fb07 6909 	mla	r9, r7, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 80123c6:	eb04 070b 	add.w	r7, r4, fp
 80123ca:	444f      	add	r7, r9
 80123cc:	fb02 7705 	mla	r7, r2, r5, r7
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80123d0:	eb0e 0508 	add.w	r5, lr, r8
 80123d4:	f2a2 72ad 	subw	r2, r2, #1965	@ 0x7ad
 80123d8:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80123dc:	3aef      	subs	r2, #239	@ 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80123de:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80123e2:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80123e6:	4a3c      	ldr	r2, [pc, #240]	@ (80124d8 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80123e8:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80123ea:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80123ee:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80123f0:	f244 3b47 	movw	fp, #17223	@ 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80123f4:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80123f6:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 80123f8:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80123fa:	fb0b 440c 	mla	r4, fp, ip, r4
 80123fe:	444c      	add	r4, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012400:	f242 090b 	movw	r9, #8203	@ 0x200b
 8012404:	fb09 f808 	mul.w	r8, r9, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012408:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 80124e0 <jpeg_idct_11x11+0x3e0>
 801240c:	fb09 880e 	mla	r8, r9, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012410:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 80124dc <jpeg_idct_11x11+0x3dc>
 8012414:	fb0e 880c 	mla	r8, lr, ip, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012418:	44b0      	add	r8, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801241a:	19d6      	adds	r6, r2, r7
 801241c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801241e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012422:	5d96      	ldrb	r6, [r2, r6]
 8012424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012426:	5416      	strb	r6, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012428:	9a05      	ldr	r2, [sp, #20]
 801242a:	1bd0      	subs	r0, r2, r7
 801242c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801242e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012432:	5c10      	ldrb	r0, [r2, r0]
 8012434:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012436:	9a04      	ldr	r2, [sp, #16]
 8012438:	eb02 000a 	add.w	r0, r2, sl
 801243c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801243e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012442:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012444:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012446:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012448:	eba2 000a 	sub.w	r0, r2, sl
 801244c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801244e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012452:	5c10      	ldrb	r0, [r2, r0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012454:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012456:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012458:	1950      	adds	r0, r2, r5
 801245a:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801245c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012460:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012462:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012464:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012466:	1b50      	subs	r0, r2, r5
 8012468:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801246a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801246e:	5c10      	ldrb	r0, [r2, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012470:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012472:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012474:	1910      	adds	r0, r2, r4
 8012476:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012478:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801247c:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801247e:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012480:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012482:	1b10      	subs	r0, r2, r4
 8012484:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012486:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801248a:	5c10      	ldrb	r0, [r2, r0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801248c:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801248e:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012490:	eb02 0008 	add.w	r0, r2, r8
 8012494:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012496:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801249a:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801249c:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801249e:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80124a0:	eba2 0008 	sub.w	r0, r2, r8
 80124a4:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80124a6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80124aa:	5c10      	ldrb	r0, [r2, r0]
 80124ac:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80124ae:	f645 00ad 	movw	r0, #22701	@ 0x58ad
 80124b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80124b4:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80124b8:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80124ba:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80124be:	5cd3      	ldrb	r3, [r2, r3]
 80124c0:	e010      	b.n	80124e4 <jpeg_idct_11x11+0x3e4>
 80124c2:	bf00      	nop
 80124c4:	ffffc5b4 	.word	0xffffc5b4
 80124c8:	ffffcf91 	.word	0xffffcf91
 80124cc:	ffffdb05 	.word	0xffffdb05
 80124d0:	ffffd37d 	.word	0xffffd37d
 80124d4:	ffffe276 	.word	0xffffe276
 80124d8:	ffffc675 	.word	0xffffc675
 80124dc:	ffffca16 	.word	0xffffca16
 80124e0:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 80124e4:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80124e6:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 80124e8:	9b02      	ldr	r3, [sp, #8]
 80124ea:	3320      	adds	r3, #32
 80124ec:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 80124ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124f0:	4293      	cmp	r3, r2
 80124f2:	f47f aefd 	bne.w	80122f0 <jpeg_idct_11x11+0x1f0>
  }
}
 80124f6:	b065      	add	sp, #404	@ 0x194
 80124f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124fc <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80124fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012500:	b0eb      	sub	sp, #428	@ 0x1ac
 8012502:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8012504:	f1a2 0802 	sub.w	r8, r2, #2
 8012508:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801250a:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 801250e:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012512:	1f0b      	subs	r3, r1, #4
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	f102 030e 	add.w	r3, r2, #14
 801251a:	9309      	str	r3, [sp, #36]	@ 0x24
  wsptr = workspace;
 801251c:	ab0a      	add	r3, sp, #40	@ 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801251e:	9900      	ldr	r1, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012520:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012522:	f938 cf02 	ldrsh.w	ip, [r8, #2]!
 8012526:	f851 2f04 	ldr.w	r2, [r1, #4]!
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801252a:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801252e:	f8d1 0080 	ldr.w	r0, [r1, #128]	@ 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012532:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012536:	f9b8 2040 	ldrsh.w	r2, [r8, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801253a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801253c:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012540:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012542:	f242 7031 	movw	r0, #10033	@ 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012546:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	@ 0x60
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801254a:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801254e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012550:	6c08      	ldr	r0, [r1, #64]	@ 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012552:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012556:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8012558:	eb0c 0702 	add.w	r7, ip, r2
    tmp11 = z3 - z4;
 801255c:	ebac 0202 	sub.w	r2, ip, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012560:	fb01 f006 	mul.w	r0, r1, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012564:	9900      	ldr	r1, [sp, #0]
 8012566:	f8d1 50c0 	ldr.w	r5, [r1, #192]	@ 0xc0
 801256a:	436c      	muls	r4, r5
    z2 <<= CONST_BITS;
 801256c:	0364      	lsls	r4, r4, #13

    tmp12 = z1 - z2;
 801256e:	ebc4 3546 	rsb	r5, r4, r6, lsl #13

    tmp21 = z3 + tmp12;
 8012572:	eb0c 0105 	add.w	r1, ip, r5
 8012576:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 8012578:	ebac 0105 	sub.w	r1, ip, r5

    tmp12 = z4 + z2;
 801257c:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 801257e:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 8012582:	9102      	str	r1, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012584:	f641 368d 	movw	r6, #7053	@ 0x1b8d
    tmp25 = tmp10 - tmp12;
 8012588:	1b79      	subs	r1, r7, r5
    tmp12 = z4 - z1 - z2;
 801258a:	1b00      	subs	r0, r0, r4
    tmp20 = tmp10 + tmp12;
 801258c:	eb07 0b05 	add.w	fp, r7, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012590:	f9b8 7010 	ldrsh.w	r7, [r8, #16]
    tmp25 = tmp10 - tmp12;
 8012594:	9103      	str	r1, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8012596:	1811      	adds	r1, r2, r0
    tmp23 = tmp11 - tmp12;
 8012598:	1a12      	subs	r2, r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801259a:	f9b8 c030 	ldrsh.w	ip, [r8, #48]	@ 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801259e:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	@ 0x50
    tmp23 = tmp11 - tmp12;
 80125a2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125a4:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80125a6:	9104      	str	r1, [sp, #16]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125a8:	6a12      	ldr	r2, [r2, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125aa:	9900      	ldr	r1, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125ac:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125ae:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125b0:	f8d1 00e0 	ldr.w	r0, [r1, #224]	@ 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80125b4:	f642 11cf 	movw	r1, #10703	@ 0x29cf
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125b8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80125ba:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125be:	9a00      	ldr	r2, [sp, #0]
 80125c0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80125c4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80125c8:	49b9      	ldr	r1, [pc, #740]	@ (80128b0 <jpeg_idct_12x12+0x3b4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125ca:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125cc:	f9b8 2070 	ldrsh.w	r2, [r8, #112]	@ 0x70
    tmp10 = z1 + z3;
 80125d0:	eb07 0a05 	add.w	sl, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125d4:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80125d6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80125da:	eb02 0e0a 	add.w	lr, r2, sl
 80125de:	fb06 fe0e 	mul.w	lr, r6, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80125e2:	f640 065b 	movw	r6, #2139	@ 0x85b
 80125e6:	fb06 ea0a 	mla	sl, r6, sl, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80125ea:	f640 06f7 	movw	r6, #2295	@ 0x8f7
 80125ee:	eb04 010a 	add.w	r1, r4, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80125f2:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80125f6:	fb06 1107 	mla	r1, r6, r7, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80125fa:	18ae      	adds	r6, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80125fc:	9106      	str	r1, [sp, #24]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80125fe:	49ad      	ldr	r1, [pc, #692]	@ (80128b4 <jpeg_idct_12x12+0x3b8>)
 8012600:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012602:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012604:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012606:	49ac      	ldr	r1, [pc, #688]	@ (80128b8 <jpeg_idct_12x12+0x3bc>)
 8012608:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801260c:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 801260e:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012612:	f241 1c51 	movw	ip, #4433	@ 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012616:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012618:	f243 2ac6 	movw	sl, #12998	@ 0x32c6
 801261c:	fb0a 4402 	mla	r4, sl, r2, r4
 8012620:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012622:	49a6      	ldr	r1, [pc, #664]	@ (80128bc <jpeg_idct_12x12+0x3c0>)
 8012624:	fb01 0007 	mla	r0, r1, r7, r0
 8012628:	49a5      	ldr	r1, [pc, #660]	@ (80128c0 <jpeg_idct_12x12+0x3c4>)
 801262a:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 801262e:	1aba      	subs	r2, r7, r2
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012630:	1957      	adds	r7, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012632:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012634:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012638:	f641 0c7e 	movw	ip, #6270	@ 0x187e
 801263c:	fb0c 7c02 	mla	ip, ip, r2, r7
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012640:	4aa0      	ldr	r2, [pc, #640]	@ (80128c4 <jpeg_idct_12x12+0x3c8>)
 8012642:	fb02 7705 	mla	r7, r2, r5, r7

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012646:	9a06      	ldr	r2, [sp, #24]
 8012648:	445a      	add	r2, fp
 801264a:	12d2      	asrs	r2, r2, #11
 801264c:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012650:	9a06      	ldr	r2, [sp, #24]
 8012652:	ebab 0b02 	sub.w	fp, fp, r2
 8012656:	ea4f 22eb 	mov.w	r2, fp, asr #11
 801265a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801265e:	9a01      	ldr	r2, [sp, #4]
 8012660:	4462      	add	r2, ip
 8012662:	12d2      	asrs	r2, r2, #11
 8012664:	61da      	str	r2, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012666:	9a01      	ldr	r2, [sp, #4]
 8012668:	eba2 020c 	sub.w	r2, r2, ip
 801266c:	12d2      	asrs	r2, r2, #11
 801266e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012672:	9a04      	ldr	r2, [sp, #16]
 8012674:	4432      	add	r2, r6
 8012676:	12d2      	asrs	r2, r2, #11
 8012678:	63da      	str	r2, [r3, #60]	@ 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801267a:	9a04      	ldr	r2, [sp, #16]
 801267c:	1b92      	subs	r2, r2, r6
 801267e:	12d2      	asrs	r2, r2, #11
 8012680:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012684:	9a05      	ldr	r2, [sp, #20]
 8012686:	4422      	add	r2, r4
 8012688:	12d2      	asrs	r2, r2, #11
 801268a:	65da      	str	r2, [r3, #92]	@ 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801268c:	9a05      	ldr	r2, [sp, #20]
 801268e:	1b12      	subs	r2, r2, r4
 8012690:	12d2      	asrs	r2, r2, #11
 8012692:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012696:	9a02      	ldr	r2, [sp, #8]
 8012698:	443a      	add	r2, r7
 801269a:	12d2      	asrs	r2, r2, #11
 801269c:	67da      	str	r2, [r3, #124]	@ 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801269e:	9a02      	ldr	r2, [sp, #8]
 80126a0:	1bd2      	subs	r2, r2, r7
 80126a2:	12d2      	asrs	r2, r2, #11
 80126a4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80126a8:	9a03      	ldr	r2, [sp, #12]
 80126aa:	4402      	add	r2, r0
 80126ac:	12d2      	asrs	r2, r2, #11
 80126ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80126b2:	9a03      	ldr	r2, [sp, #12]
 80126b4:	1a12      	subs	r2, r2, r0
 80126b6:	12d2      	asrs	r2, r2, #11
 80126b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80126bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126be:	4542      	cmp	r2, r8
 80126c0:	f47f af2d 	bne.w	801251e <jpeg_idct_12x12+0x22>
 80126c4:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80126c6:	aa0a      	add	r2, sp, #40	@ 0x28
 80126c8:	f1a3 0a04 	sub.w	sl, r3, #4
 80126cc:	332c      	adds	r3, #44	@ 0x2c
 80126ce:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80126d0:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80126d4:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80126d6:	9974      	ldr	r1, [sp, #464]	@ 0x1d0
    z2 = (INT32) wsptr[6];
 80126d8:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 80126dc:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 80126e0:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 80126e2:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80126e4:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 80126e8:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 80126ea:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 80126ee:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80126f2:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 80126f4:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80126f6:	f242 7131 	movw	r1, #10033	@ 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80126fa:	f642 33b6 	movw	r3, #11190	@ 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80126fe:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012700:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8012704:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8012708:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801270c:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801270e:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8012712:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8012716:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 801271a:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801271e:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8012720:	1b09      	subs	r1, r1, r4
    tmp25 = tmp10 - tmp12;
 8012722:	eba6 030c 	sub.w	r3, r6, ip
    z3 = (INT32) wsptr[5];
 8012726:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 801272a:	eb06 070c 	add.w	r7, r6, ip
    tmp25 = tmp10 - tmp12;
 801272e:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8012730:	1843      	adds	r3, r0, r1
    z4 = (INT32) wsptr[7];
 8012732:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012736:	f641 368d 	movw	r6, #7053	@ 0x1b8d
    tmp22 = tmp11 + tmp12;
 801273a:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 801273c:	1a43      	subs	r3, r0, r1
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801273e:	f642 11cf 	movw	r1, #10703	@ 0x29cf
    tmp23 = tmp11 - tmp12;
 8012742:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012744:	f852 3c14 	ldr.w	r3, [r2, #-20]
 8012748:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801274c:	4958      	ldr	r1, [pc, #352]	@ (80128b0 <jpeg_idct_12x12+0x3b4>)
 801274e:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8012750:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8012754:	eb03 0b05 	add.w	fp, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012758:	eb04 0c0b 	add.w	ip, r4, fp
 801275c:	fb06 fc0c 	mul.w	ip, r6, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012760:	f640 065b 	movw	r6, #2139	@ 0x85b
 8012764:	fb06 cb0b 	mla	fp, r6, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012768:	f640 06f7 	movw	r6, #2295	@ 0x8f7
 801276c:	eb00 0e0b 	add.w	lr, r0, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012770:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012774:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012778:	192e      	adds	r6, r5, r4
 801277a:	4b4e      	ldr	r3, [pc, #312]	@ (80128b4 <jpeg_idct_12x12+0x3b8>)
 801277c:	fb03 f806 	mul.w	r8, r3, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012780:	f6a3 53db 	subw	r3, r3, #3547	@ 0xddb
 8012784:	eb01 0608 	add.w	r6, r1, r8
 8012788:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801278c:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012790:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012792:	f243 2bc6 	movw	fp, #12998	@ 0x32c6
 8012796:	fb0b 0004 	mla	r0, fp, r4, r0
 801279a:	eb00 0b08 	add.w	fp, r0, r8
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801279e:	4847      	ldr	r0, [pc, #284]	@ (80128bc <jpeg_idct_12x12+0x3c0>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80127a0:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80127a4:	fb00 1103 	mla	r1, r0, r3, r1
 80127a8:	4b45      	ldr	r3, [pc, #276]	@ (80128c0 <jpeg_idct_12x12+0x3c4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80127aa:	9874      	ldr	r0, [sp, #464]	@ 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80127ac:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 80127b0:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80127b4:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 80127b6:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80127ba:	4461      	add	r1, ip
    z2 -= z3;
 80127bc:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80127be:	4b41      	ldr	r3, [pc, #260]	@ (80128c4 <jpeg_idct_12x12+0x3c8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80127c0:	eb04 0c05 	add.w	ip, r4, r5
 80127c4:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80127c8:	f641 087e 	movw	r8, #6270	@ 0x187e
 80127cc:	fb08 c804 	mla	r8, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80127d0:	eb07 040e 	add.w	r4, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80127d4:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80127d8:	fb03 cc05 	mla	ip, r3, r5, ip
			     & RANGE_MASK];
 80127dc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80127e0:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80127e2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80127e6:	f819 4004 	ldrb.w	r4, [r9, r4]
 80127ea:	541c      	strb	r4, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80127ec:	9b00      	ldr	r3, [sp, #0]
 80127ee:	f819 4007 	ldrb.w	r4, [r9, r7]
 80127f2:	72dc      	strb	r4, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80127f4:	9b01      	ldr	r3, [sp, #4]
 80127f6:	eb03 0408 	add.w	r4, r3, r8
 80127fa:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80127fc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012800:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012804:	705c      	strb	r4, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012806:	9b01      	ldr	r3, [sp, #4]
 8012808:	eba3 0408 	sub.w	r4, r3, r8
			     & RANGE_MASK];
 801280c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012810:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012814:	9b00      	ldr	r3, [sp, #0]
 8012816:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012818:	9b04      	ldr	r3, [sp, #16]
 801281a:	199c      	adds	r4, r3, r6
 801281c:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801281e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012822:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012826:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012828:	9b04      	ldr	r3, [sp, #16]
 801282a:	1b9c      	subs	r4, r3, r6
 801282c:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801282e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012832:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012836:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012838:	9b05      	ldr	r3, [sp, #20]
 801283a:	eb03 040b 	add.w	r4, r3, fp
 801283e:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012840:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012844:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012848:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801284a:	9b05      	ldr	r3, [sp, #20]
 801284c:	eba3 000b 	sub.w	r0, r3, fp
 8012850:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012852:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012856:	f819 0000 	ldrb.w	r0, [r9, r0]
 801285a:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801285c:	9b02      	ldr	r3, [sp, #8]
 801285e:	eb03 000c 	add.w	r0, r3, ip
 8012862:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012864:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012868:	f819 0000 	ldrb.w	r0, [r9, r0]
 801286c:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801286e:	9b02      	ldr	r3, [sp, #8]
 8012870:	eba3 000c 	sub.w	r0, r3, ip
 8012874:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012876:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801287a:	f819 0000 	ldrb.w	r0, [r9, r0]
 801287e:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012880:	9b03      	ldr	r3, [sp, #12]
 8012882:	1858      	adds	r0, r3, r1
 8012884:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012886:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801288a:	f819 0000 	ldrb.w	r0, [r9, r0]
 801288e:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012890:	9b03      	ldr	r3, [sp, #12]
 8012892:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8012894:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012898:	f819 1001 	ldrb.w	r1, [r9, r1]
 801289c:	9b00      	ldr	r3, [sp, #0]
 801289e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 80128a0:	9b07      	ldr	r3, [sp, #28]
 80128a2:	4553      	cmp	r3, sl
 80128a4:	f47f af14 	bne.w	80126d0 <jpeg_idct_12x12+0x1d4>
  }
}
 80128a8:	b06b      	add	sp, #428	@ 0x1ac
 80128aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ae:	bf00      	nop
 80128b0:	ffffeeaf 	.word	0xffffeeaf
 80128b4:	ffffde8b 	.word	0xffffde8b
 80128b8:	ffffd0b0 	.word	0xffffd0b0
 80128bc:	ffffea5c 	.word	0xffffea5c
 80128c0:	ffffc08c 	.word	0xffffc08c
 80128c4:	ffffc4df 	.word	0xffffc4df

080128c8 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	b0f7      	sub	sp, #476	@ 0x1dc
 80128ce:	f1a2 0902 	sub.w	r9, r2, #2
 80128d2:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80128d4:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80128d8:	f103 0880 	add.w	r8, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80128dc:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80128de:	f1a3 0e04 	sub.w	lr, r3, #4
 80128e2:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80128e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80128e8:	930d      	str	r3, [sp, #52]	@ 0x34
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128ea:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80128ee:	f242 45f9 	movw	r5, #9465	@ 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128f2:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80128f6:	3204      	adds	r2, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80128f8:	f9b9 4020 	ldrsh.w	r4, [r9, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128fc:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80128fe:	f9b9 1040 	ldrsh.w	r1, [r9, #64]	@ 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012902:	f9b9 0060 	ldrsh.w	r0, [r9, #96]	@ 0x60
    z1 <<= CONST_BITS;
 8012906:	035b      	lsls	r3, r3, #13

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012908:	f9b9 7050 	ldrsh.w	r7, [r9, #80]	@ 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801290c:	f9b9 c070 	ldrsh.w	ip, [r9, #112]	@ 0x70
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012914:	9303      	str	r3, [sp, #12]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012916:	f8de 3040 	ldr.w	r3, [lr, #64]	@ 0x40
 801291a:	4363      	muls	r3, r4
 801291c:	9301      	str	r3, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801291e:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012922:	9c01      	ldr	r4, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012924:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012926:	f8de 30c0 	ldr.w	r3, [lr, #192]	@ 0xc0
 801292a:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 801292c:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 801292e:	1a09      	subs	r1, r1, r0
 8012930:	9102      	str	r1, [sp, #8]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012932:	f240 3119 	movw	r1, #793	@ 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012936:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012938:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
 801293c:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012940:	f642 30f1 	movw	r0, #11249	@ 0x2bf1
 8012944:	fb00 5004 	mla	r0, r0, r4, r5
 8012948:	4408      	add	r0, r1
 801294a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801294c:	f241 000c 	movw	r0, #4108	@ 0x100c
 8012950:	4360      	muls	r0, r4
 8012952:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012954:	f640 457c 	movw	r5, #3196	@ 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012958:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801295a:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801295e:	f242 15e0 	movw	r5, #8672	@ 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012962:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012964:	f44f 6022 	mov.w	r0, #2592	@ 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012968:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801296a:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801296c:	1a2d      	subs	r5, r5, r0
 801296e:	440d      	add	r5, r1
 8012970:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012972:	4dd9      	ldr	r5, [pc, #868]	@ (8012cd8 <jpeg_idct_13x13+0x410>)
 8012974:	fb05 0004 	mla	r0, r5, r4, r0
 8012978:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801297a:	9803      	ldr	r0, [sp, #12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801297c:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801297e:	f640 51f2 	movw	r1, #3570	@ 0xdf2
 8012982:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012984:	f641 51fe 	movw	r1, #7678	@ 0x1dfe
 8012988:	4371      	muls	r1, r6

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 801298a:	4ed4      	ldr	r6, [pc, #848]	@ (8012cdc <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801298c:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 801298e:	48d4      	ldr	r0, [pc, #848]	@ (8012ce0 <jpeg_idct_13x13+0x418>)
 8012990:	4360      	muls	r0, r4
 8012992:	1ac0      	subs	r0, r0, r3
 8012994:	1a40      	subs	r0, r0, r1
 8012996:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012998:	48d2      	ldr	r0, [pc, #840]	@ (8012ce4 <jpeg_idct_13x13+0x41c>)
 801299a:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801299e:	f8de 0060 	ldr.w	r0, [lr, #96]	@ 0x60
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80129a2:	f641 6402 	movw	r4, #7682	@ 0x1e02
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80129a6:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80129a8:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80129ac:	9309      	str	r3, [sp, #36]	@ 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80129ae:	f8de 3020 	ldr.w	r3, [lr, #32]
 80129b2:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80129b4:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	@ 0x30
 80129b8:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80129ba:	f8de 00a0 	ldr.w	r0, [lr, #160]	@ 0xa0
 80129be:	4347      	muls	r7, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80129c0:	f8de 00e0 	ldr.w	r0, [lr, #224]	@ 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80129c4:	eb01 0b03 	add.w	fp, r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80129c8:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80129cc:	f642 2050 	movw	r0, #10832	@ 0x2a50
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80129d0:	19cd      	adds	r5, r1, r7
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80129d2:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80129d6:	f242 503e 	movw	r0, #9534	@ 0x253e
 80129da:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80129dc:	eb01 000c 	add.w	r0, r1, ip
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80129e0:	fb04 fa00 	mul.w	sl, r4, r0
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80129e4:	4cc0      	ldr	r4, [pc, #768]	@ (8012ce8 <jpeg_idct_13x13+0x420>)
    tmp15 = z1 + z4;
 80129e6:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp10 = tmp11 + tmp12 + tmp13 -
 80129e8:	eb0b 0005 	add.w	r0, fp, r5
 80129ec:	4450      	add	r0, sl
 80129ee:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80129f2:	4ebe      	ldr	r6, [pc, #760]	@ (8012cec <jpeg_idct_13x13+0x424>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 80129f4:	900b      	str	r0, [sp, #44]	@ 0x2c
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80129f6:	19d8      	adds	r0, r3, r7
 80129f8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80129fa:	f641 26cb 	movw	r6, #6859	@ 0x1acb
 80129fe:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012a02:	fb04 0007 	mla	r0, r4, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012a06:	f604 5411 	addw	r4, r4, #3345	@ 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012a0a:	445e      	add	r6, fp
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012a0c:	f244 6b94 	movw	fp, #18068	@ 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012a10:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012a12:	eb03 050c 	add.w	r5, r3, ip
 8012a16:	4365      	muls	r5, r4
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012a18:	4cb5      	ldr	r4, [pc, #724]	@ (8012cf0 <jpeg_idct_13x13+0x428>)
    tmp11 += tmp14;
 8012a1a:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012a1c:	fb0b 550c 	mla	r5, fp, ip, r5
    tmp12 += tmp14;
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012a20:	f640 2b33 	movw	fp, #2611	@ 0xa33
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012a24:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012a26:	eb07 0a0c 	add.w	sl, r7, ip
 8012a2a:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012a2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    tmp12 += tmp14;
 8012a30:	4450      	add	r0, sl
    tmp13 += tmp14;
 8012a32:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012a34:	f640 25d5 	movw	r5, #2773	@ 0xad5
 8012a38:	4365      	muls	r5, r4
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012a3a:	4cae      	ldr	r4, [pc, #696]	@ (8012cf4 <jpeg_idct_13x13+0x42c>)
 8012a3c:	fb0b 5101 	mla	r1, fp, r1, r5
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012a40:	f640 4b4e 	movw	fp, #3150	@ 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012a44:	fb04 1103 	mla	r1, r4, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012a48:	1afb      	subs	r3, r7, r3
 8012a4a:	f641 6402 	movw	r4, #7682	@ 0x1e02
 8012a4e:	4363      	muls	r3, r4
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012a50:	9c04      	ldr	r4, [sp, #16]
    tmp14 += z1;
 8012a52:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012a54:	fb0b 3307 	mla	r3, fp, r7, r3
 8012a58:	f46f 575f 	mvn.w	r7, #14272	@ 0x37c0
 8012a5c:	fb07 330c 	mla	r3, r7, ip, r3
 8012a60:	442b      	add	r3, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012a62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012a64:	1965      	adds	r5, r4, r5
 8012a66:	12ed      	asrs	r5, r5, #11
 8012a68:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012a6c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012a6e:	1b65      	subs	r5, r4, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012a70:	9c06      	ldr	r4, [sp, #24]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012a72:	12ed      	asrs	r5, r5, #11
 8012a74:	f8c2 517c 	str.w	r5, [r2, #380]	@ 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012a78:	19a5      	adds	r5, r4, r6
 8012a7a:	12ed      	asrs	r5, r5, #11
 8012a7c:	61d5      	str	r5, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012a7e:	1ba5      	subs	r5, r4, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012a80:	9c05      	ldr	r4, [sp, #20]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012a82:	12ed      	asrs	r5, r5, #11
 8012a84:	f8c2 515c 	str.w	r5, [r2, #348]	@ 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012a88:	1825      	adds	r5, r4, r0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012a8a:	1a20      	subs	r0, r4, r0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012a8c:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012a8e:	12c0      	asrs	r0, r0, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012a90:	63d5      	str	r5, [r2, #60]	@ 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012a92:	f8c2 013c 	str.w	r0, [r2, #316]	@ 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012a96:	9808      	ldr	r0, [sp, #32]
 8012a98:	4450      	add	r0, sl
 8012a9a:	12c0      	asrs	r0, r0, #11
 8012a9c:	65d0      	str	r0, [r2, #92]	@ 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012a9e:	9808      	ldr	r0, [sp, #32]
 8012aa0:	eba0 000a 	sub.w	r0, r0, sl
 8012aa4:	12c0      	asrs	r0, r0, #11
 8012aa6:	f8c2 011c 	str.w	r0, [r2, #284]	@ 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012aac:	4408      	add	r0, r1
 8012aae:	12c0      	asrs	r0, r0, #11
 8012ab0:	67d0      	str	r0, [r2, #124]	@ 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ab4:	1a41      	subs	r1, r0, r1
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012ab6:	9803      	ldr	r0, [sp, #12]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012ab8:	12c9      	asrs	r1, r1, #11
 8012aba:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012abe:	9907      	ldr	r1, [sp, #28]
 8012ac0:	4419      	add	r1, r3
 8012ac2:	12c9      	asrs	r1, r1, #11
 8012ac4:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012ac8:	9907      	ldr	r1, [sp, #28]
 8012aca:	1acb      	subs	r3, r1, r3
 8012acc:	12db      	asrs	r3, r3, #11
 8012ace:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012ad2:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8012ad6:	1a5b      	subs	r3, r3, r1
 8012ad8:	f642 5141 	movw	r1, #11585	@ 0x2d41
 8012adc:	fb01 0303 	mla	r3, r1, r3, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8012ae0:	12db      	asrs	r3, r3, #11
 8012ae2:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ae8:	454b      	cmp	r3, r9
 8012aea:	f47f aefe 	bne.w	80128ea <jpeg_idct_13x13+0x22>
 8012aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8012af0:	ac0e      	add	r4, sp, #56	@ 0x38
 8012af2:	3b04      	subs	r3, #4
 8012af4:	9303      	str	r3, [sp, #12]
 8012af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012af8:	3330      	adds	r3, #48	@ 0x30
 8012afa:	930c      	str	r3, [sp, #48]	@ 0x30
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012afc:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012afe:	f242 45f9 	movw	r5, #9465	@ 0x24f9
    z3 = (INT32) wsptr[4];
 8012b02:	6920      	ldr	r0, [r4, #16]
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012b04:	f641 6702 	movw	r7, #7682	@ 0x1e02
    outptr = output_buf[ctr] + output_col;
 8012b08:	f853 2f04 	ldr.w	r2, [r3, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012b0c:	3420      	adds	r4, #32
    z4 = (INT32) wsptr[6];
 8012b0e:	f854 1c08 	ldr.w	r1, [r4, #-8]
    outptr = output_buf[ctr] + output_col;
 8012b12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012b14:	9303      	str	r3, [sp, #12]
 8012b16:	4613      	mov	r3, r2
 8012b18:	9a80      	ldr	r2, [sp, #512]	@ 0x200
    z2 = (INT32) wsptr[2];
 8012b1a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8012b1e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b20:	f854 3c20 	ldr.w	r3, [r4, #-32]
    z3 = (INT32) wsptr[5];
 8012b24:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b28:	3310      	adds	r3, #16
 8012b2a:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8012b2c:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8012b2e:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012b30:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8012b32:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012b34:	f240 3119 	movw	r1, #793	@ 0x319
 8012b38:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012b3a:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012b3c:	4341      	muls	r1, r0
 8012b3e:	9802      	ldr	r0, [sp, #8]
 8012b40:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012b44:	f642 30f1 	movw	r0, #11249	@ 0x2bf1
 8012b48:	fb00 500e 	mla	r0, r0, lr, r5
 8012b4c:	4408      	add	r0, r1
 8012b4e:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012b50:	f241 000c 	movw	r0, #4108	@ 0x100c
 8012b54:	fb00 f00e 	mul.w	r0, r0, lr
 8012b58:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012b5a:	f640 457c 	movw	r5, #3196	@ 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012b5e:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012b60:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012b64:	f242 15e0 	movw	r5, #8672	@ 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012b68:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012b6a:	f44f 6022 	mov.w	r0, #2592	@ 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012b6e:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012b72:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012b74:	1a2d      	subs	r5, r5, r0
 8012b76:	440d      	add	r5, r1
 8012b78:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012b7a:	4d57      	ldr	r5, [pc, #348]	@ (8012cd8 <jpeg_idct_13x13+0x410>)
 8012b7c:	fb05 000e 	mla	r0, r5, lr, r0
 8012b80:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012b82:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012b84:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8012b86:	f640 51f2 	movw	r1, #3570	@ 0xdf2
 8012b8a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012b8c:	f641 51fe 	movw	r1, #7678	@ 0x1dfe
 8012b90:	4371      	muls	r1, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012b92:	4e56      	ldr	r6, [pc, #344]	@ (8012cec <jpeg_idct_13x13+0x424>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012b94:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8012b98:	4851      	ldr	r0, [pc, #324]	@ (8012ce0 <jpeg_idct_13x13+0x418>)
 8012b9a:	fb00 f00e 	mul.w	r0, r0, lr
 8012b9e:	1ac0      	subs	r0, r0, r3
 8012ba0:	1a40      	subs	r0, r0, r1
 8012ba2:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012ba4:	484f      	ldr	r0, [pc, #316]	@ (8012ce4 <jpeg_idct_13x13+0x41c>)
 8012ba6:	fb00 330e 	mla	r3, r0, lr, r3
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012baa:	f642 2050 	movw	r0, #10832	@ 0x2a50
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012bae:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8012bb0:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012bb4:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012bb6:	eb01 050c 	add.w	r5, r1, ip
    z2 = (INT32) wsptr[3];
 8012bba:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012bbe:	eb01 0b03 	add.w	fp, r1, r3
 8012bc2:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012bc6:	f242 503e 	movw	r0, #9534	@ 0x253e
 8012bca:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8012bcc:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8012bd0:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012bd4:	4841      	ldr	r0, [pc, #260]	@ (8012cdc <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012bd6:	fb07 fa09 	mul.w	sl, r7, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012bda:	eb0b 0705 	add.w	r7, fp, r5
 8012bde:	4457      	add	r7, sl
 8012be0:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012be4:	4f40      	ldr	r7, [pc, #256]	@ (8012ce8 <jpeg_idct_13x13+0x420>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012be6:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012be8:	eb03 000c 	add.w	r0, r3, ip
 8012bec:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012bee:	f641 26cb 	movw	r6, #6859	@ 0x1acb
 8012bf2:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012bf6:	fb07 000c 	mla	r0, r7, ip, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012bfa:	f607 5711 	addw	r7, r7, #3345	@ 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012bfe:	445e      	add	r6, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c00:	f244 6b94 	movw	fp, #18068	@ 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012c04:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012c06:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012c0a:	195d      	adds	r5, r3, r5
 8012c0c:	437d      	muls	r5, r7
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c0e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp11 += tmp14;
 8012c12:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c14:	fb0b 5507 	mla	r5, fp, r7, r5
 8012c18:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012c1a:	eb0c 0a07 	add.w	sl, ip, r7
 8012c1e:	4f34      	ldr	r7, [pc, #208]	@ (8012cf0 <jpeg_idct_13x13+0x428>)
 8012c20:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012c24:	f207 671e 	addw	r7, r7, #1566	@ 0x61e
    tmp12 += tmp14;
 8012c28:	4450      	add	r0, sl
    tmp13 += tmp14;
 8012c2a:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012c2c:	f640 25d5 	movw	r5, #2773	@ 0xad5
 8012c30:	fb05 f509 	mul.w	r5, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012c34:	f640 2933 	movw	r9, #2611	@ 0xa33
 8012c38:	fb09 5101 	mla	r1, r9, r1, r5
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012c3c:	f640 494e 	movw	r9, #3150	@ 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012c40:	fb07 1103 	mla	r1, r7, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012c44:	ebac 0303 	sub.w	r3, ip, r3
 8012c48:	f641 6702 	movw	r7, #7682	@ 0x1e02
 8012c4c:	437b      	muls	r3, r7
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012c4e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp14 += z1;
 8012c52:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012c54:	fb09 330c 	mla	r3, r9, ip, r3
 8012c58:	f46f 5c5f 	mvn.w	ip, #14272	@ 0x37c0
 8012c5c:	fb0c 3307 	mla	r3, ip, r7, r3
 8012c60:	eb03 0c05 	add.w	ip, r3, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c66:	9d04      	ldr	r5, [sp, #16]
 8012c68:	441d      	add	r5, r3
			     & RANGE_MASK];
 8012c6a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c6e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012c72:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012c74:	9b80      	ldr	r3, [sp, #512]	@ 0x200
 8012c76:	54fd      	strb	r5, [r7, r3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c78:	9b04      	ldr	r3, [sp, #16]
 8012c7a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012c7c:	1b5d      	subs	r5, r3, r5
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c7e:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012c80:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c84:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012c88:	7315      	strb	r5, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c8a:	199d      	adds	r5, r3, r6
			     & RANGE_MASK];
 8012c8c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c90:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012c94:	7055      	strb	r5, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012c96:	1b9d      	subs	r5, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012c98:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012c9a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012c9e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012ca2:	72d5      	strb	r5, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012ca4:	181d      	adds	r5, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012ca6:	1a18      	subs	r0, r3, r0
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012ca8:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012caa:	f3c5 4589 	ubfx	r5, r5, #18, #10
			     & RANGE_MASK];
 8012cae:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012cb2:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012cb6:	7095      	strb	r5, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012cb8:	f818 0000 	ldrb.w	r0, [r8, r0]
 8012cbc:	7290      	strb	r0, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012cbe:	eb03 000a 	add.w	r0, r3, sl
			     & RANGE_MASK];
 8012cc2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012cc6:	f818 0000 	ldrb.w	r0, [r8, r0]
 8012cca:	70d0      	strb	r0, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012ccc:	eba3 000a 	sub.w	r0, r3, sl
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			     & RANGE_MASK];
 8012cd2:	f3c0 4089 	ubfx	r0, r0, #18, #10
 8012cd6:	e00f      	b.n	8012cf8 <jpeg_idct_13x13+0x430>
 8012cd8:	ffffd7ee 	.word	0xffffd7ee
 8012cdc:	ffffbf5b 	.word	0xffffbf5b
 8012ce0:	fffffa8c 	.word	0xfffffa8c
 8012ce4:	ffffe64b 	.word	0xffffe64b
 8012ce8:	ffffcdb1 	.word	0xffffcdb1
 8012cec:	fffff52b 	.word	0xfffff52b
 8012cf0:	ffffeaf8 	.word	0xffffeaf8
 8012cf4:	fffff116 	.word	0xfffff116
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012cf8:	f818 0000 	ldrb.w	r0, [r8, r0]
 8012cfc:	7250      	strb	r0, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012cfe:	1858      	adds	r0, r3, r1
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012d00:	1a59      	subs	r1, r3, r1
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d02:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012d04:	f3c0 4089 	ubfx	r0, r0, #18, #10
			     & RANGE_MASK];
 8012d08:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012d0c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8012d10:	7110      	strb	r0, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012d12:	f818 1001 	ldrb.w	r1, [r8, r1]
 8012d16:	7211      	strb	r1, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d18:	eb03 010c 	add.w	r1, r3, ip
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012d1c:	eba3 030c 	sub.w	r3, r3, ip
			     & RANGE_MASK];
 8012d20:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8012d24:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d28:	f818 1001 	ldrb.w	r1, [r8, r1]
 8012d2c:	7151      	strb	r1, [r2, #5]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012d2e:	f642 5141 	movw	r1, #11585	@ 0x2d41
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012d32:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d36:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012d38:	9b01      	ldr	r3, [sp, #4]
 8012d3a:	eba3 030e 	sub.w	r3, r3, lr
 8012d3e:	434b      	muls	r3, r1
 8012d40:	9902      	ldr	r1, [sp, #8]
 8012d42:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8012d46:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8012d4a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d4e:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8012d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d52:	9a03      	ldr	r2, [sp, #12]
 8012d54:	4293      	cmp	r3, r2
 8012d56:	f47f aed1 	bne.w	8012afc <jpeg_idct_13x13+0x234>
  }
}
 8012d5a:	b077      	add	sp, #476	@ 0x1dc
 8012d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d60 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d64:	b0fd      	sub	sp, #500	@ 0x1f4
 8012d66:	f1a2 0b02 	sub.w	fp, r2, #2
 8012d6a:	9309      	str	r3, [sp, #36]	@ 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d6c:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8012d70:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 8012d72:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d76:	1f03      	subs	r3, r0, #4
 8012d78:	9300      	str	r3, [sp, #0]
 8012d7a:	f102 030e 	add.w	r3, r2, #14
 8012d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
  wsptr = workspace;
 8012d80:	ab0c      	add	r3, sp, #48	@ 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d82:	9900      	ldr	r1, [sp, #0]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012d84:	f241 3ea3 	movw	lr, #5027	@ 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d88:	f93b 4f02 	ldrsh.w	r4, [fp, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012d8c:	f640 68f2 	movw	r8, #3826	@ 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d90:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d94:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d96:	9100      	str	r1, [sp, #0]
 8012d98:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d9a:	9a00      	ldr	r2, [sp, #0]
 8012d9c:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	@ 0x40
 8012da0:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
    z1 <<= CONST_BITS;
 8012da4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012da6:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012da8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012daa:	f642 01c6 	movw	r1, #10438	@ 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012dae:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012db2:	fb01 f702 	mul.w	r7, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012db6:	f640 2112 	movw	r1, #2578	@ 0xa12
 8012dba:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012dbe:	f641 4137 	movw	r1, #7223	@ 0x1c37
    tmp10 = z1 + z2;
 8012dc2:	19e6      	adds	r6, r4, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012dc4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012dc6:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8012dc8:	eb04 050c 	add.w	r5, r4, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012dcc:	f9bb c020 	ldrsh.w	ip, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012dd0:	1abf      	subs	r7, r7, r2
    tmp12 = z1 - z4;
 8012dd2:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012dd4:	eba4 0247 	sub.w	r2, r4, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012dd8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	@ 0xc0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012ddc:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012de0:	48d6      	ldr	r0, [pc, #856]	@ (801313c <jpeg_idct_14x14+0x3dc>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012de2:	920a      	str	r2, [sp, #40]	@ 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012de4:	9a00      	ldr	r2, [sp, #0]
 8012de6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012de8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012dec:	f9bb 2060 	ldrsh.w	r2, [fp, #96]	@ 0x60
 8012df0:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012df2:	eb0c 0402 	add.w	r4, ip, r2
 8012df6:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012df8:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 8012dfc:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012e00:	fb00 4402 	mla	r4, r0, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012e04:	f600 20e5 	addw	r0, r0, #2789	@ 0xae5
 8012e08:	4342      	muls	r2, r0
    tmp20 = tmp10 + tmp13;
 8012e0a:	19f0      	adds	r0, r6, r7
 8012e0c:	9001      	str	r0, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8012e0e:	1bf0      	subs	r0, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012e10:	fb0e 220c 	mla	r2, lr, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e14:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	@ 0x30
    tmp26 = tmp10 - tmp13;
 8012e18:	9002      	str	r0, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8012e1a:	1928      	adds	r0, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e1c:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	@ 0x50
    tmp21 = tmp11 + tmp14;
 8012e20:	9003      	str	r0, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8012e22:	1b28      	subs	r0, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e24:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012e28:	f242 6552 	movw	r5, #9810	@ 0x2652
    tmp25 = tmp11 - tmp14;
 8012e2c:	9004      	str	r0, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8012e2e:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8012e30:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e32:	9900      	ldr	r1, [sp, #0]
    tmp22 = tmp12 + tmp15;
 8012e34:	9005      	str	r0, [sp, #20]
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012e36:	f46f 60a2 	mvn.w	r0, #1296	@ 0x510
    tmp24 = tmp12 - tmp15;
 8012e3a:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e3c:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e3e:	f8d1 10e0 	ldr.w	r1, [r1, #224]	@ 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e42:	6a12      	ldr	r2, [r2, #32]
 8012e44:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e46:	9a00      	ldr	r2, [sp, #0]
 8012e48:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8012e4a:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e4c:	9a00      	ldr	r2, [sp, #0]
 8012e4e:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012e52:	eb04 0c07 	add.w	ip, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e56:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e58:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	@ 0x70
    tmp14 = z1 + z3;
 8012e5c:	eb04 0a06 	add.w	sl, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e60:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012e62:	f642 21b7 	movw	r1, #10935	@ 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012e66:	fb05 f50a 	mul.w	r5, r5, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012e6a:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012e6e:	49b4      	ldr	r1, [pc, #720]	@ (8013140 <jpeg_idct_14x14+0x3e0>)
 8012e70:	eb0c 0e05 	add.w	lr, ip, r5
 8012e74:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8012e78:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012e7c:	f641 0114 	movw	r1, #6164	@ 0x1814
 8012e80:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012e84:	49af      	ldr	r1, [pc, #700]	@ (8013144 <jpeg_idct_14x14+0x3e4>)
 8012e86:	fb01 a104 	mla	r1, r1, r4, sl
    z1    -= z2;
 8012e8a:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012e8c:	fb08 f804 	mul.w	r8, r8, r4
 8012e90:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8012e94:	4441      	add	r1, r8
 8012e96:	9107      	str	r1, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012e98:	19b9      	adds	r1, r7, r6
 8012e9a:	4341      	muls	r1, r0
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012e9c:	f6a0 0081 	subw	r0, r0, #2177	@ 0x881
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012ea0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012ea4:	fb00 1007 	mla	r0, r0, r7, r1
 8012ea8:	4460      	add	r0, ip
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012eaa:	f642 4cf8 	movw	ip, #11512	@ 0x2cf8
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012eae:	9008      	str	r0, [sp, #32]
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012eb0:	48a5      	ldr	r0, [pc, #660]	@ (8013148 <jpeg_idct_14x14+0x3e8>)
 8012eb2:	fb00 1106 	mla	r1, r0, r6, r1
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012eb6:	48a5      	ldr	r0, [pc, #660]	@ (801314c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012eb8:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012eba:	1bf5      	subs	r5, r6, r7
 8012ebc:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ec0:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8012ec4:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ec6:	fb00 cc06 	mla	ip, r0, r6, ip

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012eca:	9801      	ldr	r0, [sp, #4]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012ecc:	1b92      	subs	r2, r2, r6
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012ece:	eb00 040e 	add.w	r4, r0, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ed2:	44d4      	add	ip, sl
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012ed4:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012ed6:	f241 5a99 	movw	sl, #5529	@ 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012eda:	12e4      	asrs	r4, r4, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012edc:	fb0a 5507 	mla	r5, sl, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012ee0:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ee4:	eba0 040e 	sub.w	r4, r0, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012ee8:	9803      	ldr	r0, [sp, #12]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012eea:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012eec:	12e4      	asrs	r4, r4, #11
 8012eee:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012ef2:	9c08      	ldr	r4, [sp, #32]
 8012ef4:	1904      	adds	r4, r0, r4
 8012ef6:	12e4      	asrs	r4, r4, #11
 8012ef8:	61dc      	str	r4, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012efa:	9c08      	ldr	r4, [sp, #32]
 8012efc:	1b04      	subs	r4, r0, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012efe:	9805      	ldr	r0, [sp, #20]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012f00:	12e4      	asrs	r4, r4, #11
 8012f02:	f8c3 417c 	str.w	r4, [r3, #380]	@ 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012f06:	1844      	adds	r4, r0, r1
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012f08:	1a41      	subs	r1, r0, r1
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012f0a:	12e4      	asrs	r4, r4, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012f0c:	12c9      	asrs	r1, r1, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012f0e:	63dc      	str	r4, [r3, #60]	@ 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012f10:	f8c3 115c 	str.w	r1, [r3, #348]	@ 0x15c
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012f14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012f16:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 8012f1a:	65d9      	str	r1, [r3, #92]	@ 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012f1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012f1e:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012f22:	9907      	ldr	r1, [sp, #28]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012f24:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012f28:	9a06      	ldr	r2, [sp, #24]
 8012f2a:	4462      	add	r2, ip
 8012f2c:	12d2      	asrs	r2, r2, #11
 8012f2e:	67da      	str	r2, [r3, #124]	@ 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012f30:	9a06      	ldr	r2, [sp, #24]
 8012f32:	eba2 020c 	sub.w	r2, r2, ip
 8012f36:	12d2      	asrs	r2, r2, #11
 8012f38:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012f3c:	9a04      	ldr	r2, [sp, #16]
 8012f3e:	442a      	add	r2, r5
 8012f40:	12d2      	asrs	r2, r2, #11
 8012f42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012f46:	9a04      	ldr	r2, [sp, #16]
 8012f48:	1b52      	subs	r2, r2, r5
 8012f4a:	12d2      	asrs	r2, r2, #11
 8012f4c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012f50:	9a02      	ldr	r2, [sp, #8]
 8012f52:	440a      	add	r2, r1
 8012f54:	12d2      	asrs	r2, r2, #11
 8012f56:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012f5a:	9a02      	ldr	r2, [sp, #8]
 8012f5c:	1a52      	subs	r2, r2, r1
 8012f5e:	12d2      	asrs	r2, r2, #11
 8012f60:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012f66:	455a      	cmp	r2, fp
 8012f68:	f47f af0b 	bne.w	8012d82 <jpeg_idct_14x14+0x22>
 8012f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8012f6e:	a80c      	add	r0, sp, #48	@ 0x30
 8012f70:	3b04      	subs	r3, #4
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f76:	3334      	adds	r3, #52	@ 0x34
 8012f78:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012f7a:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012f7c:	f640 2412 	movw	r4, #2578	@ 0xa12
    z4 = (INT32) wsptr[4];
 8012f80:	6906      	ldr	r6, [r0, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012f82:	f241 3ea3 	movw	lr, #5027	@ 0x13a3
    outptr = output_buf[ctr] + output_col;
 8012f86:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012f8a:	f46f 6aa2 	mvn.w	sl, #1296	@ 0x510
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f8e:	6801      	ldr	r1, [r0, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012f90:	fb04 f706 	mul.w	r7, r4, r6
    outptr = output_buf[ctr] + output_col;
 8012f94:	920a      	str	r2, [sp, #40]	@ 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012f96:	f641 4437 	movw	r4, #7223	@ 0x1c37
    outptr = output_buf[ctr] + output_col;
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	9a86      	ldr	r2, [sp, #536]	@ 0x218
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012fa0:	3110      	adds	r1, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012fa2:	3020      	adds	r0, #32
    outptr = output_buf[ctr] + output_col;
 8012fa4:	189a      	adds	r2, r3, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012fa6:	f642 03c6 	movw	r3, #10438	@ 0x28c6
    tmp11 = z1 + z3;
 8012faa:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012fae:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012fb0:	4366      	muls	r6, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012fb2:	4c62      	ldr	r4, [pc, #392]	@ (801313c <jpeg_idct_14x14+0x3dc>)
    tmp10 = z1 + z2;
 8012fb4:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012fb8:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8012fba:	ebc6 3841 	rsb	r8, r6, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012fbe:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012fc2:	1b9b      	subs	r3, r3, r6
    z1 = (INT32) wsptr[2];
 8012fc4:	f850 6c18 	ldr.w	r6, [r0, #-24]
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012fc8:	005b      	lsls	r3, r3, #1
 8012fca:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8012fce:	9301      	str	r3, [sp, #4]
    z2 = (INT32) wsptr[6];
 8012fd0:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012fd4:	18f1      	adds	r1, r6, r3
 8012fd6:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012fd8:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 8012fdc:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012fe0:	fb04 1103 	mla	r1, r4, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012fe4:	f604 24e5 	addw	r4, r4, #2789	@ 0xae5
 8012fe8:	4363      	muls	r3, r4
    tmp20 = tmp10 + tmp13;
 8012fea:	eb0c 0407 	add.w	r4, ip, r7
 8012fee:	9402      	str	r4, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8012ff0:	ebac 0407 	sub.w	r4, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012ff4:	fb0e 3306 	mla	r3, lr, r6, r3
    z3 = (INT32) wsptr[5];
 8012ff8:	f850 cc0c 	ldr.w	ip, [r0, #-12]
    tmp26 = tmp10 - tmp13;
 8012ffc:	9403      	str	r4, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8012ffe:	186c      	adds	r4, r5, r1
    tmp25 = tmp11 - tmp14;
 8013000:	1a69      	subs	r1, r5, r1
    z4 = (INT32) wsptr[7];
 8013002:	f850 6c04 	ldr.w	r6, [r0, #-4]
    tmp21 = tmp11 + tmp14;
 8013006:	9404      	str	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013008:	f242 6452 	movw	r4, #9810	@ 0x2652
    tmp25 = tmp11 - tmp14;
 801300c:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 801300e:	eb08 0103 	add.w	r1, r8, r3
    tmp24 = tmp12 - tmp15;
 8013012:	eba8 0303 	sub.w	r3, r8, r3
    z2 = (INT32) wsptr[3];
 8013016:	f850 8c14 	ldr.w	r8, [r0, #-20]
    tmp22 = tmp12 + tmp15;
 801301a:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801301c:	f642 21b7 	movw	r1, #10935	@ 0x2ab7
    tmp24 = tmp12 - tmp15;
 8013020:	9307      	str	r3, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013022:	f640 6ef2 	movw	lr, #3826	@ 0xef2
    z1 = (INT32) wsptr[1];
 8013026:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    tmp14 = z1 + z3;
 801302a:	eb03 0b0c 	add.w	fp, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801302e:	eb03 0508 	add.w	r5, r3, r8
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013032:	fb04 f40b 	mul.w	r4, r4, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013036:	434d      	muls	r5, r1
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013038:	4941      	ldr	r1, [pc, #260]	@ (8013140 <jpeg_idct_14x14+0x3e0>)
 801303a:	192f      	adds	r7, r5, r4
 801303c:	eb07 3746 	add.w	r7, r7, r6, lsl #13
 8013040:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013044:	f641 0114 	movw	r1, #6164	@ 0x1814
 8013048:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801304c:	493d      	ldr	r1, [pc, #244]	@ (8013144 <jpeg_idct_14x14+0x3e4>)
 801304e:	fb01 b103 	mla	r1, r1, r3, fp
    z1    -= z2;
 8013052:	eba3 0308 	sub.w	r3, r3, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013056:	fb0e fe03 	mul.w	lr, lr, r3
    z1    -= z2;
 801305a:	9308      	str	r3, [sp, #32]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801305c:	ebae 3e46 	sub.w	lr, lr, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013060:	4b3b      	ldr	r3, [pc, #236]	@ (8013150 <jpeg_idct_14x14+0x3f0>)
    tmp16 += tmp15;
 8013062:	4471      	add	r1, lr
 8013064:	9109      	str	r1, [sp, #36]	@ 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013066:	eb08 010c 	add.w	r1, r8, ip
 801306a:	fb0a f101 	mul.w	r1, sl, r1
 801306e:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013072:	fb03 1a08 	mla	sl, r3, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013076:	4b34      	ldr	r3, [pc, #208]	@ (8013148 <jpeg_idct_14x14+0x3e8>)
 8013078:	fb03 110c 	mla	r1, r3, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801307c:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801307e:	f642 45f8 	movw	r5, #11512	@ 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013082:	4b32      	ldr	r3, [pc, #200]	@ (801314c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013084:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013086:	ebac 0408 	sub.w	r4, ip, r8
 801308a:	436c      	muls	r4, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801308c:	eb04 3546 	add.w	r5, r4, r6, lsl #13
 8013090:	fb03 550c 	mla	r5, r3, ip, r5
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013094:	9b08      	ldr	r3, [sp, #32]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013096:	445d      	add	r5, fp
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013098:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801309c:	f241 5b99 	movw	fp, #5529	@ 0x1599
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80130a0:	035b      	lsls	r3, r3, #13
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80130a2:	fb0b 4408 	mla	r4, fp, r8, r4
 80130a6:	4474      	add	r4, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80130a8:	eb03 3e46 	add.w	lr, r3, r6, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80130ac:	9e02      	ldr	r6, [sp, #8]
 80130ae:	9b86      	ldr	r3, [sp, #536]	@ 0x218
 80130b0:	eb06 0c07 	add.w	ip, r6, r7
 80130b4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
			     & RANGE_MASK];
 80130b6:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80130ba:	f819 c00c 	ldrb.w	ip, [r9, ip]
 80130be:	f806 c003 	strb.w	ip, [r6, r3]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80130c2:	9b02      	ldr	r3, [sp, #8]
 80130c4:	1bde      	subs	r6, r3, r7
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130c6:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 80130c8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80130cc:	f819 6006 	ldrb.w	r6, [r9, r6]
 80130d0:	7356      	strb	r6, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130d2:	eb03 060a 	add.w	r6, r3, sl
			     & RANGE_MASK];
 80130d6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130da:	f819 6006 	ldrb.w	r6, [r9, r6]
 80130de:	7056      	strb	r6, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80130e0:	eba3 060a 	sub.w	r6, r3, sl
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130e4:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80130e6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80130ea:	f819 6006 	ldrb.w	r6, [r9, r6]
 80130ee:	7316      	strb	r6, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130f0:	185e      	adds	r6, r3, r1
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80130f2:	1a59      	subs	r1, r3, r1
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80130f4:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80130f6:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 80130fa:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130fe:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013102:	7096      	strb	r6, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013104:	f819 1001 	ldrb.w	r1, [r9, r1]
 8013108:	72d1      	strb	r1, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801310a:	eb03 010e 	add.w	r1, r3, lr
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801310e:	eba3 030e 	sub.w	r3, r3, lr
			     & RANGE_MASK];
 8013112:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8013116:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801311a:	f819 1001 	ldrb.w	r1, [r9, r1]
 801311e:	70d1      	strb	r1, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013120:	f819 3003 	ldrb.w	r3, [r9, r3]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013124:	9909      	ldr	r1, [sp, #36]	@ 0x24
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013126:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013128:	9b07      	ldr	r3, [sp, #28]
 801312a:	442b      	add	r3, r5
			     & RANGE_MASK];
 801312c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013130:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013134:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013136:	9b07      	ldr	r3, [sp, #28]
 8013138:	1b5b      	subs	r3, r3, r5
 801313a:	e00b      	b.n	8013154 <jpeg_idct_14x14+0x3f4>
 801313c:	ffffc8fc 	.word	0xffffc8fc
 8013140:	ffffdbf0 	.word	0xffffdbf0
 8013144:	ffffde0b 	.word	0xffffde0b
 8013148:	ffffb409 	.word	0xffffb409
 801314c:	ffffc9e6 	.word	0xffffc9e6
 8013150:	fffff26e 	.word	0xfffff26e
			     & RANGE_MASK];
 8013154:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013158:	f819 3003 	ldrb.w	r3, [r9, r3]
 801315c:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801315e:	9b05      	ldr	r3, [sp, #20]
 8013160:	4423      	add	r3, r4
			     & RANGE_MASK];
 8013162:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013166:	f819 3003 	ldrb.w	r3, [r9, r3]
 801316a:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801316c:	9b05      	ldr	r3, [sp, #20]
 801316e:	1b1b      	subs	r3, r3, r4
			     & RANGE_MASK];
 8013170:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013174:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013178:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801317a:	9b03      	ldr	r3, [sp, #12]
 801317c:	440b      	add	r3, r1
			     & RANGE_MASK];
 801317e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013182:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013186:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013188:	9b03      	ldr	r3, [sp, #12]
 801318a:	1a5b      	subs	r3, r3, r1
			     & RANGE_MASK];
 801318c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013190:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013194:	71d3      	strb	r3, [r2, #7]
  for (ctr = 0; ctr < 14; ctr++) {
 8013196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013198:	9a00      	ldr	r2, [sp, #0]
 801319a:	4293      	cmp	r3, r2
 801319c:	f47f aeed 	bne.w	8012f7a <jpeg_idct_14x14+0x21a>
  }
}
 80131a0:	b07d      	add	sp, #500	@ 0x1f4
 80131a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a6:	bf00      	nop

080131a8 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80131a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80131b0:	f1a2 0a02 	sub.w	sl, r2, #2
 80131b4:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80131b6:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80131ba:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 80131bc:	f103 0980 	add.w	r9, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80131c0:	1f03      	subs	r3, r0, #4
 80131c2:	9300      	str	r3, [sp, #0]
 80131c4:	f102 030e 	add.w	r3, r2, #14
 80131c8:	930d      	str	r3, [sp, #52]	@ 0x34
  wsptr = workspace;
 80131ca:	ab0e      	add	r3, sp, #56	@ 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131cc:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80131ce:	f642 6e13 	movw	lr, #11795	@ 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131d2:	f93a 5f02 	ldrsh.w	r5, [sl, #2]!
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80131d6:	f241 2b68 	movw	fp, #4712	@ 0x1268
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131da:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80131de:	f644 68a3 	movw	r8, #20131	@ 0x4ea3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80131e2:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	@ 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80131e6:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131e8:	9100      	str	r1, [sp, #0]
 80131ea:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80131ec:	9a00      	ldr	r2, [sp, #0]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80131ee:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80131f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
    z1 <<= CONST_BITS;
 80131f2:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80131f4:	f9ba 1020 	ldrsh.w	r1, [sl, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80131f8:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80131fc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013200:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013202:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	@ 0x40
 8013206:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013208:	f8d0 40c0 	ldr.w	r4, [r0, #192]	@ 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801320c:	f640 50fc 	movw	r0, #3580	@ 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013210:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8013212:	f242 469d 	movw	r6, #9373	@ 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013216:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801321a:	f642 20ce 	movw	r0, #10958	@ 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801321e:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8013220:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8013224:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8013226:	eba4 040c 	sub.w	r4, r4, ip
 801322a:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 801322e:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8013230:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013232:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8013236:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013238:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801323c:	f44f 70bb 	mov.w	r0, #374	@ 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8013240:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8013244:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013248:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 801324a:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801324e:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8013250:	f640 4cc7 	movw	ip, #3271	@ 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8013254:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013256:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8013258:	f241 1482 	movw	r4, #4482	@ 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801325c:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8013260:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013262:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8013264:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013268:	443c      	add	r4, r7
 801326a:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801326e:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013272:	f641 2c9a 	movw	ip, #6810	@ 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013276:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8013278:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801327a:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801327c:	f641 114c 	movw	r1, #6476	@ 0x194c
 8013280:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013282:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8013286:	440f      	add	r7, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013288:	436a      	muls	r2, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 801328a:	1a76      	subs	r6, r6, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 801328c:	18b8      	adds	r0, r7, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 801328e:	18b2      	adds	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013290:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	@ 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8013294:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8013296:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8013298:	f44f 52b5 	mov.w	r2, #5792	@ 0x16a0
 801329c:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801329e:	f9ba 5030 	ldrsh.w	r5, [sl, #48]	@ 0x30
    tmp11 += tmp11;
 80132a2:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80132a4:	9908      	ldr	r1, [sp, #32]
 80132a6:	9a01      	ldr	r2, [sp, #4]
 80132a8:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132aa:	9900      	ldr	r1, [sp, #0]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80132ac:	9209      	str	r2, [sp, #36]	@ 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132ae:	6a09      	ldr	r1, [r1, #32]
 80132b0:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 80132b4:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80132b6:	9900      	ldr	r1, [sp, #0]
 80132b8:	6e09      	ldr	r1, [r1, #96]	@ 0x60
 80132ba:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132bc:	9900      	ldr	r1, [sp, #0]
 80132be:	f8d1 10a0 	ldr.w	r1, [r1, #160]	@ 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80132c2:	f9ba e070 	ldrsh.w	lr, [sl, #112]	@ 0x70
 80132c6:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132c8:	434e      	muls	r6, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80132ca:	f242 7131 	movw	r1, #10033	@ 0x2731
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80132ce:	f8d0 40e0 	ldr.w	r4, [r0, #224]	@ 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80132d2:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80132d4:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp13 = z2 - z4;
 80132d8:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80132dc:	1917      	adds	r7, r2, r4
 80132de:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80132e2:	f241 0c71 	movw	ip, #4209	@ 0x1071
 80132e6:	fb0c 7002 	mla	r0, ip, r2, r7
    z2 = z1 - z4;
 80132ea:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80132ee:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80132f0:	48cd      	ldr	r0, [pc, #820]	@ (8013628 <jpeg_idct_15x15+0x480>)
 80132f2:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80132f6:	48cd      	ldr	r0, [pc, #820]	@ (801362c <jpeg_idct_15x15+0x484>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80132f8:	f642 5402 	movw	r4, #11522	@ 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80132fc:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80132fe:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013302:	900b      	str	r0, [sp, #44]	@ 0x2c
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013304:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8013308:	48c9      	ldr	r0, [pc, #804]	@ (8013630 <jpeg_idct_15x15+0x488>)
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801330a:	eb02 010e 	add.w	r1, r2, lr
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801330e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8013312:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013314:	f200 7071 	addw	r0, r0, #1905	@ 0x771
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8013318:	fb0b f101 	mul.w	r1, fp, r1
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801331c:	f640 7b39 	movw	fp, #3897	@ 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013320:	fb00 4402 	mla	r4, r0, r2, r4
 8013324:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8013326:	fb0b 1202 	mla	r2, fp, r2, r1
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801332a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801332e:	4404      	add	r4, r0
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013330:	ebac 0c06 	sub.w	ip, ip, r6
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8013334:	1b92      	subs	r2, r2, r6
 8013336:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013338:	48be      	ldr	r0, [pc, #760]	@ (8013634 <jpeg_idct_15x15+0x48c>)
 801333a:	fb00 110e 	mla	r1, r0, lr, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801333e:	9802      	ldr	r0, [sp, #8]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013340:	4431      	add	r1, r6
 8013342:	4429      	add	r1, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013344:	eb00 0508 	add.w	r5, r0, r8
 8013348:	12ed      	asrs	r5, r5, #11
 801334a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801334e:	eba0 0508 	sub.w	r5, r0, r8
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013352:	9806      	ldr	r0, [sp, #24]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013354:	12ed      	asrs	r5, r5, #11
 8013356:	f8c3 51bc 	str.w	r5, [r3, #444]	@ 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801335a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801335c:	1945      	adds	r5, r0, r5
 801335e:	12ed      	asrs	r5, r5, #11
 8013360:	61dd      	str	r5, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013362:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013364:	1b45      	subs	r5, r0, r5
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013366:	9809      	ldr	r0, [sp, #36]	@ 0x24
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013368:	12ed      	asrs	r5, r5, #11
 801336a:	f8c3 519c 	str.w	r5, [r3, #412]	@ 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801336e:	eb00 050c 	add.w	r5, r0, ip
 8013372:	12ed      	asrs	r5, r5, #11
 8013374:	63dd      	str	r5, [r3, #60]	@ 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013376:	eba0 050c 	sub.w	r5, r0, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801337a:	9803      	ldr	r0, [sp, #12]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801337c:	12ed      	asrs	r5, r5, #11
 801337e:	f8c3 517c 	str.w	r5, [r3, #380]	@ 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013382:	1885      	adds	r5, r0, r2
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013384:	1a82      	subs	r2, r0, r2
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013386:	12ed      	asrs	r5, r5, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013388:	12d2      	asrs	r2, r2, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801338a:	65dd      	str	r5, [r3, #92]	@ 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801338c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013390:	9a07      	ldr	r2, [sp, #28]
 8013392:	443a      	add	r2, r7
 8013394:	12d2      	asrs	r2, r2, #11
 8013396:	67da      	str	r2, [r3, #124]	@ 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013398:	9a07      	ldr	r2, [sp, #28]
 801339a:	1bd2      	subs	r2, r2, r7
 801339c:	12d2      	asrs	r2, r2, #11
 801339e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80133a2:	9a04      	ldr	r2, [sp, #16]
 80133a4:	440a      	add	r2, r1
 80133a6:	12d2      	asrs	r2, r2, #11
 80133a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80133ac:	9a04      	ldr	r2, [sp, #16]
 80133ae:	1a52      	subs	r2, r2, r1
 80133b0:	12d2      	asrs	r2, r2, #11
 80133b2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80133b6:	9a05      	ldr	r2, [sp, #20]
 80133b8:	4422      	add	r2, r4
 80133ba:	12d2      	asrs	r2, r2, #11
 80133bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80133c0:	9a05      	ldr	r2, [sp, #20]
 80133c2:	1b12      	subs	r2, r2, r4
 80133c4:	12d2      	asrs	r2, r2, #11
 80133c6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80133ca:	9a01      	ldr	r2, [sp, #4]
 80133cc:	9908      	ldr	r1, [sp, #32]
 80133ce:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 80133d2:	12d2      	asrs	r2, r2, #11
 80133d4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80133d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80133da:	4552      	cmp	r2, sl
 80133dc:	f47f aef6 	bne.w	80131cc <jpeg_idct_15x15+0x24>
 80133e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133e2:	3b04      	subs	r3, #4
 80133e4:	9301      	str	r3, [sp, #4]
 80133e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133e8:	3338      	adds	r3, #56	@ 0x38
 80133ea:	930d      	str	r3, [sp, #52]	@ 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 80133ec:	ab0e      	add	r3, sp, #56	@ 0x38
 80133ee:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80133f0:	9b01      	ldr	r3, [sp, #4]

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80133f2:	f640 51fc 	movw	r1, #3580	@ 0xdfc
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80133f6:	f44f 74bb 	mov.w	r4, #374	@ 0x176
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80133fa:	f642 6e13 	movw	lr, #11795	@ 0x2e13
    outptr = output_buf[ctr] + output_col;
 80133fe:	f853 2f04 	ldr.w	r2, [r3, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013402:	f242 7a31 	movw	sl, #10033	@ 0x2731
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013406:	f241 0871 	movw	r8, #4209	@ 0x1071
    outptr = output_buf[ctr] + output_col;
 801340a:	920c      	str	r2, [sp, #48]	@ 0x30
 801340c:	9301      	str	r3, [sp, #4]
 801340e:	4613      	mov	r3, r2
 8013410:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 8013412:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013414:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[2];
 8013416:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8013418:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801341a:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 801341c:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801341e:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013420:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8013424:	f242 419d 	movw	r1, #9373	@ 0x249d
 8013428:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 801342a:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 801342e:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8013432:	eba2 020c 	sub.w	r2, r2, ip
 8013436:	0052      	lsls	r2, r2, #1
 8013438:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 801343c:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 801343e:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013440:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8013444:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013446:	f642 22ce 	movw	r2, #10958	@ 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801344a:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801344e:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8013450:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013454:	1a8a      	subs	r2, r1, r2
 8013456:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8013458:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801345c:	f640 4cc7 	movw	ip, #3271	@ 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013460:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8013462:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8013464:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013468:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801346a:	f241 1282 	movw	r2, #4482	@ 0x1182
 801346e:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8013470:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013474:	440a      	add	r2, r1
 8013476:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801347a:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801347e:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8013480:	9405      	str	r4, [sp, #20]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013482:	4c69      	ldr	r4, [pc, #420]	@ (8013628 <jpeg_idct_15x15+0x480>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013484:	9206      	str	r2, [sp, #24]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8013486:	f641 124c 	movw	r2, #6476	@ 0x194c
 801348a:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801348c:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
    tmp24 = tmp13 - tmp10 + tmp11;
 8013490:	1a3f      	subs	r7, r7, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013492:	4372      	muls	r2, r6
    tmp21 = tmp12 + tmp10 + tmp11;
 8013494:	4401      	add	r1, r0
 8013496:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8013498:	18ba      	adds	r2, r7, r2
 801349a:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 801349c:	f44f 52b5 	mov.w	r2, #5792	@ 0x16a0
 80134a0:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80134a2:	f641 269a 	movw	r6, #6810	@ 0x1a9a
    tmp11 += tmp11;
 80134a6:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80134a8:	9808      	ldr	r0, [sp, #32]
 80134aa:	9a02      	ldr	r2, [sp, #8]
 80134ac:	eb02 0b00 	add.w	fp, r2, r0
    z2 = (INT32) wsptr[3];
 80134b0:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80134b2:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[3];
 80134b4:	68c7      	ldr	r7, [r0, #12]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80134b6:	6940      	ldr	r0, [r0, #20]
    z1 = (INT32) wsptr[1];
 80134b8:	6852      	ldr	r2, [r2, #4]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80134ba:	fb0a fc00 	mul.w	ip, sl, r0
    z4 = (INT32) wsptr[7];
 80134be:	9800      	ldr	r0, [sp, #0]
 80134c0:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 80134c4:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80134c8:	1950      	adds	r0, r2, r5
 80134ca:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80134cc:	f644 66a3 	movw	r6, #20131	@ 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80134d0:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80134d4:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 80134d8:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80134dc:	4c56      	ldr	r4, [pc, #344]	@ (8013638 <jpeg_idct_15x15+0x490>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80134de:	9009      	str	r0, [sp, #36]	@ 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80134e0:	4852      	ldr	r0, [pc, #328]	@ (801362c <jpeg_idct_15x15+0x484>)
 80134e2:	4378      	muls	r0, r7
 80134e4:	900a      	str	r0, [sp, #40]	@ 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80134e6:	4852      	ldr	r0, [pc, #328]	@ (8013630 <jpeg_idct_15x15+0x488>)
 80134e8:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80134ea:	f642 5002 	movw	r0, #11522	@ 0x2d02
 80134ee:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80134f2:	fb0a f505 	mul.w	r5, sl, r5
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80134f6:	f241 2a68 	movw	sl, #4712	@ 0x1268
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80134fa:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80134fe:	fb04 0002 	mla	r0, r4, r2, r0
 8013502:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013504:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013506:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801350a:	4420      	add	r0, r4
 801350c:	900b      	str	r0, [sp, #44]	@ 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801350e:	eb02 000e 	add.w	r0, r2, lr
 8013512:	fb0a f000 	mul.w	r0, sl, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8013516:	f640 7a39 	movw	sl, #3897	@ 0xf39
 801351a:	fb0a 0202 	mla	r2, sl, r2, r0
 801351e:	eba2 020c 	sub.w	r2, r2, ip
 8013522:	eb02 0a04 	add.w	sl, r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013526:	4c43      	ldr	r4, [pc, #268]	@ (8013634 <jpeg_idct_15x15+0x48c>)
 8013528:	fb04 000e 	mla	r0, r4, lr, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801352c:	9c03      	ldr	r4, [sp, #12]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801352e:	4460      	add	r0, ip
 8013530:	4438      	add	r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013532:	19a7      	adds	r7, r4, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013534:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013538:	f819 7007 	ldrb.w	r7, [r9, r7]
 801353c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801353e:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 8013540:	54a7      	strb	r7, [r4, r2]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013542:	9a03      	ldr	r2, [sp, #12]
 8013544:	1b96      	subs	r6, r2, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013546:	9a04      	ldr	r2, [sp, #16]
			     & RANGE_MASK];
 8013548:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801354c:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013550:	739e      	strb	r6, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013552:	eb01 0608 	add.w	r6, r1, r8
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013556:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 801355a:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 801355e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013562:	f819 6006 	ldrb.w	r6, [r9, r6]
 8013566:	705e      	strb	r6, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013568:	f819 1001 	ldrb.w	r1, [r9, r1]
 801356c:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801356e:	eb0b 0105 	add.w	r1, fp, r5
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013572:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8013576:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 801357a:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801357e:	f819 1001 	ldrb.w	r1, [r9, r1]
 8013582:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013584:	f819 100b 	ldrb.w	r1, [r9, fp]
 8013588:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801358a:	eb02 010a 	add.w	r1, r2, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801358e:	eba2 020a 	sub.w	r2, r2, sl
			     & RANGE_MASK];
 8013592:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013596:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801359a:	f819 1001 	ldrb.w	r1, [r9, r1]
 801359e:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80135a0:	f819 2002 	ldrb.w	r2, [r9, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80135a6:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135a8:	9a07      	ldr	r2, [sp, #28]
 80135aa:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80135ac:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135b0:	f819 2002 	ldrb.w	r2, [r9, r2]
 80135b4:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135b6:	9a07      	ldr	r2, [sp, #28]
 80135b8:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80135ba:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135be:	f819 2002 	ldrb.w	r2, [r9, r2]
 80135c2:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80135c4:	9a05      	ldr	r2, [sp, #20]
 80135c6:	4402      	add	r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80135c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80135cc:	f819 2002 	ldrb.w	r2, [r9, r2]
 80135d0:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80135d2:	9a05      	ldr	r2, [sp, #20]
 80135d4:	1a12      	subs	r2, r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80135d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80135da:	f819 2002 	ldrb.w	r2, [r9, r2]
 80135de:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80135e0:	9a06      	ldr	r2, [sp, #24]
 80135e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80135e4:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80135e6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80135ea:	f819 2002 	ldrb.w	r2, [r9, r2]
 80135ee:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80135f0:	9a06      	ldr	r2, [sp, #24]
 80135f2:	1a52      	subs	r2, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80135f4:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80135f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80135fa:	f819 2002 	ldrb.w	r2, [r9, r2]
 80135fe:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013600:	9a02      	ldr	r2, [sp, #8]
 8013602:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013606:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801360a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801360e:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 8013610:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8013612:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 8013614:	3320      	adds	r3, #32
 8013616:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8013618:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801361a:	4293      	cmp	r3, r2
 801361c:	f47f aee8 	bne.w	80133f0 <jpeg_idct_15x15+0x248>
  }
}
 8013620:	f50d 7d07 	add.w	sp, sp, #540	@ 0x21c
 8013624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013628:	ffffba5c 	.word	0xffffba5c
 801362c:	ffffe566 	.word	0xffffe566
 8013630:	ffffd4f6 	.word	0xffffd4f6
 8013634:	ffffe42f 	.word	0xffffe42f
 8013638:	ffffdc67 	.word	0xffffdc67

0801363c <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013640:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8013644:	f1a2 0b02 	sub.w	fp, r2, #2
 8013648:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801364a:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 801364e:	f103 0880 	add.w	r8, r3, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013652:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8013654:	f1a3 0a04 	sub.w	sl, r3, #4
 8013658:	f102 030e 	add.w	r3, r2, #14
 801365c:	930d      	str	r3, [sp, #52]	@ 0x34
  wsptr = workspace;
 801365e:	ab0e      	add	r3, sp, #56	@ 0x38
 8013660:	9300      	str	r3, [sp, #0]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013662:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013666:	f241 1451 	movw	r4, #4433	@ 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801366a:	f85a 1f04 	ldr.w	r1, [sl, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801366e:	f642 4563 	movw	r5, #11363	@ 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013672:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	@ 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013676:	f245 2e03 	movw	lr, #20995	@ 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801367a:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801367c:	f8da 1080 	ldr.w	r1, [sl, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013680:	f9bb c060 	ldrsh.w	ip, [fp, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013684:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8013686:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013688:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801368c:	4bcd      	ldr	r3, [pc, #820]	@ (80139c4 <jpeg_idct_16x16+0x388>)
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 801368e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013692:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013694:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013696:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 801369a:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 801369c:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 801369e:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80136a0:	1a52      	subs	r2, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136a2:	f8da 1040 	ldr.w	r1, [sl, #64]	@ 0x40
 80136a6:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80136aa:	f8da 10c0 	ldr.w	r1, [sl, #192]	@ 0xc0
 80136ae:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80136b2:	f640 01d4 	movw	r1, #2260	@ 0x8d4
    z3 = z1 - z2;
 80136b6:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80136ba:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80136bc:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80136be:	f641 45cd 	movw	r5, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80136c2:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80136c6:	fb03 4409 	mla	r4, r3, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80136ca:	f203 23ee 	addw	r3, r3, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80136ce:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80136d2:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80136d6:	fb03 110c 	mla	r1, r3, ip, r1
    tmp20 = tmp10 + tmp0;
 80136da:	eb07 030e 	add.w	r3, r7, lr
 80136de:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80136e0:	eba7 030e 	sub.w	r3, r7, lr
 80136e4:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80136e6:	1973      	adds	r3, r6, r5
 80136e8:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80136ea:	1b73      	subs	r3, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80136ec:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	@ 0x50
    tmp26 = tmp12 - tmp1;
 80136f0:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80136f2:	1913      	adds	r3, r2, r4
 80136f4:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80136f6:	1b13      	subs	r3, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136f8:	f8da 2020 	ldr.w	r2, [sl, #32]
    tmp25 = tmp13 - tmp2;
 80136fc:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80136fe:	1843      	adds	r3, r0, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013700:	f8da 40e0 	ldr.w	r4, [sl, #224]	@ 0xe0
    tmp23 = tmp11 + tmp3;
 8013704:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013706:	1a43      	subs	r3, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013708:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801370c:	f8da 0060 	ldr.w	r0, [sl, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013710:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013712:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	@ 0x30
    tmp24 = tmp11 - tmp3;
 8013716:	9308      	str	r3, [sp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013718:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801371a:	f8da 00a0 	ldr.w	r0, [sl, #160]	@ 0xa0
 801371e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013720:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	@ 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013724:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013726:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013728:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp11 = z1 + z3;
 801372c:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801372e:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013730:	eb01 0e00 	add.w	lr, r1, r0
 8013734:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013738:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801373c:	fb09 f907 	mul.w	r9, r9, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013740:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013744:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
 8013748:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801374c:	f241 5455 	movw	r4, #5461	@ 0x1555
 8013750:	fb04 f307 	mul.w	r3, r4, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013754:	1a8c      	subs	r4, r1, r2
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013756:	eb06 0709 	add.w	r7, r6, r9
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801375a:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801375c:	f640 5323 	movw	r3, #3363	@ 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013760:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013762:	435c      	muls	r4, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013764:	4b98      	ldr	r3, [pc, #608]	@ (80139c8 <jpeg_idct_16x16+0x38c>)
 8013766:	fb03 7701 	mla	r7, r3, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801376a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801376c:	940a      	str	r4, [sp, #40]	@ 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801376e:	eb0c 0403 	add.w	r4, ip, r3
 8013772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013774:	441c      	add	r4, r3
 8013776:	4b95      	ldr	r3, [pc, #596]	@ (80139cc <jpeg_idct_16x16+0x390>)
 8013778:	fb03 4101 	mla	r1, r3, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801377c:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801377e:	4b94      	ldr	r3, [pc, #592]	@ (80139d0 <jpeg_idct_16x16+0x394>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013780:	910b      	str	r1, [sp, #44]	@ 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013782:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8013786:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013788:	f240 214d 	movw	r1, #589	@ 0x24d
 801378c:	fb01 4102 	mla	r1, r1, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013790:	fb03 4405 	mla	r4, r3, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013794:	f503 6338 	add.w	r3, r3, #2944	@ 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013798:	440e      	add	r6, r1
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801379a:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801379c:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801379e:	f642 5909 	movw	r9, #11529	@ 0x2d09
 80137a2:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80137a6:	fb03 1905 	mla	r9, r3, r5, r1
 80137aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ac:	4499      	add	r9, r3
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80137ae:	f643 731a 	movw	r3, #16154	@ 0x3f1a
 80137b2:	fb03 1102 	mla	r1, r3, r2, r1
 80137b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    z2    += z4;
 80137b8:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80137ba:	18cb      	adds	r3, r1, r3
 80137bc:	9309      	str	r3, [sp, #36]	@ 0x24
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80137be:	4b85      	ldr	r3, [pc, #532]	@ (80139d4 <jpeg_idct_16x16+0x398>)
 80137c0:	fb03 f102 	mul.w	r1, r3, r2
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80137c4:	f242 2318 	movw	r3, #8728	@ 0x2218
    tmp1  += z1;
 80137c8:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80137ca:	fb03 1100 	mla	r1, r3, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80137ce:	4b82      	ldr	r3, [pc, #520]	@ (80139d8 <jpeg_idct_16x16+0x39c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80137d0:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80137d2:	f246 4e85 	movw	lr, #25733	@ 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80137d6:	435a      	muls	r2, r3
    tmp12 += z2;
 80137d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80137da:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 80137de:	441a      	add	r2, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80137e0:	4b7e      	ldr	r3, [pc, #504]	@ (80139dc <jpeg_idct_16x16+0x3a0>)
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80137e2:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80137e4:	eb05 0c00 	add.w	ip, r5, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80137e8:	1b40      	subs	r0, r0, r5
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80137ea:	fb03 fc0c 	mul.w	ip, r3, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80137ee:	f640 5323 	movw	r3, #3363	@ 0xd23
 80137f2:	4358      	muls	r0, r3
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80137f4:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 80137f6:	4464      	add	r4, ip
    tmp3  += z2;
 80137f8:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80137fa:	19dd      	adds	r5, r3, r7
 80137fc:	9b00      	ldr	r3, [sp, #0]
    tmp10 += z2;
 80137fe:	4486      	add	lr, r0
    tmp11 += z2;
 8013800:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013802:	12ed      	asrs	r5, r5, #11
 8013804:	601d      	str	r5, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013806:	9b01      	ldr	r3, [sp, #4]
 8013808:	1bdd      	subs	r5, r3, r7
 801380a:	9b00      	ldr	r3, [sp, #0]
 801380c:	12ed      	asrs	r5, r5, #11
 801380e:	f8c3 51e0 	str.w	r5, [r3, #480]	@ 0x1e0
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013812:	9b03      	ldr	r3, [sp, #12]
 8013814:	199d      	adds	r5, r3, r6
 8013816:	9b00      	ldr	r3, [sp, #0]
 8013818:	12ed      	asrs	r5, r5, #11
 801381a:	621d      	str	r5, [r3, #32]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801381c:	9b03      	ldr	r3, [sp, #12]
 801381e:	1b9d      	subs	r5, r3, r6
 8013820:	9b00      	ldr	r3, [sp, #0]
 8013822:	12ed      	asrs	r5, r5, #11
 8013824:	f8c3 51c0 	str.w	r5, [r3, #448]	@ 0x1c0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013828:	9b05      	ldr	r3, [sp, #20]
 801382a:	191d      	adds	r5, r3, r4
 801382c:	9b00      	ldr	r3, [sp, #0]
 801382e:	12ed      	asrs	r5, r5, #11
 8013830:	641d      	str	r5, [r3, #64]	@ 0x40
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013832:	9b05      	ldr	r3, [sp, #20]
 8013834:	1b1c      	subs	r4, r3, r4
 8013836:	9b00      	ldr	r3, [sp, #0]
 8013838:	12e4      	asrs	r4, r4, #11
 801383a:	f8c3 41a0 	str.w	r4, [r3, #416]	@ 0x1a0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801383e:	9b07      	ldr	r3, [sp, #28]
 8013840:	185c      	adds	r4, r3, r1
 8013842:	9b00      	ldr	r3, [sp, #0]
 8013844:	12e4      	asrs	r4, r4, #11
 8013846:	661c      	str	r4, [r3, #96]	@ 0x60
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013848:	9b07      	ldr	r3, [sp, #28]
 801384a:	1a59      	subs	r1, r3, r1
 801384c:	9b00      	ldr	r3, [sp, #0]
 801384e:	12c9      	asrs	r1, r1, #11
 8013850:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013854:	9b08      	ldr	r3, [sp, #32]
 8013856:	eb03 010e 	add.w	r1, r3, lr
 801385a:	9b00      	ldr	r3, [sp, #0]
 801385c:	12c9      	asrs	r1, r1, #11
 801385e:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013862:	9b08      	ldr	r3, [sp, #32]
 8013864:	eba3 010e 	sub.w	r1, r3, lr
 8013868:	9b00      	ldr	r3, [sp, #0]
 801386a:	12c9      	asrs	r1, r1, #11
 801386c:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013870:	9b06      	ldr	r3, [sp, #24]
 8013872:	1819      	adds	r1, r3, r0
 8013874:	9b00      	ldr	r3, [sp, #0]
 8013876:	12c9      	asrs	r1, r1, #11
 8013878:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801387c:	9b06      	ldr	r3, [sp, #24]
 801387e:	1a19      	subs	r1, r3, r0
 8013880:	9b00      	ldr	r3, [sp, #0]
 8013882:	12c9      	asrs	r1, r1, #11
 8013884:	f8c3 1140 	str.w	r1, [r3, #320]	@ 0x140
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013888:	9b04      	ldr	r3, [sp, #16]
 801388a:	1899      	adds	r1, r3, r2
 801388c:	9b00      	ldr	r3, [sp, #0]
 801388e:	12c9      	asrs	r1, r1, #11
 8013890:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013894:	9b04      	ldr	r3, [sp, #16]
 8013896:	1a9a      	subs	r2, r3, r2
 8013898:	9b00      	ldr	r3, [sp, #0]
 801389a:	12d2      	asrs	r2, r2, #11
 801389c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80138a0:	9b02      	ldr	r3, [sp, #8]
 80138a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80138a4:	189a      	adds	r2, r3, r2
 80138a6:	9b00      	ldr	r3, [sp, #0]
 80138a8:	12d2      	asrs	r2, r2, #11
 80138aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80138ae:	9b02      	ldr	r3, [sp, #8]
 80138b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80138b2:	1a9a      	subs	r2, r3, r2
 80138b4:	9b00      	ldr	r3, [sp, #0]
 80138b6:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138b8:	3304      	adds	r3, #4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80138ba:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138be:	9300      	str	r3, [sp, #0]
 80138c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138c2:	455b      	cmp	r3, fp
 80138c4:	f47f aecd 	bne.w	8013662 <jpeg_idct_16x16+0x26>
 80138c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138ca:	3b04      	subs	r3, #4
 80138cc:	9301      	str	r3, [sp, #4]
 80138ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138d0:	333c      	adds	r3, #60	@ 0x3c
 80138d2:	930d      	str	r3, [sp, #52]	@ 0x34
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 80138d4:	ab0e      	add	r3, sp, #56	@ 0x38
 80138d6:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80138d8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80138da:	f241 1051 	movw	r0, #4433	@ 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80138de:	f642 14cf 	movw	r4, #10703	@ 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80138e2:	f642 4663 	movw	r6, #11363	@ 0x2c63
    outptr = output_buf[ctr] + output_col;
 80138e6:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80138ea:	f245 2703 	movw	r7, #20995	@ 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80138ee:	4d35      	ldr	r5, [pc, #212]	@ (80139c4 <jpeg_idct_16x16+0x388>)
    outptr = output_buf[ctr] + output_col;
 80138f0:	920c      	str	r2, [sp, #48]	@ 0x30
 80138f2:	9301      	str	r3, [sp, #4]
 80138f4:	4613      	mov	r3, r2
 80138f6:	9a98      	ldr	r2, [sp, #608]	@ 0x260
 80138f8:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80138fa:	9b00      	ldr	r3, [sp, #0]
    z1 = (INT32) wsptr[4];
 80138fc:	9a00      	ldr	r2, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80138fe:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8013900:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013902:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013904:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013906:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013908:	f640 00d4 	movw	r0, #2260	@ 0x8d4
    tmp10 = tmp0 + tmp1;
 801390c:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8013910:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8013914:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8013918:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 801391c:	9b00      	ldr	r3, [sp, #0]
 801391e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 8013922:	f8d3 a018 	ldr.w	sl, [r3, #24]
    z3 = z1 - z2;
 8013926:	eba9 030a 	sub.w	r3, r9, sl
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801392a:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801392c:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801392e:	f641 46cd 	movw	r6, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013932:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013936:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801393a:	f205 25ee 	addw	r5, r5, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801393e:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013942:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013946:	fb05 000a 	mla	r0, r5, sl, r0
    tmp20 = tmp10 + tmp0;
 801394a:	eb0e 0507 	add.w	r5, lr, r7
 801394e:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 8013950:	ebae 0507 	sub.w	r5, lr, r7
 8013954:	9503      	str	r5, [sp, #12]
    tmp21 = tmp12 + tmp1;
 8013956:	eb0c 0506 	add.w	r5, ip, r6
 801395a:	9504      	str	r5, [sp, #16]
    tmp26 = tmp12 - tmp1;
 801395c:	ebac 0506 	sub.w	r5, ip, r6
 8013960:	9505      	str	r5, [sp, #20]
    tmp22 = tmp13 + tmp2;
 8013962:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8013964:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8013966:	9506      	str	r5, [sp, #24]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013968:	f640 5523 	movw	r5, #3363	@ 0xd23
    tmp25 = tmp13 - tmp2;
 801396c:	9307      	str	r3, [sp, #28]
    tmp23 = tmp11 + tmp3;
 801396e:	1823      	adds	r3, r4, r0
 8013970:	9308      	str	r3, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8013972:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8013974:	9800      	ldr	r0, [sp, #0]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013976:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp24 = tmp11 - tmp3;
 801397a:	9309      	str	r3, [sp, #36]	@ 0x24
    z1 = (INT32) wsptr[1];
 801397c:	9b00      	ldr	r3, [sp, #0]
    z3 = (INT32) wsptr[5];
 801397e:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8013980:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8013982:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8013984:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8013986:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801398a:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801398c:	eba2 0b03 	sub.w	fp, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013990:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013994:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013998:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801399a:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801399e:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80139a2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80139a6:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80139aa:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139ae:	4d06      	ldr	r5, [pc, #24]	@ (80139c8 <jpeg_idct_16x16+0x38c>)
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80139b0:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80139b4:	f241 5455 	movw	r4, #5461	@ 0x1555
 80139b8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139bc:	eb06 0409 	add.w	r4, r6, r9
 80139c0:	4474      	add	r4, lr
 80139c2:	e00d      	b.n	80139e0 <jpeg_idct_16x16+0x3a4>
 80139c4:	ffffecc2 	.word	0xffffecc2
 80139c8:	ffffb6d6 	.word	0xffffb6d6
 80139cc:	ffffc542 	.word	0xffffc542
 80139d0:	ffffdbfa 	.word	0xffffdbfa
 80139d4:	ffffeaab 	.word	0xffffeaab
 80139d8:	ffffd817 	.word	0xffffd817
 80139dc:	ffffd4b2 	.word	0xffffd4b2
 80139e0:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80139e4:	f605 656c 	addw	r5, r5, #3692	@ 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139e8:	940a      	str	r4, [sp, #40]	@ 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80139ea:	eb0c 040a 	add.w	r4, ip, sl
 80139ee:	445c      	add	r4, fp
 80139f0:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80139f4:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80139f6:	4d5e      	ldr	r5, [pc, #376]	@ (8013b70 <jpeg_idct_16x16+0x534>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80139f8:	920b      	str	r2, [sp, #44]	@ 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80139fa:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 80139fe:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013a00:	f240 224d 	movw	r2, #589	@ 0x24d
 8013a04:	fb02 4203 	mla	r2, r2, r3, r4
 8013a08:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8013b74 <jpeg_idct_16x16+0x538>)
 8013a0c:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013a10:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013a12:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013a14:	f642 5909 	movw	r9, #11529	@ 0x2d09
 8013a18:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013a1c:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013a20:	f6a5 7563 	subw	r5, r5, #3939	@ 0xf63
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013a24:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013a26:	f643 7a1a 	movw	sl, #16154	@ 0x3f1a
 8013a2a:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 8013a2e:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013a30:	eb02 0a0b 	add.w	sl, r2, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013a34:	4a50      	ldr	r2, [pc, #320]	@ (8013b78 <jpeg_idct_16x16+0x53c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a36:	f242 2b18 	movw	fp, #8728	@ 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013a3a:	435a      	muls	r2, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013a3c:	436b      	muls	r3, r5
    tmp1  += z1;
 8013a3e:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a40:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
 8013a44:	449a      	add	sl, r3
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a46:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a48:	f246 4e85 	movw	lr, #25733	@ 0x6485
 8013a4c:	fb0e 3e00 	mla	lr, lr, r0, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a50:	f46f 7359 	mvn.w	r3, #868	@ 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a54:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a56:	441d      	add	r5, r3
 8013a58:	eb07 0c00 	add.w	ip, r7, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013a5c:	1bc0      	subs	r0, r0, r7
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013a5e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a60:	fb05 fc0c 	mul.w	ip, r5, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013a64:	f640 5523 	movw	r5, #3363	@ 0xd23
 8013a68:	4368      	muls	r0, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013a6a:	9d02      	ldr	r5, [sp, #8]
    tmp2  += z2;
 8013a6c:	4464      	add	r4, ip
    tmp3  += z2;
 8013a6e:	4462      	add	r2, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013a70:	19ef      	adds	r7, r5, r7
 8013a72:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    tmp10 += z2;
 8013a74:	4486      	add	lr, r0
    tmp11 += z2;
 8013a76:	4448      	add	r0, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013a78:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013a7c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013a80:	9b98      	ldr	r3, [sp, #608]	@ 0x260
 8013a82:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013a84:	9b02      	ldr	r3, [sp, #8]
 8013a86:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013a88:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013a8a:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8013a8c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013a90:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013a94:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013a96:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013a98:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013a9a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8013a9c:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8013aa0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013aa4:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013aa8:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013aaa:	f818 6006 	ldrb.w	r6, [r8, r6]
 8013aae:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013ab0:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013ab2:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013ab4:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013ab6:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8013aba:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013abe:	f818 6006 	ldrb.w	r6, [r8, r6]
 8013ac2:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013ac4:	f818 4004 	ldrb.w	r4, [r8, r4]
 8013ac8:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013aca:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013acc:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			     & RANGE_MASK];
 8013ad0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8013ad4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013ad8:	f818 4004 	ldrb.w	r4, [r8, r4]
 8013adc:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013ade:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013ae2:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013ae4:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013ae8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013aec:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013af0:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013af2:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013af6:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8013af8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013afc:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013b00:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013b02:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b04:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013b08:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013b0c:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013b0e:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013b10:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8013b12:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013b16:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013b1a:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013b1c:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013b20:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8013b24:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b28:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013b2c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013b30:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013b32:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013b36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013b38:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013b3a:	9b03      	ldr	r3, [sp, #12]
 8013b3c:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b3e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013b42:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013b46:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013b48:	9b03      	ldr	r3, [sp, #12]
 8013b4a:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8013b4c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b4e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013b52:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013b56:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8013b58:	9b00      	ldr	r3, [sp, #0]
 8013b5a:	3320      	adds	r3, #32
 8013b5c:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
 8013b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b60:	4293      	cmp	r3, r2
 8013b62:	f47f aeb9 	bne.w	80138d8 <jpeg_idct_16x16+0x29c>
  }
}
 8013b66:	f50d 7d0f 	add.w	sp, sp, #572	@ 0x23c
 8013b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b6e:	bf00      	nop
 8013b70:	ffffe77a 	.word	0xffffe77a
 8013b74:	ffffdbfa 	.word	0xffffdbfa
 8013b78:	ffffeaab 	.word	0xffffeaab

08013b7c <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b80:	b0d1      	sub	sp, #324	@ 0x144
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013b82:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
{
 8013b84:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8013b86:	a910      	add	r1, sp, #64	@ 0x40
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b88:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8013b8c:	f103 0b80 	add.w	fp, r3, #128	@ 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013b90:	1e93      	subs	r3, r2, #2
 8013b92:	9301      	str	r3, [sp, #4]
 8013b94:	f105 0320 	add.w	r3, r5, #32
 8013b98:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013b9a:	9b01      	ldr	r3, [sp, #4]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8013b9c:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013b9e:	f855 0b04 	ldr.w	r0, [r5], #4
 8013ba2:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013ba4:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8013ba8:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8013bac:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	@ 0x32
 8013bb0:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013bb4:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	@ 0x52
 8013bb8:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 8013bbc:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	@ 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013bc0:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8013bc4:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013bc6:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013bca:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013bcc:	ea4e 0000 	orr.w	r0, lr, r0
 8013bd0:	4330      	orrs	r0, r6
 8013bd2:	ea48 0000 	orr.w	r0, r8, r0
 8013bd6:	4320      	orrs	r0, r4
 8013bd8:	ea59 0000 	orrs.w	r0, r9, r0
 8013bdc:	f040 8152 	bne.w	8013e84 <jpeg_idct_16x8+0x308>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013be0:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 8013be2:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8013be6:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8013be8:	63cb      	str	r3, [r1, #60]	@ 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8013bea:	65cb      	str	r3, [r1, #92]	@ 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8013bec:	67cb      	str	r3, [r1, #124]	@ 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8013bee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8013bf2:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8013bf6:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013bfa:	9b05      	ldr	r3, [sp, #20]
 8013bfc:	42ab      	cmp	r3, r5
 8013bfe:	d1cc      	bne.n	8013b9a <jpeg_idct_16x8+0x1e>
 8013c00:	9b04      	ldr	r3, [sp, #16]
 8013c02:	3b04      	subs	r3, #4
 8013c04:	9302      	str	r3, [sp, #8]
 8013c06:	9b04      	ldr	r3, [sp, #16]
 8013c08:	331c      	adds	r3, #28
 8013c0a:	930f      	str	r3, [sp, #60]	@ 0x3c
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8013c0c:	ab10      	add	r3, sp, #64	@ 0x40
 8013c0e:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013c10:	9b02      	ldr	r3, [sp, #8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013c12:	f241 1051 	movw	r0, #4433	@ 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013c16:	f642 14cf 	movw	r4, #10703	@ 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013c1a:	f642 4663 	movw	r6, #11363	@ 0x2c63
    outptr = output_buf[ctr] + output_col;
 8013c1e:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013c22:	f245 2703 	movw	r7, #20995	@ 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013c26:	4dd7      	ldr	r5, [pc, #860]	@ (8013f84 <jpeg_idct_16x8+0x408>)
    outptr = output_buf[ctr] + output_col;
 8013c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c2a:	9302      	str	r3, [sp, #8]
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
 8013c30:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c32:	9b01      	ldr	r3, [sp, #4]
    z1 = (INT32) wsptr[4];
 8013c34:	9a01      	ldr	r2, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c36:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8013c38:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c3a:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013c3c:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013c3e:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013c40:	f640 00d4 	movw	r0, #2260	@ 0x8d4
    tmp10 = tmp0 + tmp1;
 8013c44:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8013c48:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8013c4c:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8013c50:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 8013c54:	9b01      	ldr	r3, [sp, #4]
 8013c56:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 8013c5a:	f8d3 8018 	ldr.w	r8, [r3, #24]
    z3 = z1 - z2;
 8013c5e:	eba9 0308 	sub.w	r3, r9, r8
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013c62:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013c64:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013c66:	f641 46cd 	movw	r6, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013c6a:	fb07 3708 	mla	r7, r7, r8, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013c6e:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013c72:	f205 25ee 	addw	r5, r5, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013c76:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013c7a:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013c7e:	fb05 0008 	mla	r0, r5, r8, r0
    tmp20 = tmp10 + tmp0;
 8013c82:	eb0e 0507 	add.w	r5, lr, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013c86:	f640 5823 	movw	r8, #3363	@ 0xd23
    tmp20 = tmp10 + tmp0;
 8013c8a:	9503      	str	r5, [sp, #12]
    tmp27 = tmp10 - tmp0;
 8013c8c:	ebae 0507 	sub.w	r5, lr, r7
 8013c90:	9504      	str	r5, [sp, #16]
    tmp21 = tmp12 + tmp1;
 8013c92:	eb0c 0506 	add.w	r5, ip, r6
 8013c96:	9505      	str	r5, [sp, #20]
    tmp26 = tmp12 - tmp1;
 8013c98:	ebac 0506 	sub.w	r5, ip, r6
 8013c9c:	9506      	str	r5, [sp, #24]
    tmp22 = tmp13 + tmp2;
 8013c9e:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8013ca0:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8013ca2:	9507      	str	r5, [sp, #28]
    tmp25 = tmp13 - tmp2;
 8013ca4:	9308      	str	r3, [sp, #32]
    tmp23 = tmp11 + tmp3;
 8013ca6:	1823      	adds	r3, r4, r0
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013ca8:	4db7      	ldr	r5, [pc, #732]	@ (8013f88 <jpeg_idct_16x8+0x40c>)
    tmp23 = tmp11 + tmp3;
 8013caa:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp24 = tmp11 - tmp3;
 8013cac:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8013cae:	9801      	ldr	r0, [sp, #4]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013cb0:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp24 = tmp11 - tmp3;
 8013cb4:	930a      	str	r3, [sp, #40]	@ 0x28
    z1 = (INT32) wsptr[1];
 8013cb6:	9b01      	ldr	r3, [sp, #4]
    z3 = (INT32) wsptr[5];
 8013cb8:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8013cba:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8013cbc:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8013cbe:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8013cc0:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013cc4:	18d6      	adds	r6, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013cc6:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013cca:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013cce:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013cd0:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013cd4:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013cd8:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013cdc:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
 8013ce0:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013ce4:	f241 5455 	movw	r4, #5461	@ 0x1555
 8013ce8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013cec:	1ad4      	subs	r4, r2, r3
 8013cee:	fb08 f404 	mul.w	r4, r8, r4
 8013cf2:	940b      	str	r4, [sp, #44]	@ 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013cf4:	eb06 0409 	add.w	r4, r6, r9
 8013cf8:	4474      	add	r4, lr
 8013cfa:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013cfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013d00:	940c      	str	r4, [sp, #48]	@ 0x30
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013d02:	eb0c 040a 	add.w	r4, ip, sl
 8013d06:	442c      	add	r4, r5
 8013d08:	4da0      	ldr	r5, [pc, #640]	@ (8013f8c <jpeg_idct_16x8+0x410>)
 8013d0a:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013d0e:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013d10:	4d9f      	ldr	r5, [pc, #636]	@ (8013f90 <jpeg_idct_16x8+0x414>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013d12:	920d      	str	r2, [sp, #52]	@ 0x34
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013d14:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8013d18:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013d1a:	f240 224d 	movw	r2, #589	@ 0x24d
 8013d1e:	fb02 4203 	mla	r2, r2, r3, r4
 8013d22:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013d24:	4a9b      	ldr	r2, [pc, #620]	@ (8013f94 <jpeg_idct_16x8+0x418>)
 8013d26:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013d2a:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013d2c:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013d2e:	f642 5909 	movw	r9, #11529	@ 0x2d09
 8013d32:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013d36:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013d3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013d3c:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013d3e:	f643 7a1a 	movw	sl, #16154	@ 0x3f1a
 8013d42:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 8013d46:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013d48:	eb02 0a05 	add.w	sl, r2, r5
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013d4c:	4a92      	ldr	r2, [pc, #584]	@ (8013f98 <jpeg_idct_16x8+0x41c>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013d4e:	f242 2518 	movw	r5, #8728	@ 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013d52:	435a      	muls	r2, r3
    tmp1  += z1;
 8013d54:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013d56:	fb05 2200 	mla	r2, r5, r0, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013d5a:	4d90      	ldr	r5, [pc, #576]	@ (8013f9c <jpeg_idct_16x8+0x420>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013d5c:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013d5e:	f246 4e85 	movw	lr, #25733	@ 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013d62:	436b      	muls	r3, r5
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013d64:	fb0e 3e00 	mla	lr, lr, r0, r3
    tmp12 += z2;
 8013d68:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013d6a:	f46f 7359 	mvn.w	r3, #868	@ 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013d6e:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013d70:	eb07 0c00 	add.w	ip, r7, r0
 8013d74:	441d      	add	r5, r3
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013d76:	1bc0      	subs	r0, r0, r7
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013d78:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d7c:	9d03      	ldr	r5, [sp, #12]
 8013d7e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013d80:	fb08 f000 	mul.w	r0, r8, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d84:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
    tmp2  += z2;
 8013d86:	4464      	add	r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d88:	19ef      	adds	r7, r5, r7
 8013d8a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
    tmp3  += z2;
 8013d8c:	4462      	add	r2, ip
    tmp10 += z2;
 8013d8e:	4486      	add	lr, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d90:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp11 += z2;
 8013d94:	4448      	add	r0, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d96:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8013d9a:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013d9c:	9b03      	ldr	r3, [sp, #12]
 8013d9e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8013da0:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013da2:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8013da4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013da8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8013dac:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013dae:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013db0:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013db2:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8013db4:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8013db8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013dbc:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8013dc0:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013dc2:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8013dc6:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013dc8:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013dca:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			     & RANGE_MASK];
 8013dce:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8013dd2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013dd6:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8013dda:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013ddc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8013de0:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013de2:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013de4:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
			     & RANGE_MASK];
 8013de8:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8013dec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013df0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8013df4:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013df6:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013dfa:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013dfc:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013e00:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013e04:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013e08:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013e0a:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013e0e:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013e10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013e14:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013e18:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013e1a:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013e1c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013e20:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013e24:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013e26:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013e28:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013e2c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013e30:	9b06      	ldr	r3, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013e32:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013e34:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013e38:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8013e3c:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013e40:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013e44:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013e48:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013e4a:	f81b 3003 	ldrb.w	r3, [fp, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013e4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013e50:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013e52:	9b04      	ldr	r3, [sp, #16]
 8013e54:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013e56:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013e5a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013e5e:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013e60:	9b04      	ldr	r3, [sp, #16]
 8013e62:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8013e64:	9a02      	ldr	r2, [sp, #8]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013e66:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013e6a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013e6e:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8013e70:	9b01      	ldr	r3, [sp, #4]
 8013e72:	3320      	adds	r3, #32
 8013e74:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
 8013e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	f47f aec9 	bne.w	8013c10 <jpeg_idct_16x8+0x94>
  }
}
 8013e7e:	b051      	add	sp, #324	@ 0x144
 8013e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e84:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013e86:	f241 1251 	movw	r2, #4433	@ 0x1151
    z2 <<= CONST_BITS;
 8013e8a:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e8c:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013e8e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013e96:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013e98:	183c      	adds	r4, r7, r0
 8013e9a:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013e9c:	f641 027e 	movw	r2, #6270	@ 0x187e
 8013ea0:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8013fa0 <jpeg_idct_16x8+0x424>)
 8013ea6:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013eaa:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8013eac:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8013eae:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8013eb2:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8013eb6:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8013eba:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013ebc:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
    tmp11 = tmp1 + tmp3;
 8013ec0:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8013ec2:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ec4:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013ec6:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013eca:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ece:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ed2:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ed6:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
    tmp13 = tmp0 - tmp2;
 8013ed8:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013eda:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ede:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013ee2:	eb08 040a 	add.w	r4, r8, sl
    tmp12 = tmp1 - tmp3;
 8013ee6:	9303      	str	r3, [sp, #12]
    tmp0 += z1 + z2;
 8013ee8:	f640 138e 	movw	r3, #2446	@ 0x98e
    z2 = tmp0 + tmp2;
 8013eec:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013ef0:	1930      	adds	r0, r6, r4
 8013ef2:	4350      	muls	r0, r2
    z2 += z1;
 8013ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8013fa4 <jpeg_idct_16x8+0x428>)
 8013ef6:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8013efa:	4a2b      	ldr	r2, [pc, #172]	@ (8013fa8 <jpeg_idct_16x8+0x42c>)
 8013efc:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013f00:	eb09 040a 	add.w	r4, r9, sl
 8013f04:	4a29      	ldr	r2, [pc, #164]	@ (8013fac <jpeg_idct_16x8+0x430>)
 8013f06:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8013f08:	1932      	adds	r2, r6, r4
    tmp3 += z1 + z3;
 8013f0a:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8013f0c:	fb03 2909 	mla	r9, r3, r9, r2
    tmp3 += z1 + z3;
 8013f10:	f243 030b 	movw	r3, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013f14:	4a26      	ldr	r2, [pc, #152]	@ (8013fb0 <jpeg_idct_16x8+0x434>)
    tmp3 += z1 + z3;
 8013f16:	fb03 440a 	mla	r4, r3, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013f1a:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8013f1e:	f244 13b3 	movw	r3, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013f22:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8013f26:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8013f28:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8013f2a:	fb03 0008 	mla	r0, r3, r8, r0
    tmp2 += z1 + z2;
 8013f2e:	f246 2854 	movw	r8, #25172	@ 0x6254
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013f32:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 8013f34:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013f38:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013f3c:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013f40:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013f42:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013f46:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013f4a:	f8c1 40dc 	str.w	r4, [r1, #220]	@ 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013f4e:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013f52:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013f56:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013f58:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013f5a:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013f5c:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013f5e:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013f60:	f8c1 70bc 	str.w	r7, [r1, #188]	@ 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013f64:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013f66:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013f68:	63cc      	str	r4, [r1, #60]	@ 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013f6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8013f6e:	9b02      	ldr	r3, [sp, #8]
 8013f70:	444b      	add	r3, r9
 8013f72:	12db      	asrs	r3, r3, #11
 8013f74:	65cb      	str	r3, [r1, #92]	@ 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8013f76:	9b02      	ldr	r3, [sp, #8]
 8013f78:	eba3 0309 	sub.w	r3, r3, r9
 8013f7c:	12db      	asrs	r3, r3, #11
 8013f7e:	67cb      	str	r3, [r1, #124]	@ 0x7c
    wsptr++;
 8013f80:	e63b      	b.n	8013bfa <jpeg_idct_16x8+0x7e>
 8013f82:	bf00      	nop
 8013f84:	ffffecc2 	.word	0xffffecc2
 8013f88:	ffffb6d6 	.word	0xffffb6d6
 8013f8c:	ffffc542 	.word	0xffffc542
 8013f90:	ffffe77a 	.word	0xffffe77a
 8013f94:	ffffdbfa 	.word	0xffffdbfa
 8013f98:	ffffeaab 	.word	0xffffeaab
 8013f9c:	ffffd817 	.word	0xffffd817
 8013fa0:	ffffc4df 	.word	0xffffc4df
 8013fa4:	ffffc13b 	.word	0xffffc13b
 8013fa8:	fffff384 	.word	0xfffff384
 8013fac:	ffffe333 	.word	0xffffe333
 8013fb0:	ffffadfd 	.word	0xffffadfd

08013fb4 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb8:	b0c5      	sub	sp, #276	@ 0x114
 8013fba:	6d4e      	ldr	r6, [r1, #84]	@ 0x54
 8013fbc:	f1a2 0c02 	sub.w	ip, r2, #2
 8013fc0:	320e      	adds	r2, #14
 8013fc2:	9303      	str	r3, [sp, #12]
 8013fc4:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013fc6:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013fca:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 8013fce:	9205      	str	r2, [sp, #20]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013fd0:	3380      	adds	r3, #128	@ 0x80
 8013fd2:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013fd4:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013fd8:	f640 2012 	movw	r0, #2578	@ 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013fdc:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013fe0:	f642 09c6 	movw	r9, #10438	@ 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013fe4:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013fe8:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013fec:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013fee:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013ff2:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	@ 0x60
    tmp23 <<= CONST_BITS;
 8013ff6:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013ff8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013ffc:	9202      	str	r2, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ffe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014000:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014002:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8014006:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801400a:	f8d6 20c0 	ldr.w	r2, [r6, #192]	@ 0xc0
 801400e:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014010:	f641 4237 	movw	r2, #7223	@ 0x1c37
 8014014:	eba8 0701 	sub.w	r7, r8, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014018:	186b      	adds	r3, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801401a:	4357      	muls	r7, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801401c:	eba5 0208 	sub.w	r2, r5, r8
 8014020:	4342      	muls	r2, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014022:	9802      	ldr	r0, [sp, #8]
 8014024:	18bc      	adds	r4, r7, r2
 8014026:	4404      	add	r4, r0
 8014028:	48bd      	ldr	r0, [pc, #756]	@ (8014320 <jpeg_idct_14x7+0x36c>)
 801402a:	fb00 4408 	mla	r4, r0, r8, r4
    tmp10 = z1 + z3;
 801402e:	1868      	adds	r0, r5, r1
 8014030:	9004      	str	r0, [sp, #16]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014032:	9802      	ldr	r0, [sp, #8]
 8014034:	fb09 0003 	mla	r0, r9, r3, r0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014038:	f46f 731f 	mvn.w	r3, #636	@ 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801403c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	@ 0x50
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014040:	fb03 0101 	mla	r1, r3, r1, r0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014044:	4bb7      	ldr	r3, [pc, #732]	@ (8014324 <jpeg_idct_14x7+0x370>)
 8014046:	fb03 0005 	mla	r0, r3, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801404a:	6a35      	ldr	r5, [r6, #32]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801404c:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801404e:	6e37      	ldr	r7, [r6, #96]	@ 0x60
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014050:	4410      	add	r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014052:	f9bc 2010 	ldrsh.w	r2, [ip, #16]

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014056:	f641 53ef 	movw	r3, #7663	@ 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801405a:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801405c:	f9bc 5030 	ldrsh.w	r5, [ip, #48]	@ 0x30
 8014060:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014062:	f8d6 70a0 	ldr.w	r7, [r6, #160]	@ 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014066:	eb02 0b05 	add.w	fp, r2, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801406a:	fb07 f909 	mul.w	r9, r7, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801406e:	1b57      	subs	r7, r2, r5
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014070:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014074:	f240 5373 	movw	r3, #1395	@ 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014078:	444a      	add	r2, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801407a:	444d      	add	r5, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801407c:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801407e:	4baa      	ldr	r3, [pc, #680]	@ (8014328 <jpeg_idct_14x7+0x374>)
    tmp10 = tmp11 - tmp12;
 8014080:	ebab 0a07 	sub.w	sl, fp, r7
    tmp11 += tmp12;
 8014084:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014086:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801408a:	435d      	muls	r5, r3
    z2 -= tmp10;
 801408c:	9b04      	ldr	r3, [sp, #16]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801408e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014092:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp11 += tmp12;
 8014096:	442f      	add	r7, r5
    z2 -= tmp10;
 8014098:	eba8 0803 	sub.w	r8, r8, r3
    tmp10 += z2;
 801409c:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801409e:	fb0b 2209 	mla	r2, fp, r9, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80140a2:	9b02      	ldr	r3, [sp, #8]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80140a4:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80140a6:	eb01 050a 	add.w	r5, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80140aa:	eba1 010a 	sub.w	r1, r1, sl
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80140ae:	12ed      	asrs	r5, r5, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80140b0:	12c9      	asrs	r1, r1, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80140b2:	f84e 5c04 	str.w	r5, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80140b6:	f8ce 10bc 	str.w	r1, [lr, #188]	@ 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80140ba:	19e1      	adds	r1, r4, r7
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80140bc:	1be4      	subs	r4, r4, r7
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80140be:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80140c0:	12e4      	asrs	r4, r4, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80140c2:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80140c6:	1881      	adds	r1, r0, r2
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80140c8:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80140ca:	f642 5241 	movw	r2, #11585	@ 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80140ce:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80140d0:	f8ce 409c 	str.w	r4, [lr, #156]	@ 0x9c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80140d4:	fb02 3208 	mla	r2, r2, r8, r3
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80140d8:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80140da:	12c0      	asrs	r0, r0, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80140dc:	f8ce 103c 	str.w	r1, [lr, #60]	@ 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 80140e0:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80140e2:	4563      	cmp	r3, ip
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80140e4:	f8ce 007c 	str.w	r0, [lr, #124]	@ 0x7c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 80140e8:	f8ce 205c 	str.w	r2, [lr, #92]	@ 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80140ec:	f47f af72 	bne.w	8013fd4 <jpeg_idct_14x7+0x20>
 80140f0:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 80140f2:	ac0c      	add	r4, sp, #48	@ 0x30
 80140f4:	f1a3 0904 	sub.w	r9, r3, #4
 80140f8:	3318      	adds	r3, #24
 80140fa:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80140fc:	f859 3f04 	ldr.w	r3, [r9, #4]!
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014100:	f641 4537 	movw	r5, #7223	@ 0x1c37
    outptr = output_buf[ctr] + output_col;
 8014104:	9a4e      	ldr	r2, [sp, #312]	@ 0x138

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014106:	f241 38a3 	movw	r8, #5027	@ 0x13a3
    z4 = (INT32) wsptr[4];
 801410a:	6927      	ldr	r7, [r4, #16]
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801410c:	f46f 6aa2 	mvn.w	sl, #1296	@ 0x510
    outptr = output_buf[ctr] + output_col;
 8014110:	1899      	adds	r1, r3, r2
 8014112:	930a      	str	r3, [sp, #40]	@ 0x28
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014114:	f642 03c6 	movw	r3, #10438	@ 0x28c6
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014118:	6820      	ldr	r0, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801411a:	3420      	adds	r4, #32
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801411c:	fb03 f207 	mul.w	r2, r3, r7
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014120:	f640 2312 	movw	r3, #2578	@ 0xa12
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014124:	3010      	adds	r0, #16
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014126:	fb03 fe07 	mul.w	lr, r3, r7
    tmp10 = z1 + z2;
 801412a:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801412e:	436f      	muls	r7, r5
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014130:	4472      	add	r2, lr
    tmp11 = z1 + z3;
 8014132:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z1 = (INT32) wsptr[2];
 8014136:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 801413a:	ebc7 3540 	rsb	r5, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801413e:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014140:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014144:	0052      	lsls	r2, r2, #1
 8014146:	ebc2 3340 	rsb	r3, r2, r0, lsl #13
    z2 = (INT32) wsptr[6];
 801414a:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801414e:	eb0e 0002 	add.w	r0, lr, r2
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014152:	9302      	str	r3, [sp, #8]
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014154:	4b75      	ldr	r3, [pc, #468]	@ (801432c <jpeg_idct_14x7+0x378>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014156:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014158:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 801415c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014160:	fb03 0002 	mla	r0, r3, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014164:	f603 23e5 	addw	r3, r3, #2789	@ 0xae5
 8014168:	435a      	muls	r2, r3
    tmp20 = tmp10 + tmp13;
 801416a:	eb0c 0307 	add.w	r3, ip, r7
 801416e:	9303      	str	r3, [sp, #12]
    tmp26 = tmp10 - tmp13;
 8014170:	ebac 0307 	sub.w	r3, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014174:	fb08 220e 	mla	r2, r8, lr, r2
    z3 = (INT32) wsptr[5];
 8014178:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp26 = tmp10 - tmp13;
 801417c:	9304      	str	r3, [sp, #16]
    tmp21 = tmp11 + tmp14;
 801417e:	1833      	adds	r3, r6, r0
    z2 = (INT32) wsptr[3];
 8014180:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014184:	f640 6ef2 	movw	lr, #3826	@ 0xef2
    tmp21 = tmp11 + tmp14;
 8014188:	9305      	str	r3, [sp, #20]
    tmp25 = tmp11 - tmp14;
 801418a:	1a33      	subs	r3, r6, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801418c:	f642 20b7 	movw	r0, #10935	@ 0x2ab7
    tmp25 = tmp11 - tmp14;
 8014190:	9306      	str	r3, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8014192:	18ab      	adds	r3, r5, r2
 8014194:	9307      	str	r3, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8014196:	1aab      	subs	r3, r5, r2
    z1 = (INT32) wsptr[1];
 8014198:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801419c:	f242 6552 	movw	r5, #9810	@ 0x2652
    tmp24 = tmp12 - tmp15;
 80141a0:	9308      	str	r3, [sp, #32]
    tmp14 = z1 + z3;
 80141a2:	eb02 0b0c 	add.w	fp, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80141a6:	eb02 0608 	add.w	r6, r2, r8
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80141aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80141ae:	4346      	muls	r6, r0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80141b0:	f641 0014 	movw	r0, #6164	@ 0x1814
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80141b4:	fb05 f50b 	mul.w	r5, r5, fp
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80141b8:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80141bc:	1977      	adds	r7, r6, r5
 80141be:	eb07 3743 	add.w	r7, r7, r3, lsl #13
 80141c2:	4b5b      	ldr	r3, [pc, #364]	@ (8014330 <jpeg_idct_14x7+0x37c>)
 80141c4:	fb03 7702 	mla	r7, r3, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80141c8:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80141cc:	fb03 b002 	mla	r0, r3, r2, fp
    z1    -= z2;
 80141d0:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80141d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80141d8:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80141dc:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80141e0:	ebae 3e43 	sub.w	lr, lr, r3, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80141e4:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 80141e6:	eb00 030e 	add.w	r3, r0, lr
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80141ea:	eb08 000c 	add.w	r0, r8, ip
    tmp16 += tmp15;
 80141ee:	9309      	str	r3, [sp, #36]	@ 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80141f0:	fb0a f000 	mul.w	r0, sl, r0
 80141f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80141f8:	eba0 3043 	sub.w	r0, r0, r3, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80141fc:	4b4d      	ldr	r3, [pc, #308]	@ (8014334 <jpeg_idct_14x7+0x380>)
 80141fe:	fb03 0a08 	mla	sl, r3, r8, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8014202:	4b4d      	ldr	r3, [pc, #308]	@ (8014338 <jpeg_idct_14x7+0x384>)
 8014204:	fb03 000c 	mla	r0, r3, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8014208:	44b2      	add	sl, r6
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801420a:	f642 46f8 	movw	r6, #11512	@ 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801420e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8014212:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014214:	ebac 0508 	sub.w	r5, ip, r8
 8014218:	4375      	muls	r5, r6
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801421a:	eb05 3643 	add.w	r6, r5, r3, lsl #13
 801421e:	4b47      	ldr	r3, [pc, #284]	@ (801433c <jpeg_idct_14x7+0x388>)
 8014220:	fb03 660c 	mla	r6, r3, ip, r6
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014224:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014228:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801422a:	f241 5b99 	movw	fp, #5529	@ 0x1599
 801422e:	fb0b 5508 	mla	r5, fp, r8, r5
 8014232:	4475      	add	r5, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014234:	eb02 3e43 	add.w	lr, r2, r3, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014238:	9b03      	ldr	r3, [sp, #12]
 801423a:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
 801423c:	eb03 0c07 	add.w	ip, r3, r7
 8014240:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014242:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014246:	f813 c00c 	ldrb.w	ip, [r3, ip]
 801424a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801424c:	f803 c002 	strb.w	ip, [r3, r2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014250:	9b03      	ldr	r3, [sp, #12]
 8014252:	1bdf      	subs	r7, r3, r7
 8014254:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014256:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801425a:	5ddf      	ldrb	r7, [r3, r7]
 801425c:	734f      	strb	r7, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801425e:	9b05      	ldr	r3, [sp, #20]
 8014260:	eb03 070a 	add.w	r7, r3, sl
 8014264:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014266:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801426a:	5ddf      	ldrb	r7, [r3, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801426c:	9b05      	ldr	r3, [sp, #20]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801426e:	704f      	strb	r7, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014270:	eba3 070a 	sub.w	r7, r3, sl
 8014274:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014276:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801427a:	5ddf      	ldrb	r7, [r3, r7]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801427c:	9b07      	ldr	r3, [sp, #28]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801427e:	730f      	strb	r7, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014280:	181f      	adds	r7, r3, r0
 8014282:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014284:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014288:	5ddf      	ldrb	r7, [r3, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801428a:	9b07      	ldr	r3, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801428c:	708f      	strb	r7, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801428e:	1a18      	subs	r0, r3, r0
 8014290:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8014292:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014296:	5c18      	ldrb	r0, [r3, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014298:	9b02      	ldr	r3, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801429a:	72c8      	strb	r0, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801429c:	eb03 000e 	add.w	r0, r3, lr
 80142a0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142a2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80142a6:	5c18      	ldrb	r0, [r3, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80142a8:	9b02      	ldr	r3, [sp, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80142aa:	70c8      	strb	r0, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80142ac:	eba3 020e 	sub.w	r2, r3, lr
 80142b0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142b2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80142b6:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80142b8:	9b08      	ldr	r3, [sp, #32]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80142ba:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80142bc:	199a      	adds	r2, r3, r6
 80142be:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142c0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80142c4:	5c9a      	ldrb	r2, [r3, r2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80142c6:	9b08      	ldr	r3, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80142c8:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80142ca:	1b9a      	subs	r2, r3, r6
 80142cc:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142ce:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80142d2:	5c9a      	ldrb	r2, [r3, r2]
 80142d4:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80142d6:	9b06      	ldr	r3, [sp, #24]
 80142d8:	195a      	adds	r2, r3, r5
 80142da:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142dc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80142e0:	5c9a      	ldrb	r2, [r3, r2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80142e2:	9b06      	ldr	r3, [sp, #24]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80142e4:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80142e6:	1b5a      	subs	r2, r3, r5
 80142e8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142ea:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80142ee:	5c9a      	ldrb	r2, [r3, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80142f0:	9b04      	ldr	r3, [sp, #16]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80142f2:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80142f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142f6:	189a      	adds	r2, r3, r2
 80142f8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80142fa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80142fe:	5c9a      	ldrb	r2, [r3, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014300:	9b04      	ldr	r3, [sp, #16]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014302:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014306:	1a9a      	subs	r2, r3, r2
 8014308:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801430a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801430e:	5c9a      	ldrb	r2, [r3, r2]
  for (ctr = 0; ctr < 7; ctr++) {
 8014310:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014312:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8014314:	454b      	cmp	r3, r9
 8014316:	f47f aef1 	bne.w	80140fc <jpeg_idct_14x7+0x148>
  }
}
 801431a:	b045      	add	sp, #276	@ 0x114
 801431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014320:	ffffc515 	.word	0xffffc515
 8014324:	ffffb0f1 	.word	0xffffb0f1
 8014328:	ffffd3e1 	.word	0xffffd3e1
 801432c:	ffffc8fc 	.word	0xffffc8fc
 8014330:	ffffdbf0 	.word	0xffffdbf0
 8014334:	fffff26e 	.word	0xfffff26e
 8014338:	ffffb409 	.word	0xffffb409
 801433c:	ffffc9e6 	.word	0xffffc9e6

08014340 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014344:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8014348:	b0bb      	sub	sp, #236	@ 0xec
 801434a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801434c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801434e:	3080      	adds	r0, #128	@ 0x80
 8014350:	320e      	adds	r2, #14
 8014352:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014354:	af0a      	add	r7, sp, #40	@ 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014356:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014358:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801435a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801435e:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014362:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014366:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014368:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	@ 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801436c:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801436e:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014372:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014376:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8014378:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801437a:	f241 64a1 	movw	r4, #5793	@ 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801437e:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	@ 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014382:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014386:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	@ 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801438a:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 801438c:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 801438e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014392:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8014394:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014398:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801439a:	6a28      	ldr	r0, [r5, #32]
    tmp20 = tmp11 + tmp10;
 801439c:	eb04 0e02 	add.w	lr, r4, r2
    tmp22 = tmp11 - tmp10;
 80143a0:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80143a2:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 80143a6:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143a8:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 80143aa:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80143ae:	f8d5 00a0 	ldr.w	r0, [r5, #160]	@ 0xa0
 80143b2:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80143b6:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80143ba:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80143be:	eb02 0c08 	add.w	ip, r2, r8
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80143c2:	eba2 0209 	sub.w	r2, r2, r9
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80143c6:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80143ca:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80143ce:	eba2 0208 	sub.w	r2, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80143d2:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80143d6:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80143d8:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80143dc:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80143e0:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80143e4:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80143e8:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80143ec:	f8c7 e09c 	str.w	lr, [r7, #156]	@ 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 80143f0:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 80143f4:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80143f8:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 80143fc:	f8c7 e01c 	str.w	lr, [r7, #28]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8014400:	67fa      	str	r2, [r7, #124]	@ 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014402:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014406:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801440a:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801440c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801440e:	63fa      	str	r2, [r7, #60]	@ 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014410:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014412:	65fc      	str	r4, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014414:	42b2      	cmp	r2, r6
 8014416:	d1a0      	bne.n	801435a <jpeg_idct_12x6+0x1a>
 8014418:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801441c:	aa0a      	add	r2, sp, #40	@ 0x28
 801441e:	3314      	adds	r3, #20
 8014420:	9309      	str	r3, [sp, #36]	@ 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014422:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8014426:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8014428:	9944      	ldr	r1, [sp, #272]	@ 0x110
 801442a:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801442c:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8014430:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014432:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8014436:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 801443a:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801443c:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 8014440:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014444:	f242 7131 	movw	r1, #10033	@ 0x2731
    tmp12 = z1 - z2;
 8014448:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 801444c:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014450:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014452:	f642 31b6 	movw	r1, #11190	@ 0x2bb6
    tmp21 = z3 + tmp12;
 8014456:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801445a:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801445c:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 8014460:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8014462:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8014466:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 801446a:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801446e:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8014472:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8014476:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8014478:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801447c:	1b49      	subs	r1, r1, r5
    tmp10 = z1 + z3;
 801447e:	eb08 0b06 	add.w	fp, r8, r6
    tmp20 = tmp10 + tmp12;
 8014482:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8014484:	eba7 000c 	sub.w	r0, r7, ip
    z4 = (INT32) wsptr[7];
 8014488:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801448c:	f641 378d 	movw	r7, #7053	@ 0x1b8d
    tmp25 = tmp10 - tmp12;
 8014490:	9005      	str	r0, [sp, #20]
    tmp22 = tmp11 + tmp12;
 8014492:	1860      	adds	r0, r4, r1
    tmp23 = tmp11 - tmp12;
 8014494:	1a61      	subs	r1, r4, r1
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014496:	eb05 0c0b 	add.w	ip, r5, fp
    tmp22 = tmp11 + tmp12;
 801449a:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801449c:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp23 = tmp11 - tmp12;
 80144a0:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80144a2:	eb06 0905 	add.w	r9, r6, r5
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80144a6:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80144aa:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80144ae:	f640 075b 	movw	r7, #2139	@ 0x85b
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80144b2:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80144b6:	484b      	ldr	r0, [pc, #300]	@ (80145e4 <jpeg_idct_12x6+0x2a4>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80144b8:	fb07 cb0b 	mla	fp, r7, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80144bc:	f640 07f7 	movw	r7, #2295	@ 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80144c0:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80144c2:	4849      	ldr	r0, [pc, #292]	@ (80145e8 <jpeg_idct_12x6+0x2a8>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80144c4:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80144c8:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80144cc:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80144d0:	f6a0 50db 	subw	r0, r0, #3547	@ 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80144d4:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80144d8:	eb01 0709 	add.w	r7, r1, r9
 80144dc:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80144e0:	4842      	ldr	r0, [pc, #264]	@ (80145ec <jpeg_idct_12x6+0x2ac>)
 80144e2:	fb00 1108 	mla	r1, r0, r8, r1
 80144e6:	4842      	ldr	r0, [pc, #264]	@ (80145f0 <jpeg_idct_12x6+0x2b0>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80144e8:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80144ea:	f243 2bc6 	movw	fp, #12998	@ 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80144ee:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 80144f2:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80144f6:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 80144fa:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 80144fe:	1b86      	subs	r6, r0, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014500:	4461      	add	r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014502:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014506:	483b      	ldr	r0, [pc, #236]	@ (80145f4 <jpeg_idct_12x6+0x2b4>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014508:	eb05 0c06 	add.w	ip, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801450c:	444c      	add	r4, r9
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801450e:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014512:	f641 087e 	movw	r8, #6270	@ 0x187e
 8014516:	fb08 c805 	mla	r8, r8, r5, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801451a:	fb00 cc06 	mla	ip, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801451e:	9804      	ldr	r0, [sp, #16]
 8014520:	9e44      	ldr	r6, [sp, #272]	@ 0x110
 8014522:	eb00 050e 	add.w	r5, r0, lr
 8014526:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014528:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801452c:	5d45      	ldrb	r5, [r0, r5]
 801452e:	9808      	ldr	r0, [sp, #32]
 8014530:	5585      	strb	r5, [r0, r6]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014532:	9804      	ldr	r0, [sp, #16]
 8014534:	eba0 050e 	sub.w	r5, r0, lr
 8014538:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801453a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801453e:	5d45      	ldrb	r5, [r0, r5]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014540:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014542:	72dd      	strb	r5, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014544:	eb00 0508 	add.w	r5, r0, r8
 8014548:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801454a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801454e:	5d45      	ldrb	r5, [r0, r5]
 8014550:	705d      	strb	r5, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014552:	9802      	ldr	r0, [sp, #8]
 8014554:	eba0 0508 	sub.w	r5, r0, r8
 8014558:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801455a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801455e:	5d45      	ldrb	r5, [r0, r5]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014560:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014562:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014564:	19c5      	adds	r5, r0, r7
 8014566:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014568:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801456c:	5d45      	ldrb	r5, [r0, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801456e:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014570:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014572:	1bc5      	subs	r5, r0, r7
 8014574:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014576:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801457a:	5d45      	ldrb	r5, [r0, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801457c:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801457e:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014580:	1905      	adds	r5, r0, r4
 8014582:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014584:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014588:	5d45      	ldrb	r5, [r0, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801458a:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801458c:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801458e:	1b04      	subs	r4, r0, r4
 8014590:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8014592:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014596:	5d04      	ldrb	r4, [r0, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014598:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801459a:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801459c:	eb00 040c 	add.w	r4, r0, ip
 80145a0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80145a2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80145a6:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80145a8:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80145aa:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80145ac:	eba0 040c 	sub.w	r4, r0, ip
 80145b0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80145b2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80145b6:	5d04      	ldrb	r4, [r0, r4]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80145b8:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80145ba:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80145bc:	1844      	adds	r4, r0, r1
 80145be:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80145c0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80145c4:	5d04      	ldrb	r4, [r0, r4]
 80145c6:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80145c8:	9805      	ldr	r0, [sp, #20]
 80145ca:	1a41      	subs	r1, r0, r1
 80145cc:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80145ce:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80145d2:	5c41      	ldrb	r1, [r0, r1]
 80145d4:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 80145d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145d8:	4553      	cmp	r3, sl
 80145da:	f47f af22 	bne.w	8014422 <jpeg_idct_12x6+0xe2>
  }
}
 80145de:	b03b      	add	sp, #236	@ 0xec
 80145e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e4:	ffffeeaf 	.word	0xffffeeaf
 80145e8:	ffffde8b 	.word	0xffffde8b
 80145ec:	ffffea5c 	.word	0xffffea5c
 80145f0:	ffffc08c 	.word	0xffffc08c
 80145f4:	ffffc4df 	.word	0xffffc4df

080145f8 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80145f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80145fc:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8014600:	b0b1      	sub	sp, #196	@ 0xc4
 8014602:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8014604:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014606:	3080      	adds	r0, #128	@ 0x80
 8014608:	320e      	adds	r2, #14
 801460a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801460c:	af08      	add	r7, sp, #32
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801460e:	f641 1e4c 	movw	lr, #6476	@ 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014612:	f44f 6c35 	mov.w	ip, #2896	@ 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014616:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014618:	9202      	str	r2, [sp, #8]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801461a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801461e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014620:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014624:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	@ 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014628:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801462a:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
 801462c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014630:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8014632:	0352      	lsls	r2, r2, #13
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014634:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014636:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801463a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801463e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014642:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014646:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	@ 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801464a:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801464e:	6e28      	ldr	r0, [r5, #96]	@ 0x60
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014650:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014654:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014656:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801465a:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801465e:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014662:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8014666:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8014668:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801466c:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8014670:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014674:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8014678:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801467a:	fb00 f808 	mul.w	r8, r0, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801467e:	f241 0071 	movw	r0, #4209	@ 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8014682:	63fa      	str	r2, [r7, #60]	@ 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014684:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014688:	486e      	ldr	r0, [pc, #440]	@ (8014844 <jpeg_idct_10x5+0x24c>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801468a:	9a02      	ldr	r2, [sp, #8]
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 801468c:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8014690:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014694:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014698:	42b2      	cmp	r2, r6
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801469a:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 801469e:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80146a2:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80146a6:	f8c7 907c 	str.w	r9, [r7, #124]	@ 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80146aa:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80146ae:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80146b2:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80146b6:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80146ba:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80146be:	65fc      	str	r4, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80146c0:	d1ab      	bne.n	801461a <jpeg_idct_10x5+0x22>
 80146c2:	f1a3 0b04 	sub.w	fp, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 80146c6:	a908      	add	r1, sp, #32
 80146c8:	3310      	adds	r3, #16
 80146ca:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80146cc:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80146d0:	f641 209a 	movw	r0, #6810	@ 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80146d4:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80146d6:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 80146d8:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80146dc:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80146de:	f242 429d 	movw	r2, #9373	@ 0x249d
    outptr = output_buf[ctr] + output_col;
 80146e2:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80146e4:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80146e8:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80146ec:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80146f0:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80146f2:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80146f4:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80146f8:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80146fa:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 80146fe:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8014702:	006d      	lsls	r5, r5, #1
 8014704:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8014708:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801470c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801470e:	19eb      	adds	r3, r5, r7
 8014710:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014712:	f241 0071 	movw	r0, #4209	@ 0x1071
 8014716:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801471a:	484a      	ldr	r0, [pc, #296]	@ (8014844 <jpeg_idct_10x5+0x24c>)
 801471c:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8014720:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8014724:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8014726:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 801472a:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801472c:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 801472e:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014730:	f640 10e3 	movw	r0, #2531	@ 0x9e3
    tmp23 = tmp11 - tmp13;
 8014734:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8014736:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 801473a:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 801473e:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8014742:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014744:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014748:	f641 606f 	movw	r0, #7791	@ 0x1e6f
 801474c:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8014750:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8014754:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014758:	f642 40b3 	movw	r0, #11443	@ 0x2cb3
 801475c:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014760:	f240 7014 	movw	r0, #1812	@ 0x714
 8014764:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014768:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801476a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801476e:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014772:	f642 0853 	movw	r8, #10323	@ 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014776:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801477a:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801477c:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014780:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014784:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014788:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801478c:	f241 4a8c 	movw	sl, #5260	@ 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014790:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014792:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014796:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801479a:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801479c:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80147a0:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80147a4:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147a8:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80147aa:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147ac:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80147b0:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80147b2:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147b6:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80147b8:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80147bc:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147c0:	5d5d      	ldrb	r5, [r3, r5]
 80147c2:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80147c4:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80147c6:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147c8:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80147ca:	f813 500c 	ldrb.w	r5, [r3, ip]
 80147ce:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147d0:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147d4:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 80147d8:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80147dc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147e0:	5d5d      	ldrb	r5, [r3, r5]
 80147e2:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147e4:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147e6:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147e8:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147ea:	181d      	adds	r5, r3, r0
 80147ec:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80147ee:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80147f2:	5d5d      	ldrb	r5, [r3, r5]
 80147f4:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80147f6:	9b02      	ldr	r3, [sp, #8]
 80147f8:	1a1b      	subs	r3, r3, r0
 80147fa:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80147fc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014800:	5cc3      	ldrb	r3, [r0, r3]
 8014802:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014804:	9b04      	ldr	r3, [sp, #16]
 8014806:	4413      	add	r3, r2
			    & RANGE_MASK];
 8014808:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801480c:	5cc3      	ldrb	r3, [r0, r3]
 801480e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014810:	9b04      	ldr	r3, [sp, #16]
 8014812:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8014814:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014818:	5cc3      	ldrb	r3, [r0, r3]
 801481a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801481c:	9b03      	ldr	r3, [sp, #12]
 801481e:	4433      	add	r3, r6
			    & RANGE_MASK];
 8014820:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014824:	5cc3      	ldrb	r3, [r0, r3]
 8014826:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014828:	9b03      	ldr	r3, [sp, #12]
 801482a:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 801482c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014830:	5cc3      	ldrb	r3, [r0, r3]
 8014832:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8014834:	9b07      	ldr	r3, [sp, #28]
 8014836:	455b      	cmp	r3, fp
 8014838:	f47f af48 	bne.w	80146cc <jpeg_idct_10x5+0xd4>
  }
}
 801483c:	b031      	add	sp, #196	@ 0xc4
 801483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014842:	bf00      	nop
 8014844:	ffffba5c 	.word	0xffffba5c

08014848 <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801484c:	b0a5      	sub	sp, #148	@ 0x94
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801484e:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8014852:	6d4e      	ldr	r6, [r1, #84]	@ 0x54
 8014854:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014856:	ac04      	add	r4, sp, #16
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014858:	f100 0e80 	add.w	lr, r0, #128	@ 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801485c:	320e      	adds	r2, #14
 801485e:	3e04      	subs	r6, #4
 8014860:	4620      	mov	r0, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8014862:	f241 1851 	movw	r8, #4433	@ 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014866:	f641 0c7e 	movw	ip, #6270	@ 0x187e
 801486a:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801486c:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014870:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014872:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014876:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801487a:	434d      	muls	r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801487c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801487e:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014882:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014886:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	@ 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801488a:	4a65      	ldr	r2, [pc, #404]	@ (8014a20 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801488c:	eb05 0901 	add.w	r9, r5, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8014890:	1a6d      	subs	r5, r5, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014892:	6a31      	ldr	r1, [r6, #32]
 8014894:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014898:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801489a:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801489e:	eb0a 010b 	add.w	r1, sl, fp
 80148a2:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80148a6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80148aa:	fb0c 1a0a 	mla	sl, ip, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80148ae:	fb02 110b 	mla	r1, r2, fp, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80148b2:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80148b4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80148b8:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80148ba:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 80148bc:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80148c0:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80148c4:	eb01 0985 	add.w	r9, r1, r5, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 80148c8:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80148cc:	ebc1 0185 	rsb	r1, r1, r5, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80148d0:	f8c4 a05c 	str.w	sl, [r4, #92]	@ 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80148d4:	f8c4 901c 	str.w	r9, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80148d8:	63e1      	str	r1, [r4, #60]	@ 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80148da:	d1c7      	bne.n	801486c <jpeg_idct_8x4+0x24>
 80148dc:	f1a3 0804 	sub.w	r8, r3, #4
 80148e0:	330c      	adds	r3, #12
 80148e2:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80148e4:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80148e8:	f241 1551 	movw	r5, #4433	@ 0x1151
    outptr = output_buf[ctr] + output_col;
 80148ec:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 80148ee:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 80148f0:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 80148f4:	189c      	adds	r4, r3, r2
 80148f6:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 80148f8:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = (INT32) wsptr[4];
 80148fc:	f850 6c10 	ldr.w	r6, [r0, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014900:	18ca      	adds	r2, r1, r3
    tmp2 = (INT32) wsptr[3];
 8014902:	f850 cc14 	ldr.w	ip, [r0, #-20]
    tmp3 = (INT32) wsptr[1];
 8014906:	f850 9c1c 	ldr.w	r9, [r0, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801490a:	436a      	muls	r2, r5
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801490c:	f641 057e 	movw	r5, #6270	@ 0x187e
    tmp0 = (INT32) wsptr[7];
 8014910:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014914:	fb05 2101 	mla	r1, r5, r1, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014918:	4d41      	ldr	r5, [pc, #260]	@ (8014a20 <jpeg_idct_8x4+0x1d8>)
 801491a:	fb05 2203 	mla	r2, r5, r3, r2
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801491e:	f850 3c20 	ldr.w	r3, [r0, #-32]
 8014922:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8014924:	199d      	adds	r5, r3, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8014926:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8014928:	eb01 3645 	add.w	r6, r1, r5, lsl #13
    tmp13 = tmp0 - tmp2;
 801492c:	ebc1 3145 	rsb	r1, r1, r5, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014930:	f242 55a1 	movw	r5, #9633	@ 0x25a1
    tmp12 = tmp1 - tmp3;
 8014934:	ebc2 3b43 	rsb	fp, r2, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8014938:	9100      	str	r1, [sp, #0]
    tmp11 = tmp1 + tmp3;
 801493a:	eb02 3143 	add.w	r1, r2, r3, lsl #13
    z3 = tmp1 + tmp3;
 801493e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    tmp11 = tmp1 + tmp3;
 8014942:	9101      	str	r1, [sp, #4]
    z2 = tmp0 + tmp2;
 8014944:	eb07 010c 	add.w	r1, r7, ip
    z3 = tmp1 + tmp3;
 8014948:	eb03 0209 	add.w	r2, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801494c:	188b      	adds	r3, r1, r2
 801494e:	436b      	muls	r3, r5
    z2 += z1;
 8014950:	4d34      	ldr	r5, [pc, #208]	@ (8014a24 <jpeg_idct_8x4+0x1dc>)
 8014952:	fb05 3101 	mla	r1, r5, r1, r3
    z3 += z1;
 8014956:	4d34      	ldr	r5, [pc, #208]	@ (8014a28 <jpeg_idct_8x4+0x1e0>)
 8014958:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801495c:	eb07 0209 	add.w	r2, r7, r9
 8014960:	4d32      	ldr	r5, [pc, #200]	@ (8014a2c <jpeg_idct_8x4+0x1e4>)
 8014962:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8014964:	f640 158e 	movw	r5, #2446	@ 0x98e
 8014968:	eb01 0a02 	add.w	sl, r1, r2
    tmp3 += z1 + z3;
 801496c:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 801496e:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014972:	f850 5c0c 	ldr.w	r5, [r0, #-12]
    tmp3 += z1 + z3;
 8014976:	f243 0a0b 	movw	sl, #12299	@ 0x300b
 801497a:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801497e:	eb05 090c 	add.w	r9, r5, ip
 8014982:	4d2b      	ldr	r5, [pc, #172]	@ (8014a30 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8014984:	f244 1ab3 	movw	sl, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014988:	fb05 f909 	mul.w	r9, r5, r9
    tmp1 += z1 + z3;
 801498c:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8014990:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8014992:	4449      	add	r1, r9
 8014994:	f246 2954 	movw	r9, #25172	@ 0x6254
    tmp1 += z1 + z3;
 8014998:	fb0a 3a05 	mla	sl, sl, r5, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801499c:	9d02      	ldr	r5, [sp, #8]
    tmp2 += z1 + z2;
 801499e:	fb09 110c 	mla	r1, r9, ip, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80149a2:	eb06 0c02 	add.w	ip, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80149a6:	1ab6      	subs	r6, r6, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80149a8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
			    & RANGE_MASK];
 80149aa:	f3cc 4c89 	ubfx	ip, ip, #18, #10
			    & RANGE_MASK];
 80149ae:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80149b2:	f81e c00c 	ldrb.w	ip, [lr, ip]
 80149b6:	f805 c003 	strb.w	ip, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80149ba:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80149bc:	f81e 2006 	ldrb.w	r2, [lr, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80149c0:	1a5d      	subs	r5, r3, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80149c2:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80149c4:	185a      	adds	r2, r3, r1
			    & RANGE_MASK];
 80149c6:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80149ca:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80149ce:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80149d2:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80149d4:	f81e 2005 	ldrb.w	r2, [lr, r5]
 80149d8:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80149da:	eb0b 020a 	add.w	r2, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80149de:	ebab 0b0a 	sub.w	fp, fp, sl
			    & RANGE_MASK];
 80149e2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80149e6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80149ea:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80149ee:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80149f0:	f81e 300b 	ldrb.w	r3, [lr, fp]
 80149f4:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80149f6:	9b00      	ldr	r3, [sp, #0]
 80149f8:	443b      	add	r3, r7
			    & RANGE_MASK];
 80149fa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80149fe:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8014a02:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014a04:	9b00      	ldr	r3, [sp, #0]
 8014a06:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 8014a08:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014a0c:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8014a10:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014a12:	9b03      	ldr	r3, [sp, #12]
 8014a14:	4543      	cmp	r3, r8
 8014a16:	f47f af65 	bne.w	80148e4 <jpeg_idct_8x4+0x9c>
  }
}
 8014a1a:	b025      	add	sp, #148	@ 0x94
 8014a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a20:	ffffc4df 	.word	0xffffc4df
 8014a24:	ffffc13b 	.word	0xffffc13b
 8014a28:	fffff384 	.word	0xfffff384
 8014a2c:	ffffe333 	.word	0xffffe333
 8014a30:	ffffadfd 	.word	0xffffadfd

08014a34 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a38:	b095      	sub	sp, #84	@ 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a3a:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8014a3e:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8014a40:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014a44:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a46:	3080      	adds	r0, #128	@ 0x80
 8014a48:	f102 040a 	add.w	r4, r2, #10
 8014a4c:	f1a1 0c04 	sub.w	ip, r1, #4
 8014a50:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014a52:	f241 69a1 	movw	r9, #5793	@ 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014a56:	f242 7831 	movw	r8, #10033	@ 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a5a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a5c:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014a60:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a62:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a66:	f9be a010 	ldrsh.w	sl, [lr, #16]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014a6a:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a6c:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a70:	f8dc 7040 	ldr.w	r7, [ip, #64]	@ 0x40
 8014a74:	f9be 6020 	ldrsh.w	r6, [lr, #32]
    tmp0 <<= CONST_BITS;
 8014a78:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a7c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a80:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014a84:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a88:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014a8c:	fb09 f606 	mul.w	r6, r9, r6
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014a90:	fb08 fa0a 	mul.w	sl, r8, sl
    tmp10 = tmp0 + tmp12;
 8014a94:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8014a98:	eba1 0146 	sub.w	r1, r1, r6, lsl #1

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014a9c:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014aa0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8014aa4:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014aa8:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014aac:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8014ab0:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ab2:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ab6:	62ef      	str	r7, [r5, #44]	@ 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014ab8:	d1d0      	bne.n	8014a5c <jpeg_idct_6x3+0x28>
 8014aba:	f1a3 0e04 	sub.w	lr, r3, #4
 8014abe:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014ac2:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014ac6:	f241 60a1 	movw	r0, #5793	@ 0x16a1
    outptr = output_buf[ctr] + output_col;
 8014aca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8014acc:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014ace:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8014ad2:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8014ad4:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ad8:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014adc:	fb00 f401 	mul.w	r4, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014ae0:	f242 7031 	movw	r0, #10033	@ 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ae4:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8014ae8:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = tmp0 + tmp10;
 8014aec:	eb04 3143 	add.w	r1, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8014af0:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 8014af4:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014af8:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8014afc:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014b00:	f640 30b6 	movw	r0, #2998	@ 0xbb6
    tmp10 = tmp1 + tmp0;
 8014b04:	eb01 0604 	add.w	r6, r1, r4
    tmp12 = tmp1 - tmp0;
 8014b08:	eba1 0104 	sub.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8014b0c:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014b10:	eb04 0508 	add.w	r5, r4, r8
 8014b14:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014b18:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8014b1c:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8014b20:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014b24:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014b28:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014b2a:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8014b2e:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014b32:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014b36:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014b3a:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8014b3e:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014b42:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014b46:	f810 8008 	ldrb.w	r8, [r0, r8]
 8014b4a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8014b4c:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014b50:	9801      	ldr	r0, [sp, #4]
 8014b52:	5d86      	ldrb	r6, [r0, r6]
 8014b54:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014b56:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014b5a:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 8014b5e:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8014b62:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014b66:	5d86      	ldrb	r6, [r0, r6]
 8014b68:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014b6a:	5cc3      	ldrb	r3, [r0, r3]
 8014b6c:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014b6e:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014b72:	eba1 0105 	sub.w	r1, r1, r5
			    & RANGE_MASK];
 8014b76:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8014b7a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014b7e:	5cc3      	ldrb	r3, [r0, r3]
 8014b80:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014b82:	5c43      	ldrb	r3, [r0, r1]
 8014b84:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8014b86:	d19c      	bne.n	8014ac2 <jpeg_idct_6x3+0x8e>
  }
}
 8014b88:	b015      	add	sp, #84	@ 0x54
 8014b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014b90 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	b08b      	sub	sp, #44	@ 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014b96:	f8d0 514c 	ldr.w	r5, [r0, #332]	@ 0x14c
 8014b9a:	6d4e      	ldr	r6, [r1, #84]	@ 0x54
 8014b9c:	1e97      	subs	r7, r2, #2
 8014b9e:	f10d 0c08 	add.w	ip, sp, #8
 8014ba2:	3580      	adds	r5, #128	@ 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014ba4:	3e04      	subs	r6, #4
 8014ba6:	3206      	adds	r2, #6
 8014ba8:	4660      	mov	r0, ip
{
 8014baa:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bac:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
 8014bb0:	f856 4f04 	ldr.w	r4, [r6, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014bb4:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bb6:	fb04 f101 	mul.w	r1, r4, r1

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014bba:	6a33      	ldr	r3, [r6, #32]
 8014bbc:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8014bc0:	fb03 f404 	mul.w	r4, r3, r4

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8014bc4:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 8014bc8:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 8014bcc:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8014bd0:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014bd4:	d1ea      	bne.n	8014bac <jpeg_idct_4x2+0x1c>
 8014bd6:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014bd8:	f241 1a51 	movw	sl, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014bdc:	f641 097e 	movw	r9, #6270	@ 0x187e
 8014be0:	f1a3 0c04 	sub.w	ip, r3, #4
    tmp0 = wsptr[0] + (ONE << 2);
 8014be4:	6804      	ldr	r4, [r0, #0]
 8014be6:	46e0      	mov	r8, ip
    tmp2 = wsptr[2];
 8014be8:	6882      	ldr	r2, [r0, #8]
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8014bea:	3010      	adds	r0, #16
    z3 = wsptr[3];
 8014bec:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp0 = wsptr[0] + (ONE << 2);
 8014bf0:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8014bf2:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014bf6:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014bfa:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014bfc:	19ca      	adds	r2, r1, r7
    outptr = output_buf[ctr] + output_col;
 8014bfe:	f85c ef04 	ldr.w	lr, [ip, #4]!
 8014c02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014c04:	fb0a f202 	mul.w	r2, sl, r2
    outptr = output_buf[ctr] + output_col;
 8014c08:	eb0e 0603 	add.w	r6, lr, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014c0c:	4b12      	ldr	r3, [pc, #72]	@ (8014c58 <jpeg_idct_4x2+0xc8>)
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014c0e:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014c12:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014c16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014c18:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014c1c:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8014c20:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8014c24:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014c28:	5def      	ldrb	r7, [r5, r7]
 8014c2a:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014c2e:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8014c30:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014c32:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014c34:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014c38:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8014c3c:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8014c3e:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8014c42:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014c46:	5c69      	ldrb	r1, [r5, r1]
 8014c48:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014c4a:	5caa      	ldrb	r2, [r5, r2]
 8014c4c:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8014c4e:	d1c9      	bne.n	8014be4 <jpeg_idct_4x2+0x54>
  }
}
 8014c50:	b00b      	add	sp, #44	@ 0x2c
 8014c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c56:	bf00      	nop
 8014c58:	ffffc4df 	.word	0xffffc4df

08014c5c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014c5c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c5e:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8014c62:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8014c64:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c66:	3080      	adds	r0, #128	@ 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8014c68:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014c6c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8014c6e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8014c72:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8014c74:	437b      	muls	r3, r7
{
 8014c76:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8014c78:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8014c7a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8014c7c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8014c7e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8014c80:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8014c82:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8014c86:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8014c8a:	5c41      	ldrb	r1, [r0, r1]
 8014c8c:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8014c8e:	5cc3      	ldrb	r3, [r0, r3]
 8014c90:	7073      	strb	r3, [r6, #1]
}
 8014c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c94 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c98:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8014c9c:	f1a2 0b02 	sub.w	fp, r2, #2
 8014ca0:	930c      	str	r3, [sp, #48]	@ 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ca2:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 8014ca6:	3380      	adds	r3, #128	@ 0x80
 8014ca8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014caa:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8014cac:	f1a3 0804 	sub.w	r8, r3, #4
 8014cb0:	f102 030e 	add.w	r3, r2, #14
 8014cb4:	930d      	str	r3, [sp, #52]	@ 0x34
  wsptr = workspace;
 8014cb6:	ab0e      	add	r3, sp, #56	@ 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014cb8:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014cbc:	f241 1451 	movw	r4, #4433	@ 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014cc0:	f858 1f04 	ldr.w	r1, [r8, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014cc4:	f642 4563 	movw	r5, #11363	@ 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014cc8:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	@ 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014ccc:	f245 2e03 	movw	lr, #20995	@ 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014cd0:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014cd2:	f8d8 1080 	ldr.w	r1, [r8, #128]	@ 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014cd6:	f9bb c060 	ldrsh.w	ip, [fp, #96]	@ 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014cda:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014cdc:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8014cde:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014ce0:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014ce4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014ce8:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014cea:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014cec:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 8014cf0:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8014cf2:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8014cf4:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8014cf6:	eba2 0a01 	sub.w	sl, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014cfa:	f8d8 1040 	ldr.w	r1, [r8, #64]	@ 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014cfe:	4acf      	ldr	r2, [pc, #828]	@ (801503c <jpeg_idct_8x16+0x3a8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d00:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014d04:	f8d8 10c0 	ldr.w	r1, [r8, #192]	@ 0xc0
 8014d08:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014d0c:	f640 01d4 	movw	r1, #2260	@ 0x8d4
    z3 = z1 - z2;
 8014d10:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014d14:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014d16:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014d18:	f641 45cd 	movw	r5, #7373	@ 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014d1c:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014d20:	fb02 4409 	mla	r4, r2, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014d24:	f202 22ee 	addw	r2, r2, #750	@ 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014d28:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8014d2c:	f242 79e9 	movw	r9, #10217	@ 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014d30:	fb02 110c 	mla	r1, r2, ip, r1
    tmp20 = tmp10 + tmp0;
 8014d34:	eb07 020e 	add.w	r2, r7, lr
 8014d38:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8014d3a:	eba7 020e 	sub.w	r2, r7, lr
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014d3e:	f640 5723 	movw	r7, #3363	@ 0xd23
    tmp27 = tmp10 - tmp0;
 8014d42:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8014d44:	1972      	adds	r2, r6, r5
 8014d46:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8014d48:	1b72      	subs	r2, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d4a:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	@ 0x50
    tmp26 = tmp12 - tmp1;
 8014d4e:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8014d50:	eb0a 0204 	add.w	r2, sl, r4
 8014d54:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8014d56:	ebaa 0204 	sub.w	r2, sl, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d5a:	f8d8 40e0 	ldr.w	r4, [r8, #224]	@ 0xe0
    tmp25 = tmp13 - tmp2;
 8014d5e:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8014d60:	1842      	adds	r2, r0, r1
 8014d62:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8014d64:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d66:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = tmp11 - tmp3;
 8014d6a:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d6c:	f8d8 2020 	ldr.w	r2, [r8, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014d70:	f8d8 0060 	ldr.w	r0, [r8, #96]	@ 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d74:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014d76:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	@ 0x30
 8014d7a:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d7c:	f8d8 00a0 	ldr.w	r0, [r8, #160]	@ 0xa0
 8014d80:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d82:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	@ 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014d86:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d88:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014d8a:	f642 344e 	movw	r4, #11086	@ 0x2b4e
    tmp11 = z1 + z3;
 8014d8e:	eb01 0a05 	add.w	sl, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014d92:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014d94:	eb01 0e00 	add.w	lr, r1, r0
 8014d98:	f242 24fc 	movw	r4, #8956	@ 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8014d9c:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8014da0:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014da4:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8014da8:	f641 44b6 	movw	r4, #7350	@ 0x1cb6
 8014dac:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8014db0:	f241 5455 	movw	r4, #5461	@ 0x1555
 8014db4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014db8:	1a8c      	subs	r4, r1, r2
 8014dba:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014dbc:	eb06 0709 	add.w	r7, r6, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014dc0:	9409      	str	r4, [sp, #36]	@ 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014dc2:	4477      	add	r7, lr
 8014dc4:	4c9e      	ldr	r4, [pc, #632]	@ (8015040 <jpeg_idct_8x16+0x3ac>)
 8014dc6:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014dca:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014dcc:	940a      	str	r4, [sp, #40]	@ 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014dce:	eb0c 040a 	add.w	r4, ip, sl
 8014dd2:	443c      	add	r4, r7
 8014dd4:	4f9b      	ldr	r7, [pc, #620]	@ (8015044 <jpeg_idct_8x16+0x3b0>)
 8014dd6:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014dda:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014ddc:	4f9a      	ldr	r7, [pc, #616]	@ (8015048 <jpeg_idct_8x16+0x3b4>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014dde:	910b      	str	r1, [sp, #44]	@ 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014de0:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8014de4:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8014de6:	f240 214d 	movw	r1, #589	@ 0x24d
 8014dea:	fb01 4102 	mla	r1, r1, r2, r4
 8014dee:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014df0:	4996      	ldr	r1, [pc, #600]	@ (801504c <jpeg_idct_8x16+0x3b8>)
 8014df2:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014df6:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014df8:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014dfa:	f642 5909 	movw	r9, #11529	@ 0x2d09
 8014dfe:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014e02:	fb07 1905 	mla	r9, r7, r5, r1
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014e06:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014e08:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014e0a:	f643 7a1a 	movw	sl, #16154	@ 0x3f1a
 8014e0e:	fb0a 1102 	mla	r1, sl, r2, r1
    z2    += z4;
 8014e12:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014e14:	eb01 0a07 	add.w	sl, r1, r7
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014e18:	498d      	ldr	r1, [pc, #564]	@ (8015050 <jpeg_idct_8x16+0x3bc>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014e1a:	f242 2718 	movw	r7, #8728	@ 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014e1e:	4351      	muls	r1, r2
    tmp1  += z1;
 8014e20:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014e22:	fb07 1100 	mla	r1, r7, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014e26:	4f8b      	ldr	r7, [pc, #556]	@ (8015054 <jpeg_idct_8x16+0x3c0>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014e28:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014e2a:	f246 4e85 	movw	lr, #25733	@ 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014e2e:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014e30:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 8014e34:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014e36:	f46f 7a59 	mvn.w	sl, #868	@ 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014e3a:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014e3c:	eb05 0c00 	add.w	ip, r5, r0
 8014e40:	4457      	add	r7, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014e42:	1b40      	subs	r0, r0, r5
 8014e44:	f640 5523 	movw	r5, #3363	@ 0xd23
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014e48:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014e4c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014e4e:	4368      	muls	r0, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014e50:	9d01      	ldr	r5, [sp, #4]
    tmp2  += z2;
 8014e52:	4464      	add	r4, ip
    tmp3  += z2;
 8014e54:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014e56:	443d      	add	r5, r7
    tmp10 += z2;
 8014e58:	4486      	add	lr, r0
    tmp11 += z2;
 8014e5a:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014e5c:	12ed      	asrs	r5, r5, #11
 8014e5e:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8014e62:	9d01      	ldr	r5, [sp, #4]
 8014e64:	1bed      	subs	r5, r5, r7
 8014e66:	12ed      	asrs	r5, r5, #11
 8014e68:	f8c3 51dc 	str.w	r5, [r3, #476]	@ 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8014e6c:	9d03      	ldr	r5, [sp, #12]
 8014e6e:	4435      	add	r5, r6
 8014e70:	12ed      	asrs	r5, r5, #11
 8014e72:	61dd      	str	r5, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8014e74:	9d03      	ldr	r5, [sp, #12]
 8014e76:	1bad      	subs	r5, r5, r6
 8014e78:	12ed      	asrs	r5, r5, #11
 8014e7a:	f8c3 51bc 	str.w	r5, [r3, #444]	@ 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8014e7e:	9d05      	ldr	r5, [sp, #20]
 8014e80:	4425      	add	r5, r4
 8014e82:	12ed      	asrs	r5, r5, #11
 8014e84:	63dd      	str	r5, [r3, #60]	@ 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8014e86:	9d05      	ldr	r5, [sp, #20]
 8014e88:	1b2c      	subs	r4, r5, r4
 8014e8a:	12e4      	asrs	r4, r4, #11
 8014e8c:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8014e90:	9c07      	ldr	r4, [sp, #28]
 8014e92:	440c      	add	r4, r1
 8014e94:	12e4      	asrs	r4, r4, #11
 8014e96:	65dc      	str	r4, [r3, #92]	@ 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8014e98:	9c07      	ldr	r4, [sp, #28]
 8014e9a:	1a61      	subs	r1, r4, r1
 8014e9c:	12c9      	asrs	r1, r1, #11
 8014e9e:	f8c3 117c 	str.w	r1, [r3, #380]	@ 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8014ea2:	9908      	ldr	r1, [sp, #32]
 8014ea4:	4471      	add	r1, lr
 8014ea6:	12c9      	asrs	r1, r1, #11
 8014ea8:	67d9      	str	r1, [r3, #124]	@ 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8014eaa:	9908      	ldr	r1, [sp, #32]
 8014eac:	eba1 010e 	sub.w	r1, r1, lr
 8014eb0:	12c9      	asrs	r1, r1, #11
 8014eb2:	f8c3 115c 	str.w	r1, [r3, #348]	@ 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8014eb6:	9906      	ldr	r1, [sp, #24]
 8014eb8:	4401      	add	r1, r0
 8014eba:	12c9      	asrs	r1, r1, #11
 8014ebc:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014ec0:	9906      	ldr	r1, [sp, #24]
 8014ec2:	1a09      	subs	r1, r1, r0
 8014ec4:	12c9      	asrs	r1, r1, #11
 8014ec6:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014eca:	9904      	ldr	r1, [sp, #16]
 8014ecc:	4411      	add	r1, r2
 8014ece:	12c9      	asrs	r1, r1, #11
 8014ed0:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014ed4:	9904      	ldr	r1, [sp, #16]
 8014ed6:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014eda:	12d2      	asrs	r2, r2, #11
 8014edc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014ee0:	9a02      	ldr	r2, [sp, #8]
 8014ee2:	440a      	add	r2, r1
 8014ee4:	12d2      	asrs	r2, r2, #11
 8014ee6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014eea:	9a02      	ldr	r2, [sp, #8]
 8014eec:	1a52      	subs	r2, r2, r1
 8014eee:	12d2      	asrs	r2, r2, #11
 8014ef0:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014ef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ef6:	455a      	cmp	r2, fp
 8014ef8:	f47f aede 	bne.w	8014cb8 <jpeg_idct_8x16+0x24>
 8014efc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014efe:	a80e      	add	r0, sp, #56	@ 0x38
 8014f00:	f1a3 0904 	sub.w	r9, r3, #4
 8014f04:	333c      	adds	r3, #60	@ 0x3c
 8014f06:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014f08:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014f0c:	f241 1451 	movw	r4, #4433	@ 0x1151
    outptr = output_buf[ctr] + output_col;
 8014f10:	9a98      	ldr	r2, [sp, #608]	@ 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014f12:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8014f14:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8014f18:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8014f1a:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8014f1e:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014f20:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8014f22:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp0 = (INT32) wsptr[7];
 8014f26:	f850 bc04 	ldr.w	fp, [r0, #-4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014f2a:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014f2c:	f641 047e 	movw	r4, #6270	@ 0x187e
    tmp1 = (INT32) wsptr[5];
 8014f30:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014f34:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014f38:	4c47      	ldr	r4, [pc, #284]	@ (8015058 <jpeg_idct_8x16+0x3c4>)
    tmp2 = (INT32) wsptr[3];
 8014f3a:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014f3e:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f42:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp3 = (INT32) wsptr[1];
 8014f46:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f4a:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8014f4c:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8014f4e:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8014f50:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8014f54:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8014f58:	eb0b 040e 	add.w	r4, fp, lr
    tmp11 = tmp1 + tmp3;
 8014f5c:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8014f60:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8014f62:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8014f66:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8014f6a:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014f6c:	f242 53a1 	movw	r3, #9633	@ 0x25a1
 8014f70:	1862      	adds	r2, r4, r1
 8014f72:	435a      	muls	r2, r3
    z2 += z1;
 8014f74:	4b39      	ldr	r3, [pc, #228]	@ (801505c <jpeg_idct_8x16+0x3c8>)
 8014f76:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8014f7a:	4b39      	ldr	r3, [pc, #228]	@ (8015060 <jpeg_idct_8x16+0x3cc>)
 8014f7c:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014f80:	eb0b 010a 	add.w	r1, fp, sl
 8014f84:	4b37      	ldr	r3, [pc, #220]	@ (8015064 <jpeg_idct_8x16+0x3d0>)
 8014f86:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8014f88:	f640 138e 	movw	r3, #2446	@ 0x98e
 8014f8c:	eb04 0c01 	add.w	ip, r4, r1
    tmp3 += z1 + z3;
 8014f90:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8014f92:	fb03 cc0b 	mla	ip, r3, fp, ip
    tmp3 += z1 + z3;
 8014f96:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014f9a:	4b33      	ldr	r3, [pc, #204]	@ (8015068 <jpeg_idct_8x16+0x3d4>)
    tmp3 += z1 + z3;
 8014f9c:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014fa0:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014fa4:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014fa8:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014fac:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8014fae:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8014fb0:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8014fb2:	fb0b 2b08 	mla	fp, fp, r8, r2
    tmp2 += z1 + z2;
 8014fb6:	f246 2854 	movw	r8, #25172	@ 0x6254
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014fba:	9a98      	ldr	r2, [sp, #608]	@ 0x260
    tmp2 += z1 + z2;
 8014fbc:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014fc0:	eb07 0e01 	add.w	lr, r7, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014fc4:	1a7f      	subs	r7, r7, r1
			    & RANGE_MASK];
 8014fc6:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8014fca:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014fce:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8014fd2:	9b03      	ldr	r3, [sp, #12]
 8014fd4:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014fd8:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014fda:	9a00      	ldr	r2, [sp, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014fdc:	5dd9      	ldrb	r1, [r3, r7]
 8014fde:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014fe0:	1931      	adds	r1, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014fe2:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 8014fe4:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014fe8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014fec:	5c59      	ldrb	r1, [r3, r1]
 8014fee:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014ff0:	5d99      	ldrb	r1, [r3, r6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014ff2:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014ff4:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014ff6:	eb03 010b 	add.w	r1, r3, fp
 8014ffa:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014ffc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015000:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015002:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015004:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015006:	eba3 030b 	sub.w	r3, r3, fp
			    & RANGE_MASK];
 801500a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801500e:	5cd3      	ldrb	r3, [r2, r3]
 8015010:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8015012:	9b01      	ldr	r3, [sp, #4]
 8015014:	4463      	add	r3, ip
			    & RANGE_MASK];
 8015016:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801501a:	5cd3      	ldrb	r3, [r2, r3]
 801501c:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801501e:	9b01      	ldr	r3, [sp, #4]
 8015020:	eba3 030c 	sub.w	r3, r3, ip
			    & RANGE_MASK];
 8015024:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015028:	5cd3      	ldrb	r3, [r2, r3]
 801502a:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 801502c:	9b04      	ldr	r3, [sp, #16]
 801502e:	454b      	cmp	r3, r9
 8015030:	f47f af6a 	bne.w	8014f08 <jpeg_idct_8x16+0x274>
  }
}
 8015034:	f50d 7d0f 	add.w	sp, sp, #572	@ 0x23c
 8015038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503c:	ffffecc2 	.word	0xffffecc2
 8015040:	ffffb6d6 	.word	0xffffb6d6
 8015044:	ffffc542 	.word	0xffffc542
 8015048:	ffffe77a 	.word	0xffffe77a
 801504c:	ffffdbfa 	.word	0xffffdbfa
 8015050:	ffffeaab 	.word	0xffffeaab
 8015054:	ffffd817 	.word	0xffffd817
 8015058:	ffffc4df 	.word	0xffffc4df
 801505c:	ffffc13b 	.word	0xffffc13b
 8015060:	fffff384 	.word	0xfffff384
 8015064:	ffffe333 	.word	0xffffe333
 8015068:	ffffadfd 	.word	0xffffadfd

0801506c <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015070:	b0ef      	sub	sp, #444	@ 0x1bc
 8015072:	f1a2 0e02 	sub.w	lr, r2, #2
 8015076:	9309      	str	r3, [sp, #36]	@ 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015078:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 801507c:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 801507e:	3380      	adds	r3, #128	@ 0x80
 8015080:	3804      	subs	r0, #4
 8015082:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015084:	f102 030c 	add.w	r3, r2, #12
 8015088:	930b      	str	r3, [sp, #44]	@ 0x2c
  wsptr = workspace;
 801508a:	ab0c      	add	r3, sp, #48	@ 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801508c:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8015090:	f241 38a3 	movw	r8, #5027	@ 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015094:	f850 1f04 	ldr.w	r1, [r0, #4]!
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8015098:	f46f 6aa2 	mvn.w	sl, #1296	@ 0x510
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801509c:	f9be 4040 	ldrsh.w	r4, [lr, #64]	@ 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80150a0:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80150a2:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80150a4:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 80150a8:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80150aa:	f642 01c6 	movw	r1, #10438	@ 0x28c6
    z1 <<= CONST_BITS;
 80150ae:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80150b0:	fb01 f704 	mul.w	r7, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80150b4:	f640 2112 	movw	r1, #2578	@ 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80150b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80150bc:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80150c0:	f641 4137 	movw	r1, #7223	@ 0x1c37
    tmp10 = z1 + z2;
 80150c4:	19d6      	adds	r6, r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80150c6:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80150c8:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 80150ca:	eb02 050c 	add.w	r5, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80150ce:	f9be c020 	ldrsh.w	ip, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80150d2:	1b3f      	subs	r7, r7, r4
    tmp12 = z1 - z4;
 80150d4:	eba2 0904 	sub.w	r9, r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80150d8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	@ 0xc0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80150dc:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80150e0:	f242 3762 	movw	r7, #9058	@ 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80150e4:	49b4      	ldr	r1, [pc, #720]	@ (80153b8 <jpeg_idct_7x14+0x34c>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80150e6:	920a      	str	r2, [sp, #40]	@ 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80150e8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80150ea:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80150ee:	f9be 2060 	ldrsh.w	r2, [lr, #96]	@ 0x60
 80150f2:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80150f4:	eb0c 0402 	add.w	r4, ip, r2
 80150f8:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80150fa:	f640 07bd 	movw	r7, #2237	@ 0x8bd
 80150fe:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8015102:	fb01 4402 	mla	r4, r1, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8015106:	f601 21e5 	addw	r1, r1, #2789	@ 0xae5
 801510a:	434a      	muls	r2, r1
    tmp20 = tmp10 + tmp13;
 801510c:	19f1      	adds	r1, r6, r7
 801510e:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8015110:	1bf1      	subs	r1, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8015112:	fb08 220c 	mla	r2, r8, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015116:	f9be 7030 	ldrsh.w	r7, [lr, #48]	@ 0x30
    tmp26 = tmp10 - tmp13;
 801511a:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801511c:	1929      	adds	r1, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801511e:	f9be 6050 	ldrsh.w	r6, [lr, #80]	@ 0x50
    tmp21 = tmp11 + tmp14;
 8015122:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8015124:	1b29      	subs	r1, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015126:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801512a:	f242 6552 	movw	r5, #9810	@ 0x2652
    tmp25 = tmp11 - tmp14;
 801512e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8015130:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8015134:	eba9 0202 	sub.w	r2, r9, r2
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015138:	f640 69f2 	movw	r9, #3826	@ 0xef2
    tmp22 = tmp12 + tmp15;
 801513c:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 801513e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015140:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015142:	f8d0 10e0 	ldr.w	r1, [r0, #224]	@ 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015146:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015148:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 801514a:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801514c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8015150:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015152:	f9be 2070 	ldrsh.w	r2, [lr, #112]	@ 0x70
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015156:	eb04 0c07 	add.w	ip, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801515a:	434a      	muls	r2, r1
    tmp14 = z1 + z3;
 801515c:	eb04 0b06 	add.w	fp, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015160:	f642 21b7 	movw	r1, #10935	@ 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8015164:	fb05 f50b 	mul.w	r5, r5, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015168:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801516c:	4993      	ldr	r1, [pc, #588]	@ (80153bc <jpeg_idct_7x14+0x350>)
 801516e:	eb0c 0805 	add.w	r8, ip, r5
 8015172:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8015176:	fb01 8804 	mla	r8, r1, r4, r8
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801517a:	f641 0114 	movw	r1, #6164	@ 0x1814
 801517e:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8015182:	498f      	ldr	r1, [pc, #572]	@ (80153c0 <jpeg_idct_7x14+0x354>)
 8015184:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8015188:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801518a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 801518e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015190:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8015194:	4c8b      	ldr	r4, [pc, #556]	@ (80153c4 <jpeg_idct_7x14+0x358>)
    tmp16 += tmp15;
 8015196:	4449      	add	r1, r9
 8015198:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801519a:	19b9      	adds	r1, r7, r6
 801519c:	fb0a f101 	mul.w	r1, sl, r1
 80151a0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80151a4:	fb04 1a07 	mla	sl, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80151a8:	4c87      	ldr	r4, [pc, #540]	@ (80153c8 <jpeg_idct_7x14+0x35c>)
 80151aa:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80151ae:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80151b0:	f642 4cf8 	movw	ip, #11512	@ 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80151b4:	4c85      	ldr	r4, [pc, #532]	@ (80153cc <jpeg_idct_7x14+0x360>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80151b6:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80151b8:	1bf5      	subs	r5, r6, r7
 80151ba:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80151be:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 80151c2:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 80151c6:	9c07      	ldr	r4, [sp, #28]
 80151c8:	4422      	add	r2, r4

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80151ca:	9c01      	ldr	r4, [sp, #4]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80151cc:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80151ce:	f241 5b99 	movw	fp, #5529	@ 0x1599
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80151d2:	4444      	add	r4, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 80151d4:	1b92      	subs	r2, r2, r6
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80151d6:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80151da:	12e4      	asrs	r4, r4, #11
    tmp13 = (z1 - z3) << PASS1_BITS;
 80151dc:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80151de:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80151e0:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80151e4:	9c01      	ldr	r4, [sp, #4]
 80151e6:	eba4 0408 	sub.w	r4, r4, r8
 80151ea:	12e4      	asrs	r4, r4, #11
 80151ec:	f8c3 4168 	str.w	r4, [r3, #360]	@ 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80151f0:	9c03      	ldr	r4, [sp, #12]
 80151f2:	4454      	add	r4, sl
 80151f4:	12e4      	asrs	r4, r4, #11
 80151f6:	619c      	str	r4, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80151f8:	9c03      	ldr	r4, [sp, #12]
 80151fa:	eba4 040a 	sub.w	r4, r4, sl
 80151fe:	12e4      	asrs	r4, r4, #11
 8015200:	f8c3 414c 	str.w	r4, [r3, #332]	@ 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015204:	9c05      	ldr	r4, [sp, #20]
 8015206:	440c      	add	r4, r1
 8015208:	12e4      	asrs	r4, r4, #11
 801520a:	635c      	str	r4, [r3, #52]	@ 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801520c:	9c05      	ldr	r4, [sp, #20]
 801520e:	1a61      	subs	r1, r4, r1
 8015210:	12c9      	asrs	r1, r1, #11
 8015212:	f8c3 1130 	str.w	r1, [r3, #304]	@ 0x130
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8015216:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015218:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 801521c:	6519      	str	r1, [r3, #80]	@ 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801521e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015220:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015224:	9908      	ldr	r1, [sp, #32]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8015226:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801522a:	9a06      	ldr	r2, [sp, #24]
 801522c:	4462      	add	r2, ip
 801522e:	12d2      	asrs	r2, r2, #11
 8015230:	66da      	str	r2, [r3, #108]	@ 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015232:	9a06      	ldr	r2, [sp, #24]
 8015234:	eba2 020c 	sub.w	r2, r2, ip
 8015238:	12d2      	asrs	r2, r2, #11
 801523a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801523e:	9a04      	ldr	r2, [sp, #16]
 8015240:	442a      	add	r2, r5
 8015242:	12d2      	asrs	r2, r2, #11
 8015244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015248:	9a04      	ldr	r2, [sp, #16]
 801524a:	1b52      	subs	r2, r2, r5
 801524c:	12d2      	asrs	r2, r2, #11
 801524e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015252:	9a02      	ldr	r2, [sp, #8]
 8015254:	440a      	add	r2, r1
 8015256:	12d2      	asrs	r2, r2, #11
 8015258:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801525c:	9a02      	ldr	r2, [sp, #8]
 801525e:	1a52      	subs	r2, r2, r1
 8015260:	12d2      	asrs	r2, r2, #11
 8015262:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015266:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015268:	4572      	cmp	r2, lr
 801526a:	f47f af0f 	bne.w	801508c <jpeg_idct_7x14+0x20>
 801526e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8015270:	ac0c      	add	r4, sp, #48	@ 0x30
 8015272:	f1a3 0904 	sub.w	r9, r3, #4
 8015276:	3334      	adds	r3, #52	@ 0x34
 8015278:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801527a:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801527e:	341c      	adds	r4, #28
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015280:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 8015284:	9a78      	ldr	r2, [sp, #480]	@ 0x1e0
 8015286:	9303      	str	r3, [sp, #12]
 8015288:	189e      	adds	r6, r3, r2
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801528a:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 801528e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015292:	9301      	str	r3, [sp, #4]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8015294:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 8015298:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801529c:	eba3 0c01 	sub.w	ip, r3, r1
 80152a0:	f641 4337 	movw	r3, #7223	@ 0x1c37
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80152a4:	4f4a      	ldr	r7, [pc, #296]	@ (80153d0 <jpeg_idct_7x14+0x364>)
    tmp10 = z1 + z3;
 80152a6:	eb05 0801 	add.w	r8, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80152aa:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80152ae:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 80152b2:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80152b6:	1aea      	subs	r2, r5, r3
 80152b8:	f640 2312 	movw	r3, #2578	@ 0xa12
    z3 = (INT32) wsptr[5];
 80152bc:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80152c0:	435a      	muls	r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	eb0c 0002 	add.w	r0, ip, r2
 80152c8:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 80152cc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80152d0:	fb07 0003 	mla	r0, r7, r3, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80152d4:	f642 03c6 	movw	r3, #10438	@ 0x28c6
 80152d8:	9f01      	ldr	r7, [sp, #4]
 80152da:	fb03 f308 	mul.w	r3, r3, r8
 80152de:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80152e2:	f46f 771f 	mvn.w	r7, #636	@ 0x27c
 80152e6:	fb07 3101 	mla	r1, r7, r1, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80152ea:	4f3a      	ldr	r7, [pc, #232]	@ (80153d4 <jpeg_idct_7x14+0x368>)
 80152ec:	fb07 3305 	mla	r3, r7, r5, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80152f0:	f240 5773 	movw	r7, #1395	@ 0x573
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80152f4:	4461      	add	r1, ip
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80152f6:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 80152f8:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80152fc:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80152fe:	eb02 0b0a 	add.w	fp, r2, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8015302:	eba2 050a 	sub.w	r5, r2, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8015306:	f641 53ef 	movw	r3, #7663	@ 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801530a:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801530c:	44f2      	add	sl, lr
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801530e:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015312:	9b78      	ldr	r3, [sp, #480]	@ 0x1e0
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8015314:	437d      	muls	r5, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8015316:	4f30      	ldr	r7, [pc, #192]	@ (80153d8 <jpeg_idct_7x14+0x36c>)
    tmp10 = tmp11 - tmp12;
 8015318:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 801531c:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801531e:	f241 3ba3 	movw	fp, #5027	@ 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8015322:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015326:	9f00      	ldr	r7, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015328:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801532c:	f643 3bde 	movw	fp, #15326	@ 0x3bde
    tmp11 += tmp12;
 8015330:	4455      	add	r5, sl
    tmp10 += z2;
 8015332:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8015334:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015338:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801533c:	eba1 010c 	sub.w	r1, r1, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8015340:	4452      	add	r2, sl
			    & RANGE_MASK];
 8015342:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8015346:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801534a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801534e:	9f03      	ldr	r7, [sp, #12]
 8015350:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015354:	9b00      	ldr	r3, [sp, #0]
 8015356:	5c59      	ldrb	r1, [r3, r1]
 8015358:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801535a:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801535c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 801535e:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8015362:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015366:	5c59      	ldrb	r1, [r3, r1]
 8015368:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801536a:	5c19      	ldrb	r1, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801536c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801536e:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015370:	1899      	adds	r1, r3, r2
 8015372:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015374:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015378:	5c59      	ldrb	r1, [r3, r1]
 801537a:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801537c:	9b02      	ldr	r3, [sp, #8]
 801537e:	1a9b      	subs	r3, r3, r2
 8015380:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 8015382:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015386:	5cd3      	ldrb	r3, [r2, r3]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8015388:	f642 5241 	movw	r2, #11585	@ 0x2d41
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801538c:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 801538e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8015392:	eba3 0308 	sub.w	r3, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8015396:	4353      	muls	r3, r2
 8015398:	9a01      	ldr	r2, [sp, #4]
 801539a:	eb03 3342 	add.w	r3, r3, r2, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801539e:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 80153a0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80153a4:	5cd3      	ldrb	r3, [r2, r3]
 80153a6:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 80153a8:	9b04      	ldr	r3, [sp, #16]
 80153aa:	454b      	cmp	r3, r9
 80153ac:	f47f af65 	bne.w	801527a <jpeg_idct_7x14+0x20e>
  }
}
 80153b0:	b06f      	add	sp, #444	@ 0x1bc
 80153b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153b6:	bf00      	nop
 80153b8:	ffffc8fc 	.word	0xffffc8fc
 80153bc:	ffffdbf0 	.word	0xffffdbf0
 80153c0:	ffffde0b 	.word	0xffffde0b
 80153c4:	fffff26e 	.word	0xfffff26e
 80153c8:	ffffb409 	.word	0xffffb409
 80153cc:	ffffc9e6 	.word	0xffffc9e6
 80153d0:	ffffc515 	.word	0xffffc515
 80153d4:	ffffb0f1 	.word	0xffffb0f1
 80153d8:	ffffd3e1 	.word	0xffffd3e1

080153dc <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80153dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e0:	b0d3      	sub	sp, #332	@ 0x14c
 80153e2:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80153e4:	f1a2 0902 	sub.w	r9, r2, #2
 80153e8:	9308      	str	r3, [sp, #32]
 80153ea:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80153ec:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80153f0:	3380      	adds	r3, #128	@ 0x80
 80153f2:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80153f4:	f102 030a 	add.w	r3, r2, #10
 80153f8:	9309      	str	r3, [sp, #36]	@ 0x24
  wsptr = workspace;
 80153fa:	ab0a      	add	r3, sp, #40	@ 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80153fc:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8015400:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015402:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015406:	f9b9 4060 	ldrsh.w	r4, [r9, #96]	@ 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801540a:	f8d1 0080 	ldr.w	r0, [r1, #128]	@ 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801540e:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015410:	f9b9 2040 	ldrsh.w	r2, [r9, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015414:	f8d1 50c0 	ldr.w	r5, [r1, #192]	@ 0xc0
    z3 <<= CONST_BITS;
 8015418:	037f      	lsls	r7, r7, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801541a:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801541c:	f242 7031 	movw	r0, #10033	@ 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015420:	f9b9 6020 	ldrsh.w	r6, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015424:	436c      	muls	r4, r5
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8015426:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015428:	6c08      	ldr	r0, [r1, #64]	@ 0x40
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801542a:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
    z2 <<= CONST_BITS;
 801542e:	0364      	lsls	r4, r4, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015430:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8015432:	eb07 0c02 	add.w	ip, r7, r2
    tmp11 = z3 - z4;
 8015436:	eba7 0e02 	sub.w	lr, r7, r2

    tmp12 = z1 - z2;
 801543a:	ebc4 3546 	rsb	r5, r4, r6, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801543e:	f642 32b6 	movw	r2, #11190	@ 0x2bb6
 8015442:	fb02 f006 	mul.w	r0, r2, r6

    tmp21 = z3 + tmp12;
 8015446:	197a      	adds	r2, r7, r5
 8015448:	9201      	str	r2, [sp, #4]
    tmp24 = z3 - tmp12;
 801544a:	1b7a      	subs	r2, r7, r5

    tmp12 = z4 + z2;
 801544c:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 801544e:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 8015452:	9202      	str	r2, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8015454:	f641 368d 	movw	r6, #7053	@ 0x1b8d
    tmp20 = tmp10 + tmp12;
 8015458:	eb0c 0205 	add.w	r2, ip, r5
    tmp12 = z4 - z1 - z2;
 801545c:	1b00      	subs	r0, r0, r4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801545e:	4f87      	ldr	r7, [pc, #540]	@ (801567c <jpeg_idct_6x12+0x2a0>)
    tmp20 = tmp10 + tmp12;
 8015460:	9203      	str	r2, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8015462:	ebac 0205 	sub.w	r2, ip, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015466:	f9b9 c010 	ldrsh.w	ip, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801546a:	9204      	str	r2, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801546c:	eb0e 0200 	add.w	r2, lr, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015470:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	@ 0x50
    tmp22 = tmp11 + tmp12;
 8015474:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8015476:	ebae 0200 	sub.w	r2, lr, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801547a:	f9b9 e030 	ldrsh.w	lr, [r9, #48]	@ 0x30
    tmp23 = tmp11 - tmp12;
 801547e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015480:	6a0a      	ldr	r2, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015482:	f8d1 00e0 	ldr.w	r0, [r1, #224]	@ 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015486:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801548a:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
 801548c:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015490:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8015494:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015496:	f9b9 2070 	ldrsh.w	r2, [r9, #112]	@ 0x70
    tmp10 = z1 + z3;
 801549a:	eb0c 0b05 	add.w	fp, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801549e:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80154a0:	f642 10cf 	movw	r0, #10703	@ 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80154a4:	eb02 080b 	add.w	r8, r2, fp
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80154a8:	fb00 f40e 	mul.w	r4, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80154ac:	4874      	ldr	r0, [pc, #464]	@ (8015680 <jpeg_idct_6x12+0x2a4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80154ae:	fb06 f808 	mul.w	r8, r6, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80154b2:	f640 065b 	movw	r6, #2139	@ 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80154b6:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80154ba:	fb06 8b0b 	mla	fp, r6, fp, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80154be:	f640 06f7 	movw	r6, #2295	@ 0x8f7
 80154c2:	eb04 0a0b 	add.w	sl, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80154c6:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80154ca:	fb06 a60c 	mla	r6, r6, ip, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80154ce:	eb05 0a02 	add.w	sl, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80154d2:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80154d4:	4e6b      	ldr	r6, [pc, #428]	@ (8015684 <jpeg_idct_6x12+0x2a8>)
 80154d6:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80154da:	eb00 060a 	add.w	r6, r0, sl
 80154de:	fb07 6605 	mla	r6, r7, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80154e2:	4f69      	ldr	r7, [pc, #420]	@ (8015688 <jpeg_idct_6x12+0x2ac>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80154e4:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80154e8:	f241 1e51 	movw	lr, #4433	@ 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80154ec:	445e      	add	r6, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80154ee:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80154f2:	f243 2bc6 	movw	fp, #12998	@ 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80154f6:	4f65      	ldr	r7, [pc, #404]	@ (801568c <jpeg_idct_6x12+0x2b0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80154f8:	fb0b 4402 	mla	r4, fp, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80154fc:	fb07 0002 	mla	r0, r7, r2, r0
    z1 -= z4;
 8015500:	ebac 0202 	sub.w	r2, ip, r2
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8015504:	4454      	add	r4, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8015506:	eb02 0c05 	add.w	ip, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801550a:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801550c:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8015510:	f641 0e7e 	movw	lr, #6270	@ 0x187e
 8015514:	fb0e ce02 	mla	lr, lr, r2, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8015518:	4a5d      	ldr	r2, [pc, #372]	@ (8015690 <jpeg_idct_6x12+0x2b4>)
 801551a:	fb02 cc05 	mla	ip, r2, r5, ip

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801551e:	9d03      	ldr	r5, [sp, #12]
 8015520:	9a07      	ldr	r2, [sp, #28]
 8015522:	442a      	add	r2, r5
 8015524:	12d2      	asrs	r2, r2, #11
 8015526:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801552a:	9a07      	ldr	r2, [sp, #28]
 801552c:	1aaf      	subs	r7, r5, r2
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801552e:	9a01      	ldr	r2, [sp, #4]
 8015530:	4472      	add	r2, lr
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015532:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015534:	12d2      	asrs	r2, r2, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015536:	f8c3 7104 	str.w	r7, [r3, #260]	@ 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801553a:	615a      	str	r2, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801553c:	9a01      	ldr	r2, [sp, #4]
 801553e:	eba2 020e 	sub.w	r2, r2, lr
 8015542:	12d2      	asrs	r2, r2, #11
 8015544:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015548:	9a05      	ldr	r2, [sp, #20]
 801554a:	4432      	add	r2, r6
 801554c:	12d2      	asrs	r2, r2, #11
 801554e:	62da      	str	r2, [r3, #44]	@ 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015550:	9a05      	ldr	r2, [sp, #20]
 8015552:	1b92      	subs	r2, r2, r6
 8015554:	12d2      	asrs	r2, r2, #11
 8015556:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801555a:	9a06      	ldr	r2, [sp, #24]
 801555c:	4422      	add	r2, r4
 801555e:	12d2      	asrs	r2, r2, #11
 8015560:	645a      	str	r2, [r3, #68]	@ 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015562:	9a06      	ldr	r2, [sp, #24]
 8015564:	1b12      	subs	r2, r2, r4
 8015566:	12d2      	asrs	r2, r2, #11
 8015568:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801556c:	9a02      	ldr	r2, [sp, #8]
 801556e:	4462      	add	r2, ip
 8015570:	12d2      	asrs	r2, r2, #11
 8015572:	65da      	str	r2, [r3, #92]	@ 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015574:	9a02      	ldr	r2, [sp, #8]
 8015576:	eba2 020c 	sub.w	r2, r2, ip
 801557a:	12d2      	asrs	r2, r2, #11
 801557c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015580:	9a04      	ldr	r2, [sp, #16]
 8015582:	4402      	add	r2, r0
 8015584:	12d2      	asrs	r2, r2, #11
 8015586:	675a      	str	r2, [r3, #116]	@ 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015588:	9a04      	ldr	r2, [sp, #16]
 801558a:	1a12      	subs	r2, r2, r0
 801558c:	12d2      	asrs	r2, r2, #11
 801558e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8015592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015594:	454a      	cmp	r2, r9
 8015596:	f47f af31 	bne.w	80153fc <jpeg_idct_6x12+0x20>
 801559a:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 801559c:	a90a      	add	r1, sp, #40	@ 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801559e:	f241 6ba1 	movw	fp, #5793	@ 0x16a1
 80155a2:	f1a3 0c04 	sub.w	ip, r3, #4
 80155a6:	f103 082c 	add.w	r8, r3, #44	@ 0x2c
    outptr = output_buf[ctr] + output_col;
 80155aa:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    tmp11 = tmp10 + tmp20;
    tmp21 = tmp10 - tmp20 - tmp20;
    tmp20 = (INT32) wsptr[2];
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80155ae:	f242 7431 	movw	r4, #10033	@ 0x2731
    outptr = output_buf[ctr] + output_col;
 80155b2:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80155b4:	f640 37b6 	movw	r7, #2998	@ 0xbb6
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80155b8:	690a      	ldr	r2, [r1, #16]
  for (ctr = 0; ctr < 12; ctr++) {
 80155ba:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 80155bc:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80155c0:	680b      	ldr	r3, [r1, #0]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80155c2:	fb0b f002 	mul.w	r0, fp, r2
    z3 = (INT32) wsptr[5];
 80155c6:	f8d1 e014 	ldr.w	lr, [r1, #20]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80155ca:	f103 0310 	add.w	r3, r3, #16
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80155ce:	f101 0118 	add.w	r1, r1, #24
    tmp11 = tmp10 + tmp20;
 80155d2:	eb00 3243 	add.w	r2, r0, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 80155d6:	ebc0 3343 	rsb	r3, r0, r3, lsl #13
 80155da:	eba3 0300 	sub.w	r3, r3, r0
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80155de:	f851 0c10 	ldr.w	r0, [r1, #-16]
 80155e2:	fb04 f000 	mul.w	r0, r4, r0
    tmp21 = tmp10 - tmp20 - tmp20;
 80155e6:	9301      	str	r3, [sp, #4]
    tmp20 = tmp11 + tmp10;
 80155e8:	eb02 0500 	add.w	r5, r2, r0
    tmp22 = tmp11 - tmp10;
 80155ec:	eba2 0200 	sub.w	r2, r2, r0
    z1 = (INT32) wsptr[1];
 80155f0:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80155f4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80155f8:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80155fc:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015600:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8015604:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8015608:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 801560a:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801560e:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8015610:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8015614:	eba0 000e 	sub.w	r0, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8015618:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801561c:	eb05 0e07 	add.w	lr, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015620:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8015624:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8015628:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801562c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8015630:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
 8015632:	f809 e003 	strb.w	lr, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015636:	9b00      	ldr	r3, [sp, #0]
 8015638:	5d5d      	ldrb	r5, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801563a:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801563c:	7175      	strb	r5, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801563e:	eb03 3540 	add.w	r5, r3, r0, lsl #13
 8015642:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015644:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015648:	5d5d      	ldrb	r5, [r3, r5]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801564a:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801564c:	7075      	strb	r5, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801564e:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
 8015652:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 8015654:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015658:	5cc3      	ldrb	r3, [r0, r3]
 801565a:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801565c:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015660:	eba2 0204 	sub.w	r2, r2, r4
			    & RANGE_MASK];
 8015664:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8015668:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801566c:	5cc3      	ldrb	r3, [r0, r3]
 801566e:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015670:	5c83      	ldrb	r3, [r0, r2]
 8015672:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8015674:	d199      	bne.n	80155aa <jpeg_idct_6x12+0x1ce>
  }
}
 8015676:	b053      	add	sp, #332	@ 0x14c
 8015678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801567c:	ffffd0b0 	.word	0xffffd0b0
 8015680:	ffffeeaf 	.word	0xffffeeaf
 8015684:	ffffde8b 	.word	0xffffde8b
 8015688:	ffffea5c 	.word	0xffffea5c
 801568c:	ffffc08c 	.word	0xffffc08c
 8015690:	ffffc4df 	.word	0xffffc4df

08015694 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015698:	b0b9      	sub	sp, #228	@ 0xe4
 801569a:	1e94      	subs	r4, r2, #2
 801569c:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801569e:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80156a2:	6d48      	ldr	r0, [r1, #84]	@ 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80156a4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80156a6:	3380      	adds	r3, #128	@ 0x80
 80156a8:	3804      	subs	r0, #4
 80156aa:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80156ac:	f102 0308 	add.w	r3, r2, #8
 80156b0:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156b2:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80156b6:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156b8:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80156bc:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	@ 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156c0:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80156c2:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80156c6:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80156c8:	f242 429d 	movw	r2, #9373	@ 0x249d
    z3 <<= CONST_BITS;
 80156cc:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80156ce:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80156d2:	f640 52fc 	movw	r2, #3580	@ 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80156d6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80156da:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80156dc:	f641 229a 	movw	r2, #6810	@ 0x1a9a
    tmp10 = z3 + z1;
 80156e0:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80156e2:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 80156e4:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80156e8:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80156ec:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80156f0:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	@ 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80156f4:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80156f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80156f8:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80156fa:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80156fe:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8015700:	19f3      	adds	r3, r6, r7
 8015702:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8015704:	f241 0271 	movw	r2, #4209	@ 0x1071
 8015708:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801570c:	4a6e      	ldr	r2, [pc, #440]	@ (80158c8 <jpeg_idct_5x10+0x234>)
 801570e:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8015712:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8015714:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015718:	6e05      	ldr	r5, [r0, #96]	@ 0x60
    tmp21 = tmp11 + tmp13;
 801571a:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 801571e:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8015722:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8015724:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015726:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 801572a:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801572c:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	@ 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015730:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015732:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015736:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	@ 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801573a:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801573c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 8015740:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015744:	f8d0 50e0 	ldr.w	r5, [r0, #224]	@ 0xe0
 8015748:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801574a:	f641 666f 	movw	r6, #7791	@ 0x1e6f
    tmp11 = z2 + z4;
 801574e:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8015752:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015754:	f640 15e3 	movw	r5, #2531	@ 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8015758:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801575c:	f642 46b3 	movw	r6, #11443	@ 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015760:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015762:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015766:	f240 7614 	movw	r6, #1812	@ 0x714
    z4 = z5 + tmp12;
 801576a:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801576e:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8015770:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015774:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015776:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801577a:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801577e:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015780:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8015782:	f241 2acf 	movw	sl, #4815	@ 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015786:	eba3 030e 	sub.w	r3, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801578a:	f642 0e53 	movw	lr, #10323	@ 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801578e:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015792:	f241 4a8c 	movw	sl, #5260	@ 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015796:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801579a:	009b      	lsls	r3, r3, #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801579c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80157a0:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80157a4:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80157a8:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80157ac:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80157ae:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80157b2:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80157b6:	12ed      	asrs	r5, r5, #11
 80157b8:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80157bc:	ea4f 25ec 	mov.w	r5, ip, asr #11
 80157c0:	f8c1 50b0 	str.w	r5, [r1, #176]	@ 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80157c4:	eb07 050e 	add.w	r5, r7, lr
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80157c8:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80157cc:	12ed      	asrs	r5, r5, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80157ce:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80157d0:	610d      	str	r5, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80157d2:	9d04      	ldr	r5, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80157d4:	f8c1 709c 	str.w	r7, [r1, #156]	@ 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80157d8:	eb03 25e5 	add.w	r5, r3, r5, asr #11
 80157dc:	624d      	str	r5, [r1, #36]	@ 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80157de:	9d04      	ldr	r5, [sp, #16]
 80157e0:	ebc3 23e5 	rsb	r3, r3, r5, asr #11
 80157e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80157e8:	9b02      	ldr	r3, [sp, #8]
 80157ea:	4413      	add	r3, r2
 80157ec:	12db      	asrs	r3, r3, #11
 80157ee:	638b      	str	r3, [r1, #56]	@ 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80157f0:	9b02      	ldr	r3, [sp, #8]
 80157f2:	1a9b      	subs	r3, r3, r2
 80157f4:	12db      	asrs	r3, r3, #11
 80157f6:	674b      	str	r3, [r1, #116]	@ 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80157f8:	9b01      	ldr	r3, [sp, #4]
 80157fa:	4433      	add	r3, r6
 80157fc:	12db      	asrs	r3, r3, #11
 80157fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015800:	9b01      	ldr	r3, [sp, #4]
 8015802:	1b9b      	subs	r3, r3, r6
 8015804:	12db      	asrs	r3, r3, #11
 8015806:	660b      	str	r3, [r1, #96]	@ 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015808:	9b05      	ldr	r3, [sp, #20]
 801580a:	42a3      	cmp	r3, r4
 801580c:	f47f af51 	bne.w	80156b2 <jpeg_idct_5x10+0x1e>
 8015810:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8015812:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015814:	f641 1a4c 	movw	sl, #6476	@ 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015818:	f44f 6935 	mov.w	r9, #2896	@ 0xb50
 801581c:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015820:	f641 289a 	movw	r8, #6810	@ 0x1a9a
 8015824:	3324      	adds	r3, #36	@ 0x24
 8015826:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8015828:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 801582c:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 801582e:	9b42      	ldr	r3, [sp, #264]	@ 0x108
    tmp14 = (INT32) wsptr[4];
 8015830:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8015834:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8015838:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801583c:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015840:	1898      	adds	r0, r3, r2
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015842:	1a9b      	subs	r3, r3, r2
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015844:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8015846:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801584a:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 801584e:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015852:	fb0a f000 	mul.w	r0, sl, r0
    z3 = tmp12 + z2;
 8015856:	eb03 3247 	add.w	r2, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801585a:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801585c:	f241 0371 	movw	r3, #4209	@ 0x1071
    tmp10 = z3 + z1;
 8015860:	1884      	adds	r4, r0, r2
    tmp11 = z3 - z1;
 8015862:	1a12      	subs	r2, r2, r0
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015864:	eb05 000b 	add.w	r0, r5, fp
 8015868:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801586c:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8015870:	4b15      	ldr	r3, [pc, #84]	@ (80158c8 <jpeg_idct_5x10+0x234>)
 8015872:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8015876:	eb04 0b05 	add.w	fp, r4, r5
 801587a:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 801587c:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 801587e:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8015882:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8015886:	f813 b00b 	ldrb.w	fp, [r3, fp]
 801588a:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 801588c:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8015890:	9b00      	ldr	r3, [sp, #0]
 8015892:	5d1c      	ldrb	r4, [r3, r4]
 8015894:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8015896:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015898:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 801589a:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801589e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80158a2:	5d1c      	ldrb	r4, [r3, r4]
 80158a4:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80158a6:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 80158a8:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80158aa:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 80158ac:	009b      	lsls	r3, r3, #2
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80158ae:	9a00      	ldr	r2, [sp, #0]
    tmp12 -= z2 << 2;
 80158b0:	ebc3 3347 	rsb	r3, r3, r7, lsl #13
			    & RANGE_MASK];
 80158b4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80158b8:	5cd3      	ldrb	r3, [r2, r3]
 80158ba:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 80158bc:	9b02      	ldr	r3, [sp, #8]
 80158be:	4563      	cmp	r3, ip
 80158c0:	d1b2      	bne.n	8015828 <jpeg_idct_5x10+0x194>
  }
}
 80158c2:	b039      	add	sp, #228	@ 0xe4
 80158c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c8:	ffffba5c 	.word	0xffffba5c

080158cc <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80158cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d0:	b0a7      	sub	sp, #156	@ 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80158d2:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
{
 80158d4:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80158d6:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80158d8:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80158dc:	3380      	adds	r3, #128	@ 0x80
 80158de:	9302      	str	r3, [sp, #8]
  for (ctr = 4; ctr > 0; ctr--) {
 80158e0:	1e93      	subs	r3, r2, #2
 80158e2:	9301      	str	r3, [sp, #4]
 80158e4:	f105 0310 	add.w	r3, r5, #16
 80158e8:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80158ea:	9b01      	ldr	r3, [sp, #4]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80158ec:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80158ee:	f855 0b04 	ldr.w	r0, [r5], #4
 80158f2:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80158f4:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 80158f8:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	@ 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80158fc:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	@ 0x32
 8015900:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	@ 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015904:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	@ 0x52
 8015908:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	@ 0x62
	inptr[DCTSIZE*7] == 0) {
 801590c:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	@ 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015910:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8015914:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015916:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801591a:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801591c:	ea4e 0000 	orr.w	r0, lr, r0
 8015920:	4330      	orrs	r0, r6
 8015922:	ea48 0000 	orr.w	r0, r8, r0
 8015926:	4320      	orrs	r0, r4
 8015928:	ea59 0000 	orrs.w	r0, r9, r0
 801592c:	d155      	bne.n	80159da <jpeg_idct_4x8+0x10e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801592e:	009b      	lsls	r3, r3, #2
      wsptr[4*0] = dcval;
 8015930:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[4*1] = dcval;
 8015934:	60cb      	str	r3, [r1, #12]
      wsptr[4*2] = dcval;
 8015936:	61cb      	str	r3, [r1, #28]
      wsptr[4*3] = dcval;
 8015938:	62cb      	str	r3, [r1, #44]	@ 0x2c
      wsptr[4*4] = dcval;
 801593a:	63cb      	str	r3, [r1, #60]	@ 0x3c
      wsptr[4*5] = dcval;
 801593c:	64cb      	str	r3, [r1, #76]	@ 0x4c
      wsptr[4*6] = dcval;
 801593e:	65cb      	str	r3, [r1, #92]	@ 0x5c
      wsptr[4*7] = dcval;
 8015940:	66cb      	str	r3, [r1, #108]	@ 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8015942:	9b05      	ldr	r3, [sp, #20]
 8015944:	42ab      	cmp	r3, r5
 8015946:	d1d0      	bne.n	80158ea <jpeg_idct_4x8+0x1e>
 8015948:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801594a:	a806      	add	r0, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801594c:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015950:	f641 0e7e 	movw	lr, #6270	@ 0x187e
 8015954:	1f1c      	subs	r4, r3, #4
 8015956:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801595a:	f8df c174 	ldr.w	ip, [pc, #372]	@ 8015ad0 <jpeg_idct_4x8+0x204>
    outptr = output_buf[ctr] + output_col;
 801595e:	f854 6f04 	ldr.w	r6, [r4, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8015962:	3010      	adds	r0, #16
    outptr = output_buf[ctr] + output_col;
 8015964:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015966:	f850 1c10 	ldr.w	r1, [r0, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 801596a:	45a3      	cmp	fp, r4
    outptr = output_buf[ctr] + output_col;
 801596c:	eb06 0503 	add.w	r5, r6, r3
    z3 = (INT32) wsptr[3];
 8015970:	f850 ac04 	ldr.w	sl, [r0, #-4]
    tmp2 = (INT32) wsptr[2];
 8015974:	f850 3c08 	ldr.w	r3, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015978:	f101 0110 	add.w	r1, r1, #16
    z2 = (INT32) wsptr[1];
 801597c:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8015980:	eb01 0903 	add.w	r9, r1, r3
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015984:	eba1 0103 	sub.w	r1, r1, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015988:	eb02 030a 	add.w	r3, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801598c:	9f02      	ldr	r7, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801598e:	fb08 f303 	mul.w	r3, r8, r3
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015992:	fb0e 3202 	mla	r2, lr, r2, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015996:	fb0c 330a 	mla	r3, ip, sl, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801599a:	eb02 3a49 	add.w	sl, r2, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801599e:	ebc2 3249 	rsb	r2, r2, r9, lsl #13
			    & RANGE_MASK];
 80159a2:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80159a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80159aa:	f817 a00a 	ldrb.w	sl, [r7, sl]
 80159ae:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 80159b0:	f806 a007 	strb.w	sl, [r6, r7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80159b4:	9e02      	ldr	r6, [sp, #8]
 80159b6:	5cb2      	ldrb	r2, [r6, r2]
 80159b8:	70ea      	strb	r2, [r5, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80159ba:	eb03 3241 	add.w	r2, r3, r1, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80159be:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
			    & RANGE_MASK];
 80159c2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80159c6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80159ca:	5cb2      	ldrb	r2, [r6, r2]
 80159cc:	706a      	strb	r2, [r5, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80159ce:	5cf3      	ldrb	r3, [r6, r3]
 80159d0:	70ab      	strb	r3, [r5, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 80159d2:	d1c4      	bne.n	801595e <jpeg_idct_4x8+0x92>
  }
}
 80159d4:	b027      	add	sp, #156	@ 0x9c
 80159d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80159da:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80159dc:	f241 1251 	movw	r2, #4433	@ 0x1151
    z2 <<= CONST_BITS;
 80159e0:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80159e2:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80159e4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	@ 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80159e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80159ec:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80159ee:	183c      	adds	r4, r7, r0
 80159f0:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80159f2:	f641 027e 	movw	r2, #6270	@ 0x187e
 80159f6:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80159fa:	4a35      	ldr	r2, [pc, #212]	@ (8015ad0 <jpeg_idct_4x8+0x204>)
 80159fc:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015a00:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8015a02:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8015a04:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8015a08:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8015a0c:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8015a10:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015a12:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
    tmp11 = tmp1 + tmp3;
 8015a16:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8015a18:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015a1a:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015a1c:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015a20:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015a24:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015a28:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015a2c:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
    tmp13 = tmp0 - tmp2;
 8015a2e:	9203      	str	r2, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015a30:	f242 52a1 	movw	r2, #9633	@ 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015a34:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8015a38:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8015a3c:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015a40:	1930      	adds	r0, r6, r4
 8015a42:	4350      	muls	r0, r2
    z2 += z1;
 8015a44:	4a23      	ldr	r2, [pc, #140]	@ (8015ad4 <jpeg_idct_4x8+0x208>)
 8015a46:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8015a4a:	4a23      	ldr	r2, [pc, #140]	@ (8015ad8 <jpeg_idct_4x8+0x20c>)
 8015a4c:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015a50:	eb09 040a 	add.w	r4, r9, sl
 8015a54:	4a21      	ldr	r2, [pc, #132]	@ (8015adc <jpeg_idct_4x8+0x210>)
 8015a56:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8015a58:	f640 128e 	movw	r2, #2446	@ 0x98e
 8015a5c:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8015a60:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8015a62:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8015a66:	f243 0b0b 	movw	fp, #12299	@ 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8015ae0 <jpeg_idct_4x8+0x214>)
    tmp3 += z1 + z3;
 8015a6c:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015a70:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8015a74:	f244 1bb3 	movw	fp, #16819	@ 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015a78:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8015a7c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8015a7e:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8015a80:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8015a84:	f246 2854 	movw	r8, #25172	@ 0x6254
 8015a88:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015a8c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015a90:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015a94:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015a96:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015a9a:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015a9e:	66cc      	str	r4, [r1, #108]	@ 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015aa0:	eb07 040e 	add.w	r4, r7, lr
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015aa4:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015aa8:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015aaa:	12ff      	asrs	r7, r7, #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015aac:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015aae:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015ab0:	1a1b      	subs	r3, r3, r0
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015ab2:	65cf      	str	r7, [r1, #92]	@ 0x5c
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015ab4:	12e4      	asrs	r4, r4, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015ab6:	12db      	asrs	r3, r3, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015ab8:	61cc      	str	r4, [r1, #28]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015aba:	64cb      	str	r3, [r1, #76]	@ 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015abc:	9b03      	ldr	r3, [sp, #12]
 8015abe:	444b      	add	r3, r9
 8015ac0:	12db      	asrs	r3, r3, #11
 8015ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	eba3 0309 	sub.w	r3, r3, r9
 8015aca:	12db      	asrs	r3, r3, #11
 8015acc:	63cb      	str	r3, [r1, #60]	@ 0x3c
    wsptr++;
 8015ace:	e738      	b.n	8015942 <jpeg_idct_4x8+0x76>
 8015ad0:	ffffc4df 	.word	0xffffc4df
 8015ad4:	ffffc13b 	.word	0xffffc13b
 8015ad8:	fffff384 	.word	0xfffff384
 8015adc:	ffffe333 	.word	0xffffe333
 8015ae0:	ffffadfd 	.word	0xffffadfd

08015ae4 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015ae8:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
{
 8015aec:	b095      	sub	sp, #84	@ 0x54
 8015aee:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8015af0:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015af2:	f100 0e80 	add.w	lr, r0, #128	@ 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015af6:	3204      	adds	r2, #4
 8015af8:	3c04      	subs	r4, #4
  wsptr = workspace;
 8015afa:	ae02      	add	r6, sp, #8
{
 8015afc:	9300      	str	r3, [sp, #0]
 8015afe:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b00:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015b04:	f640 33b6 	movw	r3, #2998	@ 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b08:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015b0c:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b0e:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	@ 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b12:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b14:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015b18:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b1c:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8015b1e:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8015b20:	f241 60a1 	movw	r0, #5793	@ 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015b24:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	@ 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015b28:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015b2c:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	@ 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8015b30:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8015b32:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8015b34:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015b38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015b3a:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8015b3c:	f242 7731 	movw	r7, #10033	@ 0x2731
 8015b40:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015b42:	6a27      	ldr	r7, [r4, #32]
    tmp10 = tmp1 + tmp0;
 8015b44:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8015b48:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015b4a:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8015b4e:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015b50:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8015b52:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015b56:	f8d4 70a0 	ldr.w	r7, [r4, #160]	@ 0xa0
 8015b5a:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015b5e:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015b62:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015b66:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015b6a:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015b6e:	435f      	muls	r7, r3
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015b70:	eba2 0208 	sub.w	r2, r2, r8
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015b74:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015b76:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015b7a:	0092      	lsls	r2, r2, #2
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015b7c:	42ab      	cmp	r3, r5

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015b7e:	eb0c 080a 	add.w	r8, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015b82:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015b86:	eb07 374b 	add.w	r7, r7, fp, lsl #13
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015b8a:	ea4f 2cec 	mov.w	ip, ip, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015b8e:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015b92:	f8c6 c038 	str.w	ip, [r6, #56]	@ 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015b96:	eb02 2ce1 	add.w	ip, r2, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015b9a:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015b9e:	f846 8c04 	str.w	r8, [r6, #-4]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015ba2:	f8c6 c008 	str.w	ip, [r6, #8]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015ba6:	62f2      	str	r2, [r6, #44]	@ 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015ba8:	eb00 0207 	add.w	r2, r0, r7
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015bac:	eba0 0007 	sub.w	r0, r0, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015bb0:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015bb4:	ea4f 20e0 	mov.w	r0, r0, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015bb8:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015bba:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015bbc:	d1a0      	bne.n	8015b00 <jpeg_idct_3x6+0x1c>
 8015bbe:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8015bc0:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015bc2:	f241 6ca1 	movw	ip, #5793	@ 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015bc6:	f242 7b31 	movw	fp, #10033	@ 0x2731
 8015bca:	1f1d      	subs	r5, r3, #4
 8015bcc:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8015bce:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8015bd2:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8015bd4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015bd6:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8015bda:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8015bdc:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015be0:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015be4:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015be8:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015bec:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015bf0:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015bf2:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8015bf6:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8015bfa:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015bfe:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015c02:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8015c06:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8015c0a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8015c0e:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8015c12:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015c16:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8015c1a:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015c1e:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8015c22:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8015c24:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8015c28:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8015c2a:	d1d0      	bne.n	8015bce <jpeg_idct_3x6+0xea>
  }
}
 8015c2c:	b015      	add	sp, #84	@ 0x54
 8015c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015c34 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c38:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8015c3a:	b08b      	sub	sp, #44	@ 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015c3c:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8015c40:	1e96      	subs	r6, r2, #2
 8015c42:	3c04      	subs	r4, #4
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8015c44:	ad02      	add	r5, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015c46:	f241 1851 	movw	r8, #4433	@ 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015c4a:	f641 0e7e 	movw	lr, #6270	@ 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015c4e:	f8df c0b8 	ldr.w	ip, [pc, #184]	@ 8015d08 <jpeg_idct_2x4+0xd4>
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015c52:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015c54:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8015c58:	4637      	mov	r7, r6
 8015c5a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015c5e:	3504      	adds	r5, #4
 8015c60:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015c62:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015c66:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8015c6a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015c6c:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015c70:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015c74:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	@ 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8015c78:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015c7c:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015c80:	6a21      	ldr	r1, [r4, #32]
 8015c82:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015c86:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8015c88:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015c8c:	eb0a 010b 	add.w	r1, sl, fp
 8015c90:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015c94:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015c98:	fb0c 110b 	mla	r1, ip, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8015c9c:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8015ca0:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8015ca4:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8015ca8:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8015cac:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8015cb0:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8015cb4:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8015cb8:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015cba:	d1cb      	bne.n	8015c54 <jpeg_idct_2x4+0x20>
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015cbc:	9d01      	ldr	r5, [sp, #4]
 8015cbe:	1f18      	subs	r0, r3, #4
 8015cc0:	f103 0e0c 	add.w	lr, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8015cc4:	a902      	add	r1, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015cc6:	3580      	adds	r5, #128	@ 0x80
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8015cc8:	f850 7f04 	ldr.w	r7, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8015ccc:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8015cce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    tmp0 = wsptr[1];
 8015cd0:	f851 6c04 	ldr.w	r6, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8015cd4:	4586      	cmp	lr, r0
    outptr = output_buf[ctr] + output_col;
 8015cd6:	eb07 0c02 	add.w	ip, r7, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015cda:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015cde:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015ce0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015ce4:	eb02 0406 	add.w	r4, r2, r6
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8015ce8:	eba2 0206 	sub.w	r2, r2, r6
			    & RANGE_MASK];
 8015cec:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8015cf0:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015cf4:	5d2c      	ldrb	r4, [r5, r4]
 8015cf6:	54fc      	strb	r4, [r7, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8015cf8:	5caa      	ldrb	r2, [r5, r2]
 8015cfa:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8015cfe:	d1e3      	bne.n	8015cc8 <jpeg_idct_2x4+0x94>
  }
}
 8015d00:	b00b      	add	sp, #44	@ 0x2c
 8015d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	bf00      	nop
 8015d08:	ffffc4df 	.word	0xffffc4df

08015d0c <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015d0c:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015d0e:	6d4c      	ldr	r4, [r1, #84]	@ 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015d10:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015d14:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015d16:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8015d1a:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015d1c:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015d1e:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015d22:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8015d24:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015d26:	3080      	adds	r0, #128	@ 0x80
{
 8015d28:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015d2a:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8015d2c:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8015d2e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8015d32:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015d36:	5d06      	ldrb	r6, [r0, r4]
 8015d38:	681c      	ldr	r4, [r3, #0]
 8015d3a:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8015d3c:	5c42      	ldrb	r2, [r0, r1]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	555a      	strb	r2, [r3, r5]
}
 8015d42:	bd70      	pop	{r4, r5, r6, pc}

08015d44 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8015d44:	6803      	ldr	r3, [r0, #0]
 8015d46:	2238      	movs	r2, #56	@ 0x38
 8015d48:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4718      	bx	r3

08015d50 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8015d50:	688b      	ldr	r3, [r1, #8]
{
 8015d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8015d56:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8015d5a:	698b      	ldr	r3, [r1, #24]
{
 8015d5c:	b085      	sub	sp, #20
 8015d5e:	4681      	mov	r9, r0
 8015d60:	460c      	mov	r4, r1
 8015d62:	4693      	mov	fp, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8015d64:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015d68:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015d6a:	f101 0a30 	add.w	sl, r1, #48	@ 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015d6e:	6922      	ldr	r2, [r4, #16]
 8015d70:	42b2      	cmp	r2, r6
 8015d72:	dc02      	bgt.n	8015d7a <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8015d74:	b005      	add	sp, #20
 8015d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015d7a:	1b92      	subs	r2, r2, r6
 8015d7c:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8015d7e:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015d80:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015d82:	6865      	ldr	r5, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8015d84:	4430      	add	r0, r6
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015d86:	bfa8      	it	ge
 8015d88:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015d8a:	69e1      	ldr	r1, [r4, #28]
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015d8c:	1a2d      	subs	r5, r5, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015d8e:	1a09      	subs	r1, r1, r0
 8015d90:	4291      	cmp	r1, r2
 8015d92:	bfa8      	it	ge
 8015d94:	4611      	movge	r1, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015d96:	428d      	cmp	r5, r1
 8015d98:	bfa8      	it	ge
 8015d9a:	460d      	movge	r5, r1
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015d9c:	2d00      	cmp	r5, #0
 8015d9e:	dde9      	ble.n	8015d74 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8015da0:	fb05 f308 	mul.w	r3, r5, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015da4:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8015da6:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015da8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8015dac:	f1bb 0f00 	cmp.w	fp, #0
 8015db0:	d00a      	beq.n	8015dc8 <do_barray_io+0x78>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	4651      	mov	r1, sl
 8015db6:	463b      	mov	r3, r7
 8015db8:	4648      	mov	r0, r9
 8015dba:	6b65      	ldr	r5, [r4, #52]	@ 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015dbc:	47a8      	blx	r5
    file_offset += byte_count;
 8015dbe:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015dc0:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015dc2:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015dc4:	4416      	add	r6, r2
 8015dc6:	e7d2      	b.n	8015d6e <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015dc8:	9b03      	ldr	r3, [sp, #12]
 8015dca:	4651      	mov	r1, sl
 8015dcc:	4648      	mov	r0, r9
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	463b      	mov	r3, r7
 8015dd2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015dd4:	e7f2      	b.n	8015dbc <do_barray_io+0x6c>
	...

08015dd8 <alloc_small>:
{
 8015dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015ddc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 8015de0:	4606      	mov	r6, r0
 8015de2:	460d      	mov	r5, r1
 8015de4:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015de6:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015de8:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015dea:	d902      	bls.n	8015df2 <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8015dec:	2101      	movs	r1, #1
 8015dee:	f7ff ffa9 	bl	8015d44 <out_of_memory>
  if (odd_bytes > 0)
 8015df2:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8015df6:	bf1c      	itt	ne
 8015df8:	3408      	addne	r4, #8
 8015dfa:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015dfc:	2d01      	cmp	r5, #1
 8015dfe:	d906      	bls.n	8015e0e <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015e00:	6833      	ldr	r3, [r6, #0]
 8015e02:	220f      	movs	r2, #15
 8015e04:	4630      	mov	r0, r6
 8015e06:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8015e0e:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8015e12:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8015e16:	f8d8 0034 	ldr.w	r0, [r8, #52]	@ 0x34
  while (hdr_ptr != NULL) {
 8015e1a:	b9e8      	cbnz	r0, 8015e58 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8015e1c:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8015e20:	f1ba 0f00 	cmp.w	sl, #0
 8015e24:	d11e      	bne.n	8015e64 <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8015e26:	4b1d      	ldr	r3, [pc, #116]	@ (8015e9c <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8015e28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8015e2c:	f5c9 3580 	rsb	r5, r9, #65536	@ 0x10000
 8015e30:	429d      	cmp	r5, r3
 8015e32:	bf28      	it	cs
 8015e34:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8015e36:	eb05 0b09 	add.w	fp, r5, r9
 8015e3a:	4630      	mov	r0, r6
 8015e3c:	4659      	mov	r1, fp
 8015e3e:	f000 fbc5 	bl	80165cc <jpeg_get_small>
      if (hdr_ptr != NULL)
 8015e42:	b988      	cbnz	r0, 8015e68 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8015e44:	2d63      	cmp	r5, #99	@ 0x63
      slop /= 2;
 8015e46:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8015e4a:	d803      	bhi.n	8015e54 <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8015e4c:	2102      	movs	r1, #2
 8015e4e:	4630      	mov	r0, r6
 8015e50:	f7ff ff78 	bl	8015d44 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8015e54:	465d      	mov	r5, fp
 8015e56:	e7ee      	b.n	8015e36 <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8015e58:	6883      	ldr	r3, [r0, #8]
 8015e5a:	42a3      	cmp	r3, r4
 8015e5c:	d211      	bcs.n	8015e82 <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8015e5e:	4682      	mov	sl, r0
 8015e60:	6800      	ldr	r0, [r0, #0]
 8015e62:	e7da      	b.n	8015e1a <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8015e64:	4b0e      	ldr	r3, [pc, #56]	@ (8015ea0 <alloc_small+0xc8>)
 8015e66:	e7df      	b.n	8015e28 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8015e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8015e6a:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8015e6c:	445b      	add	r3, fp
 8015e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    hdr_ptr->hdr.next = NULL;
 8015e70:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8015e72:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8015e74:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8015e78:	f1ba 0f00 	cmp.w	sl, #0
 8015e7c:	d10b      	bne.n	8015e96 <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8015e7e:	f8c8 0034 	str.w	r0, [r8, #52]	@ 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8015e82:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8015e84:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8015e86:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8015e88:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8015e8a:	6882      	ldr	r2, [r0, #8]
 8015e8c:	1b12      	subs	r2, r2, r4
 8015e8e:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8015e90:	4418      	add	r0, r3
}
 8015e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8015e96:	f8ca 0000 	str.w	r0, [sl]
 8015e9a:	e7f2      	b.n	8015e82 <alloc_small+0xaa>
 8015e9c:	0802ee44 	.word	0x0802ee44
 8015ea0:	0802ee3c 	.word	0x0802ee3c

08015ea4 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8015ea4:	2901      	cmp	r1, #1
{
 8015ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eaa:	4604      	mov	r4, r0
 8015eac:	460d      	mov	r5, r1
 8015eae:	4616      	mov	r6, r2
 8015eb0:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015eb2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015eb6:	d005      	beq.n	8015ec4 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015eb8:	6803      	ldr	r3, [r0, #0]
 8015eba:	220f      	movs	r2, #15
 8015ebc:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8015ec4:	223c      	movs	r2, #60	@ 0x3c
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7ff ff85 	bl	8015dd8 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015ece:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015ed0:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015ed2:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015ed4:	6283      	str	r3, [r0, #40]	@ 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015ed6:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
  result->pre_zero = pre_zero;
 8015eda:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015edc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  result->blocksperrow = blocksperrow;
 8015ede:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8015ee2:	9a07      	ldr	r2, [sp, #28]
 8015ee4:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8015ee6:	f8c8 0048 	str.w	r0, [r8, #72]	@ 0x48
}
 8015eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015eee <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8015eee:	2901      	cmp	r1, #1
{
 8015ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	460d      	mov	r5, r1
 8015ef8:	4616      	mov	r6, r2
 8015efa:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015efc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015f00:	d005      	beq.n	8015f0e <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015f02:	6803      	ldr	r3, [r0, #0]
 8015f04:	220f      	movs	r2, #15
 8015f06:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8015f0e:	223c      	movs	r2, #60	@ 0x3c
 8015f10:	4629      	mov	r1, r5
 8015f12:	4620      	mov	r0, r4
 8015f14:	f7ff ff60 	bl	8015dd8 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015f18:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015f1a:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015f1c:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015f1e:	6283      	str	r3, [r0, #40]	@ 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015f20:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
  result->pre_zero = pre_zero;
 8015f24:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015f26:	62c3      	str	r3, [r0, #44]	@ 0x2c
  result->samplesperrow = samplesperrow;
 8015f28:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8015f2c:	9a07      	ldr	r2, [sp, #28]
 8015f2e:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8015f30:	f8c8 0044 	str.w	r0, [r8, #68]	@ 0x44
}
 8015f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f38 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015f38:	2901      	cmp	r1, #1
{
 8015f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f3e:	4606      	mov	r6, r0
 8015f40:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015f42:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015f44:	d910      	bls.n	8015f68 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015f46:	6803      	ldr	r3, [r0, #0]
 8015f48:	220f      	movs	r2, #15
 8015f4a:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8015f52:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8015f56:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8015f58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  mem->large_list[pool_id] = NULL;
 8015f5a:	63e2      	str	r2, [r4, #60]	@ 0x3c

  while (lhdr_ptr != NULL) {
 8015f5c:	bb0b      	cbnz	r3, 8015fa2 <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8015f5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  mem->small_list[pool_id] = NULL;
 8015f60:	6363      	str	r3, [r4, #52]	@ 0x34

  while (shdr_ptr != NULL) {
 8015f62:	bb69      	cbnz	r1, 8015fc0 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8015f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8015f68:	d1f3      	bne.n	8015f52 <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015f6a:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015f6c:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015f6e:	b924      	cbnz	r4, 8015f7a <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015f70:	6caf      	ldr	r7, [r5, #72]	@ 0x48
    mem->virt_sarray_list = NULL;
 8015f72:	646c      	str	r4, [r5, #68]	@ 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015f74:	b95f      	cbnz	r7, 8015f8e <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8015f76:	64af      	str	r7, [r5, #72]	@ 0x48
 8015f78:	e7eb      	b.n	8015f52 <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8015f7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015f7c:	b12b      	cbz	r3, 8015f8a <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8015f7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8015f80:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015f84:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015f86:	62a7      	str	r7, [r4, #40]	@ 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8015f88:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015f8a:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8015f8c:	e7ef      	b.n	8015f6e <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8015f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f90:	b12b      	cbz	r3, 8015f9e <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8015f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f94:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015f98:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015f9a:	62bc      	str	r4, [r7, #40]	@ 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8015f9c:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015f9e:	6aff      	ldr	r7, [r7, #44]	@ 0x2c
 8015fa0:	e7e8      	b.n	8015f74 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8015fa2:	e9d3 8700 	ldrd	r8, r7, [r3]
 8015fa6:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015fa8:	4619      	mov	r1, r3
 8015faa:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8015fac:	4417      	add	r7, r2
 8015fae:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015fb0:	463a      	mov	r2, r7
 8015fb2:	f000 fb14 	bl	80165de <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8015fb6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015fb8:	1bdb      	subs	r3, r3, r7
 8015fba:	64eb      	str	r3, [r5, #76]	@ 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8015fbc:	4643      	mov	r3, r8
 8015fbe:	e7cd      	b.n	8015f5c <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8015fc0:	688b      	ldr	r3, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015fc2:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8015fc4:	e9d1 7400 	ldrd	r7, r4, [r1]
 8015fc8:	441c      	add	r4, r3
 8015fca:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015fcc:	4622      	mov	r2, r4
 8015fce:	f000 fb00 	bl	80165d2 <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8015fd2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 8015fd4:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8015fd6:	1b1b      	subs	r3, r3, r4
 8015fd8:	64eb      	str	r3, [r5, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 8015fda:	e7c2      	b.n	8015f62 <free_pool+0x2a>

08015fdc <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8015fdc:	b510      	push	{r4, lr}
 8015fde:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8015fe0:	2101      	movs	r1, #1
 8015fe2:	f7ff ffa9 	bl	8015f38 <free_pool>
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f7ff ffa5 	bl	8015f38 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8015fee:	4620      	mov	r0, r4
 8015ff0:	6861      	ldr	r1, [r4, #4]
 8015ff2:	2254      	movs	r2, #84	@ 0x54
 8015ff4:	f000 faed 	bl	80165d2 <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015ff8:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8015ffa:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015ffc:	6063      	str	r3, [r4, #4]
}
 8015ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8016002:	f000 baf8 	b.w	80165f6 <jpeg_mem_term>

08016006 <access_virt_barray>:
{
 8016006:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 801600a:	18d7      	adds	r7, r2, r3
{
 801600c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801600e:	684a      	ldr	r2, [r1, #4]
{
 8016010:	4606      	mov	r6, r0
 8016012:	460c      	mov	r4, r1
 8016014:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016018:	42ba      	cmp	r2, r7
 801601a:	d304      	bcc.n	8016026 <access_virt_barray+0x20>
 801601c:	68ca      	ldr	r2, [r1, #12]
 801601e:	429a      	cmp	r2, r3
 8016020:	d301      	bcc.n	8016026 <access_virt_barray+0x20>
 8016022:	680b      	ldr	r3, [r1, #0]
 8016024:	b92b      	cbnz	r3, 8016032 <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016026:	6833      	ldr	r3, [r6, #0]
 8016028:	2217      	movs	r2, #23
 801602a:	4630      	mov	r0, r6
 801602c:	615a      	str	r2, [r3, #20]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	4798      	blx	r3
  if (start_row < ptr->cur_start_row ||
 8016032:	69a3      	ldr	r3, [r4, #24]
 8016034:	42ab      	cmp	r3, r5
 8016036:	d803      	bhi.n	8016040 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8016038:	6922      	ldr	r2, [r4, #16]
 801603a:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801603c:	42bb      	cmp	r3, r7
 801603e:	d21e      	bcs.n	801607e <access_virt_barray+0x78>
    if (! ptr->b_s_open)
 8016040:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016042:	b92b      	cbnz	r3, 8016050 <access_virt_barray+0x4a>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8016044:	6833      	ldr	r3, [r6, #0]
 8016046:	2247      	movs	r2, #71	@ 0x47
 8016048:	4630      	mov	r0, r6
 801604a:	615a      	str	r2, [r3, #20]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4798      	blx	r3
    if (ptr->dirty) {
 8016050:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016052:	b133      	cbz	r3, 8016062 <access_virt_barray+0x5c>
      do_barray_io(cinfo, ptr, TRUE);
 8016054:	2201      	movs	r2, #1
 8016056:	4621      	mov	r1, r4
 8016058:	4630      	mov	r0, r6
 801605a:	f7ff fe79 	bl	8015d50 <do_barray_io>
      ptr->dirty = FALSE;
 801605e:	2300      	movs	r3, #0
 8016060:	6263      	str	r3, [r4, #36]	@ 0x24
    if (start_row > ptr->cur_start_row) {
 8016062:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8016064:	2200      	movs	r2, #0
 8016066:	4621      	mov	r1, r4
 8016068:	4630      	mov	r0, r6
    if (start_row > ptr->cur_start_row) {
 801606a:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801606c:	bf29      	itett	cs
 801606e:	6923      	ldrcs	r3, [r4, #16]
      ptr->cur_start_row = start_row;
 8016070:	462b      	movcc	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8016072:	1afb      	subcs	r3, r7, r3
      if (ltemp < 0)
 8016074:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8016078:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 801607a:	f7ff fe69 	bl	8015d50 <do_barray_io>
  if (ptr->first_undef_row < end_row) {
 801607e:	69e3      	ldr	r3, [r4, #28]
 8016080:	42bb      	cmp	r3, r7
 8016082:	d21b      	bcs.n	80160bc <access_virt_barray+0xb6>
    if (ptr->first_undef_row < start_row) {
 8016084:	42ab      	cmp	r3, r5
 8016086:	d20b      	bcs.n	80160a0 <access_virt_barray+0x9a>
      if (writable)		/* writer skipped over a section of array */
 8016088:	f1b8 0f00 	cmp.w	r8, #0
 801608c:	d01a      	beq.n	80160c4 <access_virt_barray+0xbe>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801608e:	6833      	ldr	r3, [r6, #0]
 8016090:	2217      	movs	r2, #23
 8016092:	4630      	mov	r0, r6
 8016094:	615a      	str	r2, [r3, #20]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4798      	blx	r3
 801609a:	462b      	mov	r3, r5
      ptr->first_undef_row = end_row;
 801609c:	61e7      	str	r7, [r4, #28]
 801609e:	e002      	b.n	80160a6 <access_virt_barray+0xa0>
    if (writable)
 80160a0:	f1b8 0f00 	cmp.w	r8, #0
 80160a4:	d1fa      	bne.n	801609c <access_virt_barray+0x96>
    if (ptr->pre_zero) {
 80160a6:	6a22      	ldr	r2, [r4, #32]
 80160a8:	b1b2      	cbz	r2, 80160d8 <access_virt_barray+0xd2>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 80160aa:	68a2      	ldr	r2, [r4, #8]
 80160ac:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80160b0:	69a2      	ldr	r2, [r4, #24]
 80160b2:	1a9e      	subs	r6, r3, r2
      end_row -= ptr->cur_start_row;
 80160b4:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 80160b6:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80160b8:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 80160ba:	d305      	bcc.n	80160c8 <access_virt_barray+0xc2>
  if (writable)
 80160bc:	f1b8 0f00 	cmp.w	r8, #0
 80160c0:	d10d      	bne.n	80160de <access_virt_barray+0xd8>
 80160c2:	e00e      	b.n	80160e2 <access_virt_barray+0xdc>
 80160c4:	462b      	mov	r3, r5
 80160c6:	e7ee      	b.n	80160a6 <access_virt_barray+0xa0>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80160c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80160cc:	464a      	mov	r2, r9
 80160ce:	2100      	movs	r1, #0
	undef_row++;
 80160d0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80160d2:	f013 ffed 	bl	802a0b0 <memset>
	undef_row++;
 80160d6:	e7ee      	b.n	80160b6 <access_virt_barray+0xb0>
      if (! writable)		/* reader looking at undefined data */
 80160d8:	f1b8 0f00 	cmp.w	r8, #0
 80160dc:	d008      	beq.n	80160f0 <access_virt_barray+0xea>
    ptr->dirty = TRUE;
 80160de:	2301      	movs	r3, #1
 80160e0:	6263      	str	r3, [r4, #36]	@ 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80160e2:	69a3      	ldr	r3, [r4, #24]
 80160e4:	6820      	ldr	r0, [r4, #0]
 80160e6:	1aed      	subs	r5, r5, r3
}
 80160e8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80160ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80160f0:	6833      	ldr	r3, [r6, #0]
 80160f2:	2217      	movs	r2, #23
 80160f4:	4630      	mov	r0, r6
 80160f6:	615a      	str	r2, [r3, #20]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	4798      	blx	r3
  if (writable)
 80160fc:	e7f1      	b.n	80160e2 <access_virt_barray+0xdc>

080160fe <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80160fe:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8016102:	429a      	cmp	r2, r3
{
 8016104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016108:	4606      	mov	r6, r0
 801610a:	4688      	mov	r8, r1
 801610c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801610e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8016110:	d902      	bls.n	8016118 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8016112:	2103      	movs	r1, #3
 8016114:	f7ff fe16 	bl	8015d44 <out_of_memory>
  if (odd_bytes > 0)
 8016118:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801611c:	bf1c      	itt	ne
 801611e:	3408      	addne	r4, #8
 8016120:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016122:	f1b8 0f01 	cmp.w	r8, #1
 8016126:	d906      	bls.n	8016136 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016128:	6833      	ldr	r3, [r6, #0]
 801612a:	220f      	movs	r2, #15
 801612c:	4630      	mov	r0, r6
 801612e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8016136:	f104 0110 	add.w	r1, r4, #16
 801613a:	4630      	mov	r0, r6
 801613c:	f000 fa4c 	bl	80165d8 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8016140:	4605      	mov	r5, r0
 8016142:	b918      	cbnz	r0, 801614c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8016144:	2104      	movs	r1, #4
 8016146:	4630      	mov	r0, r6
 8016148:	f7ff fdfc 	bl	8015d44 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 801614c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 801614e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8016152:	3310      	adds	r3, #16
 8016154:	4423      	add	r3, r4
 8016156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8016158:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801615c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 801615e:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8016166:	63fd      	str	r5, [r7, #60]	@ 0x3c
}
 8016168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801616c <alloc_barray>:
{
 801616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8016170:	01d7      	lsls	r7, r2, #7
{
 8016172:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016174:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 8016178:	4680      	mov	r8, r0
 801617a:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801617c:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 801617e:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016180:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8016184:	d904      	bls.n	8016190 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8016186:	6803      	ldr	r3, [r0, #0]
 8016188:	2248      	movs	r2, #72	@ 0x48
 801618a:	615a      	str	r2, [r3, #20]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8016190:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8016192:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8016196:	4651      	mov	r1, sl
 8016198:	4640      	mov	r0, r8
 801619a:	bfa8      	it	ge
 801619c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801619e:	6534      	str	r4, [r6, #80]	@ 0x50
  currow = 0;
 80161a0:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80161a2:	f7ff fe19 	bl	8015dd8 <alloc_small>
 80161a6:	4681      	mov	r9, r0
  while (currow < numrows) {
 80161a8:	42ae      	cmp	r6, r5
 80161aa:	d302      	bcc.n	80161b2 <alloc_barray+0x46>
}
 80161ac:	4648      	mov	r0, r9
 80161ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80161b2:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 80161b4:	4651      	mov	r1, sl
 80161b6:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80161b8:	429c      	cmp	r4, r3
 80161ba:	bf28      	it	cs
 80161bc:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 80161be:	fb04 f207 	mul.w	r2, r4, r7
 80161c2:	f7ff ff9c 	bl	80160fe <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 80161c6:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80161ca:	4426      	add	r6, r4
 80161cc:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d0e9      	beq.n	80161a8 <alloc_barray+0x3c>
      result[currow++] = workspace;
 80161d4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 80161d8:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 80161da:	e7f9      	b.n	80161d0 <alloc_barray+0x64>

080161dc <alloc_sarray>:
{
 80161dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e0:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80161e2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
{
 80161e6:	4607      	mov	r7, r0
 80161e8:	468a      	mov	sl, r1
  if (ltemp <= 0)
 80161ea:	429a      	cmp	r2, r3
{
 80161ec:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80161ee:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80161f0:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 80161f4:	d904      	bls.n	8016200 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	2248      	movs	r2, #72	@ 0x48
 80161fa:	615a      	str	r2, [r3, #20]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8016200:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8016202:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8016206:	4651      	mov	r1, sl
 8016208:	4638      	mov	r0, r7
 801620a:	bfa8      	it	ge
 801620c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801620e:	6534      	str	r4, [r6, #80]	@ 0x50
  currow = 0;
 8016210:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8016212:	f7ff fde1 	bl	8015dd8 <alloc_small>
 8016216:	4681      	mov	r9, r0
  while (currow < numrows) {
 8016218:	42ae      	cmp	r6, r5
 801621a:	d302      	bcc.n	8016222 <alloc_sarray+0x46>
}
 801621c:	4648      	mov	r0, r9
 801621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016222:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8016224:	4651      	mov	r1, sl
 8016226:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016228:	429c      	cmp	r4, r3
 801622a:	bf28      	it	cs
 801622c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801622e:	fb04 f208 	mul.w	r2, r4, r8
 8016232:	f7ff ff64 	bl	80160fe <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8016236:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801623a:	4426      	add	r6, r4
 801623c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8016240:	4293      	cmp	r3, r2
 8016242:	d0e9      	beq.n	8016218 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8016244:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8016248:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 801624a:	e7f9      	b.n	8016240 <alloc_sarray+0x64>

0801624c <realize_virt_arrays>:
{
 801624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016250:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8016254:	2500      	movs	r5, #0
{
 8016256:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016258:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
  space_per_minheight = 0;
 801625c:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801625e:	b9e3      	cbnz	r3, 801629a <realize_virt_arrays+0x4e>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016260:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
 8016264:	bb23      	cbnz	r3, 80162b0 <realize_virt_arrays+0x64>
  if (space_per_minheight <= 0)
 8016266:	2e00      	cmp	r6, #0
 8016268:	dd15      	ble.n	8016296 <realize_virt_arrays+0x4a>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 801626a:	f8d8 304c 	ldr.w	r3, [r8, #76]	@ 0x4c
 801626e:	462a      	mov	r2, r5
 8016270:	4631      	mov	r1, r6
 8016272:	4638      	mov	r0, r7
 8016274:	f000 f9b6 	bl	80165e4 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8016278:	4285      	cmp	r5, r0
 801627a:	dd26      	ble.n	80162ca <realize_virt_arrays+0x7e>
    max_minheights = avail_mem / space_per_minheight;
 801627c:	fb90 f6f6 	sdiv	r6, r0, r6
    if (max_minheights <= 0)
 8016280:	2e01      	cmp	r6, #1
 8016282:	bfb8      	it	lt
 8016284:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016286:	f8d8 4044 	ldr.w	r4, [r8, #68]	@ 0x44
      sptr->cur_start_row = 0;
 801628a:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801628c:	b9fc      	cbnz	r4, 80162ce <realize_virt_arrays+0x82>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801628e:	f8d8 5048 	ldr.w	r5, [r8, #72]	@ 0x48
 8016292:	2d00      	cmp	r5, #0
 8016294:	d141      	bne.n	801631a <realize_virt_arrays+0xce>
}
 8016296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	b932      	cbnz	r2, 80162ac <realize_virt_arrays+0x60>
      space_per_minheight += (long) sptr->maxaccess *
 801629e:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80162a2:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 80162a6:	6859      	ldr	r1, [r3, #4]
 80162a8:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80162ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162ae:	e7d6      	b.n	801625e <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 80162b0:	681a      	ldr	r2, [r3, #0]
 80162b2:	b942      	cbnz	r2, 80162c6 <realize_virt_arrays+0x7a>
      space_per_minheight += (long) bptr->maxaccess *
 80162b4:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80162b8:	4351      	muls	r1, r2
 80162ba:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 80162be:	6859      	ldr	r1, [r3, #4]
 80162c0:	434a      	muls	r2, r1
 80162c2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80162c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162c8:	e7cc      	b.n	8016264 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 80162ca:	4e27      	ldr	r6, [pc, #156]	@ (8016368 <realize_virt_arrays+0x11c>)
 80162cc:	e7db      	b.n	8016286 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 80162ce:	6823      	ldr	r3, [r4, #0]
 80162d0:	b9b3      	cbnz	r3, 8016300 <realize_virt_arrays+0xb4>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 80162d2:	6862      	ldr	r2, [r4, #4]
				(long) sptr->samplesperrow *
 80162d4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 80162d8:	1e53      	subs	r3, r2, #1
 80162da:	fbb3 f3f1 	udiv	r3, r3, r1
 80162de:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 80162e0:	429e      	cmp	r6, r3
 80162e2:	db0f      	blt.n	8016304 <realize_virt_arrays+0xb8>
	sptr->rows_in_mem = sptr->rows_in_array;
 80162e4:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80162e6:	6923      	ldr	r3, [r4, #16]
 80162e8:	2101      	movs	r1, #1
 80162ea:	68a2      	ldr	r2, [r4, #8]
 80162ec:	4638      	mov	r0, r7
 80162ee:	f7ff ff75 	bl	80161dc <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 80162f2:	f8d8 3050 	ldr.w	r3, [r8, #80]	@ 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80162f6:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 80162f8:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 80162fa:	6265      	str	r5, [r4, #36]	@ 0x24
      sptr->cur_start_row = 0;
 80162fc:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016300:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8016302:	e7c3      	b.n	801628c <realize_virt_arrays+0x40>
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8016304:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8016306:	4342      	muls	r2, r0
 8016308:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801630a:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801630c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016310:	f000 f96a 	bl	80165e8 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8016314:	2301      	movs	r3, #1
 8016316:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016318:	e7e5      	b.n	80162e6 <realize_virt_arrays+0x9a>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801631a:	682b      	ldr	r3, [r5, #0]
 801631c:	b9b3      	cbnz	r3, 801634c <realize_virt_arrays+0x100>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 801631e:	6868      	ldr	r0, [r5, #4]
				(long) bptr->blocksperrow *
 8016320:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8016324:	1e43      	subs	r3, r0, #1
 8016326:	fbb3 f3f1 	udiv	r3, r3, r1
 801632a:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 801632c:	429e      	cmp	r6, r3
 801632e:	db0f      	blt.n	8016350 <realize_virt_arrays+0x104>
	bptr->rows_in_mem = bptr->rows_in_array;
 8016330:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016332:	692b      	ldr	r3, [r5, #16]
 8016334:	2101      	movs	r1, #1
 8016336:	68aa      	ldr	r2, [r5, #8]
 8016338:	4638      	mov	r0, r7
 801633a:	f7ff ff17 	bl	801616c <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 801633e:	f8d8 3050 	ldr.w	r3, [r8, #80]	@ 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016342:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8016344:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8016346:	626c      	str	r4, [r5, #36]	@ 0x24
      bptr->cur_start_row = 0;
 8016348:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801634c:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
 801634e:	e7a0      	b.n	8016292 <realize_virt_arrays+0x46>
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8016350:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8016352:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8016354:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8016356:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8016358:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801635c:	01d2      	lsls	r2, r2, #7
 801635e:	f000 f943 	bl	80165e8 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8016362:	2301      	movs	r3, #1
 8016364:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016366:	e7e4      	b.n	8016332 <realize_virt_arrays+0xe6>
 8016368:	3b9aca00 	.word	0x3b9aca00

0801636c <access_virt_sarray>:
{
 801636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8016370:	eb02 0803 	add.w	r8, r2, r3
{
 8016374:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016376:	684a      	ldr	r2, [r1, #4]
{
 8016378:	b085      	sub	sp, #20
 801637a:	4682      	mov	sl, r0
 801637c:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801637e:	4542      	cmp	r2, r8
 8016380:	d304      	bcc.n	801638c <access_virt_sarray+0x20>
 8016382:	68ca      	ldr	r2, [r1, #12]
 8016384:	429a      	cmp	r2, r3
 8016386:	d301      	bcc.n	801638c <access_virt_sarray+0x20>
 8016388:	680b      	ldr	r3, [r1, #0]
 801638a:	b933      	cbnz	r3, 801639a <access_virt_sarray+0x2e>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801638c:	f8da 3000 	ldr.w	r3, [sl]
 8016390:	2217      	movs	r2, #23
 8016392:	4650      	mov	r0, sl
 8016394:	615a      	str	r2, [r3, #20]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	4798      	blx	r3
  if (start_row < ptr->cur_start_row ||
 801639a:	69a3      	ldr	r3, [r4, #24]
 801639c:	42ab      	cmp	r3, r5
 801639e:	d80c      	bhi.n	80163ba <access_virt_sarray+0x4e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80163a0:	6922      	ldr	r2, [r4, #16]
 80163a2:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80163a4:	4543      	cmp	r3, r8
 80163a6:	d308      	bcc.n	80163ba <access_virt_sarray+0x4e>
  if (ptr->first_undef_row < end_row) {
 80163a8:	69e6      	ldr	r6, [r4, #28]
 80163aa:	4546      	cmp	r6, r8
 80163ac:	f0c0 8081 	bcc.w	80164b2 <access_virt_sarray+0x146>
  if (writable)
 80163b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f040 80a5 	bne.w	8016502 <access_virt_sarray+0x196>
 80163b8:	e0a5      	b.n	8016506 <access_virt_sarray+0x19a>
    if (! ptr->b_s_open)
 80163ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80163bc:	b933      	cbnz	r3, 80163cc <access_virt_sarray+0x60>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80163be:	f8da 3000 	ldr.w	r3, [sl]
 80163c2:	2247      	movs	r2, #71	@ 0x47
 80163c4:	4650      	mov	r0, sl
 80163c6:	615a      	str	r2, [r3, #20]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4798      	blx	r3
    if (ptr->dirty) {
 80163cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80163ce:	b183      	cbz	r3, 80163f2 <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80163d0:	f8d4 b008 	ldr.w	fp, [r4, #8]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80163d4:	f104 0230 	add.w	r2, r4, #48	@ 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 80163d8:	69a3      	ldr	r3, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80163da:	f04f 0900 	mov.w	r9, #0
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80163de:	9202      	str	r2, [sp, #8]
  file_offset = ptr->cur_start_row * bytesperrow;
 80163e0:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80163e4:	6922      	ldr	r2, [r4, #16]
 80163e6:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80163e8:	e9d4 1606 	ldrd	r1, r6, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80163ec:	dc3c      	bgt.n	8016468 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 80163ee:	2300      	movs	r3, #0
 80163f0:	6263      	str	r3, [r4, #36]	@ 0x24
    if (start_row > ptr->cur_start_row) {
 80163f2:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80163f4:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80163f8:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80163fa:	f104 0130 	add.w	r1, r4, #48	@ 0x30
    if (start_row > ptr->cur_start_row) {
 80163fe:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8016400:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8016404:	bf2a      	itet	cs
 8016406:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = start_row;
 801640a:	462b      	movcc	r3, r5
      if (ltemp < 0)
 801640c:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8016410:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8016412:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016416:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016418:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801641a:	454a      	cmp	r2, r9
 801641c:	ddc4      	ble.n	80163a8 <access_virt_sarray+0x3c>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801641e:	eba2 0209 	sub.w	r2, r2, r9
 8016422:	6967      	ldr	r7, [r4, #20]
 8016424:	42ba      	cmp	r2, r7
 8016426:	bfa8      	it	ge
 8016428:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 801642a:	69a7      	ldr	r7, [r4, #24]
 801642c:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801642e:	eba6 0c07 	sub.w	ip, r6, r7
 8016432:	4594      	cmp	ip, r2
 8016434:	bfa8      	it	ge
 8016436:	4694      	movge	ip, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8016438:	6862      	ldr	r2, [r4, #4]
 801643a:	1bd6      	subs	r6, r2, r7
 801643c:	4566      	cmp	r6, ip
 801643e:	bfa8      	it	ge
 8016440:	4666      	movge	r6, ip
    if (rows <= 0)		/* this chunk might be past end of file! */
 8016442:	2e00      	cmp	r6, #0
 8016444:	ddb0      	ble.n	80163a8 <access_virt_sarray+0x3c>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016446:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8016448:	fb06 f60b 	mul.w	r6, r6, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801644c:	4650      	mov	r0, sl
 801644e:	9303      	str	r3, [sp, #12]
 8016450:	9600      	str	r6, [sp, #0]
 8016452:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8016456:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8016458:	9102      	str	r1, [sp, #8]
 801645a:	47b8      	blx	r7
    file_offset += byte_count;
 801645c:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801645e:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8016460:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016462:	9902      	ldr	r1, [sp, #8]
 8016464:	4491      	add	r9, r2
 8016466:	e7d6      	b.n	8016416 <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016468:	eba2 0209 	sub.w	r2, r2, r9
 801646c:	6960      	ldr	r0, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 801646e:	eb01 0c09 	add.w	ip, r1, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016472:	4282      	cmp	r2, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016474:	eba6 060c 	sub.w	r6, r6, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016478:	bfa8      	it	ge
 801647a:	4602      	movge	r2, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801647c:	4296      	cmp	r6, r2
 801647e:	bfa8      	it	ge
 8016480:	4616      	movge	r6, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8016482:	6862      	ldr	r2, [r4, #4]
 8016484:	eba2 070c 	sub.w	r7, r2, ip
 8016488:	42b7      	cmp	r7, r6
 801648a:	bfa8      	it	ge
 801648c:	4637      	movge	r7, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 801648e:	2f00      	cmp	r7, #0
 8016490:	ddad      	ble.n	80163ee <access_virt_sarray+0x82>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8016492:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8016494:	fb0b f707 	mul.w	r7, fp, r7
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8016498:	9902      	ldr	r1, [sp, #8]
 801649a:	4650      	mov	r0, sl
 801649c:	9700      	str	r7, [sp, #0]
 801649e:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80164a2:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80164a4:	9303      	str	r3, [sp, #12]
 80164a6:	47b0      	blx	r6
    file_offset += byte_count;
 80164a8:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80164aa:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80164ac:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80164ae:	4491      	add	r9, r2
 80164b0:	e798      	b.n	80163e4 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 80164b2:	42ae      	cmp	r6, r5
      if (writable)		/* writer skipped over a section of array */
 80164b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    if (ptr->first_undef_row < start_row) {
 80164b6:	d20b      	bcs.n	80164d0 <access_virt_sarray+0x164>
      if (writable)		/* writer skipped over a section of array */
 80164b8:	b1fb      	cbz	r3, 80164fa <access_virt_sarray+0x18e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80164ba:	f8da 3000 	ldr.w	r3, [sl]
 80164be:	2217      	movs	r2, #23
 80164c0:	462e      	mov	r6, r5
 80164c2:	4650      	mov	r0, sl
 80164c4:	615a      	str	r2, [r3, #20]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	4798      	blx	r3
      ptr->first_undef_row = end_row;
 80164ca:	f8c4 801c 	str.w	r8, [r4, #28]
 80164ce:	e001      	b.n	80164d4 <access_virt_sarray+0x168>
    if (writable)
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d1fa      	bne.n	80164ca <access_virt_sarray+0x15e>
    if (ptr->pre_zero) {
 80164d4:	6a22      	ldr	r2, [r4, #32]
 80164d6:	b192      	cbz	r2, 80164fe <access_virt_sarray+0x192>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80164d8:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80164da:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80164dc:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 80164de:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 80164e2:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80164e4:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 80164e6:	f4bf af63 	bcs.w	80163b0 <access_virt_sarray+0x44>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80164ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80164ee:	463a      	mov	r2, r7
 80164f0:	2100      	movs	r1, #0
	undef_row++;
 80164f2:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80164f4:	f013 fddc 	bl	802a0b0 <memset>
	undef_row++;
 80164f8:	e7f3      	b.n	80164e2 <access_virt_sarray+0x176>
 80164fa:	462e      	mov	r6, r5
 80164fc:	e7ea      	b.n	80164d4 <access_virt_sarray+0x168>
      if (! writable)		/* reader looking at undefined data */
 80164fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016500:	b14b      	cbz	r3, 8016516 <access_virt_sarray+0x1aa>
    ptr->dirty = TRUE;
 8016502:	2301      	movs	r3, #1
 8016504:	6263      	str	r3, [r4, #36]	@ 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8016506:	69a3      	ldr	r3, [r4, #24]
 8016508:	6820      	ldr	r0, [r4, #0]
 801650a:	1aed      	subs	r5, r5, r3
}
 801650c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8016510:	b005      	add	sp, #20
 8016512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016516:	f8da 3000 	ldr.w	r3, [sl]
 801651a:	2217      	movs	r2, #23
 801651c:	4650      	mov	r0, sl
 801651e:	615a      	str	r2, [r3, #20]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4798      	blx	r3
  if (writable)
 8016524:	e7ef      	b.n	8016506 <access_virt_sarray+0x19a>
	...

08016528 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8016528:	2300      	movs	r3, #0
{
 801652a:	b570      	push	{r4, r5, r6, lr}
 801652c:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801652e:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8016530:	f000 f85f 	bl	80165f2 <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8016534:	2154      	movs	r1, #84	@ 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8016536:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8016538:	4628      	mov	r0, r5
 801653a:	f000 f847 	bl	80165cc <jpeg_get_small>

  if (mem == NULL) {
 801653e:	4604      	mov	r4, r0
 8016540:	b948      	cbnz	r0, 8016556 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 8016542:	4628      	mov	r0, r5
 8016544:	f000 f857 	bl	80165f6 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8016548:	682b      	ldr	r3, [r5, #0]
 801654a:	2238      	movs	r2, #56	@ 0x38
 801654c:	4628      	mov	r0, r5
 801654e:	e9c3 2405 	strd	r2, r4, [r3, #20]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8016556:	4b12      	ldr	r3, [pc, #72]	@ (80165a0 <jinit_memory_mgr+0x78>)
 8016558:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 801655a:	4b12      	ldr	r3, [pc, #72]	@ (80165a4 <jinit_memory_mgr+0x7c>)
 801655c:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801655e:	4b12      	ldr	r3, [pc, #72]	@ (80165a8 <jinit_memory_mgr+0x80>)
 8016560:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 8016562:	4b12      	ldr	r3, [pc, #72]	@ (80165ac <jinit_memory_mgr+0x84>)
 8016564:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8016566:	4b12      	ldr	r3, [pc, #72]	@ (80165b0 <jinit_memory_mgr+0x88>)
 8016568:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 801656a:	4b12      	ldr	r3, [pc, #72]	@ (80165b4 <jinit_memory_mgr+0x8c>)
 801656c:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801656e:	4b12      	ldr	r3, [pc, #72]	@ (80165b8 <jinit_memory_mgr+0x90>)
 8016570:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8016572:	4b12      	ldr	r3, [pc, #72]	@ (80165bc <jinit_memory_mgr+0x94>)
 8016574:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8016576:	4b12      	ldr	r3, [pc, #72]	@ (80165c0 <jinit_memory_mgr+0x98>)
 8016578:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 801657a:	4b12      	ldr	r3, [pc, #72]	@ (80165c4 <jinit_memory_mgr+0x9c>)
 801657c:	6263      	str	r3, [r4, #36]	@ 0x24
  mem->pub.self_destruct = self_destruct;
 801657e:	4b12      	ldr	r3, [pc, #72]	@ (80165c8 <jinit_memory_mgr+0xa0>)
 8016580:	62a3      	str	r3, [r4, #40]	@ 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8016582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8016586:	e9c4 630b 	strd	r6, r3, [r4, #44]	@ 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 801658a:	2300      	movs	r3, #0
 801658c:	63a3      	str	r3, [r4, #56]	@ 0x38
    mem->large_list[pool] = NULL;
 801658e:	6423      	str	r3, [r4, #64]	@ 0x40
    mem->small_list[pool] = NULL;
 8016590:	6363      	str	r3, [r4, #52]	@ 0x34
    mem->large_list[pool] = NULL;
 8016592:	63e3      	str	r3, [r4, #60]	@ 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8016594:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8016598:	2354      	movs	r3, #84	@ 0x54
 801659a:	64e3      	str	r3, [r4, #76]	@ 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 801659c:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801659e:	bd70      	pop	{r4, r5, r6, pc}
 80165a0:	08015dd9 	.word	0x08015dd9
 80165a4:	080160ff 	.word	0x080160ff
 80165a8:	080161dd 	.word	0x080161dd
 80165ac:	0801616d 	.word	0x0801616d
 80165b0:	08015eef 	.word	0x08015eef
 80165b4:	08015ea5 	.word	0x08015ea5
 80165b8:	0801624d 	.word	0x0801624d
 80165bc:	0801636d 	.word	0x0801636d
 80165c0:	08016007 	.word	0x08016007
 80165c4:	08015f39 	.word	0x08015f39
 80165c8:	08015fdd 	.word	0x08015fdd

080165cc <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 80165cc:	4608      	mov	r0, r1
 80165ce:	f7f2 ba0b 	b.w	80089e8 <pvPortMalloc>

080165d2 <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 80165d2:	4608      	mov	r0, r1
 80165d4:	f7f2 baa0 	b.w	8008b18 <vPortFree>

080165d8 <jpeg_get_large>:
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
 80165d8:	4608      	mov	r0, r1
 80165da:	f7f2 ba05 	b.w	80089e8 <pvPortMalloc>

080165de <jpeg_free_large>:
{
  return (void FAR *) JMALLOC(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
 80165de:	4608      	mov	r0, r1
 80165e0:	f7f2 ba9a 	b.w	8008b18 <vPortFree>

080165e4 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 80165e4:	4610      	mov	r0, r2
 80165e6:	4770      	bx	lr

080165e8 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 80165e8:	6803      	ldr	r3, [r0, #0]
 80165ea:	2233      	movs	r2, #51	@ 0x33
 80165ec:	615a      	str	r2, [r3, #20]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4718      	bx	r3

080165f2 <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 80165f2:	2000      	movs	r0, #0
 80165f4:	4770      	bx	lr

080165f6 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 80165f6:	4770      	bx	lr

080165f8 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 80165f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80165fc:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8016600:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016602:	f8d0 51e0 	ldr.w	r5, [r0, #480]	@ 0x1e0
{
 8016606:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8016608:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801660a:	f44f 78ff 	mov.w	r8, #510	@ 0x1fe
    cquantize->is_padded = FALSE;
 801660e:	bf16      	itet	ne
 8016610:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 8016612:	f44f 76ff 	moveq.w	r6, #510	@ 0x1fe
    pad = 0;
 8016616:	461e      	movne	r6, r3
 8016618:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801661a:	6843      	ldr	r3, [r0, #4]
 801661c:	f506 7280 	add.w	r2, r6, #256	@ 0x100
 8016620:	689f      	ldr	r7, [r3, #8]
 8016622:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8016624:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8016626:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801662a:	f105 0e1c 	add.w	lr, r5, #28

  for (i = 0; i < cinfo->out_color_components; i++) {
 801662e:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8016630:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016632:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8016634:	429a      	cmp	r2, r3
 8016636:	dc01      	bgt.n	801663c <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8016638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801663c:	f85e 1f04 	ldr.w	r1, [lr, #4]!
      cquantize->colorindex[i] += MAXJSAMPLE;
 8016640:	009f      	lsls	r7, r3, #2
 8016642:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8016644:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8016648:	b126      	cbz	r6, 8016654 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 801664a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801664e:	32ff      	adds	r2, #255	@ 0xff
 8016650:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8016654:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016658:	f101 0afe 	add.w	sl, r1, #254	@ 0xfe
    indexptr = cquantize->colorindex[i];
 801665c:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 801665e:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016660:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8016664:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016666:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 801666a:	428f      	cmp	r7, r1
 801666c:	db0a      	blt.n	8016684 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 801666e:	fb10 fb0c 	smulbb	fp, r0, ip
 8016672:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8016676:	3101      	adds	r1, #1
 8016678:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801667c:	d1f5      	bne.n	801666a <create_colorindex+0x72>
    if (pad)
 801667e:	b93e      	cbnz	r6, 8016690 <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016680:	3301      	adds	r3, #1
 8016682:	e7d6      	b.n	8016632 <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8016684:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016686:	fb08 a700 	mla	r7, r8, r0, sl
 801668a:	fb97 f7f9 	sdiv	r7, r7, r9
 801668e:	e7ec      	b.n	801666a <create_colorindex+0x72>
 8016690:	4611      	mov	r1, r2
 8016692:	f102 00ff 	add.w	r0, r2, #255	@ 0xff
 8016696:	f1a2 07ff 	sub.w	r7, r2, #255	@ 0xff
	indexptr[-j] = indexptr[0];
 801669a:	f892 9000 	ldrb.w	r9, [r2]
 801669e:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80166a2:	428f      	cmp	r7, r1
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 80166a4:	f892 90ff 	ldrb.w	r9, [r2, #255]	@ 0xff
 80166a8:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80166ac:	d1f5      	bne.n	801669a <create_colorindex+0xa2>
 80166ae:	e7e7      	b.n	8016680 <create_colorindex+0x88>

080166b0 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 80166b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 80166b4:	f8d0 c078 	ldr.w	ip, [r0, #120]	@ 0x78
{
 80166b8:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 80166ba:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 80166be:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 80166c2:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80166c6:	6f03      	ldr	r3, [r0, #112]	@ 0x70

  for (row = 0; row < num_rows; row++) {
 80166c8:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80166ca:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80166cc:	4540      	cmp	r0, r8
 80166ce:	db02      	blt.n	80166d6 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80166d0:	b003      	add	sp, #12
 80166d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 80166d6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80166da:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 80166dc:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 80166e0:	eb04 0a03 	add.w	sl, r4, r3
 80166e4:	4554      	cmp	r4, sl
 80166e6:	d10f      	bne.n	8016708 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 80166e8:	3001      	adds	r0, #1
 80166ea:	e7ef      	b.n	80166cc <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80166ec:	f815 b003 	ldrb.w	fp, [r5, r3]
 80166f0:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 80166f4:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80166f6:	f817 700b 	ldrb.w	r7, [r7, fp]
 80166fa:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 80166fc:	4563      	cmp	r3, ip
 80166fe:	dbf5      	blt.n	80166ec <color_quantize+0x3c>
 8016700:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8016702:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8016706:	e7ed      	b.n	80166e4 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8016708:	2300      	movs	r3, #0
      pixcode = 0;
 801670a:	461e      	mov	r6, r3
 801670c:	e7f6      	b.n	80166fc <color_quantize+0x4c>

0801670e <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 801670e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8016712:	f8d0 41e0 	ldr.w	r4, [r0, #480]	@ 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8016716:	f8d0 9070 	ldr.w	r9, [r0, #112]	@ 0x70

  for (row = 0; row < num_rows; row++) {
 801671a:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801671c:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801671e:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016722:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8016726:	4298      	cmp	r0, r3
 8016728:	db01      	blt.n	801672e <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 801672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801672e:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8016732:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8016736:	eb05 0a09 	add.w	sl, r5, r9
 801673a:	4555      	cmp	r5, sl
 801673c:	f104 0403 	add.w	r4, r4, #3
 8016740:	d101      	bne.n	8016746 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8016742:	3001      	adds	r0, #1
 8016744:	e7ef      	b.n	8016726 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8016746:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801674a:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 801674e:	f81c 6006 	ldrb.w	r6, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8016752:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8016756:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8016758:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 801675c:	f818 6006 	ldrb.w	r6, [r8, r6]
 8016760:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8016762:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8016766:	e7e8      	b.n	801673a <color_quantize3+0x2c>

08016768 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8016768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801676c:	469a      	mov	sl, r3
 801676e:	b08b      	sub	sp, #44	@ 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016770:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
{
 8016774:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8016778:	699a      	ldr	r2, [r3, #24]
 801677a:	6811      	ldr	r1, [r2, #0]
 801677c:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801677e:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016780:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8016782:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8016784:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016786:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8016788:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 801678a:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 801678c:	4551      	cmp	r1, sl
 801678e:	db02      	blt.n	8016796 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8016790:	b00b      	add	sp, #44	@ 0x2c
 8016792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8016796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    output_ptr = output_buf[row];
 8016798:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801679a:	9c07      	ldr	r4, [sp, #28]
 801679c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 80167a0:	0190      	lsls	r0, r2, #6
 80167a2:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 80167a6:	9002      	str	r0, [sp, #8]
 80167a8:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 80167ac:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 80167ae:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 80167b0:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	@ 0x38
 80167b4:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 80167b6:	9808      	ldr	r0, [sp, #32]
 80167b8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80167bc:	4575      	cmp	r5, lr
 80167be:	f100 0003 	add.w	r0, r0, #3
 80167c2:	d106      	bne.n	80167d2 <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80167c4:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80167c6:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80167c8:	3201      	adds	r2, #1
 80167ca:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80167ce:	631a      	str	r2, [r3, #48]	@ 0x30
  for (row = 0; row < num_rows; row++) {
 80167d0:	e7dc      	b.n	801678c <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80167d2:	9e02      	ldr	r6, [sp, #8]
 80167d4:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80167d8:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80167dc:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 80167de:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80167e0:	f858 7006 	ldr.w	r7, [r8, r6]
 80167e4:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80167e6:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 80167e8:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80167ec:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80167f0:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 80167f4:	f859 7006 	ldr.w	r7, [r9, r6]
 80167f8:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80167fa:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80167fc:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016800:	5996      	ldr	r6, [r2, r6]
 8016802:	f810 cc01 	ldrb.w	ip, [r0, #-1]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016806:	445f      	add	r7, fp
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016808:	9a06      	ldr	r2, [sp, #24]
 801680a:	4494      	add	ip, r2
 801680c:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8016810:	443e      	add	r6, r7
      *output_ptr++ = (JSAMPLE) pixcode;
 8016812:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8016816:	e7d1      	b.n	80167bc <quantize3_ord_dither+0x54>

08016818 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016818:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 801681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801681c:	3202      	adds	r2, #2
 801681e:	f8d0 61e0 	ldr.w	r6, [r0, #480]	@ 0x1e0
{
 8016822:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016824:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016826:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016828:	3640      	adds	r6, #64	@ 0x40
 801682a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801682c:	42bb      	cmp	r3, r7
 801682e:	dc00      	bgt.n	8016832 <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8016830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8016832:	6863      	ldr	r3, [r4, #4]
 8016834:	462a      	mov	r2, r5
 8016836:	2101      	movs	r1, #1
 8016838:	4620      	mov	r0, r4
 801683a:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801683c:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801683e:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8016840:	f846 0f04 	str.w	r0, [r6, #4]!
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016844:	e7f1      	b.n	801682a <alloc_fs_workspace+0x12>

08016846 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8016846:	4770      	bx	lr

08016848 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8016848:	6803      	ldr	r3, [r0, #0]
 801684a:	222f      	movs	r2, #47	@ 0x2f
 801684c:	615a      	str	r2, [r3, #20]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4718      	bx	r3
	...

08016854 <start_pass_1_quant>:
{
 8016854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016858:	f8d0 51e0 	ldr.w	r5, [r0, #480]	@ 0x1e0
{
 801685c:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 801685e:	692b      	ldr	r3, [r5, #16]
 8016860:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8016864:	696b      	ldr	r3, [r5, #20]
 8016866:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  switch (cinfo->dither_mode) {
 801686a:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 801686e:	2b01      	cmp	r3, #1
 8016870:	d00b      	beq.n	801688a <start_pass_1_quant+0x36>
 8016872:	2b02      	cmp	r3, #2
 8016874:	d05e      	beq.n	8016934 <start_pass_1_quant+0xe0>
 8016876:	2b00      	cmp	r3, #0
 8016878:	d174      	bne.n	8016964 <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 801687a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801687c:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 801687e:	bf0c      	ite	eq
 8016880:	4b3c      	ldreq	r3, [pc, #240]	@ (8016974 <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 8016882:	4b3d      	ldrne	r3, [pc, #244]	@ (8016978 <start_pass_1_quant+0x124>)
 8016884:	606b      	str	r3, [r5, #4]
}
 8016886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 801688a:	6f81      	ldr	r1, [r0, #120]	@ 0x78
      cquantize->pub.color_quantize = quantize3_ord_dither;
 801688c:	4b3b      	ldr	r3, [pc, #236]	@ (801697c <start_pass_1_quant+0x128>)
 801688e:	4a3c      	ldr	r2, [pc, #240]	@ (8016980 <start_pass_1_quant+0x12c>)
 8016890:	2903      	cmp	r1, #3
 8016892:	bf08      	it	eq
 8016894:	4613      	moveq	r3, r2
 8016896:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8016898:	2300      	movs	r3, #0
 801689a:	632b      	str	r3, [r5, #48]	@ 0x30
    if (! cquantize->is_padded)
 801689c:	69eb      	ldr	r3, [r5, #28]
 801689e:	b90b      	cbnz	r3, 80168a4 <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 80168a0:	f7ff feaa 	bl	80165f8 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 80168a4:	6b6d      	ldr	r5, [r5, #52]	@ 0x34
 80168a6:	2d00      	cmp	r5, #0
 80168a8:	d1ed      	bne.n	8016886 <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80168aa:	f8d4 71e0 	ldr.w	r7, [r4, #480]	@ 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 80168ae:	f107 081c 	add.w	r8, r7, #28
 80168b2:	4646      	mov	r6, r8
 80168b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80168b6:	429d      	cmp	r5, r3
 80168b8:	dae5      	bge.n	8016886 <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80168ba:	f856 9f04 	ldr.w	r9, [r6, #4]!
    for (j = 0; j < i; j++) {
 80168be:	4642      	mov	r2, r8
 80168c0:	2300      	movs	r3, #0
 80168c2:	429d      	cmp	r5, r3
 80168c4:	d007      	beq.n	80168d6 <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 80168c6:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80168ca:	4589      	cmp	r9, r1
 80168cc:	d130      	bne.n	8016930 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80168ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80168d2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    if (odither == NULL)	/* need a new table? */
 80168d4:	bb48      	cbnz	r0, 801692a <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80168d6:	6863      	ldr	r3, [r4, #4]
 80168d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80168dc:	2101      	movs	r1, #1
 80168de:	4620      	mov	r0, r4
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 80168e4:	f109 32ff 	add.w	r2, r9, #4294967295
 80168e8:	f100 013c 	add.w	r1, r0, #60	@ 0x3c
 80168ec:	f8df c098 	ldr.w	ip, [pc, #152]	@ 8016988 <start_pass_1_quant+0x134>
 80168f0:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 80168f2:	f200 4a3c 	addw	sl, r0, #1084	@ 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 80168f6:	f1a1 0e40 	sub.w	lr, r1, #64	@ 0x40
    for (j = 0; j < i; j++) {
 80168fa:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 80168fc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8016906:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 801690a:	bf45      	ittet	mi
 801690c:	425b      	negmi	r3, r3
 801690e:	fb93 f3f2 	sdivmi	r3, r3, r2
 8016912:	fb93 f3f2 	sdivpl	r3, r3, r2
 8016916:	425b      	negmi	r3, r3
 8016918:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 801691c:	458e      	cmp	lr, r1
 801691e:	d1ed      	bne.n	80168fc <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8016920:	3140      	adds	r1, #64	@ 0x40
 8016922:	f10c 0c10 	add.w	ip, ip, #16
 8016926:	4551      	cmp	r1, sl
 8016928:	d1e5      	bne.n	80168f6 <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801692a:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 801692c:	6170      	str	r0, [r6, #20]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801692e:	e7c1      	b.n	80168b4 <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8016930:	3301      	adds	r3, #1
 8016932:	e7c6      	b.n	80168c2 <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8016934:	4b13      	ldr	r3, [pc, #76]	@ (8016984 <start_pass_1_quant+0x130>)
 8016936:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8016938:	2300      	movs	r3, #0
 801693a:	656b      	str	r3, [r5, #84]	@ 0x54
    if (cquantize->fserrors[0] == NULL)
 801693c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801693e:	b90b      	cbnz	r3, 8016944 <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8016940:	f7ff ff6a 	bl	8016818 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016944:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016946:	3540      	adds	r5, #64	@ 0x40
    for (i = 0; i < cinfo->out_color_components; i++)
 8016948:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801694a:	3202      	adds	r2, #2
 801694c:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 801694e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016950:	42bb      	cmp	r3, r7
 8016952:	dd98      	ble.n	8016886 <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8016954:	4632      	mov	r2, r6
 8016956:	2100      	movs	r1, #0
 8016958:	f855 0f04 	ldr.w	r0, [r5, #4]!
    for (i = 0; i < cinfo->out_color_components; i++)
 801695c:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801695e:	f013 fba7 	bl	802a0b0 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8016962:	e7f4      	b.n	801694e <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8016964:	6803      	ldr	r3, [r0, #0]
 8016966:	2231      	movs	r2, #49	@ 0x31
}
 8016968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801696c:	615a      	str	r2, [r3, #20]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4718      	bx	r3
 8016972:	bf00      	nop
 8016974:	0801670f 	.word	0x0801670f
 8016978:	080166b1 	.word	0x080166b1
 801697c:	08016ac5 	.word	0x08016ac5
 8016980:	08016769 	.word	0x08016769
 8016984:	0801698d 	.word	0x0801698d
 8016988:	0802ee58 	.word	0x0802ee58

0801698c <quantize_fs_dither>:
{
 801698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016990:	b091      	sub	sp, #68	@ 0x44
  JDIMENSION width = cinfo->output_width;
 8016992:	6f05      	ldr	r5, [r0, #112]	@ 0x70
  int nc = cinfo->out_color_components;
 8016994:	f8d0 9078 	ldr.w	r9, [r0, #120]	@ 0x78
 8016998:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801699c:	f8d0 41e0 	ldr.w	r4, [r0, #480]	@ 0x1e0
{
 80169a0:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80169a4:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80169a8:	930a      	str	r3, [sp, #40]	@ 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80169aa:	1e6b      	subs	r3, r5, #1
 80169ac:	9305      	str	r3, [sp, #20]
 80169ae:	fb03 f309 	mul.w	r3, r3, r9
 80169b2:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80169b4:	1c6b      	adds	r3, r5, #1
 80169b6:	005b      	lsls	r3, r3, #1
 80169b8:	9309      	str	r3, [sp, #36]	@ 0x24
  for (row = 0; row < num_rows; row++) {
 80169ba:	2300      	movs	r3, #0
 80169bc:	9300      	str	r3, [sp, #0]
 80169be:	9a00      	ldr	r2, [sp, #0]
 80169c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169c2:	429a      	cmp	r2, r3
 80169c4:	db02      	blt.n	80169cc <quantize_fs_dither+0x40>
}
 80169c6:	b011      	add	sp, #68	@ 0x44
 80169c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80169cc:	2100      	movs	r1, #0
 80169ce:	462a      	mov	r2, r5
 80169d0:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80169d4:	f013 fb6c 	bl	802a0b0 <memset>
    for (ci = 0; ci < nc; ci++) {
 80169d8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80169dc:	2100      	movs	r1, #0
 80169de:	9304      	str	r3, [sp, #16]
	dirnc = -nc;
 80169e0:	f1c9 0300 	rsb	r3, r9, #0
 80169e4:	930f      	str	r3, [sp, #60]	@ 0x3c
    for (ci = 0; ci < nc; ci++) {
 80169e6:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 80169e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    for (ci = 0; ci < nc; ci++) {
 80169ea:	db06      	blt.n	80169fa <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80169ec:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 80169f0:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80169f2:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 80169f4:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80169f6:	6562      	str	r2, [r4, #84]	@ 0x54
  for (row = 0; row < num_rows; row++) {
 80169f8:	e7e0      	b.n	80169bc <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 80169fa:	9800      	ldr	r0, [sp, #0]
 80169fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80169fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 8016a02:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 8016a06:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016a0a:	9b04      	ldr	r3, [sp, #16]
 8016a0c:	f853 cf04 	ldr.w	ip, [r3, #4]!
 8016a10:	9304      	str	r3, [sp, #16]
      if (cquantize->on_odd_row) {
 8016a12:	b312      	cbz	r2, 8016a5a <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8016a14:	9b08      	ldr	r3, [sp, #32]
 8016a16:	449e      	add	lr, r3
	output_ptr += width-1;
 8016a18:	9b05      	ldr	r3, [sp, #20]
 8016a1a:	4418      	add	r0, r3
	dirnc = -nc;
 8016a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a1e:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a22:	449c      	add	ip, r3
	dir = -1;
 8016a24:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8016a28:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8016a2a:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8016a2c:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8016a2e:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8016a30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a34:	930b      	str	r3, [sp, #44]	@ 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8016a36:	6923      	ldr	r3, [r4, #16]
 8016a38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a3c:	930c      	str	r3, [sp, #48]	@ 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016a3e:	9b02      	ldr	r3, [sp, #8]
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8016a44:	2300      	movs	r3, #0
      cur = 0;
 8016a46:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8016a48:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8016a4a:	9a03      	ldr	r2, [sp, #12]
 8016a4c:	b94a      	cbnz	r2, 8016a62 <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8016a4e:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8016a50:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8016a52:	436a      	muls	r2, r5
 8016a54:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8016a58:	e7c5      	b.n	80169e6 <quantize_fs_dither+0x5a>
	dir = 1;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8016a60:	e7e2      	b.n	8016a28 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016a62:	9a01      	ldr	r2, [sp, #4]
 8016a64:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8016a68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016a6a:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8016a6c:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016a70:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8016a74:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016a78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8016a7a:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8016a7e:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016a82:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8016a86:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016a88:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016a8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8016a8c:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016a90:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016a94:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016a96:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016a9a:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8016a9c:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8016a9e:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8016aa2:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8016aa4:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016aa6:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8016aa8:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016aac:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016aae:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8016ab0:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8016ab2:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8016ab4:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8016ab6:	4443      	add	r3, r8
	belowerr = bnexterr;
 8016ab8:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8016abc:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016ac0:	4417      	add	r7, r2
 8016ac2:	e7c2      	b.n	8016a4a <quantize_fs_dither+0xbe>

08016ac4 <quantize_ord_dither>:
{
 8016ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac8:	b089      	sub	sp, #36	@ 0x24
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016aca:	f8d0 61e0 	ldr.w	r6, [r0, #480]	@ 0x1e0
  int nc = cinfo->out_color_components;
 8016ace:	f8d0 8078 	ldr.w	r8, [r0, #120]	@ 0x78
  JDIMENSION width = cinfo->output_width;
 8016ad2:	1f14      	subs	r4, r2, #4
  for (row = 0; row < num_rows; row++) {
 8016ad4:	2500      	movs	r5, #0
{
 8016ad6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8016ada:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8016adc:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016ade:	9b07      	ldr	r3, [sp, #28]
 8016ae0:	429d      	cmp	r5, r3
 8016ae2:	db02      	blt.n	8016aea <quantize_ord_dither+0x26>
}
 8016ae4:	b009      	add	sp, #36	@ 0x24
 8016ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016aea:	9a01      	ldr	r2, [sp, #4]
 8016aec:	2100      	movs	r1, #0
 8016aee:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8016af2:	f013 fadd 	bl	802a0b0 <memset>
    row_index = cquantize->row_index;
 8016af6:	46b4      	mov	ip, r6
 8016af8:	f85c 3f30 	ldr.w	r3, [ip, #48]!
      dither = cquantize->odither[ci][row_index];
 8016afc:	019a      	lsls	r2, r3, #6
 8016afe:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8016b00:	2200      	movs	r2, #0
 8016b02:	4542      	cmp	r2, r8
 8016b04:	db05      	blt.n	8016b12 <quantize_ord_dither+0x4e>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016b06:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8016b08:	3501      	adds	r5, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016b0a:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8016b0e:	6333      	str	r3, [r6, #48]	@ 0x30
  for (row = 0; row < num_rows; row++) {
 8016b10:	e7e5      	b.n	8016ade <quantize_ord_dither+0x1a>
      input_ptr = input_buf[row] + ci;
 8016b12:	9906      	ldr	r1, [sp, #24]
 8016b14:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8016b18:	69b1      	ldr	r1, [r6, #24]
      input_ptr = input_buf[row] + ci;
 8016b1a:	eb00 0e02 	add.w	lr, r0, r2
      colorindex_ci = cquantize->colorindex[ci];
 8016b1e:	6820      	ldr	r0, [r4, #0]
 8016b20:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b24:	9104      	str	r1, [sp, #16]
      dither = cquantize->odither[ci][row_index];
 8016b26:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 8016b2a:	9102      	str	r1, [sp, #8]
      for (col = width; col > 0; col--) {
 8016b2c:	9901      	ldr	r1, [sp, #4]
 8016b2e:	4401      	add	r1, r0
 8016b30:	9105      	str	r1, [sp, #20]
      col_index = 0;
 8016b32:	2100      	movs	r1, #0
      for (col = width; col > 0; col--) {
 8016b34:	9f05      	ldr	r7, [sp, #20]
 8016b36:	42b8      	cmp	r0, r7
 8016b38:	d101      	bne.n	8016b3e <quantize_ord_dither+0x7a>
    for (ci = 0; ci < nc; ci++) {
 8016b3a:	3201      	adds	r2, #1
 8016b3c:	e7e1      	b.n	8016b02 <quantize_ord_dither+0x3e>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016b3e:	9f02      	ldr	r7, [sp, #8]
 8016b40:	f89e a000 	ldrb.w	sl, [lr]
	input_ptr += nc;
 8016b44:	44c6      	add	lr, r8
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016b46:	eb07 0b81 	add.w	fp, r7, r1, lsl #2
 8016b4a:	9f03      	ldr	r7, [sp, #12]
 8016b4c:	f890 9000 	ldrb.w	r9, [r0]
	col_index = (col_index + 1) & ODITHER_MASK;
 8016b50:	3101      	adds	r1, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016b52:	f85b b007 	ldr.w	fp, [fp, r7]
 8016b56:	9f04      	ldr	r7, [sp, #16]
	col_index = (col_index + 1) & ODITHER_MASK;
 8016b58:	f001 010f 	and.w	r1, r1, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016b5c:	44ba      	add	sl, r7
 8016b5e:	f81a a00b 	ldrb.w	sl, [sl, fp]
 8016b62:	44d1      	add	r9, sl
 8016b64:	f800 9b01 	strb.w	r9, [r0], #1
      for (col = width; col > 0; col--) {
 8016b68:	e7e4      	b.n	8016b34 <quantize_ord_dither+0x70>
	...

08016b6c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016b6c:	6843      	ldr	r3, [r0, #4]
 8016b6e:	2258      	movs	r2, #88	@ 0x58
 8016b70:	2101      	movs	r1, #1
 8016b72:	681b      	ldr	r3, [r3, #0]
{
 8016b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b78:	b085      	sub	sp, #20
 8016b7a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016b7c:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8016b7e:	4b68      	ldr	r3, [pc, #416]	@ (8016d20 <jinit_1pass_quantizer+0x1b4>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016b80:	f8c4 01e0 	str.w	r0, [r4, #480]	@ 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8016b84:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8016b86:	4b67      	ldr	r3, [pc, #412]	@ (8016d24 <jinit_1pass_quantizer+0x1b8>)
 8016b88:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8016b8a:	4b67      	ldr	r3, [pc, #412]	@ (8016d28 <jinit_1pass_quantizer+0x1bc>)
 8016b8c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8016b8e:	2300      	movs	r3, #0
 8016b90:	6443      	str	r3, [r0, #68]	@ 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8016b92:	6343      	str	r3, [r0, #52]	@ 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8016b94:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016b96:	2b04      	cmp	r3, #4
 8016b98:	dd07      	ble.n	8016baa <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8016b9a:	6823      	ldr	r3, [r4, #0]
 8016b9c:	2039      	movs	r0, #57	@ 0x39
 8016b9e:	2204      	movs	r2, #4
 8016ba0:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8016baa:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8016bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016bb0:	dd08      	ble.n	8016bc4 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	213b      	movs	r1, #59	@ 0x3b
 8016bb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016bba:	4620      	mov	r0, r4
 8016bbc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016bc4:	f8d4 61e0 	ldr.w	r6, [r4, #480]	@ 0x1e0
  iroot = 1;
 8016bc8:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8016bca:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8016bce:	f106 0920 	add.w	r9, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8016bd2:	f8d4 a060 	ldr.w	sl, [r4, #96]	@ 0x60
    iroot++;
 8016bd6:	469b      	mov	fp, r3
 8016bd8:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8016bda:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8016bdc:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8016bde:	4588      	cmp	r8, r1
 8016be0:	dc49      	bgt.n	8016c76 <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8016be2:	4592      	cmp	sl, r2
 8016be4:	daf7      	bge.n	8016bd6 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8016be6:	f1bb 0f01 	cmp.w	fp, #1
 8016bea:	d106      	bne.n	8016bfa <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	213a      	movs	r1, #58	@ 0x3a
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	4798      	blx	r3
 8016bfa:	f106 071c 	add.w	r7, r6, #28
    for (i = 1; i < nc; i++)
 8016bfe:	2300      	movs	r3, #0
 8016c00:	2501      	movs	r5, #1
 8016c02:	463a      	mov	r2, r7
  for (i = 0; i < nc; i++) {
 8016c04:	4598      	cmp	r8, r3
 8016c06:	dc39      	bgt.n	8016c7c <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016c08:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8016d2c <jinit_1pass_quantizer+0x1c0>
    changed = FALSE;
 8016c0c:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8016c0e:	460b      	mov	r3, r1
 8016c10:	4598      	cmp	r8, r3
 8016c12:	dc39      	bgt.n	8016c88 <jinit_1pass_quantizer+0x11c>
  } while (changed);
 8016c14:	2900      	cmp	r1, #0
 8016c16:	d1f9      	bne.n	8016c0c <jinit_1pass_quantizer+0xa0>
  if (cinfo->out_color_components == 3)
 8016c18:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016c1a:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8016c1c:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016c1e:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8016c20:	d149      	bne.n	8016cb6 <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016c22:	619d      	str	r5, [r3, #24]
 8016c24:	6a31      	ldr	r1, [r6, #32]
 8016c26:	61d9      	str	r1, [r3, #28]
 8016c28:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8016c2a:	6219      	str	r1, [r3, #32]
 8016c2c:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8016c2e:	6259      	str	r1, [r3, #36]	@ 0x24
 8016c30:	2160      	movs	r1, #96	@ 0x60
 8016c32:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016c34:	2101      	movs	r1, #1
 8016c36:	4620      	mov	r0, r4
 8016c38:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8016c3a:	6863      	ldr	r3, [r4, #4]
 8016c3c:	462a      	mov	r2, r5
 8016c3e:	2101      	movs	r1, #1
 8016c40:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8016c44:	4620      	mov	r0, r4
 8016c46:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016c48:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c4a:	46a8      	mov	r8, r5
 8016c4c:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8016c4e:	9001      	str	r0, [sp, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c50:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016c52:	429a      	cmp	r2, r3
 8016c54:	db33      	blt.n	8016cbe <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 8016c56:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8016c58:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8016c5a:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8016c5e:	f7ff fccb 	bl	80165f8 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8016c62:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8016c66:	2b02      	cmp	r3, #2
 8016c68:	d156      	bne.n	8016d18 <jinit_1pass_quantizer+0x1ac>
    alloc_fs_workspace(cinfo);
 8016c6a:	4620      	mov	r0, r4
}
 8016c6c:	b005      	add	sp, #20
 8016c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8016c72:	f7ff bdd1 	b.w	8016818 <alloc_fs_workspace>
      temp *= iroot;
 8016c76:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8016c78:	3101      	adds	r1, #1
 8016c7a:	e7b0      	b.n	8016bde <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8016c7c:	fb0b f505 	mul.w	r5, fp, r5
  for (i = 0; i < nc; i++) {
 8016c80:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8016c82:	f842 bf04 	str.w	fp, [r2, #4]!
  for (i = 0; i < nc; i++) {
 8016c86:	e7bd      	b.n	8016c04 <jinit_1pass_quantizer+0x98>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016c88:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8016c8c:	2a02      	cmp	r2, #2
 8016c8e:	bf0c      	ite	eq
 8016c90:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8016c94:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8016c96:	f859 b020 	ldr.w	fp, [r9, r0, lsl #2]
 8016c9a:	fb95 f2fb 	sdiv	r2, r5, fp
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8016c9e:	fb0b 2202 	mla	r2, fp, r2, r2
 8016ca2:	f10b 0e01 	add.w	lr, fp, #1
      if (temp > (long) max_colors)
 8016ca6:	4592      	cmp	sl, r2
 8016ca8:	dbb4      	blt.n	8016c14 <jinit_1pass_quantizer+0xa8>
    for (i = 0; i < nc; i++) {
 8016caa:	3301      	adds	r3, #1
 8016cac:	4615      	mov	r5, r2
      changed = TRUE;
 8016cae:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8016cb0:	f849 e020 	str.w	lr, [r9, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8016cb4:	e7ac      	b.n	8016c10 <jinit_1pass_quantizer+0xa4>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016cb6:	2161      	movs	r1, #97	@ 0x61
 8016cb8:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8016cbc:	e7ba      	b.n	8016c34 <jinit_1pass_quantizer+0xc8>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016cbe:	f857 af04 	ldr.w	sl, [r7, #4]!
      val = output_value(cinfo, i, j, nci-1);
 8016cc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016cc6:	9302      	str	r3, [sp, #8]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016cc8:	105b      	asrs	r3, r3, #1
    blksize = blkdist / nci;
 8016cca:	fb98 f9fa 	sdiv	r9, r8, sl
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016cce:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	469b      	mov	fp, r3
 8016cd4:	459a      	cmp	sl, r3
 8016cd6:	dc02      	bgt.n	8016cde <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016cd8:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8016cda:	46c8      	mov	r8, r9
 8016cdc:	e7b8      	b.n	8016c50 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016cde:	9803      	ldr	r0, [sp, #12]
 8016ce0:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016ce4:	46dc      	mov	ip, fp
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016ce6:	4401      	add	r1, r0
 8016ce8:	9802      	ldr	r0, [sp, #8]
 8016cea:	fb91 f1f0 	sdiv	r1, r1, r0
 8016cee:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016cf0:	45ac      	cmp	ip, r5
 8016cf2:	db0e      	blt.n	8016d12 <jinit_1pass_quantizer+0x1a6>
    for (j = 0; j < nci; j++) {
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	44cb      	add	fp, r9
 8016cf8:	e7ec      	b.n	8016cd4 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016cfa:	9901      	ldr	r1, [sp, #4]
 8016cfc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016d00:	4471      	add	r1, lr
	for (k = 0; k < blksize; k++)
 8016d02:	f10e 0e01 	add.w	lr, lr, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016d06:	f801 000c 	strb.w	r0, [r1, ip]
	for (k = 0; k < blksize; k++)
 8016d0a:	45f1      	cmp	r9, lr
 8016d0c:	dcf5      	bgt.n	8016cfa <jinit_1pass_quantizer+0x18e>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016d0e:	44c4      	add	ip, r8
 8016d10:	e7ee      	b.n	8016cf0 <jinit_1pass_quantizer+0x184>
	for (k = 0; k < blksize; k++)
 8016d12:	f04f 0e00 	mov.w	lr, #0
 8016d16:	e7f8      	b.n	8016d0a <jinit_1pass_quantizer+0x19e>
}
 8016d18:	b005      	add	sp, #20
 8016d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d1e:	bf00      	nop
 8016d20:	08016855 	.word	0x08016855
 8016d24:	08016847 	.word	0x08016847
 8016d28:	08016849 	.word	0x08016849
 8016d2c:	0802ee4c 	.word	0x0802ee4c

08016d30 <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8016d30:	f8d0 21e0 	ldr.w	r2, [r0, #480]	@ 0x1e0
{
 8016d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register hist3d histogram = cquantize->histogram;
 8016d38:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8016d3c:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8016d3e:	f8d0 e070 	ldr.w	lr, [r0, #112]	@ 0x70
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
 8016d42:	f64f 78ff 	movw	r8, #65535	@ 0xffff
  for (row = 0; row < num_rows; row++) {
 8016d46:	429c      	cmp	r4, r3
 8016d48:	db01      	blt.n	8016d4e <prescan_quantize+0x1e>
      ptr += 3;
    }
  }
}
 8016d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (col = width; col > 0; col--) {
 8016d4e:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8016d52:	4677      	mov	r7, lr
 8016d54:	3003      	adds	r0, #3
 8016d56:	b90f      	cbnz	r7, 8016d5c <prescan_quantize+0x2c>
  for (row = 0; row < num_rows; row++) {
 8016d58:	3401      	adds	r4, #1
 8016d5a:	e7f4      	b.n	8016d46 <prescan_quantize+0x16>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8016d5c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
    for (col = width; col > 0; col--) {
 8016d60:	3f01      	subs	r7, #1
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8016d62:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8016d66:	3003      	adds	r0, #3
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8016d68:	08ed      	lsrs	r5, r5, #3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8016d6a:	f810 6c04 	ldrb.w	r6, [r0, #-4]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8016d6e:	0892      	lsrs	r2, r2, #2
 8016d70:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8016d74:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8016d76:	eb05 1582 	add.w	r5, r5, r2, lsl #6
      if (++(*histp) <= 0)
 8016d7a:	f835 2016 	ldrh.w	r2, [r5, r6, lsl #1]
 8016d7e:	3201      	adds	r2, #1
 8016d80:	b292      	uxth	r2, r2
	(*histp)--;
 8016d82:	2a00      	cmp	r2, #0
 8016d84:	bf08      	it	eq
 8016d86:	4642      	moveq	r2, r8
 8016d88:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 8016d8c:	e7e3      	b.n	8016d56 <prescan_quantize+0x26>

08016d8e <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8016d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d92:	f2ad 5dcc 	subw	sp, sp, #1484	@ 0x5cc
 8016d96:	4680      	mov	r8, r0
  for (i = 0; i < numcolors; i++) {
 8016d98:	2500      	movs	r5, #0
{
 8016d9a:	930b      	str	r3, [sp, #44]	@ 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8016d9c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8016da0:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8016da2:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8016da4:	0140      	lsls	r0, r0, #5
{
 8016da6:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  c0 >>= BOX_C0_LOG;
 8016daa:	1089      	asrs	r1, r1, #2
  hist3d histogram = cquantize->histogram;
 8016dac:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 8016dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8016db0:	f100 0a02 	add.w	sl, r0, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8016db4:	0149      	lsls	r1, r1, #5
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8016db6:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8016db8:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8016dba:	f8d8 3084 	ldr.w	r3, [r8, #132]	@ 0x84
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8016dbe:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8016dc2:	311c      	adds	r1, #28
  int numcolors = cinfo->actual_number_of_colors;
 8016dc4:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016dc6:	0164      	lsls	r4, r4, #5
  centerc0 = (minc0 + maxc0) >> 1;
 8016dc8:	eb09 0301 	add.w	r3, r9, r1
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016dcc:	f104 0b04 	add.w	fp, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8016dd0:	341c      	adds	r4, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8016dd2:	105b      	asrs	r3, r3, #1
 8016dd4:	9303      	str	r3, [sp, #12]
  centerc1 = (minc1 + maxc1) >> 1;
 8016dd6:	eb0a 0300 	add.w	r3, sl, r0
 8016dda:	105b      	asrs	r3, r3, #1
 8016ddc:	9304      	str	r3, [sp, #16]
  centerc2 = (minc2 + maxc2) >> 1;
 8016dde:	eb0b 0304 	add.w	r3, fp, r4
 8016de2:	105b      	asrs	r3, r3, #1
 8016de4:	9305      	str	r3, [sp, #20]
  minmaxdist = 0x7FFFFFFFL;
 8016de6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016dea:	9301      	str	r3, [sp, #4]
  for (i = 0; i < numcolors; i++) {
 8016dec:	9b02      	ldr	r3, [sp, #8]
 8016dee:	42ab      	cmp	r3, r5
 8016df0:	dc42      	bgt.n	8016e78 <fill_inverse_cmap+0xea>
  ncolors = 0;
 8016df2:	2200      	movs	r2, #0
 8016df4:	a972      	add	r1, sp, #456	@ 0x1c8
      colorlist[ncolors++] = (JSAMPLE) i;
 8016df6:	a832      	add	r0, sp, #200	@ 0xc8
  for (i = 0; i < numcolors; i++) {
 8016df8:	4613      	mov	r3, r2
 8016dfa:	9c02      	ldr	r4, [sp, #8]
 8016dfc:	429c      	cmp	r4, r3
 8016dfe:	f300 809c 	bgt.w	8016f3a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016e02:	2380      	movs	r3, #128	@ 0x80
  bptr = bestdist;
 8016e04:	a972      	add	r1, sp, #456	@ 0x1c8
    *bptr++ = 0x7FFFFFFFL;
 8016e06:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016e0a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8016e0c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016e10:	d1fb      	bne.n	8016e0a <fill_inverse_cmap+0x7c>
 8016e12:	a932      	add	r1, sp, #200	@ 0xc8
 8016e14:	9108      	str	r1, [sp, #32]
  for (i = 0; i < numcolors; i++) {
 8016e16:	9302      	str	r3, [sp, #8]
 8016e18:	9b02      	ldr	r3, [sp, #8]
 8016e1a:	4293      	cmp	r3, r2
 8016e1c:	f040 8096 	bne.w	8016f4c <fill_inverse_cmap+0x1be>
  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8016e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 8016e22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8016e24:	f023 0003 	bic.w	r0, r3, #3
 8016e28:	9b06      	ldr	r3, [sp, #24]
  c2 <<= BOX_C2_LOG;
 8016e2a:	f022 0203 	bic.w	r2, r2, #3
 8016e2e:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  c1 <<= BOX_C1_LOG;
 8016e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016e34:	0052      	lsls	r2, r2, #1
 8016e36:	f023 0307 	bic.w	r3, r3, #7
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8016e40:	3010      	adds	r0, #16
  cptr = bestcolor;
 8016e42:	ab12      	add	r3, sp, #72	@ 0x48
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8016e44:	f854 1b04 	ldr.w	r1, [r4], #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8016e48:	f103 0c20 	add.w	ip, r3, #32
 8016e4c:	4411      	add	r1, r2
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8016e4e:	460d      	mov	r5, r1
 8016e50:	461f      	mov	r7, r3
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8016e52:	f101 0e08 	add.w	lr, r1, #8
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8016e56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016e5a:	3601      	adds	r6, #1
 8016e5c:	f825 6b02 	strh.w	r6, [r5], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8016e60:	4575      	cmp	r5, lr
 8016e62:	d1f8      	bne.n	8016e56 <fill_inverse_cmap+0xc8>
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8016e64:	3304      	adds	r3, #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8016e66:	3140      	adds	r1, #64	@ 0x40
 8016e68:	4563      	cmp	r3, ip
 8016e6a:	d1f0      	bne.n	8016e4e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8016e6c:	42a0      	cmp	r0, r4
 8016e6e:	d1e9      	bne.n	8016e44 <fill_inverse_cmap+0xb6>
      }
    }
  }
}
 8016e70:	f20d 5dcc 	addw	sp, sp, #1484	@ 0x5cc
 8016e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8016e78:	f8d8 7088 	ldr.w	r7, [r8, #136]	@ 0x88
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8016e80:	4591      	cmp	r9, r2
 8016e82:	dd2b      	ble.n	8016edc <fill_inverse_cmap+0x14e>
      tdist = (x - minc0) * C0_SCALE;
 8016e84:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8016e88:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8016e8a:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8016e8e:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8016e94:	459a      	cmp	sl, r3
 8016e96:	dd34      	ble.n	8016f02 <fill_inverse_cmap+0x174>
      tdist = (x - minc1) * C1_SCALE;
 8016e98:	eba3 0e0a 	sub.w	lr, r3, sl
 8016e9c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016ea0:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8016ea4:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8016ea6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8016eaa:	fb03 2303 	mla	r3, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8016eae:	68ba      	ldr	r2, [r7, #8]
 8016eb0:	5d52      	ldrb	r2, [r2, r5]
    if (x < minc2) {
 8016eb2:	4593      	cmp	fp, r2
 8016eb4:	dd34      	ble.n	8016f20 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 8016eb6:	eba2 070b 	sub.w	r7, r2, fp
 8016eba:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016ebc:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8016ec0:	1b12      	subs	r2, r2, r4
	tdist = (x - minc2) * C2_SCALE;
 8016ec2:	0052      	lsls	r2, r2, #1
	max_dist += tdist*tdist;
 8016ec4:	fb02 3302 	mla	r3, r2, r2, r3
    mindist[i] = min_dist;	/* save away the results */
 8016ec8:	aa72      	add	r2, sp, #456	@ 0x1c8
 8016eca:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8016ece:	3501      	adds	r5, #1
 8016ed0:	9a01      	ldr	r2, [sp, #4]
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	bfa8      	it	ge
 8016ed6:	461a      	movge	r2, r3
 8016ed8:	9201      	str	r2, [sp, #4]
 8016eda:	e787      	b.n	8016dec <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8016edc:	4291      	cmp	r1, r2
 8016ede:	da06      	bge.n	8016eee <fill_inverse_cmap+0x160>
      tdist = (x - maxc0) * C0_SCALE;
 8016ee0:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8016ee4:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8016ee8:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8016eec:	e7cf      	b.n	8016e8e <fill_inverse_cmap+0x100>
      if (x <= centerc0) {
 8016eee:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 8016ef0:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8016ef4:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8016ef6:	bfac      	ite	ge
 8016ef8:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8016efa:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8016efe:	4352      	muls	r2, r2
 8016f00:	e7c6      	b.n	8016e90 <fill_inverse_cmap+0x102>
    } else if (x > maxc1) {
 8016f02:	4298      	cmp	r0, r3
 8016f04:	da08      	bge.n	8016f18 <fill_inverse_cmap+0x18a>
      tdist = (x - maxc1) * C1_SCALE;
 8016f06:	eba3 0e00 	sub.w	lr, r3, r0
 8016f0a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016f0e:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8016f12:	eba3 030a 	sub.w	r3, r3, sl
 8016f16:	e7c6      	b.n	8016ea6 <fill_inverse_cmap+0x118>
      if (x <= centerc1) {
 8016f18:	9e04      	ldr	r6, [sp, #16]
 8016f1a:	429e      	cmp	r6, r3
 8016f1c:	dbf9      	blt.n	8016f12 <fill_inverse_cmap+0x184>
 8016f1e:	e7c1      	b.n	8016ea4 <fill_inverse_cmap+0x116>
    } else if (x > maxc2) {
 8016f20:	4294      	cmp	r4, r2
 8016f22:	da06      	bge.n	8016f32 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8016f24:	1b17      	subs	r7, r2, r4
 8016f26:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016f28:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8016f2c:	eba2 020b 	sub.w	r2, r2, fp
 8016f30:	e7c7      	b.n	8016ec2 <fill_inverse_cmap+0x134>
      if (x <= centerc2) {
 8016f32:	9e05      	ldr	r6, [sp, #20]
 8016f34:	4296      	cmp	r6, r2
 8016f36:	dbf9      	blt.n	8016f2c <fill_inverse_cmap+0x19e>
 8016f38:	e7c2      	b.n	8016ec0 <fill_inverse_cmap+0x132>
    if (mindist[i] <= minmaxdist)
 8016f3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8016f3e:	9d01      	ldr	r5, [sp, #4]
 8016f40:	42a5      	cmp	r5, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8016f42:	bfa4      	itt	ge
 8016f44:	5483      	strbge	r3, [r0, r2]
 8016f46:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8016f48:	3301      	adds	r3, #1
 8016f4a:	e756      	b.n	8016dfa <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8016f4c:	9b08      	ldr	r3, [sp, #32]
    cptr = bestcolor;
 8016f4e:	f10d 0e48 	add.w	lr, sp, #72	@ 0x48
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8016f52:	f8d8 1088 	ldr.w	r1, [r8, #136]	@ 0x88
    icolor = GETJSAMPLE(colorlist[i]);
 8016f56:	f813 4b01 	ldrb.w	r4, [r3], #1
 8016f5a:	9308      	str	r3, [sp, #32]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8016f5c:	680b      	ldr	r3, [r1, #0]
 8016f5e:	5d1d      	ldrb	r5, [r3, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8016f60:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8016f62:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8016f64:	eba9 0505 	sub.w	r5, r9, r5
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8016f68:	5d18      	ldrb	r0, [r3, r4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8016f6a:	5d09      	ldrb	r1, [r1, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8016f6c:	ebaa 0000 	sub.w	r0, sl, r0
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8016f70:	ebab 0101 	sub.w	r1, fp, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8016f74:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8016f78:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8016f7a:	435b      	muls	r3, r3
 8016f7c:	fb05 3305 	mla	r3, r5, r5, r3
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8016f80:	3504      	adds	r5, #4
    dist0 += inc2*inc2;
 8016f82:	fb01 3301 	mla	r3, r1, r1, r3
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8016f86:	3108      	adds	r1, #8
    dist0 += inc2*inc2;
 8016f88:	9304      	str	r3, [sp, #16]
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8016f8a:	012b      	lsls	r3, r5, #4
 8016f8c:	930e      	str	r3, [sp, #56]	@ 0x38
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8016f8e:	2348      	movs	r3, #72	@ 0x48
 8016f90:	4358      	muls	r0, r3
 8016f92:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 8016f96:	930f      	str	r3, [sp, #60]	@ 0x3c
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8016f98:	014b      	lsls	r3, r1, #5
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	9307      	str	r3, [sp, #28]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016f9e:	f500 6319 	add.w	r3, r0, #2448	@ 0x990
 8016fa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8016fa4:	9b07      	ldr	r3, [sp, #28]
 8016fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016faa:	930d      	str	r3, [sp, #52]	@ 0x34
 8016fac:	ab72      	add	r3, sp, #456	@ 0x1c8
	xx2 = inc2;
 8016fae:	46f4      	mov	ip, lr
      xx1 = inc1;
 8016fb0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8016fb2:	440b      	add	r3, r1
 8016fb4:	9305      	str	r3, [sp, #20]
 8016fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fb8:	440b      	add	r3, r1
 8016fba:	9310      	str	r3, [sp, #64]	@ 0x40
 8016fbc:	9b04      	ldr	r3, [sp, #16]
 8016fbe:	9301      	str	r3, [sp, #4]
 8016fc0:	e023      	b.n	801700a <fill_inverse_cmap+0x27c>
	  if (dist2 < *bptr) {
 8016fc2:	463b      	mov	r3, r7
 8016fc4:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8016fc8:	9711      	str	r7, [sp, #68]	@ 0x44
 8016fca:	461f      	mov	r7, r3
 8016fcc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016fce:	42ab      	cmp	r3, r5
	    *bptr = dist2;
 8016fd0:	bfc4      	itt	gt
 8016fd2:	463b      	movgt	r3, r7
 8016fd4:	601d      	strgt	r5, [r3, #0]
	  dist2 += xx2;
 8016fd6:	4435      	add	r5, r6
	    *cptr = (JSAMPLE) icolor;
 8016fd8:	bfc8      	it	gt
 8016fda:	9b03      	ldrgt	r3, [sp, #12]
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8016fdc:	f506 7600 	add.w	r6, r6, #512	@ 0x200
	    *cptr = (JSAMPLE) icolor;
 8016fe0:	bfc8      	it	gt
 8016fe2:	701c      	strbgt	r4, [r3, #0]
	  cptr++;
 8016fe4:	9b03      	ldr	r3, [sp, #12]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	9303      	str	r3, [sp, #12]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016fec:	42b3      	cmp	r3, r6
 8016fee:	d1e8      	bne.n	8016fc2 <fill_inverse_cmap+0x234>
	  bptr++;
 8016ff0:	9b05      	ldr	r3, [sp, #20]
	  cptr++;
 8016ff2:	f10c 0c04 	add.w	ip, ip, #4
	  bptr++;
 8016ff6:	3310      	adds	r3, #16
 8016ff8:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 8016ffa:	9b01      	ldr	r3, [sp, #4]
 8016ffc:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8016ffe:	f500 7090 	add.w	r0, r0, #288	@ 0x120
	dist1 += xx1;
 8017002:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8017004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017006:	4283      	cmp	r3, r0
 8017008:	d007      	beq.n	801701a <fill_inverse_cmap+0x28c>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801700a:	9b05      	ldr	r3, [sp, #20]
	xx2 = inc2;
 801700c:	9e07      	ldr	r6, [sp, #28]
 801700e:	3b04      	subs	r3, #4
 8017010:	9d01      	ldr	r5, [sp, #4]
 8017012:	f8cd c00c 	str.w	ip, [sp, #12]
 8017016:	461f      	mov	r7, r3
 8017018:	e7d3      	b.n	8016fc2 <fill_inverse_cmap+0x234>
      dist0 += xx0;
 801701a:	9804      	ldr	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801701c:	3180      	adds	r1, #128	@ 0x80
      dist0 += xx0;
 801701e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
	  cptr++;
 8017020:	f10e 0e20 	add.w	lr, lr, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8017024:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
      dist0 += xx0;
 8017028:	4418      	add	r0, r3
 801702a:	9004      	str	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801702c:	d1be      	bne.n	8016fac <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 801702e:	9b02      	ldr	r3, [sp, #8]
 8017030:	3301      	adds	r3, #1
 8017032:	e6f0      	b.n	8016e16 <fill_inverse_cmap+0x88>

08017034 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8017034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017038:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801703a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
{
 801703e:	b085      	sub	sp, #20
 8017040:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8017042:	699b      	ldr	r3, [r3, #24]
{
 8017044:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8017046:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8017048:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 801704a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801704c:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 801704e:	4555      	cmp	r5, sl
 8017050:	db02      	blt.n	8017058 <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8017052:	b005      	add	sp, #20
 8017054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8017058:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 801705c:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8017060:	9b01      	ldr	r3, [sp, #4]
 8017062:	3403      	adds	r4, #3
 8017064:	eb06 0b03 	add.w	fp, r6, r3
 8017068:	455e      	cmp	r6, fp
 801706a:	d101      	bne.n	8017070 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 801706c:	3501      	adds	r5, #1
 801706e:	e7ee      	b.n	801704e <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8017070:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8017074:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8017078:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 801707c:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 801707e:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8017082:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8017086:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 801708a:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 801708c:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8017090:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8017094:	f1bc 0f00 	cmp.w	ip, #0
 8017098:	d106      	bne.n	80170a8 <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 801709a:	4672      	mov	r2, lr
 801709c:	9303      	str	r3, [sp, #12]
 801709e:	9002      	str	r0, [sp, #8]
 80170a0:	f7ff fe75 	bl	8016d8e <fill_inverse_cmap>
 80170a4:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 80170a8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80170ac:	3403      	adds	r4, #3
 80170ae:	3b01      	subs	r3, #1
 80170b0:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 80170b4:	e7d8      	b.n	8017068 <pass2_no_dither+0x34>

080170b6 <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 80170b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80170ba:	f8d0 a1e0 	ldr.w	sl, [r0, #480]	@ 0x1e0
{
 80170be:	b09f      	sub	sp, #124	@ 0x7c
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80170c0:	f8d0 b070 	ldr.w	fp, [r0, #112]	@ 0x70
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 80170c4:	f04f 0900 	mov.w	r9, #0
{
 80170c8:	931b      	str	r3, [sp, #108]	@ 0x6c
  hist3d histogram = cquantize->histogram;
 80170ca:	f8da 3018 	ldr.w	r3, [sl, #24]
 80170ce:	9315      	str	r3, [sp, #84]	@ 0x54
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80170d0:	f8d0 314c 	ldr.w	r3, [r0, #332]	@ 0x14c
 80170d4:	9308      	str	r3, [sp, #32]
  int *error_limit = cquantize->error_limiter;
 80170d6:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 80170da:	9309      	str	r3, [sp, #36]	@ 0x24
  JSAMPROW colormap0 = cinfo->colormap[0];
 80170dc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 80170e0:	e9cd 1219 	strd	r1, r2, [sp, #100]	@ 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 80170e4:	681a      	ldr	r2, [r3, #0]
 80170e6:	9216      	str	r2, [sp, #88]	@ 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 80170e8:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 80170ea:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 80170ec:	9217      	str	r2, [sp, #92]	@ 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 80170ee:	9318      	str	r3, [sp, #96]	@ 0x60
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80170f0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80170f4:	3b03      	subs	r3, #3
 80170f6:	9310      	str	r3, [sp, #64]	@ 0x40
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80170f8:	2306      	movs	r3, #6
 80170fa:	fb0b 3303 	mla	r3, fp, r3, r3
 80170fe:	9312      	str	r3, [sp, #72]	@ 0x48
  for (row = 0; row < num_rows; row++) {
 8017100:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017102:	4599      	cmp	r9, r3
 8017104:	db02      	blt.n	801710c <pass2_fs_dither+0x56>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8017106:	b01f      	add	sp, #124	@ 0x7c
 8017108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 801710c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801710e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8017112:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8017114:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017116:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 801711a:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801711c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8017120:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8017122:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8017126:	2b00      	cmp	r3, #0
 8017128:	d036      	beq.n	8017198 <pass2_fs_dither+0xe2>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 801712a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801712c:	9a01      	ldr	r2, [sp, #4]
 801712e:	441a      	add	r2, r3
      outptr += width-1;
 8017130:	f10b 33ff 	add.w	r3, fp, #4294967295
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017134:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8017136:	9a03      	ldr	r2, [sp, #12]
 8017138:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801713a:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 801713c:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801713e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017140:	4413      	add	r3, r2
      dir3 = -3;
 8017142:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017146:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8017148:	2300      	movs	r3, #0
      dir3 = -3;
 801714a:	9206      	str	r2, [sp, #24]
      dir = -1;
 801714c:	f04f 32ff 	mov.w	r2, #4294967295
 8017150:	920d      	str	r2, [sp, #52]	@ 0x34
 8017152:	f8ca 3024 	str.w	r3, [sl, #36]	@ 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8017156:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017158:	9b06      	ldr	r3, [sp, #24]
 801715a:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 801715c:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801715e:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8017160:	4622      	mov	r2, r4
    for (col = width; col > 0; col--) {
 8017162:	f8cd b01c 	str.w	fp, [sp, #28]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017166:	1cab      	adds	r3, r5, #2
    belowerr0 = belowerr1 = belowerr2 = 0;
 8017168:	940a      	str	r4, [sp, #40]	@ 0x28
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801716a:	9313      	str	r3, [sp, #76]	@ 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801716c:	1d2b      	adds	r3, r5, #4
 801716e:	9314      	str	r3, [sp, #80]	@ 0x50
    cur0 = cur1 = cur2 = 0;
 8017170:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8017172:	e9cd 4404 	strd	r4, r4, [sp, #16]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8017176:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    for (col = width; col > 0; col--) {
 801717a:	9f07      	ldr	r7, [sp, #28]
 801717c:	b98f      	cbnz	r7, 80171a2 <pass2_fs_dither+0xec>
 801717e:	fb0b f505 	mul.w	r5, fp, r5
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8017182:	9a02      	ldr	r2, [sp, #8]
 8017184:	9b02      	ldr	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 8017186:	f109 0901 	add.w	r9, r9, #1
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 801718a:	9904      	ldr	r1, [sp, #16]
 801718c:	442b      	add	r3, r5
 801718e:	5351      	strh	r1, [r2, r5]
    errorptr[1] = (FSERROR) bpreverr1;
 8017190:	9a05      	ldr	r2, [sp, #20]
    errorptr[2] = (FSERROR) bpreverr2;
 8017192:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8017194:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8017196:	e7b3      	b.n	8017100 <pass2_fs_dither+0x4a>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8017198:	2301      	movs	r3, #1
      dir3 = 3;
 801719a:	2203      	movs	r2, #3
      dir = 1;
 801719c:	930d      	str	r3, [sp, #52]	@ 0x34
      dir3 = 3;
 801719e:	9206      	str	r2, [sp, #24]
 80171a0:	e7d7      	b.n	8017152 <pass2_fs_dither+0x9c>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80171a2:	f936 c005 	ldrsh.w	ip, [r6, r5]
 80171a6:	1977      	adds	r7, r6, r5
 80171a8:	449c      	add	ip, r3
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80171aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80171ac:	9711      	str	r7, [sp, #68]	@ 0x44
 80171ae:	5ef3      	ldrsh	r3, [r6, r3]
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80171b0:	f10c 0c08 	add.w	ip, ip, #8
      cur0 = error_limit[cur0];
 80171b4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80171b6:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80171b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80171ba:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80171bc:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80171be:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80171c0:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80171c2:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80171c6:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 80171c8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 80171cc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80171d0:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 80171d2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 80171d6:	9f01      	ldr	r7, [sp, #4]
 80171d8:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 80171dc:	9f08      	ldr	r7, [sp, #32]
 80171de:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 80171e0:	443a      	add	r2, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 80171e2:	f811 100c 	ldrb.w	r1, [r1, ip]
 80171e6:	910e      	str	r1, [sp, #56]	@ 0x38
      cur1 += GETJSAMPLE(inptr[1]);
 80171e8:	9901      	ldr	r1, [sp, #4]
 80171ea:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 80171ec:	5c52      	ldrb	r2, [r2, r1]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80171ee:	9908      	ldr	r1, [sp, #32]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 80171f0:	4617      	mov	r7, r2
      cur2 += GETJSAMPLE(inptr[2]);
 80171f2:	9a01      	ldr	r2, [sp, #4]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80171f4:	440b      	add	r3, r1
      cur2 += GETJSAMPLE(inptr[2]);
 80171f6:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80171f8:	5c9b      	ldrb	r3, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 80171fa:	10ba      	asrs	r2, r7, #2
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80171fc:	930f      	str	r3, [sp, #60]	@ 0x3c
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 80171fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017200:	10d9      	asrs	r1, r3, #3
 8017202:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017204:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017208:	eb03 1882 	add.w	r8, r3, r2, lsl #6
 801720c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801720e:	10db      	asrs	r3, r3, #3
      if (*cachep == 0)
 8017210:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8017214:	f1bc 0f00 	cmp.w	ip, #0
 8017218:	d105      	bne.n	8017226 <pass2_fs_dither+0x170>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 801721a:	e9cd 031c 	strd	r0, r3, [sp, #112]	@ 0x70
 801721e:	f7ff fdb6 	bl	8016d8e <fill_inverse_cmap>
 8017222:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	@ 0x70
      { register int pixcode = *cachep - 1;
 8017226:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 801722a:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 801722c:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801722e:	9905      	ldr	r1, [sp, #20]
	*outptr = (JSAMPLE) pixcode;
 8017230:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8017232:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017234:	f812 c003 	ldrb.w	ip, [r2, r3]
 8017238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801723a:	eba2 0c0c 	sub.w	ip, r2, ip
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 801723e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017240:	f812 e003 	ldrb.w	lr, [r2, r3]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017244:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8017246:	eba7 0e0e 	sub.w	lr, r7, lr
      inptr += dir3;		/* Advance pixel pointers to next column */
 801724a:	9f01      	ldr	r7, [sp, #4]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 801724c:	f812 8003 	ldrb.w	r8, [r2, r3]
 8017250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017252:	9a04      	ldr	r2, [sp, #16]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017254:	eba3 0808 	sub.w	r8, r3, r8
	cur0 += delta;		/* form error * 3 */
 8017258:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 801725c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 801725e:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017262:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8017264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017266:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8017268:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	bpreverr0 = belowerr0 + cur0;
 801726c:	9204      	str	r2, [sp, #16]
	cur1 += delta;		/* form error * 3 */
 801726e:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017272:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8017274:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017278:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 801727a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801727c:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 801727e:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8017282:	9105      	str	r1, [sp, #20]
	cur2 += delta;		/* form error * 3 */
 8017284:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8017288:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 801728a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 801728e:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017290:	9e06      	ldr	r6, [sp, #24]
	bpreverr2 = belowerr2 + cur2;
 8017292:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017294:	4437      	add	r7, r6
      outptr += dir;
 8017296:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8017298:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 801729a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 801729e:	9701      	str	r7, [sp, #4]
      outptr += dir;
 80172a0:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80172a2:	443e      	add	r6, r7
 80172a4:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 80172a6:	9e07      	ldr	r6, [sp, #28]
 80172a8:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 80172aa:	e9cd e80b 	strd	lr, r8, [sp, #44]	@ 0x2c
    for (col = width; col > 0; col--) {
 80172ae:	9607      	str	r6, [sp, #28]
 80172b0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
	belowerr0 = bnexterr;
 80172b2:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80172b6:	e760      	b.n	801717a <pass2_fs_dither+0xc4>

080172b8 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 80172b8:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 80172ba:	6843      	ldr	r3, [r0, #4]
 80172bc:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 80172c0:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80172c2:	f8d0 41e0 	ldr.w	r4, [r0, #480]	@ 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 80172ca:	f500 737f 	add.w	r3, r0, #1020	@ 0x3fc
 80172ce:	f500 717e 	add.w	r1, r0, #1016	@ 0x3f8
 80172d2:	f500 6280 	add.w	r2, r0, #1024	@ 0x400
  cquantize->error_limiter = table;
 80172d6:	62a3      	str	r3, [r4, #40]	@ 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 80172d8:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 80172da:	425c      	negs	r4, r3
 80172dc:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80172e0:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 80172e2:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80172e6:	2b10      	cmp	r3, #16
 80172e8:	d1f7      	bne.n	80172da <init_error_limit+0x22>
 80172ea:	f500 6487 	add.w	r4, r0, #1080	@ 0x438
 80172ee:	f500 7170 	add.w	r1, r0, #960	@ 0x3c0
 80172f2:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 80172f6:	425d      	negs	r5, r3
 80172f8:	f844 3f04 	str.w	r3, [r4, #4]!
 80172fc:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8017300:	f002 0501 	and.w	r5, r2, #1
 8017304:	3a01      	subs	r2, #1
 8017306:	442b      	add	r3, r5
 8017308:	f112 0f32 	cmn.w	r2, #50	@ 0x32
 801730c:	d1f3      	bne.n	80172f6 <init_error_limit+0x3e>
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
 801730e:	f500 6197 	add.w	r1, r0, #1208	@ 0x4b8
 8017312:	f500 7250 	add.w	r2, r0, #832	@ 0x340
    table[in] = out; table[-in] = -out;
 8017316:	425c      	negs	r4, r3
 8017318:	f841 3f04 	str.w	r3, [r1, #4]!
 801731c:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8017320:	4282      	cmp	r2, r0
 8017322:	d1f9      	bne.n	8017318 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8017324:	bd38      	pop	{r3, r4, r5, pc}

08017326 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8017326:	4770      	bx	lr

08017328 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8017328:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 801732c:	2201      	movs	r2, #1
 801732e:	61da      	str	r2, [r3, #28]
}
 8017330:	4770      	bx	lr
	...

08017334 <start_pass_2_quant>:
{
 8017334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017336:	f8d0 51e0 	ldr.w	r5, [r0, #480]	@ 0x1e0
{
 801733a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 801733c:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
  hist3d histogram = cquantize->histogram;
 8017340:	69af      	ldr	r7, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8017342:	2b00      	cmp	r3, #0
 8017344:	d04f      	beq.n	80173e6 <start_pass_2_quant+0xb2>
    cinfo->dither_mode = JDITHER_FS;
 8017346:	2302      	movs	r3, #2
 8017348:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  if (is_pre_scan) {
 801734c:	b189      	cbz	r1, 8017372 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 801734e:	4b28      	ldr	r3, [pc, #160]	@ (80173f0 <start_pass_2_quant+0xbc>)
 8017350:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8017352:	4b28      	ldr	r3, [pc, #160]	@ (80173f4 <start_pass_2_quant+0xc0>)
 8017354:	60ab      	str	r3, [r5, #8]
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8017356:	1f3c      	subs	r4, r7, #4
 8017358:	377c      	adds	r7, #124	@ 0x7c
      FMEMZERO((void FAR *) histogram[i],
 801735a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801735e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017362:	2100      	movs	r1, #0
 8017364:	f012 fea4 	bl	802a0b0 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8017368:	42a7      	cmp	r7, r4
 801736a:	d1f6      	bne.n	801735a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 801736c:	2300      	movs	r3, #0
 801736e:	61eb      	str	r3, [r5, #28]
}
 8017370:	e02f      	b.n	80173d2 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8017372:	4b21      	ldr	r3, [pc, #132]	@ (80173f8 <start_pass_2_quant+0xc4>)
 8017374:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8017376:	4b21      	ldr	r3, [pc, #132]	@ (80173fc <start_pass_2_quant+0xc8>)
 8017378:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 801737a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
    if (i < 1)
 801737e:	2b00      	cmp	r3, #0
 8017380:	dc28      	bgt.n	80173d4 <start_pass_2_quant+0xa0>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8017382:	223a      	movs	r2, #58	@ 0x3a
 8017384:	6823      	ldr	r3, [r4, #0]
 8017386:	615a      	str	r2, [r3, #20]
 8017388:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801738a:	619a      	str	r2, [r3, #24]
 801738c:	4620      	mov	r0, r4
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8017392:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8017396:	2b02      	cmp	r3, #2
 8017398:	d118      	bne.n	80173cc <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801739a:	2306      	movs	r3, #6
 801739c:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 801739e:	435e      	muls	r6, r3
      if (cquantize->fserrors == NULL)
 80173a0:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80173a2:	360c      	adds	r6, #12
      if (cquantize->fserrors == NULL)
 80173a4:	b933      	cbnz	r3, 80173b4 <start_pass_2_quant+0x80>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80173a6:	6863      	ldr	r3, [r4, #4]
 80173a8:	4632      	mov	r2, r6
 80173aa:	2101      	movs	r1, #1
 80173ac:	4620      	mov	r0, r4
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	4798      	blx	r3
 80173b2:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 80173b4:	4632      	mov	r2, r6
 80173b6:	2100      	movs	r1, #0
 80173b8:	6a28      	ldr	r0, [r5, #32]
 80173ba:	f012 fe79 	bl	802a0b0 <memset>
      if (cquantize->error_limiter == NULL)
 80173be:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80173c0:	b913      	cbnz	r3, 80173c8 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 80173c2:	4620      	mov	r0, r4
 80173c4:	f7ff ff78 	bl	80172b8 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 80173c8:	2300      	movs	r3, #0
 80173ca:	626b      	str	r3, [r5, #36]	@ 0x24
  if (cquantize->needs_zeroed) {
 80173cc:	69eb      	ldr	r3, [r5, #28]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d1c1      	bne.n	8017356 <start_pass_2_quant+0x22>
}
 80173d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (i > MAXNUMCOLORS)
 80173d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80173d8:	dddb      	ble.n	8017392 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80173da:	223b      	movs	r2, #59	@ 0x3b
 80173dc:	6823      	ldr	r3, [r4, #0]
 80173de:	615a      	str	r2, [r3, #20]
 80173e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80173e4:	e7d1      	b.n	801738a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 80173e6:	2900      	cmp	r1, #0
 80173e8:	d1b1      	bne.n	801734e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 80173ea:	4b05      	ldr	r3, [pc, #20]	@ (8017400 <start_pass_2_quant+0xcc>)
 80173ec:	e7c2      	b.n	8017374 <start_pass_2_quant+0x40>
 80173ee:	bf00      	nop
 80173f0:	08016d31 	.word	0x08016d31
 80173f4:	08017623 	.word	0x08017623
 80173f8:	080170b7 	.word	0x080170b7
 80173fc:	08017327 	.word	0x08017327
 8017400:	08017035 	.word	0x08017035

08017404 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8017404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hist3d histogram = cquantize->histogram;
 8017408:	f8d0 c018 	ldr.w	ip, [r0, #24]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 801740c:	e9d1 8000 	ldrd	r8, r0, [r1]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017410:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
  if (c0max > c0min)
 8017414:	4580      	cmp	r8, r0
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017416:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
  if (c0max > c0min)
 801741a:	da47      	bge.n	80174ac <update_box.isra.0+0xa8>
 801741c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8017420:	4643      	mov	r3, r8
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017422:	4677      	mov	r7, lr
 8017424:	e008      	b.n	8017438 <update_box.isra.0+0x34>
	histp = & histogram[c0][c1][c2min];
 8017426:	eb09 1a87 	add.w	sl, r9, r7, lsl #6
 801742a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801742e:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017430:	46b2      	mov	sl, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 8017432:	4555      	cmp	r5, sl
 8017434:	da08      	bge.n	8017448 <update_box.isra.0+0x44>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8017436:	3701      	adds	r7, #1
 8017438:	42bc      	cmp	r4, r7
 801743a:	daf4      	bge.n	8017426 <update_box.isra.0+0x22>
    for (c0 = c0min; c0 <= c0max; c0++)
 801743c:	3301      	adds	r3, #1
 801743e:	4298      	cmp	r0, r3
 8017440:	daef      	bge.n	8017422 <update_box.isra.0+0x1e>
 have_c0min:
 8017442:	4643      	mov	r3, r8
 8017444:	4607      	mov	r7, r0
 8017446:	e022      	b.n	801748e <update_box.isra.0+0x8a>
	  if (*histp++ != 0) {
 8017448:	f832 bb02 	ldrh.w	fp, [r2], #2
 801744c:	f1bb 0f00 	cmp.w	fp, #0
 8017450:	d00d      	beq.n	801746e <update_box.isra.0+0x6a>
  if (c0max > c0min)
 8017452:	4298      	cmp	r0, r3
	    boxp->c0min = c0min = c0;
 8017454:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8017456:	dcf5      	bgt.n	8017444 <update_box.isra.0+0x40>
  if (c1max > c1min)
 8017458:	45a6      	cmp	lr, r4
 801745a:	f280 8083 	bge.w	8017564 <update_box.isra.0+0x160>
 801745e:	0072      	lsls	r2, r6, #1
 8017460:	9201      	str	r2, [sp, #4]
 8017462:	4672      	mov	r2, lr
	histp = & histogram[c0][c1][c2min];
 8017464:	9f01      	ldr	r7, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017466:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8017468:	eb07 1a82 	add.w	sl, r7, r2, lsl #6
 801746c:	e028      	b.n	80174c0 <update_box.isra.0+0xbc>
	for (c2 = c2min; c2 <= c2max; c2++)
 801746e:	f10a 0a01 	add.w	sl, sl, #1
 8017472:	e7de      	b.n	8017432 <update_box.isra.0+0x2e>
	histp = & histogram[c0][c1][c2min];
 8017474:	eb09 1a88 	add.w	sl, r9, r8, lsl #6
 8017478:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 801747c:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801747e:	46b2      	mov	sl, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 8017480:	4555      	cmp	r5, sl
 8017482:	da08      	bge.n	8017496 <update_box.isra.0+0x92>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8017484:	f108 0801 	add.w	r8, r8, #1
 8017488:	4544      	cmp	r4, r8
 801748a:	daf3      	bge.n	8017474 <update_box.isra.0+0x70>
    for (c0 = c0max; c0 >= c0min; c0--)
 801748c:	3f01      	subs	r7, #1
 801748e:	429f      	cmp	r7, r3
 8017490:	dbe2      	blt.n	8017458 <update_box.isra.0+0x54>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017492:	46f0      	mov	r8, lr
 8017494:	e7f8      	b.n	8017488 <update_box.isra.0+0x84>
	  if (*histp++ != 0) {
 8017496:	f832 bb02 	ldrh.w	fp, [r2], #2
 801749a:	f1bb 0f00 	cmp.w	fp, #0
 801749e:	d002      	beq.n	80174a6 <update_box.isra.0+0xa2>
	    goto have_c0max;
 80174a0:	4638      	mov	r0, r7
	    boxp->c0max = c0max = c0;
 80174a2:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 80174a4:	e7d8      	b.n	8017458 <update_box.isra.0+0x54>
	for (c2 = c2min; c2 <= c2max; c2++)
 80174a6:	f10a 0a01 	add.w	sl, sl, #1
 80174aa:	e7e9      	b.n	8017480 <update_box.isra.0+0x7c>
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80174ac:	4643      	mov	r3, r8
 80174ae:	e7d3      	b.n	8017458 <update_box.isra.0+0x54>
	histp = & histogram[c0][c1][c2min];
 80174b0:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80174b4:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 80174b6:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80174b8:	454d      	cmp	r5, r9
 80174ba:	da09      	bge.n	80174d0 <update_box.isra.0+0xcc>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80174bc:	f108 0801 	add.w	r8, r8, #1
 80174c0:	4580      	cmp	r8, r0
 80174c2:	ddf5      	ble.n	80174b0 <update_box.isra.0+0xac>
    for (c1 = c1min; c1 <= c1max; c1++)
 80174c4:	3201      	adds	r2, #1
 80174c6:	4294      	cmp	r4, r2
 80174c8:	dacc      	bge.n	8017464 <update_box.isra.0+0x60>
 have_c1min:
 80174ca:	4672      	mov	r2, lr
 80174cc:	46a6      	mov	lr, r4
 80174ce:	e036      	b.n	801753e <update_box.isra.0+0x13a>
	  if (*histp++ != 0) {
 80174d0:	f837 bb02 	ldrh.w	fp, [r7], #2
 80174d4:	f1bb 0f00 	cmp.w	fp, #0
 80174d8:	d022      	beq.n	8017520 <update_box.isra.0+0x11c>
  if (c1max > c1min)
 80174da:	4294      	cmp	r4, r2
	    boxp->c1min = c1min = c1;
 80174dc:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 80174de:	dcf5      	bgt.n	80174cc <update_box.isra.0+0xc8>
  if (c2max > c2min)
 80174e0:	42ae      	cmp	r6, r5
 80174e2:	46b6      	mov	lr, r6
 80174e4:	db4e      	blt.n	8017584 <update_box.isra.0+0x180>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80174e6:	1aa6      	subs	r6, r4, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80174e8:	1ac7      	subs	r7, r0, r3
 80174ea:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80174ee:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80174f2:	00ff      	lsls	r7, r7, #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80174f4:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80174f8:	eba5 060e 	sub.w	r6, r5, lr
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80174fc:	fb08 f808 	mul.w	r8, r8, r8
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8017500:	0136      	lsls	r6, r6, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8017502:	fb07 8707 	mla	r7, r7, r7, r8
  ccount = 0;
 8017506:	f04f 0800 	mov.w	r8, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 801750a:	fb06 7606 	mla	r6, r6, r6, r7
 801750e:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 8017510:	4298      	cmp	r0, r3
 8017512:	f280 8084 	bge.w	801761e <update_box.isra.0+0x21a>
  boxp->colorcount = ccount;
 8017516:	f8c1 801c 	str.w	r8, [r1, #28]
}
 801751a:	b003      	add	sp, #12
 801751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c2 = c2min; c2 <= c2max; c2++)
 8017520:	f109 0901 	add.w	r9, r9, #1
 8017524:	e7c8      	b.n	80174b8 <update_box.isra.0+0xb4>
	histp = & histogram[c0][c1][c2min];
 8017526:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801752a:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 801752c:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 801752e:	454d      	cmp	r5, r9
 8017530:	da0c      	bge.n	801754c <update_box.isra.0+0x148>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8017532:	f108 0801 	add.w	r8, r8, #1
 8017536:	4540      	cmp	r0, r8
 8017538:	daf5      	bge.n	8017526 <update_box.isra.0+0x122>
    for (c1 = c1max; c1 >= c1min; c1--)
 801753a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801753e:	4572      	cmp	r2, lr
 8017540:	dcce      	bgt.n	80174e0 <update_box.isra.0+0xdc>
 8017542:	9f01      	ldr	r7, [sp, #4]
 8017544:	4698      	mov	r8, r3
 8017546:	eb07 1a8e 	add.w	sl, r7, lr, lsl #6
 801754a:	e7f4      	b.n	8017536 <update_box.isra.0+0x132>
	  if (*histp++ != 0) {
 801754c:	f837 bb02 	ldrh.w	fp, [r7], #2
 8017550:	f1bb 0f00 	cmp.w	fp, #0
 8017554:	d003      	beq.n	801755e <update_box.isra.0+0x15a>
	    goto have_c1max;
 8017556:	4674      	mov	r4, lr
	    boxp->c1max = c1max = c1;
 8017558:	f8c1 e00c 	str.w	lr, [r1, #12]
	    goto have_c1max;
 801755c:	e7c0      	b.n	80174e0 <update_box.isra.0+0xdc>
	for (c2 = c2min; c2 <= c2max; c2++)
 801755e:	f109 0901 	add.w	r9, r9, #1
 8017562:	e7e4      	b.n	801752e <update_box.isra.0+0x12a>
 have_c1min:
 8017564:	4672      	mov	r2, lr
 8017566:	e7bb      	b.n	80174e0 <update_box.isra.0+0xdc>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017568:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 801756c:	4691      	mov	r9, r2
 801756e:	4457      	add	r7, sl
 8017570:	45a1      	cmp	r9, r4
 8017572:	dd0b      	ble.n	801758c <update_box.isra.0+0x188>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8017574:	f108 0801 	add.w	r8, r8, #1
 8017578:	4540      	cmp	r0, r8
 801757a:	daf5      	bge.n	8017568 <update_box.isra.0+0x164>
    for (c2 = c2min; c2 <= c2max; c2++)
 801757c:	f10e 0e01 	add.w	lr, lr, #1
 8017580:	4575      	cmp	r5, lr
 8017582:	db31      	blt.n	80175e8 <update_box.isra.0+0x1e4>
 8017584:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017588:	4698      	mov	r8, r3
 801758a:	e7f5      	b.n	8017578 <update_box.isra.0+0x174>
	  if (*histp != 0) {
 801758c:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 8017590:	f837 b00b 	ldrh.w	fp, [r7, fp]
 8017594:	f1bb 0f00 	cmp.w	fp, #0
 8017598:	d005      	beq.n	80175a6 <update_box.isra.0+0x1a2>
  if (c2max > c2min)
 801759a:	4575      	cmp	r5, lr
	    boxp->c2min = c2min = c2;
 801759c:	f8c1 e010 	str.w	lr, [r1, #16]
  if (c2max > c2min)
 80175a0:	dda1      	ble.n	80174e6 <update_box.isra.0+0xe2>
 have_c2min:
 80175a2:	462f      	mov	r7, r5
 80175a4:	e00d      	b.n	80175c2 <update_box.isra.0+0x1be>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80175a6:	f109 0901 	add.w	r9, r9, #1
 80175aa:	e7e1      	b.n	8017570 <update_box.isra.0+0x16c>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80175ac:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 80175b0:	4691      	mov	r9, r2
 80175b2:	4456      	add	r6, sl
 80175b4:	454c      	cmp	r4, r9
 80175b6:	da0a      	bge.n	80175ce <update_box.isra.0+0x1ca>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80175b8:	f108 0801 	add.w	r8, r8, #1
 80175bc:	4540      	cmp	r0, r8
 80175be:	daf5      	bge.n	80175ac <update_box.isra.0+0x1a8>
    for (c2 = c2max; c2 >= c2min; c2--)
 80175c0:	3f01      	subs	r7, #1
 80175c2:	45be      	cmp	lr, r7
 80175c4:	dc8f      	bgt.n	80174e6 <update_box.isra.0+0xe2>
 80175c6:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80175ca:	4698      	mov	r8, r3
 80175cc:	e7f6      	b.n	80175bc <update_box.isra.0+0x1b8>
	  if (*histp != 0) {
 80175ce:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 80175d2:	f836 b00b 	ldrh.w	fp, [r6, fp]
 80175d6:	f1bb 0f00 	cmp.w	fp, #0
 80175da:	d002      	beq.n	80175e2 <update_box.isra.0+0x1de>
	    goto have_c2max;
 80175dc:	463d      	mov	r5, r7
	    boxp->c2max = c2max = c2;
 80175de:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 80175e0:	e781      	b.n	80174e6 <update_box.isra.0+0xe2>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80175e2:	f109 0901 	add.w	r9, r9, #1
 80175e6:	e7e5      	b.n	80175b4 <update_box.isra.0+0x1b0>
 have_c2min:
 80175e8:	46b6      	mov	lr, r6
 80175ea:	e7da      	b.n	80175a2 <update_box.isra.0+0x19e>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80175ec:	eb0a 1987 	add.w	r9, sl, r7, lsl #6
 80175f0:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 80175f4:	f1a9 0902 	sub.w	r9, r9, #2
 80175f8:	444e      	add	r6, r9
 80175fa:	46f1      	mov	r9, lr
 80175fc:	454d      	cmp	r5, r9
 80175fe:	da04      	bge.n	801760a <update_box.isra.0+0x206>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017600:	3701      	adds	r7, #1
 8017602:	42bc      	cmp	r4, r7
 8017604:	daf2      	bge.n	80175ec <update_box.isra.0+0x1e8>
  for (c0 = c0min; c0 <= c0max; c0++)
 8017606:	3301      	adds	r3, #1
 8017608:	e782      	b.n	8017510 <update_box.isra.0+0x10c>
	if (*histp != 0) {
 801760a:	f836 bf02 	ldrh.w	fp, [r6, #2]!
 801760e:	f1bb 0f00 	cmp.w	fp, #0
 8017612:	d001      	beq.n	8017618 <update_box.isra.0+0x214>
	  ccount++;
 8017614:	f108 0801 	add.w	r8, r8, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8017618:	f109 0901 	add.w	r9, r9, #1
 801761c:	e7ee      	b.n	80175fc <update_box.isra.0+0x1f8>
 801761e:	4617      	mov	r7, r2
 8017620:	e7ef      	b.n	8017602 <update_box.isra.0+0x1fe>

08017622 <finish_pass1>:
{
 8017622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017626:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
{
 801762a:	b08d      	sub	sp, #52	@ 0x34
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801762c:	2101      	movs	r1, #1
{
 801762e:	4605      	mov	r5, r0
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017630:	9302      	str	r3, [sp, #8]
  update_box(cinfo, & boxlist[0]);
 8017632:	f04f 0b01 	mov.w	fp, #1
  cinfo->colormap = cquantize->sv_colormap;
 8017636:	691b      	ldr	r3, [r3, #16]
 8017638:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  select_colors(cinfo, cquantize->desired);
 801763c:	9b02      	ldr	r3, [sp, #8]
 801763e:	695b      	ldr	r3, [r3, #20]
 8017640:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017642:	9a01      	ldr	r2, [sp, #4]
 8017644:	6843      	ldr	r3, [r0, #4]
 8017646:	0152      	lsls	r2, r2, #5
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801764c:	2300      	movs	r3, #0
 801764e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8017650:	213f      	movs	r1, #63	@ 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017652:	4604      	mov	r4, r0
  boxlist[0].c1min = 0;
 8017654:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8017656:	6142      	str	r2, [r0, #20]
 8017658:	46a0      	mov	r8, r4
  update_box(cinfo, & boxlist[0]);
 801765a:	4626      	mov	r6, r4
  boxlist[0].c2min = 0;
 801765c:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8017660:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8017664:	f8d5 31e0 	ldr.w	r3, [r5, #480]	@ 0x1e0
 8017668:	4601      	mov	r1, r0
 801766a:	4618      	mov	r0, r3
 801766c:	9303      	str	r3, [sp, #12]
 801766e:	f7ff fec9 	bl	8017404 <update_box.isra.0>
  while (numboxes < desired_colors) {
 8017672:	9b01      	ldr	r3, [sp, #4]
 8017674:	455b      	cmp	r3, fp
 8017676:	dc24      	bgt.n	80176c2 <finish_pass1+0xa0>
 8017678:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 801767a:	f8d5 31e0 	ldr.w	r3, [r5, #480]	@ 0x1e0
 801767e:	699b      	ldr	r3, [r3, #24]
 8017680:	9305      	str	r3, [sp, #20]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8017682:	e9d8 c300 	ldrd	ip, r3, [r8]
 8017686:	9306      	str	r3, [sp, #24]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017688:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801768c:	9307      	str	r3, [sp, #28]
 801768e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017692:	9308      	str	r3, [sp, #32]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017694:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017698:	9301      	str	r3, [sp, #4]
 801769a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801769e:	9309      	str	r3, [sp, #36]	@ 0x24
  for (c0 = c0min; c0 <= c0max; c0++)
 80176a0:	9b01      	ldr	r3, [sp, #4]
 80176a2:	005b      	lsls	r3, r3, #1
 80176a4:	9304      	str	r3, [sp, #16]
  long c2total = 0;
 80176a6:	2300      	movs	r3, #0
  long c1total = 0;
 80176a8:	469a      	mov	sl, r3
  long c0total = 0;
 80176aa:	4618      	mov	r0, r3
  long total = 0;
 80176ac:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 80176ae:	9c06      	ldr	r4, [sp, #24]
 80176b0:	4564      	cmp	r4, ip
 80176b2:	f2c0 809f 	blt.w	80177f4 <finish_pass1+0x1d2>
 80176b6:	ea4f 04cc 	mov.w	r4, ip, lsl #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 80176ba:	9f07      	ldr	r7, [sp, #28]
 80176bc:	3404      	adds	r4, #4
 80176be:	940a      	str	r4, [sp, #40]	@ 0x28
 80176c0:	e07d      	b.n	80177be <finish_pass1+0x19c>
    if (numboxes*2 <= desired_colors) {
 80176c2:	9b01      	ldr	r3, [sp, #4]
 80176c4:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 80176c8:	db50      	blt.n	801776c <finish_pass1+0x14a>
  boxptr which = NULL;
 80176ca:	2100      	movs	r1, #0
 80176cc:	4622      	mov	r2, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80176ce:	4608      	mov	r0, r1
  register long maxc = 0;
 80176d0:	460f      	mov	r7, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80176d2:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80176d6:	45bc      	cmp	ip, r7
 80176d8:	dd04      	ble.n	80176e4 <finish_pass1+0xc2>
 80176da:	6993      	ldr	r3, [r2, #24]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	bfc4      	itt	gt
 80176e0:	4611      	movgt	r1, r2
 80176e2:	4667      	movgt	r7, ip
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80176e4:	3001      	adds	r0, #1
 80176e6:	3220      	adds	r2, #32
 80176e8:	4583      	cmp	fp, r0
 80176ea:	d1f2      	bne.n	80176d2 <finish_pass1+0xb0>
    if (b1 == NULL)		/* no splittable boxes left! */
 80176ec:	2900      	cmp	r1, #0
 80176ee:	d0c4      	beq.n	801767a <finish_pass1+0x58>
    b2 = &boxlist[numboxes];	/* where new box will go */
 80176f0:	f106 0320 	add.w	r3, r6, #32
 80176f4:	9307      	str	r3, [sp, #28]
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 80176f6:	684b      	ldr	r3, [r1, #4]
 80176f8:	6273      	str	r3, [r6, #36]	@ 0x24
 80176fa:	68ca      	ldr	r2, [r1, #12]
 80176fc:	62f2      	str	r2, [r6, #44]	@ 0x2c
 80176fe:	6948      	ldr	r0, [r1, #20]
 8017700:	6370      	str	r0, [r6, #52]	@ 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8017702:	f8d1 e000 	ldr.w	lr, [r1]
 8017706:	f8c6 e020 	str.w	lr, [r6, #32]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 801770a:	eba3 0c0e 	sub.w	ip, r3, lr
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801770e:	688f      	ldr	r7, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8017710:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8017714:	eba2 0a07 	sub.w	sl, r2, r7
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8017718:	62b7      	str	r7, [r6, #40]	@ 0x28
 801771a:	9704      	str	r7, [sp, #16]
 801771c:	f8d1 9010 	ldr.w	r9, [r1, #16]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8017720:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8017724:	eb07 078a 	add.w	r7, r7, sl, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8017728:	eba0 0a09 	sub.w	sl, r0, r9
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801772c:	f8c6 9030 	str.w	r9, [r6, #48]	@ 0x30
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8017730:	9705      	str	r7, [sp, #20]
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8017732:	ea4f 170a 	mov.w	r7, sl, lsl #4
 8017736:	9706      	str	r7, [sp, #24]
    if (c2 > cmax) { cmax = c2; n = 2; }
 8017738:	9f05      	ldr	r7, [sp, #20]
 801773a:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
 801773e:	f2c0 8088 	blt.w	8017852 <finish_pass1+0x230>
    if (c0 > cmax) { n = 0; }
 8017742:	9805      	ldr	r0, [sp, #20]
 8017744:	4584      	cmp	ip, r0
 8017746:	dd20      	ble.n	801778a <finish_pass1+0x168>
      lb = (b1->c0max + b1->c0min) / 2;
 8017748:	4473      	add	r3, lr
 801774a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801774e:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 8017750:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 8017752:	3301      	adds	r3, #1
 8017754:	6233      	str	r3, [r6, #32]
    update_box(cinfo, b1);
 8017756:	9803      	ldr	r0, [sp, #12]
    numboxes++;
 8017758:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 801775c:	f7ff fe52 	bl	8017404 <update_box.isra.0>
    update_box(cinfo, b2);
 8017760:	9907      	ldr	r1, [sp, #28]
 8017762:	9803      	ldr	r0, [sp, #12]
    numboxes++;
 8017764:	460e      	mov	r6, r1
    update_box(cinfo, b2);
 8017766:	f7ff fe4d 	bl	8017404 <update_box.isra.0>
    numboxes++;
 801776a:	e782      	b.n	8017672 <finish_pass1+0x50>
  boxptr which = NULL;
 801776c:	2100      	movs	r1, #0
 801776e:	4623      	mov	r3, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017770:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 8017772:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 8017774:	699f      	ldr	r7, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017776:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 8017778:	4287      	cmp	r7, r0
 801777a:	bfc4      	itt	gt
 801777c:	4619      	movgt	r1, r3
 801777e:	4638      	movgt	r0, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017780:	4593      	cmp	fp, r2
 8017782:	f103 0320 	add.w	r3, r3, #32
 8017786:	d1f5      	bne.n	8017774 <finish_pass1+0x152>
 8017788:	e7b0      	b.n	80176ec <finish_pass1+0xca>
      lb = (b1->c1max + b1->c1min) / 2;
 801778a:	9b04      	ldr	r3, [sp, #16]
 801778c:	441a      	add	r2, r3
 801778e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017792:	1052      	asrs	r2, r2, #1
      b1->c1max = lb;
 8017794:	60ca      	str	r2, [r1, #12]
      b2->c1min = lb+1;
 8017796:	3201      	adds	r2, #1
 8017798:	62b2      	str	r2, [r6, #40]	@ 0x28
      break;
 801779a:	e7dc      	b.n	8017756 <finish_pass1+0x134>
      histp = & histogram[c0][c1][c2min];
 801779c:	9c04      	ldr	r4, [sp, #16]
 801779e:	9e05      	ldr	r6, [sp, #20]
 80177a0:	eb04 1487 	add.w	r4, r4, r7, lsl #6
      for (c2 = c2min; c2 <= c2max; c2++) {
 80177a4:	f8dd e004 	ldr.w	lr, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 80177a8:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 80177ac:	4434      	add	r4, r6
 80177ae:	00be      	lsls	r6, r7, #2
 80177b0:	3602      	adds	r6, #2
 80177b2:	9403      	str	r4, [sp, #12]
      for (c2 = c2min; c2 <= c2max; c2++) {
 80177b4:	960b      	str	r6, [sp, #44]	@ 0x2c
 80177b6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80177b8:	4574      	cmp	r4, lr
 80177ba:	da06      	bge.n	80177ca <finish_pass1+0x1a8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80177bc:	3701      	adds	r7, #1
 80177be:	9c08      	ldr	r4, [sp, #32]
 80177c0:	42bc      	cmp	r4, r7
 80177c2:	daeb      	bge.n	801779c <finish_pass1+0x17a>
  for (c0 = c0min; c0 <= c0max; c0++)
 80177c4:	f10c 0c01 	add.w	ip, ip, #1
 80177c8:	e771      	b.n	80176ae <finish_pass1+0x8c>
	if ((count = *histp++) != 0) {
 80177ca:	9c03      	ldr	r4, [sp, #12]
 80177cc:	f834 6b02 	ldrh.w	r6, [r4], #2
 80177d0:	9403      	str	r4, [sp, #12]
 80177d2:	b166      	cbz	r6, 80177ee <finish_pass1+0x1cc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80177d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 80177d6:	ea4f 09ce 	mov.w	r9, lr, lsl #3
	  total += count;
 80177da:	4432      	add	r2, r6
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80177dc:	fb04 0006 	mla	r0, r4, r6, r0
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 80177e0:	f109 0904 	add.w	r9, r9, #4
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80177e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 80177e6:	fb06 3309 	mla	r3, r6, r9, r3
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80177ea:	fb04 aa06 	mla	sl, r4, r6, sl
      for (c2 = c2min; c2 <= c2max; c2++) {
 80177ee:	f10e 0e01 	add.w	lr, lr, #1
 80177f2:	e7e0      	b.n	80177b6 <finish_pass1+0x194>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80177f4:	eb00 0062 	add.w	r0, r0, r2, asr #1
 80177f8:	f8d5 4088 	ldr.w	r4, [r5, #136]	@ 0x88
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80177fc:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
  for (i = 0; i < numboxes; i++)
 8017800:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017804:	6824      	ldr	r4, [r4, #0]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017806:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801780a:	fb90 f0f2 	sdiv	r0, r0, r2
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801780e:	fb9a faf2 	sdiv	sl, sl, r2
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017812:	5460      	strb	r0, [r4, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017814:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8017818:	6840      	ldr	r0, [r0, #4]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 801781a:	fb93 f3f2 	sdiv	r3, r3, r2
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801781e:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017822:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8017826:	6880      	ldr	r0, [r0, #8]
 8017828:	5443      	strb	r3, [r0, r1]
  for (i = 0; i < numboxes; i++)
 801782a:	3101      	adds	r1, #1
 801782c:	4559      	cmp	r1, fp
 801782e:	f47f af24 	bne.w	801767a <finish_pass1+0x58>
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8017832:	682b      	ldr	r3, [r5, #0]
 8017834:	2262      	movs	r2, #98	@ 0x62
  cinfo->actual_number_of_colors = numboxes;
 8017836:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801783a:	4628      	mov	r0, r5
 801783c:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8017840:	685b      	ldr	r3, [r3, #4]
 8017842:	2101      	movs	r1, #1
 8017844:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8017846:	2301      	movs	r3, #1
 8017848:	9a02      	ldr	r2, [sp, #8]
 801784a:	61d3      	str	r3, [r2, #28]
}
 801784c:	b00d      	add	sp, #52	@ 0x34
 801784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8017852:	9a06      	ldr	r2, [sp, #24]
 8017854:	4594      	cmp	ip, r2
 8017856:	f73f af77 	bgt.w	8017748 <finish_pass1+0x126>
      lb = (b1->c2max + b1->c2min) / 2;
 801785a:	4448      	add	r0, r9
 801785c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8017860:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 8017862:	6148      	str	r0, [r1, #20]
      b2->c2min = lb+1;
 8017864:	3001      	adds	r0, #1
 8017866:	6330      	str	r0, [r6, #48]	@ 0x30
      break;
 8017868:	e775      	b.n	8017756 <finish_pass1+0x134>
	...

0801786c <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 801786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801786e:	6843      	ldr	r3, [r0, #4]
 8017870:	222c      	movs	r2, #44	@ 0x2c
 8017872:	2101      	movs	r1, #1
{
 8017874:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 801787a:	4b30      	ldr	r3, [pc, #192]	@ (801793c <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 801787c:	f8c4 01e0 	str.w	r0, [r4, #480]	@ 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017880:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8017882:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8017884:	4b2e      	ldr	r3, [pc, #184]	@ (8017940 <jinit_2pass_quantizer+0xd4>)
 8017886:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8017888:	2300      	movs	r3, #0
 801788a:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 801788c:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 801788e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017890:	2b03      	cmp	r3, #3
 8017892:	d005      	beq.n	80178a0 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8017894:	6823      	ldr	r3, [r4, #0]
 8017896:	2230      	movs	r2, #48	@ 0x30
 8017898:	4620      	mov	r0, r4
 801789a:	615a      	str	r2, [r3, #20]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 80178a0:	6863      	ldr	r3, [r4, #4]
 80178a2:	2600      	movs	r6, #0
 80178a4:	2280      	movs	r2, #128	@ 0x80
 80178a6:	2101      	movs	r1, #1
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	4620      	mov	r0, r4
 80178ac:	4798      	blx	r3
 80178ae:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 80178b0:	6863      	ldr	r3, [r4, #4]
 80178b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80178b6:	69af      	ldr	r7, [r5, #24]
 80178b8:	2101      	movs	r1, #1
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	4620      	mov	r0, r4
 80178be:	4798      	blx	r3
 80178c0:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 80178c2:	3604      	adds	r6, #4
 80178c4:	2e80      	cmp	r6, #128	@ 0x80
 80178c6:	d1f3      	bne.n	80178b0 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 80178c8:	2301      	movs	r3, #1
 80178ca:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 80178cc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d031      	beq.n	8017936 <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 80178d2:	6e26      	ldr	r6, [r4, #96]	@ 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 80178d4:	2e07      	cmp	r6, #7
 80178d6:	dc25      	bgt.n	8017924 <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 80178d8:	223a      	movs	r2, #58	@ 0x3a
 80178da:	6823      	ldr	r3, [r4, #0]
 80178dc:	615a      	str	r2, [r3, #20]
 80178de:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80178e0:	619a      	str	r2, [r3, #24]
 80178e2:	4620      	mov	r0, r4
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 80178e8:	6863      	ldr	r3, [r4, #4]
 80178ea:	4632      	mov	r2, r6
 80178ec:	2101      	movs	r1, #1
 80178ee:	4620      	mov	r0, r4
 80178f0:	689f      	ldr	r7, [r3, #8]
 80178f2:	2303      	movs	r3, #3
 80178f4:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 80178f6:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 80178fa:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80178fe:	b1e3      	cbz	r3, 801793a <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8017900:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017902:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8017904:	4620      	mov	r0, r4
 8017906:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8017908:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801790c:	2306      	movs	r3, #6
 801790e:	435a      	muls	r2, r3
 8017910:	6863      	ldr	r3, [r4, #4]
 8017912:	320c      	adds	r2, #12
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	4798      	blx	r3
 8017918:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 801791a:	4620      	mov	r0, r4
  }
}
 801791c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8017920:	f7ff bcca 	b.w	80172b8 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8017924:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8017928:	ddde      	ble.n	80178e8 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801792a:	223b      	movs	r2, #59	@ 0x3b
 801792c:	6823      	ldr	r3, [r4, #0]
 801792e:	615a      	str	r2, [r3, #20]
 8017930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017934:	e7d4      	b.n	80178e0 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8017936:	612b      	str	r3, [r5, #16]
 8017938:	e7df      	b.n	80178fa <jinit_2pass_quantizer+0x8e>
}
 801793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801793c:	08017335 	.word	0x08017335
 8017940:	08017329 	.word	0x08017329

08017944 <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8017944:	4408      	add	r0, r1
 8017946:	3801      	subs	r0, #1
}
 8017948:	fb90 f0f1 	sdiv	r0, r0, r1
 801794c:	4770      	bx	lr

0801794e <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 801794e:	1e4b      	subs	r3, r1, #1
 8017950:	4403      	add	r3, r0
  return a - (a % b);
 8017952:	fb93 f0f1 	sdiv	r0, r3, r1
 8017956:	fb01 3010 	mls	r0, r1, r0, r3
}
 801795a:	1a18      	subs	r0, r3, r0
 801795c:	4770      	bx	lr

0801795e <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 801795e:	b570      	push	{r4, r5, r6, lr}
 8017960:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8017962:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8017966:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 801796a:	2e00      	cmp	r6, #0
 801796c:	dc00      	bgt.n	8017970 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 801796e:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8017970:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8017972:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8017974:	f854 1b04 	ldr.w	r1, [r4], #4
 8017978:	f855 0b04 	ldr.w	r0, [r5], #4
 801797c:	f012 fccf 	bl	802a31e <memcpy>
  for (row = num_rows; row > 0; row--) {
 8017980:	e7f3      	b.n	801796a <jcopy_sample_rows+0xc>

08017982 <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8017982:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8017984:	01d2      	lsls	r2, r2, #7
 8017986:	4601      	mov	r1, r0
 8017988:	4618      	mov	r0, r3
 801798a:	f012 bcc8 	b.w	802a31e <memcpy>

0801798e <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801798e:	8880      	ldrh	r0, [r0, #4]
 8017990:	4770      	bx	lr

08017992 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017992:	b570      	push	{r4, r5, r6, lr}
 8017994:	6803      	ldr	r3, [r0, #0]
 8017996:	460c      	mov	r4, r1
 8017998:	2100      	movs	r1, #0
 801799a:	4605      	mov	r5, r0
 801799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801799e:	4798      	blx	r3
 80179a0:	4606      	mov	r6, r0
 80179a2:	682b      	ldr	r3, [r5, #0]
 80179a4:	4628      	mov	r0, r5
 80179a6:	1ba4      	subs	r4, r4, r6
 80179a8:	6a1b      	ldr	r3, [r3, #32]
 80179aa:	b2a4      	uxth	r4, r4
 80179ac:	4798      	blx	r3
 80179ae:	fbb4 f0f0 	udiv	r0, r4, r0
 80179b2:	bd70      	pop	{r4, r5, r6, pc}

080179b4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80179b4:	2300      	movs	r3, #0
 80179b6:	8083      	strh	r3, [r0, #4]
 80179b8:	4770      	bx	lr

080179ba <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80179ba:	b510      	push	{r4, lr}
 80179bc:	6803      	ldr	r3, [r0, #0]
 80179be:	4604      	mov	r4, r0
 80179c0:	8881      	ldrh	r1, [r0, #4]
 80179c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179c4:	4798      	blx	r3
 80179c6:	88a3      	ldrh	r3, [r4, #4]
 80179c8:	3301      	adds	r3, #1
 80179ca:	80a3      	strh	r3, [r4, #4]
 80179cc:	bd10      	pop	{r4, pc}

080179ce <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80179ce:	6803      	ldr	r3, [r0, #0]
 80179d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179d2:	4718      	bx	r3

080179d4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80179d4:	4770      	bx	lr
	...

080179d8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80179d8:	4a02      	ldr	r2, [pc, #8]	@ (80179e4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80179da:	6002      	str	r2, [r0, #0]
 80179dc:	2200      	movs	r2, #0
 80179de:	8082      	strh	r2, [r0, #4]
 80179e0:	4770      	bx	lr
 80179e2:	bf00      	nop
 80179e4:	0802f44c 	.word	0x0802f44c

080179e8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80179e8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80179ea:	4770      	bx	lr

080179ec <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80179ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80179ee:	2000      	movs	r0, #0
 80179f0:	b12b      	cbz	r3, 80179fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80179f2:	b920      	cbnz	r0, 80179fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80179f4:	1a5a      	subs	r2, r3, r1
 80179f6:	699b      	ldr	r3, [r3, #24]
 80179f8:	4250      	negs	r0, r2
 80179fa:	4150      	adcs	r0, r2
 80179fc:	e7f8      	b.n	80179f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80179fe:	4770      	bx	lr

08017a00 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017a00:	2300      	movs	r3, #0
 8017a02:	6148      	str	r0, [r1, #20]
 8017a04:	618b      	str	r3, [r1, #24]
 8017a06:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017a08:	b913      	cbnz	r3, 8017a10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8017a0a:	6281      	str	r1, [r0, #40]	@ 0x28
 8017a0c:	4770      	bx	lr
 8017a0e:	4613      	mov	r3, r2
 8017a10:	699a      	ldr	r2, [r3, #24]
 8017a12:	2a00      	cmp	r2, #0
 8017a14:	d1fb      	bne.n	8017a0e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8017a16:	6199      	str	r1, [r3, #24]
 8017a18:	4770      	bx	lr

08017a1a <_ZN8touchgfx9Container9removeAllEv>:
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017a1e:	b123      	cbz	r3, 8017a2a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017a20:	6999      	ldr	r1, [r3, #24]
 8017a22:	6281      	str	r1, [r0, #40]	@ 0x28
 8017a24:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017a28:	e7f8      	b.n	8017a1c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017a2a:	4770      	bx	lr

08017a2c <_ZN8touchgfx9Container6unlinkEv>:
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	6283      	str	r3, [r0, #40]	@ 0x28
 8017a30:	4770      	bx	lr

08017a32 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017a32:	2200      	movs	r2, #0
 8017a34:	8002      	strh	r2, [r0, #0]
 8017a36:	8042      	strh	r2, [r0, #2]
 8017a38:	8082      	strh	r2, [r0, #4]
 8017a3a:	80c2      	strh	r2, [r0, #6]
 8017a3c:	4770      	bx	lr

08017a3e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017a3e:	b570      	push	{r4, r5, r6, lr}
 8017a40:	460d      	mov	r5, r1
 8017a42:	4616      	mov	r6, r2
 8017a44:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017a46:	b13c      	cbz	r4, 8017a58 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017a48:	6823      	ldr	r3, [r4, #0]
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	4632      	mov	r2, r6
 8017a4e:	4629      	mov	r1, r5
 8017a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017a52:	4798      	blx	r3
 8017a54:	69a4      	ldr	r4, [r4, #24]
 8017a56:	e7f6      	b.n	8017a46 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017a58:	bd70      	pop	{r4, r5, r6, pc}

08017a5a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017a5a:	b538      	push	{r3, r4, r5, lr}
 8017a5c:	460d      	mov	r5, r1
 8017a5e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017a60:	b134      	cbz	r4, 8017a70 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017a62:	682b      	ldr	r3, [r5, #0]
 8017a64:	4621      	mov	r1, r4
 8017a66:	4628      	mov	r0, r5
 8017a68:	689b      	ldr	r3, [r3, #8]
 8017a6a:	4798      	blx	r3
 8017a6c:	69a4      	ldr	r4, [r4, #24]
 8017a6e:	e7f7      	b.n	8017a60 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017a70:	bd38      	pop	{r3, r4, r5, pc}

08017a72 <_ZN8touchgfx9ContainerD1Ev>:
 8017a72:	4770      	bx	lr

08017a74 <_ZN8touchgfx9ContainerD0Ev>:
 8017a74:	b510      	push	{r4, lr}
 8017a76:	4604      	mov	r4, r0
 8017a78:	212c      	movs	r1, #44	@ 0x2c
 8017a7a:	f011 fce7 	bl	802944c <_ZdlPvj>
 8017a7e:	4620      	mov	r0, r4
 8017a80:	bd10      	pop	{r4, pc}

08017a82 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017a82:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017a84:	b19b      	cbz	r3, 8017aae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017a86:	428b      	cmp	r3, r1
 8017a88:	d109      	bne.n	8017a9e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017a8a:	699a      	ldr	r2, [r3, #24]
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	6159      	str	r1, [r3, #20]
 8017a90:	6282      	str	r2, [r0, #40]	@ 0x28
 8017a92:	b902      	cbnz	r2, 8017a96 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017a94:	4770      	bx	lr
 8017a96:	6199      	str	r1, [r3, #24]
 8017a98:	4770      	bx	lr
 8017a9a:	4613      	mov	r3, r2
 8017a9c:	b13a      	cbz	r2, 8017aae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017a9e:	699a      	ldr	r2, [r3, #24]
 8017aa0:	428a      	cmp	r2, r1
 8017aa2:	d1fa      	bne.n	8017a9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017aa4:	698a      	ldr	r2, [r1, #24]
 8017aa6:	619a      	str	r2, [r3, #24]
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017aae:	4770      	bx	lr

08017ab0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017ab0:	b410      	push	{r4}
 8017ab2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	b92b      	cbnz	r3, 8017ac4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017ab8:	6803      	ldr	r3, [r0, #0]
 8017aba:	4611      	mov	r1, r2
 8017abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017ac2:	4718      	bx	r3
 8017ac4:	b941      	cbnz	r1, 8017ad8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017ac6:	6193      	str	r3, [r2, #24]
 8017ac8:	6282      	str	r2, [r0, #40]	@ 0x28
 8017aca:	6154      	str	r4, [r2, #20]
 8017acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ad0:	4770      	bx	lr
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	d0f9      	beq.n	8017acc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017ad8:	4299      	cmp	r1, r3
 8017ada:	6998      	ldr	r0, [r3, #24]
 8017adc:	d1f9      	bne.n	8017ad2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017ade:	6190      	str	r0, [r2, #24]
 8017ae0:	618a      	str	r2, [r1, #24]
 8017ae2:	e7f2      	b.n	8017aca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08017ae4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae8:	461f      	mov	r7, r3
 8017aea:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8017aee:	460d      	mov	r5, r1
 8017af0:	4616      	mov	r6, r2
 8017af2:	b103      	cbz	r3, 8017af6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017af4:	6038      	str	r0, [r7, #0]
 8017af6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017af8:	b314      	cbz	r4, 8017b40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017afa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017afe:	b1eb      	cbz	r3, 8017b3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017b00:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017b04:	428d      	cmp	r5, r1
 8017b06:	db19      	blt.n	8017b3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017b08:	b289      	uxth	r1, r1
 8017b0a:	8923      	ldrh	r3, [r4, #8]
 8017b0c:	440b      	add	r3, r1
 8017b0e:	b21b      	sxth	r3, r3
 8017b10:	429d      	cmp	r5, r3
 8017b12:	da13      	bge.n	8017b3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017b14:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017b18:	4296      	cmp	r6, r2
 8017b1a:	db0f      	blt.n	8017b3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017b1c:	b292      	uxth	r2, r2
 8017b1e:	8963      	ldrh	r3, [r4, #10]
 8017b20:	4413      	add	r3, r2
 8017b22:	b21b      	sxth	r3, r3
 8017b24:	429e      	cmp	r6, r3
 8017b26:	da09      	bge.n	8017b3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017b28:	6823      	ldr	r3, [r4, #0]
 8017b2a:	1ab2      	subs	r2, r6, r2
 8017b2c:	1a69      	subs	r1, r5, r1
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8017b34:	b212      	sxth	r2, r2
 8017b36:	463b      	mov	r3, r7
 8017b38:	b209      	sxth	r1, r1
 8017b3a:	47c0      	blx	r8
 8017b3c:	69a4      	ldr	r4, [r4, #24]
 8017b3e:	e7db      	b.n	8017af8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b48:	4c6d      	ldr	r4, [pc, #436]	@ (8017d00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017b4a:	b0a1      	sub	sp, #132	@ 0x84
 8017b4c:	4606      	mov	r6, r0
 8017b4e:	6824      	ldr	r4, [r4, #0]
 8017b50:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017b52:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8017b56:	2400      	movs	r4, #0
 8017b58:	9303      	str	r3, [sp, #12]
 8017b5a:	802c      	strh	r4, [r5, #0]
 8017b5c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8017b5e:	802c      	strh	r4, [r5, #0]
 8017b60:	601c      	str	r4, [r3, #0]
 8017b62:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017b66:	f7ff ffbd 	bl	8017ae4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017b6a:	f1b9 0f03 	cmp.w	r9, #3
 8017b6e:	f340 80c1 	ble.w	8017cf4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017b72:	4631      	mov	r1, r6
 8017b74:	a80c      	add	r0, sp, #48	@ 0x30
 8017b76:	f005 fd61 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b7a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8017b7e:	9306      	str	r3, [sp, #24]
 8017b80:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017b84:	9307      	str	r3, [sp, #28]
 8017b86:	9b03      	ldr	r3, [sp, #12]
 8017b88:	f8d3 a000 	ldr.w	sl, [r3]
 8017b8c:	f1ba 0f00 	cmp.w	sl, #0
 8017b90:	f000 80b3 	beq.w	8017cfa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017b94:	4651      	mov	r1, sl
 8017b96:	a810      	add	r0, sp, #64	@ 0x40
 8017b98:	f005 fd50 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b9c:	2002      	movs	r0, #2
 8017b9e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8017ba2:	9b01      	ldr	r3, [sp, #4]
 8017ba4:	9a06      	ldr	r2, [sp, #24]
 8017ba6:	fb91 f1f0 	sdiv	r1, r1, r0
 8017baa:	189d      	adds	r5, r3, r2
 8017bac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8017bb0:	9a07      	ldr	r2, [sp, #28]
 8017bb2:	4419      	add	r1, r3
 8017bb4:	9b02      	ldr	r3, [sp, #8]
 8017bb6:	4413      	add	r3, r2
 8017bb8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8017bbc:	1a6d      	subs	r5, r5, r1
 8017bbe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8017bc2:	fb92 f2f0 	sdiv	r2, r2, r0
 8017bc6:	440a      	add	r2, r1
 8017bc8:	1a9b      	subs	r3, r3, r2
 8017bca:	435b      	muls	r3, r3
 8017bcc:	fb05 3505 	mla	r5, r5, r5, r3
 8017bd0:	4f4c      	ldr	r7, [pc, #304]	@ (8017d04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017bd2:	ac10      	add	r4, sp, #64	@ 0x40
 8017bd4:	f1b9 0f0c 	cmp.w	r9, #12
 8017bd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017bdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017be0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017be4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017bec:	f04f 0303 	mov.w	r3, #3
 8017bf0:	bfd8      	it	le
 8017bf2:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017bf6:	f04f 0400 	mov.w	r4, #0
 8017bfa:	f8cd 9000 	str.w	r9, [sp]
 8017bfe:	bfcc      	ite	gt
 8017c00:	4698      	movgt	r8, r3
 8017c02:	fb92 f8f3 	sdivle	r8, r2, r3
 8017c06:	1c63      	adds	r3, r4, #1
 8017c08:	aa10      	add	r2, sp, #64	@ 0x40
 8017c0a:	f004 0401 	and.w	r4, r4, #1
 8017c0e:	f04f 0b00 	mov.w	fp, #0
 8017c12:	9308      	str	r3, [sp, #32]
 8017c14:	9b00      	ldr	r3, [sp, #0]
 8017c16:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017c1a:	fb93 f3f8 	sdiv	r3, r3, r8
 8017c1e:	3404      	adds	r4, #4
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	9304      	str	r3, [sp, #16]
 8017c24:	9a04      	ldr	r2, [sp, #16]
 8017c26:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017c2a:	fb13 f302 	smulbb	r3, r3, r2
 8017c2e:	9a01      	ldr	r2, [sp, #4]
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	1899      	adds	r1, r3, r2
 8017c34:	9305      	str	r3, [sp, #20]
 8017c36:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017c3a:	b209      	sxth	r1, r1
 8017c3c:	4299      	cmp	r1, r3
 8017c3e:	db4d      	blt.n	8017cdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017c40:	8932      	ldrh	r2, [r6, #8]
 8017c42:	4413      	add	r3, r2
 8017c44:	b21b      	sxth	r3, r3
 8017c46:	4299      	cmp	r1, r3
 8017c48:	da48      	bge.n	8017cdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017c4a:	9b04      	ldr	r3, [sp, #16]
 8017c4c:	6827      	ldr	r7, [r4, #0]
 8017c4e:	fb17 f703 	smulbb	r7, r7, r3
 8017c52:	9b02      	ldr	r3, [sp, #8]
 8017c54:	b2bf      	uxth	r7, r7
 8017c56:	18fa      	adds	r2, r7, r3
 8017c58:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017c5c:	b212      	sxth	r2, r2
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	db3c      	blt.n	8017cdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017c62:	8970      	ldrh	r0, [r6, #10]
 8017c64:	4403      	add	r3, r0
 8017c66:	b21b      	sxth	r3, r3
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	da37      	bge.n	8017cdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	4630      	mov	r0, r6
 8017c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c72:	ab0b      	add	r3, sp, #44	@ 0x2c
 8017c74:	f7ff ff36 	bl	8017ae4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017c78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017c7a:	b37a      	cbz	r2, 8017cdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017c7c:	4552      	cmp	r2, sl
 8017c7e:	d02d      	beq.n	8017cdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017c80:	4611      	mov	r1, r2
 8017c82:	a80e      	add	r0, sp, #56	@ 0x38
 8017c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8017c86:	f005 fcd9 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c8a:	f04f 0e02 	mov.w	lr, #2
 8017c8e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8017c92:	9a06      	ldr	r2, [sp, #24]
 8017c94:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8017c98:	9b01      	ldr	r3, [sp, #4]
 8017c9a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8017c9e:	4413      	add	r3, r2
 8017ca0:	9a07      	ldr	r2, [sp, #28]
 8017ca2:	fb91 f1fe 	sdiv	r1, r1, lr
 8017ca6:	fb9c fcfe 	sdiv	ip, ip, lr
 8017caa:	4401      	add	r1, r0
 8017cac:	1a58      	subs	r0, r3, r1
 8017cae:	9b02      	ldr	r3, [sp, #8]
 8017cb0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8017cb4:	4413      	add	r3, r2
 8017cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cb8:	448c      	add	ip, r1
 8017cba:	eba3 030c 	sub.w	r3, r3, ip
 8017cbe:	435b      	muls	r3, r3
 8017cc0:	fb00 3300 	mla	r3, r0, r0, r3
 8017cc4:	42ab      	cmp	r3, r5
 8017cc6:	d208      	bcs.n	8017cda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017cc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017cca:	461d      	mov	r5, r3
 8017ccc:	9803      	ldr	r0, [sp, #12]
 8017cce:	6001      	str	r1, [r0, #0]
 8017cd0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8017cd2:	9805      	ldr	r0, [sp, #20]
 8017cd4:	8008      	strh	r0, [r1, #0]
 8017cd6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017cd8:	800f      	strh	r7, [r1, #0]
 8017cda:	4692      	mov	sl, r2
 8017cdc:	f10b 0b01 	add.w	fp, fp, #1
 8017ce0:	3408      	adds	r4, #8
 8017ce2:	f1bb 0f04 	cmp.w	fp, #4
 8017ce6:	d19d      	bne.n	8017c24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017ce8:	9b00      	ldr	r3, [sp, #0]
 8017cea:	9c08      	ldr	r4, [sp, #32]
 8017cec:	444b      	add	r3, r9
 8017cee:	4544      	cmp	r4, r8
 8017cf0:	9300      	str	r3, [sp, #0]
 8017cf2:	d188      	bne.n	8017c06 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017cf4:	b021      	add	sp, #132	@ 0x84
 8017cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cfa:	f04f 35ff 	mov.w	r5, #4294967295
 8017cfe:	e767      	b.n	8017bd0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017d00:	24015c48 	.word	0x24015c48
 8017d04:	0802aff0 	.word	0x0802aff0

08017d08 <_ZN8touchgfx4RectaNERKS0_>:
 8017d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d0c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017d10:	888c      	ldrh	r4, [r1, #4]
 8017d12:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017d16:	443c      	add	r4, r7
 8017d18:	b2a4      	uxth	r4, r4
 8017d1a:	fa0f f884 	sxth.w	r8, r4
 8017d1e:	45c1      	cmp	r9, r8
 8017d20:	da2f      	bge.n	8017d82 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017d22:	8882      	ldrh	r2, [r0, #4]
 8017d24:	444a      	add	r2, r9
 8017d26:	b292      	uxth	r2, r2
 8017d28:	fa0f fe82 	sxth.w	lr, r2
 8017d2c:	4577      	cmp	r7, lr
 8017d2e:	da28      	bge.n	8017d82 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017d30:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017d34:	88cb      	ldrh	r3, [r1, #6]
 8017d36:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017d3a:	442b      	add	r3, r5
 8017d3c:	b21b      	sxth	r3, r3
 8017d3e:	429e      	cmp	r6, r3
 8017d40:	da1f      	bge.n	8017d82 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017d42:	88c3      	ldrh	r3, [r0, #6]
 8017d44:	4433      	add	r3, r6
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	fa0f fc83 	sxth.w	ip, r3
 8017d4c:	4565      	cmp	r5, ip
 8017d4e:	da18      	bge.n	8017d82 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017d50:	454f      	cmp	r7, r9
 8017d52:	bfb8      	it	lt
 8017d54:	464f      	movlt	r7, r9
 8017d56:	42b5      	cmp	r5, r6
 8017d58:	bfb8      	it	lt
 8017d5a:	4635      	movlt	r5, r6
 8017d5c:	45f0      	cmp	r8, lr
 8017d5e:	bfd8      	it	le
 8017d60:	4622      	movle	r2, r4
 8017d62:	1bd2      	subs	r2, r2, r7
 8017d64:	8082      	strh	r2, [r0, #4]
 8017d66:	884a      	ldrh	r2, [r1, #2]
 8017d68:	88c9      	ldrh	r1, [r1, #6]
 8017d6a:	8007      	strh	r7, [r0, #0]
 8017d6c:	440a      	add	r2, r1
 8017d6e:	8045      	strh	r5, [r0, #2]
 8017d70:	b292      	uxth	r2, r2
 8017d72:	b211      	sxth	r1, r2
 8017d74:	458c      	cmp	ip, r1
 8017d76:	bfa8      	it	ge
 8017d78:	4613      	movge	r3, r2
 8017d7a:	1b5b      	subs	r3, r3, r5
 8017d7c:	80c3      	strh	r3, [r0, #6]
 8017d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d82:	2300      	movs	r3, #0
 8017d84:	8003      	strh	r3, [r0, #0]
 8017d86:	8043      	strh	r3, [r0, #2]
 8017d88:	8083      	strh	r3, [r0, #4]
 8017d8a:	80c3      	strh	r3, [r0, #6]
 8017d8c:	e7f7      	b.n	8017d7e <_ZN8touchgfx4RectaNERKS0_+0x76>

08017d8e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017d8e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	dd06      	ble.n	8017da4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017d96:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	bfcc      	ite	gt
 8017d9e:	2000      	movgt	r0, #0
 8017da0:	2001      	movle	r0, #1
 8017da2:	4770      	bx	lr
 8017da4:	2001      	movs	r0, #1
 8017da6:	4770      	bx	lr

08017da8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dac:	2300      	movs	r3, #0
 8017dae:	4604      	mov	r4, r0
 8017db0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017db2:	8003      	strh	r3, [r0, #0]
 8017db4:	8043      	strh	r3, [r0, #2]
 8017db6:	8083      	strh	r3, [r0, #4]
 8017db8:	80c3      	strh	r3, [r0, #6]
 8017dba:	2d00      	cmp	r5, #0
 8017dbc:	d040      	beq.n	8017e40 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017dbe:	1d28      	adds	r0, r5, #4
 8017dc0:	f7ff ffe5 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017dc4:	b988      	cbnz	r0, 8017dea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f7ff ffe1 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017dcc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017dd0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017dd4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017dd8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017ddc:	b138      	cbz	r0, 8017dee <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017dde:	8022      	strh	r2, [r4, #0]
 8017de0:	8063      	strh	r3, [r4, #2]
 8017de2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017de6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017dea:	69ad      	ldr	r5, [r5, #24]
 8017dec:	e7e5      	b.n	8017dba <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017dee:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017df2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017df6:	4290      	cmp	r0, r2
 8017df8:	4607      	mov	r7, r0
 8017dfa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017dfe:	460e      	mov	r6, r1
 8017e00:	bfa8      	it	ge
 8017e02:	4617      	movge	r7, r2
 8017e04:	4299      	cmp	r1, r3
 8017e06:	4472      	add	r2, lr
 8017e08:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017e0c:	bfa8      	it	ge
 8017e0e:	461e      	movge	r6, r3
 8017e10:	4440      	add	r0, r8
 8017e12:	4471      	add	r1, lr
 8017e14:	4463      	add	r3, ip
 8017e16:	b200      	sxth	r0, r0
 8017e18:	8027      	strh	r7, [r4, #0]
 8017e1a:	b212      	sxth	r2, r2
 8017e1c:	8066      	strh	r6, [r4, #2]
 8017e1e:	b209      	sxth	r1, r1
 8017e20:	b21b      	sxth	r3, r3
 8017e22:	4290      	cmp	r0, r2
 8017e24:	bfac      	ite	ge
 8017e26:	ebc7 0200 	rsbge	r2, r7, r0
 8017e2a:	ebc7 0202 	rsblt	r2, r7, r2
 8017e2e:	4299      	cmp	r1, r3
 8017e30:	bfac      	ite	ge
 8017e32:	ebc6 0301 	rsbge	r3, r6, r1
 8017e36:	ebc6 0303 	rsblt	r3, r6, r3
 8017e3a:	80a2      	strh	r2, [r4, #4]
 8017e3c:	80e3      	strh	r3, [r4, #6]
 8017e3e:	e7d4      	b.n	8017dea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017e40:	4620      	mov	r0, r4
 8017e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e46 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017e46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017e4a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8017e4e:	b383      	cbz	r3, 8017eb2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017e50:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017e52:	b374      	cbz	r4, 8017eb2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017e54:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017e58:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017e5c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017e60:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017e64:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017e68:	b303      	cbz	r3, 8017eac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017e6a:	4668      	mov	r0, sp
 8017e6c:	1d21      	adds	r1, r4, #4
 8017e6e:	f8ad 5000 	strh.w	r5, [sp]
 8017e72:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017e76:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017e7a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017e7e:	f7ff ff43 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 8017e82:	4668      	mov	r0, sp
 8017e84:	f7ff ff83 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e88:	b980      	cbnz	r0, 8017eac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017e8a:	f8bd 3000 	ldrh.w	r3, [sp]
 8017e8e:	4669      	mov	r1, sp
 8017e90:	88a2      	ldrh	r2, [r4, #4]
 8017e92:	4620      	mov	r0, r4
 8017e94:	1a9b      	subs	r3, r3, r2
 8017e96:	88e2      	ldrh	r2, [r4, #6]
 8017e98:	f8ad 3000 	strh.w	r3, [sp]
 8017e9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017ea0:	1a9b      	subs	r3, r3, r2
 8017ea2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017ea6:	6823      	ldr	r3, [r4, #0]
 8017ea8:	689b      	ldr	r3, [r3, #8]
 8017eaa:	4798      	blx	r3
 8017eac:	69a4      	ldr	r4, [r4, #24]
 8017eae:	2c00      	cmp	r4, #0
 8017eb0:	d1d8      	bne.n	8017e64 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017eb2:	b002      	add	sp, #8
 8017eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017eb8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017eba:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8017ebe:	460d      	mov	r5, r1
 8017ec0:	4616      	mov	r6, r2
 8017ec2:	b323      	cbz	r3, 8017f0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017ec4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017ec6:	b314      	cbz	r4, 8017f0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017ec8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017ecc:	b1eb      	cbz	r3, 8017f0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017ece:	6828      	ldr	r0, [r5, #0]
 8017ed0:	466b      	mov	r3, sp
 8017ed2:	6869      	ldr	r1, [r5, #4]
 8017ed4:	c303      	stmia	r3!, {r0, r1}
 8017ed6:	4668      	mov	r0, sp
 8017ed8:	1d21      	adds	r1, r4, #4
 8017eda:	f7ff ff15 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 8017ede:	4668      	mov	r0, sp
 8017ee0:	f7ff ff55 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ee4:	b988      	cbnz	r0, 8017f0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017ee6:	f8bd 3000 	ldrh.w	r3, [sp]
 8017eea:	4669      	mov	r1, sp
 8017eec:	88a2      	ldrh	r2, [r4, #4]
 8017eee:	4620      	mov	r0, r4
 8017ef0:	1a9b      	subs	r3, r3, r2
 8017ef2:	88e2      	ldrh	r2, [r4, #6]
 8017ef4:	f8ad 3000 	strh.w	r3, [sp]
 8017ef8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017efc:	1a9b      	subs	r3, r3, r2
 8017efe:	4632      	mov	r2, r6
 8017f00:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017f04:	6823      	ldr	r3, [r4, #0]
 8017f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017f08:	4798      	blx	r3
 8017f0a:	69a4      	ldr	r4, [r4, #24]
 8017f0c:	e7db      	b.n	8017ec6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017f0e:	b002      	add	sp, #8
 8017f10:	bd70      	pop	{r4, r5, r6, pc}

08017f12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017f12:	6803      	ldr	r3, [r0, #0]
 8017f14:	b513      	push	{r0, r1, r4, lr}
 8017f16:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	e9cd 3300 	strd	r3, r3, [sp]
 8017f20:	466b      	mov	r3, sp
 8017f22:	47a0      	blx	r4
 8017f24:	b002      	add	sp, #8
 8017f26:	bd10      	pop	{r4, pc}

08017f28 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017f28:	2301      	movs	r3, #1
 8017f2a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8017f2e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8017f32:	4770      	bx	lr

08017f34 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017f34:	2301      	movs	r3, #1
 8017f36:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8017f3a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8017f3e:	4770      	bx	lr

08017f40 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017f40:	6843      	ldr	r3, [r0, #4]
 8017f42:	2201      	movs	r2, #1
 8017f44:	725a      	strb	r2, [r3, #9]
 8017f46:	6840      	ldr	r0, [r0, #4]
 8017f48:	6803      	ldr	r3, [r0, #0]
 8017f4a:	691b      	ldr	r3, [r3, #16]
 8017f4c:	4718      	bx	r3

08017f4e <_ZN8touchgfx3HAL8flushDMAEv>:
 8017f4e:	6840      	ldr	r0, [r0, #4]
 8017f50:	6803      	ldr	r3, [r0, #0]
 8017f52:	689b      	ldr	r3, [r3, #8]
 8017f54:	4718      	bx	r3

08017f56 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017f56:	b530      	push	{r4, r5, lr}
 8017f58:	b08b      	sub	sp, #44	@ 0x2c
 8017f5a:	6804      	ldr	r4, [r0, #0]
 8017f5c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8017f60:	9509      	str	r5, [sp, #36]	@ 0x24
 8017f62:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8017f66:	9508      	str	r5, [sp, #32]
 8017f68:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8017f6c:	9507      	str	r5, [sp, #28]
 8017f6e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8017f72:	9506      	str	r5, [sp, #24]
 8017f74:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8017f78:	9505      	str	r5, [sp, #20]
 8017f7a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8017f7e:	9504      	str	r5, [sp, #16]
 8017f80:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8017f84:	9503      	str	r5, [sp, #12]
 8017f86:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8017f8a:	9502      	str	r5, [sp, #8]
 8017f8c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8017f90:	e9cd 3500 	strd	r3, r5, [sp]
 8017f94:	4613      	mov	r3, r2
 8017f96:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8017f98:	2200      	movs	r2, #0
 8017f9a:	47a0      	blx	r4
 8017f9c:	b00b      	add	sp, #44	@ 0x2c
 8017f9e:	bd30      	pop	{r4, r5, pc}

08017fa0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017fa0:	4b04      	ldr	r3, [pc, #16]	@ (8017fb4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	b123      	cbz	r3, 8017fb0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017fa6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8017faa:	f080 0001 	eor.w	r0, r0, #1
 8017fae:	4770      	bx	lr
 8017fb0:	2001      	movs	r0, #1
 8017fb2:	4770      	bx	lr
 8017fb4:	24015c46 	.word	0x24015c46

08017fb8 <_ZN8touchgfx3HAL8endFrameEv>:
 8017fb8:	b510      	push	{r4, lr}
 8017fba:	4604      	mov	r4, r0
 8017fbc:	6840      	ldr	r0, [r0, #4]
 8017fbe:	6803      	ldr	r3, [r0, #0]
 8017fc0:	689b      	ldr	r3, [r3, #8]
 8017fc2:	4798      	blx	r3
 8017fc4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8017fc8:	b113      	cbz	r3, 8017fd0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017fca:	2301      	movs	r3, #1
 8017fcc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8017fd0:	bd10      	pop	{r4, pc}

08017fd2 <_ZN8touchgfx3HAL10initializeEv>:
 8017fd2:	b510      	push	{r4, lr}
 8017fd4:	4604      	mov	r4, r0
 8017fd6:	f7e9 fcff 	bl	80019d8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017fda:	f7e9 fbc5 	bl	8001768 <_ZN8touchgfx4GPIO4initEv>
 8017fde:	6860      	ldr	r0, [r4, #4]
 8017fe0:	6803      	ldr	r3, [r0, #0]
 8017fe2:	68db      	ldr	r3, [r3, #12]
 8017fe4:	4798      	blx	r3
 8017fe6:	68e0      	ldr	r0, [r4, #12]
 8017fe8:	6803      	ldr	r3, [r0, #0]
 8017fea:	689b      	ldr	r3, [r3, #8]
 8017fec:	4798      	blx	r3
 8017fee:	6823      	ldr	r3, [r4, #0]
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ff8:	4718      	bx	r3
	...

08017ffc <_ZN8touchgfx3HAL4tickEv>:
 8017ffc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017ffe:	6803      	ldr	r3, [r0, #0]
 8018000:	4604      	mov	r4, r0
 8018002:	4d5b      	ldr	r5, [pc, #364]	@ (8018170 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8018004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018008:	4798      	blx	r3
 801800a:	2800      	cmp	r0, #0
 801800c:	f000 8095 	beq.w	801813a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8018010:	2001      	movs	r0, #1
 8018012:	2600      	movs	r6, #0
 8018014:	f7e9 fb06 	bl	8001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018018:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 801801c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8018020:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018024:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8018028:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 801802c:	b133      	cbz	r3, 801803c <_ZN8touchgfx3HAL4tickEv+0x40>
 801802e:	6823      	ldr	r3, [r4, #0]
 8018030:	4620      	mov	r0, r4
 8018032:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8018036:	4798      	blx	r3
 8018038:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 801803c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8018040:	2601      	movs	r6, #1
 8018042:	6862      	ldr	r2, [r4, #4]
 8018044:	f083 0301 	eor.w	r3, r3, #1
 8018048:	702e      	strb	r6, [r5, #0]
 801804a:	7253      	strb	r3, [r2, #9]
 801804c:	f004 f9e2 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>
 8018050:	6803      	ldr	r3, [r0, #0]
 8018052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018054:	4798      	blx	r3
 8018056:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801805a:	b90b      	cbnz	r3, 8018060 <_ZN8touchgfx3HAL4tickEv+0x64>
 801805c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8018060:	f004 f9d8 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>
 8018064:	6803      	ldr	r3, [r0, #0]
 8018066:	695b      	ldr	r3, [r3, #20]
 8018068:	4798      	blx	r3
 801806a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801806c:	6803      	ldr	r3, [r0, #0]
 801806e:	691b      	ldr	r3, [r3, #16]
 8018070:	4798      	blx	r3
 8018072:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8018076:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801807a:	3b01      	subs	r3, #1
 801807c:	b2db      	uxtb	r3, r3
 801807e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018082:	b10a      	cbz	r2, 8018088 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8018084:	2b00      	cmp	r3, #0
 8018086:	d1eb      	bne.n	8018060 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018088:	4a3a      	ldr	r2, [pc, #232]	@ (8018174 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801808a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 801808e:	7813      	ldrb	r3, [r2, #0]
 8018090:	3301      	adds	r3, #1
 8018092:	b25b      	sxtb	r3, r3
 8018094:	4299      	cmp	r1, r3
 8018096:	7013      	strb	r3, [r2, #0]
 8018098:	dc10      	bgt.n	80180bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801809a:	2300      	movs	r3, #0
 801809c:	68e0      	ldr	r0, [r4, #12]
 801809e:	a902      	add	r1, sp, #8
 80180a0:	7013      	strb	r3, [r2, #0]
 80180a2:	aa03      	add	r2, sp, #12
 80180a4:	6803      	ldr	r3, [r0, #0]
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	4798      	blx	r3
 80180aa:	6823      	ldr	r3, [r4, #0]
 80180ac:	2800      	cmp	r0, #0
 80180ae:	d050      	beq.n	8018152 <_ZN8touchgfx3HAL4tickEv+0x156>
 80180b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80180b4:	4620      	mov	r0, r4
 80180b6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80180ba:	4798      	blx	r3
 80180bc:	2300      	movs	r3, #0
 80180be:	6960      	ldr	r0, [r4, #20]
 80180c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80180c4:	b158      	cbz	r0, 80180de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80180c6:	6803      	ldr	r3, [r0, #0]
 80180c8:	f10d 0107 	add.w	r1, sp, #7
 80180cc:	68db      	ldr	r3, [r3, #12]
 80180ce:	4798      	blx	r3
 80180d0:	b128      	cbz	r0, 80180de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80180d2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80180d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80180d8:	6803      	ldr	r3, [r0, #0]
 80180da:	68db      	ldr	r3, [r3, #12]
 80180dc:	4798      	blx	r3
 80180de:	f104 001c 	add.w	r0, r4, #28
 80180e2:	f010 fb97 	bl	8028814 <_ZN8touchgfx8Gestures4tickEv>
 80180e6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80180ea:	b30b      	cbz	r3, 8018130 <_ZN8touchgfx3HAL4tickEv+0x134>
 80180ec:	6920      	ldr	r0, [r4, #16]
 80180ee:	6803      	ldr	r3, [r0, #0]
 80180f0:	691b      	ldr	r3, [r3, #16]
 80180f2:	4798      	blx	r3
 80180f4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80180f6:	4606      	mov	r6, r0
 80180f8:	b903      	cbnz	r3, 80180fc <_ZN8touchgfx3HAL4tickEv+0x100>
 80180fa:	6760      	str	r0, [r4, #116]	@ 0x74
 80180fc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80180fe:	4a1e      	ldr	r2, [pc, #120]	@ (8018178 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018100:	1af3      	subs	r3, r6, r3
 8018102:	4293      	cmp	r3, r2
 8018104:	d914      	bls.n	8018130 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018106:	6920      	ldr	r0, [r4, #16]
 8018108:	6803      	ldr	r3, [r0, #0]
 801810a:	699b      	ldr	r3, [r3, #24]
 801810c:	4798      	blx	r3
 801810e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8018110:	2264      	movs	r2, #100	@ 0x64
 8018112:	1af3      	subs	r3, r6, r3
 8018114:	fbb3 f3f2 	udiv	r3, r3, r2
 8018118:	fbb0 f0f3 	udiv	r0, r0, r3
 801811c:	2800      	cmp	r0, #0
 801811e:	dc1d      	bgt.n	801815c <_ZN8touchgfx3HAL4tickEv+0x160>
 8018120:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8018124:	6920      	ldr	r0, [r4, #16]
 8018126:	2100      	movs	r1, #0
 8018128:	6803      	ldr	r3, [r0, #0]
 801812a:	69db      	ldr	r3, [r3, #28]
 801812c:	4798      	blx	r3
 801812e:	6766      	str	r6, [r4, #116]	@ 0x74
 8018130:	f004 f970 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>
 8018134:	6803      	ldr	r3, [r0, #0]
 8018136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018138:	4798      	blx	r3
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	4620      	mov	r0, r4
 801813e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018142:	4798      	blx	r3
 8018144:	2001      	movs	r0, #1
 8018146:	f7e9 fa9f 	bl	8001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801814a:	2300      	movs	r3, #0
 801814c:	702b      	strb	r3, [r5, #0]
 801814e:	b004      	add	sp, #16
 8018150:	bd70      	pop	{r4, r5, r6, pc}
 8018152:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018156:	4620      	mov	r0, r4
 8018158:	4798      	blx	r3
 801815a:	e7af      	b.n	80180bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801815c:	2863      	cmp	r0, #99	@ 0x63
 801815e:	bfcb      	itete	gt
 8018160:	2300      	movgt	r3, #0
 8018162:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8018166:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801816a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 801816e:	e7d9      	b.n	8018124 <_ZN8touchgfx3HAL4tickEv+0x128>
 8018170:	24015c4c 	.word	0x24015c4c
 8018174:	24015c4d 	.word	0x24015c4d
 8018178:	05f5e100 	.word	0x05f5e100

0801817c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801817c:	b510      	push	{r4, lr}
 801817e:	4604      	mov	r4, r0
 8018180:	f7e9 fc5a 	bl	8001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8018184:	2200      	movs	r2, #0
 8018186:	6863      	ldr	r3, [r4, #4]
 8018188:	729a      	strb	r2, [r3, #10]
 801818a:	bd10      	pop	{r4, pc}

0801818c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801818c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 801818e:	301c      	adds	r0, #28
 8018190:	f010 bb3e 	b.w	8028810 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018194 <_ZN8touchgfx3HAL5touchEll>:
 8018194:	b530      	push	{r4, r5, lr}
 8018196:	b087      	sub	sp, #28
 8018198:	4604      	mov	r4, r0
 801819a:	a804      	add	r0, sp, #16
 801819c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80181a0:	f003 ff20 	bl	801bfe4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80181a4:	9b04      	ldr	r3, [sp, #16]
 80181a6:	a906      	add	r1, sp, #24
 80181a8:	a803      	add	r0, sp, #12
 80181aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80181ae:	9b05      	ldr	r3, [sp, #20]
 80181b0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80181b4:	f003 ff68 	bl	801c088 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80181b8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80181bc:	f104 001c 	add.w	r0, r4, #28
 80181c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80181c4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80181c8:	b189      	cbz	r1, 80181ee <_ZN8touchgfx3HAL5touchEll+0x5a>
 80181ca:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80181ce:	9300      	str	r3, [sp, #0]
 80181d0:	4613      	mov	r3, r2
 80181d2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80181d6:	462a      	mov	r2, r5
 80181d8:	f010 fb2a 	bl	8028830 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80181dc:	b128      	cbz	r0, 80181ea <_ZN8touchgfx3HAL5touchEll+0x56>
 80181de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80181e2:	6623      	str	r3, [r4, #96]	@ 0x60
 80181e4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80181e8:	6663      	str	r3, [r4, #100]	@ 0x64
 80181ea:	b007      	add	sp, #28
 80181ec:	bd30      	pop	{r4, r5, pc}
 80181ee:	f010 fb5f 	bl	80288b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80181f2:	2301      	movs	r3, #1
 80181f4:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80181f8:	e7f1      	b.n	80181de <_ZN8touchgfx3HAL5touchEll+0x4a>

080181fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80181fa:	b510      	push	{r4, lr}
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d046      	beq.n	801828e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018200:	ea81 0002 	eor.w	r0, r1, r2
 8018204:	07c4      	lsls	r4, r0, #31
 8018206:	d508      	bpl.n	801821a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018208:	440b      	add	r3, r1
 801820a:	3a01      	subs	r2, #1
 801820c:	428b      	cmp	r3, r1
 801820e:	d93e      	bls.n	801828e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018210:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018214:	f801 0b01 	strb.w	r0, [r1], #1
 8018218:	e7f8      	b.n	801820c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801821a:	07d0      	lsls	r0, r2, #31
 801821c:	bf42      	ittt	mi
 801821e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018222:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018226:	f801 0b01 	strbmi.w	r0, [r1], #1
 801822a:	2b01      	cmp	r3, #1
 801822c:	d911      	bls.n	8018252 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801822e:	ea81 0402 	eor.w	r4, r1, r2
 8018232:	4610      	mov	r0, r2
 8018234:	07a4      	lsls	r4, r4, #30
 8018236:	d022      	beq.n	801827e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018238:	f023 0401 	bic.w	r4, r3, #1
 801823c:	440c      	add	r4, r1
 801823e:	428c      	cmp	r4, r1
 8018240:	4602      	mov	r2, r0
 8018242:	d904      	bls.n	801824e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018244:	8812      	ldrh	r2, [r2, #0]
 8018246:	3002      	adds	r0, #2
 8018248:	f821 2b02 	strh.w	r2, [r1], #2
 801824c:	e7f7      	b.n	801823e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801824e:	f003 0301 	and.w	r3, r3, #1
 8018252:	f023 0003 	bic.w	r0, r3, #3
 8018256:	4408      	add	r0, r1
 8018258:	4288      	cmp	r0, r1
 801825a:	4614      	mov	r4, r2
 801825c:	d904      	bls.n	8018268 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801825e:	6824      	ldr	r4, [r4, #0]
 8018260:	3204      	adds	r2, #4
 8018262:	f841 4b04 	str.w	r4, [r1], #4
 8018266:	e7f7      	b.n	8018258 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018268:	f003 0303 	and.w	r3, r3, #3
 801826c:	3a01      	subs	r2, #1
 801826e:	440b      	add	r3, r1
 8018270:	428b      	cmp	r3, r1
 8018272:	d90c      	bls.n	801828e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018274:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018278:	f801 0b01 	strb.w	r0, [r1], #1
 801827c:	e7f8      	b.n	8018270 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801827e:	0790      	lsls	r0, r2, #30
 8018280:	d0e7      	beq.n	8018252 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018282:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018286:	3b02      	subs	r3, #2
 8018288:	f821 0b02 	strh.w	r0, [r1], #2
 801828c:	e7e1      	b.n	8018252 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801828e:	2001      	movs	r0, #1
 8018290:	bd10      	pop	{r4, pc}

08018292 <_ZN8touchgfx3HAL7noTouchEv>:
 8018292:	b510      	push	{r4, lr}
 8018294:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8018298:	4604      	mov	r4, r0
 801829a:	b153      	cbz	r3, 80182b2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801829c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80182a0:	2101      	movs	r1, #1
 80182a2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80182a6:	301c      	adds	r0, #28
 80182a8:	f010 fb02 	bl	80288b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80182ac:	2300      	movs	r3, #0
 80182ae:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80182b2:	bd10      	pop	{r4, pc}

080182b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80182b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182b8:	b085      	sub	sp, #20
 80182ba:	4604      	mov	r4, r0
 80182bc:	2000      	movs	r0, #0
 80182be:	4699      	mov	r9, r3
 80182c0:	ad04      	add	r5, sp, #16
 80182c2:	460f      	mov	r7, r1
 80182c4:	4690      	mov	r8, r2
 80182c6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80182ca:	69a0      	ldr	r0, [r4, #24]
 80182cc:	6806      	ldr	r6, [r0, #0]
 80182ce:	9501      	str	r5, [sp, #4]
 80182d0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80182d4:	9500      	str	r5, [sp, #0]
 80182d6:	6835      	ldr	r5, [r6, #0]
 80182d8:	47a8      	blx	r5
 80182da:	4d10      	ldr	r5, [pc, #64]	@ (801831c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80182dc:	4606      	mov	r6, r0
 80182de:	f8a5 9000 	strh.w	r9, [r5]
 80182e2:	f7ea ffd9 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80182e6:	6803      	ldr	r3, [r0, #0]
 80182e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182ea:	4798      	blx	r3
 80182ec:	b128      	cbz	r0, 80182fa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80182ee:	2801      	cmp	r0, #1
 80182f0:	d00b      	beq.n	801830a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80182f2:	4630      	mov	r0, r6
 80182f4:	b005      	add	sp, #20
 80182f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182fa:	882b      	ldrh	r3, [r5, #0]
 80182fc:	fb08 7203 	mla	r2, r8, r3, r7
 8018300:	9b03      	ldr	r3, [sp, #12]
 8018302:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018306:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018308:	e7f3      	b.n	80182f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801830a:	882a      	ldrh	r2, [r5, #0]
 801830c:	9b03      	ldr	r3, [sp, #12]
 801830e:	fb08 7202 	mla	r2, r8, r2, r7
 8018312:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018316:	1a9a      	subs	r2, r3, r2
 8018318:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801831a:	e7ea      	b.n	80182f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801831c:	24015c42 	.word	0x24015c42

08018320 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018322:	b08b      	sub	sp, #44	@ 0x2c
 8018324:	4617      	mov	r7, r2
 8018326:	4604      	mov	r4, r0
 8018328:	460e      	mov	r6, r1
 801832a:	461d      	mov	r5, r3
 801832c:	f7ea ffb4 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 8018330:	6803      	ldr	r3, [r0, #0]
 8018332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018334:	4798      	blx	r3
 8018336:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801833a:	9007      	str	r0, [sp, #28]
 801833c:	4631      	mov	r1, r6
 801833e:	6822      	ldr	r2, [r4, #0]
 8018340:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018344:	4b0c      	ldr	r3, [pc, #48]	@ (8018378 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018346:	4620      	mov	r0, r4
 8018348:	881b      	ldrh	r3, [r3, #0]
 801834a:	9306      	str	r3, [sp, #24]
 801834c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018350:	9305      	str	r3, [sp, #20]
 8018352:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8018356:	9304      	str	r3, [sp, #16]
 8018358:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801835c:	9303      	str	r3, [sp, #12]
 801835e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018362:	9302      	str	r3, [sp, #8]
 8018364:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018368:	e9cd 5300 	strd	r5, r3, [sp]
 801836c:	463b      	mov	r3, r7
 801836e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8018370:	2200      	movs	r2, #0
 8018372:	47a8      	blx	r5
 8018374:	b00b      	add	sp, #44	@ 0x2c
 8018376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018378:	24015c42 	.word	0x24015c42

0801837c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801837c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018380:	4698      	mov	r8, r3
 8018382:	6803      	ldr	r3, [r0, #0]
 8018384:	b08b      	sub	sp, #44	@ 0x2c
 8018386:	4617      	mov	r7, r2
 8018388:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 801838a:	460e      	mov	r6, r1
 801838c:	4b13      	ldr	r3, [pc, #76]	@ (80183dc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801838e:	4604      	mov	r4, r0
 8018390:	f8b3 9000 	ldrh.w	r9, [r3]
 8018394:	f7ea ff80 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 8018398:	6803      	ldr	r3, [r0, #0]
 801839a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801839c:	4798      	blx	r3
 801839e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80183a2:	2200      	movs	r2, #0
 80183a4:	4631      	mov	r1, r6
 80183a6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80183aa:	2302      	movs	r3, #2
 80183ac:	4620      	mov	r0, r4
 80183ae:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80183b2:	2301      	movs	r3, #1
 80183b4:	9305      	str	r3, [sp, #20]
 80183b6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80183ba:	9304      	str	r3, [sp, #16]
 80183bc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80183c0:	9303      	str	r3, [sp, #12]
 80183c2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80183c6:	9302      	str	r3, [sp, #8]
 80183c8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80183cc:	e9cd 8300 	strd	r8, r3, [sp]
 80183d0:	463b      	mov	r3, r7
 80183d2:	47a8      	blx	r5
 80183d4:	b00b      	add	sp, #44	@ 0x2c
 80183d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183da:	bf00      	nop
 80183dc:	24015c42 	.word	0x24015c42

080183e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80183e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183e4:	4698      	mov	r8, r3
 80183e6:	6803      	ldr	r3, [r0, #0]
 80183e8:	b087      	sub	sp, #28
 80183ea:	460e      	mov	r6, r1
 80183ec:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80183ee:	4617      	mov	r7, r2
 80183f0:	4b0f      	ldr	r3, [pc, #60]	@ (8018430 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80183f2:	4604      	mov	r4, r0
 80183f4:	f8b3 9000 	ldrh.w	r9, [r3]
 80183f8:	f7ea ff4e 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80183fc:	6803      	ldr	r3, [r0, #0]
 80183fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018400:	4798      	blx	r3
 8018402:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8018406:	463a      	mov	r2, r7
 8018408:	4631      	mov	r1, r6
 801840a:	f8cd 900c 	str.w	r9, [sp, #12]
 801840e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018412:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8018416:	4620      	mov	r0, r4
 8018418:	9302      	str	r3, [sp, #8]
 801841a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801841e:	9301      	str	r3, [sp, #4]
 8018420:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018424:	9300      	str	r3, [sp, #0]
 8018426:	4643      	mov	r3, r8
 8018428:	47a8      	blx	r5
 801842a:	b007      	add	sp, #28
 801842c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018430:	24015c42 	.word	0x24015c42

08018434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018438:	4604      	mov	r4, r0
 801843a:	b08f      	sub	sp, #60	@ 0x3c
 801843c:	4610      	mov	r0, r2
 801843e:	460d      	mov	r5, r1
 8018440:	4691      	mov	r9, r2
 8018442:	461e      	mov	r6, r3
 8018444:	f006 fef6 	bl	801f234 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018448:	2800      	cmp	r0, #0
 801844a:	f000 809d 	beq.w	8018588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801844e:	6823      	ldr	r3, [r4, #0]
 8018450:	4620      	mov	r0, r4
 8018452:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80185ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018456:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801845c:	4798      	blx	r3
 801845e:	6823      	ldr	r3, [r4, #0]
 8018460:	4620      	mov	r0, r4
 8018462:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80185f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8018466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018468:	4798      	blx	r3
 801846a:	f8bb 3000 	ldrh.w	r3, [fp]
 801846e:	4f5c      	ldr	r7, [pc, #368]	@ (80185e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018470:	9301      	str	r3, [sp, #4]
 8018472:	f8ba 3000 	ldrh.w	r3, [sl]
 8018476:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801847a:	4640      	mov	r0, r8
 801847c:	9302      	str	r3, [sp, #8]
 801847e:	883b      	ldrh	r3, [r7, #0]
 8018480:	9303      	str	r3, [sp, #12]
 8018482:	4b58      	ldr	r3, [pc, #352]	@ (80185e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018484:	881a      	ldrh	r2, [r3, #0]
 8018486:	9305      	str	r3, [sp, #20]
 8018488:	9204      	str	r2, [sp, #16]
 801848a:	f007 f817 	bl	801f4bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801848e:	8038      	strh	r0, [r7, #0]
 8018490:	4640      	mov	r0, r8
 8018492:	f007 f847 	bl	801f524 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018496:	9b05      	ldr	r3, [sp, #20]
 8018498:	b280      	uxth	r0, r0
 801849a:	8018      	strh	r0, [r3, #0]
 801849c:	4b52      	ldr	r3, [pc, #328]	@ (80185e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801849e:	781b      	ldrb	r3, [r3, #0]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d174      	bne.n	801858e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80184a4:	883b      	ldrh	r3, [r7, #0]
 80184a6:	f8aa 0000 	strh.w	r0, [sl]
 80184aa:	f8ab 3000 	strh.w	r3, [fp]
 80184ae:	4648      	mov	r0, r9
 80184b0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80184b4:	f006 febe 	bl	801f234 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80184b8:	2200      	movs	r2, #0
 80184ba:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80184be:	4611      	mov	r1, r2
 80184c0:	4628      	mov	r0, r5
 80184c2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80184c6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80184ca:	f7ea ff9d 	bl	8003408 <_ZN8touchgfx8Drawable5setXYEss>
 80184ce:	2301      	movs	r3, #1
 80184d0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80184d4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80184d8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	dd5c      	ble.n	801859a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80184e0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	dd58      	ble.n	801859a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80184e8:	462a      	mov	r2, r5
 80184ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80184ec:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80184f0:	6851      	ldr	r1, [r2, #4]
 80184f2:	c303      	stmia	r3!, {r0, r1}
 80184f4:	4631      	mov	r1, r6
 80184f6:	a80a      	add	r0, sp, #40	@ 0x28
 80184f8:	f7ff fc06 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 80184fc:	4b38      	ldr	r3, [pc, #224]	@ (80185e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80184fe:	2100      	movs	r1, #0
 8018500:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018504:	4b37      	ldr	r3, [pc, #220]	@ (80185e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018506:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801850a:	aa0a      	add	r2, sp, #40	@ 0x28
 801850c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018510:	910c      	str	r1, [sp, #48]	@ 0x30
 8018512:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018516:	ab08      	add	r3, sp, #32
 8018518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801851c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018520:	4618      	mov	r0, r3
 8018522:	a90c      	add	r1, sp, #48	@ 0x30
 8018524:	f7ff fbf0 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 8018528:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801852a:	2b00      	cmp	r3, #0
 801852c:	d13c      	bne.n	80185a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801852e:	2000      	movs	r0, #0
 8018530:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8018534:	2600      	movs	r6, #0
 8018536:	696b      	ldr	r3, [r5, #20]
 8018538:	a908      	add	r1, sp, #32
 801853a:	682a      	ldr	r2, [r5, #0]
 801853c:	4628      	mov	r0, r5
 801853e:	9305      	str	r3, [sp, #20]
 8018540:	616e      	str	r6, [r5, #20]
 8018542:	6892      	ldr	r2, [r2, #8]
 8018544:	4790      	blx	r2
 8018546:	9b05      	ldr	r3, [sp, #20]
 8018548:	4652      	mov	r2, sl
 801854a:	4649      	mov	r1, r9
 801854c:	616b      	str	r3, [r5, #20]
 801854e:	4628      	mov	r0, r5
 8018550:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8018554:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8018558:	f7ea ff56 	bl	8003408 <_ZN8touchgfx8Drawable5setXYEss>
 801855c:	9a01      	ldr	r2, [sp, #4]
 801855e:	4b23      	ldr	r3, [pc, #140]	@ (80185ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018560:	4620      	mov	r0, r4
 8018562:	801a      	strh	r2, [r3, #0]
 8018564:	9a02      	ldr	r2, [sp, #8]
 8018566:	4b22      	ldr	r3, [pc, #136]	@ (80185f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8018568:	801a      	strh	r2, [r3, #0]
 801856a:	9a03      	ldr	r2, [sp, #12]
 801856c:	4b1c      	ldr	r3, [pc, #112]	@ (80185e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801856e:	801a      	strh	r2, [r3, #0]
 8018570:	4b1c      	ldr	r3, [pc, #112]	@ (80185e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018572:	9a04      	ldr	r2, [sp, #16]
 8018574:	801a      	strh	r2, [r3, #0]
 8018576:	6823      	ldr	r3, [r4, #0]
 8018578:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801857e:	4798      	blx	r3
 8018580:	6823      	ldr	r3, [r4, #0]
 8018582:	4620      	mov	r0, r4
 8018584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018586:	4798      	blx	r3
 8018588:	b00f      	add	sp, #60	@ 0x3c
 801858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801858e:	883b      	ldrh	r3, [r7, #0]
 8018590:	f8ab 0000 	strh.w	r0, [fp]
 8018594:	f8aa 3000 	strh.w	r3, [sl]
 8018598:	e789      	b.n	80184ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801859a:	462a      	mov	r2, r5
 801859c:	ab0a      	add	r3, sp, #40	@ 0x28
 801859e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80185a2:	6851      	ldr	r1, [r2, #4]
 80185a4:	c303      	stmia	r3!, {r0, r1}
 80185a6:	e7a9      	b.n	80184fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80185a8:	a807      	add	r0, sp, #28
 80185aa:	f007 f8bf 	bl	801f72c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80185ae:	4606      	mov	r6, r0
 80185b0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80185b2:	6803      	ldr	r3, [r0, #0]
 80185b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185b6:	4798      	blx	r3
 80185b8:	4286      	cmp	r6, r0
 80185ba:	d1b8      	bne.n	801852e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80185bc:	f7ea fe6c 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80185c0:	6803      	ldr	r3, [r0, #0]
 80185c2:	4606      	mov	r6, r0
 80185c4:	a807      	add	r0, sp, #28
 80185c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185c8:	9305      	str	r3, [sp, #20]
 80185ca:	f007 f8af 	bl	801f72c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80185ce:	9b05      	ldr	r3, [sp, #20]
 80185d0:	4601      	mov	r1, r0
 80185d2:	4630      	mov	r0, r6
 80185d4:	4798      	blx	r3
 80185d6:	f080 0001 	eor.w	r0, r0, #1
 80185da:	b2c0      	uxtb	r0, r0
 80185dc:	e7a8      	b.n	8018530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80185de:	bf00      	nop
 80185e0:	24015c3c 	.word	0x24015c3c
 80185e4:	24015c3e 	.word	0x24015c3e
 80185e8:	24015c40 	.word	0x24015c40
 80185ec:	24015c42 	.word	0x24015c42
 80185f0:	24015c44 	.word	0x24015c44

080185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80185f4:	4b07      	ldr	r3, [pc, #28]	@ (8018614 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80185f6:	b510      	push	{r4, lr}
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	4604      	mov	r4, r0
 80185fc:	b13b      	cbz	r3, 801860e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80185fe:	6803      	ldr	r3, [r0, #0]
 8018600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018602:	4798      	blx	r3
 8018604:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018606:	4283      	cmp	r3, r0
 8018608:	d101      	bne.n	801860e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801860a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801860c:	bd10      	pop	{r4, pc}
 801860e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8018610:	e7fc      	b.n	801860c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018612:	bf00      	nop
 8018614:	24015c46 	.word	0x24015c46

08018618 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801861c:	461d      	mov	r5, r3
 801861e:	b08a      	sub	sp, #40	@ 0x28
 8018620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018624:	4690      	mov	r8, r2
 8018626:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801862a:	2400      	movs	r4, #0
 801862c:	4607      	mov	r7, r0
 801862e:	fb06 8505 	mla	r5, r6, r5, r8
 8018632:	9404      	str	r4, [sp, #16]
 8018634:	f88d 4020 	strb.w	r4, [sp, #32]
 8018638:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801863c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018640:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018644:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018648:	f8ad 301a 	strh.w	r3, [sp, #26]
 801864c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018650:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018654:	f7ff ffce 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018658:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018662:	a901      	add	r1, sp, #4
 8018664:	9505      	str	r5, [sp, #20]
 8018666:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801866a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801866e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8018672:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8018676:	6803      	ldr	r3, [r0, #0]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	4798      	blx	r3
 801867c:	b00a      	add	sp, #40	@ 0x28
 801867e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018682 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018686:	b08b      	sub	sp, #44	@ 0x2c
 8018688:	2400      	movs	r4, #0
 801868a:	4691      	mov	r9, r2
 801868c:	461d      	mov	r5, r3
 801868e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8018692:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018696:	4688      	mov	r8, r1
 8018698:	4607      	mov	r7, r0
 801869a:	9404      	str	r4, [sp, #16]
 801869c:	fb06 9505 	mla	r5, r6, r5, r9
 80186a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80186a4:	f7ff ffa6 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80186a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80186ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80186b6:	a901      	add	r1, sp, #4
 80186b8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80186bc:	9505      	str	r5, [sp, #20]
 80186be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80186c2:	f8ad 401c 	strh.w	r4, [sp, #28]
 80186c6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80186ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80186ce:	f8ad 4020 	strh.w	r4, [sp, #32]
 80186d2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80186d6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80186da:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80186de:	6803      	ldr	r3, [r0, #0]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	4798      	blx	r3
 80186e4:	b00b      	add	sp, #44	@ 0x2c
 80186e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080186ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80186ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186f0:	b08a      	sub	sp, #40	@ 0x28
 80186f2:	4698      	mov	r8, r3
 80186f4:	2300      	movs	r3, #0
 80186f6:	4606      	mov	r6, r0
 80186f8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80186fc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8018700:	2d0b      	cmp	r5, #11
 8018702:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8018706:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801870a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801870e:	9304      	str	r3, [sp, #16]
 8018710:	d137      	bne.n	8018782 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8018712:	2380      	movs	r3, #128	@ 0x80
 8018714:	f88d 0020 	strb.w	r0, [sp, #32]
 8018718:	4630      	mov	r0, r6
 801871a:	9203      	str	r2, [sp, #12]
 801871c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018720:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018724:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018728:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801872c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018730:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018734:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018738:	f7ff ff5c 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801873c:	2c0b      	cmp	r4, #11
 801873e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8018742:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018746:	bf94      	ite	ls
 8018748:	4b19      	ldrls	r3, [pc, #100]	@ (80187b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801874a:	2100      	movhi	r1, #0
 801874c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8018750:	bf98      	it	ls
 8018752:	5d19      	ldrbls	r1, [r3, r4]
 8018754:	fb02 8307 	mla	r3, r2, r7, r8
 8018758:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801875c:	10c9      	asrs	r1, r1, #3
 801875e:	fb01 0003 	mla	r0, r1, r3, r0
 8018762:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8018766:	a901      	add	r1, sp, #4
 8018768:	9005      	str	r0, [sp, #20]
 801876a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801876e:	2300      	movs	r3, #0
 8018770:	6870      	ldr	r0, [r6, #4]
 8018772:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018776:	6803      	ldr	r3, [r0, #0]
 8018778:	685b      	ldr	r3, [r3, #4]
 801877a:	4798      	blx	r3
 801877c:	b00a      	add	sp, #40	@ 0x28
 801877e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018782:	2d02      	cmp	r5, #2
 8018784:	d109      	bne.n	801879a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018786:	28ff      	cmp	r0, #255	@ 0xff
 8018788:	d105      	bne.n	8018796 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801878a:	f1bc 0f00 	cmp.w	ip, #0
 801878e:	bf14      	ite	ne
 8018790:	2340      	movne	r3, #64	@ 0x40
 8018792:	2320      	moveq	r3, #32
 8018794:	e7be      	b.n	8018714 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018796:	2340      	movs	r3, #64	@ 0x40
 8018798:	e7bc      	b.n	8018714 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801879a:	28ff      	cmp	r0, #255	@ 0xff
 801879c:	d105      	bne.n	80187aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801879e:	f1bc 0f00 	cmp.w	ip, #0
 80187a2:	bf14      	ite	ne
 80187a4:	2304      	movne	r3, #4
 80187a6:	2301      	moveq	r3, #1
 80187a8:	e7b4      	b.n	8018714 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80187aa:	2304      	movs	r3, #4
 80187ac:	e7b2      	b.n	8018714 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80187ae:	bf00      	nop
 80187b0:	0802f508 	.word	0x0802f508

080187b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80187b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b8:	b08b      	sub	sp, #44	@ 0x2c
 80187ba:	461d      	mov	r5, r3
 80187bc:	2400      	movs	r4, #0
 80187be:	4688      	mov	r8, r1
 80187c0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80187c4:	4693      	mov	fp, r2
 80187c6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80187ca:	4607      	mov	r7, r0
 80187cc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80187d0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80187d4:	9404      	str	r4, [sp, #16]
 80187d6:	bf14      	ite	ne
 80187d8:	2308      	movne	r3, #8
 80187da:	2302      	moveq	r3, #2
 80187dc:	fb05 b50a 	mla	r5, r5, sl, fp
 80187e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80187e4:	f7ff ff06 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80187e8:	2e0b      	cmp	r6, #11
 80187ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80187ee:	a901      	add	r1, sp, #4
 80187f0:	bf98      	it	ls
 80187f2:	4b13      	ldrls	r3, [pc, #76]	@ (8018840 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80187f4:	f8ad a01e 	strh.w	sl, [sp, #30]
 80187f8:	bf98      	it	ls
 80187fa:	5d9c      	ldrbls	r4, [r3, r6]
 80187fc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018800:	10e4      	asrs	r4, r4, #3
 8018802:	f8cd 8010 	str.w	r8, [sp, #16]
 8018806:	f8ad 3018 	strh.w	r3, [sp, #24]
 801880a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801880e:	fb04 0405 	mla	r4, r4, r5, r0
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018818:	2300      	movs	r3, #0
 801881a:	9405      	str	r4, [sp, #20]
 801881c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018820:	f88d 9020 	strb.w	r9, [sp, #32]
 8018824:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8018828:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801882c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8018830:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8018834:	6803      	ldr	r3, [r0, #0]
 8018836:	685b      	ldr	r3, [r3, #4]
 8018838:	4798      	blx	r3
 801883a:	b00b      	add	sp, #44	@ 0x2c
 801883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018840:	0802f508 	.word	0x0802f508

08018844 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018848:	461e      	mov	r6, r3
 801884a:	4b0a      	ldr	r3, [pc, #40]	@ (8018874 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801884c:	460f      	mov	r7, r1
 801884e:	4690      	mov	r8, r2
 8018850:	881d      	ldrh	r5, [r3, #0]
 8018852:	f7ea fd21 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 8018856:	6803      	ldr	r3, [r0, #0]
 8018858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801885a:	4798      	blx	r3
 801885c:	280b      	cmp	r0, #11
 801885e:	bf96      	itet	ls
 8018860:	4b05      	ldrls	r3, [pc, #20]	@ (8018878 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018862:	2400      	movhi	r4, #0
 8018864:	5c1c      	ldrbls	r4, [r3, r0]
 8018866:	fb08 7005 	mla	r0, r8, r5, r7
 801886a:	10e4      	asrs	r4, r4, #3
 801886c:	fb04 6000 	mla	r0, r4, r0, r6
 8018870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018874:	24015c42 	.word	0x24015c42
 8018878:	0802f508 	.word	0x0802f508

0801887c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801887e:	b08b      	sub	sp, #44	@ 0x2c
 8018880:	461f      	mov	r7, r3
 8018882:	4604      	mov	r4, r0
 8018884:	4616      	mov	r6, r2
 8018886:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801888a:	2500      	movs	r5, #0
 801888c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018890:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018894:	9504      	str	r5, [sp, #16]
 8018896:	f8ad 3018 	strh.w	r3, [sp, #24]
 801889a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801889e:	f8ad 301a 	strh.w	r3, [sp, #26]
 80188a2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80188a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80188aa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80188ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80188b2:	f7ff fe9f 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80188b6:	463a      	mov	r2, r7
 80188b8:	4631      	mov	r1, r6
 80188ba:	4603      	mov	r3, r0
 80188bc:	4620      	mov	r0, r4
 80188be:	f7ff ffc1 	bl	8018844 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80188c2:	4b0e      	ldr	r3, [pc, #56]	@ (80188fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80188c4:	9005      	str	r0, [sp, #20]
 80188c6:	881b      	ldrh	r3, [r3, #0]
 80188c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80188cc:	f7ea fce4 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80188d0:	6803      	ldr	r3, [r0, #0]
 80188d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188d4:	4798      	blx	r3
 80188d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80188d8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80188dc:	a901      	add	r1, sp, #4
 80188de:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80188e2:	9304      	str	r3, [sp, #16]
 80188e4:	6860      	ldr	r0, [r4, #4]
 80188e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80188ea:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80188ee:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80188f2:	6803      	ldr	r3, [r0, #0]
 80188f4:	685b      	ldr	r3, [r3, #4]
 80188f6:	4798      	blx	r3
 80188f8:	b00b      	add	sp, #44	@ 0x2c
 80188fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188fc:	24015c42 	.word	0x24015c42

08018900 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018902:	b08d      	sub	sp, #52	@ 0x34
 8018904:	2501      	movs	r5, #1
 8018906:	4604      	mov	r4, r0
 8018908:	466b      	mov	r3, sp
 801890a:	9503      	str	r5, [sp, #12]
 801890c:	e883 0006 	stmia.w	r3, {r1, r2}
 8018910:	2300      	movs	r3, #0
 8018912:	f8bd 6000 	ldrh.w	r6, [sp]
 8018916:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801891a:	9306      	str	r3, [sp, #24]
 801891c:	6803      	ldr	r3, [r0, #0]
 801891e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018920:	4798      	blx	r3
 8018922:	463a      	mov	r2, r7
 8018924:	4631      	mov	r1, r6
 8018926:	4603      	mov	r3, r0
 8018928:	4620      	mov	r0, r4
 801892a:	f7ff ff8b 	bl	8018844 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801892e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018930:	9004      	str	r0, [sp, #16]
 8018932:	9307      	str	r3, [sp, #28]
 8018934:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018938:	f8ad 3020 	strh.w	r3, [sp, #32]
 801893c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018940:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018944:	4b0e      	ldr	r3, [pc, #56]	@ (8018980 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8018946:	881b      	ldrh	r3, [r3, #0]
 8018948:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801894c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8018950:	f7ea fca2 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 8018954:	6803      	ldr	r3, [r0, #0]
 8018956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018958:	4798      	blx	r3
 801895a:	23ff      	movs	r3, #255	@ 0xff
 801895c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8018960:	a903      	add	r1, sp, #12
 8018962:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8018966:	6860      	ldr	r0, [r4, #4]
 8018968:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801896c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8018970:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8018974:	6803      	ldr	r3, [r0, #0]
 8018976:	685b      	ldr	r3, [r3, #4]
 8018978:	4798      	blx	r3
 801897a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801897c:	b00d      	add	sp, #52	@ 0x34
 801897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018980:	24015c42 	.word	0x24015c42

08018984 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018988:	b08c      	sub	sp, #48	@ 0x30
 801898a:	461e      	mov	r6, r3
 801898c:	2300      	movs	r3, #0
 801898e:	4604      	mov	r4, r0
 8018990:	466d      	mov	r5, sp
 8018992:	9306      	str	r3, [sp, #24]
 8018994:	6803      	ldr	r3, [r0, #0]
 8018996:	e885 0006 	stmia.w	r5, {r1, r2}
 801899a:	2501      	movs	r5, #1
 801899c:	f8bd 7000 	ldrh.w	r7, [sp]
 80189a0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80189a4:	9503      	str	r5, [sp, #12]
 80189a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80189a8:	4798      	blx	r3
 80189aa:	4642      	mov	r2, r8
 80189ac:	4639      	mov	r1, r7
 80189ae:	4603      	mov	r3, r0
 80189b0:	4620      	mov	r0, r4
 80189b2:	f7ff ff47 	bl	8018844 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80189b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80189ba:	9004      	str	r0, [sp, #16]
 80189bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80189c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80189c4:	9607      	str	r6, [sp, #28]
 80189c6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80189ca:	4b10      	ldr	r3, [pc, #64]	@ (8018a0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80189cc:	881b      	ldrh	r3, [r3, #0]
 80189ce:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80189d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80189d4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80189d8:	f7ea fc5e 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 80189dc:	6803      	ldr	r3, [r0, #0]
 80189de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189e0:	4798      	blx	r3
 80189e2:	23ff      	movs	r3, #255	@ 0xff
 80189e4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80189e8:	a903      	add	r1, sp, #12
 80189ea:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80189ee:	6860      	ldr	r0, [r4, #4]
 80189f0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80189f4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80189f8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80189fc:	6803      	ldr	r3, [r0, #0]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	4798      	blx	r3
 8018a02:	4630      	mov	r0, r6
 8018a04:	b00c      	add	sp, #48	@ 0x30
 8018a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0a:	bf00      	nop
 8018a0c:	24015c42 	.word	0x24015c42

08018a10 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8018a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a12:	b085      	sub	sp, #20
 8018a14:	4605      	mov	r5, r0
 8018a16:	ac02      	add	r4, sp, #8
 8018a18:	e884 0006 	stmia.w	r4, {r1, r2}
 8018a1c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8018a20:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8018a24:	f7ff fde6 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a28:	4631      	mov	r1, r6
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	463a      	mov	r2, r7
 8018a2e:	4628      	mov	r0, r5
 8018a30:	f7ff ff08 	bl	8018844 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018a34:	4a05      	ldr	r2, [pc, #20]	@ (8018a4c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8018a36:	682b      	ldr	r3, [r5, #0]
 8018a38:	8812      	ldrh	r2, [r2, #0]
 8018a3a:	9200      	str	r2, [sp, #0]
 8018a3c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8018a3e:	4603      	mov	r3, r0
 8018a40:	4628      	mov	r0, r5
 8018a42:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018a46:	47b0      	blx	r6
 8018a48:	b005      	add	sp, #20
 8018a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a4c:	24015c42 	.word	0x24015c42

08018a50 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018a50:	b570      	push	{r4, r5, r6, lr}
 8018a52:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8018a56:	4604      	mov	r4, r0
 8018a58:	b19b      	cbz	r3, 8018a82 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018a5a:	2002      	movs	r0, #2
 8018a5c:	f7e8 fe46 	bl	80016ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018a60:	2300      	movs	r3, #0
 8018a62:	4620      	mov	r0, r4
 8018a64:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8018a68:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8018a6c:	6823      	ldr	r3, [r4, #0]
 8018a6e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8018a72:	f7ff fdbf 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a76:	4601      	mov	r1, r0
 8018a78:	4620      	mov	r0, r4
 8018a7a:	462b      	mov	r3, r5
 8018a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a80:	4718      	bx	r3
 8018a82:	bd70      	pop	{r4, r5, r6, pc}

08018a84 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8018a84:	b570      	push	{r4, r5, r6, lr}
 8018a86:	4605      	mov	r5, r0
 8018a88:	460c      	mov	r4, r1
 8018a8a:	2003      	movs	r0, #3
 8018a8c:	b149      	cbz	r1, 8018aa2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8018a8e:	f7e8 fdc9 	bl	8001624 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018a92:	6928      	ldr	r0, [r5, #16]
 8018a94:	b168      	cbz	r0, 8018ab2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018a96:	6803      	ldr	r3, [r0, #0]
 8018a98:	2101      	movs	r1, #1
 8018a9a:	695b      	ldr	r3, [r3, #20]
 8018a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018aa0:	4718      	bx	r3
 8018aa2:	f7e8 fdf1 	bl	8001688 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018aa6:	6928      	ldr	r0, [r5, #16]
 8018aa8:	b118      	cbz	r0, 8018ab2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018aaa:	6803      	ldr	r3, [r0, #0]
 8018aac:	4621      	mov	r1, r4
 8018aae:	695b      	ldr	r3, [r3, #20]
 8018ab0:	e7f4      	b.n	8018a9c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018ab2:	bd70      	pop	{r4, r5, r6, pc}

08018ab4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018ab4:	b538      	push	{r3, r4, r5, lr}
 8018ab6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8018aba:	4604      	mov	r4, r0
 8018abc:	460d      	mov	r5, r1
 8018abe:	428b      	cmp	r3, r1
 8018ac0:	d006      	beq.n	8018ad0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8018ac2:	6803      	ldr	r3, [r0, #0]
 8018ac4:	b929      	cbnz	r1, 8018ad2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018ac6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8018aca:	4798      	blx	r3
 8018acc:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8018ad0:	bd38      	pop	{r3, r4, r5, pc}
 8018ad2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8018ad6:	e7f8      	b.n	8018aca <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018ad8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8018b10 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018ada:	b510      	push	{r4, lr}
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	4604      	mov	r4, r0
 8018ae0:	b95b      	cbnz	r3, 8018afa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018ae2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8018ae6:	2b02      	cmp	r3, #2
 8018ae8:	d007      	beq.n	8018afa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018aea:	6840      	ldr	r0, [r0, #4]
 8018aec:	f000 f92c 	bl	8018d48 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018af0:	b118      	cbz	r0, 8018afa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018af2:	6862      	ldr	r2, [r4, #4]
 8018af4:	7a53      	ldrb	r3, [r2, #9]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d0fc      	beq.n	8018af4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018afa:	f7e8 ff95 	bl	8001a28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018afe:	4620      	mov	r0, r4
 8018b00:	2100      	movs	r1, #0
 8018b02:	f7ff ffd7 	bl	8018ab4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7ff fd74 	bl	80185f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018b0c:	bd10      	pop	{r4, pc}
 8018b0e:	bf00      	nop
 8018b10:	24015c46 	.word	0x24015c46

08018b14 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8018b14:	b570      	push	{r4, r5, r6, lr}
 8018b16:	4604      	mov	r4, r0
 8018b18:	6803      	ldr	r3, [r0, #0]
 8018b1a:	b919      	cbnz	r1, 8018b24 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8018b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b22:	4718      	bx	r3
 8018b24:	2200      	movs	r2, #0
 8018b26:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8018b2a:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8018b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b30:	4798      	blx	r3
 8018b32:	6863      	ldr	r3, [r4, #4]
 8018b34:	2101      	movs	r1, #1
 8018b36:	4605      	mov	r5, r0
 8018b38:	4620      	mov	r0, r4
 8018b3a:	7299      	strb	r1, [r3, #10]
 8018b3c:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8018b40:	f7ff ffb8 	bl	8018ab4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018b44:	4628      	mov	r0, r5
 8018b46:	bd70      	pop	{r4, r5, r6, pc}

08018b48 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018b48:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018b4c:	1a13      	subs	r3, r2, r0
 8018b4e:	4258      	negs	r0, r3
 8018b50:	4158      	adcs	r0, r3
 8018b52:	4770      	bx	lr

08018b54 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018b54:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018b58:	1a9b      	subs	r3, r3, r2
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	bfdc      	itt	le
 8018b5e:	6882      	ldrle	r2, [r0, #8]
 8018b60:	189b      	addle	r3, r3, r2
 8018b62:	2b01      	cmp	r3, #1
 8018b64:	bfcc      	ite	gt
 8018b66:	2000      	movgt	r0, #0
 8018b68:	2001      	movle	r0, #1
 8018b6a:	4770      	bx	lr

08018b6c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018b6c:	6902      	ldr	r2, [r0, #16]
 8018b6e:	6843      	ldr	r3, [r0, #4]
 8018b70:	2024      	movs	r0, #36	@ 0x24
 8018b72:	fb00 3002 	mla	r0, r0, r2, r3
 8018b76:	4770      	bx	lr

08018b78 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018b78:	6803      	ldr	r3, [r0, #0]
 8018b7a:	691b      	ldr	r3, [r3, #16]
 8018b7c:	4718      	bx	r3

08018b7e <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018b7e:	2301      	movs	r3, #1
 8018b80:	b570      	push	{r4, r5, r6, lr}
 8018b82:	7203      	strb	r3, [r0, #8]
 8018b84:	4604      	mov	r4, r0
 8018b86:	6840      	ldr	r0, [r0, #4]
 8018b88:	6803      	ldr	r3, [r0, #0]
 8018b8a:	699b      	ldr	r3, [r3, #24]
 8018b8c:	4798      	blx	r3
 8018b8e:	6803      	ldr	r3, [r0, #0]
 8018b90:	4605      	mov	r5, r0
 8018b92:	2b40      	cmp	r3, #64	@ 0x40
 8018b94:	d00c      	beq.n	8018bb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018b96:	d810      	bhi.n	8018bba <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018b98:	2b04      	cmp	r3, #4
 8018b9a:	d01d      	beq.n	8018bd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8018b9c:	d804      	bhi.n	8018ba8 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8018b9e:	2b01      	cmp	r3, #1
 8018ba0:	d006      	beq.n	8018bb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018ba2:	2b02      	cmp	r3, #2
 8018ba4:	d02c      	beq.n	8018c00 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018ba6:	bd70      	pop	{r4, r5, r6, pc}
 8018ba8:	2b08      	cmp	r3, #8
 8018baa:	d01d      	beq.n	8018be8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8018bac:	2b20      	cmp	r3, #32
 8018bae:	d1fa      	bne.n	8018ba6 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8018bb0:	6823      	ldr	r3, [r4, #0]
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018bb6:	4798      	blx	r3
 8018bb8:	e013      	b.n	8018be2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018bbe:	d0f7      	beq.n	8018bb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018bc0:	d804      	bhi.n	8018bcc <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8018bc2:	2b80      	cmp	r3, #128	@ 0x80
 8018bc4:	d0f4      	beq.n	8018bb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018bca:	e7f0      	b.n	8018bae <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8018bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018bd0:	d0ee      	beq.n	8018bb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018bd6:	e7e5      	b.n	8018ba4 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018bd8:	6823      	ldr	r3, [r4, #0]
 8018bda:	7f01      	ldrb	r1, [r0, #28]
 8018bdc:	4620      	mov	r0, r4
 8018bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018be0:	4798      	blx	r3
 8018be2:	6823      	ldr	r3, [r4, #0]
 8018be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018be6:	e006      	b.n	8018bf6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018be8:	6823      	ldr	r3, [r4, #0]
 8018bea:	7f01      	ldrb	r1, [r0, #28]
 8018bec:	4620      	mov	r0, r4
 8018bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018bf0:	4798      	blx	r3
 8018bf2:	6823      	ldr	r3, [r4, #0]
 8018bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018bf6:	4629      	mov	r1, r5
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bfe:	4718      	bx	r3
 8018c00:	6823      	ldr	r3, [r4, #0]
 8018c02:	4620      	mov	r0, r4
 8018c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018c06:	4798      	blx	r3
 8018c08:	e7f3      	b.n	8018bf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08018c0a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018c0a:	4770      	bx	lr

08018c0c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018c0c:	4770      	bx	lr

08018c0e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8018c0e:	4770      	bx	lr

08018c10 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018c10:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8018c14:	b510      	push	{r4, lr}
 8018c16:	1ad2      	subs	r2, r2, r3
 8018c18:	2a00      	cmp	r2, #0
 8018c1a:	bfdc      	itt	le
 8018c1c:	6884      	ldrle	r4, [r0, #8]
 8018c1e:	1912      	addle	r2, r2, r4
 8018c20:	2a01      	cmp	r2, #1
 8018c22:	dd16      	ble.n	8018c52 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8018c24:	6842      	ldr	r2, [r0, #4]
 8018c26:	2424      	movs	r4, #36	@ 0x24
 8018c28:	fb04 2303 	mla	r3, r4, r3, r2
 8018c2c:	f101 0220 	add.w	r2, r1, #32
 8018c30:	f851 4b04 	ldr.w	r4, [r1], #4
 8018c34:	4291      	cmp	r1, r2
 8018c36:	f843 4b04 	str.w	r4, [r3], #4
 8018c3a:	d1f9      	bne.n	8018c30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8018c3c:	780a      	ldrb	r2, [r1, #0]
 8018c3e:	701a      	strb	r2, [r3, #0]
 8018c40:	68c3      	ldr	r3, [r0, #12]
 8018c42:	6882      	ldr	r2, [r0, #8]
 8018c44:	f3bf 8f5b 	dmb	ish
 8018c48:	3301      	adds	r3, #1
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	bfd8      	it	le
 8018c4e:	1a9b      	suble	r3, r3, r2
 8018c50:	60c3      	str	r3, [r0, #12]
 8018c52:	bd10      	pop	{r4, pc}

08018c54 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018c54:	6903      	ldr	r3, [r0, #16]
 8018c56:	6882      	ldr	r2, [r0, #8]
 8018c58:	f3bf 8f5b 	dmb	ish
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	429a      	cmp	r2, r3
 8018c60:	bfd8      	it	le
 8018c62:	1a9b      	suble	r3, r3, r2
 8018c64:	6103      	str	r3, [r0, #16]
 8018c66:	4770      	bx	lr

08018c68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018c68:	b570      	push	{r4, r5, r6, lr}
 8018c6a:	4604      	mov	r4, r0
 8018c6c:	460e      	mov	r6, r1
 8018c6e:	6860      	ldr	r0, [r4, #4]
 8018c70:	6803      	ldr	r3, [r0, #0]
 8018c72:	685b      	ldr	r3, [r3, #4]
 8018c74:	4798      	blx	r3
 8018c76:	2800      	cmp	r0, #0
 8018c78:	d1f9      	bne.n	8018c6e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8018cb0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018c7c:	6828      	ldr	r0, [r5, #0]
 8018c7e:	6803      	ldr	r3, [r0, #0]
 8018c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018c82:	4798      	blx	r3
 8018c84:	f7e8 fede 	bl	8001a44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018c88:	6828      	ldr	r0, [r5, #0]
 8018c8a:	2101      	movs	r1, #1
 8018c8c:	f7ff ff12 	bl	8018ab4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018c90:	6860      	ldr	r0, [r4, #4]
 8018c92:	4631      	mov	r1, r6
 8018c94:	6803      	ldr	r3, [r0, #0]
 8018c96:	689b      	ldr	r3, [r3, #8]
 8018c98:	4798      	blx	r3
 8018c9a:	6823      	ldr	r3, [r4, #0]
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ca0:	4798      	blx	r3
 8018ca2:	6828      	ldr	r0, [r5, #0]
 8018ca4:	6803      	ldr	r3, [r0, #0]
 8018ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018cac:	4718      	bx	r3
 8018cae:	bf00      	nop
 8018cb0:	24015c48 	.word	0x24015c48

08018cb4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018cb4:	b508      	push	{r3, lr}
 8018cb6:	f7e8 feb7 	bl	8001a28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018cbe:	f7e8 bebb 	b.w	8001a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018cc2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8018cc2:	b510      	push	{r4, lr}
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	2114      	movs	r1, #20
 8018cc8:	f010 fbc0 	bl	802944c <_ZdlPvj>
 8018ccc:	4620      	mov	r0, r4
 8018cce:	bd10      	pop	{r4, pc}

08018cd0 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018cd0:	b510      	push	{r4, lr}
 8018cd2:	4604      	mov	r4, r0
 8018cd4:	6840      	ldr	r0, [r0, #4]
 8018cd6:	6803      	ldr	r3, [r0, #0]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	4798      	blx	r3
 8018cdc:	b948      	cbnz	r0, 8018cf2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018cde:	7a63      	ldrb	r3, [r4, #9]
 8018ce0:	b13b      	cbz	r3, 8018cf2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018ce2:	7a23      	ldrb	r3, [r4, #8]
 8018ce4:	b92b      	cbnz	r3, 8018cf2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018ce6:	6823      	ldr	r3, [r4, #0]
 8018ce8:	4620      	mov	r0, r4
 8018cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cf0:	4718      	bx	r3
 8018cf2:	bd10      	pop	{r4, pc}

08018cf4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018cf4:	b570      	push	{r4, r5, r6, lr}
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	6840      	ldr	r0, [r0, #4]
 8018cfa:	6803      	ldr	r3, [r0, #0]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	4798      	blx	r3
 8018d00:	4605      	mov	r5, r0
 8018d02:	b930      	cbnz	r0, 8018d12 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018d04:	7a23      	ldrb	r3, [r4, #8]
 8018d06:	b123      	cbz	r3, 8018d12 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018d08:	6860      	ldr	r0, [r4, #4]
 8018d0a:	6803      	ldr	r3, [r0, #0]
 8018d0c:	695b      	ldr	r3, [r3, #20]
 8018d0e:	4798      	blx	r3
 8018d10:	7225      	strb	r5, [r4, #8]
 8018d12:	6860      	ldr	r0, [r4, #4]
 8018d14:	6803      	ldr	r3, [r0, #0]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4798      	blx	r3
 8018d1a:	b928      	cbnz	r0, 8018d28 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018d1c:	6823      	ldr	r3, [r4, #0]
 8018d1e:	4620      	mov	r0, r4
 8018d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d26:	4718      	bx	r3
 8018d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d2c:	f7e8 be92 	b.w	8001a54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018d30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018d30:	b510      	push	{r4, lr}
 8018d32:	6082      	str	r2, [r0, #8]
 8018d34:	2200      	movs	r2, #0
 8018d36:	4c03      	ldr	r4, [pc, #12]	@ (8018d44 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018d38:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018d3c:	e9c0 4100 	strd	r4, r1, [r0]
 8018d40:	bd10      	pop	{r4, pc}
 8018d42:	bf00      	nop
 8018d44:	0802f51c 	.word	0x0802f51c

08018d48 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018d48:	6840      	ldr	r0, [r0, #4]
 8018d4a:	6803      	ldr	r3, [r0, #0]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	4718      	bx	r3

08018d50 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8018d50:	2300      	movs	r3, #0
 8018d52:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018d54:	8503      	strh	r3, [r0, #40]	@ 0x28
 8018d56:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8018d58:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018d5a:	6980      	ldr	r0, [r0, #24]
 8018d5c:	b110      	cbz	r0, 8018d64 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8018d5e:	6803      	ldr	r3, [r0, #0]
 8018d60:	691b      	ldr	r3, [r3, #16]
 8018d62:	4718      	bx	r3
 8018d64:	4770      	bx	lr

08018d66 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8018d66:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8018d6a:	4770      	bx	lr

08018d6c <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8018d6c:	b538      	push	{r3, r4, r5, lr}
 8018d6e:	0e0b      	lsrs	r3, r1, #24
 8018d70:	4604      	mov	r4, r0
 8018d72:	460d      	mov	r5, r1
 8018d74:	7783      	strb	r3, [r0, #30]
 8018d76:	6803      	ldr	r3, [r0, #0]
 8018d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d7a:	4798      	blx	r3
 8018d7c:	6803      	ldr	r3, [r0, #0]
 8018d7e:	4629      	mov	r1, r5
 8018d80:	689b      	ldr	r3, [r3, #8]
 8018d82:	4798      	blx	r3
 8018d84:	6823      	ldr	r3, [r4, #0]
 8018d86:	4620      	mov	r0, r4
 8018d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018d8a:	4798      	blx	r3
 8018d8c:	61a0      	str	r0, [r4, #24]
 8018d8e:	bd38      	pop	{r3, r4, r5, pc}

08018d90 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8018d90:	7741      	strb	r1, [r0, #29]
 8018d92:	4770      	bx	lr

08018d94 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8018d94:	b530      	push	{r4, r5, lr}
 8018d96:	460d      	mov	r5, r1
 8018d98:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8018d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da4:	682b      	ldr	r3, [r5, #0]
 8018da6:	6023      	str	r3, [r4, #0]
 8018da8:	bd30      	pop	{r4, r5, pc}

08018daa <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8018daa:	b538      	push	{r3, r4, r5, lr}
 8018dac:	4604      	mov	r4, r0
 8018dae:	1d03      	adds	r3, r0, #4
 8018db0:	6808      	ldr	r0, [r1, #0]
 8018db2:	2500      	movs	r5, #0
 8018db4:	6849      	ldr	r1, [r1, #4]
 8018db6:	c303      	stmia	r3!, {r0, r1}
 8018db8:	6813      	ldr	r3, [r2, #0]
 8018dba:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8018dbe:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8018dc2:	6853      	ldr	r3, [r2, #4]
 8018dc4:	61a5      	str	r5, [r4, #24]
 8018dc6:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8018dca:	f004 fea3 	bl	801db14 <_ZN8touchgfx9Matrix3x35resetEv>
 8018dce:	23ff      	movs	r3, #255	@ 0xff
 8018dd0:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8018dd4:	7763      	strb	r3, [r4, #29]
 8018dd6:	77a3      	strb	r3, [r4, #30]
 8018dd8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8018ddc:	6323      	str	r3, [r4, #48]	@ 0x30
 8018dde:	2301      	movs	r3, #1
 8018de0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8018de4:	bd38      	pop	{r3, r4, r5, pc}
	...

08018de8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8018de8:	ee70 7a41 	vsub.f32	s15, s0, s2
 8018dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018df4:	4605      	mov	r5, r0
 8018df6:	ed2d 8b0a 	vpush	{d8-d12}
 8018dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfe:	b086      	sub	sp, #24
 8018e00:	eeb0 ba40 	vmov.f32	s22, s0
 8018e04:	6802      	ldr	r2, [r0, #0]
 8018e06:	eef0 ba60 	vmov.f32	s23, s1
 8018e0a:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8018e0e:	eef0 aa41 	vmov.f32	s21, s2
 8018e12:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8018e14:	eeb0 aa61 	vmov.f32	s20, s3
 8018e18:	eeb0 ca42 	vmov.f32	s24, s4
 8018e1c:	eef0 ca62 	vmov.f32	s25, s5
 8018e20:	d112      	bne.n	8018e48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8018e22:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8018e26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e2e:	d10b      	bne.n	8018e48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8018e30:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8018e34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8018e36:	3901      	subs	r1, #1
 8018e38:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8018e3c:	b006      	add	sp, #24
 8018e3e:	ecbd 8b0a 	vpop	{d8-d12}
 8018e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e46:	4710      	bx	r2
 8018e48:	23ff      	movs	r3, #255	@ 0xff
 8018e4a:	4628      	mov	r0, r5
 8018e4c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8018e50:	77ab      	strb	r3, [r5, #30]
 8018e52:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8018e54:	4798      	blx	r3
 8018e56:	eeb0 0a4b 	vmov.f32	s0, s22
 8018e5a:	eef0 0a6b 	vmov.f32	s1, s23
 8018e5e:	4604      	mov	r4, r0
 8018e60:	4640      	mov	r0, r8
 8018e62:	f004 ff06 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018e66:	eef0 8a40 	vmov.f32	s17, s0
 8018e6a:	ed8d 0a00 	vstr	s0, [sp]
 8018e6e:	eeb0 0a6a 	vmov.f32	s0, s21
 8018e72:	eef0 9a60 	vmov.f32	s19, s1
 8018e76:	edcd 0a01 	vstr	s1, [sp, #4]
 8018e7a:	4640      	mov	r0, r8
 8018e7c:	eef0 0a4a 	vmov.f32	s1, s20
 8018e80:	f004 fef7 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018e84:	eef4 8a40 	vcmp.f32	s17, s0
 8018e88:	eeb0 8a40 	vmov.f32	s16, s0
 8018e8c:	ed8d 0a02 	vstr	s0, [sp, #8]
 8018e90:	eeb0 9a60 	vmov.f32	s18, s1
 8018e94:	edcd 0a03 	vstr	s1, [sp, #12]
 8018e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e9c:	eef4 9a60 	vcmp.f32	s19, s1
 8018ea0:	bf0c      	ite	eq
 8018ea2:	2301      	moveq	r3, #1
 8018ea4:	2300      	movne	r3, #0
 8018ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eaa:	eef4 8a40 	vcmp.f32	s17, s0
 8018eae:	7463      	strb	r3, [r4, #17]
 8018eb0:	bf0c      	ite	eq
 8018eb2:	2301      	moveq	r3, #1
 8018eb4:	2300      	movne	r3, #0
 8018eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eba:	74a3      	strb	r3, [r4, #18]
 8018ebc:	d024      	beq.n	8018f08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8018ebe:	eef4 9a60 	vcmp.f32	s19, s1
 8018ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec6:	d01f      	beq.n	8018f08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8018ec8:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8018ecc:	4640      	mov	r0, r8
 8018ece:	ee7a aacb 	vsub.f32	s21, s21, s22
 8018ed2:	eeb0 0a4b 	vmov.f32	s0, s22
 8018ed6:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8018eda:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8018ede:	eef0 0a6b 	vmov.f32	s1, s23
 8018ee2:	eea7 0acc 	vfms.f32	s0, s15, s24
 8018ee6:	eeec 0a87 	vfma.f32	s1, s25, s14
 8018eea:	f004 fec2 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018eee:	ed8d 0a04 	vstr	s0, [sp, #16]
 8018ef2:	ee30 0a68 	vsub.f32	s0, s0, s17
 8018ef6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018efa:	edcd 0a05 	vstr	s1, [sp, #20]
 8018efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f02:	d121      	bne.n	8018f48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8018f04:	2301      	movs	r3, #1
 8018f06:	74a3      	strb	r3, [r4, #18]
 8018f08:	7c63      	ldrb	r3, [r4, #17]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d051      	beq.n	8018fb2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8018f0e:	ee39 7a69 	vsub.f32	s14, s18, s19
 8018f12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8019008 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8018f16:	eef4 9ac9 	vcmpe.f32	s19, s18
 8018f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f22:	edc4 7a08 	vstr	s15, [r4, #32]
 8018f26:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8018f2a:	ee17 3a90 	vmov	r3, s15
 8018f2e:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8018f32:	b21a      	sxth	r2, r3
 8018f34:	ee17 3a90 	vmov	r3, s15
 8018f38:	bf48      	it	mi
 8018f3a:	8122      	strhmi	r2, [r4, #8]
 8018f3c:	b21b      	sxth	r3, r3
 8018f3e:	bf56      	itet	pl
 8018f40:	80e2      	strhpl	r2, [r4, #6]
 8018f42:	80e3      	strhmi	r3, [r4, #6]
 8018f44:	8123      	strhpl	r3, [r4, #8]
 8018f46:	e02c      	b.n	8018fa2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8018f48:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8018f4c:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8018f50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018f54:	edc4 7a05 	vstr	s15, [r4, #20]
 8018f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f5c:	d102      	bne.n	8018f64 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8018f5e:	2301      	movs	r3, #1
 8018f60:	7463      	strb	r3, [r4, #17]
 8018f62:	e7d1      	b.n	8018f08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8018f64:	eeb0 7a69 	vmov.f32	s14, s19
 8018f68:	ee39 9a69 	vsub.f32	s18, s18, s19
 8018f6c:	ee38 8a68 	vsub.f32	s16, s16, s17
 8018f70:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8018f74:	ed84 7a06 	vstr	s14, [r4, #24]
 8018f78:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8018f7c:	ee38 8a47 	vsub.f32	s16, s16, s14
 8018f80:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 801900c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8018f84:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8018f88:	ed84 8a07 	vstr	s16, [r4, #28]
 8018f8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f94:	edc4 7a08 	vstr	s15, [r4, #32]
 8018f98:	d503      	bpl.n	8018fa2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8018f9a:	eeb1 8a48 	vneg.f32	s16, s16
 8018f9e:	ed84 8a07 	vstr	s16, [r4, #28]
 8018fa2:	60e7      	str	r7, [r4, #12]
 8018fa4:	7426      	strb	r6, [r4, #16]
 8018fa6:	61ac      	str	r4, [r5, #24]
 8018fa8:	b006      	add	sp, #24
 8018faa:	ecbd 8b0a 	vpop	{d8-d12}
 8018fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fb2:	7ca3      	ldrb	r3, [r4, #18]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d0f4      	beq.n	8018fa2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8018fb8:	ee38 7a68 	vsub.f32	s14, s16, s17
 8018fbc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8019008 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8018fc0:	eef4 8ac8 	vcmpe.f32	s17, s16
 8018fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fcc:	edc4 7a08 	vstr	s15, [r4, #32]
 8018fd0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018fd4:	ee17 3a90 	vmov	r3, s15
 8018fd8:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8018fdc:	b21a      	sxth	r2, r3
 8018fde:	ee17 3a90 	vmov	r3, s15
 8018fe2:	bf48      	it	mi
 8018fe4:	8122      	strhmi	r2, [r4, #8]
 8018fe6:	b21b      	sxth	r3, r3
 8018fe8:	bf56      	itet	pl
 8018fea:	80e2      	strhpl	r2, [r4, #6]
 8018fec:	80e3      	strhmi	r3, [r4, #6]
 8018fee:	8123      	strhpl	r3, [r4, #8]
 8018ff0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018ff4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8018ff8:	1a9b      	subs	r3, r3, r2
 8018ffa:	ee07 3a90 	vmov	s15, r3
 8018ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019002:	edc4 7a07 	vstr	s15, [r4, #28]
 8019006:	e7cc      	b.n	8018fa2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8019008:	447ffffe 	.word	0x447ffffe
 801900c:	44800000 	.word	0x44800000

08019010 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8019010:	b510      	push	{r4, lr}
 8019012:	ed2d 8b02 	vpush	{d8}
 8019016:	eef0 8a62 	vmov.f32	s17, s5
 801901a:	2100      	movs	r1, #0
 801901c:	4604      	mov	r4, r0
 801901e:	eeb0 8a42 	vmov.f32	s16, s4
 8019022:	f00f ff85 	bl	8028f30 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8019026:	eef0 7a68 	vmov.f32	s15, s17
 801902a:	6823      	ldr	r3, [r4, #0]
 801902c:	4620      	mov	r0, r4
 801902e:	689b      	ldr	r3, [r3, #8]
 8019030:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019034:	ee17 2a90 	vmov	r2, s15
 8019038:	eef0 7a48 	vmov.f32	s15, s16
 801903c:	ecbd 8b02 	vpop	{d8}
 8019040:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019048:	ee17 1a90 	vmov	r1, s15
 801904c:	4718      	bx	r3

0801904e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801904e:	b510      	push	{r4, lr}
 8019050:	ed2d 8b02 	vpush	{d8}
 8019054:	eef0 8a63 	vmov.f32	s17, s7
 8019058:	2100      	movs	r1, #0
 801905a:	4604      	mov	r4, r0
 801905c:	eeb0 8a43 	vmov.f32	s16, s6
 8019060:	f010 f828 	bl	80290b4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8019064:	eef0 7a68 	vmov.f32	s15, s17
 8019068:	6823      	ldr	r3, [r4, #0]
 801906a:	4620      	mov	r0, r4
 801906c:	689b      	ldr	r3, [r3, #8]
 801906e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019072:	ee17 2a90 	vmov	r2, s15
 8019076:	eef0 7a48 	vmov.f32	s15, s16
 801907a:	ecbd 8b02 	vpop	{d8}
 801907e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019086:	ee17 1a90 	vmov	r1, s15
 801908a:	4718      	bx	r3

0801908c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 801908c:	b513      	push	{r0, r1, r4, lr}
 801908e:	4604      	mov	r4, r0
 8019090:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8019092:	f004 fdee 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019096:	eef0 7a60 	vmov.f32	s15, s1
 801909a:	4620      	mov	r0, r4
 801909c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80190a0:	ee17 2a90 	vmov	r2, s15
 80190a4:	eef0 7a40 	vmov.f32	s15, s0
 80190a8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80190ac:	ee17 1a90 	vmov	r1, s15
 80190b0:	b002      	add	sp, #8
 80190b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190b6:	f00f be95 	b.w	8028de4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80190ba:	b513      	push	{r0, r1, r4, lr}
 80190bc:	4604      	mov	r4, r0
 80190be:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80190c0:	f004 fdd7 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80190c4:	eef0 7a60 	vmov.f32	s15, s1
 80190c8:	4620      	mov	r0, r4
 80190ca:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80190ce:	ee17 2a90 	vmov	r2, s15
 80190d2:	eef0 7a40 	vmov.f32	s15, s0
 80190d6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80190da:	ee17 1a90 	vmov	r1, s15
 80190de:	b002      	add	sp, #8
 80190e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190e4:	f00f becb 	b.w	8028e7e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080190e8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80190e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190ea:	2400      	movs	r4, #0
 80190ec:	9f07      	ldr	r7, [sp, #28]
 80190ee:	f04f 0e01 	mov.w	lr, #1
 80190f2:	4626      	mov	r6, r4
 80190f4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80190f8:	4463      	add	r3, ip
 80190fa:	4563      	cmp	r3, ip
 80190fc:	d02d      	beq.n	801915a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80190fe:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8019102:	2d06      	cmp	r5, #6
 8019104:	d8f9      	bhi.n	80190fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8019106:	fa0e f505 	lsl.w	r5, lr, r5
 801910a:	f015 0f66 	tst.w	r5, #102	@ 0x66
 801910e:	d10d      	bne.n	801912c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8019110:	f015 0f10 	tst.w	r5, #16
 8019114:	d117      	bne.n	8019146 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8019116:	072d      	lsls	r5, r5, #28
 8019118:	d5ef      	bpl.n	80190fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801911a:	3801      	subs	r0, #1
 801911c:	b91e      	cbnz	r6, 8019126 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 801911e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8019122:	682d      	ldr	r5, [r5, #0]
 8019124:	600d      	str	r5, [r1, #0]
 8019126:	b96c      	cbnz	r4, 8019144 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8019128:	2601      	movs	r6, #1
 801912a:	e7e6      	b.n	80190fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801912c:	b926      	cbnz	r6, 8019138 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801912e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8019132:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8019136:	600b      	str	r3, [r1, #0]
 8019138:	b924      	cbnz	r4, 8019144 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801913a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801913e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019142:	6013      	str	r3, [r2, #0]
 8019144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019146:	3801      	subs	r0, #1
 8019148:	b91c      	cbnz	r4, 8019152 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801914a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801914e:	6824      	ldr	r4, [r4, #0]
 8019150:	6014      	str	r4, [r2, #0]
 8019152:	2e00      	cmp	r6, #0
 8019154:	d1f6      	bne.n	8019144 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8019156:	2401      	movs	r4, #1
 8019158:	e7cf      	b.n	80190fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801915a:	b90e      	cbnz	r6, 8019160 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801915c:	2300      	movs	r3, #0
 801915e:	600b      	str	r3, [r1, #0]
 8019160:	2c00      	cmp	r4, #0
 8019162:	d1ef      	bne.n	8019144 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8019164:	2300      	movs	r3, #0
 8019166:	e7ec      	b.n	8019142 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08019168 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8019168:	b538      	push	{r3, r4, r5, lr}
 801916a:	ed2d 8b0a 	vpush	{d8-d12}
 801916e:	eef0 ba40 	vmov.f32	s23, s0
 8019172:	4604      	mov	r4, r0
 8019174:	eeb0 ca60 	vmov.f32	s24, s1
 8019178:	460d      	mov	r5, r1
 801917a:	eef0 aa41 	vmov.f32	s21, s2
 801917e:	eeb0 ba61 	vmov.f32	s22, s3
 8019182:	eeb0 9a42 	vmov.f32	s18, s4
 8019186:	eef0 9a62 	vmov.f32	s19, s5
 801918a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801918e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8019192:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8019196:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801919a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801919e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 80191a2:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80191a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80191aa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80191ae:	f010 f977 	bl	80294a0 <sqrtf>
 80191b2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80191b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ba:	d12e      	bne.n	801921a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80191bc:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80191c0:	ee39 7acb 	vsub.f32	s14, s19, s22
 80191c4:	eeb0 8a6a 	vmov.f32	s16, s21
 80191c8:	eef0 8a4b 	vmov.f32	s17, s22
 80191cc:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80191d0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80191d4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80191d8:	eee7 8aca 	vfms.f32	s17, s15, s20
 80191dc:	2d02      	cmp	r5, #2
 80191de:	dc2f      	bgt.n	8019240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80191e0:	3501      	adds	r5, #1
 80191e2:	eef0 1a4b 	vmov.f32	s3, s22
 80191e6:	eeb0 1a6a 	vmov.f32	s2, s21
 80191ea:	4620      	mov	r0, r4
 80191ec:	4629      	mov	r1, r5
 80191ee:	eef0 2a68 	vmov.f32	s5, s17
 80191f2:	eeb0 2a48 	vmov.f32	s4, s16
 80191f6:	eef0 0a4c 	vmov.f32	s1, s24
 80191fa:	eeb0 0a6b 	vmov.f32	s0, s23
 80191fe:	f7ff ffb3 	bl	8019168 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8019202:	eef0 0a68 	vmov.f32	s1, s17
 8019206:	eeb0 0a48 	vmov.f32	s0, s16
 801920a:	4620      	mov	r0, r4
 801920c:	f7ff ff55 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019210:	eeb0 ba68 	vmov.f32	s22, s17
 8019214:	eef0 aa48 	vmov.f32	s21, s16
 8019218:	e7b9      	b.n	801918e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801921a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 801921e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8019222:	ee78 8acc 	vsub.f32	s17, s17, s24
 8019226:	ee28 7a27 	vmul.f32	s14, s16, s15
 801922a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801922e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8019232:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8019236:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801923a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801923e:	e7cd      	b.n	80191dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8019240:	eef0 0a68 	vmov.f32	s1, s17
 8019244:	4620      	mov	r0, r4
 8019246:	eeb0 0a48 	vmov.f32	s0, s16
 801924a:	f7ff ff36 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801924e:	ecbd 8b0a 	vpop	{d8-d12}
 8019252:	bd38      	pop	{r3, r4, r5, pc}

08019254 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8019254:	b510      	push	{r4, lr}
 8019256:	ed2d 8b0a 	vpush	{d8-d12}
 801925a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801925e:	4604      	mov	r4, r0
 8019260:	eeb0 ca40 	vmov.f32	s24, s0
 8019264:	2b02      	cmp	r3, #2
 8019266:	eeb0 9a60 	vmov.f32	s18, s1
 801926a:	eef0 9a41 	vmov.f32	s19, s2
 801926e:	eef0 8a61 	vmov.f32	s17, s3
 8019272:	eeb0 ba42 	vmov.f32	s22, s4
 8019276:	eef0 ba62 	vmov.f32	s23, s5
 801927a:	eeb0 aa43 	vmov.f32	s20, s6
 801927e:	eef0 aa63 	vmov.f32	s21, s7
 8019282:	eeb0 8a44 	vmov.f32	s16, s8
 8019286:	eef0 ca64 	vmov.f32	s25, s9
 801928a:	d12c      	bne.n	80192e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 801928c:	eef0 0a62 	vmov.f32	s1, s5
 8019290:	eeb0 0a42 	vmov.f32	s0, s4
 8019294:	f7ff ff11 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019298:	ee79 9acb 	vsub.f32	s19, s19, s22
 801929c:	ee7a caec 	vsub.f32	s25, s21, s25
 80192a0:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80192a4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80192a8:	ee69 9aac 	vmul.f32	s19, s19, s25
 80192ac:	ee28 8a88 	vmul.f32	s16, s17, s16
 80192b0:	eef4 9ac8 	vcmpe.f32	s19, s16
 80192b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192b8:	db0f      	blt.n	80192da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80192ba:	2101      	movs	r1, #1
 80192bc:	eef0 2a6a 	vmov.f32	s5, s21
 80192c0:	eeb0 2a4a 	vmov.f32	s4, s20
 80192c4:	4620      	mov	r0, r4
 80192c6:	eef0 1a6b 	vmov.f32	s3, s23
 80192ca:	eeb0 1a4b 	vmov.f32	s2, s22
 80192ce:	eef0 0a49 	vmov.f32	s1, s18
 80192d2:	eeb0 0a4c 	vmov.f32	s0, s24
 80192d6:	f7ff ff47 	bl	8019168 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80192da:	eef0 0a6a 	vmov.f32	s1, s21
 80192de:	4620      	mov	r0, r4
 80192e0:	eeb0 0a4a 	vmov.f32	s0, s20
 80192e4:	e035      	b.n	8019352 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d138      	bne.n	801935c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80192ea:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80192ee:	ee33 6a48 	vsub.f32	s12, s6, s16
 80192f2:	ee71 7a42 	vsub.f32	s15, s2, s4
 80192f6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80192fa:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80192fe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019302:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801930a:	d027      	beq.n	801935c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801930c:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8019310:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8019314:	eea4 8a83 	vfma.f32	s16, s9, s6
 8019318:	eee1 8a22 	vfma.f32	s17, s2, s5
 801931c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8019320:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8019324:	eee6 7a28 	vfma.f32	s15, s12, s17
 8019328:	eea6 8aa8 	vfma.f32	s16, s13, s17
 801932c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8019330:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8019334:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8019338:	ee3c ca40 	vsub.f32	s24, s24, s0
 801933c:	ee39 9a60 	vsub.f32	s18, s18, s1
 8019340:	ee29 9a09 	vmul.f32	s18, s18, s18
 8019344:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8019348:	eef4 7ac9 	vcmpe.f32	s15, s18
 801934c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019350:	db04      	blt.n	801935c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8019352:	f7ff feb2 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019356:	ecbd 8b0a 	vpop	{d8-d12}
 801935a:	bd10      	pop	{r4, pc}
 801935c:	eef0 0a6b 	vmov.f32	s1, s23
 8019360:	4620      	mov	r0, r4
 8019362:	eeb0 0a4b 	vmov.f32	s0, s22
 8019366:	f7ff fea8 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801936a:	e7b6      	b.n	80192da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0801936c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 801936c:	b510      	push	{r4, lr}
 801936e:	ed2d 8b0c 	vpush	{d8-d13}
 8019372:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8019376:	4604      	mov	r4, r0
 8019378:	eeb0 9a40 	vmov.f32	s18, s0
 801937c:	eef0 9a60 	vmov.f32	s19, s1
 8019380:	eef0 aa41 	vmov.f32	s21, s2
 8019384:	eeb0 ba61 	vmov.f32	s22, s3
 8019388:	b933      	cbnz	r3, 8019398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801938a:	f7ff fe96 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801938e:	eef0 0a4b 	vmov.f32	s1, s22
 8019392:	eeb0 0a6a 	vmov.f32	s0, s21
 8019396:	e015      	b.n	80193c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8019398:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801939c:	2b02      	cmp	r3, #2
 801939e:	ee71 8a40 	vsub.f32	s17, s2, s0
 80193a2:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80193a6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80193aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80193ae:	d10f      	bne.n	80193d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80193b0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80193b4:	ee30 0a08 	vadd.f32	s0, s0, s16
 80193b8:	f7ff fe7f 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80193bc:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80193c0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80193c4:	4620      	mov	r0, r4
 80193c6:	f7ff fe78 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80193ca:	ecbd 8b0c 	vpop	{d8-d13}
 80193ce:	bd10      	pop	{r4, pc}
 80193d0:	f7ff fe73 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80193d4:	eef0 0a69 	vmov.f32	s1, s19
 80193d8:	eeb0 0a49 	vmov.f32	s0, s18
 80193dc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 801950c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80193e0:	eeb1 aa68 	vneg.f32	s20, s17
 80193e4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8019510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80193e8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80193ec:	4620      	mov	r0, r4
 80193ee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80193f2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8019514 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80193f6:	eddf ca48 	vldr	s25, [pc, #288]	@ 8019518 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80193fa:	ed9f da48 	vldr	s26, [pc, #288]	@ 801951c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80193fe:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8019402:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8019406:	f7ff fe58 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801940a:	eef0 0a69 	vmov.f32	s1, s19
 801940e:	eeb0 0a49 	vmov.f32	s0, s18
 8019412:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8019520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8019416:	4620      	mov	r0, r4
 8019418:	eee8 0a27 	vfma.f32	s1, s16, s15
 801941c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019420:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8019424:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8019428:	f7ff fe47 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801942c:	eef0 0a69 	vmov.f32	s1, s19
 8019430:	eeb0 0a49 	vmov.f32	s0, s18
 8019434:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8019524 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8019438:	4620      	mov	r0, r4
 801943a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801943e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019442:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8019446:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801944a:	f7ff fe36 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801944e:	eef0 0a69 	vmov.f32	s1, s19
 8019452:	eeb0 0a49 	vmov.f32	s0, s18
 8019456:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8019528 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801945a:	4620      	mov	r0, r4
 801945c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019460:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019464:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8019468:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801946c:	f7ff fe25 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019470:	ee79 0a88 	vadd.f32	s1, s19, s16
 8019474:	ee39 0a28 	vadd.f32	s0, s18, s17
 8019478:	4620      	mov	r0, r4
 801947a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801947e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019482:	f7ff fe1a 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8019486:	eef0 0a69 	vmov.f32	s1, s19
 801948a:	eeb0 0a49 	vmov.f32	s0, s18
 801948e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801952c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8019492:	4620      	mov	r0, r4
 8019494:	eee8 0a27 	vfma.f32	s1, s16, s15
 8019498:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801949c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80194a0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80194a4:	f7ff fe09 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80194a8:	eef0 0a69 	vmov.f32	s1, s19
 80194ac:	eeb0 0a49 	vmov.f32	s0, s18
 80194b0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8019530 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80194b4:	4620      	mov	r0, r4
 80194b6:	eee8 0a27 	vfma.f32	s1, s16, s15
 80194ba:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80194be:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80194c2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80194c6:	f7ff fdf8 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80194ca:	eef0 0a69 	vmov.f32	s1, s19
 80194ce:	eeb0 0a49 	vmov.f32	s0, s18
 80194d2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8019534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80194d6:	4620      	mov	r0, r4
 80194d8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80194dc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80194e0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80194e4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80194e8:	f7ff fde7 	bl	80190ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80194ec:	eef0 0a69 	vmov.f32	s1, s19
 80194f0:	eeb0 0a49 	vmov.f32	s0, s18
 80194f4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8019538 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80194f8:	4620      	mov	r0, r4
 80194fa:	eee8 0a27 	vfma.f32	s1, s16, s15
 80194fe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8019502:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8019506:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801950a:	e73e      	b.n	801938a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 801950c:	3d23d70a 	.word	0x3d23d70a
 8019510:	3e8f5c29 	.word	0x3e8f5c29
 8019514:	3f19999a 	.word	0x3f19999a
 8019518:	3f4ccccd 	.word	0x3f4ccccd
 801951c:	3f75c28f 	.word	0x3f75c28f
 8019520:	3e4ccccd 	.word	0x3e4ccccd
 8019524:	3ecccccd 	.word	0x3ecccccd
 8019528:	3f3851ec 	.word	0x3f3851ec
 801952c:	3fa3d70a 	.word	0x3fa3d70a
 8019530:	3fcccccd 	.word	0x3fcccccd
 8019534:	3fe66666 	.word	0x3fe66666
 8019538:	3ffae148 	.word	0x3ffae148

0801953c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 801953c:	b570      	push	{r4, r5, r6, lr}
 801953e:	ed2d 8b06 	vpush	{d8-d10}
 8019542:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8019546:	eef0 aa40 	vmov.f32	s21, s0
 801954a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801954e:	4604      	mov	r4, r0
 8019550:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8019554:	ee30 9a49 	vsub.f32	s18, s0, s18
 8019558:	eeb0 aa60 	vmov.f32	s20, s1
 801955c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019560:	eea9 0a09 	vfma.f32	s0, s18, s18
 8019564:	f00f ff9c 	bl	80294a0 <sqrtf>
 8019568:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801956c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019570:	dd36      	ble.n	80195e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8019572:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8019576:	2600      	movs	r6, #0
 8019578:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 801957c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8019580:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8019584:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8019588:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 801958c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8019590:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8019594:	ee70 9a28 	vadd.f32	s19, s0, s17
 8019598:	ee78 8aaa 	vadd.f32	s17, s17, s21
 801959c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80195a0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80195a4:	b1fd      	cbz	r5, 80195e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80195a6:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80195aa:	eef0 0a49 	vmov.f32	s1, s18
 80195ae:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80195b2:	eeb0 0a69 	vmov.f32	s0, s19
 80195b6:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80195ba:	4620      	mov	r0, r4
 80195bc:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80195c0:	f7ff fd64 	bl	801908c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80195c4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80195c8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80195cc:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80195d0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80195d4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80195d8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80195dc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80195e0:	ecbd 8b06 	vpop	{d8-d10}
 80195e4:	bd70      	pop	{r4, r5, r6, pc}
 80195e6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80195ea:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80195ee:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80195f2:	b16b      	cbz	r3, 8019610 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80195f4:	eef0 1a49 	vmov.f32	s3, s18
 80195f8:	4620      	mov	r0, r4
 80195fa:	eeb0 1a69 	vmov.f32	s2, s19
 80195fe:	eef0 0a62 	vmov.f32	s1, s5
 8019602:	eeb0 0a42 	vmov.f32	s0, s4
 8019606:	f7ff feb1 	bl	801936c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801960a:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 801960e:	e7db      	b.n	80195c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8019610:	eef0 4a48 	vmov.f32	s9, s16
 8019614:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8019618:	eeb0 4a68 	vmov.f32	s8, s17
 801961c:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8019620:	eef0 3a49 	vmov.f32	s7, s18
 8019624:	4620      	mov	r0, r4
 8019626:	eeb0 3a69 	vmov.f32	s6, s19
 801962a:	f7ff fe13 	bl	8019254 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801962e:	e7cb      	b.n	80195c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08019630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8019630:	ee07 2a90 	vmov	s15, r2
 8019634:	ee07 1a10 	vmov	s14, r1
 8019638:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801963c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8019650 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8019640:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8019644:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019648:	ee20 0a27 	vmul.f32	s0, s0, s15
 801964c:	f7ff bf76 	b.w	801953c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019650:	3d000000 	.word	0x3d000000

08019654 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8019654:	b538      	push	{r3, r4, r5, lr}
 8019656:	ed2d 8b02 	vpush	{d8}
 801965a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 801965e:	4604      	mov	r4, r0
 8019660:	b31d      	cbz	r5, 80196aa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8019662:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8019666:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801966a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 801966e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8019672:	ee38 8a27 	vadd.f32	s16, s16, s15
 8019676:	eef0 0a68 	vmov.f32	s1, s17
 801967a:	f7ff fd07 	bl	801908c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801967e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8019682:	eef0 1a48 	vmov.f32	s3, s16
 8019686:	4620      	mov	r0, r4
 8019688:	eeb0 0a41 	vmov.f32	s0, s2
 801968c:	eef0 0a68 	vmov.f32	s1, s17
 8019690:	f7ff fe6c 	bl	801936c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8019694:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8019698:	eef0 1a68 	vmov.f32	s3, s17
 801969c:	4620      	mov	r0, r4
 801969e:	eef0 0a48 	vmov.f32	s1, s16
 80196a2:	eeb0 0a41 	vmov.f32	s0, s2
 80196a6:	f7ff fe61 	bl	801936c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80196aa:	4628      	mov	r0, r5
 80196ac:	ecbd 8b02 	vpop	{d8}
 80196b0:	bd38      	pop	{r3, r4, r5, pc}

080196b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 80196b2:	b510      	push	{r4, lr}
 80196b4:	ed2d 8b02 	vpush	{d8}
 80196b8:	4604      	mov	r4, r0
 80196ba:	eeb0 8a40 	vmov.f32	s16, s0
 80196be:	eef0 8a60 	vmov.f32	s17, s1
 80196c2:	f7ff ffc7 	bl	8019654 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80196c6:	b9d0      	cbnz	r0, 80196fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80196c8:	4620      	mov	r0, r4
 80196ca:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80196ce:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80196d2:	eef0 0a68 	vmov.f32	s1, s17
 80196d6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80196da:	eeb0 0a48 	vmov.f32	s0, s16
 80196de:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80196e2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80196e6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80196ea:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80196ee:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80196f2:	f7ff fdaf 	bl	8019254 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80196f6:	2001      	movs	r0, #1
 80196f8:	ecbd 8b02 	vpop	{d8}
 80196fc:	bd10      	pop	{r4, pc}
 80196fe:	2000      	movs	r0, #0
 8019700:	e7fa      	b.n	80196f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08019702 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8019702:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8019706:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801970a:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 801970e:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8019712:	f7ff be2b 	b.w	801936c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08019718 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8019718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801971c:	b089      	sub	sp, #36	@ 0x24
 801971e:	461c      	mov	r4, r3
 8019720:	4682      	mov	sl, r0
 8019722:	4615      	mov	r5, r2
 8019724:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8019728:	f10d 0820 	add.w	r8, sp, #32
 801972c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801972e:	9304      	str	r3, [sp, #16]
 8019730:	2300      	movs	r3, #0
 8019732:	9105      	str	r1, [sp, #20]
 8019734:	9306      	str	r3, [sp, #24]
 8019736:	f848 3d04 	str.w	r3, [r8, #-4]!
 801973a:	9b04      	ldr	r3, [sp, #16]
 801973c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8019740:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8019744:	9b05      	ldr	r3, [sp, #20]
 8019746:	429d      	cmp	r5, r3
 8019748:	d96d      	bls.n	8019826 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801974a:	3d01      	subs	r5, #1
 801974c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8019750:	2b06      	cmp	r3, #6
 8019752:	d8f7      	bhi.n	8019744 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8019754:	a201      	add	r2, pc, #4	@ (adr r2, 801975c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8019756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801975a:	bf00      	nop
 801975c:	0801977b 	.word	0x0801977b
 8019760:	08019745 	.word	0x08019745
 8019764:	08019779 	.word	0x08019779
 8019768:	0801979d 	.word	0x0801979d
 801976c:	0801979d 	.word	0x0801979d
 8019770:	080197a1 	.word	0x080197a1
 8019774:	080197e1 	.word	0x080197e1
 8019778:	3c02      	subs	r4, #2
 801977a:	4650      	mov	r0, sl
 801977c:	9400      	str	r4, [sp, #0]
 801977e:	462b      	mov	r3, r5
 8019780:	4642      	mov	r2, r8
 8019782:	a906      	add	r1, sp, #24
 8019784:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019788:	f7ff fcae 	bl	80190e8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801978c:	eddd 0a07 	vldr	s1, [sp, #28]
 8019790:	ed9d 0a06 	vldr	s0, [sp, #24]
 8019794:	4630      	mov	r0, r6
 8019796:	f7ff fed1 	bl	801953c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801979a:	e7d3      	b.n	8019744 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801979c:	3c01      	subs	r4, #1
 801979e:	e7ec      	b.n	801977a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80197a0:	f1a4 0b04 	sub.w	fp, r4, #4
 80197a4:	3c02      	subs	r4, #2
 80197a6:	4650      	mov	r0, sl
 80197a8:	462b      	mov	r3, r5
 80197aa:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80197ae:	f8cd b000 	str.w	fp, [sp]
 80197b2:	4642      	mov	r2, r8
 80197b4:	a906      	add	r1, sp, #24
 80197b6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80197ba:	f7ff fc95 	bl	80190e8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80197be:	eddd 2a07 	vldr	s5, [sp, #28]
 80197c2:	ed9d 2a06 	vldr	s4, [sp, #24]
 80197c6:	4630      	mov	r0, r6
 80197c8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80197cc:	ed14 1a02 	vldr	s2, [r4, #-8]
 80197d0:	edd4 0a01 	vldr	s1, [r4, #4]
 80197d4:	ed94 0a00 	vldr	s0, [r4]
 80197d8:	f7ff fc1a 	bl	8019010 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80197dc:	465c      	mov	r4, fp
 80197de:	e7b1      	b.n	8019744 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80197e0:	f1a4 0b06 	sub.w	fp, r4, #6
 80197e4:	3c02      	subs	r4, #2
 80197e6:	4650      	mov	r0, sl
 80197e8:	462b      	mov	r3, r5
 80197ea:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80197ee:	f8cd b000 	str.w	fp, [sp]
 80197f2:	4642      	mov	r2, r8
 80197f4:	a906      	add	r1, sp, #24
 80197f6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80197fa:	f7ff fc75 	bl	80190e8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80197fe:	eddd 3a07 	vldr	s7, [sp, #28]
 8019802:	ed9d 3a06 	vldr	s6, [sp, #24]
 8019806:	4630      	mov	r0, r6
 8019808:	ed54 2a03 	vldr	s5, [r4, #-12]
 801980c:	ed14 2a04 	vldr	s4, [r4, #-16]
 8019810:	ed54 1a01 	vldr	s3, [r4, #-4]
 8019814:	ed14 1a02 	vldr	s2, [r4, #-8]
 8019818:	edd4 0a01 	vldr	s1, [r4, #4]
 801981c:	ed94 0a00 	vldr	s0, [r4]
 8019820:	f7ff fc15 	bl	801904e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8019824:	e7da      	b.n	80197dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8019826:	9b04      	ldr	r3, [sp, #16]
 8019828:	b113      	cbz	r3, 8019830 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801982a:	4630      	mov	r0, r6
 801982c:	f7ff ff69 	bl	8019702 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8019830:	b009      	add	sp, #36	@ 0x24
 8019832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019836:	bf00      	nop

08019838 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8019838:	eef0 7a60 	vmov.f32	s15, s1
 801983c:	6803      	ldr	r3, [r0, #0]
 801983e:	689b      	ldr	r3, [r3, #8]
 8019840:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019844:	ee17 2a90 	vmov	r2, s15
 8019848:	eef0 7a40 	vmov.f32	s15, s0
 801984c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019850:	ee17 1a90 	vmov	r1, s15
 8019854:	4718      	bx	r3
	...

08019858 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8019858:	4b04      	ldr	r3, [pc, #16]	@ (801986c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801985a:	b510      	push	{r4, lr}
 801985c:	4604      	mov	r4, r0
 801985e:	f840 3b14 	str.w	r3, [r0], #20
 8019862:	f000 ff15 	bl	801a690 <_ZN8touchgfx7OutlineD1Ev>
 8019866:	4620      	mov	r0, r4
 8019868:	bd10      	pop	{r4, pc}
 801986a:	bf00      	nop
 801986c:	0802facc 	.word	0x0802facc

08019870 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8019870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019874:	ed2d 8b04 	vpush	{d8-d9}
 8019878:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 801987c:	b0b5      	sub	sp, #212	@ 0xd4
 801987e:	4605      	mov	r5, r0
 8019880:	468b      	mov	fp, r1
 8019882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019886:	9206      	str	r2, [sp, #24]
 8019888:	461e      	mov	r6, r3
 801988a:	2400      	movs	r4, #0
 801988c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019890:	f240 814f 	bls.w	8019b32 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8019894:	23ff      	movs	r3, #255	@ 0xff
 8019896:	1d02      	adds	r2, r0, #4
 8019898:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8019b38 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 801989c:	f04f 0800 	mov.w	r8, #0
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	af08      	add	r7, sp, #32
 80198a4:	6981      	ldr	r1, [r0, #24]
 80198a6:	a808      	add	r0, sp, #32
 80198a8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80198aa:	eef0 9a49 	vmov.f32	s19, s18
 80198ae:	f00f f94d 	bl	8028b4c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80198b2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 80198b6:	4ba1      	ldr	r3, [pc, #644]	@ (8019b3c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80198b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80198bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80198c0:	2201      	movs	r2, #1
 80198c2:	9308      	str	r3, [sp, #32]
 80198c4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80198c8:	edd5 6a08 	vldr	s13, [r5, #32]
 80198cc:	eeb0 8a49 	vmov.f32	s16, s18
 80198d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d4:	9325      	str	r3, [sp, #148]	@ 0x94
 80198d6:	f04f 0300 	mov.w	r3, #0
 80198da:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80198de:	7f6a      	ldrb	r2, [r5, #29]
 80198e0:	eef0 8a49 	vmov.f32	s17, s18
 80198e4:	bf48      	it	mi
 80198e6:	eef1 7a67 	vnegmi.f32	s15, s15
 80198ea:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80198ee:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80198f2:	46c1      	mov	r9, r8
 80198f4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80198f8:	f04f 0a01 	mov.w	sl, #1
 80198fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019900:	7fab      	ldrb	r3, [r5, #30]
 8019902:	942a      	str	r4, [sp, #168]	@ 0xa8
 8019904:	435a      	muls	r2, r3
 8019906:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801990a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801990e:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8019912:	1c53      	adds	r3, r2, #1
 8019914:	942b      	str	r4, [sp, #172]	@ 0xac
 8019916:	942c      	str	r4, [sp, #176]	@ 0xb0
 8019918:	ee27 7a26 	vmul.f32	s14, s14, s13
 801991c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019920:	942d      	str	r4, [sp, #180]	@ 0xb4
 8019922:	942e      	str	r4, [sp, #184]	@ 0xb8
 8019924:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019928:	ee67 7a27 	vmul.f32	s15, s14, s15
 801992c:	942f      	str	r4, [sp, #188]	@ 0xbc
 801992e:	9430      	str	r4, [sp, #192]	@ 0xc0
 8019930:	9431      	str	r4, [sp, #196]	@ 0xc4
 8019932:	9432      	str	r4, [sp, #200]	@ 0xc8
 8019934:	9433      	str	r4, [sp, #204]	@ 0xcc
 8019936:	4644      	mov	r4, r8
 8019938:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801993c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8019940:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8019944:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8019948:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 801994c:	9b06      	ldr	r3, [sp, #24]
 801994e:	454b      	cmp	r3, r9
 8019950:	f000 80cc 	beq.w	8019aec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8019954:	f109 0301 	add.w	r3, r9, #1
 8019958:	9305      	str	r3, [sp, #20]
 801995a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801995e:	2b06      	cmp	r3, #6
 8019960:	d839      	bhi.n	80199d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019962:	e8df f003 	tbb	[pc, r3]
 8019966:	3b04      	.short	0x3b04
 8019968:	817c6f60 	.word	0x817c6f60
 801996c:	a0          	.byte	0xa0
 801996d:	00          	.byte	0x00
 801996e:	45c1      	cmp	r9, r8
 8019970:	d92b      	bls.n	80199ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8019972:	eef0 0a49 	vmov.f32	s1, s18
 8019976:	4638      	mov	r0, r7
 8019978:	eeb0 0a69 	vmov.f32	s0, s19
 801997c:	f7ff fdde 	bl	801953c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019980:	4638      	mov	r0, r7
 8019982:	f7ff fe67 	bl	8019654 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019986:	4681      	mov	r9, r0
 8019988:	b9f8      	cbnz	r0, 80199ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801998a:	eef0 0a49 	vmov.f32	s1, s18
 801998e:	4638      	mov	r0, r7
 8019990:	eeb0 0a69 	vmov.f32	s0, s19
 8019994:	f7ff fe8d 	bl	80196b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8019998:	4628      	mov	r0, r5
 801999a:	4623      	mov	r3, r4
 801999c:	9a05      	ldr	r2, [sp, #20]
 801999e:	4641      	mov	r1, r8
 80199a0:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80199a4:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80199a8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80199ac:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80199b0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80199b4:	e9cd b600 	strd	fp, r6, [sp]
 80199b8:	f7ff feae 	bl	8019718 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80199bc:	eef0 0a49 	vmov.f32	s1, s18
 80199c0:	eeb0 0a69 	vmov.f32	s0, s19
 80199c4:	4638      	mov	r0, r7
 80199c6:	f7ff fe74 	bl	80196b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80199ca:	eeb0 8a49 	vmov.f32	s16, s18
 80199ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80199d2:	eef0 8a69 	vmov.f32	s17, s19
 80199d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80199da:	e7b7      	b.n	801994c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80199dc:	45c1      	cmp	r9, r8
 80199de:	d90d      	bls.n	80199fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80199e0:	4638      	mov	r0, r7
 80199e2:	f7ff fe37 	bl	8019654 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80199e6:	b948      	cbnz	r0, 80199fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80199e8:	4623      	mov	r3, r4
 80199ea:	464a      	mov	r2, r9
 80199ec:	4641      	mov	r1, r8
 80199ee:	4628      	mov	r0, r5
 80199f0:	e9cd a702 	strd	sl, r7, [sp, #8]
 80199f4:	e9cd b600 	strd	fp, r6, [sp]
 80199f8:	f7ff fe8e 	bl	8019718 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80199fc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019a00:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8019a04:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8019a08:	3402      	adds	r4, #2
 8019a0a:	edd3 8a00 	vldr	s17, [r3]
 8019a0e:	46c8      	mov	r8, r9
 8019a10:	ed93 8a01 	vldr	s16, [r3, #4]
 8019a14:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8019a18:	eef0 9a68 	vmov.f32	s19, s17
 8019a1c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8019a20:	eeb0 9a48 	vmov.f32	s18, s16
 8019a24:	e7d7      	b.n	80199d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019a26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019a2a:	4638      	mov	r0, r7
 8019a2c:	3402      	adds	r4, #2
 8019a2e:	edd3 8a00 	vldr	s17, [r3]
 8019a32:	ed93 8a01 	vldr	s16, [r3, #4]
 8019a36:	eeb0 0a68 	vmov.f32	s0, s17
 8019a3a:	eef0 0a48 	vmov.f32	s1, s16
 8019a3e:	f7ff fd7d 	bl	801953c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019a42:	e7c8      	b.n	80199d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019a44:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019a48:	edd3 8a00 	vldr	s17, [r3]
 8019a4c:	eef0 0a48 	vmov.f32	s1, s16
 8019a50:	4638      	mov	r0, r7
 8019a52:	eeb0 0a68 	vmov.f32	s0, s17
 8019a56:	3401      	adds	r4, #1
 8019a58:	f7ff fd70 	bl	801953c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019a5c:	e7bb      	b.n	80199d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019a5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019a62:	ed93 8a00 	vldr	s16, [r3]
 8019a66:	e7f1      	b.n	8019a4c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8019a68:	00a3      	lsls	r3, r4, #2
 8019a6a:	eef0 0a48 	vmov.f32	s1, s16
 8019a6e:	eeb0 0a68 	vmov.f32	s0, s17
 8019a72:	4638      	mov	r0, r7
 8019a74:	f103 0208 	add.w	r2, r3, #8
 8019a78:	f103 090c 	add.w	r9, r3, #12
 8019a7c:	4433      	add	r3, r6
 8019a7e:	3404      	adds	r4, #4
 8019a80:	4432      	add	r2, r6
 8019a82:	44b1      	add	r9, r6
 8019a84:	edd3 1a01 	vldr	s3, [r3, #4]
 8019a88:	ed92 2a00 	vldr	s4, [r2]
 8019a8c:	edd9 2a00 	vldr	s5, [r9]
 8019a90:	ed93 1a00 	vldr	s2, [r3]
 8019a94:	9207      	str	r2, [sp, #28]
 8019a96:	f7ff fabb 	bl	8019010 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8019a9a:	9a07      	ldr	r2, [sp, #28]
 8019a9c:	ed99 8a00 	vldr	s16, [r9]
 8019aa0:	edd2 8a00 	vldr	s17, [r2]
 8019aa4:	e797      	b.n	80199d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019aa6:	00a3      	lsls	r3, r4, #2
 8019aa8:	eef0 0a48 	vmov.f32	s1, s16
 8019aac:	eeb0 0a68 	vmov.f32	s0, s17
 8019ab0:	4638      	mov	r0, r7
 8019ab2:	f103 0210 	add.w	r2, r3, #16
 8019ab6:	f103 0914 	add.w	r9, r3, #20
 8019aba:	4433      	add	r3, r6
 8019abc:	3406      	adds	r4, #6
 8019abe:	4432      	add	r2, r6
 8019ac0:	44b1      	add	r9, r6
 8019ac2:	edd3 2a03 	vldr	s5, [r3, #12]
 8019ac6:	ed92 3a00 	vldr	s6, [r2]
 8019aca:	edd9 3a00 	vldr	s7, [r9]
 8019ace:	ed93 2a02 	vldr	s4, [r3, #8]
 8019ad2:	edd3 1a01 	vldr	s3, [r3, #4]
 8019ad6:	ed93 1a00 	vldr	s2, [r3]
 8019ada:	9207      	str	r2, [sp, #28]
 8019adc:	f7ff fab7 	bl	801904e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8019ae0:	9a07      	ldr	r2, [sp, #28]
 8019ae2:	ed99 8a00 	vldr	s16, [r9]
 8019ae6:	edd2 8a00 	vldr	s17, [r2]
 8019aea:	e774      	b.n	80199d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019aec:	9b06      	ldr	r3, [sp, #24]
 8019aee:	af08      	add	r7, sp, #32
 8019af0:	4543      	cmp	r3, r8
 8019af2:	d90f      	bls.n	8019b14 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8019af4:	4638      	mov	r0, r7
 8019af6:	f7ff fdad 	bl	8019654 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019afa:	b958      	cbnz	r0, 8019b14 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8019afc:	2301      	movs	r3, #1
 8019afe:	9703      	str	r7, [sp, #12]
 8019b00:	f8cd b000 	str.w	fp, [sp]
 8019b04:	4641      	mov	r1, r8
 8019b06:	9a06      	ldr	r2, [sp, #24]
 8019b08:	4628      	mov	r0, r5
 8019b0a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8019b0e:	4623      	mov	r3, r4
 8019b10:	f7ff fe02 	bl	8019718 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8019b14:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8019b18:	4638      	mov	r0, r7
 8019b1a:	f00f f8ab 	bl	8028c74 <_ZN8touchgfx6Canvas6renderEh>
 8019b1e:	4604      	mov	r4, r0
 8019b20:	4638      	mov	r0, r7
 8019b22:	f7ff fe99 	bl	8019858 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8019b26:	4620      	mov	r0, r4
 8019b28:	b035      	add	sp, #212	@ 0xd4
 8019b2a:	ecbd 8b04 	vpop	{d8-d9}
 8019b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b32:	2401      	movs	r4, #1
 8019b34:	e7f7      	b.n	8019b26 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8019b36:	bf00      	nop
 8019b38:	00000000 	.word	0x00000000
 8019b3c:	0802f540 	.word	0x0802f540

08019b40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8019b40:	b510      	push	{r4, lr}
 8019b42:	4604      	mov	r4, r0
 8019b44:	f7ff fe88 	bl	8019858 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8019b48:	21b0      	movs	r1, #176	@ 0xb0
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	f00f fc7e 	bl	802944c <_ZdlPvj>
 8019b50:	4620      	mov	r0, r4
 8019b52:	bd10      	pop	{r4, pc}

08019b54 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8019b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b58:	4698      	mov	r8, r3
 8019b5a:	23ff      	movs	r3, #255	@ 0xff
 8019b5c:	4607      	mov	r7, r0
 8019b5e:	4689      	mov	r9, r1
 8019b60:	4692      	mov	sl, r2
 8019b62:	1d02      	adds	r2, r0, #4
 8019b64:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8019b68:	2400      	movs	r4, #0
 8019b6a:	44ca      	add	sl, r9
 8019b6c:	ed2d 8b06 	vpush	{d8-d10}
 8019b70:	b0aa      	sub	sp, #168	@ 0xa8
 8019b72:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8019d78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8019b76:	9300      	str	r3, [sp, #0]
 8019b78:	eef0 8a48 	vmov.f32	s17, s16
 8019b7c:	6981      	ldr	r1, [r0, #24]
 8019b7e:	a80d      	add	r0, sp, #52	@ 0x34
 8019b80:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8019b82:	f00e ffe3 	bl	8028b4c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8019b86:	7f3b      	ldrb	r3, [r7, #28]
 8019b88:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8019d78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8019b8c:	4628      	mov	r0, r5
 8019b8e:	1e5a      	subs	r2, r3, #1
 8019b90:	eeb0 0a60 	vmov.f32	s0, s1
 8019b94:	4253      	negs	r3, r2
 8019b96:	4153      	adcs	r3, r2
 8019b98:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8019b9c:	f004 f869 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019ba0:	eeb0 9a40 	vmov.f32	s18, s0
 8019ba4:	eef0 9a60 	vmov.f32	s19, s1
 8019ba8:	45ca      	cmp	sl, r9
 8019baa:	f000 80cd 	beq.w	8019d48 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8019bae:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019bb2:	2b06      	cmp	r3, #6
 8019bb4:	d8f8      	bhi.n	8019ba8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019bb6:	e8df f003 	tbb	[pc, r3]
 8019bba:	0804      	.short	0x0804
 8019bbc:	58533f2a 	.word	0x58533f2a
 8019bc0:	8a          	.byte	0x8a
 8019bc1:	00          	.byte	0x00
 8019bc2:	a80d      	add	r0, sp, #52	@ 0x34
 8019bc4:	f00f f834 	bl	8028c30 <_ZN8touchgfx6Canvas5closeEv>
 8019bc8:	e7ee      	b.n	8019ba8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019bca:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8019bce:	4628      	mov	r0, r5
 8019bd0:	ed93 8a01 	vldr	s16, [r3, #4]
 8019bd4:	edd3 8a00 	vldr	s17, [r3]
 8019bd8:	eef0 0a48 	vmov.f32	s1, s16
 8019bdc:	eeb0 0a68 	vmov.f32	s0, s17
 8019be0:	f004 f847 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019be4:	a80d      	add	r0, sp, #52	@ 0x34
 8019be6:	eef0 7a60 	vmov.f32	s15, s1
 8019bea:	eeb0 9a40 	vmov.f32	s18, s0
 8019bee:	eef0 9a60 	vmov.f32	s19, s1
 8019bf2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019bf6:	ee17 2a90 	vmov	r2, s15
 8019bfa:	eef0 7a40 	vmov.f32	s15, s0
 8019bfe:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8019c02:	ee17 1a90 	vmov	r1, s15
 8019c06:	f00f f8ed 	bl	8028de4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8019c0a:	3402      	adds	r4, #2
 8019c0c:	e7cc      	b.n	8019ba8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019c0e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8019c12:	4628      	mov	r0, r5
 8019c14:	edd3 8a00 	vldr	s17, [r3]
 8019c18:	ed93 8a01 	vldr	s16, [r3, #4]
 8019c1c:	eeb0 0a68 	vmov.f32	s0, s17
 8019c20:	eef0 0a48 	vmov.f32	s1, s16
 8019c24:	f004 f825 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019c28:	a80d      	add	r0, sp, #52	@ 0x34
 8019c2a:	eeb0 9a40 	vmov.f32	s18, s0
 8019c2e:	eef0 9a60 	vmov.f32	s19, s1
 8019c32:	f7ff fe01 	bl	8019838 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8019c36:	e7e8      	b.n	8019c0a <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8019c38:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8019c3c:	edd3 8a00 	vldr	s17, [r3]
 8019c40:	eef0 0a48 	vmov.f32	s1, s16
 8019c44:	4628      	mov	r0, r5
 8019c46:	eeb0 0a68 	vmov.f32	s0, s17
 8019c4a:	3401      	adds	r4, #1
 8019c4c:	f004 f811 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019c50:	a80d      	add	r0, sp, #52	@ 0x34
 8019c52:	eef0 9a60 	vmov.f32	s19, s1
 8019c56:	eeb0 9a40 	vmov.f32	s18, s0
 8019c5a:	f7ff fded 	bl	8019838 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8019c5e:	e7a3      	b.n	8019ba8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019c60:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8019c64:	ed93 8a00 	vldr	s16, [r3]
 8019c68:	e7ea      	b.n	8019c40 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8019c6a:	1ca3      	adds	r3, r4, #2
 8019c6c:	4628      	mov	r0, r5
 8019c6e:	3404      	adds	r4, #4
 8019c70:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8019c74:	ed53 0a01 	vldr	s1, [r3, #-4]
 8019c78:	ed13 0a02 	vldr	s0, [r3, #-8]
 8019c7c:	edd3 8a00 	vldr	s17, [r3]
 8019c80:	ed93 8a01 	vldr	s16, [r3, #4]
 8019c84:	f003 fff5 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019c88:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8019c8c:	eeb0 0a68 	vmov.f32	s0, s17
 8019c90:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8019c94:	eef0 0a48 	vmov.f32	s1, s16
 8019c98:	4628      	mov	r0, r5
 8019c9a:	f003 ffea 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019c9e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8019ca2:	eef0 2a60 	vmov.f32	s5, s1
 8019ca6:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8019caa:	eeb0 2a40 	vmov.f32	s4, s0
 8019cae:	a80d      	add	r0, sp, #52	@ 0x34
 8019cb0:	eeb0 aa40 	vmov.f32	s20, s0
 8019cb4:	eef0 aa60 	vmov.f32	s21, s1
 8019cb8:	eeb0 0a49 	vmov.f32	s0, s18
 8019cbc:	eef0 0a69 	vmov.f32	s1, s19
 8019cc0:	f7ff f9a6 	bl	8019010 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8019cc4:	eef0 9a6a 	vmov.f32	s19, s21
 8019cc8:	eeb0 9a4a 	vmov.f32	s18, s20
 8019ccc:	e76c      	b.n	8019ba8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019cce:	1d26      	adds	r6, r4, #4
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	3406      	adds	r4, #6
 8019cd4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019cd8:	ed56 0a03 	vldr	s1, [r6, #-12]
 8019cdc:	ed16 0a04 	vldr	s0, [r6, #-16]
 8019ce0:	edd6 8a00 	vldr	s17, [r6]
 8019ce4:	ed96 8a01 	vldr	s16, [r6, #4]
 8019ce8:	f003 ffc3 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019cec:	ed8d 0a07 	vstr	s0, [sp, #28]
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	ed16 0a02 	vldr	s0, [r6, #-8]
 8019cf6:	edcd 0a08 	vstr	s1, [sp, #32]
 8019cfa:	ed56 0a01 	vldr	s1, [r6, #-4]
 8019cfe:	f003 ffb8 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019d02:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8019d06:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8019d0a:	eeb0 0a68 	vmov.f32	s0, s17
 8019d0e:	eef0 0a48 	vmov.f32	s1, s16
 8019d12:	4628      	mov	r0, r5
 8019d14:	f003 ffad 	bl	801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019d18:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8019d1c:	eeb0 3a40 	vmov.f32	s6, s0
 8019d20:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8019d24:	eef0 3a60 	vmov.f32	s7, s1
 8019d28:	eddd 1a08 	vldr	s3, [sp, #32]
 8019d2c:	eeb0 aa40 	vmov.f32	s20, s0
 8019d30:	ed9d 1a07 	vldr	s2, [sp, #28]
 8019d34:	eef0 aa60 	vmov.f32	s21, s1
 8019d38:	a80d      	add	r0, sp, #52	@ 0x34
 8019d3a:	eef0 0a69 	vmov.f32	s1, s19
 8019d3e:	eeb0 0a49 	vmov.f32	s0, s18
 8019d42:	f7ff f984 	bl	801904e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8019d46:	e7bd      	b.n	8019cc4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8019d48:	7f7b      	ldrb	r3, [r7, #29]
 8019d4a:	a80d      	add	r0, sp, #52	@ 0x34
 8019d4c:	7fb9      	ldrb	r1, [r7, #30]
 8019d4e:	4359      	muls	r1, r3
 8019d50:	1c4b      	adds	r3, r1, #1
 8019d52:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8019d56:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019d5a:	f00e ff8b 	bl	8028c74 <_ZN8touchgfx6Canvas6renderEh>
 8019d5e:	4b07      	ldr	r3, [pc, #28]	@ (8019d7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8019d60:	4604      	mov	r4, r0
 8019d62:	a812      	add	r0, sp, #72	@ 0x48
 8019d64:	930d      	str	r3, [sp, #52]	@ 0x34
 8019d66:	f000 fc93 	bl	801a690 <_ZN8touchgfx7OutlineD1Ev>
 8019d6a:	4620      	mov	r0, r4
 8019d6c:	b02a      	add	sp, #168	@ 0xa8
 8019d6e:	ecbd 8b06 	vpop	{d8-d10}
 8019d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d76:	bf00      	nop
 8019d78:	00000000 	.word	0x00000000
 8019d7c:	0802facc 	.word	0x0802facc

08019d80 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8019d80:	b410      	push	{r4}
 8019d82:	7f04      	ldrb	r4, [r0, #28]
 8019d84:	b11c      	cbz	r4, 8019d8e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8019d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d8a:	f7ff bee3 	b.w	8019b54 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8019d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d92:	f7ff bd6d 	b.w	8019870 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08019d96 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8019d96:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d9a:	4691      	mov	r9, r2
 8019d9c:	4602      	mov	r2, r0
 8019d9e:	4606      	mov	r6, r0
 8019da0:	4688      	mov	r8, r1
 8019da2:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8019da6:	469a      	mov	sl, r3
 8019da8:	ab02      	add	r3, sp, #8
 8019daa:	af02      	add	r7, sp, #8
 8019dac:	6851      	ldr	r1, [r2, #4]
 8019dae:	c303      	stmia	r3!, {r0, r1}
 8019db0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	dd2f      	ble.n	8019e18 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8019db8:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8019dbc:	2c00      	cmp	r4, #0
 8019dbe:	dd2b      	ble.n	8019e18 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8019dc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019dc4:	441c      	add	r4, r3
 8019dc6:	b2a4      	uxth	r4, r4
 8019dc8:	b225      	sxth	r5, r4
 8019dca:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019dce:	42ab      	cmp	r3, r5
 8019dd0:	da22      	bge.n	8019e18 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8019dd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019dd4:	464a      	mov	r2, r9
 8019dd6:	9701      	str	r7, [sp, #4]
 8019dd8:	4641      	mov	r1, r8
 8019dda:	9300      	str	r3, [sp, #0]
 8019ddc:	4630      	mov	r0, r6
 8019dde:	4653      	mov	r3, sl
 8019de0:	f7ff ffce 	bl	8019d80 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8019de4:	b940      	cbnz	r0, 8019df8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8019de6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019dea:	2b01      	cmp	r3, #1
 8019dec:	d004      	beq.n	8019df8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8019dee:	3301      	adds	r3, #1
 8019df0:	105b      	asrs	r3, r3, #1
 8019df2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019df6:	e7ec      	b.n	8019dd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8019df8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019dfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019e00:	4413      	add	r3, r2
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	441a      	add	r2, r3
 8019e06:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019e0a:	b212      	sxth	r2, r2
 8019e0c:	4295      	cmp	r5, r2
 8019e0e:	dadc      	bge.n	8019dca <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8019e10:	1ae3      	subs	r3, r4, r3
 8019e12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019e16:	e7d8      	b.n	8019dca <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8019e18:	b004      	add	sp, #16
 8019e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019e1e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8019e1e:	0c0b      	lsrs	r3, r1, #16
 8019e20:	60c1      	str	r1, [r0, #12]
 8019e22:	7481      	strb	r1, [r0, #18]
 8019e24:	7403      	strb	r3, [r0, #16]
 8019e26:	0a0b      	lsrs	r3, r1, #8
 8019e28:	7443      	strb	r3, [r0, #17]
 8019e2a:	4770      	bx	lr

08019e2c <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8019e2c:	f1a0 0008 	sub.w	r0, r0, #8
 8019e30:	e7f5      	b.n	8019e1e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08019e34 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8019e34:	b508      	push	{r3, lr}
 8019e36:	4b05      	ldr	r3, [pc, #20]	@ (8019e4c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8019e38:	6818      	ldr	r0, [r3, #0]
 8019e3a:	6803      	ldr	r3, [r0, #0]
 8019e3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8019e40:	4798      	blx	r3
 8019e42:	1e43      	subs	r3, r0, #1
 8019e44:	4258      	negs	r0, r3
 8019e46:	4158      	adcs	r0, r3
 8019e48:	bd08      	pop	{r3, pc}
 8019e4a:	bf00      	nop
 8019e4c:	24015c48 	.word	0x24015c48

08019e50 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8019e50:	4770      	bx	lr

08019e52 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8019e52:	3808      	subs	r0, #8
 8019e54:	4770      	bx	lr

08019e56 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8019e56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e5a:	b410      	push	{r4}
 8019e5c:	188c      	adds	r4, r1, r2
 8019e5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019e62:	68c2      	ldr	r2, [r0, #12]
 8019e64:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019e68:	4620      	mov	r0, r4
 8019e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e6e:	f7e7 bfb1 	b.w	8001dd4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08019e72 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8019e72:	f7e7 bfa5 	b.w	8001dc0 <_ZN8touchgfx5paint8tearDownEv>

08019e76 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8019e76:	b510      	push	{r4, lr}
 8019e78:	4604      	mov	r4, r0
 8019e7a:	2114      	movs	r1, #20
 8019e7c:	f00f fae6 	bl	802944c <_ZdlPvj>
 8019e80:	4620      	mov	r0, r4
 8019e82:	bd10      	pop	{r4, pc}

08019e84 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8019e84:	f1a0 0008 	sub.w	r0, r0, #8
 8019e88:	e7f5      	b.n	8019e76 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08019e8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8019e8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e94:	4411      	add	r1, r2
 8019e96:	7c42      	ldrb	r2, [r0, #17]
 8019e98:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8019e9c:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8019ea0:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8019ea4:	2a00      	cmp	r2, #0
 8019ea6:	f000 8084 	beq.w	8019fb2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8019eaa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019eae:	ed90 7a08 	vldr	s14, [r0, #32]
 8019eb2:	42a2      	cmp	r2, r4
 8019eb4:	68c3      	ldr	r3, [r0, #12]
 8019eb6:	db20      	blt.n	8019efa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8019eb8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019ebc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8019ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ec4:	bfc8      	it	gt
 8019ec6:	2200      	movgt	r2, #0
 8019ec8:	589a      	ldr	r2, [r3, r2]
 8019eca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019ece:	7c03      	ldrb	r3, [r0, #16]
 8019ed0:	fa5f fc82 	uxtb.w	ip, r2
 8019ed4:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8019ed8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8019edc:	440e      	add	r6, r1
 8019ede:	b36b      	cbz	r3, 8019f3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8019ee0:	2dff      	cmp	r5, #255	@ 0xff
 8019ee2:	d12b      	bne.n	8019f3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8019ee4:	42b1      	cmp	r1, r6
 8019ee6:	f080 8204 	bcs.w	801a2f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019eea:	f881 c000 	strb.w	ip, [r1]
 8019eee:	3103      	adds	r1, #3
 8019ef0:	f801 7c02 	strb.w	r7, [r1, #-2]
 8019ef4:	f801 4c01 	strb.w	r4, [r1, #-1]
 8019ef8:	e7f4      	b.n	8019ee4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8019efa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8019efe:	42a7      	cmp	r7, r4
 8019f00:	dc08      	bgt.n	8019f14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8019f02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019f06:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8019f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f0e:	bfd8      	it	le
 8019f10:	2200      	movle	r2, #0
 8019f12:	e7d9      	b.n	8019ec8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8019f14:	1aa2      	subs	r2, r4, r2
 8019f16:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019f1a:	ee07 2a90 	vmov	s15, r2
 8019f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f2e:	ee17 2a90 	vmov	r2, s15
 8019f32:	bfd8      	it	le
 8019f34:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8019f38:	0092      	lsls	r2, r2, #2
 8019f3a:	e7c5      	b.n	8019ec8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8019f3c:	0e12      	lsrs	r2, r2, #24
 8019f3e:	4355      	muls	r5, r2
 8019f40:	1c6a      	adds	r2, r5, #1
 8019f42:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8019f46:	122d      	asrs	r5, r5, #8
 8019f48:	43e8      	mvns	r0, r5
 8019f4a:	b2ad      	uxth	r5, r5
 8019f4c:	fb1c fc05 	smulbb	ip, ip, r5
 8019f50:	b2c0      	uxtb	r0, r0
 8019f52:	fb17 f705 	smulbb	r7, r7, r5
 8019f56:	fb14 f505 	smulbb	r5, r4, r5
 8019f5a:	fa1f fc8c 	uxth.w	ip, ip
 8019f5e:	b2bf      	uxth	r7, r7
 8019f60:	b2ad      	uxth	r5, r5
 8019f62:	428e      	cmp	r6, r1
 8019f64:	f101 0303 	add.w	r3, r1, #3
 8019f68:	f240 81c3 	bls.w	801a2f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019f6c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8019f70:	fb02 c200 	mla	r2, r2, r0, ip
 8019f74:	b292      	uxth	r2, r2
 8019f76:	1c51      	adds	r1, r2, #1
 8019f78:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019f7c:	1212      	asrs	r2, r2, #8
 8019f7e:	f803 2c03 	strb.w	r2, [r3, #-3]
 8019f82:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8019f86:	fb02 7200 	mla	r2, r2, r0, r7
 8019f8a:	b292      	uxth	r2, r2
 8019f8c:	1c51      	adds	r1, r2, #1
 8019f8e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019f92:	1212      	asrs	r2, r2, #8
 8019f94:	f803 2c02 	strb.w	r2, [r3, #-2]
 8019f98:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8019f9c:	fb02 5200 	mla	r2, r2, r0, r5
 8019fa0:	b292      	uxth	r2, r2
 8019fa2:	1c51      	adds	r1, r2, #1
 8019fa4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019fa8:	4619      	mov	r1, r3
 8019faa:	1212      	asrs	r2, r2, #8
 8019fac:	f803 2c01 	strb.w	r2, [r3, #-1]
 8019fb0:	e7d7      	b.n	8019f62 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8019fb2:	7c82      	ldrb	r2, [r0, #18]
 8019fb4:	2a00      	cmp	r2, #0
 8019fb6:	d047      	beq.n	801a048 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8019fb8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019fbc:	ee07 2a10 	vmov	s14, r2
 8019fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fc4:	ee07 3a90 	vmov	s15, r3
 8019fc8:	461a      	mov	r2, r3
 8019fca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019fce:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fd6:	f200 808e 	bhi.w	801a0f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8019fda:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019fde:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8019fe2:	68c7      	ldr	r7, [r0, #12]
 8019fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fe8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019fec:	ee06 6a90 	vmov	s13, r6
 8019ff0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019ff4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ffc:	bf4a      	itet	mi
 8019ffe:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801a002:	4634      	movpl	r4, r6
 801a004:	ee17 4a90 	vmovmi	r4, s15
 801a008:	edd0 7a08 	vldr	s15, [r0, #32]
 801a00c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a010:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 801a014:	448e      	add	lr, r1
 801a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a01a:	bfc8      	it	gt
 801a01c:	2200      	movgt	r2, #0
 801a01e:	58bf      	ldr	r7, [r7, r2]
 801a020:	7c02      	ldrb	r2, [r0, #16]
 801a022:	fa5f f987 	uxtb.w	r9, r7
 801a026:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801a02a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 801a02e:	b31a      	cbz	r2, 801a078 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801a030:	2dff      	cmp	r5, #255	@ 0xff
 801a032:	d121      	bne.n	801a078 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801a034:	4571      	cmp	r1, lr
 801a036:	d25d      	bcs.n	801a0f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801a038:	f881 9000 	strb.w	r9, [r1]
 801a03c:	3103      	adds	r1, #3
 801a03e:	f801 8c02 	strb.w	r8, [r1, #-2]
 801a042:	f801 cc01 	strb.w	ip, [r1, #-1]
 801a046:	e7f5      	b.n	801a034 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801a048:	ee07 4a90 	vmov	s15, r4
 801a04c:	ed90 7a06 	vldr	s14, [r0, #24]
 801a050:	edd0 6a05 	vldr	s13, [r0, #20]
 801a054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a058:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a05c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a060:	edd0 7a08 	vldr	s15, [r0, #32]
 801a064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a06c:	bf44      	itt	mi
 801a06e:	edd0 7a07 	vldrmi	s15, [r0, #28]
 801a072:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801a076:	e7a5      	b.n	8019fc4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801a078:	0e3f      	lsrs	r7, r7, #24
 801a07a:	436f      	muls	r7, r5
 801a07c:	1c7a      	adds	r2, r7, #1
 801a07e:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801a082:	1212      	asrs	r2, r2, #8
 801a084:	ea6f 0a02 	mvn.w	sl, r2
 801a088:	b292      	uxth	r2, r2
 801a08a:	fb19 f902 	smulbb	r9, r9, r2
 801a08e:	fa5f fa8a 	uxtb.w	sl, sl
 801a092:	fb18 f802 	smulbb	r8, r8, r2
 801a096:	fb1c fc02 	smulbb	ip, ip, r2
 801a09a:	fa1f f989 	uxth.w	r9, r9
 801a09e:	fa1f f888 	uxth.w	r8, r8
 801a0a2:	fa1f fc8c 	uxth.w	ip, ip
 801a0a6:	458e      	cmp	lr, r1
 801a0a8:	f101 0203 	add.w	r2, r1, #3
 801a0ac:	d922      	bls.n	801a0f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801a0ae:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801a0b2:	fb01 910a 	mla	r1, r1, sl, r9
 801a0b6:	b289      	uxth	r1, r1
 801a0b8:	1c4f      	adds	r7, r1, #1
 801a0ba:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a0be:	1209      	asrs	r1, r1, #8
 801a0c0:	f802 1c03 	strb.w	r1, [r2, #-3]
 801a0c4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801a0c8:	fb01 810a 	mla	r1, r1, sl, r8
 801a0cc:	b289      	uxth	r1, r1
 801a0ce:	1c4f      	adds	r7, r1, #1
 801a0d0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a0d4:	1209      	asrs	r1, r1, #8
 801a0d6:	f802 1c02 	strb.w	r1, [r2, #-2]
 801a0da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801a0de:	fb01 c10a 	mla	r1, r1, sl, ip
 801a0e2:	b289      	uxth	r1, r1
 801a0e4:	1c4f      	adds	r7, r1, #1
 801a0e6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a0ea:	1209      	asrs	r1, r1, #8
 801a0ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a0f0:	4611      	mov	r1, r2
 801a0f2:	e7d8      	b.n	801a0a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 801a0f4:	191a      	adds	r2, r3, r4
 801a0f6:	4433      	add	r3, r6
 801a0f8:	b21b      	sxth	r3, r3
 801a0fa:	4293      	cmp	r3, r2
 801a0fc:	f340 80f9 	ble.w	801a2f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a100:	edd0 7a07 	vldr	s15, [r0, #28]
 801a104:	ee06 2a90 	vmov	s13, r2
 801a108:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a10c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a110:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a118:	f340 80b0 	ble.w	801a27c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 801a11c:	ee06 3a10 	vmov	s12, r3
 801a120:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a124:	eddf 5a74 	vldr	s11, [pc, #464]	@ 801a2f8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 801a128:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a12c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a130:	ed90 6a08 	vldr	s12, [r0, #32]
 801a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a138:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a13c:	bfd6      	itet	le
 801a13e:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801a142:	469c      	movgt	ip, r3
 801a144:	ee17 ca90 	vmovle	ip, s15
 801a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a14c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 801a2fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 801a150:	ebac 0202 	sub.w	r2, ip, r2
 801a154:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801a158:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a15c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a160:	188c      	adds	r4, r1, r2
 801a162:	7c02      	ldrb	r2, [r0, #16]
 801a164:	b1d2      	cbz	r2, 801a19c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801a166:	2dff      	cmp	r5, #255	@ 0xff
 801a168:	d118      	bne.n	801a19c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801a16a:	42a1      	cmp	r1, r4
 801a16c:	d261      	bcs.n	801a232 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801a16e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a172:	68c6      	ldr	r6, [r0, #12]
 801a174:	3103      	adds	r1, #3
 801a176:	ee17 7a10 	vmov	r7, s14
 801a17a:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801a17e:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801a182:	f801 6c03 	strb.w	r6, [r1, #-3]
 801a186:	7856      	ldrb	r6, [r2, #1]
 801a188:	f801 6c02 	strb.w	r6, [r1, #-2]
 801a18c:	7892      	ldrb	r2, [r2, #2]
 801a18e:	f801 2c01 	strb.w	r2, [r1, #-1]
 801a192:	ed90 7a08 	vldr	s14, [r0, #32]
 801a196:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a19a:	e7e6      	b.n	801a16a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 801a19c:	68c2      	ldr	r2, [r0, #12]
 801a19e:	428c      	cmp	r4, r1
 801a1a0:	f101 0e03 	add.w	lr, r1, #3
 801a1a4:	d945      	bls.n	801a232 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801a1a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a1aa:	ee17 9a10 	vmov	r9, s14
 801a1ae:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801a1b2:	f898 7003 	ldrb.w	r7, [r8, #3]
 801a1b6:	fb07 f605 	mul.w	r6, r7, r5
 801a1ba:	1c77      	adds	r7, r6, #1
 801a1bc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801a1c0:	123f      	asrs	r7, r7, #8
 801a1c2:	b2b9      	uxth	r1, r7
 801a1c4:	43ff      	mvns	r7, r7
 801a1c6:	b2fe      	uxtb	r6, r7
 801a1c8:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 801a1cc:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801a1d0:	fb19 f906 	smulbb	r9, r9, r6
 801a1d4:	fb07 9701 	mla	r7, r7, r1, r9
 801a1d8:	b2bf      	uxth	r7, r7
 801a1da:	f107 0901 	add.w	r9, r7, #1
 801a1de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a1e2:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801a1e6:	fb19 f906 	smulbb	r9, r9, r6
 801a1ea:	123f      	asrs	r7, r7, #8
 801a1ec:	f80e 7c03 	strb.w	r7, [lr, #-3]
 801a1f0:	f898 7001 	ldrb.w	r7, [r8, #1]
 801a1f4:	fb07 9701 	mla	r7, r7, r1, r9
 801a1f8:	b2bf      	uxth	r7, r7
 801a1fa:	f107 0901 	add.w	r9, r7, #1
 801a1fe:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a202:	123f      	asrs	r7, r7, #8
 801a204:	f80e 7c02 	strb.w	r7, [lr, #-2]
 801a208:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 801a20c:	f898 8002 	ldrb.w	r8, [r8, #2]
 801a210:	fb17 f606 	smulbb	r6, r7, r6
 801a214:	fb08 6601 	mla	r6, r8, r1, r6
 801a218:	b2b6      	uxth	r6, r6
 801a21a:	1c71      	adds	r1, r6, #1
 801a21c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801a220:	4671      	mov	r1, lr
 801a222:	1236      	asrs	r6, r6, #8
 801a224:	f80e 6c01 	strb.w	r6, [lr, #-1]
 801a228:	ed90 7a08 	vldr	s14, [r0, #32]
 801a22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a230:	e7b5      	b.n	801a19e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801a232:	4563      	cmp	r3, ip
 801a234:	dd5d      	ble.n	801a2f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a236:	edd0 7a08 	vldr	s15, [r0, #32]
 801a23a:	eba3 030c 	sub.w	r3, r3, ip
 801a23e:	68c4      	ldr	r4, [r0, #12]
 801a240:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801a244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a24c:	7c00      	ldrb	r0, [r0, #16]
 801a24e:	440b      	add	r3, r1
 801a250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a254:	bfd8      	it	le
 801a256:	2200      	movle	r2, #0
 801a258:	58a2      	ldr	r2, [r4, r2]
 801a25a:	b2d4      	uxtb	r4, r2
 801a25c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 801a260:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801a264:	b160      	cbz	r0, 801a280 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801a266:	2dff      	cmp	r5, #255	@ 0xff
 801a268:	d10a      	bne.n	801a280 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801a26a:	4299      	cmp	r1, r3
 801a26c:	d241      	bcs.n	801a2f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a26e:	700c      	strb	r4, [r1, #0]
 801a270:	3103      	adds	r1, #3
 801a272:	f801 cc02 	strb.w	ip, [r1, #-2]
 801a276:	f801 7c01 	strb.w	r7, [r1, #-1]
 801a27a:	e7f6      	b.n	801a26a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 801a27c:	4694      	mov	ip, r2
 801a27e:	e7da      	b.n	801a236 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 801a280:	0e12      	lsrs	r2, r2, #24
 801a282:	436a      	muls	r2, r5
 801a284:	1c55      	adds	r5, r2, #1
 801a286:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801a28a:	122d      	asrs	r5, r5, #8
 801a28c:	43ee      	mvns	r6, r5
 801a28e:	b2ad      	uxth	r5, r5
 801a290:	fb14 f405 	smulbb	r4, r4, r5
 801a294:	b2f6      	uxtb	r6, r6
 801a296:	fb1c f005 	smulbb	r0, ip, r5
 801a29a:	fb17 f505 	smulbb	r5, r7, r5
 801a29e:	b2a4      	uxth	r4, r4
 801a2a0:	b280      	uxth	r0, r0
 801a2a2:	b2ad      	uxth	r5, r5
 801a2a4:	428b      	cmp	r3, r1
 801a2a6:	f101 0203 	add.w	r2, r1, #3
 801a2aa:	d922      	bls.n	801a2f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801a2ac:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801a2b0:	fb01 4106 	mla	r1, r1, r6, r4
 801a2b4:	b289      	uxth	r1, r1
 801a2b6:	1c4f      	adds	r7, r1, #1
 801a2b8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a2bc:	1209      	asrs	r1, r1, #8
 801a2be:	f802 1c03 	strb.w	r1, [r2, #-3]
 801a2c2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801a2c6:	fb01 0106 	mla	r1, r1, r6, r0
 801a2ca:	b289      	uxth	r1, r1
 801a2cc:	1c4f      	adds	r7, r1, #1
 801a2ce:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a2d2:	1209      	asrs	r1, r1, #8
 801a2d4:	f802 1c02 	strb.w	r1, [r2, #-2]
 801a2d8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801a2dc:	fb01 5106 	mla	r1, r1, r6, r5
 801a2e0:	b289      	uxth	r1, r1
 801a2e2:	1c4f      	adds	r7, r1, #1
 801a2e4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a2e8:	1209      	asrs	r1, r1, #8
 801a2ea:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a2ee:	4611      	mov	r1, r2
 801a2f0:	e7d8      	b.n	801a2a4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f6:	bf00      	nop
 801a2f8:	447ffffe 	.word	0x447ffffe
 801a2fc:	00000000 	.word	0x00000000

0801a300 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 801a300:	4770      	bx	lr

0801a302 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801a302:	4770      	bx	lr

0801a304 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801a304:	b510      	push	{r4, lr}
 801a306:	4604      	mov	r4, r0
 801a308:	2124      	movs	r1, #36	@ 0x24
 801a30a:	f00f f89f 	bl	802944c <_ZdlPvj>
 801a30e:	4620      	mov	r0, r4
 801a310:	bd10      	pop	{r4, pc}
	...

0801a314 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a316:	6803      	ldr	r3, [r0, #0]
 801a318:	460d      	mov	r5, r1
 801a31a:	4604      	mov	r4, r0
 801a31c:	4601      	mov	r1, r0
 801a31e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a320:	a802      	add	r0, sp, #8
 801a322:	4798      	blx	r3
 801a324:	6828      	ldr	r0, [r5, #0]
 801a326:	6869      	ldr	r1, [r5, #4]
 801a328:	466b      	mov	r3, sp
 801a32a:	c303      	stmia	r3!, {r0, r1}
 801a32c:	4668      	mov	r0, sp
 801a32e:	4619      	mov	r1, r3
 801a330:	f7fd fcea 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801a334:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a336:	b188      	cbz	r0, 801a35c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a338:	6803      	ldr	r3, [r0, #0]
 801a33a:	1d21      	adds	r1, r4, #4
 801a33c:	68db      	ldr	r3, [r3, #12]
 801a33e:	4798      	blx	r3
 801a340:	b160      	cbz	r0, 801a35c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a342:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a346:	2b00      	cmp	r3, #0
 801a348:	dd08      	ble.n	801a35c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a34a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801a34e:	2d00      	cmp	r5, #0
 801a350:	dd04      	ble.n	801a35c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a352:	4a2b      	ldr	r2, [pc, #172]	@ (801a400 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801a354:	7812      	ldrb	r2, [r2, #0]
 801a356:	b11a      	cbz	r2, 801a360 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801a358:	2a01      	cmp	r2, #1
 801a35a:	d029      	beq.n	801a3b0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801a35c:	b004      	add	sp, #16
 801a35e:	bd70      	pop	{r4, r5, r6, pc}
 801a360:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a364:	441d      	add	r5, r3
 801a366:	b2ad      	uxth	r5, r5
 801a368:	b22e      	sxth	r6, r5
 801a36a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a36e:	42b3      	cmp	r3, r6
 801a370:	daf4      	bge.n	801a35c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a372:	6823      	ldr	r3, [r4, #0]
 801a374:	4669      	mov	r1, sp
 801a376:	4620      	mov	r0, r4
 801a378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a37a:	4798      	blx	r3
 801a37c:	b940      	cbnz	r0, 801a390 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801a37e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a382:	2b01      	cmp	r3, #1
 801a384:	d004      	beq.n	801a390 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801a386:	3301      	adds	r3, #1
 801a388:	105b      	asrs	r3, r3, #1
 801a38a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a38e:	e7f0      	b.n	801a372 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a390:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a394:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a398:	4413      	add	r3, r2
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	441a      	add	r2, r3
 801a39e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a3a2:	b212      	sxth	r2, r2
 801a3a4:	4296      	cmp	r6, r2
 801a3a6:	dae0      	bge.n	801a36a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801a3a8:	1aeb      	subs	r3, r5, r3
 801a3aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3ae:	e7dc      	b.n	801a36a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801a3b0:	f8bd 5000 	ldrh.w	r5, [sp]
 801a3b4:	441d      	add	r5, r3
 801a3b6:	b2ad      	uxth	r5, r5
 801a3b8:	b22e      	sxth	r6, r5
 801a3ba:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a3be:	42b3      	cmp	r3, r6
 801a3c0:	dacc      	bge.n	801a35c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a3c2:	6823      	ldr	r3, [r4, #0]
 801a3c4:	4669      	mov	r1, sp
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3ca:	4798      	blx	r3
 801a3cc:	b940      	cbnz	r0, 801a3e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801a3ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a3d2:	2b01      	cmp	r3, #1
 801a3d4:	d004      	beq.n	801a3e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	105b      	asrs	r3, r3, #1
 801a3da:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a3de:	e7f0      	b.n	801a3c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801a3e0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a3e4:	f8bd 3000 	ldrh.w	r3, [sp]
 801a3e8:	4413      	add	r3, r2
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	441a      	add	r2, r3
 801a3ee:	f8ad 3000 	strh.w	r3, [sp]
 801a3f2:	b212      	sxth	r2, r2
 801a3f4:	4296      	cmp	r6, r2
 801a3f6:	dae0      	bge.n	801a3ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801a3f8:	1aeb      	subs	r3, r5, r3
 801a3fa:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a3fe:	e7dc      	b.n	801a3ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801a400:	24015c40 	.word	0x24015c40

0801a404 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a406:	6803      	ldr	r3, [r0, #0]
 801a408:	4604      	mov	r4, r0
 801a40a:	4601      	mov	r1, r0
 801a40c:	4668      	mov	r0, sp
 801a40e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a410:	4798      	blx	r3
 801a412:	2100      	movs	r1, #0
 801a414:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801a418:	4668      	mov	r0, sp
 801a41a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a41e:	9102      	str	r1, [sp, #8]
 801a420:	a902      	add	r1, sp, #8
 801a422:	f8ad 200c 	strh.w	r2, [sp, #12]
 801a426:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a42a:	f7fd fc6d 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801a42e:	6823      	ldr	r3, [r4, #0]
 801a430:	4669      	mov	r1, sp
 801a432:	4620      	mov	r0, r4
 801a434:	691b      	ldr	r3, [r3, #16]
 801a436:	4798      	blx	r3
 801a438:	b004      	add	sp, #16
 801a43a:	bd10      	pop	{r4, pc}

0801a43c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a43c:	2101      	movs	r1, #1
 801a43e:	2200      	movs	r2, #0
 801a440:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801a444:	490a      	ldr	r1, [pc, #40]	@ (801a470 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801a446:	8082      	strh	r2, [r0, #4]
 801a448:	6001      	str	r1, [r0, #0]
 801a44a:	21ff      	movs	r1, #255	@ 0xff
 801a44c:	80c2      	strh	r2, [r0, #6]
 801a44e:	8102      	strh	r2, [r0, #8]
 801a450:	8142      	strh	r2, [r0, #10]
 801a452:	8182      	strh	r2, [r0, #12]
 801a454:	81c2      	strh	r2, [r0, #14]
 801a456:	8202      	strh	r2, [r0, #16]
 801a458:	8242      	strh	r2, [r0, #18]
 801a45a:	61c2      	str	r2, [r0, #28]
 801a45c:	8402      	strh	r2, [r0, #32]
 801a45e:	8442      	strh	r2, [r0, #34]	@ 0x22
 801a460:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801a464:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801a468:	6282      	str	r2, [r0, #40]	@ 0x28
 801a46a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a46e:	4770      	bx	lr
 801a470:	0802f5f8 	.word	0x0802f5f8

0801a474 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a474:	2300      	movs	r3, #0
 801a476:	8083      	strh	r3, [r0, #4]
 801a478:	80c3      	strh	r3, [r0, #6]
 801a47a:	8003      	strh	r3, [r0, #0]
 801a47c:	8043      	strh	r3, [r0, #2]
 801a47e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801a482:	2bff      	cmp	r3, #255	@ 0xff
 801a484:	bf01      	itttt	eq
 801a486:	890b      	ldrheq	r3, [r1, #8]
 801a488:	8083      	strheq	r3, [r0, #4]
 801a48a:	894b      	ldrheq	r3, [r1, #10]
 801a48c:	80c3      	strheq	r3, [r0, #6]
 801a48e:	4770      	bx	lr

0801a490 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a492:	4604      	mov	r4, r0
 801a494:	466b      	mov	r3, sp
 801a496:	6808      	ldr	r0, [r1, #0]
 801a498:	6849      	ldr	r1, [r1, #4]
 801a49a:	c303      	stmia	r3!, {r0, r1}
 801a49c:	6823      	ldr	r3, [r4, #0]
 801a49e:	4669      	mov	r1, sp
 801a4a0:	4620      	mov	r0, r4
 801a4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4a4:	4798      	blx	r3
 801a4a6:	4b08      	ldr	r3, [pc, #32]	@ (801a4c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801a4ae:	b10a      	cbz	r2, 801a4b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a4b0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801a4b2:	b900      	cbnz	r0, 801a4b6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a4b4:	6898      	ldr	r0, [r3, #8]
 801a4b6:	6803      	ldr	r3, [r0, #0]
 801a4b8:	4669      	mov	r1, sp
 801a4ba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801a4bc:	6a1d      	ldr	r5, [r3, #32]
 801a4be:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801a4c2:	47a8      	blx	r5
 801a4c4:	b003      	add	sp, #12
 801a4c6:	bd30      	pop	{r4, r5, pc}
 801a4c8:	24015c48 	.word	0x24015c48

0801a4cc <_ZN8touchgfx3BoxD1Ev>:
 801a4cc:	4770      	bx	lr

0801a4ce <_ZN8touchgfx3BoxD0Ev>:
 801a4ce:	b510      	push	{r4, lr}
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	212c      	movs	r1, #44	@ 0x2c
 801a4d4:	f00e ffba 	bl	802944c <_ZdlPvj>
 801a4d8:	4620      	mov	r0, r4
 801a4da:	bd10      	pop	{r4, pc}

0801a4dc <_ZNK8touchgfx3Box17invalidateContentEv>:
 801a4dc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801a4e0:	b12a      	cbz	r2, 801a4ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a4e2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801a4e6:	b112      	cbz	r2, 801a4ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a4e8:	6803      	ldr	r3, [r0, #0]
 801a4ea:	695b      	ldr	r3, [r3, #20]
 801a4ec:	4718      	bx	r3
 801a4ee:	4770      	bx	lr

0801a4f0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801a4f0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801a4f4:	4770      	bx	lr

0801a4f6 <_ZN8touchgfx6ButtonD1Ev>:
 801a4f6:	4770      	bx	lr

0801a4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801a4f8:	b570      	push	{r4, r5, r6, lr}
 801a4fa:	880b      	ldrh	r3, [r1, #0]
 801a4fc:	4605      	mov	r5, r0
 801a4fe:	4604      	mov	r4, r0
 801a500:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801a502:	8813      	ldrh	r3, [r2, #0]
 801a504:	f825 3f30 	strh.w	r3, [r5, #48]!
 801a508:	4628      	mov	r0, r5
 801a50a:	f004 ffd7 	bl	801f4bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a50e:	4606      	mov	r6, r0
 801a510:	4628      	mov	r0, r5
 801a512:	f005 f807 	bl	801f524 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a516:	6823      	ldr	r3, [r4, #0]
 801a518:	4605      	mov	r5, r0
 801a51a:	4631      	mov	r1, r6
 801a51c:	4620      	mov	r0, r4
 801a51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a520:	4798      	blx	r3
 801a522:	6823      	ldr	r3, [r4, #0]
 801a524:	4629      	mov	r1, r5
 801a526:	4620      	mov	r0, r4
 801a528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a52a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a52e:	4718      	bx	r3

0801a530 <_ZN8touchgfx6ButtonD0Ev>:
 801a530:	b510      	push	{r4, lr}
 801a532:	4604      	mov	r4, r0
 801a534:	2134      	movs	r1, #52	@ 0x34
 801a536:	f00e ff89 	bl	802944c <_ZdlPvj>
 801a53a:	4620      	mov	r0, r4
 801a53c:	bd10      	pop	{r4, pc}

0801a53e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801a53e:	b510      	push	{r4, lr}
 801a540:	4604      	mov	r4, r0
 801a542:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801a544:	b150      	cbz	r0, 801a55c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a546:	6803      	ldr	r3, [r0, #0]
 801a548:	68db      	ldr	r3, [r3, #12]
 801a54a:	4798      	blx	r3
 801a54c:	b130      	cbz	r0, 801a55c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a54e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a550:	4621      	mov	r1, r4
 801a552:	6803      	ldr	r3, [r0, #0]
 801a554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a558:	689b      	ldr	r3, [r3, #8]
 801a55a:	4718      	bx	r3
 801a55c:	bd10      	pop	{r4, pc}

0801a55e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801a55e:	b510      	push	{r4, lr}
 801a560:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801a564:	4604      	mov	r4, r0
 801a566:	2bff      	cmp	r3, #255	@ 0xff
 801a568:	d006      	beq.n	801a578 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801a56a:	2300      	movs	r3, #0
 801a56c:	8003      	strh	r3, [r0, #0]
 801a56e:	8043      	strh	r3, [r0, #2]
 801a570:	8083      	strh	r3, [r0, #4]
 801a572:	80c3      	strh	r3, [r0, #6]
 801a574:	4620      	mov	r0, r4
 801a576:	bd10      	pop	{r4, pc}
 801a578:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801a57c:	b11b      	cbz	r3, 801a586 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801a57e:	3130      	adds	r1, #48	@ 0x30
 801a580:	f005 f804 	bl	801f58c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a584:	e7f6      	b.n	801a574 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801a586:	312e      	adds	r1, #46	@ 0x2e
 801a588:	e7fa      	b.n	801a580 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801a58c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801a58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a590:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801a594:	b08a      	sub	sp, #40	@ 0x28
 801a596:	4604      	mov	r4, r0
 801a598:	4688      	mov	r8, r1
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d066      	beq.n	801a66c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801a59e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801a5a0:	a805      	add	r0, sp, #20
 801a5a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5a6:	f004 ff89 	bl	801f4bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a5aa:	4607      	mov	r7, r0
 801a5ac:	a805      	add	r0, sp, #20
 801a5ae:	f004 ffb9 	bl	801f524 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a5b2:	f9b8 6000 	ldrsh.w	r6, [r8]
 801a5b6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	4432      	add	r2, r6
 801a5be:	9306      	str	r3, [sp, #24]
 801a5c0:	b292      	uxth	r2, r2
 801a5c2:	fa0f fc82 	sxth.w	ip, r2
 801a5c6:	459c      	cmp	ip, r3
 801a5c8:	dd52      	ble.n	801a670 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a5ca:	42b7      	cmp	r7, r6
 801a5cc:	dd50      	ble.n	801a670 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a5ce:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801a5d2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a5d6:	442b      	add	r3, r5
 801a5d8:	b29b      	uxth	r3, r3
 801a5da:	b219      	sxth	r1, r3
 801a5dc:	2900      	cmp	r1, #0
 801a5de:	dd47      	ble.n	801a670 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a5e0:	42a8      	cmp	r0, r5
 801a5e2:	dd45      	ble.n	801a670 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801a5e4:	4567      	cmp	r7, ip
 801a5e6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801a5ea:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a5ee:	bfb8      	it	lt
 801a5f0:	b2ba      	uxthlt	r2, r7
 801a5f2:	4288      	cmp	r0, r1
 801a5f4:	f8ad 6018 	strh.w	r6, [sp, #24]
 801a5f8:	bfb8      	it	lt
 801a5fa:	b283      	uxthlt	r3, r0
 801a5fc:	1b92      	subs	r2, r2, r6
 801a5fe:	f8ad 501a 	strh.w	r5, [sp, #26]
 801a602:	1b5b      	subs	r3, r3, r5
 801a604:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a608:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a60c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a610:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a614:	429a      	cmp	r2, r3
 801a616:	d026      	beq.n	801a666 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801a618:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	dd22      	ble.n	801a666 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801a620:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a624:	2b00      	cmp	r3, #0
 801a626:	dd1e      	ble.n	801a666 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801a628:	2300      	movs	r3, #0
 801a62a:	a908      	add	r1, sp, #32
 801a62c:	4620      	mov	r0, r4
 801a62e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801a632:	6823      	ldr	r3, [r4, #0]
 801a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a636:	4798      	blx	r3
 801a638:	4b0f      	ldr	r3, [pc, #60]	@ (801a678 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801a640:	b10a      	cbz	r2, 801a646 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801a642:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801a644:	b900      	cbnz	r0, 801a648 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801a646:	6898      	ldr	r0, [r3, #8]
 801a648:	2501      	movs	r5, #1
 801a64a:	6801      	ldr	r1, [r0, #0]
 801a64c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a650:	9502      	str	r5, [sp, #8]
 801a652:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801a656:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a65a:	9401      	str	r4, [sp, #4]
 801a65c:	ac06      	add	r4, sp, #24
 801a65e:	9400      	str	r4, [sp, #0]
 801a660:	688c      	ldr	r4, [r1, #8]
 801a662:	a905      	add	r1, sp, #20
 801a664:	47a0      	blx	r4
 801a666:	b00a      	add	sp, #40	@ 0x28
 801a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a66c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801a66e:	e797      	b.n	801a5a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801a670:	2300      	movs	r3, #0
 801a672:	9307      	str	r3, [sp, #28]
 801a674:	e7ca      	b.n	801a60c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801a676:	bf00      	nop
 801a678:	24015c48 	.word	0x24015c48

0801a67c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801a67c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 801a680:	b12a      	cbz	r2, 801a68e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801a682:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801a686:	b112      	cbz	r2, 801a68e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801a688:	6803      	ldr	r3, [r0, #0]
 801a68a:	695b      	ldr	r3, [r3, #20]
 801a68c:	4718      	bx	r3
 801a68e:	4770      	bx	lr

0801a690 <_ZN8touchgfx7OutlineD1Ev>:
 801a690:	4770      	bx	lr

0801a692 <_ZN8touchgfx7OutlineD0Ev>:
 801a692:	b510      	push	{r4, lr}
 801a694:	4604      	mov	r4, r0
 801a696:	2130      	movs	r1, #48	@ 0x30
 801a698:	f00e fed8 	bl	802944c <_ZdlPvj>
 801a69c:	4620      	mov	r0, r4
 801a69e:	bd10      	pop	{r4, pc}

0801a6a0 <_ZN8touchgfx7Outline5resetEv>:
 801a6a0:	b510      	push	{r4, lr}
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	f000 fe72 	bl	801b38c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801a6a8:	60e0      	str	r0, [r4, #12]
 801a6aa:	f000 fe75 	bl	801b398 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801a6ae:	68e3      	ldr	r3, [r4, #12]
 801a6b0:	08c0      	lsrs	r0, r0, #3
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801a6b8:	6123      	str	r3, [r4, #16]
 801a6ba:	3801      	subs	r0, #1
 801a6bc:	60a2      	str	r2, [r4, #8]
 801a6be:	6060      	str	r0, [r4, #4]
 801a6c0:	8019      	strh	r1, [r3, #0]
 801a6c2:	8059      	strh	r1, [r3, #2]
 801a6c4:	809a      	strh	r2, [r3, #4]
 801a6c6:	80da      	strh	r2, [r3, #6]
 801a6c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a6ca:	f023 0301 	bic.w	r3, r3, #1
 801a6ce:	f043 0302 	orr.w	r3, r3, #2
 801a6d2:	6263      	str	r3, [r4, #36]	@ 0x24
 801a6d4:	bd10      	pop	{r4, pc}
	...

0801a6d8 <_ZN8touchgfx7OutlineC1Ev>:
 801a6d8:	4b0a      	ldr	r3, [pc, #40]	@ (801a704 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801a6da:	b510      	push	{r4, lr}
 801a6dc:	6003      	str	r3, [r0, #0]
 801a6de:	2300      	movs	r3, #0
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	6243      	str	r3, [r0, #36]	@ 0x24
 801a6e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801a6e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a6ec:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801a6f0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801a6f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a6f8:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801a6fc:	f7ff ffd0 	bl	801a6a0 <_ZN8touchgfx7Outline5resetEv>
 801a700:	4620      	mov	r0, r4
 801a702:	bd10      	pop	{r4, pc}
 801a704:	0802f74c 	.word	0x0802f74c

0801a708 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a70c:	b093      	sub	sp, #76	@ 0x4c
 801a70e:	1156      	asrs	r6, r2, #5
 801a710:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801a712:	9305      	str	r3, [sp, #20]
 801a714:	1153      	asrs	r3, r2, #5
 801a716:	f004 051f 	and.w	r5, r4, #31
 801a71a:	9303      	str	r3, [sp, #12]
 801a71c:	1163      	asrs	r3, r4, #5
 801a71e:	9504      	str	r5, [sp, #16]
 801a720:	1165      	asrs	r5, r4, #5
 801a722:	9306      	str	r3, [sp, #24]
 801a724:	f002 031f 	and.w	r3, r2, #31
 801a728:	42ae      	cmp	r6, r5
 801a72a:	f040 80f4 	bne.w	801a916 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801a72e:	9c04      	ldr	r4, [sp, #16]
 801a730:	9a05      	ldr	r2, [sp, #20]
 801a732:	42a3      	cmp	r3, r4
 801a734:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801a738:	6902      	ldr	r2, [r0, #16]
 801a73a:	d125      	bne.n	801a788 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 801a73c:	f9b2 3000 	ldrsh.w	r3, [r2]
 801a740:	459e      	cmp	lr, r3
 801a742:	d103      	bne.n	801a74c <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801a744:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801a748:	429e      	cmp	r6, r3
 801a74a:	d035      	beq.n	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a74c:	88d1      	ldrh	r1, [r2, #6]
 801a74e:	8893      	ldrh	r3, [r2, #4]
 801a750:	430b      	orrs	r3, r1
 801a752:	d010      	beq.n	801a776 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801a754:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	db0c      	blt.n	801a776 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801a75c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801a75e:	428b      	cmp	r3, r1
 801a760:	da09      	bge.n	801a776 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801a762:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801a766:	428b      	cmp	r3, r1
 801a768:	f103 0301 	add.w	r3, r3, #1
 801a76c:	bf38      	it	cc
 801a76e:	3208      	addcc	r2, #8
 801a770:	6083      	str	r3, [r0, #8]
 801a772:	bf38      	it	cc
 801a774:	6102      	strcc	r2, [r0, #16]
 801a776:	6903      	ldr	r3, [r0, #16]
 801a778:	9a03      	ldr	r2, [sp, #12]
 801a77a:	f8a3 e000 	strh.w	lr, [r3]
 801a77e:	805a      	strh	r2, [r3, #2]
 801a780:	2200      	movs	r2, #0
 801a782:	809a      	strh	r2, [r3, #4]
 801a784:	80da      	strh	r2, [r3, #6]
 801a786:	e017      	b.n	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a788:	9c05      	ldr	r4, [sp, #20]
 801a78a:	114e      	asrs	r6, r1, #5
 801a78c:	f001 0c1f 	and.w	ip, r1, #31
 801a790:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801a794:	f004 041f 	and.w	r4, r4, #31
 801a798:	4576      	cmp	r6, lr
 801a79a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801a79e:	9402      	str	r4, [sp, #8]
 801a7a0:	9c04      	ldr	r4, [sp, #16]
 801a7a2:	eba4 0403 	sub.w	r4, r4, r3
 801a7a6:	d10a      	bne.n	801a7be <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801a7a8:	9b02      	ldr	r3, [sp, #8]
 801a7aa:	44a0      	add	r8, r4
 801a7ac:	449c      	add	ip, r3
 801a7ae:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a7b2:	fb04 a40c 	mla	r4, r4, ip, sl
 801a7b6:	80d4      	strh	r4, [r2, #6]
 801a7b8:	b013      	add	sp, #76	@ 0x4c
 801a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7be:	9d05      	ldr	r5, [sp, #20]
 801a7c0:	1a69      	subs	r1, r5, r1
 801a7c2:	bf51      	iteee	pl
 801a7c4:	f1cc 0520 	rsbpl	r5, ip, #32
 801a7c8:	fb04 f40c 	mulmi.w	r4, r4, ip
 801a7cc:	4249      	negmi	r1, r1
 801a7ce:	2500      	movmi	r5, #0
 801a7d0:	bf5d      	ittte	pl
 801a7d2:	436c      	mulpl	r4, r5
 801a7d4:	2520      	movpl	r5, #32
 801a7d6:	f04f 0901 	movpl.w	r9, #1
 801a7da:	f04f 39ff 	movmi.w	r9, #4294967295
 801a7de:	9501      	str	r5, [sp, #4]
 801a7e0:	9f01      	ldr	r7, [sp, #4]
 801a7e2:	444e      	add	r6, r9
 801a7e4:	fb94 f5f1 	sdiv	r5, r4, r1
 801a7e8:	fb01 4415 	mls	r4, r1, r5, r4
 801a7ec:	44bc      	add	ip, r7
 801a7ee:	2c00      	cmp	r4, #0
 801a7f0:	bfbc      	itt	lt
 801a7f2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801a7f6:	1864      	addlt	r4, r4, r1
 801a7f8:	44a8      	add	r8, r5
 801a7fa:	fb05 ac0c 	mla	ip, r5, ip, sl
 801a7fe:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a802:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a806:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a80a:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801a80e:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801a812:	ea58 0202 	orrs.w	r2, r8, r2
 801a816:	d011      	beq.n	801a83c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801a818:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801a81c:	f1b8 0f00 	cmp.w	r8, #0
 801a820:	db0c      	blt.n	801a83c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801a822:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801a824:	4590      	cmp	r8, r2
 801a826:	da09      	bge.n	801a83c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801a828:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801a82c:	4590      	cmp	r8, r2
 801a82e:	bf3c      	itt	cc
 801a830:	f10c 0208 	addcc.w	r2, ip, #8
 801a834:	6102      	strcc	r2, [r0, #16]
 801a836:	f108 0201 	add.w	r2, r8, #1
 801a83a:	6082      	str	r2, [r0, #8]
 801a83c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a840:	2700      	movs	r7, #0
 801a842:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a846:	45b6      	cmp	lr, r6
 801a848:	f8ac 6000 	strh.w	r6, [ip]
 801a84c:	442b      	add	r3, r5
 801a84e:	f8ac 2002 	strh.w	r2, [ip, #2]
 801a852:	f8ac 7004 	strh.w	r7, [ip, #4]
 801a856:	f8ac 7006 	strh.w	r7, [ip, #6]
 801a85a:	d04b      	beq.n	801a8f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801a85c:	9f04      	ldr	r7, [sp, #16]
 801a85e:	1a64      	subs	r4, r4, r1
 801a860:	f04f 0a00 	mov.w	sl, #0
 801a864:	1aff      	subs	r7, r7, r3
 801a866:	443d      	add	r5, r7
 801a868:	016d      	lsls	r5, r5, #5
 801a86a:	fb95 f8f1 	sdiv	r8, r5, r1
 801a86e:	fb01 5518 	mls	r5, r1, r8, r5
 801a872:	2d00      	cmp	r5, #0
 801a874:	bfbc      	itt	lt
 801a876:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801a87a:	186d      	addlt	r5, r5, r1
 801a87c:	f108 0701 	add.w	r7, r8, #1
 801a880:	9703      	str	r7, [sp, #12]
 801a882:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a886:	1964      	adds	r4, r4, r5
 801a888:	444e      	add	r6, r9
 801a88a:	bf54      	ite	pl
 801a88c:	9f03      	ldrpl	r7, [sp, #12]
 801a88e:	4647      	movmi	r7, r8
 801a890:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801a894:	bf58      	it	pl
 801a896:	1a64      	subpl	r4, r4, r1
 801a898:	443b      	add	r3, r7
 801a89a:	44bb      	add	fp, r7
 801a89c:	f8ac b004 	strh.w	fp, [ip, #4]
 801a8a0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a8a4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801a8a8:	f8ac b006 	strh.w	fp, [ip, #6]
 801a8ac:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a8b0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a8b4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a8b8:	ea5b 0707 	orrs.w	r7, fp, r7
 801a8bc:	d011      	beq.n	801a8e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801a8be:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801a8c2:	f1bb 0f00 	cmp.w	fp, #0
 801a8c6:	db0c      	blt.n	801a8e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801a8c8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a8ca:	45bb      	cmp	fp, r7
 801a8cc:	da09      	bge.n	801a8e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801a8ce:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801a8d2:	45bb      	cmp	fp, r7
 801a8d4:	bf3c      	itt	cc
 801a8d6:	f10c 0708 	addcc.w	r7, ip, #8
 801a8da:	6107      	strcc	r7, [r0, #16]
 801a8dc:	f10b 0701 	add.w	r7, fp, #1
 801a8e0:	6087      	str	r7, [r0, #8]
 801a8e2:	6907      	ldr	r7, [r0, #16]
 801a8e4:	45b6      	cmp	lr, r6
 801a8e6:	803e      	strh	r6, [r7, #0]
 801a8e8:	807a      	strh	r2, [r7, #2]
 801a8ea:	f8a7 a004 	strh.w	sl, [r7, #4]
 801a8ee:	f8a7 a006 	strh.w	sl, [r7, #6]
 801a8f2:	d1c6      	bne.n	801a882 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801a8f4:	9a04      	ldr	r2, [sp, #16]
 801a8f6:	1ad3      	subs	r3, r2, r3
 801a8f8:	6902      	ldr	r2, [r0, #16]
 801a8fa:	8891      	ldrh	r1, [r2, #4]
 801a8fc:	88d6      	ldrh	r6, [r2, #6]
 801a8fe:	4419      	add	r1, r3
 801a900:	8091      	strh	r1, [r2, #4]
 801a902:	9902      	ldr	r1, [sp, #8]
 801a904:	f101 0c20 	add.w	ip, r1, #32
 801a908:	9901      	ldr	r1, [sp, #4]
 801a90a:	ebac 0c01 	sub.w	ip, ip, r1
 801a90e:	fb03 630c 	mla	r3, r3, ip, r6
 801a912:	80d3      	strh	r3, [r2, #6]
 801a914:	e750      	b.n	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a916:	9d05      	ldr	r5, [sp, #20]
 801a918:	1aa2      	subs	r2, r4, r2
 801a91a:	eba5 0501 	sub.w	r5, r5, r1
 801a91e:	9202      	str	r2, [sp, #8]
 801a920:	9508      	str	r5, [sp, #32]
 801a922:	f140 8128 	bpl.w	801ab76 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801a926:	9a03      	ldr	r2, [sp, #12]
 801a928:	2a00      	cmp	r2, #0
 801a92a:	f6ff af45 	blt.w	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a92e:	9a02      	ldr	r2, [sp, #8]
 801a930:	f04f 34ff 	mov.w	r4, #4294967295
 801a934:	4252      	negs	r2, r2
 801a936:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a938:	2400      	movs	r4, #0
 801a93a:	9202      	str	r2, [sp, #8]
 801a93c:	9a06      	ldr	r2, [sp, #24]
 801a93e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801a942:	9206      	str	r2, [sp, #24]
 801a944:	462a      	mov	r2, r5
 801a946:	435a      	muls	r2, r3
 801a948:	9401      	str	r4, [sp, #4]
 801a94a:	9c02      	ldr	r4, [sp, #8]
 801a94c:	9d02      	ldr	r5, [sp, #8]
 801a94e:	fb92 f4f4 	sdiv	r4, r2, r4
 801a952:	fb05 2214 	mls	r2, r5, r4, r2
 801a956:	2a00      	cmp	r2, #0
 801a958:	9207      	str	r2, [sp, #28]
 801a95a:	bfbc      	itt	lt
 801a95c:	1952      	addlt	r2, r2, r5
 801a95e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801a962:	6905      	ldr	r5, [r0, #16]
 801a964:	bfb8      	it	lt
 801a966:	9207      	strlt	r2, [sp, #28]
 801a968:	eb04 0901 	add.w	r9, r4, r1
 801a96c:	9a01      	ldr	r2, [sp, #4]
 801a96e:	ea4f 1669 	mov.w	r6, r9, asr #5
 801a972:	429a      	cmp	r2, r3
 801a974:	f040 8111 	bne.w	801ab9a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801a978:	f9b5 3000 	ldrsh.w	r3, [r5]
 801a97c:	429e      	cmp	r6, r3
 801a97e:	d104      	bne.n	801a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801a980:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a984:	9a03      	ldr	r2, [sp, #12]
 801a986:	429a      	cmp	r2, r3
 801a988:	d01b      	beq.n	801a9c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801a98a:	88ea      	ldrh	r2, [r5, #6]
 801a98c:	88ab      	ldrh	r3, [r5, #4]
 801a98e:	4313      	orrs	r3, r2
 801a990:	d010      	beq.n	801a9b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801a992:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a996:	2a00      	cmp	r2, #0
 801a998:	db0c      	blt.n	801a9b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801a99a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a99c:	429a      	cmp	r2, r3
 801a99e:	da09      	bge.n	801a9b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801a9a0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801a9a4:	429a      	cmp	r2, r3
 801a9a6:	f102 0201 	add.w	r2, r2, #1
 801a9aa:	bf38      	it	cc
 801a9ac:	3508      	addcc	r5, #8
 801a9ae:	6082      	str	r2, [r0, #8]
 801a9b0:	bf38      	it	cc
 801a9b2:	6105      	strcc	r5, [r0, #16]
 801a9b4:	6903      	ldr	r3, [r0, #16]
 801a9b6:	9a03      	ldr	r2, [sp, #12]
 801a9b8:	801e      	strh	r6, [r3, #0]
 801a9ba:	805a      	strh	r2, [r3, #2]
 801a9bc:	2200      	movs	r2, #0
 801a9be:	809a      	strh	r2, [r3, #4]
 801a9c0:	80da      	strh	r2, [r3, #6]
 801a9c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9c4:	9a03      	ldr	r2, [sp, #12]
 801a9c6:	6901      	ldr	r1, [r0, #16]
 801a9c8:	441a      	add	r2, r3
 801a9ca:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a9ce:	42b3      	cmp	r3, r6
 801a9d0:	d103      	bne.n	801a9da <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801a9d2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d01a      	beq.n	801aa10 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801a9da:	88cc      	ldrh	r4, [r1, #6]
 801a9dc:	888b      	ldrh	r3, [r1, #4]
 801a9de:	4323      	orrs	r3, r4
 801a9e0:	d010      	beq.n	801aa04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801a9e2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801a9e6:	2c00      	cmp	r4, #0
 801a9e8:	db0c      	blt.n	801aa04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801a9ea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a9ec:	429c      	cmp	r4, r3
 801a9ee:	da09      	bge.n	801aa04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801a9f0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801a9f4:	429c      	cmp	r4, r3
 801a9f6:	f104 0401 	add.w	r4, r4, #1
 801a9fa:	bf38      	it	cc
 801a9fc:	3108      	addcc	r1, #8
 801a9fe:	6084      	str	r4, [r0, #8]
 801aa00:	bf38      	it	cc
 801aa02:	6101      	strcc	r1, [r0, #16]
 801aa04:	6903      	ldr	r3, [r0, #16]
 801aa06:	2100      	movs	r1, #0
 801aa08:	801e      	strh	r6, [r3, #0]
 801aa0a:	805a      	strh	r2, [r3, #2]
 801aa0c:	8099      	strh	r1, [r3, #4]
 801aa0e:	80d9      	strh	r1, [r3, #6]
 801aa10:	9b06      	ldr	r3, [sp, #24]
 801aa12:	4293      	cmp	r3, r2
 801aa14:	f000 8082 	beq.w	801ab1c <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801aa18:	9b08      	ldr	r3, [sp, #32]
 801aa1a:	9902      	ldr	r1, [sp, #8]
 801aa1c:	015b      	lsls	r3, r3, #5
 801aa1e:	9c02      	ldr	r4, [sp, #8]
 801aa20:	fb93 f1f1 	sdiv	r1, r3, r1
 801aa24:	fb04 3311 	mls	r3, r4, r1, r3
 801aa28:	9103      	str	r1, [sp, #12]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	9308      	str	r3, [sp, #32]
 801aa2e:	da04      	bge.n	801aa3a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801aa30:	1e4b      	subs	r3, r1, #1
 801aa32:	9303      	str	r3, [sp, #12]
 801aa34:	9b08      	ldr	r3, [sp, #32]
 801aa36:	4423      	add	r3, r4
 801aa38:	9308      	str	r3, [sp, #32]
 801aa3a:	9b07      	ldr	r3, [sp, #28]
 801aa3c:	464f      	mov	r7, r9
 801aa3e:	9902      	ldr	r1, [sp, #8]
 801aa40:	2600      	movs	r6, #0
 801aa42:	1a5b      	subs	r3, r3, r1
 801aa44:	9307      	str	r3, [sp, #28]
 801aa46:	9b01      	ldr	r3, [sp, #4]
 801aa48:	f1c3 0320 	rsb	r3, r3, #32
 801aa4c:	930e      	str	r3, [sp, #56]	@ 0x38
 801aa4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801aa50:	9b01      	ldr	r3, [sp, #4]
 801aa52:	1a5b      	subs	r3, r3, r1
 801aa54:	930a      	str	r3, [sp, #40]	@ 0x28
 801aa56:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801aa5a:	185b      	adds	r3, r3, r1
 801aa5c:	bf58      	it	pl
 801aa5e:	9902      	ldrpl	r1, [sp, #8]
 801aa60:	9307      	str	r3, [sp, #28]
 801aa62:	bf57      	itett	pl
 801aa64:	1a5b      	subpl	r3, r3, r1
 801aa66:	9903      	ldrmi	r1, [sp, #12]
 801aa68:	9307      	strpl	r3, [sp, #28]
 801aa6a:	9b03      	ldrpl	r3, [sp, #12]
 801aa6c:	bf58      	it	pl
 801aa6e:	1c59      	addpl	r1, r3, #1
 801aa70:	2a00      	cmp	r2, #0
 801aa72:	4489      	add	r9, r1
 801aa74:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801aa78:	db2e      	blt.n	801aad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aa7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	dd2b      	ble.n	801aad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aa80:	9c01      	ldr	r4, [sp, #4]
 801aa82:	6905      	ldr	r5, [r0, #16]
 801aa84:	46a0      	mov	r8, r4
 801aa86:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801aa88:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801aa8c:	45a0      	cmp	r8, r4
 801aa8e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801aa92:	f040 814c 	bne.w	801ad2e <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801aa96:	f9b5 1000 	ldrsh.w	r1, [r5]
 801aa9a:	4551      	cmp	r1, sl
 801aa9c:	d103      	bne.n	801aaa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801aa9e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801aaa2:	4291      	cmp	r1, r2
 801aaa4:	d018      	beq.n	801aad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aaa6:	ea5c 010e 	orrs.w	r1, ip, lr
 801aaaa:	d00f      	beq.n	801aacc <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801aaac:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801aab0:	2900      	cmp	r1, #0
 801aab2:	db0b      	blt.n	801aacc <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801aab4:	428b      	cmp	r3, r1
 801aab6:	dd09      	ble.n	801aacc <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801aab8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801aabc:	4299      	cmp	r1, r3
 801aabe:	f101 0101 	add.w	r1, r1, #1
 801aac2:	bf38      	it	cc
 801aac4:	3508      	addcc	r5, #8
 801aac6:	6081      	str	r1, [r0, #8]
 801aac8:	bf38      	it	cc
 801aaca:	6105      	strcc	r5, [r0, #16]
 801aacc:	6903      	ldr	r3, [r0, #16]
 801aace:	f8a3 a000 	strh.w	sl, [r3]
 801aad2:	805a      	strh	r2, [r3, #2]
 801aad4:	809e      	strh	r6, [r3, #4]
 801aad6:	80de      	strh	r6, [r3, #6]
 801aad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aada:	6901      	ldr	r1, [r0, #16]
 801aadc:	441a      	add	r2, r3
 801aade:	88cc      	ldrh	r4, [r1, #6]
 801aae0:	888b      	ldrh	r3, [r1, #4]
 801aae2:	4323      	orrs	r3, r4
 801aae4:	d010      	beq.n	801ab08 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801aae6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801aaea:	2c00      	cmp	r4, #0
 801aaec:	db0c      	blt.n	801ab08 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801aaee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801aaf0:	429c      	cmp	r4, r3
 801aaf2:	da09      	bge.n	801ab08 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801aaf4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801aaf8:	429c      	cmp	r4, r3
 801aafa:	f104 0401 	add.w	r4, r4, #1
 801aafe:	bf38      	it	cc
 801ab00:	3108      	addcc	r1, #8
 801ab02:	6084      	str	r4, [r0, #8]
 801ab04:	bf38      	it	cc
 801ab06:	6101      	strcc	r1, [r0, #16]
 801ab08:	6903      	ldr	r3, [r0, #16]
 801ab0a:	464f      	mov	r7, r9
 801ab0c:	f8a3 a000 	strh.w	sl, [r3]
 801ab10:	805a      	strh	r2, [r3, #2]
 801ab12:	809e      	strh	r6, [r3, #4]
 801ab14:	80de      	strh	r6, [r3, #6]
 801ab16:	9b06      	ldr	r3, [sp, #24]
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	d19c      	bne.n	801aa56 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 801ab1c:	9b01      	ldr	r3, [sp, #4]
 801ab1e:	6907      	ldr	r7, [r0, #16]
 801ab20:	f1c3 0620 	rsb	r6, r3, #32
 801ab24:	9b05      	ldr	r3, [sp, #20]
 801ab26:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801ab2a:	9b04      	ldr	r3, [sp, #16]
 801ab2c:	429e      	cmp	r6, r3
 801ab2e:	f040 81c7 	bne.w	801aec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801ab32:	f9b7 3000 	ldrsh.w	r3, [r7]
 801ab36:	459e      	cmp	lr, r3
 801ab38:	d104      	bne.n	801ab44 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801ab3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab3e:	429a      	cmp	r2, r3
 801ab40:	f43f ae3a 	beq.w	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801ab44:	88f9      	ldrh	r1, [r7, #6]
 801ab46:	88bb      	ldrh	r3, [r7, #4]
 801ab48:	430b      	orrs	r3, r1
 801ab4a:	d010      	beq.n	801ab6e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801ab4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	db0c      	blt.n	801ab6e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801ab54:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801ab56:	428b      	cmp	r3, r1
 801ab58:	da09      	bge.n	801ab6e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801ab5a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801ab5e:	428b      	cmp	r3, r1
 801ab60:	f103 0301 	add.w	r3, r3, #1
 801ab64:	bf38      	it	cc
 801ab66:	3708      	addcc	r7, #8
 801ab68:	6083      	str	r3, [r0, #8]
 801ab6a:	bf38      	it	cc
 801ab6c:	6107      	strcc	r7, [r0, #16]
 801ab6e:	6903      	ldr	r3, [r0, #16]
 801ab70:	f8a3 e000 	strh.w	lr, [r3]
 801ab74:	e603      	b.n	801a77e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801ab76:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801ab78:	9c03      	ldr	r4, [sp, #12]
 801ab7a:	42a2      	cmp	r2, r4
 801ab7c:	f6ff ae1c 	blt.w	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801ab80:	9c06      	ldr	r4, [sp, #24]
 801ab82:	42a2      	cmp	r2, r4
 801ab84:	9c08      	ldr	r4, [sp, #32]
 801ab86:	bfbc      	itt	lt
 801ab88:	3201      	addlt	r2, #1
 801ab8a:	9206      	strlt	r2, [sp, #24]
 801ab8c:	f1c3 0220 	rsb	r2, r3, #32
 801ab90:	4362      	muls	r2, r4
 801ab92:	2401      	movs	r4, #1
 801ab94:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ab96:	2420      	movs	r4, #32
 801ab98:	e6d6      	b.n	801a948 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801ab9a:	ea4f 1861 	mov.w	r8, r1, asr #5
 801ab9e:	f009 021f 	and.w	r2, r9, #31
 801aba2:	f001 011f 	and.w	r1, r1, #31
 801aba6:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801abaa:	920c      	str	r2, [sp, #48]	@ 0x30
 801abac:	45b0      	cmp	r8, r6
 801abae:	9a01      	ldr	r2, [sp, #4]
 801abb0:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801abb4:	eba2 0203 	sub.w	r2, r2, r3
 801abb8:	d108      	bne.n	801abcc <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801abba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801abbc:	4496      	add	lr, r2
 801abbe:	4419      	add	r1, r3
 801abc0:	f8a5 e004 	strh.w	lr, [r5, #4]
 801abc4:	fb02 a101 	mla	r1, r2, r1, sl
 801abc8:	80e9      	strh	r1, [r5, #6]
 801abca:	e6fa      	b.n	801a9c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801abcc:	2c00      	cmp	r4, #0
 801abce:	f2c0 80a7 	blt.w	801ad20 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801abd2:	2701      	movs	r7, #1
 801abd4:	f1c1 0c20 	rsb	ip, r1, #32
 801abd8:	970a      	str	r7, [sp, #40]	@ 0x28
 801abda:	2720      	movs	r7, #32
 801abdc:	fb02 f20c 	mul.w	r2, r2, ip
 801abe0:	9709      	str	r7, [sp, #36]	@ 0x24
 801abe2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801abe4:	fb92 fcf4 	sdiv	ip, r2, r4
 801abe8:	fb04 221c 	mls	r2, r4, ip, r2
 801abec:	4439      	add	r1, r7
 801abee:	2a00      	cmp	r2, #0
 801abf0:	bfbc      	itt	lt
 801abf2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801abf6:	1912      	addlt	r2, r2, r4
 801abf8:	fb0c a101 	mla	r1, ip, r1, sl
 801abfc:	44e6      	add	lr, ip
 801abfe:	80e9      	strh	r1, [r5, #6]
 801ac00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ac02:	f8a5 e004 	strh.w	lr, [r5, #4]
 801ac06:	eb08 0501 	add.w	r5, r8, r1
 801ac0a:	6901      	ldr	r1, [r0, #16]
 801ac0c:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801ac10:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801ac14:	ea58 070e 	orrs.w	r7, r8, lr
 801ac18:	d010      	beq.n	801ac3c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801ac1a:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801ac1e:	f1be 0f00 	cmp.w	lr, #0
 801ac22:	db0b      	blt.n	801ac3c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801ac24:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801ac26:	45be      	cmp	lr, r7
 801ac28:	da08      	bge.n	801ac3c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801ac2a:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801ac2e:	45be      	cmp	lr, r7
 801ac30:	bf3c      	itt	cc
 801ac32:	3108      	addcc	r1, #8
 801ac34:	6101      	strcc	r1, [r0, #16]
 801ac36:	f10e 0101 	add.w	r1, lr, #1
 801ac3a:	6081      	str	r1, [r0, #8]
 801ac3c:	6901      	ldr	r1, [r0, #16]
 801ac3e:	f04f 0e00 	mov.w	lr, #0
 801ac42:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801ac46:	42ae      	cmp	r6, r5
 801ac48:	800d      	strh	r5, [r1, #0]
 801ac4a:	4463      	add	r3, ip
 801ac4c:	f8a1 8002 	strh.w	r8, [r1, #2]
 801ac50:	f8a1 e004 	strh.w	lr, [r1, #4]
 801ac54:	f8a1 e006 	strh.w	lr, [r1, #6]
 801ac58:	d053      	beq.n	801ad02 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801ac5a:	9901      	ldr	r1, [sp, #4]
 801ac5c:	1b12      	subs	r2, r2, r4
 801ac5e:	1ac9      	subs	r1, r1, r3
 801ac60:	4461      	add	r1, ip
 801ac62:	0149      	lsls	r1, r1, #5
 801ac64:	fb91 fef4 	sdiv	lr, r1, r4
 801ac68:	fb04 111e 	mls	r1, r4, lr, r1
 801ac6c:	2900      	cmp	r1, #0
 801ac6e:	bfbc      	itt	lt
 801ac70:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801ac74:	1909      	addlt	r1, r1, r4
 801ac76:	f10e 0701 	add.w	r7, lr, #1
 801ac7a:	970d      	str	r7, [sp, #52]	@ 0x34
 801ac7c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801ac80:	1852      	adds	r2, r2, r1
 801ac82:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ac84:	bf54      	ite	pl
 801ac86:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801ac8a:	46f4      	movmi	ip, lr
 801ac8c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801ac90:	bf58      	it	pl
 801ac92:	1b12      	subpl	r2, r2, r4
 801ac94:	4463      	add	r3, ip
 801ac96:	443d      	add	r5, r7
 801ac98:	44e3      	add	fp, ip
 801ac9a:	f8aa b004 	strh.w	fp, [sl, #4]
 801ac9e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801aca2:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801aca6:	f8aa b006 	strh.w	fp, [sl, #6]
 801acaa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801acae:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801acb2:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801acb6:	ea5b 070a 	orrs.w	r7, fp, sl
 801acba:	d014      	beq.n	801ace6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801acbc:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801acc0:	f1ba 0f00 	cmp.w	sl, #0
 801acc4:	db0f      	blt.n	801ace6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801acc6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801acc8:	45ba      	cmp	sl, r7
 801acca:	da0c      	bge.n	801ace6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801accc:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801acd0:	45ba      	cmp	sl, r7
 801acd2:	f10a 0a01 	add.w	sl, sl, #1
 801acd6:	bf38      	it	cc
 801acd8:	f10c 0c08 	addcc.w	ip, ip, #8
 801acdc:	f8c0 a008 	str.w	sl, [r0, #8]
 801ace0:	bf38      	it	cc
 801ace2:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801ace6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801acea:	f04f 0700 	mov.w	r7, #0
 801acee:	42ae      	cmp	r6, r5
 801acf0:	f8ac 5000 	strh.w	r5, [ip]
 801acf4:	f8ac 8002 	strh.w	r8, [ip, #2]
 801acf8:	f8ac 7004 	strh.w	r7, [ip, #4]
 801acfc:	f8ac 7006 	strh.w	r7, [ip, #6]
 801ad00:	d1bc      	bne.n	801ac7c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801ad02:	6904      	ldr	r4, [r0, #16]
 801ad04:	9a01      	ldr	r2, [sp, #4]
 801ad06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ad08:	1ad3      	subs	r3, r2, r3
 801ad0a:	88a2      	ldrh	r2, [r4, #4]
 801ad0c:	3120      	adds	r1, #32
 801ad0e:	441a      	add	r2, r3
 801ad10:	80a2      	strh	r2, [r4, #4]
 801ad12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad14:	1a89      	subs	r1, r1, r2
 801ad16:	88e2      	ldrh	r2, [r4, #6]
 801ad18:	fb03 2301 	mla	r3, r3, r1, r2
 801ad1c:	80e3      	strh	r3, [r4, #6]
 801ad1e:	e650      	b.n	801a9c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801ad20:	f04f 37ff 	mov.w	r7, #4294967295
 801ad24:	434a      	muls	r2, r1
 801ad26:	4264      	negs	r4, r4
 801ad28:	970a      	str	r7, [sp, #40]	@ 0x28
 801ad2a:	2700      	movs	r7, #0
 801ad2c:	e758      	b.n	801abe0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801ad2e:	ea4f 1867 	mov.w	r8, r7, asr #5
 801ad32:	f009 031f 	and.w	r3, r9, #31
 801ad36:	f007 071f 	and.w	r7, r7, #31
 801ad3a:	fa1f fc8c 	uxth.w	ip, ip
 801ad3e:	45d0      	cmp	r8, sl
 801ad40:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ad42:	fa1f fe8e 	uxth.w	lr, lr
 801ad46:	d10a      	bne.n	801ad5e <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801ad48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad4a:	449c      	add	ip, r3
 801ad4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ad4e:	441f      	add	r7, r3
 801ad50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad52:	f8a5 c004 	strh.w	ip, [r5, #4]
 801ad56:	fb03 e707 	mla	r7, r3, r7, lr
 801ad5a:	80ef      	strh	r7, [r5, #6]
 801ad5c:	e6bc      	b.n	801aad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801ad5e:	2900      	cmp	r1, #0
 801ad60:	f2c0 80a6 	blt.w	801aeb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801ad64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ad66:	f1c7 0320 	rsb	r3, r7, #32
 801ad6a:	4363      	muls	r3, r4
 801ad6c:	2401      	movs	r4, #1
 801ad6e:	940d      	str	r4, [sp, #52]	@ 0x34
 801ad70:	2420      	movs	r4, #32
 801ad72:	940c      	str	r4, [sp, #48]	@ 0x30
 801ad74:	fb93 f4f1 	sdiv	r4, r3, r1
 801ad78:	fb01 3b14 	mls	fp, r1, r4, r3
 801ad7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad7e:	f1bb 0f00 	cmp.w	fp, #0
 801ad82:	441f      	add	r7, r3
 801ad84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad86:	bfbc      	itt	lt
 801ad88:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801ad8c:	448b      	addlt	fp, r1
 801ad8e:	fb04 e707 	mla	r7, r4, r7, lr
 801ad92:	44a4      	add	ip, r4
 801ad94:	80ef      	strh	r7, [r5, #6]
 801ad96:	f8a5 c004 	strh.w	ip, [r5, #4]
 801ad9a:	eb08 0503 	add.w	r5, r8, r3
 801ad9e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801ada2:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801ada6:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801adaa:	ea5e 0307 	orrs.w	r3, lr, r7
 801adae:	d011      	beq.n	801add4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801adb0:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801adb4:	f1be 0f00 	cmp.w	lr, #0
 801adb8:	db0c      	blt.n	801add4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801adba:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801adbc:	45be      	cmp	lr, r7
 801adbe:	da09      	bge.n	801add4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801adc0:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801adc4:	45be      	cmp	lr, r7
 801adc6:	bf3c      	itt	cc
 801adc8:	f10c 0708 	addcc.w	r7, ip, #8
 801adcc:	6107      	strcc	r7, [r0, #16]
 801adce:	f10e 0701 	add.w	r7, lr, #1
 801add2:	6087      	str	r7, [r0, #8]
 801add4:	6907      	ldr	r7, [r0, #16]
 801add6:	b213      	sxth	r3, r2
 801add8:	4555      	cmp	r5, sl
 801adda:	9310      	str	r3, [sp, #64]	@ 0x40
 801addc:	807b      	strh	r3, [r7, #2]
 801adde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ade0:	803d      	strh	r5, [r7, #0]
 801ade2:	80be      	strh	r6, [r7, #4]
 801ade4:	eb04 0c03 	add.w	ip, r4, r3
 801ade8:	80fe      	strh	r6, [r7, #6]
 801adea:	d050      	beq.n	801ae8e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801adec:	9b01      	ldr	r3, [sp, #4]
 801adee:	eba3 070c 	sub.w	r7, r3, ip
 801adf2:	ebab 0301 	sub.w	r3, fp, r1
 801adf6:	443c      	add	r4, r7
 801adf8:	9309      	str	r3, [sp, #36]	@ 0x24
 801adfa:	0164      	lsls	r4, r4, #5
 801adfc:	fb94 f8f1 	sdiv	r8, r4, r1
 801ae00:	fb01 4418 	mls	r4, r1, r8, r4
 801ae04:	2c00      	cmp	r4, #0
 801ae06:	bfbc      	itt	lt
 801ae08:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801ae0c:	1864      	addlt	r4, r4, r1
 801ae0e:	f108 0701 	add.w	r7, r8, #1
 801ae12:	9711      	str	r7, [sp, #68]	@ 0x44
 801ae14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae16:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801ae1a:	191b      	adds	r3, r3, r4
 801ae1c:	f8be b004 	ldrh.w	fp, [lr, #4]
 801ae20:	bf54      	ite	pl
 801ae22:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801ae24:	4647      	movmi	r7, r8
 801ae26:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae28:	bf58      	it	pl
 801ae2a:	1a5b      	subpl	r3, r3, r1
 801ae2c:	44bb      	add	fp, r7
 801ae2e:	44bc      	add	ip, r7
 801ae30:	bf58      	it	pl
 801ae32:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801ae34:	f8ae b004 	strh.w	fp, [lr, #4]
 801ae38:	f8be b006 	ldrh.w	fp, [lr, #6]
 801ae3c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801ae40:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ae42:	f8ae b006 	strh.w	fp, [lr, #6]
 801ae46:	443d      	add	r5, r7
 801ae48:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801ae4c:	f8be b006 	ldrh.w	fp, [lr, #6]
 801ae50:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801ae54:	ea5b 0307 	orrs.w	r3, fp, r7
 801ae58:	d011      	beq.n	801ae7e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801ae5a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801ae5e:	f1bb 0f00 	cmp.w	fp, #0
 801ae62:	db0c      	blt.n	801ae7e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801ae64:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801ae66:	45bb      	cmp	fp, r7
 801ae68:	da09      	bge.n	801ae7e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801ae6a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801ae6e:	45bb      	cmp	fp, r7
 801ae70:	bf3c      	itt	cc
 801ae72:	f10e 0708 	addcc.w	r7, lr, #8
 801ae76:	6107      	strcc	r7, [r0, #16]
 801ae78:	f10b 0701 	add.w	r7, fp, #1
 801ae7c:	6087      	str	r7, [r0, #8]
 801ae7e:	6907      	ldr	r7, [r0, #16]
 801ae80:	4555      	cmp	r5, sl
 801ae82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ae84:	803d      	strh	r5, [r7, #0]
 801ae86:	807b      	strh	r3, [r7, #2]
 801ae88:	80be      	strh	r6, [r7, #4]
 801ae8a:	80fe      	strh	r6, [r7, #6]
 801ae8c:	d1c2      	bne.n	801ae14 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801ae8e:	9b01      	ldr	r3, [sp, #4]
 801ae90:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801ae92:	eba3 0c0c 	sub.w	ip, r3, ip
 801ae96:	6903      	ldr	r3, [r0, #16]
 801ae98:	3720      	adds	r7, #32
 801ae9a:	8899      	ldrh	r1, [r3, #4]
 801ae9c:	4461      	add	r1, ip
 801ae9e:	8099      	strh	r1, [r3, #4]
 801aea0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801aea2:	1a7f      	subs	r7, r7, r1
 801aea4:	88d9      	ldrh	r1, [r3, #6]
 801aea6:	fb0c 1c07 	mla	ip, ip, r7, r1
 801aeaa:	f8a3 c006 	strh.w	ip, [r3, #6]
 801aeae:	e613      	b.n	801aad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801aeb0:	f04f 34ff 	mov.w	r4, #4294967295
 801aeb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aeb6:	4249      	negs	r1, r1
 801aeb8:	940d      	str	r4, [sp, #52]	@ 0x34
 801aeba:	2400      	movs	r4, #0
 801aebc:	437b      	muls	r3, r7
 801aebe:	e758      	b.n	801ad72 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801aec0:	9905      	ldr	r1, [sp, #20]
 801aec2:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801aec6:	f009 0c1f 	and.w	ip, r9, #31
 801aeca:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801aece:	f001 011f 	and.w	r1, r1, #31
 801aed2:	45f3      	cmp	fp, lr
 801aed4:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801aed8:	9102      	str	r1, [sp, #8]
 801aeda:	9904      	ldr	r1, [sp, #16]
 801aedc:	eba1 0406 	sub.w	r4, r1, r6
 801aee0:	d108      	bne.n	801aef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801aee2:	9b02      	ldr	r3, [sp, #8]
 801aee4:	44a0      	add	r8, r4
 801aee6:	449c      	add	ip, r3
 801aee8:	f8a7 8004 	strh.w	r8, [r7, #4]
 801aeec:	fb04 a40c 	mla	r4, r4, ip, sl
 801aef0:	80fc      	strh	r4, [r7, #6]
 801aef2:	e461      	b.n	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801aef4:	9905      	ldr	r1, [sp, #20]
 801aef6:	ebb1 0109 	subs.w	r1, r1, r9
 801aefa:	bf51      	iteee	pl
 801aefc:	f1cc 0520 	rsbpl	r5, ip, #32
 801af00:	fb04 f40c 	mulmi.w	r4, r4, ip
 801af04:	4249      	negmi	r1, r1
 801af06:	2500      	movmi	r5, #0
 801af08:	bf5d      	ittte	pl
 801af0a:	436c      	mulpl	r4, r5
 801af0c:	2520      	movpl	r5, #32
 801af0e:	f04f 0901 	movpl.w	r9, #1
 801af12:	f04f 39ff 	movmi.w	r9, #4294967295
 801af16:	9501      	str	r5, [sp, #4]
 801af18:	9b01      	ldr	r3, [sp, #4]
 801af1a:	fb94 f5f1 	sdiv	r5, r4, r1
 801af1e:	fb01 4415 	mls	r4, r1, r5, r4
 801af22:	449c      	add	ip, r3
 801af24:	eb0b 0309 	add.w	r3, fp, r9
 801af28:	2c00      	cmp	r4, #0
 801af2a:	bfbc      	itt	lt
 801af2c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801af30:	1864      	addlt	r4, r4, r1
 801af32:	44a8      	add	r8, r5
 801af34:	fb05 ac0c 	mla	ip, r5, ip, sl
 801af38:	f8a7 8004 	strh.w	r8, [r7, #4]
 801af3c:	f8a7 c006 	strh.w	ip, [r7, #6]
 801af40:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801af44:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801af48:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801af4c:	ea58 0707 	orrs.w	r7, r8, r7
 801af50:	d011      	beq.n	801af76 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801af52:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801af56:	f1b8 0f00 	cmp.w	r8, #0
 801af5a:	db0c      	blt.n	801af76 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801af5c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801af5e:	45b8      	cmp	r8, r7
 801af60:	da09      	bge.n	801af76 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801af62:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801af66:	45b8      	cmp	r8, r7
 801af68:	bf3c      	itt	cc
 801af6a:	f10c 0708 	addcc.w	r7, ip, #8
 801af6e:	6107      	strcc	r7, [r0, #16]
 801af70:	f108 0701 	add.w	r7, r8, #1
 801af74:	6087      	str	r7, [r0, #8]
 801af76:	6907      	ldr	r7, [r0, #16]
 801af78:	f04f 0c00 	mov.w	ip, #0
 801af7c:	b212      	sxth	r2, r2
 801af7e:	459e      	cmp	lr, r3
 801af80:	803b      	strh	r3, [r7, #0]
 801af82:	442e      	add	r6, r5
 801af84:	807a      	strh	r2, [r7, #2]
 801af86:	f8a7 c004 	strh.w	ip, [r7, #4]
 801af8a:	f8a7 c006 	strh.w	ip, [r7, #6]
 801af8e:	d04b      	beq.n	801b028 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801af90:	9f04      	ldr	r7, [sp, #16]
 801af92:	1a64      	subs	r4, r4, r1
 801af94:	f04f 0a00 	mov.w	sl, #0
 801af98:	1bbf      	subs	r7, r7, r6
 801af9a:	443d      	add	r5, r7
 801af9c:	016d      	lsls	r5, r5, #5
 801af9e:	fb95 f8f1 	sdiv	r8, r5, r1
 801afa2:	fb01 5518 	mls	r5, r1, r8, r5
 801afa6:	4565      	cmp	r5, ip
 801afa8:	bfbc      	itt	lt
 801afaa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801afae:	186d      	addlt	r5, r5, r1
 801afb0:	f108 0701 	add.w	r7, r8, #1
 801afb4:	9703      	str	r7, [sp, #12]
 801afb6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801afba:	1964      	adds	r4, r4, r5
 801afbc:	444b      	add	r3, r9
 801afbe:	bf54      	ite	pl
 801afc0:	9f03      	ldrpl	r7, [sp, #12]
 801afc2:	4647      	movmi	r7, r8
 801afc4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801afc8:	bf58      	it	pl
 801afca:	1a64      	subpl	r4, r4, r1
 801afcc:	443e      	add	r6, r7
 801afce:	44bb      	add	fp, r7
 801afd0:	f8ac b004 	strh.w	fp, [ip, #4]
 801afd4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801afd8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801afdc:	f8ac b006 	strh.w	fp, [ip, #6]
 801afe0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801afe4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801afe8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801afec:	ea5b 0707 	orrs.w	r7, fp, r7
 801aff0:	d011      	beq.n	801b016 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801aff2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801aff6:	f1bb 0f00 	cmp.w	fp, #0
 801affa:	db0c      	blt.n	801b016 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801affc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801affe:	45bb      	cmp	fp, r7
 801b000:	da09      	bge.n	801b016 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801b002:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801b006:	45bb      	cmp	fp, r7
 801b008:	bf3c      	itt	cc
 801b00a:	f10c 0708 	addcc.w	r7, ip, #8
 801b00e:	6107      	strcc	r7, [r0, #16]
 801b010:	f10b 0701 	add.w	r7, fp, #1
 801b014:	6087      	str	r7, [r0, #8]
 801b016:	6907      	ldr	r7, [r0, #16]
 801b018:	459e      	cmp	lr, r3
 801b01a:	803b      	strh	r3, [r7, #0]
 801b01c:	807a      	strh	r2, [r7, #2]
 801b01e:	f8a7 a004 	strh.w	sl, [r7, #4]
 801b022:	f8a7 a006 	strh.w	sl, [r7, #6]
 801b026:	d1c6      	bne.n	801afb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801b028:	9b04      	ldr	r3, [sp, #16]
 801b02a:	1b9e      	subs	r6, r3, r6
 801b02c:	6903      	ldr	r3, [r0, #16]
 801b02e:	889a      	ldrh	r2, [r3, #4]
 801b030:	4432      	add	r2, r6
 801b032:	809a      	strh	r2, [r3, #4]
 801b034:	9a02      	ldr	r2, [sp, #8]
 801b036:	f102 0c20 	add.w	ip, r2, #32
 801b03a:	9a01      	ldr	r2, [sp, #4]
 801b03c:	ebac 0c02 	sub.w	ip, ip, r2
 801b040:	88da      	ldrh	r2, [r3, #6]
 801b042:	fb06 260c 	mla	r6, r6, ip, r2
 801b046:	80de      	strh	r6, [r3, #6]
 801b048:	f7ff bbb6 	b.w	801a7b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801b04c <_ZN8touchgfx7Outline6lineToEii>:
 801b04c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b04e:	079b      	lsls	r3, r3, #30
 801b050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b052:	460e      	mov	r6, r1
 801b054:	4615      	mov	r5, r2
 801b056:	d511      	bpl.n	801b07c <_ZN8touchgfx7Outline6lineToEii+0x30>
 801b058:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801b05c:	ea86 0701 	eor.w	r7, r6, r1
 801b060:	ea85 0302 	eor.w	r3, r5, r2
 801b064:	433b      	orrs	r3, r7
 801b066:	d009      	beq.n	801b07c <_ZN8touchgfx7Outline6lineToEii+0x30>
 801b068:	4633      	mov	r3, r6
 801b06a:	9500      	str	r5, [sp, #0]
 801b06c:	f7ff fb4c 	bl	801a708 <_ZN8touchgfx7Outline10renderLineEiiii>
 801b070:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b072:	f043 0301 	orr.w	r3, r3, #1
 801b076:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801b07a:	6243      	str	r3, [r0, #36]	@ 0x24
 801b07c:	b003      	add	sp, #12
 801b07e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b080 <_ZN8touchgfx7Outline6moveToEii>:
 801b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b082:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b084:	4615      	mov	r5, r2
 801b086:	4604      	mov	r4, r0
 801b088:	460e      	mov	r6, r1
 801b08a:	079a      	lsls	r2, r3, #30
 801b08c:	d401      	bmi.n	801b092 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801b08e:	f7ff fb07 	bl	801a6a0 <_ZN8touchgfx7Outline5resetEv>
 801b092:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b094:	07db      	lsls	r3, r3, #31
 801b096:	d504      	bpl.n	801b0a2 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801b098:	4620      	mov	r0, r4
 801b09a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801b09e:	f7ff ffd5 	bl	801b04c <_ZN8touchgfx7Outline6lineToEii>
 801b0a2:	6923      	ldr	r3, [r4, #16]
 801b0a4:	1170      	asrs	r0, r6, #5
 801b0a6:	1169      	asrs	r1, r5, #5
 801b0a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0ac:	4290      	cmp	r0, r2
 801b0ae:	d103      	bne.n	801b0b8 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801b0b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b0b4:	4291      	cmp	r1, r2
 801b0b6:	d01a      	beq.n	801b0ee <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801b0b8:	88df      	ldrh	r7, [r3, #6]
 801b0ba:	889a      	ldrh	r2, [r3, #4]
 801b0bc:	433a      	orrs	r2, r7
 801b0be:	d010      	beq.n	801b0e2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801b0c0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b0c4:	2a00      	cmp	r2, #0
 801b0c6:	db0c      	blt.n	801b0e2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801b0c8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801b0ca:	42ba      	cmp	r2, r7
 801b0cc:	da09      	bge.n	801b0e2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801b0ce:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801b0d2:	42ba      	cmp	r2, r7
 801b0d4:	f102 0201 	add.w	r2, r2, #1
 801b0d8:	bf38      	it	cc
 801b0da:	3308      	addcc	r3, #8
 801b0dc:	60a2      	str	r2, [r4, #8]
 801b0de:	bf38      	it	cc
 801b0e0:	6123      	strcc	r3, [r4, #16]
 801b0e2:	6923      	ldr	r3, [r4, #16]
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	8018      	strh	r0, [r3, #0]
 801b0e8:	8059      	strh	r1, [r3, #2]
 801b0ea:	809a      	strh	r2, [r3, #4]
 801b0ec:	80da      	strh	r2, [r3, #6]
 801b0ee:	6166      	str	r6, [r4, #20]
 801b0f0:	6225      	str	r5, [r4, #32]
 801b0f2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b0f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0fc:	b0d0      	sub	sp, #320	@ 0x140
 801b0fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801b102:	466c      	mov	r4, sp
 801b104:	4627      	mov	r7, r4
 801b106:	1a0d      	subs	r5, r1, r0
 801b108:	f100 0308 	add.w	r3, r0, #8
 801b10c:	2d48      	cmp	r5, #72	@ 0x48
 801b10e:	f340 80d5 	ble.w	801b2bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801b112:	112d      	asrs	r5, r5, #4
 801b114:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801b118:	f9b0 9000 	ldrsh.w	r9, [r0]
 801b11c:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801b120:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801b124:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801b128:	6816      	ldr	r6, [r2, #0]
 801b12a:	6006      	str	r6, [r0, #0]
 801b12c:	6856      	ldr	r6, [r2, #4]
 801b12e:	6046      	str	r6, [r0, #4]
 801b130:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b134:	f8a2 8002 	strh.w	r8, [r2, #2]
 801b138:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b13c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b140:	f1a1 0208 	sub.w	r2, r1, #8
 801b144:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801b148:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801b14c:	4565      	cmp	r5, ip
 801b14e:	db06      	blt.n	801b15e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801b150:	d119      	bne.n	801b186 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801b152:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801b156:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801b15a:	42ae      	cmp	r6, r5
 801b15c:	dd13      	ble.n	801b186 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801b15e:	460e      	mov	r6, r1
 801b160:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801b164:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801b168:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801b16c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801b170:	601d      	str	r5, [r3, #0]
 801b172:	6875      	ldr	r5, [r6, #4]
 801b174:	605d      	str	r5, [r3, #4]
 801b176:	f821 9c08 	strh.w	r9, [r1, #-8]
 801b17a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801b17e:	f821 8c04 	strh.w	r8, [r1, #-4]
 801b182:	f821 ec02 	strh.w	lr, [r1, #-2]
 801b186:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801b18a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801b18e:	42ae      	cmp	r6, r5
 801b190:	db06      	blt.n	801b1a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801b192:	d116      	bne.n	801b1c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801b194:	f9b0 c000 	ldrsh.w	ip, [r0]
 801b198:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801b19c:	45ac      	cmp	ip, r5
 801b19e:	da10      	bge.n	801b1c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801b1a0:	681d      	ldr	r5, [r3, #0]
 801b1a2:	f9b0 8000 	ldrsh.w	r8, [r0]
 801b1a6:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801b1aa:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801b1ae:	6005      	str	r5, [r0, #0]
 801b1b0:	685d      	ldr	r5, [r3, #4]
 801b1b2:	f8a0 8008 	strh.w	r8, [r0, #8]
 801b1b6:	6045      	str	r5, [r0, #4]
 801b1b8:	8146      	strh	r6, [r0, #10]
 801b1ba:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801b1be:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b1c2:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801b1c6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801b1ca:	4565      	cmp	r5, ip
 801b1cc:	db06      	blt.n	801b1dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801b1ce:	d119      	bne.n	801b204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b1d0:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801b1d4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b1d8:	42ae      	cmp	r6, r5
 801b1da:	da13      	bge.n	801b204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b1dc:	460e      	mov	r6, r1
 801b1de:	f9b0 9000 	ldrsh.w	r9, [r0]
 801b1e2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801b1e6:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801b1ea:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801b1ee:	6005      	str	r5, [r0, #0]
 801b1f0:	6875      	ldr	r5, [r6, #4]
 801b1f2:	6045      	str	r5, [r0, #4]
 801b1f4:	f821 9c08 	strh.w	r9, [r1, #-8]
 801b1f8:	f821 cc06 	strh.w	ip, [r1, #-6]
 801b1fc:	f821 8c04 	strh.w	r8, [r1, #-4]
 801b200:	f821 ec02 	strh.w	lr, [r1, #-2]
 801b204:	3308      	adds	r3, #8
 801b206:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801b20a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801b20e:	45e6      	cmp	lr, ip
 801b210:	dbf8      	blt.n	801b204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b212:	d105      	bne.n	801b220 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801b214:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b218:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b21c:	42ae      	cmp	r6, r5
 801b21e:	dbf1      	blt.n	801b204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b220:	4615      	mov	r5, r2
 801b222:	3a08      	subs	r2, #8
 801b224:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801b228:	45b4      	cmp	ip, r6
 801b22a:	dbf9      	blt.n	801b220 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801b22c:	d105      	bne.n	801b23a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801b22e:	f9b0 8000 	ldrsh.w	r8, [r0]
 801b232:	f9b2 6000 	ldrsh.w	r6, [r2]
 801b236:	45b0      	cmp	r8, r6
 801b238:	dbf2      	blt.n	801b220 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801b23a:	4293      	cmp	r3, r2
 801b23c:	f1a5 0608 	sub.w	r6, r5, #8
 801b240:	d816      	bhi.n	801b270 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801b242:	f8d6 c000 	ldr.w	ip, [r6]
 801b246:	f9b3 a000 	ldrsh.w	sl, [r3]
 801b24a:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801b24e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801b252:	f8c3 c000 	str.w	ip, [r3]
 801b256:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801b25a:	f8c3 c004 	str.w	ip, [r3, #4]
 801b25e:	f825 ac08 	strh.w	sl, [r5, #-8]
 801b262:	f825 ec06 	strh.w	lr, [r5, #-6]
 801b266:	f825 9c04 	strh.w	r9, [r5, #-4]
 801b26a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801b26e:	e7c9      	b.n	801b204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801b270:	f8d6 e000 	ldr.w	lr, [r6]
 801b274:	f9b0 a000 	ldrsh.w	sl, [r0]
 801b278:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801b27c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801b280:	f8c0 e000 	str.w	lr, [r0]
 801b284:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801b288:	1a16      	subs	r6, r2, r0
 801b28a:	f8c0 e004 	str.w	lr, [r0, #4]
 801b28e:	f825 ac08 	strh.w	sl, [r5, #-8]
 801b292:	f825 cc06 	strh.w	ip, [r5, #-6]
 801b296:	f825 9c04 	strh.w	r9, [r5, #-4]
 801b29a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801b29e:	1acd      	subs	r5, r1, r3
 801b2a0:	10ed      	asrs	r5, r5, #3
 801b2a2:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801b2a6:	bfb5      	itete	lt
 801b2a8:	e9c4 0200 	strdlt	r0, r2, [r4]
 801b2ac:	e9c4 3100 	strdge	r3, r1, [r4]
 801b2b0:	460a      	movlt	r2, r1
 801b2b2:	4603      	movge	r3, r0
 801b2b4:	3408      	adds	r4, #8
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	4611      	mov	r1, r2
 801b2ba:	e724      	b.n	801b106 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801b2bc:	4299      	cmp	r1, r3
 801b2be:	d927      	bls.n	801b310 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801b2c0:	f1a3 0210 	sub.w	r2, r3, #16
 801b2c4:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801b2c8:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801b2cc:	45ac      	cmp	ip, r5
 801b2ce:	db06      	blt.n	801b2de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801b2d0:	d11c      	bne.n	801b30c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801b2d2:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801b2d6:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801b2da:	42ae      	cmp	r6, r5
 801b2dc:	da16      	bge.n	801b30c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801b2de:	4615      	mov	r5, r2
 801b2e0:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801b2e4:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801b2e8:	3a08      	subs	r2, #8
 801b2ea:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801b2ee:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801b2f2:	6196      	str	r6, [r2, #24]
 801b2f4:	42a8      	cmp	r0, r5
 801b2f6:	686e      	ldr	r6, [r5, #4]
 801b2f8:	f8a2 9010 	strh.w	r9, [r2, #16]
 801b2fc:	61d6      	str	r6, [r2, #28]
 801b2fe:	f8a2 c012 	strh.w	ip, [r2, #18]
 801b302:	f8a2 8014 	strh.w	r8, [r2, #20]
 801b306:	f8a2 e016 	strh.w	lr, [r2, #22]
 801b30a:	d1db      	bne.n	801b2c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801b30c:	3308      	adds	r3, #8
 801b30e:	e7d5      	b.n	801b2bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801b310:	42bc      	cmp	r4, r7
 801b312:	d903      	bls.n	801b31c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801b314:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801b318:	3c08      	subs	r4, #8
 801b31a:	e6f4      	b.n	801b106 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801b31c:	b050      	add	sp, #320	@ 0x140
 801b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b322 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801b322:	b510      	push	{r4, lr}
 801b324:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b326:	4604      	mov	r4, r0
 801b328:	07da      	lsls	r2, r3, #31
 801b32a:	d507      	bpl.n	801b33c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801b32c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801b330:	f7ff fe8c 	bl	801b04c <_ZN8touchgfx7Outline6lineToEii>
 801b334:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b336:	f023 0301 	bic.w	r3, r3, #1
 801b33a:	6243      	str	r3, [r0, #36]	@ 0x24
 801b33c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b33e:	079b      	lsls	r3, r3, #30
 801b340:	d521      	bpl.n	801b386 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801b342:	6923      	ldr	r3, [r4, #16]
 801b344:	88d9      	ldrh	r1, [r3, #6]
 801b346:	889a      	ldrh	r2, [r3, #4]
 801b348:	430a      	orrs	r2, r1
 801b34a:	d010      	beq.n	801b36e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801b34c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b350:	2a00      	cmp	r2, #0
 801b352:	db0c      	blt.n	801b36e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801b354:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b356:	428a      	cmp	r2, r1
 801b358:	da09      	bge.n	801b36e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801b35a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801b35e:	4291      	cmp	r1, r2
 801b360:	f102 0201 	add.w	r2, r2, #1
 801b364:	bf88      	it	hi
 801b366:	3308      	addhi	r3, #8
 801b368:	60a2      	str	r2, [r4, #8]
 801b36a:	bf88      	it	hi
 801b36c:	6123      	strhi	r3, [r4, #16]
 801b36e:	68a1      	ldr	r1, [r4, #8]
 801b370:	b129      	cbz	r1, 801b37e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801b372:	6863      	ldr	r3, [r4, #4]
 801b374:	4299      	cmp	r1, r3
 801b376:	d802      	bhi.n	801b37e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801b378:	68e0      	ldr	r0, [r4, #12]
 801b37a:	f7ff febd 	bl	801b0f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801b37e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b380:	f023 0302 	bic.w	r3, r3, #2
 801b384:	6263      	str	r3, [r4, #36]	@ 0x24
 801b386:	68e0      	ldr	r0, [r4, #12]
 801b388:	bd10      	pop	{r4, pc}
	...

0801b38c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801b38c:	4b01      	ldr	r3, [pc, #4]	@ (801b394 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801b38e:	6818      	ldr	r0, [r3, #0]
 801b390:	4770      	bx	lr
 801b392:	bf00      	nop
 801b394:	24015c50 	.word	0x24015c50

0801b398 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801b398:	4b01      	ldr	r3, [pc, #4]	@ (801b3a0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801b39a:	6818      	ldr	r0, [r3, #0]
 801b39c:	4770      	bx	lr
 801b39e:	bf00      	nop
 801b3a0:	24015c54 	.word	0x24015c54

0801b3a4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801b3a4:	b510      	push	{r4, lr}
 801b3a6:	6803      	ldr	r3, [r0, #0]
 801b3a8:	460c      	mov	r4, r1
 801b3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ac:	4798      	blx	r3
 801b3ae:	1b03      	subs	r3, r0, r4
 801b3b0:	4258      	negs	r0, r3
 801b3b2:	4158      	adcs	r0, r3
 801b3b4:	bd10      	pop	{r4, pc}
	...

0801b3b8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801b3b8:	4b01      	ldr	r3, [pc, #4]	@ (801b3c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801b3ba:	6019      	str	r1, [r3, #0]
 801b3bc:	4770      	bx	lr
 801b3be:	bf00      	nop
 801b3c0:	24015c58 	.word	0x24015c58

0801b3c4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c8:	4696      	mov	lr, r2
 801b3ca:	b097      	sub	sp, #92	@ 0x5c
 801b3cc:	4605      	mov	r5, r0
 801b3ce:	4614      	mov	r4, r2
 801b3d0:	460e      	mov	r6, r1
 801b3d2:	461f      	mov	r7, r3
 801b3d4:	f10d 0c1c 	add.w	ip, sp, #28
 801b3d8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801b3dc:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801b3e0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801b3e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3ec:	f8de 3000 	ldr.w	r3, [lr]
 801b3f0:	f104 0e14 	add.w	lr, r4, #20
 801b3f4:	f8cc 3000 	str.w	r3, [ip]
 801b3f8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b3fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b404:	f8de 3000 	ldr.w	r3, [lr]
 801b408:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801b40c:	f8cc 3000 	str.w	r3, [ip]
 801b410:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801b414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b41c:	f8de 3000 	ldr.w	r3, [lr]
 801b420:	4631      	mov	r1, r6
 801b422:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b424:	4628      	mov	r0, r5
 801b426:	f8cc 3000 	str.w	r3, [ip]
 801b42a:	682b      	ldr	r3, [r5, #0]
 801b42c:	9201      	str	r2, [sp, #4]
 801b42e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b430:	f8cd 8008 	str.w	r8, [sp, #8]
 801b434:	9200      	str	r2, [sp, #0]
 801b436:	aa07      	add	r2, sp, #28
 801b438:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b43c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801b440:	463b      	mov	r3, r7
 801b442:	47d8      	blx	fp
 801b444:	46a6      	mov	lr, r4
 801b446:	f10d 0c1c 	add.w	ip, sp, #28
 801b44a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b44e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b452:	f8de 3000 	ldr.w	r3, [lr]
 801b456:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801b45a:	343c      	adds	r4, #60	@ 0x3c
 801b45c:	f8cc 3000 	str.w	r3, [ip]
 801b460:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b464:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b46c:	f8de 3000 	ldr.w	r3, [lr]
 801b470:	f8cc 3000 	str.w	r3, [ip]
 801b474:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801b478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b47a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b47e:	6823      	ldr	r3, [r4, #0]
 801b480:	4631      	mov	r1, r6
 801b482:	4628      	mov	r0, r5
 801b484:	f8cc 3000 	str.w	r3, [ip]
 801b488:	682b      	ldr	r3, [r5, #0]
 801b48a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b48e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b490:	f8cd 8008 	str.w	r8, [sp, #8]
 801b494:	9201      	str	r2, [sp, #4]
 801b496:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b498:	9200      	str	r2, [sp, #0]
 801b49a:	aa07      	add	r2, sp, #28
 801b49c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801b49e:	463b      	mov	r3, r7
 801b4a0:	47a0      	blx	r4
 801b4a2:	b017      	add	sp, #92	@ 0x5c
 801b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ac:	b08d      	sub	sp, #52	@ 0x34
 801b4ae:	4688      	mov	r8, r1
 801b4b0:	f8d3 c000 	ldr.w	ip, [r3]
 801b4b4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801b4b6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801b4ba:	680f      	ldr	r7, [r1, #0]
 801b4bc:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801b4c0:	eba7 070c 	sub.w	r7, r7, ip
 801b4c4:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801b4c8:	edd3 6a07 	vldr	s13, [r3, #28]
 801b4cc:	42bc      	cmp	r4, r7
 801b4ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b4d0:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801b4d4:	bfa8      	it	ge
 801b4d6:	463c      	movge	r4, r7
 801b4d8:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b4dc:	f9ba 1000 	ldrsh.w	r1, [sl]
 801b4e0:	ee07 4a90 	vmov	s15, r4
 801b4e4:	eb09 0e0c 	add.w	lr, r9, ip
 801b4e8:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801b4ec:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b4f0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801b4f4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801b4f8:	4571      	cmp	r1, lr
 801b4fa:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b4fe:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b502:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b506:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b50a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b50e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b512:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b516:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b51a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b51e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b522:	f340 808c 	ble.w	801b63e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801b526:	eba1 060e 	sub.w	r6, r1, lr
 801b52a:	fb96 f5f4 	sdiv	r5, r6, r4
 801b52e:	ee07 5a10 	vmov	s14, r5
 801b532:	2d00      	cmp	r5, #0
 801b534:	fb04 6615 	mls	r6, r4, r5, r6
 801b538:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b53c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b540:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b544:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b548:	dd12      	ble.n	801b570 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801b54a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b54e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b552:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b556:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b55e:	bf14      	ite	ne
 801b560:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b564:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b568:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b56c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b570:	fb05 f204 	mul.w	r2, r5, r4
 801b574:	1abf      	subs	r7, r7, r2
 801b576:	4494      	add	ip, r2
 801b578:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801b57c:	4411      	add	r1, r2
 801b57e:	eb09 020c 	add.w	r2, r9, ip
 801b582:	b209      	sxth	r1, r1
 801b584:	443a      	add	r2, r7
 801b586:	428a      	cmp	r2, r1
 801b588:	bfc4      	itt	gt
 801b58a:	eba1 0209 	subgt.w	r2, r1, r9
 801b58e:	eba2 070c 	subgt.w	r7, r2, ip
 801b592:	2f00      	cmp	r7, #0
 801b594:	dd50      	ble.n	801b638 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801b596:	fb97 f1f4 	sdiv	r1, r7, r4
 801b59a:	fb04 7211 	mls	r2, r4, r1, r7
 801b59e:	b90a      	cbnz	r2, 801b5a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801b5a0:	3901      	subs	r1, #1
 801b5a2:	4622      	mov	r2, r4
 801b5a4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b5a8:	6840      	ldr	r0, [r0, #4]
 801b5aa:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801b5ae:	44b6      	add	lr, r6
 801b5b0:	f8d0 a000 	ldr.w	sl, [r0]
 801b5b4:	2900      	cmp	r1, #0
 801b5b6:	bfcc      	ite	gt
 801b5b8:	46a1      	movgt	r9, r4
 801b5ba:	4691      	movle	r9, r2
 801b5bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801b5be:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801b5c0:	fb04 e505 	mla	r5, r4, r5, lr
 801b5c4:	eef0 6a42 	vmov.f32	s13, s4
 801b5c8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801b5cc:	9008      	str	r0, [sp, #32]
 801b5ce:	eeb0 7a61 	vmov.f32	s14, s3
 801b5d2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801b5d4:	695b      	ldr	r3, [r3, #20]
 801b5d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b5da:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801b5de:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b5e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b5e4:	445b      	add	r3, fp
 801b5e6:	9307      	str	r3, [sp, #28]
 801b5e8:	ee16 3a90 	vmov	r3, s13
 801b5ec:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801b5f0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b5f4:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b5f8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b5fc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b600:	ee17 7a90 	vmov	r7, s15
 801b604:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b608:	fb97 f7f4 	sdiv	r7, r7, r4
 801b60c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b610:	ee17 ca90 	vmov	ip, s15
 801b614:	fb9c fcf4 	sdiv	ip, ip, r4
 801b618:	fb0c 3306 	mla	r3, ip, r6, r3
 801b61c:	9302      	str	r3, [sp, #8]
 801b61e:	ee17 3a10 	vmov	r3, s14
 801b622:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801b626:	fb07 3706 	mla	r7, r7, r6, r3
 801b62a:	eba9 0306 	sub.w	r3, r9, r6
 801b62e:	e9cd 4700 	strd	r4, r7, [sp]
 801b632:	f8da 4008 	ldr.w	r4, [sl, #8]
 801b636:	47a0      	blx	r4
 801b638:	b00d      	add	sp, #52	@ 0x34
 801b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b63e:	2500      	movs	r5, #0
 801b640:	462e      	mov	r6, r5
 801b642:	e799      	b.n	801b578 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801b644 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b648:	b0db      	sub	sp, #364	@ 0x16c
 801b64a:	461d      	mov	r5, r3
 801b64c:	4614      	mov	r4, r2
 801b64e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801b652:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b654:	4629      	mov	r1, r5
 801b656:	930a      	str	r3, [sp, #40]	@ 0x28
 801b658:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801b65c:	9009      	str	r0, [sp, #36]	@ 0x24
 801b65e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b660:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801b664:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801b668:	9310      	str	r3, [sp, #64]	@ 0x40
 801b66a:	6803      	ldr	r3, [r0, #0]
 801b66c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801b66e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801b672:	47b8      	blx	r7
 801b674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b676:	6058      	str	r0, [r3, #4]
 801b678:	2800      	cmp	r0, #0
 801b67a:	f000 83a1 	beq.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b67e:	682b      	ldr	r3, [r5, #0]
 801b680:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801b684:	ed94 7a02 	vldr	s14, [r4, #8]
 801b688:	9314      	str	r3, [sp, #80]	@ 0x50
 801b68a:	686b      	ldr	r3, [r5, #4]
 801b68c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b690:	9315      	str	r3, [sp, #84]	@ 0x54
 801b692:	4bc1      	ldr	r3, [pc, #772]	@ (801b998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801b694:	7819      	ldrb	r1, [r3, #0]
 801b696:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801b69a:	2900      	cmp	r1, #0
 801b69c:	bf16      	itet	ne
 801b69e:	4619      	movne	r1, r3
 801b6a0:	4611      	moveq	r1, r2
 801b6a2:	4613      	movne	r3, r2
 801b6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a8:	9116      	str	r1, [sp, #88]	@ 0x58
 801b6aa:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801b6ae:	f240 8387 	bls.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6b2:	ed94 7a07 	vldr	s14, [r4, #28]
 801b6b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6be:	f240 837f 	bls.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6c2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801b6c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ce:	f240 8377 	bls.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6d2:	6822      	ldr	r2, [r4, #0]
 801b6d4:	4bb1      	ldr	r3, [pc, #708]	@ (801b99c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801b6d6:	429a      	cmp	r2, r3
 801b6d8:	f2c0 8372 	blt.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6dc:	49b0      	ldr	r1, [pc, #704]	@ (801b9a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801b6de:	6963      	ldr	r3, [r4, #20]
 801b6e0:	428a      	cmp	r2, r1
 801b6e2:	f300 836d 	bgt.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6e6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801b6ea:	48ae      	ldr	r0, [pc, #696]	@ (801b9a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801b6ec:	33ff      	adds	r3, #255	@ 0xff
 801b6ee:	4283      	cmp	r3, r0
 801b6f0:	f200 8366 	bhi.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b6f6:	4dac      	ldr	r5, [pc, #688]	@ (801b9a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801b6f8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801b6fc:	33ff      	adds	r3, #255	@ 0xff
 801b6fe:	42ab      	cmp	r3, r5
 801b700:	f200 835e 	bhi.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b704:	6862      	ldr	r2, [r4, #4]
 801b706:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801b70a:	33ff      	adds	r3, #255	@ 0xff
 801b70c:	4283      	cmp	r3, r0
 801b70e:	f200 8357 	bhi.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b712:	69a1      	ldr	r1, [r4, #24]
 801b714:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801b718:	33ff      	adds	r3, #255	@ 0xff
 801b71a:	4283      	cmp	r3, r0
 801b71c:	f200 8350 	bhi.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b720:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b722:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801b726:	30ff      	adds	r0, #255	@ 0xff
 801b728:	42a8      	cmp	r0, r5
 801b72a:	f200 8349 	bhi.w	801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b72e:	428a      	cmp	r2, r1
 801b730:	f280 8110 	bge.w	801b954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801b734:	429a      	cmp	r2, r3
 801b736:	f300 8119 	bgt.w	801b96c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801b73a:	4299      	cmp	r1, r3
 801b73c:	f280 811d 	bge.w	801b97a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801b740:	2502      	movs	r5, #2
 801b742:	2701      	movs	r7, #1
 801b744:	46a9      	mov	r9, r5
 801b746:	46b8      	mov	r8, r7
 801b748:	f04f 0a00 	mov.w	sl, #0
 801b74c:	4621      	mov	r1, r4
 801b74e:	a849      	add	r0, sp, #292	@ 0x124
 801b750:	f003 fb3c 	bl	801edcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801b754:	4622      	mov	r2, r4
 801b756:	4653      	mov	r3, sl
 801b758:	a949      	add	r1, sp, #292	@ 0x124
 801b75a:	f8cd 9000 	str.w	r9, [sp]
 801b75e:	a819      	add	r0, sp, #100	@ 0x64
 801b760:	f003 fc64 	bl	801f02c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b764:	4622      	mov	r2, r4
 801b766:	4653      	mov	r3, sl
 801b768:	a949      	add	r1, sp, #292	@ 0x124
 801b76a:	f8cd 8000 	str.w	r8, [sp]
 801b76e:	a829      	add	r0, sp, #164	@ 0xa4
 801b770:	f003 fc5c 	bl	801f02c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b774:	4643      	mov	r3, r8
 801b776:	4622      	mov	r2, r4
 801b778:	a949      	add	r1, sp, #292	@ 0x124
 801b77a:	f8cd 9000 	str.w	r9, [sp]
 801b77e:	a839      	add	r0, sp, #228	@ 0xe4
 801b780:	f003 fc54 	bl	801f02c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b784:	42af      	cmp	r7, r5
 801b786:	af12      	add	r7, sp, #72	@ 0x48
 801b788:	bfb7      	itett	lt
 801b78a:	2300      	movlt	r3, #0
 801b78c:	2301      	movge	r3, #1
 801b78e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801b790:	ac19      	addlt	r4, sp, #100	@ 0x64
 801b792:	bfb1      	iteee	lt
 801b794:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801b796:	ad19      	addge	r5, sp, #100	@ 0x64
 801b798:	930e      	strge	r3, [sp, #56]	@ 0x38
 801b79a:	ac29      	addge	r4, sp, #164	@ 0xa4
 801b79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b79e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b7a2:	e887 0003 	stmia.w	r7, {r0, r1}
 801b7a6:	b928      	cbnz	r0, 801b7b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801b7a8:	4b80      	ldr	r3, [pc, #512]	@ (801b9ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801b7aa:	6818      	ldr	r0, [r3, #0]
 801b7ac:	6803      	ldr	r3, [r0, #0]
 801b7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7b0:	4798      	blx	r3
 801b7b2:	6038      	str	r0, [r7, #0]
 801b7b4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801b7b6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b7ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b7be:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801b7c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801b7c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b7c4:	6963      	ldr	r3, [r4, #20]
 801b7c6:	440b      	add	r3, r1
 801b7c8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b7cc:	4408      	add	r0, r1
 801b7ce:	b200      	sxth	r0, r0
 801b7d0:	4283      	cmp	r3, r0
 801b7d2:	900d      	str	r0, [sp, #52]	@ 0x34
 801b7d4:	f280 80dd 	bge.w	801b992 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801b7d8:	428b      	cmp	r3, r1
 801b7da:	da08      	bge.n	801b7ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b7dc:	2a00      	cmp	r2, #0
 801b7de:	dd06      	ble.n	801b7ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b7e0:	1acb      	subs	r3, r1, r3
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	f2c0 80e4 	blt.w	801b9b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	f300 80e2 	bgt.w	801b9b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801b7ee:	6967      	ldr	r7, [r4, #20]
 801b7f0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801b7f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b7f6:	443b      	add	r3, r7
 801b7f8:	461f      	mov	r7, r3
 801b7fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b7fc:	1bdf      	subs	r7, r3, r7
 801b7fe:	4297      	cmp	r7, r2
 801b800:	bfa8      	it	ge
 801b802:	4617      	movge	r7, r2
 801b804:	2f00      	cmp	r7, #0
 801b806:	f340 8166 	ble.w	801bad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801b80a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801b80c:	6829      	ldr	r1, [r5, #0]
 801b80e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b812:	f9bb 3000 	ldrsh.w	r3, [fp]
 801b816:	4411      	add	r1, r2
 801b818:	6820      	ldr	r0, [r4, #0]
 801b81a:	4299      	cmp	r1, r3
 801b81c:	dd1a      	ble.n	801b854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b81e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801b822:	4402      	add	r2, r0
 801b824:	440b      	add	r3, r1
 801b826:	b21b      	sxth	r3, r3
 801b828:	429a      	cmp	r2, r3
 801b82a:	dc13      	bgt.n	801b854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b82c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b82e:	a912      	add	r1, sp, #72	@ 0x48
 801b830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	9206      	str	r2, [sp, #24]
 801b838:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b83a:	9500      	str	r5, [sp, #0]
 801b83c:	9205      	str	r2, [sp, #20]
 801b83e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b840:	e9cd b203 	strd	fp, r2, [sp, #12]
 801b844:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801b846:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801b84a:	aa49      	add	r2, sp, #292	@ 0x124
 801b84c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801b850:	4623      	mov	r3, r4
 801b852:	47c8      	blx	r9
 801b854:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801b858:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801b85c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801b860:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b864:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801b868:	68a1      	ldr	r1, [r4, #8]
 801b86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b86e:	ed94 6a08 	vldr	s12, [r4, #32]
 801b872:	edd4 6a07 	vldr	s13, [r4, #28]
 801b876:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801b87a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b87e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801b882:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b886:	edc4 6a07 	vstr	s13, [r4, #28]
 801b88a:	441a      	add	r2, r3
 801b88c:	6963      	ldr	r3, [r4, #20]
 801b88e:	3301      	adds	r3, #1
 801b890:	6022      	str	r2, [r4, #0]
 801b892:	6163      	str	r3, [r4, #20]
 801b894:	69a3      	ldr	r3, [r4, #24]
 801b896:	3b01      	subs	r3, #1
 801b898:	61a3      	str	r3, [r4, #24]
 801b89a:	6923      	ldr	r3, [r4, #16]
 801b89c:	440b      	add	r3, r1
 801b89e:	68e1      	ldr	r1, [r4, #12]
 801b8a0:	428b      	cmp	r3, r1
 801b8a2:	6123      	str	r3, [r4, #16]
 801b8a4:	db15      	blt.n	801b8d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801b8a6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801b8aa:	3201      	adds	r2, #1
 801b8ac:	1a5b      	subs	r3, r3, r1
 801b8ae:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b8b2:	6022      	str	r2, [r4, #0]
 801b8b4:	6123      	str	r3, [r4, #16]
 801b8b6:	edc4 6a07 	vstr	s13, [r4, #28]
 801b8ba:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801b8be:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b8c2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801b8c6:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801b8ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b8ce:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801b8d2:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801b8d6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801b8da:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801b8de:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b8e2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801b8e6:	68a9      	ldr	r1, [r5, #8]
 801b8e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b8ec:	ed95 6a08 	vldr	s12, [r5, #32]
 801b8f0:	edd5 6a07 	vldr	s13, [r5, #28]
 801b8f4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801b8f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b8fc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801b900:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b904:	edc5 6a07 	vstr	s13, [r5, #28]
 801b908:	441a      	add	r2, r3
 801b90a:	696b      	ldr	r3, [r5, #20]
 801b90c:	3301      	adds	r3, #1
 801b90e:	602a      	str	r2, [r5, #0]
 801b910:	616b      	str	r3, [r5, #20]
 801b912:	69ab      	ldr	r3, [r5, #24]
 801b914:	3b01      	subs	r3, #1
 801b916:	61ab      	str	r3, [r5, #24]
 801b918:	692b      	ldr	r3, [r5, #16]
 801b91a:	440b      	add	r3, r1
 801b91c:	68e9      	ldr	r1, [r5, #12]
 801b91e:	428b      	cmp	r3, r1
 801b920:	612b      	str	r3, [r5, #16]
 801b922:	db15      	blt.n	801b950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801b924:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801b928:	3201      	adds	r2, #1
 801b92a:	1a5b      	subs	r3, r3, r1
 801b92c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b930:	602a      	str	r2, [r5, #0]
 801b932:	612b      	str	r3, [r5, #16]
 801b934:	edc5 6a07 	vstr	s13, [r5, #28]
 801b938:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801b93c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b940:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801b944:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801b948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b94c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801b950:	3f01      	subs	r7, #1
 801b952:	e757      	b.n	801b804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801b954:	4299      	cmp	r1, r3
 801b956:	dc13      	bgt.n	801b980 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801b958:	429a      	cmp	r2, r3
 801b95a:	da14      	bge.n	801b986 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801b95c:	2502      	movs	r5, #2
 801b95e:	2703      	movs	r7, #3
 801b960:	f04f 0800 	mov.w	r8, #0
 801b964:	46a9      	mov	r9, r5
 801b966:	f04f 0a01 	mov.w	sl, #1
 801b96a:	e6ef      	b.n	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b96c:	2501      	movs	r5, #1
 801b96e:	2700      	movs	r7, #0
 801b970:	46a9      	mov	r9, r5
 801b972:	46b8      	mov	r8, r7
 801b974:	f04f 0a02 	mov.w	sl, #2
 801b978:	e6e8      	b.n	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b97a:	2501      	movs	r5, #1
 801b97c:	2702      	movs	r7, #2
 801b97e:	e6e1      	b.n	801b744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801b980:	2500      	movs	r5, #0
 801b982:	2701      	movs	r7, #1
 801b984:	e7f4      	b.n	801b970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801b986:	2702      	movs	r7, #2
 801b988:	2503      	movs	r5, #3
 801b98a:	f04f 0900 	mov.w	r9, #0
 801b98e:	46b8      	mov	r8, r7
 801b990:	e7e9      	b.n	801b966 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801b992:	4613      	mov	r3, r2
 801b994:	e728      	b.n	801b7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801b996:	bf00      	nop
 801b998:	24015c40 	.word	0x24015c40
 801b99c:	fffd8f01 	.word	0xfffd8f01
 801b9a0:	00027100 	.word	0x00027100
 801b9a4:	0004e1ff 	.word	0x0004e1ff
 801b9a8:	0004e1fe 	.word	0x0004e1fe
 801b9ac:	24015c48 	.word	0x24015c48
 801b9b0:	4613      	mov	r3, r2
 801b9b2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801b9b4:	469e      	mov	lr, r3
 801b9b6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801b9b8:	469c      	mov	ip, r3
 801b9ba:	9111      	str	r1, [sp, #68]	@ 0x44
 801b9bc:	f04f 0900 	mov.w	r9, #0
 801b9c0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801b9c4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801b9c8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801b9cc:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801b9d0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801b9d4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b9d8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801b9dc:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801b9e0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801b9e4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801b9e8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801b9ec:	f1bc 0f00 	cmp.w	ip, #0
 801b9f0:	d147      	bne.n	801ba82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801b9f2:	eb03 0c07 	add.w	ip, r3, r7
 801b9f6:	1ad7      	subs	r7, r2, r3
 801b9f8:	f1b9 0f00 	cmp.w	r9, #0
 801b9fc:	d009      	beq.n	801ba12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801b9fe:	9029      	str	r0, [sp, #164]	@ 0xa4
 801ba00:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801ba04:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801ba08:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801ba0c:	912d      	str	r1, [sp, #180]	@ 0xb4
 801ba0e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801ba12:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801ba14:	f04f 0800 	mov.w	r8, #0
 801ba18:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801ba1c:	9111      	str	r1, [sp, #68]	@ 0x44
 801ba1e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801ba22:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801ba26:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801ba2a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801ba2e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801ba32:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801ba36:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801ba3a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801ba3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801ba42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801ba46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801ba4a:	f1be 0f00 	cmp.w	lr, #0
 801ba4e:	d031      	beq.n	801bab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ba50:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ba52:	4450      	add	r0, sl
 801ba54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ba58:	4431      	add	r1, r6
 801ba5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ba5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ba62:	4549      	cmp	r1, r9
 801ba64:	db08      	blt.n	801ba78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ba66:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ba6a:	3001      	adds	r0, #1
 801ba6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ba70:	eba1 0109 	sub.w	r1, r1, r9
 801ba74:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ba78:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ba7c:	f04f 0801 	mov.w	r8, #1
 801ba80:	e7e3      	b.n	801ba4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ba82:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ba84:	4450      	add	r0, sl
 801ba86:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ba8a:	4431      	add	r1, r6
 801ba8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ba90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ba94:	4541      	cmp	r1, r8
 801ba96:	db08      	blt.n	801baaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801ba98:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ba9c:	3001      	adds	r0, #1
 801ba9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801baa2:	eba1 0108 	sub.w	r1, r1, r8
 801baa6:	ee77 7a86 	vadd.f32	s15, s15, s12
 801baaa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801baae:	f04f 0901 	mov.w	r9, #1
 801bab2:	e79b      	b.n	801b9ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801bab4:	449c      	add	ip, r3
 801bab6:	1aff      	subs	r7, r7, r3
 801bab8:	f1b8 0f00 	cmp.w	r8, #0
 801babc:	d009      	beq.n	801bad2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801babe:	9019      	str	r0, [sp, #100]	@ 0x64
 801bac0:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801bac4:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801bac8:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801bacc:	911d      	str	r1, [sp, #116]	@ 0x74
 801bace:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801bad2:	1ad2      	subs	r2, r2, r3
 801bad4:	e68b      	b.n	801b7ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bad8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801bada:	2b00      	cmp	r3, #0
 801badc:	f000 80d1 	beq.w	801bc82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801bae0:	ad19      	add	r5, sp, #100	@ 0x64
 801bae2:	ac39      	add	r4, sp, #228	@ 0xe4
 801bae4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801bae6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801baea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801baee:	930c      	str	r3, [sp, #48]	@ 0x30
 801baf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801baf2:	6963      	ldr	r3, [r4, #20]
 801baf4:	440b      	add	r3, r1
 801baf6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bafa:	4408      	add	r0, r1
 801bafc:	b200      	sxth	r0, r0
 801bafe:	4283      	cmp	r3, r0
 801bb00:	900d      	str	r0, [sp, #52]	@ 0x34
 801bb02:	f280 80c1 	bge.w	801bc88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801bb06:	428b      	cmp	r3, r1
 801bb08:	da08      	bge.n	801bb1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bb0a:	2a00      	cmp	r2, #0
 801bb0c:	dd06      	ble.n	801bb1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bb0e:	1acb      	subs	r3, r1, r3
 801bb10:	429a      	cmp	r2, r3
 801bb12:	f2c0 80bb 	blt.w	801bc8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	f300 80b9 	bgt.w	801bc8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801bb1c:	6967      	ldr	r7, [r4, #20]
 801bb1e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801bb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb24:	443b      	add	r3, r7
 801bb26:	461f      	mov	r7, r3
 801bb28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bb2a:	1bdf      	subs	r7, r3, r7
 801bb2c:	4297      	cmp	r7, r2
 801bb2e:	bfa8      	it	ge
 801bb30:	4617      	movge	r7, r2
 801bb32:	2f00      	cmp	r7, #0
 801bb34:	f340 813c 	ble.w	801bdb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801bb38:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801bb3a:	6829      	ldr	r1, [r5, #0]
 801bb3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb40:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bb44:	4411      	add	r1, r2
 801bb46:	6820      	ldr	r0, [r4, #0]
 801bb48:	4299      	cmp	r1, r3
 801bb4a:	dd1a      	ble.n	801bb82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bb4c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bb50:	4402      	add	r2, r0
 801bb52:	440b      	add	r3, r1
 801bb54:	b21b      	sxth	r3, r3
 801bb56:	429a      	cmp	r2, r3
 801bb58:	dc13      	bgt.n	801bb82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bb5a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bb5c:	a912      	add	r1, sp, #72	@ 0x48
 801bb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	9206      	str	r2, [sp, #24]
 801bb66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bb68:	9500      	str	r5, [sp, #0]
 801bb6a:	9205      	str	r2, [sp, #20]
 801bb6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bb6e:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bb72:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801bb74:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bb78:	aa49      	add	r2, sp, #292	@ 0x124
 801bb7a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801bb7e:	4623      	mov	r3, r4
 801bb80:	47c8      	blx	r9
 801bb82:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801bb86:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801bb8a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801bb8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb92:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801bb96:	68a1      	ldr	r1, [r4, #8]
 801bb98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb9c:	ed94 6a08 	vldr	s12, [r4, #32]
 801bba0:	edd4 6a07 	vldr	s13, [r4, #28]
 801bba4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801bba8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bbac:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801bbb0:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bbb4:	edc4 6a07 	vstr	s13, [r4, #28]
 801bbb8:	441a      	add	r2, r3
 801bbba:	6963      	ldr	r3, [r4, #20]
 801bbbc:	3301      	adds	r3, #1
 801bbbe:	6022      	str	r2, [r4, #0]
 801bbc0:	6163      	str	r3, [r4, #20]
 801bbc2:	69a3      	ldr	r3, [r4, #24]
 801bbc4:	3b01      	subs	r3, #1
 801bbc6:	61a3      	str	r3, [r4, #24]
 801bbc8:	6923      	ldr	r3, [r4, #16]
 801bbca:	440b      	add	r3, r1
 801bbcc:	68e1      	ldr	r1, [r4, #12]
 801bbce:	428b      	cmp	r3, r1
 801bbd0:	6123      	str	r3, [r4, #16]
 801bbd2:	db15      	blt.n	801bc00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801bbd4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801bbd8:	3201      	adds	r2, #1
 801bbda:	1a5b      	subs	r3, r3, r1
 801bbdc:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bbe0:	6022      	str	r2, [r4, #0]
 801bbe2:	6123      	str	r3, [r4, #16]
 801bbe4:	edc4 6a07 	vstr	s13, [r4, #28]
 801bbe8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801bbec:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bbf0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801bbf4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801bbf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bbfc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801bc00:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801bc04:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801bc08:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801bc0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bc10:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801bc14:	68a9      	ldr	r1, [r5, #8]
 801bc16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc1a:	ed95 6a08 	vldr	s12, [r5, #32]
 801bc1e:	edd5 6a07 	vldr	s13, [r5, #28]
 801bc22:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801bc26:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bc2a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801bc2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bc32:	edc5 6a07 	vstr	s13, [r5, #28]
 801bc36:	441a      	add	r2, r3
 801bc38:	696b      	ldr	r3, [r5, #20]
 801bc3a:	3301      	adds	r3, #1
 801bc3c:	602a      	str	r2, [r5, #0]
 801bc3e:	616b      	str	r3, [r5, #20]
 801bc40:	69ab      	ldr	r3, [r5, #24]
 801bc42:	3b01      	subs	r3, #1
 801bc44:	61ab      	str	r3, [r5, #24]
 801bc46:	692b      	ldr	r3, [r5, #16]
 801bc48:	440b      	add	r3, r1
 801bc4a:	68e9      	ldr	r1, [r5, #12]
 801bc4c:	428b      	cmp	r3, r1
 801bc4e:	612b      	str	r3, [r5, #16]
 801bc50:	db15      	blt.n	801bc7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801bc52:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801bc56:	3201      	adds	r2, #1
 801bc58:	1a5b      	subs	r3, r3, r1
 801bc5a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bc5e:	602a      	str	r2, [r5, #0]
 801bc60:	612b      	str	r3, [r5, #16]
 801bc62:	edc5 6a07 	vstr	s13, [r5, #28]
 801bc66:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801bc6a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bc6e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801bc72:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801bc76:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bc7a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801bc7e:	3f01      	subs	r7, #1
 801bc80:	e757      	b.n	801bb32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801bc82:	ad39      	add	r5, sp, #228	@ 0xe4
 801bc84:	ac19      	add	r4, sp, #100	@ 0x64
 801bc86:	e72d      	b.n	801bae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801bc88:	4613      	mov	r3, r2
 801bc8a:	e744      	b.n	801bb16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801bc8c:	4613      	mov	r3, r2
 801bc8e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801bc90:	469e      	mov	lr, r3
 801bc92:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801bc96:	461f      	mov	r7, r3
 801bc98:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801bc9c:	f04f 0900 	mov.w	r9, #0
 801bca0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801bca4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801bca8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801bcac:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801bcb0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801bcb4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801bcb6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801bcba:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801bcbe:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801bcc2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801bcc6:	960e      	str	r6, [sp, #56]	@ 0x38
 801bcc8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801bccc:	2f00      	cmp	r7, #0
 801bcce:	d146      	bne.n	801bd5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801bcd0:	449c      	add	ip, r3
 801bcd2:	1ad7      	subs	r7, r2, r3
 801bcd4:	f1b9 0f00 	cmp.w	r9, #0
 801bcd8:	d009      	beq.n	801bcee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801bcda:	9039      	str	r0, [sp, #228]	@ 0xe4
 801bcdc:	913d      	str	r1, [sp, #244]	@ 0xf4
 801bcde:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801bce2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801bce6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801bcea:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801bcee:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801bcf0:	f04f 0800 	mov.w	r8, #0
 801bcf4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801bcf8:	910e      	str	r1, [sp, #56]	@ 0x38
 801bcfa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801bcfe:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801bd02:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801bd06:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801bd0a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801bd0e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801bd12:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801bd16:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801bd1a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801bd1e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801bd22:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801bd26:	f1be 0f00 	cmp.w	lr, #0
 801bd2a:	d030      	beq.n	801bd8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801bd2c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801bd2e:	4450      	add	r0, sl
 801bd30:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801bd34:	4431      	add	r1, r6
 801bd36:	ee37 7a04 	vadd.f32	s14, s14, s8
 801bd3a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bd3e:	4549      	cmp	r1, r9
 801bd40:	db08      	blt.n	801bd54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801bd42:	ee77 7a85 	vadd.f32	s15, s15, s10
 801bd46:	3001      	adds	r0, #1
 801bd48:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801bd4c:	eba1 0109 	sub.w	r1, r1, r9
 801bd50:	ee37 7a06 	vadd.f32	s14, s14, s12
 801bd54:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bd58:	f04f 0801 	mov.w	r8, #1
 801bd5c:	e7e3      	b.n	801bd26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801bd5e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801bd60:	4450      	add	r0, sl
 801bd62:	ee37 7a24 	vadd.f32	s14, s14, s9
 801bd66:	4431      	add	r1, r6
 801bd68:	ee77 7a84 	vadd.f32	s15, s15, s8
 801bd6c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801bd70:	4541      	cmp	r1, r8
 801bd72:	db08      	blt.n	801bd86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801bd74:	ee76 6a85 	vadd.f32	s13, s13, s10
 801bd78:	3001      	adds	r0, #1
 801bd7a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801bd7e:	eba1 0108 	sub.w	r1, r1, r8
 801bd82:	ee77 7a86 	vadd.f32	s15, s15, s12
 801bd86:	3f01      	subs	r7, #1
 801bd88:	f04f 0901 	mov.w	r9, #1
 801bd8c:	e79e      	b.n	801bccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801bd8e:	449c      	add	ip, r3
 801bd90:	1aff      	subs	r7, r7, r3
 801bd92:	f1b8 0f00 	cmp.w	r8, #0
 801bd96:	d009      	beq.n	801bdac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801bd98:	9019      	str	r0, [sp, #100]	@ 0x64
 801bd9a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801bd9e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801bda2:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801bda6:	911d      	str	r1, [sp, #116]	@ 0x74
 801bda8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801bdac:	1ad2      	subs	r2, r2, r3
 801bdae:	e6b5      	b.n	801bb1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bdb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	b923      	cbnz	r3, 801bdc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdb6:	4b04      	ldr	r3, [pc, #16]	@ (801bdc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801bdb8:	6818      	ldr	r0, [r3, #0]
 801bdba:	6803      	ldr	r3, [r0, #0]
 801bdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdbe:	4798      	blx	r3
 801bdc0:	b05b      	add	sp, #364	@ 0x16c
 801bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc6:	bf00      	nop
 801bdc8:	24015c48 	.word	0x24015c48

0801bdcc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801bdcc:	2b03      	cmp	r3, #3
 801bdce:	d818      	bhi.n	801be02 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801bdd0:	e8df f003 	tbb	[pc, r3]
 801bdd4:	130d0602 	.word	0x130d0602
 801bdd8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bddc:	1850      	adds	r0, r2, r1
 801bdde:	4770      	bx	lr
 801bde0:	8803      	ldrh	r3, [r0, #0]
 801bde2:	8880      	ldrh	r0, [r0, #4]
 801bde4:	4418      	add	r0, r3
 801bde6:	b200      	sxth	r0, r0
 801bde8:	1a80      	subs	r0, r0, r2
 801bdea:	3801      	subs	r0, #1
 801bdec:	4770      	bx	lr
 801bdee:	8803      	ldrh	r3, [r0, #0]
 801bdf0:	8880      	ldrh	r0, [r0, #4]
 801bdf2:	4418      	add	r0, r3
 801bdf4:	b200      	sxth	r0, r0
 801bdf6:	1a40      	subs	r0, r0, r1
 801bdf8:	e7f7      	b.n	801bdea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801bdfa:	f9b0 0000 	ldrsh.w	r0, [r0]
 801bdfe:	4410      	add	r0, r2
 801be00:	4770      	bx	lr
 801be02:	2000      	movs	r0, #0
 801be04:	4770      	bx	lr

0801be06 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801be06:	2b03      	cmp	r3, #3
 801be08:	d817      	bhi.n	801be3a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801be0a:	e8df f003 	tbb	[pc, r3]
 801be0e:	0602      	.short	0x0602
 801be10:	1009      	.short	0x1009
 801be12:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801be16:	1850      	adds	r0, r2, r1
 801be18:	4770      	bx	lr
 801be1a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801be1e:	e7fa      	b.n	801be16 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801be20:	8843      	ldrh	r3, [r0, #2]
 801be22:	88c0      	ldrh	r0, [r0, #6]
 801be24:	4418      	add	r0, r3
 801be26:	b200      	sxth	r0, r0
 801be28:	1a80      	subs	r0, r0, r2
 801be2a:	3801      	subs	r0, #1
 801be2c:	4770      	bx	lr
 801be2e:	8843      	ldrh	r3, [r0, #2]
 801be30:	88c0      	ldrh	r0, [r0, #6]
 801be32:	4418      	add	r0, r3
 801be34:	b200      	sxth	r0, r0
 801be36:	1a40      	subs	r0, r0, r1
 801be38:	e7f7      	b.n	801be2a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801be3a:	2000      	movs	r0, #0
 801be3c:	4770      	bx	lr
	...

0801be40 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801be40:	4b01      	ldr	r3, [pc, #4]	@ (801be48 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801be42:	2200      	movs	r2, #0
 801be44:	601a      	str	r2, [r3, #0]
 801be46:	4770      	bx	lr
 801be48:	24015c58 	.word	0x24015c58

0801be4c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801be4c:	4603      	mov	r3, r0
 801be4e:	b1c8      	cbz	r0, 801be84 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801be50:	0c02      	lsrs	r2, r0, #16
 801be52:	0412      	lsls	r2, r2, #16
 801be54:	b9a2      	cbnz	r2, 801be80 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801be56:	0403      	lsls	r3, r0, #16
 801be58:	2010      	movs	r0, #16
 801be5a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801be5e:	bf04      	itt	eq
 801be60:	021b      	lsleq	r3, r3, #8
 801be62:	3008      	addeq	r0, #8
 801be64:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801be68:	bf04      	itt	eq
 801be6a:	011b      	lsleq	r3, r3, #4
 801be6c:	3004      	addeq	r0, #4
 801be6e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801be72:	bf04      	itt	eq
 801be74:	009b      	lsleq	r3, r3, #2
 801be76:	3002      	addeq	r0, #2
 801be78:	2b00      	cmp	r3, #0
 801be7a:	db04      	blt.n	801be86 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801be7c:	3001      	adds	r0, #1
 801be7e:	4770      	bx	lr
 801be80:	2000      	movs	r0, #0
 801be82:	e7ea      	b.n	801be5a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801be84:	2020      	movs	r0, #32
 801be86:	4770      	bx	lr

0801be88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be8c:	b087      	sub	sp, #28
 801be8e:	460d      	mov	r5, r1
 801be90:	4616      	mov	r6, r2
 801be92:	4698      	mov	r8, r3
 801be94:	4601      	mov	r1, r0
 801be96:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801be9a:	b120      	cbz	r0, 801bea6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801be9c:	b11a      	cbz	r2, 801bea6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801be9e:	2d1f      	cmp	r5, #31
 801bea0:	d801      	bhi.n	801bea6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801bea2:	2b1f      	cmp	r3, #31
 801bea4:	d904      	bls.n	801beb0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801bea6:	2000      	movs	r0, #0
 801bea8:	6038      	str	r0, [r7, #0]
 801beaa:	b007      	add	sp, #28
 801beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beb0:	b97d      	cbnz	r5, 801bed2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801beb2:	b143      	cbz	r3, 801bec6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801beb4:	4602      	mov	r2, r0
 801beb6:	462b      	mov	r3, r5
 801beb8:	4641      	mov	r1, r8
 801beba:	4630      	mov	r0, r6
 801bebc:	e9cd 4700 	strd	r4, r7, [sp]
 801bec0:	f7ff ffe2 	bl	801be88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bec4:	e7f1      	b.n	801beaa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801bec6:	f04f 33ff 	mov.w	r3, #4294967295
 801beca:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801bece:	603b      	str	r3, [r7, #0]
 801bed0:	e7eb      	b.n	801beaa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801bed2:	fa32 fa05 	lsrs.w	sl, r2, r5
 801bed6:	d106      	bne.n	801bee6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801bed8:	4346      	muls	r6, r0
 801beda:	fbb6 f0f4 	udiv	r0, r6, r4
 801bede:	fb04 6610 	mls	r6, r4, r0, r6
 801bee2:	603e      	str	r6, [r7, #0]
 801bee4:	e7e1      	b.n	801beaa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801bee6:	2201      	movs	r2, #1
 801bee8:	fa00 fb05 	lsl.w	fp, r0, r5
 801beec:	40aa      	lsls	r2, r5
 801beee:	fbbb f9f4 	udiv	r9, fp, r4
 801bef2:	3a01      	subs	r2, #1
 801bef4:	fb0a f309 	mul.w	r3, sl, r9
 801bef8:	fb04 b919 	mls	r9, r4, r9, fp
 801befc:	4016      	ands	r6, r2
 801befe:	9303      	str	r3, [sp, #12]
 801bf00:	4630      	mov	r0, r6
 801bf02:	f7ff ffa3 	bl	801be4c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bf06:	462b      	mov	r3, r5
 801bf08:	460a      	mov	r2, r1
 801bf0a:	4601      	mov	r1, r0
 801bf0c:	4630      	mov	r0, r6
 801bf0e:	e9cd 4700 	strd	r4, r7, [sp]
 801bf12:	f7ff ffb9 	bl	801be88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bf16:	4606      	mov	r6, r0
 801bf18:	4648      	mov	r0, r9
 801bf1a:	eb05 0108 	add.w	r1, r5, r8
 801bf1e:	f7ff ff95 	bl	801be4c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bf22:	ab05      	add	r3, sp, #20
 801bf24:	464a      	mov	r2, r9
 801bf26:	e9cd 4300 	strd	r4, r3, [sp]
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	4650      	mov	r0, sl
 801bf2e:	f7ff ffab 	bl	801be88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bf32:	6839      	ldr	r1, [r7, #0]
 801bf34:	9a05      	ldr	r2, [sp, #20]
 801bf36:	9b03      	ldr	r3, [sp, #12]
 801bf38:	4411      	add	r1, r2
 801bf3a:	fbb1 f2f4 	udiv	r2, r1, r4
 801bf3e:	18d3      	adds	r3, r2, r3
 801bf40:	fb04 1412 	mls	r4, r4, r2, r1
 801bf44:	441e      	add	r6, r3
 801bf46:	603c      	str	r4, [r7, #0]
 801bf48:	4430      	add	r0, r6
 801bf4a:	e7ae      	b.n	801beaa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801bf4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801bf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf50:	b085      	sub	sp, #20
 801bf52:	f1b0 0900 	subs.w	r9, r0, #0
 801bf56:	461d      	mov	r5, r3
 801bf58:	4617      	mov	r7, r2
 801bf5a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bf5c:	bfbb      	ittet	lt
 801bf5e:	f1c9 0900 	rsblt	r9, r9, #0
 801bf62:	f04f 36ff 	movlt.w	r6, #4294967295
 801bf66:	2601      	movge	r6, #1
 801bf68:	6823      	ldrlt	r3, [r4, #0]
 801bf6a:	bfbc      	itt	lt
 801bf6c:	425b      	neglt	r3, r3
 801bf6e:	6023      	strlt	r3, [r4, #0]
 801bf70:	2a00      	cmp	r2, #0
 801bf72:	da04      	bge.n	801bf7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801bf74:	6823      	ldr	r3, [r4, #0]
 801bf76:	4257      	negs	r7, r2
 801bf78:	4276      	negs	r6, r6
 801bf7a:	425b      	negs	r3, r3
 801bf7c:	6023      	str	r3, [r4, #0]
 801bf7e:	2d00      	cmp	r5, #0
 801bf80:	4638      	mov	r0, r7
 801bf82:	bfba      	itte	lt
 801bf84:	426d      	neglt	r5, r5
 801bf86:	f04f 38ff 	movlt.w	r8, #4294967295
 801bf8a:	f04f 0801 	movge.w	r8, #1
 801bf8e:	f7ff ff5d 	bl	801be4c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bf92:	ab03      	add	r3, sp, #12
 801bf94:	463a      	mov	r2, r7
 801bf96:	e9cd 5300 	strd	r5, r3, [sp]
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	4648      	mov	r0, r9
 801bf9e:	f7ff ff73 	bl	801be88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bfa2:	6823      	ldr	r3, [r4, #0]
 801bfa4:	9a03      	ldr	r2, [sp, #12]
 801bfa6:	4546      	cmp	r6, r8
 801bfa8:	441a      	add	r2, r3
 801bfaa:	fb92 f3f5 	sdiv	r3, r2, r5
 801bfae:	4418      	add	r0, r3
 801bfb0:	fb05 2313 	mls	r3, r5, r3, r2
 801bfb4:	bf18      	it	ne
 801bfb6:	4240      	negne	r0, r0
 801bfb8:	1c72      	adds	r2, r6, #1
 801bfba:	6023      	str	r3, [r4, #0]
 801bfbc:	d105      	bne.n	801bfca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	f1c3 0200 	rsb	r2, r3, #0
 801bfc4:	db0b      	blt.n	801bfde <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801bfc6:	6022      	str	r2, [r4, #0]
 801bfc8:	e006      	b.n	801bfd8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bfca:	2e01      	cmp	r6, #1
 801bfcc:	d104      	bne.n	801bfd8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	da02      	bge.n	801bfd8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bfd2:	442b      	add	r3, r5
 801bfd4:	3801      	subs	r0, #1
 801bfd6:	6023      	str	r3, [r4, #0]
 801bfd8:	b005      	add	sp, #20
 801bfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfde:	3801      	subs	r0, #1
 801bfe0:	1b52      	subs	r2, r2, r5
 801bfe2:	e7f0      	b.n	801bfc6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801bfe4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bfe4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bfe8:	4c1c      	ldr	r4, [pc, #112]	@ (801c05c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801bfea:	4605      	mov	r5, r0
 801bfec:	6807      	ldr	r7, [r0, #0]
 801bfee:	69a3      	ldr	r3, [r4, #24]
 801bff0:	b92b      	cbnz	r3, 801bffe <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801bff2:	6840      	ldr	r0, [r0, #4]
 801bff4:	e9c5 7000 	strd	r7, r0, [r5]
 801bff8:	b004      	add	sp, #16
 801bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bffe:	f04f 0802 	mov.w	r8, #2
 801c002:	68a2      	ldr	r2, [r4, #8]
 801c004:	ae04      	add	r6, sp, #16
 801c006:	6820      	ldr	r0, [r4, #0]
 801c008:	fb93 f1f8 	sdiv	r1, r3, r8
 801c00c:	440a      	add	r2, r1
 801c00e:	69e1      	ldr	r1, [r4, #28]
 801c010:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c014:	463a      	mov	r2, r7
 801c016:	9600      	str	r6, [sp, #0]
 801c018:	f7ff ff98 	bl	801bf4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c01c:	69a3      	ldr	r3, [r4, #24]
 801c01e:	4607      	mov	r7, r0
 801c020:	686a      	ldr	r2, [r5, #4]
 801c022:	6a21      	ldr	r1, [r4, #32]
 801c024:	9600      	str	r6, [sp, #0]
 801c026:	6860      	ldr	r0, [r4, #4]
 801c028:	f7ff ff90 	bl	801bf4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c02c:	69a3      	ldr	r3, [r4, #24]
 801c02e:	6962      	ldr	r2, [r4, #20]
 801c030:	4407      	add	r7, r0
 801c032:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801c034:	9600      	str	r6, [sp, #0]
 801c036:	68e0      	ldr	r0, [r4, #12]
 801c038:	fb93 f8f8 	sdiv	r8, r3, r8
 801c03c:	4442      	add	r2, r8
 801c03e:	9203      	str	r2, [sp, #12]
 801c040:	682a      	ldr	r2, [r5, #0]
 801c042:	f7ff ff83 	bl	801bf4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c046:	4680      	mov	r8, r0
 801c048:	9600      	str	r6, [sp, #0]
 801c04a:	69a3      	ldr	r3, [r4, #24]
 801c04c:	686a      	ldr	r2, [r5, #4]
 801c04e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801c050:	6920      	ldr	r0, [r4, #16]
 801c052:	f7ff ff7b 	bl	801bf4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c056:	4440      	add	r0, r8
 801c058:	e7cc      	b.n	801bff4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801c05a:	bf00      	nop
 801c05c:	24015c5c 	.word	0x24015c5c

0801c060 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c060:	4b07      	ldr	r3, [pc, #28]	@ (801c080 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801c062:	781b      	ldrb	r3, [r3, #0]
 801c064:	2b01      	cmp	r3, #1
 801c066:	d109      	bne.n	801c07c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801c068:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c06c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c070:	8003      	strh	r3, [r0, #0]
 801c072:	4b04      	ldr	r3, [pc, #16]	@ (801c084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c074:	881b      	ldrh	r3, [r3, #0]
 801c076:	3b01      	subs	r3, #1
 801c078:	1a9b      	subs	r3, r3, r2
 801c07a:	800b      	strh	r3, [r1, #0]
 801c07c:	4770      	bx	lr
 801c07e:	bf00      	nop
 801c080:	24015c40 	.word	0x24015c40
 801c084:	24015c3c 	.word	0x24015c3c

0801c088 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c088:	4b07      	ldr	r3, [pc, #28]	@ (801c0a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c08a:	b510      	push	{r4, lr}
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	2b01      	cmp	r3, #1
 801c090:	d108      	bne.n	801c0a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c092:	4b06      	ldr	r3, [pc, #24]	@ (801c0ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c094:	880c      	ldrh	r4, [r1, #0]
 801c096:	881b      	ldrh	r3, [r3, #0]
 801c098:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c09c:	3b01      	subs	r3, #1
 801c09e:	1b1b      	subs	r3, r3, r4
 801c0a0:	8003      	strh	r3, [r0, #0]
 801c0a2:	800a      	strh	r2, [r1, #0]
 801c0a4:	bd10      	pop	{r4, pc}
 801c0a6:	bf00      	nop
 801c0a8:	24015c40 	.word	0x24015c40
 801c0ac:	24015c3c 	.word	0x24015c3c

0801c0b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c0b0:	4b0a      	ldr	r3, [pc, #40]	@ (801c0dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c0b2:	b510      	push	{r4, lr}
 801c0b4:	781b      	ldrb	r3, [r3, #0]
 801c0b6:	2b01      	cmp	r3, #1
 801c0b8:	d10e      	bne.n	801c0d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c0ba:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c0be:	8843      	ldrh	r3, [r0, #2]
 801c0c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c0c4:	18ca      	adds	r2, r1, r3
 801c0c6:	4b06      	ldr	r3, [pc, #24]	@ (801c0e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c0c8:	8044      	strh	r4, [r0, #2]
 801c0ca:	881b      	ldrh	r3, [r3, #0]
 801c0cc:	1a9b      	subs	r3, r3, r2
 801c0ce:	8003      	strh	r3, [r0, #0]
 801c0d0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c0d4:	8081      	strh	r1, [r0, #4]
 801c0d6:	80c3      	strh	r3, [r0, #6]
 801c0d8:	bd10      	pop	{r4, pc}
 801c0da:	bf00      	nop
 801c0dc:	24015c40 	.word	0x24015c40
 801c0e0:	24015c3c 	.word	0x24015c3c

0801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c0e4:	4b08      	ldr	r3, [pc, #32]	@ (801c108 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801c0e6:	781b      	ldrb	r3, [r3, #0]
 801c0e8:	2b01      	cmp	r3, #1
 801c0ea:	d10c      	bne.n	801c106 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801c0ec:	8803      	ldrh	r3, [r0, #0]
 801c0ee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c0f2:	8842      	ldrh	r2, [r0, #2]
 801c0f4:	8002      	strh	r2, [r0, #0]
 801c0f6:	185a      	adds	r2, r3, r1
 801c0f8:	4b04      	ldr	r3, [pc, #16]	@ (801c10c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c0fa:	881b      	ldrh	r3, [r3, #0]
 801c0fc:	1a9b      	subs	r3, r3, r2
 801c0fe:	8043      	strh	r3, [r0, #2]
 801c100:	88c3      	ldrh	r3, [r0, #6]
 801c102:	80c1      	strh	r1, [r0, #6]
 801c104:	8083      	strh	r3, [r0, #4]
 801c106:	4770      	bx	lr
 801c108:	24015c40 	.word	0x24015c40
 801c10c:	24015c3c 	.word	0x24015c3c

0801c110 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c110:	4b07      	ldr	r3, [pc, #28]	@ (801c130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c112:	b510      	push	{r4, lr}
 801c114:	781b      	ldrb	r3, [r3, #0]
 801c116:	2b01      	cmp	r3, #1
 801c118:	d108      	bne.n	801c12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c11a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c11e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c122:	8003      	strh	r3, [r0, #0]
 801c124:	8893      	ldrh	r3, [r2, #4]
 801c126:	3b01      	subs	r3, #1
 801c128:	1b1b      	subs	r3, r3, r4
 801c12a:	800b      	strh	r3, [r1, #0]
 801c12c:	bd10      	pop	{r4, pc}
 801c12e:	bf00      	nop
 801c130:	24015c40 	.word	0x24015c40

0801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c134:	4b0a      	ldr	r3, [pc, #40]	@ (801c160 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c136:	460a      	mov	r2, r1
 801c138:	b510      	push	{r4, lr}
 801c13a:	781b      	ldrb	r3, [r3, #0]
 801c13c:	2b01      	cmp	r3, #1
 801c13e:	d10d      	bne.n	801c15c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c140:	8881      	ldrh	r1, [r0, #4]
 801c142:	8803      	ldrh	r3, [r0, #0]
 801c144:	440b      	add	r3, r1
 801c146:	4601      	mov	r1, r0
 801c148:	3b01      	subs	r3, #1
 801c14a:	f821 3b02 	strh.w	r3, [r1], #2
 801c14e:	f7ff ffdf 	bl	801c110 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c152:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c156:	88c2      	ldrh	r2, [r0, #6]
 801c158:	80c3      	strh	r3, [r0, #6]
 801c15a:	8082      	strh	r2, [r0, #4]
 801c15c:	bd10      	pop	{r4, pc}
 801c15e:	bf00      	nop
 801c160:	24015c40 	.word	0x24015c40

0801c164 <_ZN8touchgfx11Application13requestRedrawEv>:
 801c164:	4b06      	ldr	r3, [pc, #24]	@ (801c180 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801c166:	2100      	movs	r1, #0
 801c168:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c16c:	4b05      	ldr	r3, [pc, #20]	@ (801c184 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801c16e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801c172:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c176:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801c17a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801c17e:	4770      	bx	lr
 801c180:	24015c3c 	.word	0x24015c3c
 801c184:	24015c3e 	.word	0x24015c3e

0801c188 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c188:	4b03      	ldr	r3, [pc, #12]	@ (801c198 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c18a:	6818      	ldr	r0, [r3, #0]
 801c18c:	b110      	cbz	r0, 801c194 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c18e:	6803      	ldr	r3, [r0, #0]
 801c190:	699b      	ldr	r3, [r3, #24]
 801c192:	4718      	bx	r3
 801c194:	4770      	bx	lr
 801c196:	bf00      	nop
 801c198:	24015c8c 	.word	0x24015c8c

0801c19c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c19c:	4770      	bx	lr
	...

0801c1a0 <_ZN8touchgfx11Application4drawEv>:
 801c1a0:	4b09      	ldr	r3, [pc, #36]	@ (801c1c8 <_ZN8touchgfx11Application4drawEv+0x28>)
 801c1a2:	b507      	push	{r0, r1, r2, lr}
 801c1a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c1a8:	2100      	movs	r1, #0
 801c1aa:	4b08      	ldr	r3, [pc, #32]	@ (801c1cc <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c1ac:	9100      	str	r1, [sp, #0]
 801c1ae:	4669      	mov	r1, sp
 801c1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c1b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c1bc:	6803      	ldr	r3, [r0, #0]
 801c1be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c1c0:	4798      	blx	r3
 801c1c2:	b003      	add	sp, #12
 801c1c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c1c8:	24015c3c 	.word	0x24015c3c
 801c1cc:	24015c3e 	.word	0x24015c3e

0801c1d0 <_ZN8touchgfx11Application10invalidateEv>:
 801c1d0:	4b09      	ldr	r3, [pc, #36]	@ (801c1f8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801c1d2:	b082      	sub	sp, #8
 801c1d4:	2100      	movs	r1, #0
 801c1d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c1da:	4b08      	ldr	r3, [pc, #32]	@ (801c1fc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801c1dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c1e0:	aa02      	add	r2, sp, #8
 801c1e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1e6:	9100      	str	r1, [sp, #0]
 801c1e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c1ec:	6803      	ldr	r3, [r0, #0]
 801c1ee:	e912 0006 	ldmdb	r2, {r1, r2}
 801c1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1f4:	b002      	add	sp, #8
 801c1f6:	4718      	bx	r3
 801c1f8:	24015c3c 	.word	0x24015c3c
 801c1fc:	24015c3e 	.word	0x24015c3e

0801c200 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c200:	4b03      	ldr	r3, [pc, #12]	@ (801c210 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c202:	6818      	ldr	r0, [r3, #0]
 801c204:	b110      	cbz	r0, 801c20c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c206:	6803      	ldr	r3, [r0, #0]
 801c208:	69db      	ldr	r3, [r3, #28]
 801c20a:	4718      	bx	r3
 801c20c:	4770      	bx	lr
 801c20e:	bf00      	nop
 801c210:	24015c8c 	.word	0x24015c8c

0801c214 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c214:	4b03      	ldr	r3, [pc, #12]	@ (801c224 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c216:	6818      	ldr	r0, [r3, #0]
 801c218:	b110      	cbz	r0, 801c220 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c21a:	6803      	ldr	r3, [r0, #0]
 801c21c:	6a1b      	ldr	r3, [r3, #32]
 801c21e:	4718      	bx	r3
 801c220:	4770      	bx	lr
 801c222:	bf00      	nop
 801c224:	24015c8c 	.word	0x24015c8c

0801c228 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801c228:	2300      	movs	r3, #0
 801c22a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801c22e:	4770      	bx	lr

0801c230 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c230:	4b03      	ldr	r3, [pc, #12]	@ (801c240 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c232:	6818      	ldr	r0, [r3, #0]
 801c234:	b110      	cbz	r0, 801c23c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c236:	6803      	ldr	r3, [r0, #0]
 801c238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c23a:	4718      	bx	r3
 801c23c:	4770      	bx	lr
 801c23e:	bf00      	nop
 801c240:	24015c8c 	.word	0x24015c8c

0801c244 <_ZN8touchgfx11ApplicationD1Ev>:
 801c244:	4770      	bx	lr

0801c246 <_ZN8touchgfx11ApplicationD0Ev>:
 801c246:	b510      	push	{r4, lr}
 801c248:	4604      	mov	r4, r0
 801c24a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801c24e:	f00d f8fd 	bl	802944c <_ZdlPvj>
 801c252:	4620      	mov	r0, r4
 801c254:	bd10      	pop	{r4, pc}

0801c256 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c256:	b510      	push	{r4, lr}
 801c258:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c25c:	888a      	ldrh	r2, [r1, #4]
 801c25e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c262:	4422      	add	r2, r4
 801c264:	b212      	sxth	r2, r2
 801c266:	4293      	cmp	r3, r2
 801c268:	da15      	bge.n	801c296 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c26a:	8882      	ldrh	r2, [r0, #4]
 801c26c:	4413      	add	r3, r2
 801c26e:	b21b      	sxth	r3, r3
 801c270:	429c      	cmp	r4, r3
 801c272:	da10      	bge.n	801c296 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c274:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c278:	88c9      	ldrh	r1, [r1, #6]
 801c27a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c27e:	4419      	add	r1, r3
 801c280:	b209      	sxth	r1, r1
 801c282:	428a      	cmp	r2, r1
 801c284:	da07      	bge.n	801c296 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c286:	88c0      	ldrh	r0, [r0, #6]
 801c288:	4410      	add	r0, r2
 801c28a:	b200      	sxth	r0, r0
 801c28c:	4283      	cmp	r3, r0
 801c28e:	bfac      	ite	ge
 801c290:	2000      	movge	r0, #0
 801c292:	2001      	movlt	r0, #1
 801c294:	bd10      	pop	{r4, pc}
 801c296:	2000      	movs	r0, #0
 801c298:	e7fc      	b.n	801c294 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c29a <_ZN8touchgfx4Rect10restrictToEss>:
 801c29a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	b510      	push	{r4, lr}
 801c2a2:	da04      	bge.n	801c2ae <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801c2a4:	8884      	ldrh	r4, [r0, #4]
 801c2a6:	4423      	add	r3, r4
 801c2a8:	8083      	strh	r3, [r0, #4]
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	8003      	strh	r3, [r0, #0]
 801c2ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c2b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c2b6:	1b09      	subs	r1, r1, r4
 801c2b8:	428b      	cmp	r3, r1
 801c2ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c2be:	bfc8      	it	gt
 801c2c0:	8081      	strhgt	r1, [r0, #4]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	da04      	bge.n	801c2d0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801c2c6:	88c1      	ldrh	r1, [r0, #6]
 801c2c8:	440b      	add	r3, r1
 801c2ca:	80c3      	strh	r3, [r0, #6]
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	8043      	strh	r3, [r0, #2]
 801c2d0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c2d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c2d8:	1a52      	subs	r2, r2, r1
 801c2da:	4293      	cmp	r3, r2
 801c2dc:	bfc8      	it	gt
 801c2de:	80c2      	strhgt	r2, [r0, #6]
 801c2e0:	bd10      	pop	{r4, pc}
	...

0801c2e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c2e4:	4b10      	ldr	r3, [pc, #64]	@ (801c328 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801c2e6:	b510      	push	{r4, lr}
 801c2e8:	460c      	mov	r4, r1
 801c2ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c2ee:	4b0f      	ldr	r3, [pc, #60]	@ (801c32c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c2f6:	f7ff ffd0 	bl	801c29a <_ZN8touchgfx4Rect10restrictToEss>
 801c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (801c330 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801c2fc:	6818      	ldr	r0, [r3, #0]
 801c2fe:	b190      	cbz	r0, 801c326 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801c300:	6803      	ldr	r3, [r0, #0]
 801c302:	4621      	mov	r1, r4
 801c304:	689b      	ldr	r3, [r3, #8]
 801c306:	4798      	blx	r3
 801c308:	4b0a      	ldr	r3, [pc, #40]	@ (801c334 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801c30a:	6818      	ldr	r0, [r3, #0]
 801c30c:	b118      	cbz	r0, 801c316 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801c30e:	6803      	ldr	r3, [r0, #0]
 801c310:	4621      	mov	r1, r4
 801c312:	689b      	ldr	r3, [r3, #8]
 801c314:	4798      	blx	r3
 801c316:	4b08      	ldr	r3, [pc, #32]	@ (801c338 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801c318:	4621      	mov	r1, r4
 801c31a:	6818      	ldr	r0, [r3, #0]
 801c31c:	6803      	ldr	r3, [r0, #0]
 801c31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c322:	69db      	ldr	r3, [r3, #28]
 801c324:	4718      	bx	r3
 801c326:	bd10      	pop	{r4, pc}
 801c328:	24015c3e 	.word	0x24015c3e
 801c32c:	24015c3c 	.word	0x24015c3c
 801c330:	24015c8c 	.word	0x24015c8c
 801c334:	24015c88 	.word	0x24015c88
 801c338:	24015c48 	.word	0x24015c48

0801c33c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c33e:	4606      	mov	r6, r0
 801c340:	4608      	mov	r0, r1
 801c342:	460f      	mov	r7, r1
 801c344:	f7fb fd23 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c348:	b9e8      	cbnz	r0, 801c386 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c34a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801c34e:	f9b6 4000 	ldrsh.w	r4, [r6]
 801c352:	42a5      	cmp	r5, r4
 801c354:	db17      	blt.n	801c386 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c356:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c35a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801c35e:	429a      	cmp	r2, r3
 801c360:	db11      	blt.n	801c386 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c362:	88b9      	ldrh	r1, [r7, #4]
 801c364:	440d      	add	r5, r1
 801c366:	88b1      	ldrh	r1, [r6, #4]
 801c368:	440c      	add	r4, r1
 801c36a:	b22d      	sxth	r5, r5
 801c36c:	b224      	sxth	r4, r4
 801c36e:	42a5      	cmp	r5, r4
 801c370:	dc09      	bgt.n	801c386 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801c372:	88f8      	ldrh	r0, [r7, #6]
 801c374:	4410      	add	r0, r2
 801c376:	88f2      	ldrh	r2, [r6, #6]
 801c378:	4413      	add	r3, r2
 801c37a:	b200      	sxth	r0, r0
 801c37c:	b21b      	sxth	r3, r3
 801c37e:	4298      	cmp	r0, r3
 801c380:	bfcc      	ite	gt
 801c382:	2000      	movgt	r0, #0
 801c384:	2001      	movle	r0, #1
 801c386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c388 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c38a:	4604      	mov	r4, r0
 801c38c:	4608      	mov	r0, r1
 801c38e:	460d      	mov	r5, r1
 801c390:	f7fb fcfd 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c394:	b978      	cbnz	r0, 801c3b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801c396:	4620      	mov	r0, r4
 801c398:	f7fb fcf9 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c39c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801c3a0:	b150      	cbz	r0, 801c3b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801c3a2:	8026      	strh	r6, [r4, #0]
 801c3a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c3a8:	8063      	strh	r3, [r4, #2]
 801c3aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801c3ae:	80a3      	strh	r3, [r4, #4]
 801c3b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c3b4:	80e3      	strh	r3, [r4, #6]
 801c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c3bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c3c0:	42b1      	cmp	r1, r6
 801c3c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c3c6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801c3ca:	460f      	mov	r7, r1
 801c3cc:	88ed      	ldrh	r5, [r5, #6]
 801c3ce:	bfa8      	it	ge
 801c3d0:	4637      	movge	r7, r6
 801c3d2:	4293      	cmp	r3, r2
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	4466      	add	r6, ip
 801c3d8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c3dc:	bfa8      	it	ge
 801c3de:	4610      	movge	r0, r2
 801c3e0:	442a      	add	r2, r5
 801c3e2:	88e5      	ldrh	r5, [r4, #6]
 801c3e4:	4461      	add	r1, ip
 801c3e6:	b236      	sxth	r6, r6
 801c3e8:	8027      	strh	r7, [r4, #0]
 801c3ea:	442b      	add	r3, r5
 801c3ec:	b209      	sxth	r1, r1
 801c3ee:	b212      	sxth	r2, r2
 801c3f0:	8060      	strh	r0, [r4, #2]
 801c3f2:	b21b      	sxth	r3, r3
 801c3f4:	428e      	cmp	r6, r1
 801c3f6:	bfac      	ite	ge
 801c3f8:	ebc7 0106 	rsbge	r1, r7, r6
 801c3fc:	ebc7 0101 	rsblt	r1, r7, r1
 801c400:	429a      	cmp	r2, r3
 801c402:	bfac      	ite	ge
 801c404:	ebc0 0202 	rsbge	r2, r0, r2
 801c408:	ebc0 0203 	rsblt	r2, r0, r3
 801c40c:	80a1      	strh	r1, [r4, #4]
 801c40e:	80e2      	strh	r2, [r4, #6]
 801c410:	e7d1      	b.n	801c3b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c414 <_ZN8touchgfx11Application11getInstanceEv>:
 801c414:	4b01      	ldr	r3, [pc, #4]	@ (801c41c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c416:	6818      	ldr	r0, [r3, #0]
 801c418:	4770      	bx	lr
 801c41a:	bf00      	nop
 801c41c:	24015c9c 	.word	0x24015c9c

0801c420 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801c420:	2300      	movs	r3, #0
 801c422:	b510      	push	{r4, lr}
 801c424:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801c428:	4604      	mov	r4, r0
 801c42a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801c42e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801c432:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801c436:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d90e      	bls.n	801c45c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801c43e:	18e2      	adds	r2, r4, r3
 801c440:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801c444:	b122      	cbz	r2, 801c450 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801c446:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801c44a:	6803      	ldr	r3, [r0, #0]
 801c44c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c44e:	4798      	blx	r3
 801c450:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801c454:	3301      	adds	r3, #1
 801c456:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801c45a:	e7ea      	b.n	801c432 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801c45c:	bd10      	pop	{r4, pc}

0801c45e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801c45e:	2300      	movs	r3, #0
 801c460:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801c464:	30a4      	adds	r0, #164	@ 0xa4
 801c466:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c46a:	f802 3b01 	strb.w	r3, [r2], #1
 801c46e:	4282      	cmp	r2, r0
 801c470:	d1fb      	bne.n	801c46a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801c472:	4770      	bx	lr

0801c474 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c474:	b570      	push	{r4, r5, r6, lr}
 801c476:	4c0b      	ldr	r4, [pc, #44]	@ (801c4a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801c478:	4605      	mov	r5, r0
 801c47a:	460e      	mov	r6, r1
 801c47c:	6820      	ldr	r0, [r4, #0]
 801c47e:	b110      	cbz	r0, 801c486 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801c480:	6803      	ldr	r3, [r0, #0]
 801c482:	695b      	ldr	r3, [r3, #20]
 801c484:	4798      	blx	r3
 801c486:	1d28      	adds	r0, r5, #4
 801c488:	f7ff ffe9 	bl	801c45e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801c48c:	6026      	str	r6, [r4, #0]
 801c48e:	6833      	ldr	r3, [r6, #0]
 801c490:	4630      	mov	r0, r6
 801c492:	68db      	ldr	r3, [r3, #12]
 801c494:	4798      	blx	r3
 801c496:	682b      	ldr	r3, [r5, #0]
 801c498:	4628      	mov	r0, r5
 801c49a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4a0:	4718      	bx	r3
 801c4a2:	bf00      	nop
 801c4a4:	24015c8c 	.word	0x24015c8c

0801c4a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801c4ae:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801c4b2:	461a      	mov	r2, r3
 801c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4b6:	461c      	mov	r4, r3
 801c4b8:	461d      	mov	r5, r3
 801c4ba:	459c      	cmp	ip, r3
 801c4bc:	dd1a      	ble.n	801c4f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801c4be:	18c6      	adds	r6, r0, r3
 801c4c0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801c4c4:	b16e      	cbz	r6, 801c4e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801c4c6:	429a      	cmp	r2, r3
 801c4c8:	d008      	beq.n	801c4dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801c4ca:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801c4ce:	fa1f fe82 	uxth.w	lr, r2
 801c4d2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801c4d6:	1887      	adds	r7, r0, r2
 801c4d8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801c4dc:	3201      	adds	r2, #1
 801c4de:	3301      	adds	r3, #1
 801c4e0:	e7eb      	b.n	801c4ba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801c4e2:	4299      	cmp	r1, r3
 801c4e4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801c4e8:	bfa8      	it	ge
 801c4ea:	3501      	addge	r5, #1
 801c4ec:	429e      	cmp	r6, r3
 801c4ee:	bfc8      	it	gt
 801c4f0:	3401      	addgt	r4, #1
 801c4f2:	e7f4      	b.n	801c4de <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801c4f4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801c4f8:	1b49      	subs	r1, r1, r5
 801c4fa:	1b1b      	subs	r3, r3, r4
 801c4fc:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801c500:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801c504:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801c508:	4293      	cmp	r3, r2
 801c50a:	dd03      	ble.n	801c514 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801c50c:	3b01      	subs	r3, #1
 801c50e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801c512:	e7f7      	b.n	801c504 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801c514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c518 <_ZN8touchgfx11Application15handleTickEventEv>:
 801c518:	b570      	push	{r4, r5, r6, lr}
 801c51a:	4d16      	ldr	r5, [pc, #88]	@ (801c574 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801c51c:	4604      	mov	r4, r0
 801c51e:	6828      	ldr	r0, [r5, #0]
 801c520:	b140      	cbz	r0, 801c534 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801c522:	7a03      	ldrb	r3, [r0, #8]
 801c524:	b933      	cbnz	r3, 801c534 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801c526:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801c52a:	6803      	ldr	r3, [r0, #0]
 801c52c:	689b      	ldr	r3, [r3, #8]
 801c52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c532:	4718      	bx	r3
 801c534:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801c538:	4e0f      	ldr	r6, [pc, #60]	@ (801c578 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801c53a:	b973      	cbnz	r3, 801c55a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c53c:	b168      	cbz	r0, 801c55a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c53e:	7a03      	ldrb	r3, [r0, #8]
 801c540:	b15b      	cbz	r3, 801c55a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c542:	6830      	ldr	r0, [r6, #0]
 801c544:	b110      	cbz	r0, 801c54c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801c546:	6803      	ldr	r3, [r0, #0]
 801c548:	691b      	ldr	r3, [r3, #16]
 801c54a:	4798      	blx	r3
 801c54c:	6828      	ldr	r0, [r5, #0]
 801c54e:	6803      	ldr	r3, [r0, #0]
 801c550:	68db      	ldr	r3, [r3, #12]
 801c552:	4798      	blx	r3
 801c554:	2301      	movs	r3, #1
 801c556:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801c55a:	3404      	adds	r4, #4
 801c55c:	4620      	mov	r0, r4
 801c55e:	f7ff ff5f 	bl	801c420 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801c562:	4620      	mov	r0, r4
 801c564:	f7ff ffa0 	bl	801c4a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801c568:	6830      	ldr	r0, [r6, #0]
 801c56a:	b110      	cbz	r0, 801c572 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801c56c:	6803      	ldr	r3, [r0, #0]
 801c56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c570:	e7dd      	b.n	801c52e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801c572:	bd70      	pop	{r4, r5, r6, pc}
 801c574:	24015c90 	.word	0x24015c90
 801c578:	24015c8c 	.word	0x24015c8c

0801c57c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c57c:	4603      	mov	r3, r0
 801c57e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801c582:	2200      	movs	r2, #0
 801c584:	801a      	strh	r2, [r3, #0]
 801c586:	3308      	adds	r3, #8
 801c588:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c58c:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c590:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c594:	428b      	cmp	r3, r1
 801c596:	d1f5      	bne.n	801c584 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c598:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801c59c:	4770      	bx	lr
	...

0801c5a0 <_ZN8touchgfx11ApplicationC1Ev>:
 801c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5a2:	4b1d      	ldr	r3, [pc, #116]	@ (801c618 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c5a4:	4606      	mov	r6, r0
 801c5a6:	4604      	mov	r4, r0
 801c5a8:	2500      	movs	r5, #0
 801c5aa:	f846 3b04 	str.w	r3, [r6], #4
 801c5ae:	22a8      	movs	r2, #168	@ 0xa8
 801c5b0:	2100      	movs	r1, #0
 801c5b2:	4630      	mov	r0, r6
 801c5b4:	f00d fd7c 	bl	802a0b0 <memset>
 801c5b8:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801c5bc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801c5c0:	4f16      	ldr	r7, [pc, #88]	@ (801c61c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c5c2:	f7ff ffdb 	bl	801c57c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c5c6:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801c5ca:	f7ff ffd7 	bl	801c57c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c5ce:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801c5d2:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801c5d6:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801c5da:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801c5de:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801c5e2:	490f      	ldr	r1, [pc, #60]	@ (801c620 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c5e4:	480f      	ldr	r0, [pc, #60]	@ (801c624 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c5e6:	f00c f8c1 	bl	802876c <CRC_Lock>
 801c5ea:	4b0f      	ldr	r3, [pc, #60]	@ (801c628 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801c5ec:	b158      	cbz	r0, 801c606 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801c5ee:	801d      	strh	r5, [r3, #0]
 801c5f0:	2300      	movs	r3, #0
 801c5f2:	4a0e      	ldr	r2, [pc, #56]	@ (801c62c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801c5f4:	4630      	mov	r0, r6
 801c5f6:	6013      	str	r3, [r2, #0]
 801c5f8:	4a0d      	ldr	r2, [pc, #52]	@ (801c630 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801c5fa:	603b      	str	r3, [r7, #0]
 801c5fc:	6013      	str	r3, [r2, #0]
 801c5fe:	f7ff ff2e 	bl	801c45e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801c602:	4620      	mov	r0, r4
 801c604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c60a:	2002      	movs	r0, #2
 801c60c:	801a      	strh	r2, [r3, #0]
 801c60e:	6038      	str	r0, [r7, #0]
 801c610:	f001 fd7c 	bl	801e10c <_ZN8touchgfx6Screen4drawEv>
 801c614:	e7ec      	b.n	801c5f0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801c616:	bf00      	nop
 801c618:	0802f75c 	.word	0x0802f75c
 801c61c:	24015c8c 	.word	0x24015c8c
 801c620:	b5e8b5cd 	.word	0xb5e8b5cd
 801c624:	f407a5c2 	.word	0xf407a5c2
 801c628:	24000050 	.word	0x24000050
 801c62c:	24015c9c 	.word	0x24015c9c
 801c630:	24015c90 	.word	0x24015c90

0801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c634:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801c638:	3b01      	subs	r3, #1
 801c63a:	b29b      	uxth	r3, r3
 801c63c:	428b      	cmp	r3, r1
 801c63e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801c642:	b510      	push	{r4, lr}
 801c644:	d908      	bls.n	801c658 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801c646:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801c64a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801c64e:	681a      	ldr	r2, [r3, #0]
 801c650:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801c654:	685a      	ldr	r2, [r3, #4]
 801c656:	6062      	str	r2, [r4, #4]
 801c658:	bd10      	pop	{r4, pc}
	...

0801c65c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c660:	b08f      	sub	sp, #60	@ 0x3c
 801c662:	4b8f      	ldr	r3, [pc, #572]	@ (801c8a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801c664:	4683      	mov	fp, r0
 801c666:	ac0a      	add	r4, sp, #40	@ 0x28
 801c668:	e884 0006 	stmia.w	r4, {r1, r2}
 801c66c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c670:	4620      	mov	r0, r4
 801c672:	4b8c      	ldr	r3, [pc, #560]	@ (801c8a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801c674:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c678:	f7ff fe0f 	bl	801c29a <_ZN8touchgfx4Rect10restrictToEss>
 801c67c:	4620      	mov	r0, r4
 801c67e:	f7fb fb86 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c682:	2800      	cmp	r0, #0
 801c684:	d16a      	bne.n	801c75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c686:	9403      	str	r4, [sp, #12]
 801c688:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801c68c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801c690:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801c694:	9301      	str	r3, [sp, #4]
 801c696:	35a4      	adds	r5, #164	@ 0xa4
 801c698:	b15c      	cbz	r4, 801c6b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c69a:	4629      	mov	r1, r5
 801c69c:	9803      	ldr	r0, [sp, #12]
 801c69e:	f7ff fe4d 	bl	801c33c <_ZNK8touchgfx4Rect8includesERKS0_>
 801c6a2:	3c01      	subs	r4, #1
 801c6a4:	b118      	cbz	r0, 801c6ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801c6a6:	b2a1      	uxth	r1, r4
 801c6a8:	9801      	ldr	r0, [sp, #4]
 801c6aa:	f7ff ffc3 	bl	801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c6ae:	3d08      	subs	r5, #8
 801c6b0:	e7f2      	b.n	801c698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801c6b2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801c6b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c6ba:	f8cd a010 	str.w	sl, [sp, #16]
 801c6be:	9302      	str	r3, [sp, #8]
 801c6c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c6c4:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801c6c8:	9306      	str	r3, [sp, #24]
 801c6ca:	445c      	add	r4, fp
 801c6cc:	2500      	movs	r5, #0
 801c6ce:	4626      	mov	r6, r4
 801c6d0:	f8cd a014 	str.w	sl, [sp, #20]
 801c6d4:	462f      	mov	r7, r5
 801c6d6:	9b05      	ldr	r3, [sp, #20]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d073      	beq.n	801c7c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801c6dc:	9903      	ldr	r1, [sp, #12]
 801c6de:	4630      	mov	r0, r6
 801c6e0:	f7ff fdb9 	bl	801c256 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c6e4:	b350      	cbz	r0, 801c73c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c6e6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801c6ea:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c6ee:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801c6f2:	45e6      	cmp	lr, ip
 801c6f4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c6f8:	db33      	blt.n	801c762 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c6fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801c6fe:	88b3      	ldrh	r3, [r6, #4]
 801c700:	4472      	add	r2, lr
 801c702:	4463      	add	r3, ip
 801c704:	b212      	sxth	r2, r2
 801c706:	b21b      	sxth	r3, r3
 801c708:	429a      	cmp	r2, r3
 801c70a:	dc2a      	bgt.n	801c762 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c70c:	fa1f f289 	uxth.w	r2, r9
 801c710:	88f3      	ldrh	r3, [r6, #6]
 801c712:	45c8      	cmp	r8, r9
 801c714:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801c718:	4413      	add	r3, r2
 801c71a:	fa1f fc88 	uxth.w	ip, r8
 801c71e:	b29b      	uxth	r3, r3
 801c720:	fa0f fe83 	sxth.w	lr, r3
 801c724:	db0f      	blt.n	801c746 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c726:	eba3 030c 	sub.w	r3, r3, ip
 801c72a:	1ac9      	subs	r1, r1, r3
 801c72c:	b209      	sxth	r1, r1
 801c72e:	2900      	cmp	r1, #0
 801c730:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c734:	dd12      	ble.n	801c75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c736:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801c73a:	4605      	mov	r5, r0
 801c73c:	9b05      	ldr	r3, [sp, #20]
 801c73e:	3e08      	subs	r6, #8
 801c740:	3b01      	subs	r3, #1
 801c742:	9305      	str	r3, [sp, #20]
 801c744:	e7c7      	b.n	801c6d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c746:	4461      	add	r1, ip
 801c748:	b209      	sxth	r1, r1
 801c74a:	4571      	cmp	r1, lr
 801c74c:	dc38      	bgt.n	801c7c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c74e:	eba2 020c 	sub.w	r2, r2, ip
 801c752:	b212      	sxth	r2, r2
 801c754:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801c758:	2a00      	cmp	r2, #0
 801c75a:	dcee      	bgt.n	801c73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c75c:	b00f      	add	sp, #60	@ 0x3c
 801c75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c762:	45c8      	cmp	r8, r9
 801c764:	db2c      	blt.n	801c7c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c766:	88f3      	ldrh	r3, [r6, #6]
 801c768:	4499      	add	r9, r3
 801c76a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801c76e:	4498      	add	r8, r3
 801c770:	fa0f f989 	sxth.w	r9, r9
 801c774:	fa0f f888 	sxth.w	r8, r8
 801c778:	45c1      	cmp	r9, r8
 801c77a:	db21      	blt.n	801c7c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c77c:	fa1f f28c 	uxth.w	r2, ip
 801c780:	88b3      	ldrh	r3, [r6, #4]
 801c782:	45e6      	cmp	lr, ip
 801c784:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c788:	4413      	add	r3, r2
 801c78a:	fa1f f88e 	uxth.w	r8, lr
 801c78e:	b29b      	uxth	r3, r3
 801c790:	fa0f f983 	sxth.w	r9, r3
 801c794:	db0a      	blt.n	801c7ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801c796:	eba3 0308 	sub.w	r3, r3, r8
 801c79a:	1ac9      	subs	r1, r1, r3
 801c79c:	b209      	sxth	r1, r1
 801c79e:	2900      	cmp	r1, #0
 801c7a0:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801c7a4:	ddda      	ble.n	801c75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c7a6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801c7aa:	e7c6      	b.n	801c73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c7ac:	4441      	add	r1, r8
 801c7ae:	b209      	sxth	r1, r1
 801c7b0:	4549      	cmp	r1, r9
 801c7b2:	dc05      	bgt.n	801c7c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c7b4:	eba2 0208 	sub.w	r2, r2, r8
 801c7b8:	b212      	sxth	r2, r2
 801c7ba:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801c7be:	e7cb      	b.n	801c758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801c7c0:	4607      	mov	r7, r0
 801c7c2:	e7bb      	b.n	801c73c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c7c4:	2d00      	cmp	r5, #0
 801c7c6:	d181      	bne.n	801c6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801c7c8:	2f00      	cmp	r7, #0
 801c7ca:	f000 81dd 	beq.w	801cb88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c7ce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801c7d2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801c7d6:	b2b3      	uxth	r3, r6
 801c7d8:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801c7dc:	9305      	str	r3, [sp, #20]
 801c7de:	9a05      	ldr	r2, [sp, #20]
 801c7e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c7e4:	4413      	add	r3, r2
 801c7e6:	b2ba      	uxth	r2, r7
 801c7e8:	4492      	add	sl, r2
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	fa1f fa8a 	uxth.w	sl, sl
 801c7f0:	fa0f f883 	sxth.w	r8, r3
 801c7f4:	fa0f f98a 	sxth.w	r9, sl
 801c7f8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801c7fc:	9b04      	ldr	r3, [sp, #16]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d052      	beq.n	801c8a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c802:	9903      	ldr	r1, [sp, #12]
 801c804:	4620      	mov	r0, r4
 801c806:	f7ff fd26 	bl	801c256 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c80a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c80e:	b1c0      	cbz	r0, 801c842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c810:	f9b4 e000 	ldrsh.w	lr, [r4]
 801c814:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c818:	4576      	cmp	r6, lr
 801c81a:	dc22      	bgt.n	801c862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c81c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c820:	44f4      	add	ip, lr
 801c822:	fa0f fc8c 	sxth.w	ip, ip
 801c826:	45e0      	cmp	r8, ip
 801c828:	db1b      	blt.n	801c862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c82a:	428f      	cmp	r7, r1
 801c82c:	fa1f fc81 	uxth.w	ip, r1
 801c830:	88e1      	ldrh	r1, [r4, #6]
 801c832:	dc0d      	bgt.n	801c850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801c834:	ebaa 0c0c 	sub.w	ip, sl, ip
 801c838:	f8a4 9002 	strh.w	r9, [r4, #2]
 801c83c:	eba1 010c 	sub.w	r1, r1, ip
 801c840:	80e1      	strh	r1, [r4, #6]
 801c842:	4628      	mov	r0, r5
 801c844:	9904      	ldr	r1, [sp, #16]
 801c846:	3c08      	subs	r4, #8
 801c848:	4605      	mov	r5, r0
 801c84a:	3901      	subs	r1, #1
 801c84c:	9104      	str	r1, [sp, #16]
 801c84e:	e7d3      	b.n	801c7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801c850:	4461      	add	r1, ip
 801c852:	b209      	sxth	r1, r1
 801c854:	4549      	cmp	r1, r9
 801c856:	dcf5      	bgt.n	801c844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c858:	eba2 0c0c 	sub.w	ip, r2, ip
 801c85c:	f8a4 c006 	strh.w	ip, [r4, #6]
 801c860:	e7ef      	b.n	801c842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c862:	428f      	cmp	r7, r1
 801c864:	dcee      	bgt.n	801c844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c866:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801c86a:	4461      	add	r1, ip
 801c86c:	b209      	sxth	r1, r1
 801c86e:	4589      	cmp	r9, r1
 801c870:	dbe8      	blt.n	801c844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c872:	4576      	cmp	r6, lr
 801c874:	fa1f fc8e 	uxth.w	ip, lr
 801c878:	88a1      	ldrh	r1, [r4, #4]
 801c87a:	dc07      	bgt.n	801c88c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801c87c:	eba3 0c0c 	sub.w	ip, r3, ip
 801c880:	f8a4 8000 	strh.w	r8, [r4]
 801c884:	eba1 010c 	sub.w	r1, r1, ip
 801c888:	80a1      	strh	r1, [r4, #4]
 801c88a:	e7da      	b.n	801c842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c88c:	4461      	add	r1, ip
 801c88e:	b209      	sxth	r1, r1
 801c890:	4588      	cmp	r8, r1
 801c892:	dbd7      	blt.n	801c844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c894:	9905      	ldr	r1, [sp, #20]
 801c896:	eba1 0c0c 	sub.w	ip, r1, ip
 801c89a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801c89e:	e7d0      	b.n	801c842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c8a0:	24015c3e 	.word	0x24015c3e
 801c8a4:	24015c3c 	.word	0x24015c3c
 801c8a8:	2d00      	cmp	r5, #0
 801c8aa:	f000 816d 	beq.w	801cb88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c8ae:	9b06      	ldr	r3, [sp, #24]
 801c8b0:	445b      	add	r3, fp
 801c8b2:	461c      	mov	r4, r3
 801c8b4:	9b02      	ldr	r3, [sp, #8]
 801c8b6:	3301      	adds	r3, #1
 801c8b8:	f000 8166 	beq.w	801cb88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c8bc:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801c8c0:	9803      	ldr	r0, [sp, #12]
 801c8c2:	4629      	mov	r1, r5
 801c8c4:	f7ff fd3a 	bl	801c33c <_ZNK8touchgfx4Rect8includesERKS0_>
 801c8c8:	b120      	cbz	r0, 801c8d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801c8ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c8ce:	9801      	ldr	r0, [sp, #4]
 801c8d0:	f7ff feb0 	bl	801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c8d4:	9903      	ldr	r1, [sp, #12]
 801c8d6:	4628      	mov	r0, r5
 801c8d8:	f7ff fcbd 	bl	801c256 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c8dc:	2800      	cmp	r0, #0
 801c8de:	f000 809c 	beq.w	801ca1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c8e2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801c8e6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801c8ea:	fa1f f189 	uxth.w	r1, r9
 801c8ee:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801c8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c8f4:	eb01 0c03 	add.w	ip, r1, r3
 801c8f8:	b283      	uxth	r3, r0
 801c8fa:	4548      	cmp	r0, r9
 801c8fc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801c900:	fa1f fa8c 	uxth.w	sl, ip
 801c904:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801c908:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801c90c:	eb03 050c 	add.w	r5, r3, ip
 801c910:	b2ad      	uxth	r5, r5
 801c912:	9505      	str	r5, [sp, #20]
 801c914:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801c918:	9504      	str	r5, [sp, #16]
 801c91a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801c91e:	f340 8099 	ble.w	801ca54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801c922:	1a5b      	subs	r3, r3, r1
 801c924:	4596      	cmp	lr, r2
 801c926:	fa0f f08a 	sxth.w	r0, sl
 801c92a:	b29b      	uxth	r3, r3
 801c92c:	b21e      	sxth	r6, r3
 801c92e:	dd2e      	ble.n	801c98e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801c930:	9f02      	ldr	r7, [sp, #8]
 801c932:	fa1f fe8e 	uxth.w	lr, lr
 801c936:	b292      	uxth	r2, r2
 801c938:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801c93c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801c940:	9f04      	ldr	r7, [sp, #16]
 801c942:	ebae 0102 	sub.w	r1, lr, r2
 801c946:	44a6      	add	lr, r4
 801c948:	1a3f      	subs	r7, r7, r0
 801c94a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801c94e:	b289      	uxth	r1, r1
 801c950:	4402      	add	r2, r0
 801c952:	fa0f fe8e 	sxth.w	lr, lr
 801c956:	b20d      	sxth	r5, r1
 801c958:	b212      	sxth	r2, r2
 801c95a:	436f      	muls	r7, r5
 801c95c:	ebae 0202 	sub.w	r2, lr, r2
 801c960:	4372      	muls	r2, r6
 801c962:	4297      	cmp	r7, r2
 801c964:	db09      	blt.n	801c97a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801c966:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801c96a:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801c96e:	449c      	add	ip, r3
 801c970:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c974:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801c978:	e686      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c97a:	4421      	add	r1, r4
 801c97c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801c980:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801c984:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c988:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c98c:	e67c      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c98e:	9f04      	ldr	r7, [sp, #16]
 801c990:	42b8      	cmp	r0, r7
 801c992:	da27      	bge.n	801c9e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801c994:	9902      	ldr	r1, [sp, #8]
 801c996:	1a3f      	subs	r7, r7, r0
 801c998:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801c99c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801c9a0:	eb05 010e 	add.w	r1, r5, lr
 801c9a4:	fa1f f881 	uxth.w	r8, r1
 801c9a8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801c9ac:	4411      	add	r1, r2
 801c9ae:	fa0f f988 	sxth.w	r9, r8
 801c9b2:	eba2 020e 	sub.w	r2, r2, lr
 801c9b6:	eba1 0108 	sub.w	r1, r1, r8
 801c9ba:	4372      	muls	r2, r6
 801c9bc:	b289      	uxth	r1, r1
 801c9be:	fa0f f881 	sxth.w	r8, r1
 801c9c2:	fb08 f707 	mul.w	r7, r8, r7
 801c9c6:	42ba      	cmp	r2, r7
 801c9c8:	dc06      	bgt.n	801c9d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801c9ca:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801c9ce:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801c9d2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801c9d6:	e7ca      	b.n	801c96e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801c9d8:	4429      	add	r1, r5
 801c9da:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801c9de:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c9e2:	e651      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c9e4:	9805      	ldr	r0, [sp, #20]
 801c9e6:	2d06      	cmp	r5, #6
 801c9e8:	ebaa 0000 	sub.w	r0, sl, r0
 801c9ec:	b280      	uxth	r0, r0
 801c9ee:	fa0f fe80 	sxth.w	lr, r0
 801c9f2:	d817      	bhi.n	801ca24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801c9f4:	9b04      	ldr	r3, [sp, #16]
 801c9f6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801c9fa:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801c9fe:	1c6b      	adds	r3, r5, #1
 801ca00:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801ca04:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801ca08:	9b01      	ldr	r3, [sp, #4]
 801ca0a:	9801      	ldr	r0, [sp, #4]
 801ca0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ca10:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801ca14:	805a      	strh	r2, [r3, #2]
 801ca16:	809e      	strh	r6, [r3, #4]
 801ca18:	80d9      	strh	r1, [r3, #6]
 801ca1a:	9b02      	ldr	r3, [sp, #8]
 801ca1c:	3c08      	subs	r4, #8
 801ca1e:	3b01      	subs	r3, #1
 801ca20:	9302      	str	r3, [sp, #8]
 801ca22:	e747      	b.n	801c8b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801ca24:	9a02      	ldr	r2, [sp, #8]
 801ca26:	45b6      	cmp	lr, r6
 801ca28:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ca2c:	db0d      	blt.n	801ca4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ca2e:	449c      	add	ip, r3
 801ca30:	445a      	add	r2, fp
 801ca32:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801ca36:	fa1f fc8c 	uxth.w	ip, ip
 801ca3a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801ca3e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801ca42:	448c      	add	ip, r1
 801ca44:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801ca48:	e61e      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ca4a:	445a      	add	r2, fp
 801ca4c:	4484      	add	ip, r0
 801ca4e:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801ca52:	e78f      	b.n	801c974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801ca54:	fa1f f18e 	uxth.w	r1, lr
 801ca58:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801ca5c:	b293      	uxth	r3, r2
 801ca5e:	4596      	cmp	lr, r2
 801ca60:	eb01 0806 	add.w	r8, r1, r6
 801ca64:	9306      	str	r3, [sp, #24]
 801ca66:	fa1f f888 	uxth.w	r8, r8
 801ca6a:	9f06      	ldr	r7, [sp, #24]
 801ca6c:	fa0f f388 	sxth.w	r3, r8
 801ca70:	9307      	str	r3, [sp, #28]
 801ca72:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801ca76:	443b      	add	r3, r7
 801ca78:	b29b      	uxth	r3, r3
 801ca7a:	9308      	str	r3, [sp, #32]
 801ca7c:	da24      	bge.n	801cac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801ca7e:	9905      	ldr	r1, [sp, #20]
 801ca80:	eba3 0308 	sub.w	r3, r3, r8
 801ca84:	eba2 020e 	sub.w	r2, r2, lr
 801ca88:	eba9 0000 	sub.w	r0, r9, r0
 801ca8c:	ebaa 0401 	sub.w	r4, sl, r1
 801ca90:	b29b      	uxth	r3, r3
 801ca92:	b2a4      	uxth	r4, r4
 801ca94:	b219      	sxth	r1, r3
 801ca96:	b225      	sxth	r5, r4
 801ca98:	4348      	muls	r0, r1
 801ca9a:	436a      	muls	r2, r5
 801ca9c:	4282      	cmp	r2, r0
 801ca9e:	9a02      	ldr	r2, [sp, #8]
 801caa0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801caa4:	445a      	add	r2, fp
 801caa6:	dc06      	bgt.n	801cab6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801caa8:	9b07      	ldr	r3, [sp, #28]
 801caaa:	44a4      	add	ip, r4
 801caac:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801cab0:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801cab4:	e75e      	b.n	801c974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801cab6:	9904      	ldr	r1, [sp, #16]
 801cab8:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801cabc:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801cac0:	4433      	add	r3, r6
 801cac2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801cac6:	e5df      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cac8:	9f06      	ldr	r7, [sp, #24]
 801caca:	9b04      	ldr	r3, [sp, #16]
 801cacc:	1bc9      	subs	r1, r1, r7
 801cace:	fa0f f78a 	sxth.w	r7, sl
 801cad2:	b289      	uxth	r1, r1
 801cad4:	429f      	cmp	r7, r3
 801cad6:	fa0f fe81 	sxth.w	lr, r1
 801cada:	dd23      	ble.n	801cb24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801cadc:	9a05      	ldr	r2, [sp, #20]
 801cade:	eba9 0000 	sub.w	r0, r9, r0
 801cae2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cae6:	ebaa 0202 	sub.w	r2, sl, r2
 801caea:	9d07      	ldr	r5, [sp, #28]
 801caec:	fb0e f000 	mul.w	r0, lr, r0
 801caf0:	b292      	uxth	r2, r2
 801caf2:	eba5 0a03 	sub.w	sl, r5, r3
 801caf6:	9b02      	ldr	r3, [sp, #8]
 801caf8:	b214      	sxth	r4, r2
 801cafa:	00db      	lsls	r3, r3, #3
 801cafc:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb00:	445b      	add	r3, fp
 801cb02:	4550      	cmp	r0, sl
 801cb04:	db03      	blt.n	801cb0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801cb06:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801cb0a:	4494      	add	ip, r2
 801cb0c:	e732      	b.n	801c974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801cb0e:	9a04      	ldr	r2, [sp, #16]
 801cb10:	4431      	add	r1, r6
 801cb12:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801cb16:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801cb1a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801cb1e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801cb22:	e75c      	b.n	801c9de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801cb24:	9b08      	ldr	r3, [sp, #32]
 801cb26:	2d06      	cmp	r5, #6
 801cb28:	eba3 0308 	sub.w	r3, r3, r8
 801cb2c:	b29b      	uxth	r3, r3
 801cb2e:	b218      	sxth	r0, r3
 801cb30:	d813      	bhi.n	801cb5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801cb32:	9b07      	ldr	r3, [sp, #28]
 801cb34:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801cb38:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801cb3c:	1c6b      	adds	r3, r5, #1
 801cb3e:	9901      	ldr	r1, [sp, #4]
 801cb40:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801cb44:	9b01      	ldr	r3, [sp, #4]
 801cb46:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801cb4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cb4e:	805a      	strh	r2, [r3, #2]
 801cb50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb52:	f8a3 e006 	strh.w	lr, [r3, #6]
 801cb56:	809a      	strh	r2, [r3, #4]
 801cb58:	e75f      	b.n	801ca1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801cb5a:	9c02      	ldr	r4, [sp, #8]
 801cb5c:	4570      	cmp	r0, lr
 801cb5e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801cb62:	db0d      	blt.n	801cb80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801cb64:	4431      	add	r1, r6
 801cb66:	9b06      	ldr	r3, [sp, #24]
 801cb68:	445c      	add	r4, fp
 801cb6a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801cb6e:	b289      	uxth	r1, r1
 801cb70:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801cb74:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801cb78:	4419      	add	r1, r3
 801cb7a:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801cb7e:	e583      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cb80:	445c      	add	r4, fp
 801cb82:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801cb86:	e79b      	b.n	801cac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801cb88:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801cb8c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801cb90:	1e65      	subs	r5, r4, #1
 801cb92:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801cb96:	b2ad      	uxth	r5, r5
 801cb98:	42b5      	cmp	r5, r6
 801cb9a:	d044      	beq.n	801cc26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801cb9c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801cba0:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801cba4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801cba8:	4282      	cmp	r2, r0
 801cbaa:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801cbae:	d11f      	bne.n	801cbf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801cbb0:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801cbb4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801cbb8:	459c      	cmp	ip, r3
 801cbba:	d119      	bne.n	801cbf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801cbbc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801cbc0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801cbc4:	19d8      	adds	r0, r3, r7
 801cbc6:	b200      	sxth	r0, r0
 801cbc8:	4288      	cmp	r0, r1
 801cbca:	d109      	bne.n	801cbe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801cbcc:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801cbd0:	4413      	add	r3, r2
 801cbd2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801cbd6:	4629      	mov	r1, r5
 801cbd8:	9801      	ldr	r0, [sp, #4]
 801cbda:	f7ff fd2b 	bl	801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cbde:	e003      	b.n	801cbe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801cbe0:	4411      	add	r1, r2
 801cbe2:	b209      	sxth	r1, r1
 801cbe4:	42b9      	cmp	r1, r7
 801cbe6:	d0f3      	beq.n	801cbd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801cbe8:	3d01      	subs	r5, #1
 801cbea:	3c08      	subs	r4, #8
 801cbec:	b2ad      	uxth	r5, r5
 801cbee:	e7d3      	b.n	801cb98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801cbf0:	42b9      	cmp	r1, r7
 801cbf2:	d1f9      	bne.n	801cbe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801cbf4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801cbf8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801cbfc:	4299      	cmp	r1, r3
 801cbfe:	d1f3      	bne.n	801cbe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801cc00:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801cc04:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801cc08:	181f      	adds	r7, r3, r0
 801cc0a:	b23f      	sxth	r7, r7
 801cc0c:	42ba      	cmp	r2, r7
 801cc0e:	d105      	bne.n	801cc1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801cc10:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801cc14:	440b      	add	r3, r1
 801cc16:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801cc1a:	e7dc      	b.n	801cbd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801cc1c:	440a      	add	r2, r1
 801cc1e:	b212      	sxth	r2, r2
 801cc20:	4290      	cmp	r0, r2
 801cc22:	d1e1      	bne.n	801cbe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801cc24:	e7f6      	b.n	801cc14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801cc26:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801cc2a:	2e07      	cmp	r6, #7
 801cc2c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801cc30:	d812      	bhi.n	801cc58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801cc32:	1c75      	adds	r5, r6, #1
 801cc34:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801cc38:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801cc3c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801cc40:	9d01      	ldr	r5, [sp, #4]
 801cc42:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801cc46:	442c      	add	r4, r5
 801cc48:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801cc4c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801cc50:	8061      	strh	r1, [r4, #2]
 801cc52:	80a2      	strh	r2, [r4, #4]
 801cc54:	80e3      	strh	r3, [r4, #6]
 801cc56:	e581      	b.n	801c75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801cc58:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801cc5c:	3e01      	subs	r6, #1
 801cc5e:	445c      	add	r4, fp
 801cc60:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801cc64:	f04f 37ff 	mov.w	r7, #4294967295
 801cc68:	2500      	movs	r5, #0
 801cc6a:	9305      	str	r3, [sp, #20]
 801cc6c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801cc70:	1e72      	subs	r2, r6, #1
 801cc72:	9302      	str	r3, [sp, #8]
 801cc74:	4691      	mov	r9, r2
 801cc76:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801cc7a:	9304      	str	r3, [sp, #16]
 801cc7c:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801cc80:	f1b9 3fff 	cmp.w	r9, #4294967295
 801cc84:	6818      	ldr	r0, [r3, #0]
 801cc86:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801cc8a:	9207      	str	r2, [sp, #28]
 801cc8c:	bf16      	itet	ne
 801cc8e:	9905      	ldrne	r1, [sp, #20]
 801cc90:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801cc94:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801cc98:	9306      	str	r3, [sp, #24]
 801cc9a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801cc9e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801cca2:	fb18 f801 	smulbb	r8, r8, r1
 801cca6:	6859      	ldr	r1, [r3, #4]
 801cca8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ccac:	4671      	mov	r1, lr
 801ccae:	a80c      	add	r0, sp, #48	@ 0x30
 801ccb0:	f7ff fb6a 	bl	801c388 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ccb4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801ccb8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801ccbc:	f04f 0c08 	mov.w	ip, #8
 801ccc0:	9b04      	ldr	r3, [sp, #16]
 801ccc2:	9a02      	ldr	r2, [sp, #8]
 801ccc4:	fb10 f001 	smulbb	r0, r0, r1
 801ccc8:	fb02 8803 	mla	r8, r2, r3, r8
 801cccc:	eba0 0108 	sub.w	r1, r0, r8
 801ccd0:	fb90 f0fc 	sdiv	r0, r0, ip
 801ccd4:	4288      	cmp	r0, r1
 801ccd6:	dc20      	bgt.n	801cd1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801ccd8:	4551      	cmp	r1, sl
 801ccda:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ccde:	da03      	bge.n	801cce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801cce0:	b1d9      	cbz	r1, 801cd1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801cce2:	468a      	mov	sl, r1
 801cce4:	464f      	mov	r7, r9
 801cce6:	4635      	mov	r5, r6
 801cce8:	f109 39ff 	add.w	r9, r9, #4294967295
 801ccec:	f119 0f02 	cmn.w	r9, #2
 801ccf0:	d1c6      	bne.n	801cc80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801ccf2:	4616      	mov	r6, r2
 801ccf4:	3201      	adds	r2, #1
 801ccf6:	f1a4 0408 	sub.w	r4, r4, #8
 801ccfa:	d1b7      	bne.n	801cc6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801ccfc:	9b01      	ldr	r3, [sp, #4]
 801ccfe:	b2ac      	uxth	r4, r5
 801cd00:	00ed      	lsls	r5, r5, #3
 801cd02:	1958      	adds	r0, r3, r5
 801cd04:	1c7b      	adds	r3, r7, #1
 801cd06:	d10b      	bne.n	801cd20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801cd08:	4601      	mov	r1, r0
 801cd0a:	9803      	ldr	r0, [sp, #12]
 801cd0c:	f7ff fb3c 	bl	801c388 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cd10:	4621      	mov	r1, r4
 801cd12:	9801      	ldr	r0, [sp, #4]
 801cd14:	f7ff fc8e 	bl	801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cd18:	e4b6      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cd1a:	464f      	mov	r7, r9
 801cd1c:	4635      	mov	r5, r6
 801cd1e:	e7ed      	b.n	801ccfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801cd20:	9b01      	ldr	r3, [sp, #4]
 801cd22:	00ff      	lsls	r7, r7, #3
 801cd24:	445d      	add	r5, fp
 801cd26:	19d9      	adds	r1, r3, r7
 801cd28:	445f      	add	r7, fp
 801cd2a:	f7ff fb2d 	bl	801c388 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cd2e:	9b03      	ldr	r3, [sp, #12]
 801cd30:	cb03      	ldmia	r3!, {r0, r1}
 801cd32:	9b03      	ldr	r3, [sp, #12]
 801cd34:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801cd38:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801cd3c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801cd40:	6869      	ldr	r1, [r5, #4]
 801cd42:	c303      	stmia	r3!, {r0, r1}
 801cd44:	e7e4      	b.n	801cd10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801cd46:	bf00      	nop

0801cd48 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd4c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801cd50:	b09b      	sub	sp, #108	@ 0x6c
 801cd52:	4604      	mov	r4, r0
 801cd54:	4630      	mov	r0, r6
 801cd56:	f7fb f81a 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd5a:	4605      	mov	r5, r0
 801cd5c:	b948      	cbnz	r0, 801cd72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801cd5e:	6823      	ldr	r3, [r4, #0]
 801cd60:	4620      	mov	r0, r4
 801cd62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cd64:	e896 0006 	ldmia.w	r6, {r1, r2}
 801cd68:	4798      	blx	r3
 801cd6a:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801cd6e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801cd72:	4bc5      	ldr	r3, [pc, #788]	@ (801d088 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d03f      	beq.n	801cdfa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801cd7a:	4dc4      	ldr	r5, [pc, #784]	@ (801d08c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801cd7c:	4628      	mov	r0, r5
 801cd7e:	f7fb f806 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd82:	4606      	mov	r6, r0
 801cd84:	2800      	cmp	r0, #0
 801cd86:	d138      	bne.n	801cdfa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801cd88:	4628      	mov	r0, r5
 801cd8a:	f7ff f991 	bl	801c0b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cd8e:	6823      	ldr	r3, [r4, #0]
 801cd90:	6829      	ldr	r1, [r5, #0]
 801cd92:	4620      	mov	r0, r4
 801cd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cd96:	686a      	ldr	r2, [r5, #4]
 801cd98:	4798      	blx	r3
 801cd9a:	802e      	strh	r6, [r5, #0]
 801cd9c:	806e      	strh	r6, [r5, #2]
 801cd9e:	80ae      	strh	r6, [r5, #4]
 801cda0:	80ee      	strh	r6, [r5, #6]
 801cda2:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801cda6:	4dba      	ldr	r5, [pc, #744]	@ (801d090 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801cda8:	4640      	mov	r0, r8
 801cdaa:	f7ff fbe7 	bl	801c57c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cdae:	882e      	ldrh	r6, [r5, #0]
 801cdb0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801cdb4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801cdb8:	4633      	mov	r3, r6
 801cdba:	42bb      	cmp	r3, r7
 801cdbc:	d224      	bcs.n	801ce08 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801cdbe:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801cdc2:	2907      	cmp	r1, #7
 801cdc4:	d816      	bhi.n	801cdf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801cdc6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801cdca:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801cdce:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801cdd2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801cdd6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801cdda:	1c4a      	adds	r2, r1, #1
 801cddc:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801cde0:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801cde4:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801cde8:	f8a2 a002 	strh.w	sl, [r2, #2]
 801cdec:	f8a2 e004 	strh.w	lr, [r2, #4]
 801cdf0:	f8a2 c006 	strh.w	ip, [r2, #6]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	b29b      	uxth	r3, r3
 801cdf8:	e7df      	b.n	801cdba <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801cdfa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d1cf      	bne.n	801cda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801ce02:	b01b      	add	sp, #108	@ 0x6c
 801ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce08:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801ce0c:	42b3      	cmp	r3, r6
 801ce0e:	d90c      	bls.n	801ce2a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801ce10:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ce14:	6822      	ldr	r2, [r4, #0]
 801ce16:	3601      	adds	r6, #1
 801ce18:	4620      	mov	r0, r4
 801ce1a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801ce1c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801ce20:	b2b6      	uxth	r6, r6
 801ce22:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801ce26:	47b8      	blx	r7
 801ce28:	e7ee      	b.n	801ce08 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801ce2a:	4a9a      	ldr	r2, [pc, #616]	@ (801d094 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ce2c:	6813      	ldr	r3, [r2, #0]
 801ce2e:	4691      	mov	r9, r2
 801ce30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801ce34:	2b01      	cmp	r3, #1
 801ce36:	f040 80e0 	bne.w	801cffa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801ce3a:	8829      	ldrh	r1, [r5, #0]
 801ce3c:	2600      	movs	r6, #0
 801ce3e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801ce42:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801ce46:	33ae      	adds	r3, #174	@ 0xae
 801ce48:	428f      	cmp	r7, r1
 801ce4a:	f103 0308 	add.w	r3, r3, #8
 801ce4e:	dd0a      	ble.n	801ce66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801ce50:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801ce54:	3101      	adds	r1, #1
 801ce56:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801ce5a:	4402      	add	r2, r0
 801ce5c:	b212      	sxth	r2, r2
 801ce5e:	4296      	cmp	r6, r2
 801ce60:	bfb8      	it	lt
 801ce62:	4616      	movlt	r6, r2
 801ce64:	e7f0      	b.n	801ce48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801ce66:	4b8c      	ldr	r3, [pc, #560]	@ (801d098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801ce68:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801d094 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801ce6c:	881b      	ldrh	r3, [r3, #0]
 801ce6e:	2b0f      	cmp	r3, #15
 801ce70:	bf8c      	ite	hi
 801ce72:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801ce76:	f04f 0b01 	movls.w	fp, #1
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ce80:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801ce84:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801ce88:	4b82      	ldr	r3, [pc, #520]	@ (801d094 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ce8a:	4438      	add	r0, r7
 801ce8c:	b207      	sxth	r7, r0
 801ce8e:	6818      	ldr	r0, [r3, #0]
 801ce90:	42b7      	cmp	r7, r6
 801ce92:	6803      	ldr	r3, [r0, #0]
 801ce94:	f280 8083 	bge.w	801cf9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801ce98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ce9c:	4798      	blx	r3
 801ce9e:	eb07 030b 	add.w	r3, r7, fp
 801cea2:	4298      	cmp	r0, r3
 801cea4:	da07      	bge.n	801ceb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801cea6:	42b0      	cmp	r0, r6
 801cea8:	da05      	bge.n	801ceb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801ceaa:	4287      	cmp	r7, r0
 801ceac:	dd6c      	ble.n	801cf88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801ceae:	2f00      	cmp	r7, #0
 801ceb0:	dd6a      	ble.n	801cf88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801ceb2:	4630      	mov	r0, r6
 801ceb4:	e004      	b.n	801cec0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801ceb6:	4287      	cmp	r7, r0
 801ceb8:	dcfb      	bgt.n	801ceb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801ceba:	42b0      	cmp	r0, r6
 801cebc:	bfa8      	it	ge
 801cebe:	4630      	movge	r0, r6
 801cec0:	4b76      	ldr	r3, [pc, #472]	@ (801d09c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801cec2:	1bc0      	subs	r0, r0, r7
 801cec4:	2200      	movs	r2, #0
 801cec6:	f8ad 7016 	strh.w	r7, [sp, #22]
 801ceca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cece:	882f      	ldrh	r7, [r5, #0]
 801ced0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ced4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ced8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801cedc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801cee0:	42bb      	cmp	r3, r7
 801cee2:	d9cd      	bls.n	801ce80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801cee4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801cee8:	ab07      	add	r3, sp, #28
 801ceea:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801ceee:	6851      	ldr	r1, [r2, #4]
 801cef0:	c303      	stmia	r3!, {r0, r1}
 801cef2:	a905      	add	r1, sp, #20
 801cef4:	a807      	add	r0, sp, #28
 801cef6:	f7ff f9ae 	bl	801c256 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cefa:	2800      	cmp	r0, #0
 801cefc:	d04c      	beq.n	801cf98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801cefe:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801cf02:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801cf06:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801cf0a:	4686      	mov	lr, r0
 801cf0c:	4290      	cmp	r0, r2
 801cf0e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801cf12:	4450      	add	r0, sl
 801cf14:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801cf18:	bfb8      	it	lt
 801cf1a:	4696      	movlt	lr, r2
 801cf1c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cf20:	4452      	add	r2, sl
 801cf22:	b280      	uxth	r0, r0
 801cf24:	4299      	cmp	r1, r3
 801cf26:	468c      	mov	ip, r1
 801cf28:	b292      	uxth	r2, r2
 801cf2a:	9302      	str	r3, [sp, #8]
 801cf2c:	bfb8      	it	lt
 801cf2e:	469c      	movlt	ip, r3
 801cf30:	b203      	sxth	r3, r0
 801cf32:	fa0f fa82 	sxth.w	sl, r2
 801cf36:	f8ad e01c 	strh.w	lr, [sp, #28]
 801cf3a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801cf3e:	4553      	cmp	r3, sl
 801cf40:	bfb8      	it	lt
 801cf42:	4602      	movlt	r2, r0
 801cf44:	9b02      	ldr	r3, [sp, #8]
 801cf46:	eba2 020e 	sub.w	r2, r2, lr
 801cf4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801cf4e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801cf52:	4411      	add	r1, r2
 801cf54:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801cf58:	4413      	add	r3, r2
 801cf5a:	b289      	uxth	r1, r1
 801cf5c:	b29b      	uxth	r3, r3
 801cf5e:	b208      	sxth	r0, r1
 801cf60:	b21a      	sxth	r2, r3
 801cf62:	4290      	cmp	r0, r2
 801cf64:	bfb8      	it	lt
 801cf66:	460b      	movlt	r3, r1
 801cf68:	eba3 030c 	sub.w	r3, r3, ip
 801cf6c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801cf70:	a807      	add	r0, sp, #28
 801cf72:	f7fa ff0c 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf76:	b920      	cbnz	r0, 801cf82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801cf78:	6823      	ldr	r3, [r4, #0]
 801cf7a:	a907      	add	r1, sp, #28
 801cf7c:	4620      	mov	r0, r4
 801cf7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cf80:	4798      	blx	r3
 801cf82:	3701      	adds	r7, #1
 801cf84:	b2bf      	uxth	r7, r7
 801cf86:	e7a9      	b.n	801cedc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801cf88:	f8d9 0000 	ldr.w	r0, [r9]
 801cf8c:	2101      	movs	r1, #1
 801cf8e:	6803      	ldr	r3, [r0, #0]
 801cf90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801cf94:	4798      	blx	r3
 801cf96:	e773      	b.n	801ce80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801cf98:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801cf9c:	e7e8      	b.n	801cf70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801cf9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cfa0:	4798      	blx	r3
 801cfa2:	4b3f      	ldr	r3, [pc, #252]	@ (801d0a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801cfa4:	781b      	ldrb	r3, [r3, #0]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	f43f af2b 	beq.w	801ce02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801cfac:	2300      	movs	r3, #0
 801cfae:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801cfb2:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801cfb6:	882b      	ldrh	r3, [r5, #0]
 801cfb8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801cfbc:	42ab      	cmp	r3, r5
 801cfbe:	f4bf af20 	bcs.w	801ce02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801cfc2:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801cfc6:	2907      	cmp	r1, #7
 801cfc8:	d814      	bhi.n	801cff4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801cfca:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801cfce:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801cfd2:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801cfd6:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801cfda:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801cfde:	1c4a      	adds	r2, r1, #1
 801cfe0:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801cfe4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801cfe8:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801cfec:	f8a2 c002 	strh.w	ip, [r2, #2]
 801cff0:	8097      	strh	r7, [r2, #4]
 801cff2:	80d6      	strh	r6, [r2, #6]
 801cff4:	3301      	adds	r3, #1
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	e7e0      	b.n	801cfbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801cffa:	2b02      	cmp	r3, #2
 801cffc:	f040 8133 	bne.w	801d266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801d000:	4b28      	ldr	r3, [pc, #160]	@ (801d0a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801d002:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801d006:	781b      	ldrb	r3, [r3, #0]
 801d008:	2b01      	cmp	r3, #1
 801d00a:	f000 8098 	beq.w	801d13e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801d00e:	882a      	ldrh	r2, [r5, #0]
 801d010:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801d014:	3201      	adds	r2, #1
 801d016:	b292      	uxth	r2, r2
 801d018:	2900      	cmp	r1, #0
 801d01a:	d0c2      	beq.n	801cfa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d01c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801d020:	4694      	mov	ip, r2
 801d022:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801d026:	f04f 0900 	mov.w	r9, #0
 801d02a:	441e      	add	r6, r3
 801d02c:	b236      	sxth	r6, r6
 801d02e:	fa1f f38c 	uxth.w	r3, ip
 801d032:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801d036:	4299      	cmp	r1, r3
 801d038:	f240 80be 	bls.w	801d1b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801d03c:	4427      	add	r7, r4
 801d03e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801d042:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801d046:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801d04a:	4283      	cmp	r3, r0
 801d04c:	f340 80a0 	ble.w	801d190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801d050:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801d054:	46e1      	mov	r9, ip
 801d056:	4406      	add	r6, r0
 801d058:	b236      	sxth	r6, r6
 801d05a:	429e      	cmp	r6, r3
 801d05c:	bfa8      	it	ge
 801d05e:	461e      	movge	r6, r3
 801d060:	f10c 0c01 	add.w	ip, ip, #1
 801d064:	e7e3      	b.n	801d02e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801d066:	d10a      	bne.n	801d07e <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801d068:	4562      	cmp	r2, ip
 801d06a:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801d06e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801d072:	bfb8      	it	lt
 801d074:	4662      	movlt	r2, ip
 801d076:	4288      	cmp	r0, r1
 801d078:	bfb8      	it	lt
 801d07a:	461f      	movlt	r7, r3
 801d07c:	e086      	b.n	801d18c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801d07e:	428a      	cmp	r2, r1
 801d080:	bfb8      	it	lt
 801d082:	460a      	movlt	r2, r1
 801d084:	e082      	b.n	801d18c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801d086:	bf00      	nop
 801d088:	24015c88 	.word	0x24015c88
 801d08c:	24015c94 	.word	0x24015c94
 801d090:	24000050 	.word	0x24000050
 801d094:	24015c48 	.word	0x24015c48
 801d098:	24015c3e 	.word	0x24015c3e
 801d09c:	24015c3c 	.word	0x24015c3c
 801d0a0:	24015c46 	.word	0x24015c46
 801d0a4:	24015c40 	.word	0x24015c40
 801d0a8:	19a1      	adds	r1, r4, r6
 801d0aa:	ab07      	add	r3, sp, #28
 801d0ac:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801d0b0:	6849      	ldr	r1, [r1, #4]
 801d0b2:	c303      	stmia	r3!, {r0, r1}
 801d0b4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d0b8:	a807      	add	r0, sp, #28
 801d0ba:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d0be:	2b13      	cmp	r3, #19
 801d0c0:	440b      	add	r3, r1
 801d0c2:	bfd8      	it	le
 801d0c4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801d0c8:	1a9b      	subs	r3, r3, r2
 801d0ca:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d0ce:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d0d2:	f7ff f807 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d0d6:	a807      	add	r0, sp, #28
 801d0d8:	f7fa fe59 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d0dc:	bb78      	cbnz	r0, 801d13e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801d0de:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801d0e2:	4426      	add	r6, r4
 801d0e4:	f8d9 0000 	ldr.w	r0, [r9]
 801d0e8:	f1bc 0f14 	cmp.w	ip, #20
 801d0ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d0f0:	f8d0 e000 	ldr.w	lr, [r0]
 801d0f4:	bfa8      	it	ge
 801d0f6:	f04f 0c14 	movge.w	ip, #20
 801d0fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801d0fe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d102:	fa1f fc8c 	uxth.w	ip, ip
 801d106:	f8cd c000 	str.w	ip, [sp]
 801d10a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801d10e:	47d8      	blx	fp
 801d110:	4683      	mov	fp, r0
 801d112:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801d116:	a807      	add	r0, sp, #28
 801d118:	f7fe ffca 	bl	801c0b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d11c:	6823      	ldr	r3, [r4, #0]
 801d11e:	4620      	mov	r0, r4
 801d120:	a907      	add	r1, sp, #28
 801d122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d124:	4798      	blx	r3
 801d126:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801d12a:	eba0 000b 	sub.w	r0, r0, fp
 801d12e:	b200      	sxth	r0, r0
 801d130:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801d134:	b918      	cbnz	r0, 801d13e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801d136:	b2b9      	uxth	r1, r7
 801d138:	4650      	mov	r0, sl
 801d13a:	f7ff fa7b 	bl	801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d13e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801d142:	f1bb 0f00 	cmp.w	fp, #0
 801d146:	f43f af2c 	beq.w	801cfa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d14a:	882b      	ldrh	r3, [r5, #0]
 801d14c:	2700      	movs	r7, #0
 801d14e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801d152:	3301      	adds	r3, #1
 801d154:	b29b      	uxth	r3, r3
 801d156:	b299      	uxth	r1, r3
 801d158:	00fe      	lsls	r6, r7, #3
 801d15a:	458b      	cmp	fp, r1
 801d15c:	d9a4      	bls.n	801d0a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801d15e:	4426      	add	r6, r4
 801d160:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801d164:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801d168:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801d16c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801d170:	4408      	add	r0, r1
 801d172:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801d176:	4461      	add	r1, ip
 801d178:	b200      	sxth	r0, r0
 801d17a:	b209      	sxth	r1, r1
 801d17c:	4288      	cmp	r0, r1
 801d17e:	f6bf af72 	bge.w	801d066 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801d182:	4584      	cmp	ip, r0
 801d184:	4662      	mov	r2, ip
 801d186:	461f      	mov	r7, r3
 801d188:	bfb8      	it	lt
 801d18a:	4602      	movlt	r2, r0
 801d18c:	3301      	adds	r3, #1
 801d18e:	e7e2      	b.n	801d156 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801d190:	d10e      	bne.n	801d1b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801d192:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801d196:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801d19a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801d19e:	4473      	add	r3, lr
 801d1a0:	b21b      	sxth	r3, r3
 801d1a2:	429e      	cmp	r6, r3
 801d1a4:	bfa8      	it	ge
 801d1a6:	461e      	movge	r6, r3
 801d1a8:	4287      	cmp	r7, r0
 801d1aa:	bfb8      	it	lt
 801d1ac:	46e1      	movlt	r9, ip
 801d1ae:	e757      	b.n	801d060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801d1b0:	4286      	cmp	r6, r0
 801d1b2:	bfa8      	it	ge
 801d1b4:	4606      	movge	r6, r0
 801d1b6:	e753      	b.n	801d060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801d1b8:	eb0a 0007 	add.w	r0, sl, r7
 801d1bc:	4427      	add	r7, r4
 801d1be:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801d1c2:	f1bb 0f13 	cmp.w	fp, #19
 801d1c6:	bfdc      	itt	le
 801d1c8:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801d1cc:	445e      	addle	r6, fp
 801d1ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801d1d2:	bfd8      	it	le
 801d1d4:	b236      	sxthle	r6, r6
 801d1d6:	f7fa fdda 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d1da:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d1de:	2800      	cmp	r0, #0
 801d1e0:	f47f af1a 	bne.w	801d018 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801d1e4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801d1e8:	fa1f fb8b 	uxth.w	fp, fp
 801d1ec:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801d1f0:	1ab6      	subs	r6, r6, r2
 801d1f2:	4829      	ldr	r0, [pc, #164]	@ (801d298 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801d1f4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801d1f8:	2e14      	cmp	r6, #20
 801d1fa:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801d1fe:	6800      	ldr	r0, [r0, #0]
 801d200:	bfa8      	it	ge
 801d202:	2614      	movge	r6, #20
 801d204:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d208:	f8ad 201e 	strh.w	r2, [sp, #30]
 801d20c:	b289      	uxth	r1, r1
 801d20e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d212:	b2b6      	uxth	r6, r6
 801d214:	f8d0 c000 	ldr.w	ip, [r0]
 801d218:	b292      	uxth	r2, r2
 801d21a:	455e      	cmp	r6, fp
 801d21c:	bf94      	ite	ls
 801d21e:	9600      	strls	r6, [sp, #0]
 801d220:	f8cd b000 	strhi.w	fp, [sp]
 801d224:	b29b      	uxth	r3, r3
 801d226:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801d22a:	47b0      	blx	r6
 801d22c:	6823      	ldr	r3, [r4, #0]
 801d22e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801d232:	a907      	add	r1, sp, #28
 801d234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d236:	4620      	mov	r0, r4
 801d238:	4798      	blx	r3
 801d23a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801d23e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801d242:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801d246:	1a5b      	subs	r3, r3, r1
 801d248:	440a      	add	r2, r1
 801d24a:	b21b      	sxth	r3, r3
 801d24c:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801d250:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801d254:	2b00      	cmp	r3, #0
 801d256:	f47f aeda 	bne.w	801d00e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801d25a:	fa1f f189 	uxth.w	r1, r9
 801d25e:	4650      	mov	r0, sl
 801d260:	f7ff f9e8 	bl	801c634 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d264:	e6d3      	b.n	801d00e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801d266:	882e      	ldrh	r6, [r5, #0]
 801d268:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801d26c:	42b3      	cmp	r3, r6
 801d26e:	f67f ae98 	bls.w	801cfa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801d272:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801d276:	ab07      	add	r3, sp, #28
 801d278:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801d27c:	6851      	ldr	r1, [r2, #4]
 801d27e:	c303      	stmia	r3!, {r0, r1}
 801d280:	a807      	add	r0, sp, #28
 801d282:	f7fa fd84 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d286:	b920      	cbnz	r0, 801d292 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801d288:	6823      	ldr	r3, [r4, #0]
 801d28a:	a907      	add	r1, sp, #28
 801d28c:	4620      	mov	r0, r4
 801d28e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d290:	4798      	blx	r3
 801d292:	3601      	adds	r6, #1
 801d294:	b2b6      	uxth	r6, r6
 801d296:	e7e7      	b.n	801d268 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801d298:	24015c48 	.word	0x24015c48

0801d29c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d29c:	4b03      	ldr	r3, [pc, #12]	@ (801d2ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d29e:	2200      	movs	r2, #0
 801d2a0:	801a      	strh	r2, [r3, #0]
 801d2a2:	805a      	strh	r2, [r3, #2]
 801d2a4:	809a      	strh	r2, [r3, #4]
 801d2a6:	80da      	strh	r2, [r3, #6]
 801d2a8:	4770      	bx	lr
 801d2aa:	bf00      	nop
 801d2ac:	24015c94 	.word	0x24015c94

0801d2b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2b4:	b09d      	sub	sp, #116	@ 0x74
 801d2b6:	4606      	mov	r6, r0
 801d2b8:	4614      	mov	r4, r2
 801d2ba:	468a      	mov	sl, r1
 801d2bc:	a803      	add	r0, sp, #12
 801d2be:	461d      	mov	r5, r3
 801d2c0:	f001 f89e 	bl	801e400 <_ZN8touchgfx12TextProviderC1Ev>
 801d2c4:	6833      	ldr	r3, [r6, #0]
 801d2c6:	4630      	mov	r0, r6
 801d2c8:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801d2cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d2ce:	4798      	blx	r3
 801d2d0:	6833      	ldr	r3, [r6, #0]
 801d2d2:	4607      	mov	r7, r0
 801d2d4:	4630      	mov	r0, r6
 801d2d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d2d8:	4798      	blx	r3
 801d2da:	462a      	mov	r2, r5
 801d2dc:	2500      	movs	r5, #0
 801d2de:	4621      	mov	r1, r4
 801d2e0:	9000      	str	r0, [sp, #0]
 801d2e2:	463b      	mov	r3, r7
 801d2e4:	462c      	mov	r4, r5
 801d2e6:	46a9      	mov	r9, r5
 801d2e8:	46a8      	mov	r8, r5
 801d2ea:	a803      	add	r0, sp, #12
 801d2ec:	f001 f8db 	bl	801e4a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	9302      	str	r3, [sp, #8]
 801d2f4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801d2f8:	429c      	cmp	r4, r3
 801d2fa:	d002      	beq.n	801d302 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801d2fc:	455c      	cmp	r4, fp
 801d2fe:	bf18      	it	ne
 801d300:	4625      	movne	r5, r4
 801d302:	ab02      	add	r3, sp, #8
 801d304:	4632      	mov	r2, r6
 801d306:	4651      	mov	r1, sl
 801d308:	a803      	add	r0, sp, #12
 801d30a:	f001 fbc1 	bl	801ea90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d30e:	4604      	mov	r4, r0
 801d310:	b108      	cbz	r0, 801d316 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801d312:	280a      	cmp	r0, #10
 801d314:	d10a      	bne.n	801d32c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801d316:	45c1      	cmp	r9, r8
 801d318:	bf38      	it	cc
 801d31a:	46c1      	movcc	r9, r8
 801d31c:	f04f 0800 	mov.w	r8, #0
 801d320:	2c00      	cmp	r4, #0
 801d322:	d1e5      	bne.n	801d2f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d324:	4648      	mov	r0, r9
 801d326:	b01d      	add	sp, #116	@ 0x74
 801d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d32c:	9a02      	ldr	r2, [sp, #8]
 801d32e:	2a00      	cmp	r2, #0
 801d330:	d0de      	beq.n	801d2f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d332:	7b57      	ldrb	r7, [r2, #13]
 801d334:	4629      	mov	r1, r5
 801d336:	6833      	ldr	r3, [r6, #0]
 801d338:	007f      	lsls	r7, r7, #1
 801d33a:	8894      	ldrh	r4, [r2, #4]
 801d33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d33e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801d342:	7a97      	ldrb	r7, [r2, #10]
 801d344:	4307      	orrs	r7, r0
 801d346:	4630      	mov	r0, r6
 801d348:	4798      	blx	r3
 801d34a:	4438      	add	r0, r7
 801d34c:	4480      	add	r8, r0
 801d34e:	fa1f f888 	uxth.w	r8, r8
 801d352:	e7e5      	b.n	801d320 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801d354 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801d354:	b508      	push	{r3, lr}
 801d356:	6803      	ldr	r3, [r0, #0]
 801d358:	68db      	ldr	r3, [r3, #12]
 801d35a:	4798      	blx	r3
 801d35c:	b128      	cbz	r0, 801d36a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801d35e:	7b43      	ldrb	r3, [r0, #13]
 801d360:	7a80      	ldrb	r0, [r0, #10]
 801d362:	005b      	lsls	r3, r3, #1
 801d364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d368:	4318      	orrs	r0, r3
 801d36a:	bd08      	pop	{r3, pc}

0801d36c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801d36c:	b40e      	push	{r1, r2, r3}
 801d36e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d370:	b09e      	sub	sp, #120	@ 0x78
 801d372:	4605      	mov	r5, r0
 801d374:	ab23      	add	r3, sp, #140	@ 0x8c
 801d376:	a805      	add	r0, sp, #20
 801d378:	f853 4b04 	ldr.w	r4, [r3], #4
 801d37c:	9303      	str	r3, [sp, #12]
 801d37e:	f001 f83f 	bl	801e400 <_ZN8touchgfx12TextProviderC1Ev>
 801d382:	682b      	ldr	r3, [r5, #0]
 801d384:	4628      	mov	r0, r5
 801d386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d388:	4798      	blx	r3
 801d38a:	682b      	ldr	r3, [r5, #0]
 801d38c:	4606      	mov	r6, r0
 801d38e:	4628      	mov	r0, r5
 801d390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d392:	4798      	blx	r3
 801d394:	4633      	mov	r3, r6
 801d396:	4621      	mov	r1, r4
 801d398:	ae1e      	add	r6, sp, #120	@ 0x78
 801d39a:	2400      	movs	r4, #0
 801d39c:	9000      	str	r0, [sp, #0]
 801d39e:	9a03      	ldr	r2, [sp, #12]
 801d3a0:	a805      	add	r0, sp, #20
 801d3a2:	f001 f880 	bl	801e4a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d3a6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801d3aa:	462a      	mov	r2, r5
 801d3ac:	4633      	mov	r3, r6
 801d3ae:	4621      	mov	r1, r4
 801d3b0:	a805      	add	r0, sp, #20
 801d3b2:	f001 fb6d 	bl	801ea90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d3b6:	b300      	cbz	r0, 801d3fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801d3b8:	280a      	cmp	r0, #10
 801d3ba:	d01a      	beq.n	801d3f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801d3bc:	9f04      	ldr	r7, [sp, #16]
 801d3be:	b1c7      	cbz	r7, 801d3f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801d3c0:	7b78      	ldrb	r0, [r7, #13]
 801d3c2:	7a3b      	ldrb	r3, [r7, #8]
 801d3c4:	00c1      	lsls	r1, r0, #3
 801d3c6:	88ea      	ldrh	r2, [r5, #6]
 801d3c8:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d3cc:	4319      	orrs	r1, r3
 801d3ce:	0643      	lsls	r3, r0, #25
 801d3d0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801d3d4:	bf48      	it	mi
 801d3d6:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801d3da:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801d3de:	bf48      	it	mi
 801d3e0:	b219      	sxthmi	r1, r3
 801d3e2:	79fb      	ldrb	r3, [r7, #7]
 801d3e4:	4303      	orrs	r3, r0
 801d3e6:	4413      	add	r3, r2
 801d3e8:	1a5b      	subs	r3, r3, r1
 801d3ea:	b21b      	sxth	r3, r3
 801d3ec:	429c      	cmp	r4, r3
 801d3ee:	bfb8      	it	lt
 801d3f0:	461c      	movlt	r4, r3
 801d3f2:	4633      	mov	r3, r6
 801d3f4:	462a      	mov	r2, r5
 801d3f6:	2100      	movs	r1, #0
 801d3f8:	e7da      	b.n	801d3b0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801d3fa:	b2a0      	uxth	r0, r4
 801d3fc:	b01e      	add	sp, #120	@ 0x78
 801d3fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d402:	b003      	add	sp, #12
 801d404:	4770      	bx	lr

0801d406 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801d406:	7a43      	ldrb	r3, [r0, #9]
 801d408:	8880      	ldrh	r0, [r0, #4]
 801d40a:	4418      	add	r0, r3
 801d40c:	b280      	uxth	r0, r0
 801d40e:	4770      	bx	lr

0801d410 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801d410:	6803      	ldr	r3, [r0, #0]
 801d412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d414:	4718      	bx	r3

0801d416 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801d416:	b40e      	push	{r1, r2, r3}
 801d418:	b570      	push	{r4, r5, r6, lr}
 801d41a:	b09d      	sub	sp, #116	@ 0x74
 801d41c:	4604      	mov	r4, r0
 801d41e:	ab21      	add	r3, sp, #132	@ 0x84
 801d420:	a803      	add	r0, sp, #12
 801d422:	f853 5b04 	ldr.w	r5, [r3], #4
 801d426:	9302      	str	r3, [sp, #8]
 801d428:	f000 ffea 	bl	801e400 <_ZN8touchgfx12TextProviderC1Ev>
 801d42c:	6823      	ldr	r3, [r4, #0]
 801d42e:	4620      	mov	r0, r4
 801d430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d432:	4798      	blx	r3
 801d434:	6823      	ldr	r3, [r4, #0]
 801d436:	4606      	mov	r6, r0
 801d438:	4620      	mov	r0, r4
 801d43a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d43c:	2401      	movs	r4, #1
 801d43e:	4798      	blx	r3
 801d440:	4633      	mov	r3, r6
 801d442:	9000      	str	r0, [sp, #0]
 801d444:	4629      	mov	r1, r5
 801d446:	9a02      	ldr	r2, [sp, #8]
 801d448:	a803      	add	r0, sp, #12
 801d44a:	f001 f82c 	bl	801e4a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d44e:	a803      	add	r0, sp, #12
 801d450:	f001 fb9e 	bl	801eb90 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d454:	b2a3      	uxth	r3, r4
 801d456:	b138      	cbz	r0, 801d468 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801d458:	280a      	cmp	r0, #10
 801d45a:	a803      	add	r0, sp, #12
 801d45c:	bf04      	itt	eq
 801d45e:	3301      	addeq	r3, #1
 801d460:	b21c      	sxtheq	r4, r3
 801d462:	f001 fb95 	bl	801eb90 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d466:	e7f5      	b.n	801d454 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801d468:	4618      	mov	r0, r3
 801d46a:	b01d      	add	sp, #116	@ 0x74
 801d46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d470:	b003      	add	sp, #12
 801d472:	4770      	bx	lr

0801d474 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801d474:	b40e      	push	{r1, r2, r3}
 801d476:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d478:	b09e      	sub	sp, #120	@ 0x78
 801d47a:	4604      	mov	r4, r0
 801d47c:	ab23      	add	r3, sp, #140	@ 0x8c
 801d47e:	a805      	add	r0, sp, #20
 801d480:	f853 5b04 	ldr.w	r5, [r3], #4
 801d484:	9303      	str	r3, [sp, #12]
 801d486:	f000 ffbb 	bl	801e400 <_ZN8touchgfx12TextProviderC1Ev>
 801d48a:	6823      	ldr	r3, [r4, #0]
 801d48c:	4620      	mov	r0, r4
 801d48e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d490:	4798      	blx	r3
 801d492:	6823      	ldr	r3, [r4, #0]
 801d494:	4606      	mov	r6, r0
 801d496:	4620      	mov	r0, r4
 801d498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d49a:	4798      	blx	r3
 801d49c:	4633      	mov	r3, r6
 801d49e:	4629      	mov	r1, r5
 801d4a0:	9000      	str	r0, [sp, #0]
 801d4a2:	9a03      	ldr	r2, [sp, #12]
 801d4a4:	a805      	add	r0, sp, #20
 801d4a6:	f000 fffe 	bl	801e4a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d4aa:	ad1e      	add	r5, sp, #120	@ 0x78
 801d4ac:	2100      	movs	r1, #0
 801d4ae:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801d4b2:	4622      	mov	r2, r4
 801d4b4:	a805      	add	r0, sp, #20
 801d4b6:	f845 1d68 	str.w	r1, [r5, #-104]!
 801d4ba:	462b      	mov	r3, r5
 801d4bc:	f001 fae8 	bl	801ea90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d4c0:	b1d8      	cbz	r0, 801d4fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801d4c2:	280a      	cmp	r0, #10
 801d4c4:	d012      	beq.n	801d4ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801d4c6:	9804      	ldr	r0, [sp, #16]
 801d4c8:	b180      	cbz	r0, 801d4ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801d4ca:	7b47      	ldrb	r7, [r0, #13]
 801d4cc:	88e2      	ldrh	r2, [r4, #6]
 801d4ce:	00fb      	lsls	r3, r7, #3
 801d4d0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d4d4:	7a03      	ldrb	r3, [r0, #8]
 801d4d6:	430b      	orrs	r3, r1
 801d4d8:	0679      	lsls	r1, r7, #25
 801d4da:	bf44      	itt	mi
 801d4dc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d4e0:	b21b      	sxthmi	r3, r3
 801d4e2:	1ad3      	subs	r3, r2, r3
 801d4e4:	b21b      	sxth	r3, r3
 801d4e6:	429e      	cmp	r6, r3
 801d4e8:	bfa8      	it	ge
 801d4ea:	461e      	movge	r6, r3
 801d4ec:	462b      	mov	r3, r5
 801d4ee:	4622      	mov	r2, r4
 801d4f0:	2100      	movs	r1, #0
 801d4f2:	a805      	add	r0, sp, #20
 801d4f4:	f001 facc 	bl	801ea90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d4f8:	e7e2      	b.n	801d4c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801d4fa:	4630      	mov	r0, r6
 801d4fc:	b01e      	add	sp, #120	@ 0x78
 801d4fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d502:	b003      	add	sp, #12
 801d504:	4770      	bx	lr

0801d506 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801d506:	b513      	push	{r0, r1, r4, lr}
 801d508:	6803      	ldr	r3, [r0, #0]
 801d50a:	2400      	movs	r4, #0
 801d50c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d510:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d514:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d518:	4669      	mov	r1, sp
 801d51a:	691b      	ldr	r3, [r3, #16]
 801d51c:	9400      	str	r4, [sp, #0]
 801d51e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d522:	4798      	blx	r3
 801d524:	b002      	add	sp, #8
 801d526:	bd10      	pop	{r4, pc}

0801d528 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801d528:	b538      	push	{r3, r4, r5, lr}
 801d52a:	680b      	ldr	r3, [r1, #0]
 801d52c:	460c      	mov	r4, r1
 801d52e:	4605      	mov	r5, r0
 801d530:	68db      	ldr	r3, [r3, #12]
 801d532:	4798      	blx	r3
 801d534:	6823      	ldr	r3, [r4, #0]
 801d536:	4620      	mov	r0, r4
 801d538:	4629      	mov	r1, r5
 801d53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d53c:	4798      	blx	r3
 801d53e:	4628      	mov	r0, r5
 801d540:	bd38      	pop	{r3, r4, r5, pc}

0801d542 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801d542:	b410      	push	{r4}
 801d544:	880a      	ldrh	r2, [r1, #0]
 801d546:	8884      	ldrh	r4, [r0, #4]
 801d548:	4422      	add	r2, r4
 801d54a:	800a      	strh	r2, [r1, #0]
 801d54c:	884a      	ldrh	r2, [r1, #2]
 801d54e:	88c4      	ldrh	r4, [r0, #6]
 801d550:	4422      	add	r2, r4
 801d552:	804a      	strh	r2, [r1, #2]
 801d554:	6940      	ldr	r0, [r0, #20]
 801d556:	b120      	cbz	r0, 801d562 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801d558:	6803      	ldr	r3, [r0, #0]
 801d55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d560:	4718      	bx	r3
 801d562:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d566:	4770      	bx	lr

0801d568 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d568:	b570      	push	{r4, r5, r6, lr}
 801d56a:	8882      	ldrh	r2, [r0, #4]
 801d56c:	460c      	mov	r4, r1
 801d56e:	880b      	ldrh	r3, [r1, #0]
 801d570:	4605      	mov	r5, r0
 801d572:	4413      	add	r3, r2
 801d574:	800b      	strh	r3, [r1, #0]
 801d576:	884b      	ldrh	r3, [r1, #2]
 801d578:	88c2      	ldrh	r2, [r0, #6]
 801d57a:	4413      	add	r3, r2
 801d57c:	804b      	strh	r3, [r1, #2]
 801d57e:	1d01      	adds	r1, r0, #4
 801d580:	4620      	mov	r0, r4
 801d582:	f7fa fbc1 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801d586:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	dd0b      	ble.n	801d5a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d58e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d592:	2b00      	cmp	r3, #0
 801d594:	dd07      	ble.n	801d5a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d596:	6968      	ldr	r0, [r5, #20]
 801d598:	b128      	cbz	r0, 801d5a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d59a:	6803      	ldr	r3, [r0, #0]
 801d59c:	4621      	mov	r1, r4
 801d59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d5a4:	4718      	bx	r3
 801d5a6:	bd70      	pop	{r4, r5, r6, pc}

0801d5a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d5a8:	b570      	push	{r4, r5, r6, lr}
 801d5aa:	8882      	ldrh	r2, [r0, #4]
 801d5ac:	460c      	mov	r4, r1
 801d5ae:	880b      	ldrh	r3, [r1, #0]
 801d5b0:	4605      	mov	r5, r0
 801d5b2:	4413      	add	r3, r2
 801d5b4:	800b      	strh	r3, [r1, #0]
 801d5b6:	884b      	ldrh	r3, [r1, #2]
 801d5b8:	88c2      	ldrh	r2, [r0, #6]
 801d5ba:	4413      	add	r3, r2
 801d5bc:	804b      	strh	r3, [r1, #2]
 801d5be:	1d01      	adds	r1, r0, #4
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f7fa fba1 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801d5c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	dd19      	ble.n	801d602 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801d5ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	dd15      	ble.n	801d602 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801d5d6:	6968      	ldr	r0, [r5, #20]
 801d5d8:	b128      	cbz	r0, 801d5e6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801d5da:	6803      	ldr	r3, [r0, #0]
 801d5dc:	4621      	mov	r1, r4
 801d5de:	691b      	ldr	r3, [r3, #16]
 801d5e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d5e4:	4718      	bx	r3
 801d5e6:	4b07      	ldr	r3, [pc, #28]	@ (801d604 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	3304      	adds	r3, #4
 801d5ec:	429d      	cmp	r5, r3
 801d5ee:	d108      	bne.n	801d602 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801d5f0:	f7fe ff10 	bl	801c414 <_ZN8touchgfx11Application11getInstanceEv>
 801d5f4:	6803      	ldr	r3, [r0, #0]
 801d5f6:	6821      	ldr	r1, [r4, #0]
 801d5f8:	6862      	ldr	r2, [r4, #4]
 801d5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d600:	4718      	bx	r3
 801d602:	bd70      	pop	{r4, r5, r6, pc}
 801d604:	24015c8c 	.word	0x24015c8c

0801d608 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801d608:	b570      	push	{r4, r5, r6, lr}
 801d60a:	4604      	mov	r4, r0
 801d60c:	4616      	mov	r6, r2
 801d60e:	460d      	mov	r5, r1
 801d610:	b901      	cbnz	r1, 801d614 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801d612:	b192      	cbz	r2, 801d63a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801d614:	6823      	ldr	r3, [r4, #0]
 801d616:	4620      	mov	r0, r4
 801d618:	699b      	ldr	r3, [r3, #24]
 801d61a:	4798      	blx	r3
 801d61c:	88e2      	ldrh	r2, [r4, #6]
 801d61e:	88a1      	ldrh	r1, [r4, #4]
 801d620:	4620      	mov	r0, r4
 801d622:	4432      	add	r2, r6
 801d624:	4429      	add	r1, r5
 801d626:	b212      	sxth	r2, r2
 801d628:	b209      	sxth	r1, r1
 801d62a:	f7e5 feed 	bl	8003408 <_ZN8touchgfx8Drawable5setXYEss>
 801d62e:	6823      	ldr	r3, [r4, #0]
 801d630:	4620      	mov	r0, r4
 801d632:	699b      	ldr	r3, [r3, #24]
 801d634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d638:	4718      	bx	r3
 801d63a:	bd70      	pop	{r4, r5, r6, pc}

0801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d63c:	b510      	push	{r4, lr}
 801d63e:	2300      	movs	r3, #0
 801d640:	4604      	mov	r4, r0
 801d642:	4608      	mov	r0, r1
 801d644:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d648:	8023      	strh	r3, [r4, #0]
 801d64a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d64e:	8063      	strh	r3, [r4, #2]
 801d650:	6803      	ldr	r3, [r0, #0]
 801d652:	80a1      	strh	r1, [r4, #4]
 801d654:	4621      	mov	r1, r4
 801d656:	80e2      	strh	r2, [r4, #6]
 801d658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d65a:	4798      	blx	r3
 801d65c:	4620      	mov	r0, r4
 801d65e:	bd10      	pop	{r4, pc}

0801d660 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801d660:	4770      	bx	lr

0801d662 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801d662:	b510      	push	{r4, lr}
 801d664:	4604      	mov	r4, r0
 801d666:	211c      	movs	r1, #28
 801d668:	f00b fef0 	bl	802944c <_ZdlPvj>
 801d66c:	4620      	mov	r0, r4
 801d66e:	bd10      	pop	{r4, pc}

0801d670 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801d670:	4a04      	ldr	r2, [pc, #16]	@ (801d684 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801d672:	6002      	str	r2, [r0, #0]
 801d674:	2200      	movs	r2, #0
 801d676:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801d67a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801d67e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d682:	4770      	bx	lr
 801d684:	0802f7b0 	.word	0x0802f7b0

0801d688 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d68c:	4604      	mov	r4, r0
 801d68e:	b087      	sub	sp, #28
 801d690:	4696      	mov	lr, r2
 801d692:	6880      	ldr	r0, [r0, #8]
 801d694:	8b22      	ldrh	r2, [r4, #24]
 801d696:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801d69a:	9105      	str	r1, [sp, #20]
 801d69c:	1c51      	adds	r1, r2, #1
 801d69e:	8321      	strh	r1, [r4, #24]
 801d6a0:	2101      	movs	r1, #1
 801d6a2:	5481      	strb	r1, [r0, r2]
 801d6a4:	4689      	mov	r9, r1
 801d6a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d6aa:	8b60      	ldrh	r0, [r4, #26]
 801d6ac:	ee06 2a90 	vmov	s13, r2
 801d6b0:	68e2      	ldr	r2, [r4, #12]
 801d6b2:	1845      	adds	r5, r0, r1
 801d6b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d6b8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d6bc:	8365      	strh	r5, [r4, #26]
 801d6be:	edc2 6a00 	vstr	s13, [r2]
 801d6c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d6c6:	8b60      	ldrh	r0, [r4, #26]
 801d6c8:	ee07 2a10 	vmov	s14, r2
 801d6cc:	68e2      	ldr	r2, [r4, #12]
 801d6ce:	1845      	adds	r5, r0, r1
 801d6d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6d4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d6d8:	8365      	strh	r5, [r4, #26]
 801d6da:	1d18      	adds	r0, r3, #4
 801d6dc:	460d      	mov	r5, r1
 801d6de:	ed82 7a00 	vstr	s14, [r2]
 801d6e2:	f8be 2000 	ldrh.w	r2, [lr]
 801d6e6:	9203      	str	r2, [sp, #12]
 801d6e8:	2200      	movs	r2, #0
 801d6ea:	4613      	mov	r3, r2
 801d6ec:	4694      	mov	ip, r2
 801d6ee:	9201      	str	r2, [sp, #4]
 801d6f0:	9202      	str	r2, [sp, #8]
 801d6f2:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801d6f6:	9e05      	ldr	r6, [sp, #20]
 801d6f8:	f108 0701 	add.w	r7, r8, #1
 801d6fc:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801d700:	428e      	cmp	r6, r1
 801d702:	b2bf      	uxth	r7, r7
 801d704:	eb0a 0b08 	add.w	fp, sl, r8
 801d708:	f340 80b6 	ble.w	801d878 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801d70c:	9b03      	ldr	r3, [sp, #12]
 801d70e:	f9b0 c000 	ldrsh.w	ip, [r0]
 801d712:	fa43 fb05 	asr.w	fp, r3, r5
 801d716:	f00b 0b01 	and.w	fp, fp, #1
 801d71a:	fa5f f38b 	uxtb.w	r3, fp
 801d71e:	9304      	str	r3, [sp, #16]
 801d720:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d724:	f1bb 0f00 	cmp.w	fp, #0
 801d728:	d057      	beq.n	801d7da <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801d72a:	ee07 ca90 	vmov	s15, ip
 801d72e:	8327      	strh	r7, [r4, #24]
 801d730:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801d734:	ee07 3a90 	vmov	s15, r3
 801d738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d73c:	f1b9 0f00 	cmp.w	r9, #0
 801d740:	d028      	beq.n	801d794 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801d742:	f04f 0602 	mov.w	r6, #2
 801d746:	f80a 6008 	strb.w	r6, [sl, r8]
 801d74a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d74e:	68e7      	ldr	r7, [r4, #12]
 801d750:	f108 0901 	add.w	r9, r8, #1
 801d754:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d758:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d75c:	edc7 5a00 	vstr	s11, [r7]
 801d760:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d764:	68e7      	ldr	r7, [r4, #12]
 801d766:	f108 0901 	add.w	r9, r8, #1
 801d76a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d76e:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d772:	edc7 7a00 	vstr	s15, [r7]
 801d776:	3501      	adds	r5, #1
 801d778:	2d10      	cmp	r5, #16
 801d77a:	d106      	bne.n	801d78a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801d77c:	9d02      	ldr	r5, [sp, #8]
 801d77e:	3501      	adds	r5, #1
 801d780:	9502      	str	r5, [sp, #8]
 801d782:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801d786:	9503      	str	r5, [sp, #12]
 801d788:	2500      	movs	r5, #0
 801d78a:	3101      	adds	r1, #1
 801d78c:	3004      	adds	r0, #4
 801d78e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801d792:	e7ae      	b.n	801d6f2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801d794:	f04f 0605 	mov.w	r6, #5
 801d798:	ed9d 5a01 	vldr	s10, [sp, #4]
 801d79c:	f80a 6008 	strb.w	r6, [sl, r8]
 801d7a0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d7a4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d7a8:	68e7      	ldr	r7, [r4, #12]
 801d7aa:	f108 0901 	add.w	r9, r8, #1
 801d7ae:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d7b2:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d7b6:	ed87 5a00 	vstr	s10, [r7]
 801d7ba:	ee05 2a10 	vmov	s10, r2
 801d7be:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d7c2:	68e7      	ldr	r7, [r4, #12]
 801d7c4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d7c8:	f108 0901 	add.w	r9, r8, #1
 801d7cc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d7d0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d7d4:	ed87 5a00 	vstr	s10, [r7]
 801d7d8:	e7b7      	b.n	801d74a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801d7da:	f1b9 0f00 	cmp.w	r9, #0
 801d7de:	d147      	bne.n	801d870 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801d7e0:	f04f 0605 	mov.w	r6, #5
 801d7e4:	eddd 7a01 	vldr	s15, [sp, #4]
 801d7e8:	8327      	strh	r7, [r4, #24]
 801d7ea:	f80a 6008 	strb.w	r6, [sl, r8]
 801d7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d7f2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d7f6:	68e7      	ldr	r7, [r4, #12]
 801d7f8:	f108 0901 	add.w	r9, r8, #1
 801d7fc:	9e01      	ldr	r6, [sp, #4]
 801d7fe:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d802:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d806:	4466      	add	r6, ip
 801d808:	edc7 7a00 	vstr	s15, [r7]
 801d80c:	ee07 2a90 	vmov	s15, r2
 801d810:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d814:	441a      	add	r2, r3
 801d816:	68e7      	ldr	r7, [r4, #12]
 801d818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d81c:	f108 0901 	add.w	r9, r8, #1
 801d820:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d824:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d828:	edc7 7a00 	vstr	s15, [r7]
 801d82c:	ee07 6a90 	vmov	s15, r6
 801d830:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d838:	68e7      	ldr	r7, [r4, #12]
 801d83a:	f108 0901 	add.w	r9, r8, #1
 801d83e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d842:	ee67 7a86 	vmul.f32	s15, s15, s12
 801d846:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d84a:	edc7 7a00 	vstr	s15, [r7]
 801d84e:	ee07 2a90 	vmov	s15, r2
 801d852:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d85a:	68e7      	ldr	r7, [r4, #12]
 801d85c:	f108 0901 	add.w	r9, r8, #1
 801d860:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d864:	ee67 7a86 	vmul.f32	s15, s15, s12
 801d868:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d86c:	edc7 7a00 	vstr	s15, [r7]
 801d870:	461a      	mov	r2, r3
 801d872:	f8cd c004 	str.w	ip, [sp, #4]
 801d876:	e77e      	b.n	801d776 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801d878:	f1b9 0f00 	cmp.w	r9, #0
 801d87c:	d028      	beq.n	801d8d0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801d87e:	ee07 ca90 	vmov	s15, ip
 801d882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d886:	eef4 6a67 	vcmp.f32	s13, s15
 801d88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d88e:	d108      	bne.n	801d8a2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801d890:	ee07 3a90 	vmov	s15, r3
 801d894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d898:	eeb4 7a67 	vcmp.f32	s14, s15
 801d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a0:	d016      	beq.n	801d8d0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801d8a2:	2302      	movs	r3, #2
 801d8a4:	8327      	strh	r7, [r4, #24]
 801d8a6:	f88b 3000 	strb.w	r3, [fp]
 801d8aa:	8b62      	ldrh	r2, [r4, #26]
 801d8ac:	68e3      	ldr	r3, [r4, #12]
 801d8ae:	1c51      	adds	r1, r2, #1
 801d8b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d8b4:	8361      	strh	r1, [r4, #26]
 801d8b6:	edc3 6a00 	vstr	s13, [r3]
 801d8ba:	8b62      	ldrh	r2, [r4, #26]
 801d8bc:	68e3      	ldr	r3, [r4, #12]
 801d8be:	1c51      	adds	r1, r2, #1
 801d8c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d8c4:	8361      	strh	r1, [r4, #26]
 801d8c6:	ed83 7a00 	vstr	s14, [r3]
 801d8ca:	b007      	add	sp, #28
 801d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8d0:	2305      	movs	r3, #5
 801d8d2:	eddd 7a01 	vldr	s15, [sp, #4]
 801d8d6:	8327      	strh	r7, [r4, #24]
 801d8d8:	f88b 3000 	strb.w	r3, [fp]
 801d8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8e0:	8b61      	ldrh	r1, [r4, #26]
 801d8e2:	68e3      	ldr	r3, [r4, #12]
 801d8e4:	1c4d      	adds	r5, r1, #1
 801d8e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d8ea:	8365      	strh	r5, [r4, #26]
 801d8ec:	edc3 7a00 	vstr	s15, [r3]
 801d8f0:	ee07 2a90 	vmov	s15, r2
 801d8f4:	8b61      	ldrh	r1, [r4, #26]
 801d8f6:	68e3      	ldr	r3, [r4, #12]
 801d8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8fc:	1c4d      	adds	r5, r1, #1
 801d8fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d902:	8365      	strh	r5, [r4, #26]
 801d904:	edc3 7a00 	vstr	s15, [r3]
 801d908:	e7cf      	b.n	801d8aa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801d90c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d910:	4604      	mov	r4, r0
 801d912:	b08e      	sub	sp, #56	@ 0x38
 801d914:	4699      	mov	r9, r3
 801d916:	4688      	mov	r8, r1
 801d918:	4615      	mov	r5, r2
 801d91a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801d91c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801d920:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d922:	f7e5 fa43 	bl	8002dac <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801d926:	6060      	str	r0, [r4, #4]
 801d928:	f1b9 0f00 	cmp.w	r9, #0
 801d92c:	f000 80e8 	beq.w	801db00 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801d930:	2800      	cmp	r0, #0
 801d932:	f000 80e5 	beq.w	801db00 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801d936:	a805      	add	r0, sp, #20
 801d938:	f000 f8f9 	bl	801db2e <_ZN8touchgfx9Matrix3x3C1Ev>
 801d93c:	6833      	ldr	r3, [r6, #0]
 801d93e:	4630      	mov	r0, r6
 801d940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d942:	4798      	blx	r3
 801d944:	a805      	add	r0, sp, #20
 801d946:	eef0 0a40 	vmov.f32	s1, s0
 801d94a:	f000 f8f4 	bl	801db36 <_ZN8touchgfx9Matrix3x35scaleEff>
 801d94e:	6860      	ldr	r0, [r4, #4]
 801d950:	f1ba 0f03 	cmp.w	sl, #3
 801d954:	d83b      	bhi.n	801d9ce <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801d956:	e8df f00a 	tbb	[pc, sl]
 801d95a:	1002      	.short	0x1002
 801d95c:	9f71      	.short	0x9f71
 801d95e:	6803      	ldr	r3, [r0, #0]
 801d960:	462a      	mov	r2, r5
 801d962:	4641      	mov	r1, r8
 801d964:	689b      	ldr	r3, [r3, #8]
 801d966:	4798      	blx	r3
 801d968:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801d96c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801d970:	ee07 7a90 	vmov	s15, r7
 801d974:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801d978:	e026      	b.n	801d9c8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801d97a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801d97e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801d982:	8869      	ldrh	r1, [r5, #2]
 801d984:	1a9b      	subs	r3, r3, r2
 801d986:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d98a:	aa03      	add	r2, sp, #12
 801d98c:	1a5b      	subs	r3, r3, r1
 801d98e:	4641      	mov	r1, r8
 801d990:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d994:	882b      	ldrh	r3, [r5, #0]
 801d996:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d99a:	88ab      	ldrh	r3, [r5, #4]
 801d99c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d9a0:	6803      	ldr	r3, [r0, #0]
 801d9a2:	689b      	ldr	r3, [r3, #8]
 801d9a4:	4798      	blx	r3
 801d9a6:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801db08 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801d9aa:	a805      	add	r0, sp, #20
 801d9ac:	f000 f8e8 	bl	801db80 <_ZN8touchgfx9Matrix3x36rotateEf>
 801d9b0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801d9b4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d9b6:	ee07 7a90 	vmov	s15, r7
 801d9ba:	1a9b      	subs	r3, r3, r2
 801d9bc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801d9c0:	ee00 3a10 	vmov	s0, r3
 801d9c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d9c8:	a805      	add	r0, sp, #20
 801d9ca:	f000 f927 	bl	801dc1c <_ZN8touchgfx9Matrix3x39translateEff>
 801d9ce:	6860      	ldr	r0, [r4, #4]
 801d9d0:	a905      	add	r1, sp, #20
 801d9d2:	2500      	movs	r5, #0
 801d9d4:	f109 0602 	add.w	r6, r9, #2
 801d9d8:	6803      	ldr	r3, [r0, #0]
 801d9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d9dc:	4798      	blx	r3
 801d9de:	6860      	ldr	r0, [r4, #4]
 801d9e0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d9e2:	6803      	ldr	r3, [r0, #0]
 801d9e4:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801d9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9ea:	4798      	blx	r3
 801d9ec:	6860      	ldr	r0, [r4, #4]
 801d9ee:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801d9f2:	6803      	ldr	r3, [r0, #0]
 801d9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9f6:	4798      	blx	r3
 801d9f8:	6860      	ldr	r0, [r4, #4]
 801d9fa:	2102      	movs	r1, #2
 801d9fc:	6803      	ldr	r3, [r0, #0]
 801d9fe:	68db      	ldr	r3, [r3, #12]
 801da00:	4798      	blx	r3
 801da02:	f8b9 7000 	ldrh.w	r7, [r9]
 801da06:	f104 0310 	add.w	r3, r4, #16
 801da0a:	61a5      	str	r5, [r4, #24]
 801da0c:	f104 0208 	add.w	r2, r4, #8
 801da10:	f104 0114 	add.w	r1, r4, #20
 801da14:	f104 000c 	add.w	r0, r4, #12
 801da18:	f7e5 ff04 	bl	8003824 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801da1c:	42af      	cmp	r7, r5
 801da1e:	dd60      	ble.n	801dae2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801da20:	8831      	ldrh	r1, [r6, #0]
 801da22:	1cb2      	adds	r2, r6, #2
 801da24:	4620      	mov	r0, r4
 801da26:	3501      	adds	r5, #1
 801da28:	f101 030f 	add.w	r3, r1, #15
 801da2c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801da30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801da34:	f7ff fe28 	bl	801d688 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801da38:	4606      	mov	r6, r0
 801da3a:	e7ef      	b.n	801da1c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801da3c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801da40:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801da44:	8829      	ldrh	r1, [r5, #0]
 801da46:	1a9b      	subs	r3, r3, r2
 801da48:	f8ad 2010 	strh.w	r2, [sp, #16]
 801da4c:	aa03      	add	r2, sp, #12
 801da4e:	1a5b      	subs	r3, r3, r1
 801da50:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801da54:	886d      	ldrh	r5, [r5, #2]
 801da56:	f8ad 300c 	strh.w	r3, [sp, #12]
 801da5a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801da5e:	f8ad 1012 	strh.w	r1, [sp, #18]
 801da62:	1a5b      	subs	r3, r3, r1
 801da64:	4641      	mov	r1, r8
 801da66:	1b5b      	subs	r3, r3, r5
 801da68:	f8ad 300e 	strh.w	r3, [sp, #14]
 801da6c:	6803      	ldr	r3, [r0, #0]
 801da6e:	689b      	ldr	r3, [r3, #8]
 801da70:	4798      	blx	r3
 801da72:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801db0c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801da76:	a805      	add	r0, sp, #20
 801da78:	f000 f882 	bl	801db80 <_ZN8touchgfx9Matrix3x36rotateEf>
 801da7c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801da80:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801da82:	1a9b      	subs	r3, r3, r2
 801da84:	ee00 3a90 	vmov	s1, r3
 801da88:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801da8c:	1bdb      	subs	r3, r3, r7
 801da8e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801da92:	ee00 3a10 	vmov	s0, r3
 801da96:	e795      	b.n	801d9c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801da98:	886b      	ldrh	r3, [r5, #2]
 801da9a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801da9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801daa2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801daa6:	8829      	ldrh	r1, [r5, #0]
 801daa8:	1a9b      	subs	r3, r3, r2
 801daaa:	f8ad 2012 	strh.w	r2, [sp, #18]
 801daae:	aa03      	add	r2, sp, #12
 801dab0:	1a5b      	subs	r3, r3, r1
 801dab2:	4641      	mov	r1, r8
 801dab4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dab8:	88eb      	ldrh	r3, [r5, #6]
 801daba:	f8ad 3010 	strh.w	r3, [sp, #16]
 801dabe:	6803      	ldr	r3, [r0, #0]
 801dac0:	689b      	ldr	r3, [r3, #8]
 801dac2:	4798      	blx	r3
 801dac4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801db10 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801dac8:	a805      	add	r0, sp, #20
 801daca:	f000 f859 	bl	801db80 <_ZN8touchgfx9Matrix3x36rotateEf>
 801dace:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801dad2:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801dad6:	1bdb      	subs	r3, r3, r7
 801dad8:	ee00 3a90 	vmov	s1, r3
 801dadc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dae0:	e748      	b.n	801d974 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801dae2:	6860      	ldr	r0, [r4, #4]
 801dae4:	2100      	movs	r1, #0
 801dae6:	8b22      	ldrh	r2, [r4, #24]
 801dae8:	6803      	ldr	r3, [r0, #0]
 801daea:	9101      	str	r1, [sp, #4]
 801daec:	8b61      	ldrh	r1, [r4, #26]
 801daee:	9100      	str	r1, [sp, #0]
 801daf0:	6a1d      	ldr	r5, [r3, #32]
 801daf2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801daf6:	47a8      	blx	r5
 801daf8:	6860      	ldr	r0, [r4, #4]
 801dafa:	6803      	ldr	r3, [r0, #0]
 801dafc:	69db      	ldr	r3, [r3, #28]
 801dafe:	4798      	blx	r3
 801db00:	b00e      	add	sp, #56	@ 0x38
 801db02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db06:	bf00      	nop
 801db08:	42b40000 	.word	0x42b40000
 801db0c:	43340000 	.word	0x43340000
 801db10:	43870000 	.word	0x43870000

0801db14 <_ZN8touchgfx9Matrix3x35resetEv>:
 801db14:	2300      	movs	r3, #0
 801db16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801db1a:	6043      	str	r3, [r0, #4]
 801db1c:	6002      	str	r2, [r0, #0]
 801db1e:	6083      	str	r3, [r0, #8]
 801db20:	60c3      	str	r3, [r0, #12]
 801db22:	6102      	str	r2, [r0, #16]
 801db24:	6143      	str	r3, [r0, #20]
 801db26:	6183      	str	r3, [r0, #24]
 801db28:	61c3      	str	r3, [r0, #28]
 801db2a:	6202      	str	r2, [r0, #32]
 801db2c:	4770      	bx	lr

0801db2e <_ZN8touchgfx9Matrix3x3C1Ev>:
 801db2e:	b508      	push	{r3, lr}
 801db30:	f7ff fff0 	bl	801db14 <_ZN8touchgfx9Matrix3x35resetEv>
 801db34:	bd08      	pop	{r3, pc}

0801db36 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801db36:	edd0 7a00 	vldr	s15, [r0]
 801db3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801db3e:	edc0 7a00 	vstr	s15, [r0]
 801db42:	edd0 7a01 	vldr	s15, [r0, #4]
 801db46:	ee67 7a80 	vmul.f32	s15, s15, s0
 801db4a:	edc0 7a01 	vstr	s15, [r0, #4]
 801db4e:	edd0 7a02 	vldr	s15, [r0, #8]
 801db52:	ee27 0a80 	vmul.f32	s0, s15, s0
 801db56:	edd0 7a03 	vldr	s15, [r0, #12]
 801db5a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801db5e:	ed80 0a02 	vstr	s0, [r0, #8]
 801db62:	edc0 7a03 	vstr	s15, [r0, #12]
 801db66:	edd0 7a04 	vldr	s15, [r0, #16]
 801db6a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801db6e:	edc0 7a04 	vstr	s15, [r0, #16]
 801db72:	edd0 7a05 	vldr	s15, [r0, #20]
 801db76:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801db7a:	edc0 0a05 	vstr	s1, [r0, #20]
 801db7e:	4770      	bx	lr

0801db80 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801db80:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801dc14 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801db84:	ee20 0a27 	vmul.f32	s0, s0, s15
 801db88:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801dc18 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801db8c:	b510      	push	{r4, lr}
 801db8e:	ed2d 8b02 	vpush	{d8}
 801db92:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801db96:	4604      	mov	r4, r0
 801db98:	eeb0 0a68 	vmov.f32	s0, s17
 801db9c:	f00b fd8c 	bl	80296b8 <cosf>
 801dba0:	eeb0 8a40 	vmov.f32	s16, s0
 801dba4:	eeb0 0a68 	vmov.f32	s0, s17
 801dba8:	f00b fcc2 	bl	8029530 <sinf>
 801dbac:	edd4 6a03 	vldr	s13, [r4, #12]
 801dbb0:	edd4 4a00 	vldr	s9, [r4]
 801dbb4:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801dbb8:	ed94 7a04 	vldr	s14, [r4, #16]
 801dbbc:	ed94 5a01 	vldr	s10, [r4, #4]
 801dbc0:	ee66 6a88 	vmul.f32	s13, s13, s16
 801dbc4:	edd4 5a02 	vldr	s11, [r4, #8]
 801dbc8:	eee8 7a24 	vfma.f32	s15, s16, s9
 801dbcc:	eee0 6a24 	vfma.f32	s13, s0, s9
 801dbd0:	edc4 7a00 	vstr	s15, [r4]
 801dbd4:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801dbd8:	ee27 7a08 	vmul.f32	s14, s14, s16
 801dbdc:	edc4 6a03 	vstr	s13, [r4, #12]
 801dbe0:	eee8 7a05 	vfma.f32	s15, s16, s10
 801dbe4:	eea0 7a05 	vfma.f32	s14, s0, s10
 801dbe8:	edc4 7a01 	vstr	s15, [r4, #4]
 801dbec:	edd4 7a05 	vldr	s15, [r4, #20]
 801dbf0:	ed84 7a04 	vstr	s14, [r4, #16]
 801dbf4:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801dbf8:	ee67 7a88 	vmul.f32	s15, s15, s16
 801dbfc:	eea8 6a25 	vfma.f32	s12, s16, s11
 801dc00:	eee0 7a25 	vfma.f32	s15, s0, s11
 801dc04:	ecbd 8b02 	vpop	{d8}
 801dc08:	ed84 6a02 	vstr	s12, [r4, #8]
 801dc0c:	edc4 7a05 	vstr	s15, [r4, #20]
 801dc10:	bd10      	pop	{r4, pc}
 801dc12:	bf00      	nop
 801dc14:	40490fdb 	.word	0x40490fdb
 801dc18:	43340000 	.word	0x43340000

0801dc1c <_ZN8touchgfx9Matrix3x39translateEff>:
 801dc1c:	ed90 6a06 	vldr	s12, [r0, #24]
 801dc20:	edd0 7a00 	vldr	s15, [r0]
 801dc24:	edd0 6a07 	vldr	s13, [r0, #28]
 801dc28:	eee6 7a00 	vfma.f32	s15, s12, s0
 801dc2c:	ed90 7a08 	vldr	s14, [r0, #32]
 801dc30:	edc0 7a00 	vstr	s15, [r0]
 801dc34:	edd0 7a01 	vldr	s15, [r0, #4]
 801dc38:	eee6 7a80 	vfma.f32	s15, s13, s0
 801dc3c:	edc0 7a01 	vstr	s15, [r0, #4]
 801dc40:	edd0 7a02 	vldr	s15, [r0, #8]
 801dc44:	eee7 7a00 	vfma.f32	s15, s14, s0
 801dc48:	edc0 7a02 	vstr	s15, [r0, #8]
 801dc4c:	edd0 7a03 	vldr	s15, [r0, #12]
 801dc50:	eee6 7a20 	vfma.f32	s15, s12, s1
 801dc54:	edc0 7a03 	vstr	s15, [r0, #12]
 801dc58:	edd0 7a04 	vldr	s15, [r0, #16]
 801dc5c:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801dc60:	edc0 7a04 	vstr	s15, [r0, #16]
 801dc64:	edd0 7a05 	vldr	s15, [r0, #20]
 801dc68:	eee7 7a20 	vfma.f32	s15, s14, s1
 801dc6c:	edc0 7a05 	vstr	s15, [r0, #20]
 801dc70:	4770      	bx	lr

0801dc72 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801dc72:	edd0 6a01 	vldr	s13, [r0, #4]
 801dc76:	b084      	sub	sp, #16
 801dc78:	edd0 7a04 	vldr	s15, [r0, #16]
 801dc7c:	ed90 7a03 	vldr	s14, [r0, #12]
 801dc80:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801dc84:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801dc88:	edd0 6a00 	vldr	s13, [r0]
 801dc8c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801dc90:	ed90 7a05 	vldr	s14, [r0, #20]
 801dc94:	eee6 0a80 	vfma.f32	s1, s13, s0
 801dc98:	ed90 0a02 	vldr	s0, [r0, #8]
 801dc9c:	ee30 0a80 	vadd.f32	s0, s1, s0
 801dca0:	ee77 0a87 	vadd.f32	s1, s15, s14
 801dca4:	b004      	add	sp, #16
 801dca6:	4770      	bx	lr

0801dca8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801dca8:	b530      	push	{r4, r5, lr}
 801dcaa:	8083      	strh	r3, [r0, #4]
 801dcac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801dcb0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801dcb4:	80c3      	strh	r3, [r0, #6]
 801dcb6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801dcba:	6141      	str	r1, [r0, #20]
 801dcbc:	7203      	strb	r3, [r0, #8]
 801dcbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dcc2:	8302      	strh	r2, [r0, #24]
 801dcc4:	7243      	strb	r3, [r0, #9]
 801dcc6:	7a83      	ldrb	r3, [r0, #10]
 801dcc8:	f365 0306 	bfi	r3, r5, #0, #7
 801dccc:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801dcd0:	f365 13c7 	bfi	r3, r5, #7, #1
 801dcd4:	7283      	strb	r3, [r0, #10]
 801dcd6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801dcda:	72c3      	strb	r3, [r0, #11]
 801dcdc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801dce0:	7303      	strb	r3, [r0, #12]
 801dce2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801dce6:	81c3      	strh	r3, [r0, #14]
 801dce8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801dcec:	8203      	strh	r3, [r0, #16]
 801dcee:	4b01      	ldr	r3, [pc, #4]	@ (801dcf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801dcf0:	6003      	str	r3, [r0, #0]
 801dcf2:	bd30      	pop	{r4, r5, pc}
 801dcf4:	0802f7c4 	.word	0x0802f7c4

0801dcf8 <_ZNK8touchgfx9ConstFont4findEt>:
 801dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcfa:	6944      	ldr	r4, [r0, #20]
 801dcfc:	b3bc      	cbz	r4, 801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dcfe:	88a3      	ldrh	r3, [r4, #4]
 801dd00:	8b02      	ldrh	r2, [r0, #24]
 801dd02:	1acb      	subs	r3, r1, r3
 801dd04:	f102 32ff 	add.w	r2, r2, #4294967295
 801dd08:	d431      	bmi.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd0a:	4293      	cmp	r3, r2
 801dd0c:	dd0c      	ble.n	801dd28 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801dd0e:	230e      	movs	r3, #14
 801dd10:	fb03 4302 	mla	r3, r3, r2, r4
 801dd14:	889b      	ldrh	r3, [r3, #4]
 801dd16:	1a5b      	subs	r3, r3, r1
 801dd18:	1ad3      	subs	r3, r2, r3
 801dd1a:	429a      	cmp	r2, r3
 801dd1c:	db27      	blt.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	bfbc      	itt	lt
 801dd22:	2302      	movlt	r3, #2
 801dd24:	fb92 f3f3 	sdivlt	r3, r2, r3
 801dd28:	2500      	movs	r5, #0
 801dd2a:	260e      	movs	r6, #14
 801dd2c:	4295      	cmp	r5, r2
 801dd2e:	dc1e      	bgt.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd30:	fb06 4003 	mla	r0, r6, r3, r4
 801dd34:	8887      	ldrh	r7, [r0, #4]
 801dd36:	42b9      	cmp	r1, r7
 801dd38:	d01a      	beq.n	801dd70 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801dd3a:	d20d      	bcs.n	801dd58 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801dd3c:	1e5a      	subs	r2, r3, #1
 801dd3e:	4295      	cmp	r5, r2
 801dd40:	dc15      	bgt.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd42:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801dd46:	1a5b      	subs	r3, r3, r1
 801dd48:	1ad3      	subs	r3, r2, r3
 801dd4a:	429a      	cmp	r2, r3
 801dd4c:	db0f      	blt.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd4e:	429d      	cmp	r5, r3
 801dd50:	ddec      	ble.n	801dd2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dd52:	1953      	adds	r3, r2, r5
 801dd54:	105b      	asrs	r3, r3, #1
 801dd56:	e7e9      	b.n	801dd2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dd58:	1c5d      	adds	r5, r3, #1
 801dd5a:	42aa      	cmp	r2, r5
 801dd5c:	db07      	blt.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd5e:	8a43      	ldrh	r3, [r0, #18]
 801dd60:	1acb      	subs	r3, r1, r3
 801dd62:	442b      	add	r3, r5
 801dd64:	429d      	cmp	r5, r3
 801dd66:	dc02      	bgt.n	801dd6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dd68:	429a      	cmp	r2, r3
 801dd6a:	dadf      	bge.n	801dd2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dd6c:	e7f1      	b.n	801dd52 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801dd6e:	2000      	movs	r0, #0
 801dd70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dd72 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801dd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd74:	4604      	mov	r4, r0
 801dd76:	4617      	mov	r7, r2
 801dd78:	461e      	mov	r6, r3
 801dd7a:	b911      	cbnz	r1, 801dd82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801dd7c:	2500      	movs	r5, #0
 801dd7e:	4628      	mov	r0, r5
 801dd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd82:	290a      	cmp	r1, #10
 801dd84:	d0fa      	beq.n	801dd7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dd86:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801dd8a:	4291      	cmp	r1, r2
 801dd8c:	d0f6      	beq.n	801dd7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dd8e:	f242 020b 	movw	r2, #8203	@ 0x200b
 801dd92:	4291      	cmp	r1, r2
 801dd94:	d0f2      	beq.n	801dd7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dd96:	f7ff ffaf 	bl	801dcf8 <_ZNK8touchgfx9ConstFont4findEt>
 801dd9a:	4605      	mov	r5, r0
 801dd9c:	b950      	cbnz	r0, 801ddb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801dd9e:	6823      	ldr	r3, [r4, #0]
 801dda0:	4620      	mov	r0, r4
 801dda2:	691b      	ldr	r3, [r3, #16]
 801dda4:	4798      	blx	r3
 801dda6:	4601      	mov	r1, r0
 801dda8:	4620      	mov	r0, r4
 801ddaa:	f7ff ffa5 	bl	801dcf8 <_ZNK8touchgfx9ConstFont4findEt>
 801ddae:	4605      	mov	r5, r0
 801ddb0:	2800      	cmp	r0, #0
 801ddb2:	d0e3      	beq.n	801dd7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ddb4:	6823      	ldr	r3, [r4, #0]
 801ddb6:	4629      	mov	r1, r5
 801ddb8:	4620      	mov	r0, r4
 801ddba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ddbc:	4798      	blx	r3
 801ddbe:	6038      	str	r0, [r7, #0]
 801ddc0:	6823      	ldr	r3, [r4, #0]
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ddc6:	4798      	blx	r3
 801ddc8:	7030      	strb	r0, [r6, #0]
 801ddca:	e7d8      	b.n	801dd7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801ddcc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801ddcc:	2000      	movs	r0, #0
 801ddce:	4770      	bx	lr

0801ddd0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801ddd0:	2001      	movs	r0, #1
 801ddd2:	4770      	bx	lr

0801ddd4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801ddd4:	2002      	movs	r0, #2
 801ddd6:	4770      	bx	lr

0801ddd8 <_ZN8touchgfx6ScreenD1Ev>:
 801ddd8:	4770      	bx	lr

0801ddda <_ZN8touchgfx12GestureEventD1Ev>:
 801ddda:	4770      	bx	lr

0801dddc <_ZN8touchgfx9DragEventD1Ev>:
 801dddc:	4770      	bx	lr

0801ddde <_ZN8touchgfx10ClickEventD1Ev>:
 801ddde:	4770      	bx	lr

0801dde0 <_ZN8touchgfx10ClickEventD0Ev>:
 801dde0:	b510      	push	{r4, lr}
 801dde2:	4604      	mov	r4, r0
 801dde4:	210c      	movs	r1, #12
 801dde6:	f00b fb31 	bl	802944c <_ZdlPvj>
 801ddea:	4620      	mov	r0, r4
 801ddec:	bd10      	pop	{r4, pc}

0801ddee <_ZN8touchgfx9DragEventD0Ev>:
 801ddee:	b510      	push	{r4, lr}
 801ddf0:	4604      	mov	r4, r0
 801ddf2:	2110      	movs	r1, #16
 801ddf4:	f00b fb2a 	bl	802944c <_ZdlPvj>
 801ddf8:	4620      	mov	r0, r4
 801ddfa:	bd10      	pop	{r4, pc}

0801ddfc <_ZN8touchgfx12GestureEventD0Ev>:
 801ddfc:	b510      	push	{r4, lr}
 801ddfe:	4604      	mov	r4, r0
 801de00:	210c      	movs	r1, #12
 801de02:	f00b fb23 	bl	802944c <_ZdlPvj>
 801de06:	4620      	mov	r0, r4
 801de08:	bd10      	pop	{r4, pc}

0801de0a <_ZN8touchgfx6ScreenD0Ev>:
 801de0a:	b510      	push	{r4, lr}
 801de0c:	4604      	mov	r4, r0
 801de0e:	213c      	movs	r1, #60	@ 0x3c
 801de10:	f00b fb1c 	bl	802944c <_ZdlPvj>
 801de14:	4620      	mov	r0, r4
 801de16:	bd10      	pop	{r4, pc}

0801de18 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801de18:	b530      	push	{r4, r5, lr}
 801de1a:	460d      	mov	r5, r1
 801de1c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801de1e:	b087      	sub	sp, #28
 801de20:	4604      	mov	r4, r0
 801de22:	b301      	cbz	r1, 801de66 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801de24:	a801      	add	r0, sp, #4
 801de26:	f7ff fc09 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801de2a:	892a      	ldrh	r2, [r5, #8]
 801de2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801de30:	7928      	ldrb	r0, [r5, #4]
 801de32:	1ad2      	subs	r2, r2, r3
 801de34:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801de36:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801de3a:	441a      	add	r2, r3
 801de3c:	896b      	ldrh	r3, [r5, #10]
 801de3e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801de42:	f88d 0010 	strb.w	r0, [sp, #16]
 801de46:	1b5b      	subs	r3, r3, r5
 801de48:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801de4a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801de4c:	442b      	add	r3, r5
 801de4e:	4d07      	ldr	r5, [pc, #28]	@ (801de6c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801de50:	f8ad 1012 	strh.w	r1, [sp, #18]
 801de54:	a903      	add	r1, sp, #12
 801de56:	9503      	str	r5, [sp, #12]
 801de58:	f8ad 2014 	strh.w	r2, [sp, #20]
 801de5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801de60:	6803      	ldr	r3, [r0, #0]
 801de62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801de64:	4798      	blx	r3
 801de66:	b007      	add	sp, #28
 801de68:	bd30      	pop	{r4, r5, pc}
 801de6a:	bf00      	nop
 801de6c:	0802f854 	.word	0x0802f854

0801de70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801de76:	b08a      	sub	sp, #40	@ 0x28
 801de78:	4604      	mov	r4, r0
 801de7a:	460d      	mov	r5, r1
 801de7c:	b113      	cbz	r3, 801de84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801de7e:	790b      	ldrb	r3, [r1, #4]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d044      	beq.n	801df0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801de84:	f104 0804 	add.w	r8, r4, #4
 801de88:	a803      	add	r0, sp, #12
 801de8a:	4641      	mov	r1, r8
 801de8c:	f7ff fbd6 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801de90:	792b      	ldrb	r3, [r5, #4]
 801de92:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801de96:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801de9a:	b983      	cbnz	r3, 801debe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801de9c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801dea0:	892a      	ldrh	r2, [r5, #8]
 801dea2:	88e9      	ldrh	r1, [r5, #6]
 801dea4:	4640      	mov	r0, r8
 801dea6:	1b92      	subs	r2, r2, r6
 801dea8:	9301      	str	r3, [sp, #4]
 801deaa:	1bc9      	subs	r1, r1, r7
 801deac:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801deb0:	b212      	sxth	r2, r2
 801deb2:	9300      	str	r3, [sp, #0]
 801deb4:	b209      	sxth	r1, r1
 801deb6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801deba:	f7f9 fe43 	bl	8017b44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801debe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dec0:	b329      	cbz	r1, 801df0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801dec2:	a805      	add	r0, sp, #20
 801dec4:	f7ff fbba 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dec8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801decc:	792b      	ldrb	r3, [r5, #4]
 801dece:	a907      	add	r1, sp, #28
 801ded0:	1abf      	subs	r7, r7, r2
 801ded2:	88ea      	ldrh	r2, [r5, #6]
 801ded4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801ded6:	4417      	add	r7, r2
 801ded8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801deda:	f88d 3020 	strb.w	r3, [sp, #32]
 801dede:	4417      	add	r7, r2
 801dee0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801dee4:	1ab6      	subs	r6, r6, r2
 801dee6:	892a      	ldrh	r2, [r5, #8]
 801dee8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801deec:	4416      	add	r6, r2
 801deee:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801def0:	4416      	add	r6, r2
 801def2:	4a08      	ldr	r2, [pc, #32]	@ (801df14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801def4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801def8:	2600      	movs	r6, #0
 801defa:	9207      	str	r2, [sp, #28]
 801defc:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801df00:	6803      	ldr	r3, [r0, #0]
 801df02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801df04:	4798      	blx	r3
 801df06:	792b      	ldrb	r3, [r5, #4]
 801df08:	b10b      	cbz	r3, 801df0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801df0a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801df0e:	b00a      	add	sp, #40	@ 0x28
 801df10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df14:	0802f82c 	.word	0x0802f82c

0801df18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801df18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df1c:	460c      	mov	r4, r1
 801df1e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801df20:	b088      	sub	sp, #32
 801df22:	4605      	mov	r5, r0
 801df24:	2900      	cmp	r1, #0
 801df26:	d06d      	beq.n	801e004 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801df28:	4668      	mov	r0, sp
 801df2a:	f7ff fb87 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801df2e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801df30:	88e3      	ldrh	r3, [r4, #6]
 801df32:	f9bd 8000 	ldrsh.w	r8, [sp]
 801df36:	440b      	add	r3, r1
 801df38:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801df3c:	b21b      	sxth	r3, r3
 801df3e:	4543      	cmp	r3, r8
 801df40:	db31      	blt.n	801dfa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801df42:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801df46:	44c4      	add	ip, r8
 801df48:	fa0f fc8c 	sxth.w	ip, ip
 801df4c:	4563      	cmp	r3, ip
 801df4e:	da2a      	bge.n	801dfa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801df50:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801df52:	8926      	ldrh	r6, [r4, #8]
 801df54:	4416      	add	r6, r2
 801df56:	b236      	sxth	r6, r6
 801df58:	42be      	cmp	r6, r7
 801df5a:	db24      	blt.n	801dfa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801df5c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801df60:	4438      	add	r0, r7
 801df62:	b200      	sxth	r0, r0
 801df64:	4286      	cmp	r6, r0
 801df66:	da1e      	bge.n	801dfa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801df68:	8963      	ldrh	r3, [r4, #10]
 801df6a:	4419      	add	r1, r3
 801df6c:	b209      	sxth	r1, r1
 801df6e:	4541      	cmp	r1, r8
 801df70:	db08      	blt.n	801df84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801df72:	4561      	cmp	r1, ip
 801df74:	da06      	bge.n	801df84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801df76:	89a3      	ldrh	r3, [r4, #12]
 801df78:	441a      	add	r2, r3
 801df7a:	b212      	sxth	r2, r2
 801df7c:	42ba      	cmp	r2, r7
 801df7e:	db01      	blt.n	801df84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801df80:	4282      	cmp	r2, r0
 801df82:	db10      	blt.n	801dfa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801df84:	4b21      	ldr	r3, [pc, #132]	@ (801e00c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801df86:	a904      	add	r1, sp, #16
 801df88:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801df8a:	9304      	str	r3, [sp, #16]
 801df8c:	2302      	movs	r3, #2
 801df8e:	f88d 3014 	strb.w	r3, [sp, #20]
 801df92:	2300      	movs	r3, #0
 801df94:	f8ad 3016 	strh.w	r3, [sp, #22]
 801df98:	f8ad 3018 	strh.w	r3, [sp, #24]
 801df9c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801dfa0:	6803      	ldr	r3, [r0, #0]
 801dfa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dfa4:	4798      	blx	r3
 801dfa6:	1d29      	adds	r1, r5, #4
 801dfa8:	a802      	add	r0, sp, #8
 801dfaa:	f7ff fb47 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dfae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dfb2:	88e0      	ldrh	r0, [r4, #6]
 801dfb4:	eba3 0808 	sub.w	r8, r3, r8
 801dfb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801dfbc:	7921      	ldrb	r1, [r4, #4]
 801dfbe:	fa1f f888 	uxth.w	r8, r8
 801dfc2:	1bdf      	subs	r7, r3, r7
 801dfc4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801dfc8:	b2bb      	uxth	r3, r7
 801dfca:	4440      	add	r0, r8
 801dfcc:	8922      	ldrh	r2, [r4, #8]
 801dfce:	8967      	ldrh	r7, [r4, #10]
 801dfd0:	4460      	add	r0, ip
 801dfd2:	89a4      	ldrh	r4, [r4, #12]
 801dfd4:	441a      	add	r2, r3
 801dfd6:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801dfd8:	44b8      	add	r8, r7
 801dfda:	4423      	add	r3, r4
 801dfdc:	f8ad 0016 	strh.w	r0, [sp, #22]
 801dfe0:	4432      	add	r2, r6
 801dfe2:	44e0      	add	r8, ip
 801dfe4:	4433      	add	r3, r6
 801dfe6:	4c0a      	ldr	r4, [pc, #40]	@ (801e010 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801dfe8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801dfea:	f88d 1014 	strb.w	r1, [sp, #20]
 801dfee:	a904      	add	r1, sp, #16
 801dff0:	9404      	str	r4, [sp, #16]
 801dff2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dff6:	f8ad 801a 	strh.w	r8, [sp, #26]
 801dffa:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dffe:	6803      	ldr	r3, [r0, #0]
 801e000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e002:	4798      	blx	r3
 801e004:	b008      	add	sp, #32
 801e006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e00a:	bf00      	nop
 801e00c:	0802f82c 	.word	0x0802f82c
 801e010:	0802f840 	.word	0x0802f840

0801e014 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e016:	4604      	mov	r4, r0
 801e018:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e01c:	3201      	adds	r2, #1
 801e01e:	d112      	bne.n	801e046 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e020:	2500      	movs	r5, #0
 801e022:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e026:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e02a:	6803      	ldr	r3, [r0, #0]
 801e02c:	9500      	str	r5, [sp, #0]
 801e02e:	466d      	mov	r5, sp
 801e030:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e034:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e038:	4629      	mov	r1, r5
 801e03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e03c:	4798      	blx	r3
 801e03e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e042:	e884 0003 	stmia.w	r4, {r0, r1}
 801e046:	4620      	mov	r0, r4
 801e048:	b003      	add	sp, #12
 801e04a:	bd30      	pop	{r4, r5, pc}

0801e04c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e04c:	b513      	push	{r0, r1, r4, lr}
 801e04e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e052:	4604      	mov	r4, r0
 801e054:	3301      	adds	r3, #1
 801e056:	d109      	bne.n	801e06c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e058:	4601      	mov	r1, r0
 801e05a:	4668      	mov	r0, sp
 801e05c:	f7ff faee 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e060:	f8bd 3000 	ldrh.w	r3, [sp]
 801e064:	8423      	strh	r3, [r4, #32]
 801e066:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e06a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801e06c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e070:	b002      	add	sp, #8
 801e072:	bd10      	pop	{r4, pc}

0801e074 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e074:	b513      	push	{r0, r1, r4, lr}
 801e076:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801e07a:	4604      	mov	r4, r0
 801e07c:	3301      	adds	r3, #1
 801e07e:	d109      	bne.n	801e094 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e080:	4601      	mov	r1, r0
 801e082:	4668      	mov	r0, sp
 801e084:	f7ff fada 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e088:	f8bd 3000 	ldrh.w	r3, [sp]
 801e08c:	8423      	strh	r3, [r4, #32]
 801e08e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e092:	8463      	strh	r3, [r4, #34]	@ 0x22
 801e094:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801e098:	b002      	add	sp, #8
 801e09a:	bd10      	pop	{r4, pc}

0801e09c <_ZN8touchgfx6ScreenC1Ev>:
 801e09c:	b570      	push	{r4, r5, r6, lr}
 801e09e:	4b17      	ldr	r3, [pc, #92]	@ (801e0fc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	4a17      	ldr	r2, [pc, #92]	@ (801e100 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e0a4:	2101      	movs	r1, #1
 801e0a6:	f845 3b04 	str.w	r3, [r5], #4
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	6042      	str	r2, [r0, #4]
 801e0ae:	4604      	mov	r4, r0
 801e0b0:	8103      	strh	r3, [r0, #8]
 801e0b2:	8143      	strh	r3, [r0, #10]
 801e0b4:	8183      	strh	r3, [r0, #12]
 801e0b6:	81c3      	strh	r3, [r0, #14]
 801e0b8:	8203      	strh	r3, [r0, #16]
 801e0ba:	8243      	strh	r3, [r0, #18]
 801e0bc:	8283      	strh	r3, [r0, #20]
 801e0be:	82c3      	strh	r3, [r0, #22]
 801e0c0:	6203      	str	r3, [r0, #32]
 801e0c2:	8483      	strh	r3, [r0, #36]	@ 0x24
 801e0c4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801e0c6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801e0ca:	6343      	str	r3, [r0, #52]	@ 0x34
 801e0cc:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801e0d0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801e0d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e0d8:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801e0dc:	4b09      	ldr	r3, [pc, #36]	@ (801e104 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e0de:	4628      	mov	r0, r5
 801e0e0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e0e4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801e0e6:	4a08      	ldr	r2, [pc, #32]	@ (801e108 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e0e8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e0ec:	4798      	blx	r3
 801e0ee:	6863      	ldr	r3, [r4, #4]
 801e0f0:	4628      	mov	r0, r5
 801e0f2:	4631      	mov	r1, r6
 801e0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e0f6:	4798      	blx	r3
 801e0f8:	4620      	mov	r0, r4
 801e0fa:	bd70      	pop	{r4, r5, r6, pc}
 801e0fc:	0802f868 	.word	0x0802f868
 801e100:	0802f480 	.word	0x0802f480
 801e104:	24015c3e 	.word	0x24015c3e
 801e108:	24015c3c 	.word	0x24015c3c

0801e10c <_ZN8touchgfx6Screen4drawEv>:
 801e10c:	4b09      	ldr	r3, [pc, #36]	@ (801e134 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e10e:	b507      	push	{r0, r1, r2, lr}
 801e110:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e114:	2100      	movs	r1, #0
 801e116:	4b08      	ldr	r3, [pc, #32]	@ (801e138 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e118:	9100      	str	r1, [sp, #0]
 801e11a:	4669      	mov	r1, sp
 801e11c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e120:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e124:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e128:	6803      	ldr	r3, [r0, #0]
 801e12a:	689b      	ldr	r3, [r3, #8]
 801e12c:	4798      	blx	r3
 801e12e:	b003      	add	sp, #12
 801e130:	f85d fb04 	ldr.w	pc, [sp], #4
 801e134:	24015c3c 	.word	0x24015c3c
 801e138:	24015c3e 	.word	0x24015c3e

0801e13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e140:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e144:	b089      	sub	sp, #36	@ 0x24
 801e146:	4680      	mov	r8, r0
 801e148:	460c      	mov	r4, r1
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	4615      	mov	r5, r2
 801e14e:	dd0e      	ble.n	801e16e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e150:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e154:	2b00      	cmp	r3, #0
 801e156:	dd0a      	ble.n	801e16e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e158:	4628      	mov	r0, r5
 801e15a:	f7ff ff5b 	bl	801e014 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e15e:	4621      	mov	r1, r4
 801e160:	f7fe f879 	bl	801c256 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e164:	69eb      	ldr	r3, [r5, #28]
 801e166:	b928      	cbnz	r0, 801e174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e168:	461d      	mov	r5, r3
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d1f4      	bne.n	801e158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e16e:	b009      	add	sp, #36	@ 0x24
 801e170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e174:	ae04      	add	r6, sp, #16
 801e176:	2b00      	cmp	r3, #0
 801e178:	f000 80b5 	beq.w	801e2e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e17c:	682b      	ldr	r3, [r5, #0]
 801e17e:	4629      	mov	r1, r5
 801e180:	a802      	add	r0, sp, #8
 801e182:	68db      	ldr	r3, [r3, #12]
 801e184:	4798      	blx	r3
 801e186:	4628      	mov	r0, r5
 801e188:	f7ff ff60 	bl	801e04c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e18c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e190:	4407      	add	r7, r0
 801e192:	4628      	mov	r0, r5
 801e194:	f7ff ff6e 	bl	801e074 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e198:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e19c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e1a0:	b23f      	sxth	r7, r7
 801e1a2:	4418      	add	r0, r3
 801e1a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e1a8:	4621      	mov	r1, r4
 801e1aa:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e1ae:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e1b2:	4630      	mov	r0, r6
 801e1b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e1b8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e1bc:	f7f9 fda4 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801e1c0:	4628      	mov	r0, r5
 801e1c2:	f7ff ff27 	bl	801e014 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e1c6:	ab06      	add	r3, sp, #24
 801e1c8:	4602      	mov	r2, r0
 801e1ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e1ce:	e883 0003 	stmia.w	r3, {r0, r1}
 801e1d2:	4611      	mov	r1, r2
 801e1d4:	4618      	mov	r0, r3
 801e1d6:	f7f9 fd97 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801e1da:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e1de:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e1e2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e1e6:	4299      	cmp	r1, r3
 801e1e8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e1ec:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e1f0:	d10b      	bne.n	801e20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e1f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e1f6:	4552      	cmp	r2, sl
 801e1f8:	d107      	bne.n	801e20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e1fa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e1fe:	455a      	cmp	r2, fp
 801e200:	d103      	bne.n	801e20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e202:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e206:	454a      	cmp	r2, r9
 801e208:	d06d      	beq.n	801e2e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e20a:	f1bb 0f00 	cmp.w	fp, #0
 801e20e:	dd65      	ble.n	801e2dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e210:	f1b9 0f00 	cmp.w	r9, #0
 801e214:	dd62      	ble.n	801e2dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e216:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e21a:	fa1f f08a 	uxth.w	r0, sl
 801e21e:	4552      	cmp	r2, sl
 801e220:	9000      	str	r0, [sp, #0]
 801e222:	da12      	bge.n	801e24a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e224:	9301      	str	r3, [sp, #4]
 801e226:	9b00      	ldr	r3, [sp, #0]
 801e228:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e22c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e230:	1a9a      	subs	r2, r3, r2
 801e232:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e236:	4631      	mov	r1, r6
 801e238:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e23c:	4640      	mov	r0, r8
 801e23e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e242:	69ea      	ldr	r2, [r5, #28]
 801e244:	f7ff ff7a 	bl	801e13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e248:	9b01      	ldr	r3, [sp, #4]
 801e24a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e24e:	b29f      	uxth	r7, r3
 801e250:	429a      	cmp	r2, r3
 801e252:	da0d      	bge.n	801e270 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e254:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e258:	1aba      	subs	r2, r7, r2
 801e25a:	f8ad a012 	strh.w	sl, [sp, #18]
 801e25e:	4631      	mov	r1, r6
 801e260:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e264:	4640      	mov	r0, r8
 801e266:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e26a:	69ea      	ldr	r2, [r5, #28]
 801e26c:	f7ff ff66 	bl	801e13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e270:	8822      	ldrh	r2, [r4, #0]
 801e272:	445f      	add	r7, fp
 801e274:	88a3      	ldrh	r3, [r4, #4]
 801e276:	b2bf      	uxth	r7, r7
 801e278:	4413      	add	r3, r2
 801e27a:	b23a      	sxth	r2, r7
 801e27c:	b29b      	uxth	r3, r3
 801e27e:	b219      	sxth	r1, r3
 801e280:	4291      	cmp	r1, r2
 801e282:	dd0d      	ble.n	801e2a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e284:	1bdb      	subs	r3, r3, r7
 801e286:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e28a:	f8ad a012 	strh.w	sl, [sp, #18]
 801e28e:	4631      	mov	r1, r6
 801e290:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e294:	4640      	mov	r0, r8
 801e296:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e29a:	69ea      	ldr	r2, [r5, #28]
 801e29c:	f7ff ff4e 	bl	801e13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e2a0:	88e2      	ldrh	r2, [r4, #6]
 801e2a2:	8863      	ldrh	r3, [r4, #2]
 801e2a4:	4413      	add	r3, r2
 801e2a6:	9a00      	ldr	r2, [sp, #0]
 801e2a8:	444a      	add	r2, r9
 801e2aa:	b29b      	uxth	r3, r3
 801e2ac:	fa1f f982 	uxth.w	r9, r2
 801e2b0:	b219      	sxth	r1, r3
 801e2b2:	fa0f f289 	sxth.w	r2, r9
 801e2b6:	428a      	cmp	r2, r1
 801e2b8:	da15      	bge.n	801e2e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e2ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e2be:	eba3 0309 	sub.w	r3, r3, r9
 801e2c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e2c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e2ca:	4631      	mov	r1, r6
 801e2cc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e2d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e2d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e2d8:	69ea      	ldr	r2, [r5, #28]
 801e2da:	e001      	b.n	801e2e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e2dc:	69ea      	ldr	r2, [r5, #28]
 801e2de:	4621      	mov	r1, r4
 801e2e0:	4640      	mov	r0, r8
 801e2e2:	f7ff ff2b 	bl	801e13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e2e6:	4628      	mov	r0, r5
 801e2e8:	f7ff fe94 	bl	801e014 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e2ec:	6861      	ldr	r1, [r4, #4]
 801e2ee:	4602      	mov	r2, r0
 801e2f0:	4633      	mov	r3, r6
 801e2f2:	6820      	ldr	r0, [r4, #0]
 801e2f4:	c303      	stmia	r3!, {r0, r1}
 801e2f6:	4611      	mov	r1, r2
 801e2f8:	4630      	mov	r0, r6
 801e2fa:	f7f9 fd05 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801e2fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e302:	2b00      	cmp	r3, #0
 801e304:	f77f af33 	ble.w	801e16e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e308:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	f77f af2e 	ble.w	801e16e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e312:	4628      	mov	r0, r5
 801e314:	f7ff fe9a 	bl	801e04c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e318:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e31c:	1a18      	subs	r0, r3, r0
 801e31e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e322:	4628      	mov	r0, r5
 801e324:	f7ff fea6 	bl	801e074 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e328:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e32c:	4631      	mov	r1, r6
 801e32e:	1a18      	subs	r0, r3, r0
 801e330:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e334:	4628      	mov	r0, r5
 801e336:	682b      	ldr	r3, [r5, #0]
 801e338:	689b      	ldr	r3, [r3, #8]
 801e33a:	4798      	blx	r3
 801e33c:	e717      	b.n	801e16e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e33e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e33e:	b570      	push	{r4, r5, r6, lr}
 801e340:	1d06      	adds	r6, r0, #4
 801e342:	b086      	sub	sp, #24
 801e344:	460c      	mov	r4, r1
 801e346:	2300      	movs	r3, #0
 801e348:	4631      	mov	r1, r6
 801e34a:	4605      	mov	r5, r0
 801e34c:	a802      	add	r0, sp, #8
 801e34e:	9301      	str	r3, [sp, #4]
 801e350:	f7ff f974 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e354:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e358:	8822      	ldrh	r2, [r4, #0]
 801e35a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e35e:	1ad2      	subs	r2, r2, r3
 801e360:	8863      	ldrh	r3, [r4, #2]
 801e362:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e366:	1a5b      	subs	r3, r3, r1
 801e368:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e36c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e370:	aa01      	add	r2, sp, #4
 801e372:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e376:	4630      	mov	r0, r6
 801e378:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e37c:	a904      	add	r1, sp, #16
 801e37e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e382:	f7f9 fd99 	bl	8017eb8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e386:	9a01      	ldr	r2, [sp, #4]
 801e388:	b11a      	cbz	r2, 801e392 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e38a:	4621      	mov	r1, r4
 801e38c:	4628      	mov	r0, r5
 801e38e:	f7ff fed5 	bl	801e13c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e392:	b006      	add	sp, #24
 801e394:	bd70      	pop	{r4, r5, r6, pc}

0801e396 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e396:	4602      	mov	r2, r0
 801e398:	b530      	push	{r4, r5, lr}
 801e39a:	4604      	mov	r4, r0
 801e39c:	b085      	sub	sp, #20
 801e39e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e3a2:	460d      	mov	r5, r1
 801e3a4:	466b      	mov	r3, sp
 801e3a6:	6851      	ldr	r1, [r2, #4]
 801e3a8:	c303      	stmia	r3!, {r0, r1}
 801e3aa:	4629      	mov	r1, r5
 801e3ac:	4668      	mov	r0, sp
 801e3ae:	f7f9 fcab 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 801e3b2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801e3b6:	b12b      	cbz	r3, 801e3c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e3b8:	4669      	mov	r1, sp
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	f7ff ffbf 	bl	801e33e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e3c0:	b005      	add	sp, #20
 801e3c2:	bd30      	pop	{r4, r5, pc}
 801e3c4:	3404      	adds	r4, #4
 801e3c6:	a802      	add	r0, sp, #8
 801e3c8:	4621      	mov	r1, r4
 801e3ca:	f7ff f937 	bl	801d63c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e3ce:	f8bd 3000 	ldrh.w	r3, [sp]
 801e3d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e3d6:	4669      	mov	r1, sp
 801e3d8:	4620      	mov	r0, r4
 801e3da:	1a9b      	subs	r3, r3, r2
 801e3dc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e3e0:	f8ad 3000 	strh.w	r3, [sp]
 801e3e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e3e8:	1a9b      	subs	r3, r3, r2
 801e3ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e3ee:	f7f9 fd2a 	bl	8017e46 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e3f2:	e7e5      	b.n	801e3c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e3f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e3f4:	460b      	mov	r3, r1
 801e3f6:	680a      	ldr	r2, [r1, #0]
 801e3f8:	1d01      	adds	r1, r0, #4
 801e3fa:	6992      	ldr	r2, [r2, #24]
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	4710      	bx	r2

0801e400 <_ZN8touchgfx12TextProviderC1Ev>:
 801e400:	b538      	push	{r3, r4, r5, lr}
 801e402:	2500      	movs	r5, #0
 801e404:	2302      	movs	r3, #2
 801e406:	4604      	mov	r4, r0
 801e408:	220e      	movs	r2, #14
 801e40a:	7403      	strb	r3, [r0, #16]
 801e40c:	4629      	mov	r1, r5
 801e40e:	6145      	str	r5, [r0, #20]
 801e410:	7605      	strb	r5, [r0, #24]
 801e412:	83c5      	strh	r5, [r0, #30]
 801e414:	8405      	strh	r5, [r0, #32]
 801e416:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801e418:	8705      	strh	r5, [r0, #56]	@ 0x38
 801e41a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801e41c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801e420:	e9c0 5500 	strd	r5, r5, [r0]
 801e424:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801e428:	304c      	adds	r0, #76	@ 0x4c
 801e42a:	f00b fe41 	bl	802a0b0 <memset>
 801e42e:	2301      	movs	r3, #1
 801e430:	4620      	mov	r0, r4
 801e432:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801e436:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e43a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801e43e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801e442:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801e446:	f7e5 f99b 	bl	8003780 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e44a:	4620      	mov	r0, r4
 801e44c:	bd38      	pop	{r3, r4, r5, pc}

0801e44e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e44e:	b530      	push	{r4, r5, lr}
 801e450:	2500      	movs	r5, #0
 801e452:	2401      	movs	r4, #1
 801e454:	6843      	ldr	r3, [r0, #4]
 801e456:	b913      	cbnz	r3, 801e45e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e458:	6803      	ldr	r3, [r0, #0]
 801e45a:	b313      	cbz	r3, 801e4a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e45c:	6043      	str	r3, [r0, #4]
 801e45e:	7e03      	ldrb	r3, [r0, #24]
 801e460:	b143      	cbz	r3, 801e474 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e462:	6943      	ldr	r3, [r0, #20]
 801e464:	b12b      	cbz	r3, 801e472 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e466:	881a      	ldrh	r2, [r3, #0]
 801e468:	b11a      	cbz	r2, 801e472 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e46a:	1c9a      	adds	r2, r3, #2
 801e46c:	6142      	str	r2, [r0, #20]
 801e46e:	8818      	ldrh	r0, [r3, #0]
 801e470:	bd30      	pop	{r4, r5, pc}
 801e472:	7605      	strb	r5, [r0, #24]
 801e474:	6843      	ldr	r3, [r0, #4]
 801e476:	8819      	ldrh	r1, [r3, #0]
 801e478:	b199      	cbz	r1, 801e4a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e47a:	1c9a      	adds	r2, r3, #2
 801e47c:	2902      	cmp	r1, #2
 801e47e:	6042      	str	r2, [r0, #4]
 801e480:	d1f5      	bne.n	801e46e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e482:	7c03      	ldrb	r3, [r0, #16]
 801e484:	2b01      	cmp	r3, #1
 801e486:	d8e5      	bhi.n	801e454 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e488:	1c5a      	adds	r2, r3, #1
 801e48a:	3302      	adds	r3, #2
 801e48c:	7402      	strb	r2, [r0, #16]
 801e48e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e492:	6143      	str	r3, [r0, #20]
 801e494:	2b00      	cmp	r3, #0
 801e496:	d0dd      	beq.n	801e454 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e498:	881b      	ldrh	r3, [r3, #0]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d0da      	beq.n	801e454 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e49e:	7604      	strb	r4, [r0, #24]
 801e4a0:	e7d8      	b.n	801e454 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	e7e4      	b.n	801e470 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e4a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e4a6:	6001      	str	r1, [r0, #0]
 801e4a8:	2100      	movs	r1, #0
 801e4aa:	b430      	push	{r4, r5}
 801e4ac:	6041      	str	r1, [r0, #4]
 801e4ae:	6815      	ldr	r5, [r2, #0]
 801e4b0:	6085      	str	r5, [r0, #8]
 801e4b2:	6852      	ldr	r2, [r2, #4]
 801e4b4:	6443      	str	r3, [r0, #68]	@ 0x44
 801e4b6:	9b02      	ldr	r3, [sp, #8]
 801e4b8:	60c2      	str	r2, [r0, #12]
 801e4ba:	7401      	strb	r1, [r0, #16]
 801e4bc:	6141      	str	r1, [r0, #20]
 801e4be:	7601      	strb	r1, [r0, #24]
 801e4c0:	8701      	strh	r1, [r0, #56]	@ 0x38
 801e4c2:	8401      	strh	r1, [r0, #32]
 801e4c4:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801e4c8:	6483      	str	r3, [r0, #72]	@ 0x48
 801e4ca:	bc30      	pop	{r4, r5}
 801e4cc:	f7e5 b958 	b.w	8003780 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e4d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4d2:	4605      	mov	r5, r0
 801e4d4:	4608      	mov	r0, r1
 801e4d6:	b1f1      	cbz	r1, 801e516 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801e4d8:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801e4dc:	460b      	mov	r3, r1
 801e4de:	f101 0708 	add.w	r7, r1, #8
 801e4e2:	4622      	mov	r2, r4
 801e4e4:	6818      	ldr	r0, [r3, #0]
 801e4e6:	3308      	adds	r3, #8
 801e4e8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e4ec:	4626      	mov	r6, r4
 801e4ee:	42bb      	cmp	r3, r7
 801e4f0:	c603      	stmia	r6!, {r0, r1}
 801e4f2:	4634      	mov	r4, r6
 801e4f4:	d1f6      	bne.n	801e4e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801e4f6:	6818      	ldr	r0, [r3, #0]
 801e4f8:	6030      	str	r0, [r6, #0]
 801e4fa:	4610      	mov	r0, r2
 801e4fc:	889b      	ldrh	r3, [r3, #4]
 801e4fe:	80b3      	strh	r3, [r6, #4]
 801e500:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801e504:	015b      	lsls	r3, r3, #5
 801e506:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801e50a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801e50e:	430b      	orrs	r3, r1
 801e510:	425b      	negs	r3, r3
 801e512:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801e516:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e518 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801e518:	b538      	push	{r3, r4, r5, lr}
 801e51a:	460c      	mov	r4, r1
 801e51c:	6811      	ldr	r1, [r2, #0]
 801e51e:	4610      	mov	r0, r2
 801e520:	68cd      	ldr	r5, [r1, #12]
 801e522:	4619      	mov	r1, r3
 801e524:	47a8      	blx	r5
 801e526:	2800      	cmp	r0, #0
 801e528:	bf08      	it	eq
 801e52a:	4620      	moveq	r0, r4
 801e52c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e530 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801e530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e532:	4604      	mov	r4, r0
 801e534:	4615      	mov	r5, r2
 801e536:	4608      	mov	r0, r1
 801e538:	b93a      	cbnz	r2, 801e54a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801e53a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801e53e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801e542:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801e546:	4628      	mov	r0, r5
 801e548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e54a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801e54e:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801e552:	8893      	ldrh	r3, [r2, #4]
 801e554:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801e558:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801e55c:	79ee      	ldrb	r6, [r5, #7]
 801e55e:	4316      	orrs	r6, r2
 801e560:	19da      	adds	r2, r3, r7
 801e562:	b291      	uxth	r1, r2
 801e564:	b2b7      	uxth	r7, r6
 801e566:	291d      	cmp	r1, #29
 801e568:	d87b      	bhi.n	801e662 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e56a:	2201      	movs	r2, #1
 801e56c:	10f6      	asrs	r6, r6, #3
 801e56e:	408a      	lsls	r2, r1
 801e570:	4974      	ldr	r1, [pc, #464]	@ (801e744 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801e572:	420a      	tst	r2, r1
 801e574:	d12e      	bne.n	801e5d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801e576:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801e57a:	d072      	beq.n	801e662 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801e57c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801e580:	462b      	mov	r3, r5
 801e582:	f105 0e08 	add.w	lr, r5, #8
 801e586:	4615      	mov	r5, r2
 801e588:	6818      	ldr	r0, [r3, #0]
 801e58a:	3308      	adds	r3, #8
 801e58c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e590:	4694      	mov	ip, r2
 801e592:	4573      	cmp	r3, lr
 801e594:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e598:	4662      	mov	r2, ip
 801e59a:	d1f5      	bne.n	801e588 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801e59c:	6818      	ldr	r0, [r3, #0]
 801e59e:	f8cc 0000 	str.w	r0, [ip]
 801e5a2:	889b      	ldrh	r3, [r3, #4]
 801e5a4:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e5a8:	b2b3      	uxth	r3, r6
 801e5aa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801e5ae:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801e5b2:	1aca      	subs	r2, r1, r3
 801e5b4:	1bcf      	subs	r7, r1, r7
 801e5b6:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801e5ba:	b292      	uxth	r2, r2
 801e5bc:	1afb      	subs	r3, r7, r3
 801e5be:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801e5c2:	10d2      	asrs	r2, r2, #3
 801e5c4:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801e5c8:	4302      	orrs	r2, r0
 801e5ca:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801e5ce:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801e5d2:	e7b8      	b.n	801e546 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e5d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801e5d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e5da:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801e5dc:	f640 6333 	movw	r3, #3635	@ 0xe33
 801e5e0:	4299      	cmp	r1, r3
 801e5e2:	d110      	bne.n	801e606 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801e5e4:	6803      	ldr	r3, [r0, #0]
 801e5e6:	68db      	ldr	r3, [r3, #12]
 801e5e8:	4798      	blx	r3
 801e5ea:	7b41      	ldrb	r1, [r0, #13]
 801e5ec:	00cb      	lsls	r3, r1, #3
 801e5ee:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e5f2:	7a03      	ldrb	r3, [r0, #8]
 801e5f4:	0648      	lsls	r0, r1, #25
 801e5f6:	ea43 0302 	orr.w	r3, r3, r2
 801e5fa:	bf44      	itt	mi
 801e5fc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e600:	b21b      	sxthmi	r3, r3
 801e602:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e606:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801e60a:	462a      	mov	r2, r5
 801e60c:	f105 0c08 	add.w	ip, r5, #8
 801e610:	443b      	add	r3, r7
 801e612:	4433      	add	r3, r6
 801e614:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801e618:	b29b      	uxth	r3, r3
 801e61a:	4635      	mov	r5, r6
 801e61c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e620:	6810      	ldr	r0, [r2, #0]
 801e622:	3208      	adds	r2, #8
 801e624:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801e628:	4637      	mov	r7, r6
 801e62a:	4562      	cmp	r2, ip
 801e62c:	c703      	stmia	r7!, {r0, r1}
 801e62e:	463e      	mov	r6, r7
 801e630:	d1f6      	bne.n	801e620 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801e632:	6810      	ldr	r0, [r2, #0]
 801e634:	6038      	str	r0, [r7, #0]
 801e636:	8892      	ldrh	r2, [r2, #4]
 801e638:	80ba      	strh	r2, [r7, #4]
 801e63a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801e63e:	10db      	asrs	r3, r3, #3
 801e640:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801e644:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801e648:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801e64c:	4313      	orrs	r3, r2
 801e64e:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801e652:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801e656:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801e65a:	1a9b      	subs	r3, r3, r2
 801e65c:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801e660:	e771      	b.n	801e546 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e662:	f023 0204 	bic.w	r2, r3, #4
 801e666:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801e66a:	428a      	cmp	r2, r1
 801e66c:	d003      	beq.n	801e676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801e66e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801e672:	4293      	cmp	r3, r2
 801e674:	d120      	bne.n	801e6b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801e676:	3b01      	subs	r3, #1
 801e678:	4602      	mov	r2, r0
 801e67a:	4629      	mov	r1, r5
 801e67c:	4620      	mov	r0, r4
 801e67e:	b29b      	uxth	r3, r3
 801e680:	f7ff ff4a 	bl	801e518 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e684:	7b41      	ldrb	r1, [r0, #13]
 801e686:	00cb      	lsls	r3, r1, #3
 801e688:	0649      	lsls	r1, r1, #25
 801e68a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e68e:	7a03      	ldrb	r3, [r0, #8]
 801e690:	ea43 0302 	orr.w	r3, r3, r2
 801e694:	bf44      	itt	mi
 801e696:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e69a:	b21b      	sxthmi	r3, r3
 801e69c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e6a0:	7b6b      	ldrb	r3, [r5, #13]
 801e6a2:	7aaa      	ldrb	r2, [r5, #10]
 801e6a4:	005b      	lsls	r3, r3, #1
 801e6a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e6aa:	4313      	orrs	r3, r2
 801e6ac:	115a      	asrs	r2, r3, #5
 801e6ae:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e6b2:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801e6b6:	e035      	b.n	801e724 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801e6b8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801e6bc:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801e6c0:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801e6c4:	7a2a      	ldrb	r2, [r5, #8]
 801e6c6:	ea42 0201 	orr.w	r2, r2, r1
 801e6ca:	f640 6109 	movw	r1, #3593	@ 0xe09
 801e6ce:	bf1c      	itt	ne
 801e6d0:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801e6d4:	b212      	sxthne	r2, r2
 801e6d6:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801e6da:	f023 0210 	bic.w	r2, r3, #16
 801e6de:	428a      	cmp	r2, r1
 801e6e0:	d003      	beq.n	801e6ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801e6e2:	f640 6213 	movw	r2, #3603	@ 0xe13
 801e6e6:	4293      	cmp	r3, r2
 801e6e8:	d129      	bne.n	801e73e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801e6ea:	7b6e      	ldrb	r6, [r5, #13]
 801e6ec:	4629      	mov	r1, r5
 801e6ee:	0076      	lsls	r6, r6, #1
 801e6f0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801e6f4:	7aae      	ldrb	r6, [r5, #10]
 801e6f6:	4316      	orrs	r6, r2
 801e6f8:	f640 6213 	movw	r2, #3603	@ 0xe13
 801e6fc:	4293      	cmp	r3, r2
 801e6fe:	4602      	mov	r2, r0
 801e700:	4620      	mov	r0, r4
 801e702:	bf16      	itet	ne
 801e704:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e708:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801e70c:	b29b      	uxthne	r3, r3
 801e70e:	f7ff ff03 	bl	801e518 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e712:	7b43      	ldrb	r3, [r0, #13]
 801e714:	7a82      	ldrb	r2, [r0, #10]
 801e716:	005b      	lsls	r3, r3, #1
 801e718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e71c:	4313      	orrs	r3, r2
 801e71e:	1af6      	subs	r6, r6, r3
 801e720:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801e724:	7b69      	ldrb	r1, [r5, #13]
 801e726:	00cb      	lsls	r3, r1, #3
 801e728:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e72c:	7a2b      	ldrb	r3, [r5, #8]
 801e72e:	4313      	orrs	r3, r2
 801e730:	064a      	lsls	r2, r1, #25
 801e732:	bf44      	itt	mi
 801e734:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e738:	b21b      	sxthmi	r3, r3
 801e73a:	1bdb      	subs	r3, r3, r7
 801e73c:	e747      	b.n	801e5ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801e73e:	2300      	movs	r3, #0
 801e740:	e7b7      	b.n	801e6b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801e742:	bf00      	nop
 801e744:	3fc00079 	.word	0x3fc00079

0801e748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e74c:	4604      	mov	r4, r0
 801e74e:	b942      	cbnz	r2, 801e762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e754:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801e758:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801e75c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801e760:	e047      	b.n	801e7f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e762:	7b51      	ldrb	r1, [r2, #13]
 801e764:	8893      	ldrh	r3, [r2, #4]
 801e766:	010d      	lsls	r5, r1, #4
 801e768:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801e76c:	79d5      	ldrb	r5, [r2, #7]
 801e76e:	4305      	orrs	r5, r0
 801e770:	2d04      	cmp	r5, #4
 801e772:	bfcc      	ite	gt
 801e774:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801e778:	f04f 0e01 	movle.w	lr, #1
 801e77c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801e780:	f200 80ab 	bhi.w	801e8da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801e784:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801e788:	4283      	cmp	r3, r0
 801e78a:	d216      	bcs.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e78c:	f240 605b 	movw	r0, #1627	@ 0x65b
 801e790:	4283      	cmp	r3, r0
 801e792:	d859      	bhi.n	801e848 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801e794:	f240 6057 	movw	r0, #1623	@ 0x657
 801e798:	4283      	cmp	r3, r0
 801e79a:	d20e      	bcs.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e79c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801e7a0:	d24a      	bcs.n	801e838 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801e7a2:	f240 604e 	movw	r0, #1614	@ 0x64e
 801e7a6:	4283      	cmp	r3, r0
 801e7a8:	d207      	bcs.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e7aa:	f240 601a 	movw	r0, #1562	@ 0x61a
 801e7ae:	4283      	cmp	r3, r0
 801e7b0:	d02a      	beq.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e7b2:	d821      	bhi.n	801e7f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801e7b4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801e7b8:	d35b      	bcc.n	801e872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e7ba:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801e7be:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e7c2:	f040 80d0 	bne.w	801e966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e7c6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801e7ca:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e7ce:	f040 80ca 	bne.w	801e966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e7d2:	00cb      	lsls	r3, r1, #3
 801e7d4:	0649      	lsls	r1, r1, #25
 801e7d6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801e7da:	7a13      	ldrb	r3, [r2, #8]
 801e7dc:	ea43 0300 	orr.w	r3, r3, r0
 801e7e0:	bf44      	itt	mi
 801e7e2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e7e6:	b21b      	sxthmi	r3, r3
 801e7e8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e7ec:	1b5d      	subs	r5, r3, r5
 801e7ee:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e7f2:	4610      	mov	r0, r2
 801e7f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7f8:	f240 604b 	movw	r0, #1611	@ 0x64b
 801e7fc:	4283      	cmp	r3, r0
 801e7fe:	d338      	bcc.n	801e872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e800:	f240 604c 	movw	r0, #1612	@ 0x64c
 801e804:	4283      	cmp	r3, r0
 801e806:	d9d8      	bls.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e808:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801e80c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801e810:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e814:	f040 80f3 	bne.w	801e9fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e818:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e81c:	f040 80ef 	bne.w	801e9fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e820:	00cb      	lsls	r3, r1, #3
 801e822:	064e      	lsls	r6, r1, #25
 801e824:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801e828:	7a13      	ldrb	r3, [r2, #8]
 801e82a:	ea43 0300 	orr.w	r3, r3, r0
 801e82e:	bf44      	itt	mi
 801e830:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e834:	b21b      	sxthmi	r3, r3
 801e836:	e7d9      	b.n	801e7ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801e838:	f240 6054 	movw	r0, #1620	@ 0x654
 801e83c:	4283      	cmp	r3, r0
 801e83e:	d8e3      	bhi.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e840:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801e844:	d9e0      	bls.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e846:	e7b8      	b.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e848:	f240 6074 	movw	r0, #1652	@ 0x674
 801e84c:	4283      	cmp	r3, r0
 801e84e:	d0b4      	beq.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e850:	d82d      	bhi.n	801e8ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801e852:	f240 605e 	movw	r0, #1630	@ 0x65e
 801e856:	4283      	cmp	r3, r0
 801e858:	d804      	bhi.n	801e864 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801e85a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801e85e:	4283      	cmp	r3, r0
 801e860:	d3d2      	bcc.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e862:	e7aa      	b.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e864:	f240 605f 	movw	r0, #1631	@ 0x65f
 801e868:	4283      	cmp	r3, r0
 801e86a:	d0cd      	beq.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e86c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801e870:	d0a3      	beq.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e872:	00cb      	lsls	r3, r1, #3
 801e874:	0649      	lsls	r1, r1, #25
 801e876:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801e87a:	7a13      	ldrb	r3, [r2, #8]
 801e87c:	ea43 0300 	orr.w	r3, r3, r0
 801e880:	bf44      	itt	mi
 801e882:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e886:	b21b      	sxthmi	r3, r3
 801e888:	1b5d      	subs	r5, r3, r5
 801e88a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e88e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e892:	7b53      	ldrb	r3, [r2, #13]
 801e894:	015b      	lsls	r3, r3, #5
 801e896:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801e89a:	7993      	ldrb	r3, [r2, #6]
 801e89c:	430b      	orrs	r3, r1
 801e89e:	2105      	movs	r1, #5
 801e8a0:	005b      	lsls	r3, r3, #1
 801e8a2:	fb93 f3f1 	sdiv	r3, r3, r1
 801e8a6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e8aa:	440b      	add	r3, r1
 801e8ac:	e756      	b.n	801e75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e8ae:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801e8b2:	4283      	cmp	r3, r0
 801e8b4:	d809      	bhi.n	801e8ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801e8b6:	f240 60df 	movw	r0, #1759	@ 0x6df
 801e8ba:	4283      	cmp	r3, r0
 801e8bc:	f4bf af7d 	bcs.w	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e8c0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801e8c4:	2b05      	cmp	r3, #5
 801e8c6:	d8d4      	bhi.n	801e872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e8c8:	e777      	b.n	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e8ca:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801e8ce:	4283      	cmp	r3, r0
 801e8d0:	d09a      	beq.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e8d2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801e8d6:	4283      	cmp	r3, r0
 801e8d8:	e7ca      	b.n	801e870 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e8da:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801e8de:	d22b      	bcs.n	801e938 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801e8e0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801e8e4:	4283      	cmp	r3, r0
 801e8e6:	d28f      	bcs.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e8e8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801e8ec:	4283      	cmp	r3, r0
 801e8ee:	d816      	bhi.n	801e91e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801e8f0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801e8f4:	4283      	cmp	r3, r0
 801e8f6:	f4bf af60 	bcs.w	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e8fa:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801e8fe:	4283      	cmp	r3, r0
 801e900:	d80a      	bhi.n	801e918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801e902:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801e906:	4283      	cmp	r3, r0
 801e908:	f4bf af57 	bcs.w	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e90c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801e910:	4283      	cmp	r3, r0
 801e912:	f43f af79 	beq.w	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e916:	e7ac      	b.n	801e872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e918:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801e91c:	e7f8      	b.n	801e910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801e91e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801e922:	4283      	cmp	r3, r0
 801e924:	d802      	bhi.n	801e92c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801e926:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801e92a:	e798      	b.n	801e85e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801e92c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801e930:	4283      	cmp	r3, r0
 801e932:	f47f af42 	bne.w	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e936:	e767      	b.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e938:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801e93c:	4283      	cmp	r3, r0
 801e93e:	f43f af63 	beq.w	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e942:	d802      	bhi.n	801e94a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801e944:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801e948:	e7f2      	b.n	801e930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801e94a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801e94e:	4283      	cmp	r3, r0
 801e950:	d805      	bhi.n	801e95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801e952:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801e956:	4283      	cmp	r3, r0
 801e958:	f4ff af2f 	bcc.w	801e7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e95c:	e754      	b.n	801e808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e95e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801e962:	4283      	cmp	r3, r0
 801e964:	e7af      	b.n	801e8c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801e966:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801e96a:	4617      	mov	r7, r2
 801e96c:	f102 0808 	add.w	r8, r2, #8
 801e970:	4666      	mov	r6, ip
 801e972:	6838      	ldr	r0, [r7, #0]
 801e974:	3708      	adds	r7, #8
 801e976:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e97a:	46e6      	mov	lr, ip
 801e97c:	4547      	cmp	r7, r8
 801e97e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801e982:	46f4      	mov	ip, lr
 801e984:	d1f5      	bne.n	801e972 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801e986:	6838      	ldr	r0, [r7, #0]
 801e988:	f8ce 0000 	str.w	r0, [lr]
 801e98c:	88b9      	ldrh	r1, [r7, #4]
 801e98e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e992:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801e996:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e99a:	d009      	beq.n	801e9b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801e99c:	7b51      	ldrb	r1, [r2, #13]
 801e99e:	7992      	ldrb	r2, [r2, #6]
 801e9a0:	0149      	lsls	r1, r1, #5
 801e9a2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801e9a6:	4311      	orrs	r1, r2
 801e9a8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e9ac:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801e9b0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e9b4:	b2ad      	uxth	r5, r5
 801e9b6:	d00d      	beq.n	801e9d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801e9b8:	442b      	add	r3, r5
 801e9ba:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801e9be:	b29b      	uxth	r3, r3
 801e9c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801e9c4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801e9c8:	10db      	asrs	r3, r3, #3
 801e9ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801e9ce:	4313      	orrs	r3, r2
 801e9d0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801e9d4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801e9d8:	00cb      	lsls	r3, r1, #3
 801e9da:	064f      	lsls	r7, r1, #25
 801e9dc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e9e0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801e9e4:	ea43 0302 	orr.w	r3, r3, r2
 801e9e8:	bf44      	itt	mi
 801e9ea:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e9ee:	b21b      	sxthmi	r3, r3
 801e9f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e9f4:	1b5b      	subs	r3, r3, r5
 801e9f6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801e9fa:	4632      	mov	r2, r6
 801e9fc:	e6f9      	b.n	801e7f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e9fe:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801ea02:	4617      	mov	r7, r2
 801ea04:	f102 0908 	add.w	r9, r2, #8
 801ea08:	4666      	mov	r6, ip
 801ea0a:	6838      	ldr	r0, [r7, #0]
 801ea0c:	3708      	adds	r7, #8
 801ea0e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ea12:	46e0      	mov	r8, ip
 801ea14:	454f      	cmp	r7, r9
 801ea16:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ea1a:	46c4      	mov	ip, r8
 801ea1c:	d1f5      	bne.n	801ea0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801ea1e:	6838      	ldr	r0, [r7, #0]
 801ea20:	f8c8 0000 	str.w	r0, [r8]
 801ea24:	88b9      	ldrh	r1, [r7, #4]
 801ea26:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ea2a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801ea2e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ea32:	d009      	beq.n	801ea48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801ea34:	7b51      	ldrb	r1, [r2, #13]
 801ea36:	7992      	ldrb	r2, [r2, #6]
 801ea38:	0149      	lsls	r1, r1, #5
 801ea3a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801ea3e:	4311      	orrs	r1, r2
 801ea40:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ea44:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801ea48:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ea4c:	d00e      	beq.n	801ea6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801ea4e:	eba3 030e 	sub.w	r3, r3, lr
 801ea52:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801ea56:	b29b      	uxth	r3, r3
 801ea58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ea5c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801ea60:	10db      	asrs	r3, r3, #3
 801ea62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ea66:	4313      	orrs	r3, r2
 801ea68:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801ea6c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801ea70:	00cb      	lsls	r3, r1, #3
 801ea72:	0648      	lsls	r0, r1, #25
 801ea74:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ea78:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801ea7c:	ea43 0302 	orr.w	r3, r3, r2
 801ea80:	bf44      	itt	mi
 801ea82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ea86:	b21b      	sxthmi	r3, r3
 801ea88:	1b5d      	subs	r5, r3, r5
 801ea8a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801ea8e:	e7b4      	b.n	801e9fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801ea90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea94:	461e      	mov	r6, r3
 801ea96:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ea98:	4604      	mov	r4, r0
 801ea9a:	4617      	mov	r7, r2
 801ea9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eaa0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801eaa4:	f7e4 fe2a 	bl	80036fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eaa8:	4605      	mov	r5, r0
 801eaaa:	b918      	cbnz	r0, 801eab4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801eaac:	6030      	str	r0, [r6, #0]
 801eaae:	4628      	mov	r0, r5
 801eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eab4:	683b      	ldr	r3, [r7, #0]
 801eab6:	4601      	mov	r1, r0
 801eab8:	4638      	mov	r0, r7
 801eaba:	68db      	ldr	r3, [r3, #12]
 801eabc:	4798      	blx	r3
 801eabe:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801eac2:	4602      	mov	r2, r0
 801eac4:	6030      	str	r0, [r6, #0]
 801eac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801eaca:	d213      	bcs.n	801eaf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801eacc:	4643      	mov	r3, r8
 801eace:	4639      	mov	r1, r7
 801ead0:	4620      	mov	r0, r4
 801ead2:	f7ff fe39 	bl	801e748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ead6:	6030      	str	r0, [r6, #0]
 801ead8:	6833      	ldr	r3, [r6, #0]
 801eada:	b143      	cbz	r3, 801eaee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801eadc:	7b5a      	ldrb	r2, [r3, #13]
 801eade:	7a9b      	ldrb	r3, [r3, #10]
 801eae0:	0052      	lsls	r2, r2, #1
 801eae2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801eae6:	4313      	orrs	r3, r2
 801eae8:	bf0c      	ite	eq
 801eaea:	2301      	moveq	r3, #1
 801eaec:	2300      	movne	r3, #0
 801eaee:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801eaf2:	e7dc      	b.n	801eaae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801eaf4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801eaf8:	b29b      	uxth	r3, r3
 801eafa:	2b7f      	cmp	r3, #127	@ 0x7f
 801eafc:	d804      	bhi.n	801eb08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801eafe:	4639      	mov	r1, r7
 801eb00:	4620      	mov	r0, r4
 801eb02:	f7ff fd15 	bl	801e530 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801eb06:	e7e6      	b.n	801ead6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801eb08:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d0e3      	beq.n	801ead8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801eb10:	f640 1302 	movw	r3, #2306	@ 0x902
 801eb14:	429d      	cmp	r5, r3
 801eb16:	d1df      	bne.n	801ead8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801eb18:	4601      	mov	r1, r0
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	f7ff fcd8 	bl	801e4d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801eb20:	e7d9      	b.n	801ead6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801eb22 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801eb22:	b510      	push	{r4, lr}
 801eb24:	4604      	mov	r4, r0
 801eb26:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801eb2a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801eb2c:	b1e1      	cbz	r1, 801eb68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801eb2e:	2b0a      	cmp	r3, #10
 801eb30:	d02d      	beq.n	801eb8e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801eb32:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801eb34:	3901      	subs	r1, #1
 801eb36:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801eb3a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801eb3c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801eb40:	1c51      	adds	r1, r2, #1
 801eb42:	b289      	uxth	r1, r1
 801eb44:	2901      	cmp	r1, #1
 801eb46:	bf8a      	itet	hi
 801eb48:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801eb4c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801eb4e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801eb50:	1c5a      	adds	r2, r3, #1
 801eb52:	8722      	strh	r2, [r4, #56]	@ 0x38
 801eb54:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801eb56:	4413      	add	r3, r2
 801eb58:	b29b      	uxth	r3, r3
 801eb5a:	2b09      	cmp	r3, #9
 801eb5c:	bf88      	it	hi
 801eb5e:	3b0a      	subhi	r3, #10
 801eb60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eb64:	8458      	strh	r0, [r3, #34]	@ 0x22
 801eb66:	e7de      	b.n	801eb26 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801eb68:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801eb6a:	2b0a      	cmp	r3, #10
 801eb6c:	d00f      	beq.n	801eb8e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801eb6e:	4620      	mov	r0, r4
 801eb70:	f7ff fc6d 	bl	801e44e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801eb74:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801eb76:	1c5a      	adds	r2, r3, #1
 801eb78:	8722      	strh	r2, [r4, #56]	@ 0x38
 801eb7a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801eb7c:	4413      	add	r3, r2
 801eb7e:	b29b      	uxth	r3, r3
 801eb80:	2b09      	cmp	r3, #9
 801eb82:	bf88      	it	hi
 801eb84:	3b0a      	subhi	r3, #10
 801eb86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eb8a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801eb8c:	e7ec      	b.n	801eb68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801eb8e:	bd10      	pop	{r4, pc}

0801eb90 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801eb90:	b538      	push	{r3, r4, r5, lr}
 801eb92:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801eb94:	4604      	mov	r4, r0
 801eb96:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801eb9a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801eb9c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801eb9e:	3a01      	subs	r2, #1
 801eba0:	8702      	strh	r2, [r0, #56]	@ 0x38
 801eba2:	1c5a      	adds	r2, r3, #1
 801eba4:	b292      	uxth	r2, r2
 801eba6:	2a09      	cmp	r2, #9
 801eba8:	bf8a      	itet	hi
 801ebaa:	3b09      	subhi	r3, #9
 801ebac:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801ebae:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801ebb0:	f7ff ffb7 	bl	801eb22 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ebb4:	8c23      	ldrh	r3, [r4, #32]
 801ebb6:	2b01      	cmp	r3, #1
 801ebb8:	bf9c      	itt	ls
 801ebba:	3301      	addls	r3, #1
 801ebbc:	8423      	strhls	r3, [r4, #32]
 801ebbe:	8be3      	ldrh	r3, [r4, #30]
 801ebc0:	b90b      	cbnz	r3, 801ebc6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ebc2:	2302      	movs	r3, #2
 801ebc4:	83e3      	strh	r3, [r4, #30]
 801ebc6:	8be3      	ldrh	r3, [r4, #30]
 801ebc8:	4628      	mov	r0, r5
 801ebca:	3b01      	subs	r3, #1
 801ebcc:	b29b      	uxth	r3, r3
 801ebce:	83e3      	strh	r3, [r4, #30]
 801ebd0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ebd4:	8365      	strh	r5, [r4, #26]
 801ebd6:	bd38      	pop	{r3, r4, r5, pc}

0801ebd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ebd8:	428a      	cmp	r2, r1
 801ebda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebde:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801ebe0:	d932      	bls.n	801ec48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ebe2:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801ebe4:	1a54      	subs	r4, r2, r1
 801ebe6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801ebea:	19ee      	adds	r6, r5, r7
 801ebec:	fa1f fe84 	uxth.w	lr, r4
 801ebf0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801ebf4:	3e01      	subs	r6, #1
 801ebf6:	b2b4      	uxth	r4, r6
 801ebf8:	eba4 090e 	sub.w	r9, r4, lr
 801ebfc:	fa1f f989 	uxth.w	r9, r9
 801ec00:	2c09      	cmp	r4, #9
 801ec02:	4626      	mov	r6, r4
 801ec04:	bf88      	it	hi
 801ec06:	f1a4 060a 	subhi.w	r6, r4, #10
 801ec0a:	f1bc 0f00 	cmp.w	ip, #0
 801ec0e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ec12:	bf08      	it	eq
 801ec14:	f04f 0c02 	moveq.w	ip, #2
 801ec18:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ec1c:	b2a4      	uxth	r4, r4
 801ec1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ec22:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801ec26:	454c      	cmp	r4, r9
 801ec28:	fa1f fc8c 	uxth.w	ip, ip
 801ec2c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ec30:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801ec34:	d1e4      	bne.n	801ec00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ec36:	eba5 050e 	sub.w	r5, r5, lr
 801ec3a:	eb0e 0408 	add.w	r4, lr, r8
 801ec3e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801ec42:	8705      	strh	r5, [r0, #56]	@ 0x38
 801ec44:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801ec48:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801ec4a:	250a      	movs	r5, #10
 801ec4c:	1a64      	subs	r4, r4, r1
 801ec4e:	4439      	add	r1, r7
 801ec50:	b289      	uxth	r1, r1
 801ec52:	8704      	strh	r4, [r0, #56]	@ 0x38
 801ec54:	2909      	cmp	r1, #9
 801ec56:	bf88      	it	hi
 801ec58:	390a      	subhi	r1, #10
 801ec5a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ec5c:	b18a      	cbz	r2, 801ec82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ec5e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801ec60:	3a01      	subs	r2, #1
 801ec62:	3101      	adds	r1, #1
 801ec64:	b292      	uxth	r2, r2
 801ec66:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ec6a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801ec6c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801ec6e:	b901      	cbnz	r1, 801ec72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ec70:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801ec72:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801ec74:	3901      	subs	r1, #1
 801ec76:	b289      	uxth	r1, r1
 801ec78:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ec7a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ec7e:	844c      	strh	r4, [r1, #34]	@ 0x22
 801ec80:	e7ec      	b.n	801ec5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ec82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec86:	f7ff bf4c 	b.w	801eb22 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ec8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ec8a:	b570      	push	{r4, r5, r6, lr}
 801ec8c:	2500      	movs	r5, #0
 801ec8e:	4295      	cmp	r5, r2
 801ec90:	d011      	beq.n	801ecb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ec92:	8bc4      	ldrh	r4, [r0, #30]
 801ec94:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ec98:	4414      	add	r4, r2
 801ec9a:	3c01      	subs	r4, #1
 801ec9c:	1b64      	subs	r4, r4, r5
 801ec9e:	b2a4      	uxth	r4, r4
 801eca0:	2c01      	cmp	r4, #1
 801eca2:	bf88      	it	hi
 801eca4:	3c02      	subhi	r4, #2
 801eca6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ecaa:	8b64      	ldrh	r4, [r4, #26]
 801ecac:	42b4      	cmp	r4, r6
 801ecae:	d117      	bne.n	801ece0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ecb0:	3501      	adds	r5, #1
 801ecb2:	b2ad      	uxth	r5, r5
 801ecb4:	e7eb      	b.n	801ec8e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801ecb6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ecba:	2400      	movs	r4, #0
 801ecbc:	4413      	add	r3, r2
 801ecbe:	b2a2      	uxth	r2, r4
 801ecc0:	429a      	cmp	r2, r3
 801ecc2:	da0f      	bge.n	801ece4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801ecc4:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801ecc6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801ecca:	3401      	adds	r4, #1
 801eccc:	4432      	add	r2, r6
 801ecce:	b292      	uxth	r2, r2
 801ecd0:	2a09      	cmp	r2, #9
 801ecd2:	bf88      	it	hi
 801ecd4:	3a0a      	subhi	r2, #10
 801ecd6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ecda:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801ecdc:	42aa      	cmp	r2, r5
 801ecde:	d0ee      	beq.n	801ecbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801ece0:	2000      	movs	r0, #0
 801ece2:	bd70      	pop	{r4, r5, r6, pc}
 801ece4:	2001      	movs	r0, #1
 801ece6:	e7fc      	b.n	801ece2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801ece8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ece8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecec:	4605      	mov	r5, r0
 801ecee:	4616      	mov	r6, r2
 801ecf0:	1c8c      	adds	r4, r1, #2
 801ecf2:	8809      	ldrh	r1, [r1, #0]
 801ecf4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ecf8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ecfc:	42b3      	cmp	r3, r6
 801ecfe:	d124      	bne.n	801ed4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ed00:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ed04:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ed08:	f001 070f 	and.w	r7, r1, #15
 801ed0c:	4652      	mov	r2, sl
 801ed0e:	f8cd 8000 	str.w	r8, [sp]
 801ed12:	464b      	mov	r3, r9
 801ed14:	4621      	mov	r1, r4
 801ed16:	4628      	mov	r0, r5
 801ed18:	f7ff ffb7 	bl	801ec8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ed1c:	4683      	mov	fp, r0
 801ed1e:	b168      	cbz	r0, 801ed3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ed20:	eb0a 0109 	add.w	r1, sl, r9
 801ed24:	463a      	mov	r2, r7
 801ed26:	4628      	mov	r0, r5
 801ed28:	4441      	add	r1, r8
 801ed2a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ed2e:	4649      	mov	r1, r9
 801ed30:	f7ff ff52 	bl	801ebd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ed34:	4658      	mov	r0, fp
 801ed36:	b003      	add	sp, #12
 801ed38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed3c:	eb07 010a 	add.w	r1, r7, sl
 801ed40:	4449      	add	r1, r9
 801ed42:	4441      	add	r1, r8
 801ed44:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ed48:	e7d2      	b.n	801ecf0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ed4a:	f04f 0b00 	mov.w	fp, #0
 801ed4e:	e7f1      	b.n	801ed34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ed50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ed50:	b570      	push	{r4, r5, r6, lr}
 801ed52:	8810      	ldrh	r0, [r2, #0]
 801ed54:	4298      	cmp	r0, r3
 801ed56:	d817      	bhi.n	801ed88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ed58:	1e48      	subs	r0, r1, #1
 801ed5a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ed5e:	4298      	cmp	r0, r3
 801ed60:	d312      	bcc.n	801ed88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ed62:	2400      	movs	r4, #0
 801ed64:	428c      	cmp	r4, r1
 801ed66:	d20f      	bcs.n	801ed88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ed68:	1860      	adds	r0, r4, r1
 801ed6a:	1040      	asrs	r0, r0, #1
 801ed6c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ed70:	0085      	lsls	r5, r0, #2
 801ed72:	42b3      	cmp	r3, r6
 801ed74:	d902      	bls.n	801ed7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ed76:	3001      	adds	r0, #1
 801ed78:	b284      	uxth	r4, r0
 801ed7a:	e7f3      	b.n	801ed64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ed7c:	d201      	bcs.n	801ed82 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ed7e:	b281      	uxth	r1, r0
 801ed80:	e7f0      	b.n	801ed64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ed82:	442a      	add	r2, r5
 801ed84:	8850      	ldrh	r0, [r2, #2]
 801ed86:	bd70      	pop	{r4, r5, r6, pc}
 801ed88:	2000      	movs	r0, #0
 801ed8a:	e7fc      	b.n	801ed86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ed8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed90:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801ed92:	4604      	mov	r4, r0
 801ed94:	260b      	movs	r6, #11
 801ed96:	886f      	ldrh	r7, [r5, #2]
 801ed98:	087f      	lsrs	r7, r7, #1
 801ed9a:	3e01      	subs	r6, #1
 801ed9c:	d013      	beq.n	801edc6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ed9e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801eda0:	462a      	mov	r2, r5
 801eda2:	4639      	mov	r1, r7
 801eda4:	4620      	mov	r0, r4
 801eda6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801edaa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801edae:	4643      	mov	r3, r8
 801edb0:	f7ff ffce 	bl	801ed50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801edb4:	b138      	cbz	r0, 801edc6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801edb6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801edba:	4642      	mov	r2, r8
 801edbc:	4620      	mov	r0, r4
 801edbe:	f7ff ff93 	bl	801ece8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801edc2:	2800      	cmp	r0, #0
 801edc4:	d1e9      	bne.n	801ed9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801edc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801edcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801edcc:	b570      	push	{r4, r5, r6, lr}
 801edce:	694a      	ldr	r2, [r1, #20]
 801edd0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801edd2:	684b      	ldr	r3, [r1, #4]
 801edd4:	1b54      	subs	r4, r2, r5
 801edd6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801edd8:	f000 8106 	beq.w	801efe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801eddc:	1b9b      	subs	r3, r3, r6
 801edde:	d003      	beq.n	801ede8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ede0:	4363      	muls	r3, r4
 801ede2:	2210      	movs	r2, #16
 801ede4:	fb93 f3f2 	sdiv	r3, r3, r2
 801ede8:	680c      	ldr	r4, [r1, #0]
 801edea:	698a      	ldr	r2, [r1, #24]
 801edec:	1b65      	subs	r5, r4, r5
 801edee:	f000 80fd 	beq.w	801efec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801edf2:	1b92      	subs	r2, r2, r6
 801edf4:	d003      	beq.n	801edfe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801edf6:	436a      	muls	r2, r5
 801edf8:	2410      	movs	r4, #16
 801edfa:	fb92 f2f4 	sdiv	r2, r2, r4
 801edfe:	1a9b      	subs	r3, r3, r2
 801ee00:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801f028 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ee04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee08:	460a      	mov	r2, r1
 801ee0a:	ee07 3a90 	vmov	s15, r3
 801ee0e:	f100 040c 	add.w	r4, r0, #12
 801ee12:	4603      	mov	r3, r0
 801ee14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee18:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ee1c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ee20:	eeb1 6a43 	vneg.f32	s12, s6
 801ee24:	edd2 7a02 	vldr	s15, [r2, #8]
 801ee28:	3214      	adds	r2, #20
 801ee2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ee2e:	ece3 6a01 	vstmia	r3!, {s13}
 801ee32:	429c      	cmp	r4, r3
 801ee34:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ee38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ee3c:	edc3 7a02 	vstr	s15, [r3, #8]
 801ee40:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ee44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ee48:	edc3 7a05 	vstr	s15, [r3, #20]
 801ee4c:	d1ea      	bne.n	801ee24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ee4e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ee50:	698b      	ldr	r3, [r1, #24]
 801ee52:	edd0 4a02 	vldr	s9, [r0, #8]
 801ee56:	1a9b      	subs	r3, r3, r2
 801ee58:	edd0 3a00 	vldr	s7, [r0]
 801ee5c:	edd0 6a01 	vldr	s13, [r0, #4]
 801ee60:	ee07 3a90 	vmov	s15, r3
 801ee64:	684b      	ldr	r3, [r1, #4]
 801ee66:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ee6a:	ed90 5a05 	vldr	s10, [r0, #20]
 801ee6e:	1a9b      	subs	r3, r3, r2
 801ee70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee74:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ee78:	ed90 2a03 	vldr	s4, [r0, #12]
 801ee7c:	ee07 3a10 	vmov	s14, r3
 801ee80:	edd0 5a04 	vldr	s11, [r0, #16]
 801ee84:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ee88:	ed90 1a07 	vldr	s2, [r0, #28]
 801ee8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee90:	edd0 2a06 	vldr	s5, [r0, #24]
 801ee94:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ee98:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ee9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eea0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801eea4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801eea8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801eeac:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801eeb0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801eeb2:	694a      	ldr	r2, [r1, #20]
 801eeb4:	1b13      	subs	r3, r2, r4
 801eeb6:	ee07 3a10 	vmov	s14, r3
 801eeba:	680b      	ldr	r3, [r1, #0]
 801eebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eec0:	1b1b      	subs	r3, r3, r4
 801eec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eec6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801eeca:	ee07 3a10 	vmov	s14, r3
 801eece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eed2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eed6:	eee6 4a87 	vfma.f32	s9, s13, s14
 801eeda:	ee64 4a86 	vmul.f32	s9, s9, s12
 801eede:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801eee2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801eee4:	698b      	ldr	r3, [r1, #24]
 801eee6:	1a9b      	subs	r3, r3, r2
 801eee8:	ee06 3a90 	vmov	s13, r3
 801eeec:	684b      	ldr	r3, [r1, #4]
 801eeee:	1a9b      	subs	r3, r3, r2
 801eef0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801eef4:	ee07 3a10 	vmov	s14, r3
 801eef8:	ee66 6a84 	vmul.f32	s13, s13, s8
 801eefc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef00:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ef04:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ef08:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ef0c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ef10:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801ef14:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ef16:	694a      	ldr	r2, [r1, #20]
 801ef18:	1b13      	subs	r3, r2, r4
 801ef1a:	ee07 3a10 	vmov	s14, r3
 801ef1e:	680b      	ldr	r3, [r1, #0]
 801ef20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef24:	1b1b      	subs	r3, r3, r4
 801ef26:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ef2a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ef2e:	ee07 3a10 	vmov	s14, r3
 801ef32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef36:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ef3a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ef3e:	edd0 5a08 	vldr	s11, [r0, #32]
 801ef42:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ef46:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801ef4a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ef4e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801ef52:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ef54:	698b      	ldr	r3, [r1, #24]
 801ef56:	1a9b      	subs	r3, r3, r2
 801ef58:	ee07 3a10 	vmov	s14, r3
 801ef5c:	684b      	ldr	r3, [r1, #4]
 801ef5e:	1a9b      	subs	r3, r3, r2
 801ef60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef64:	ee01 3a90 	vmov	s3, r3
 801ef68:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ef6c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ef70:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ef74:	ee61 1a84 	vmul.f32	s3, s3, s8
 801ef78:	eea1 7a21 	vfma.f32	s14, s2, s3
 801ef7c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801ef80:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801ef84:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ef86:	694a      	ldr	r2, [r1, #20]
 801ef88:	1b13      	subs	r3, r2, r4
 801ef8a:	ee03 3a10 	vmov	s6, r3
 801ef8e:	680b      	ldr	r3, [r1, #0]
 801ef90:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ef94:	1b1b      	subs	r3, r3, r4
 801ef96:	ee23 3a04 	vmul.f32	s6, s6, s8
 801ef9a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801ef9e:	ee03 3a10 	vmov	s6, r3
 801efa2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801efa6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801efaa:	eee1 5a04 	vfma.f32	s11, s2, s8
 801efae:	ee25 6a86 	vmul.f32	s12, s11, s12
 801efb2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801efb6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801efba:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801efbe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efc6:	dd13      	ble.n	801eff0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801efc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801efcc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801efd0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801efd2:	eee3 7a87 	vfma.f32	s15, s7, s14
 801efd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efde:	dd15      	ble.n	801f00c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801efe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801efe4:	6403      	str	r3, [r0, #64]	@ 0x40
 801efe6:	bd70      	pop	{r4, r5, r6, pc}
 801efe8:	4623      	mov	r3, r4
 801efea:	e6fd      	b.n	801ede8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801efec:	462a      	mov	r2, r5
 801efee:	e706      	b.n	801edfe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801eff0:	d502      	bpl.n	801eff8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801eff2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801eff6:	e7e9      	b.n	801efcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801eff8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801effc:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f000:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f008:	dade      	bge.n	801efc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f00a:	e7f2      	b.n	801eff2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f00c:	d502      	bpl.n	801f014 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f00e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801f012:	e7e7      	b.n	801efe4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f014:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f018:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f01c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f024:	dadc      	bge.n	801efe0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f026:	e7f2      	b.n	801f00e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f028:	3d800000 	.word	0x3d800000

0801f02c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f030:	2714      	movs	r7, #20
 801f032:	435f      	muls	r7, r3
 801f034:	eb02 0c07 	add.w	ip, r2, r7
 801f038:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f03c:	f115 0e0f 	adds.w	lr, r5, #15
 801f040:	f100 80a2 	bmi.w	801f188 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f044:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801f048:	9c08      	ldr	r4, [sp, #32]
 801f04a:	2614      	movs	r6, #20
 801f04c:	f8c0 e014 	str.w	lr, [r0, #20]
 801f050:	4366      	muls	r6, r4
 801f052:	eb02 0806 	add.w	r8, r2, r6
 801f056:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f05a:	f115 040f 	adds.w	r4, r5, #15
 801f05e:	f100 809f 	bmi.w	801f1a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801f062:	1124      	asrs	r4, r4, #4
 801f064:	eba4 040e 	sub.w	r4, r4, lr
 801f068:	6184      	str	r4, [r0, #24]
 801f06a:	2c00      	cmp	r4, #0
 801f06c:	f000 808a 	beq.w	801f184 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801f070:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801f074:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801f078:	5995      	ldr	r5, [r2, r6]
 801f07a:	eba4 0809 	sub.w	r8, r4, r9
 801f07e:	59d4      	ldr	r4, [r2, r7]
 801f080:	eba5 0a04 	sub.w	sl, r5, r4
 801f084:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801f088:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801f08c:	fb0e fe05 	mul.w	lr, lr, r5
 801f090:	fb0a ee19 	mls	lr, sl, r9, lr
 801f094:	fb08 e404 	mla	r4, r8, r4, lr
 801f098:	3c01      	subs	r4, #1
 801f09a:	19a4      	adds	r4, r4, r6
 801f09c:	f100 808c 	bmi.w	801f1b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801f0a0:	fb94 fef6 	sdiv	lr, r4, r6
 801f0a4:	fb06 441e 	mls	r4, r6, lr, r4
 801f0a8:	f8c0 e000 	str.w	lr, [r0]
 801f0ac:	6104      	str	r4, [r0, #16]
 801f0ae:	2d00      	cmp	r5, #0
 801f0b0:	f2c0 8095 	blt.w	801f1de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801f0b4:	fb95 f4f6 	sdiv	r4, r5, r6
 801f0b8:	fb06 5514 	mls	r5, r6, r4, r5
 801f0bc:	6044      	str	r4, [r0, #4]
 801f0be:	6085      	str	r5, [r0, #8]
 801f0c0:	60c6      	str	r6, [r0, #12]
 801f0c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f0c6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f0ca:	6945      	ldr	r5, [r0, #20]
 801f0cc:	59d2      	ldr	r2, [r2, r7]
 801f0ce:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801f0d2:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801f200 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801f0d6:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801f0da:	ee07 4a10 	vmov	s14, r4
 801f0de:	6804      	ldr	r4, [r0, #0]
 801f0e0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801f0e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f0e8:	ee07 2a90 	vmov	s15, r2
 801f0ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f0f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f0f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f0f8:	edd3 6a00 	vldr	s13, [r3]
 801f0fc:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f100:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801f104:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f108:	edc0 6a07 	vstr	s13, [r0, #28]
 801f10c:	edd0 6a01 	vldr	s13, [r0, #4]
 801f110:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801f114:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f118:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801f11c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f120:	ed80 6a08 	vstr	s12, [r0, #32]
 801f124:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801f126:	6242      	str	r2, [r0, #36]	@ 0x24
 801f128:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801f12c:	ed93 6a03 	vldr	s12, [r3, #12]
 801f130:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f134:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801f138:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f13c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801f140:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801f144:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801f148:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f14c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801f150:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f152:	6302      	str	r2, [r0, #48]	@ 0x30
 801f154:	ed93 6a06 	vldr	s12, [r3, #24]
 801f158:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801f15c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f160:	eeb0 7a46 	vmov.f32	s14, s12
 801f164:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801f168:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f16c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801f170:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801f174:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801f178:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f17c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801f180:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801f182:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801f184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f188:	2410      	movs	r4, #16
 801f18a:	f1c5 0501 	rsb	r5, r5, #1
 801f18e:	fb9e fef4 	sdiv	lr, lr, r4
 801f192:	f015 050f 	ands.w	r5, r5, #15
 801f196:	bf18      	it	ne
 801f198:	2501      	movne	r5, #1
 801f19a:	ebae 0e05 	sub.w	lr, lr, r5
 801f19e:	e753      	b.n	801f048 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801f1a0:	f04f 0910 	mov.w	r9, #16
 801f1a4:	f1c5 0501 	rsb	r5, r5, #1
 801f1a8:	fb94 f4f9 	sdiv	r4, r4, r9
 801f1ac:	f015 050f 	ands.w	r5, r5, #15
 801f1b0:	bf18      	it	ne
 801f1b2:	2501      	movne	r5, #1
 801f1b4:	1b64      	subs	r4, r4, r5
 801f1b6:	e755      	b.n	801f064 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801f1b8:	4264      	negs	r4, r4
 801f1ba:	fb94 fef6 	sdiv	lr, r4, r6
 801f1be:	f1ce 0800 	rsb	r8, lr, #0
 801f1c2:	fb06 441e 	mls	r4, r6, lr, r4
 801f1c6:	f8c0 8000 	str.w	r8, [r0]
 801f1ca:	6104      	str	r4, [r0, #16]
 801f1cc:	2c00      	cmp	r4, #0
 801f1ce:	f43f af6e 	beq.w	801f0ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801f1d2:	ea6f 0e0e 	mvn.w	lr, lr
 801f1d6:	1b34      	subs	r4, r6, r4
 801f1d8:	f8c0 e000 	str.w	lr, [r0]
 801f1dc:	e766      	b.n	801f0ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801f1de:	426d      	negs	r5, r5
 801f1e0:	fb95 f4f6 	sdiv	r4, r5, r6
 801f1e4:	f1c4 0e00 	rsb	lr, r4, #0
 801f1e8:	fb06 5514 	mls	r5, r6, r4, r5
 801f1ec:	f8c0 e004 	str.w	lr, [r0, #4]
 801f1f0:	6085      	str	r5, [r0, #8]
 801f1f2:	2d00      	cmp	r5, #0
 801f1f4:	f43f af64 	beq.w	801f0c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801f1f8:	43e4      	mvns	r4, r4
 801f1fa:	1b75      	subs	r5, r6, r5
 801f1fc:	6044      	str	r4, [r0, #4]
 801f1fe:	e75e      	b.n	801f0be <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801f200:	3d800000 	.word	0x3d800000

0801f204 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f204:	4b01      	ldr	r3, [pc, #4]	@ (801f20c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f206:	6018      	str	r0, [r3, #0]
 801f208:	4770      	bx	lr
 801f20a:	bf00      	nop
 801f20c:	24015cb0 	.word	0x24015cb0

0801f210 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f210:	4b06      	ldr	r3, [pc, #24]	@ (801f22c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f212:	881a      	ldrh	r2, [r3, #0]
 801f214:	4282      	cmp	r2, r0
 801f216:	d807      	bhi.n	801f228 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f218:	4b05      	ldr	r3, [pc, #20]	@ (801f230 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f21a:	881b      	ldrh	r3, [r3, #0]
 801f21c:	4413      	add	r3, r2
 801f21e:	4298      	cmp	r0, r3
 801f220:	bfac      	ite	ge
 801f222:	2000      	movge	r0, #0
 801f224:	2001      	movlt	r0, #1
 801f226:	4770      	bx	lr
 801f228:	2000      	movs	r0, #0
 801f22a:	4770      	bx	lr
 801f22c:	24015cd0 	.word	0x24015cd0
 801f230:	24015cd4 	.word	0x24015cd4

0801f234 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f234:	b508      	push	{r3, lr}
 801f236:	4601      	mov	r1, r0
 801f238:	f7ff ffea 	bl	801f210 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f23c:	b118      	cbz	r0, 801f246 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f23e:	4b02      	ldr	r3, [pc, #8]	@ (801f248 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f246:	bd08      	pop	{r3, pc}
 801f248:	24015cb4 	.word	0x24015cb4

0801f24c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801f24c:	b538      	push	{r3, r4, r5, lr}
 801f24e:	4604      	mov	r4, r0
 801f250:	f7ff ffde 	bl	801f210 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f254:	b188      	cbz	r0, 801f27a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801f256:	4b09      	ldr	r3, [pc, #36]	@ (801f27c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801f258:	881a      	ldrh	r2, [r3, #0]
 801f25a:	4b09      	ldr	r3, [pc, #36]	@ (801f280 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801f25c:	1aa4      	subs	r4, r4, r2
 801f25e:	220e      	movs	r2, #14
 801f260:	681d      	ldr	r5, [r3, #0]
 801f262:	4362      	muls	r2, r4
 801f264:	18ac      	adds	r4, r5, r2
 801f266:	7b23      	ldrb	r3, [r4, #12]
 801f268:	f013 0320 	ands.w	r3, r3, #32
 801f26c:	bf17      	itett	ne
 801f26e:	680b      	ldrne	r3, [r1, #0]
 801f270:	4618      	moveq	r0, r3
 801f272:	50ab      	strne	r3, [r5, r2]
 801f274:	684b      	ldrne	r3, [r1, #4]
 801f276:	bf18      	it	ne
 801f278:	6063      	strne	r3, [r4, #4]
 801f27a:	bd38      	pop	{r3, r4, r5, pc}
 801f27c:	24015cd0 	.word	0x24015cd0
 801f280:	24015cb8 	.word	0x24015cb8

0801f284 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801f284:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f288:	4606      	mov	r6, r0
 801f28a:	460c      	mov	r4, r1
 801f28c:	f7ff ffc0 	bl	801f210 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f290:	b918      	cbnz	r0, 801f29a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801f292:	2000      	movs	r0, #0
 801f294:	b002      	add	sp, #8
 801f296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f29a:	4608      	mov	r0, r1
 801f29c:	f7f8 fd77 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2a0:	2800      	cmp	r0, #0
 801f2a2:	d1f6      	bne.n	801f292 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f2a4:	4b3f      	ldr	r3, [pc, #252]	@ (801f3a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801f2a6:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801f3a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801f2aa:	881d      	ldrh	r5, [r3, #0]
 801f2ac:	f8d9 a000 	ldr.w	sl, [r9]
 801f2b0:	46c8      	mov	r8, r9
 801f2b2:	1b73      	subs	r3, r6, r5
 801f2b4:	250e      	movs	r5, #14
 801f2b6:	435d      	muls	r5, r3
 801f2b8:	eb0a 0705 	add.w	r7, sl, r5
 801f2bc:	7b3b      	ldrb	r3, [r7, #12]
 801f2be:	f013 0f20 	tst.w	r3, #32
 801f2c2:	d0e6      	beq.n	801f292 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f2c4:	4621      	mov	r1, r4
 801f2c6:	4638      	mov	r0, r7
 801f2c8:	f7fd f838 	bl	801c33c <_ZNK8touchgfx4Rect8includesERKS0_>
 801f2cc:	2800      	cmp	r0, #0
 801f2ce:	d1e1      	bne.n	801f294 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f2d0:	4639      	mov	r1, r7
 801f2d2:	4620      	mov	r0, r4
 801f2d4:	f7fd f832 	bl	801c33c <_ZNK8touchgfx4Rect8includesERKS0_>
 801f2d8:	b108      	cbz	r0, 801f2de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801f2da:	4621      	mov	r1, r4
 801f2dc:	e020      	b.n	801f320 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801f2de:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f2e2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801f2e6:	429a      	cmp	r2, r3
 801f2e8:	d11e      	bne.n	801f328 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f2ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f2ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f2f2:	429a      	cmp	r2, r3
 801f2f4:	d118      	bne.n	801f328 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f2f6:	6820      	ldr	r0, [r4, #0]
 801f2f8:	466b      	mov	r3, sp
 801f2fa:	6861      	ldr	r1, [r4, #4]
 801f2fc:	c303      	stmia	r3!, {r0, r1}
 801f2fe:	4639      	mov	r1, r7
 801f300:	4668      	mov	r0, sp
 801f302:	f7fd f841 	bl	801c388 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f306:	f8d9 3000 	ldr.w	r3, [r9]
 801f30a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f30e:	442b      	add	r3, r5
 801f310:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f314:	4413      	add	r3, r2
 801f316:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f31a:	4293      	cmp	r3, r2
 801f31c:	dc04      	bgt.n	801f328 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f31e:	4669      	mov	r1, sp
 801f320:	4630      	mov	r0, r6
 801f322:	f7ff ff93 	bl	801f24c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801f326:	e7b5      	b.n	801f294 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f328:	f8d8 3000 	ldr.w	r3, [r8]
 801f32c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f330:	442b      	add	r3, r5
 801f332:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f336:	4291      	cmp	r1, r2
 801f338:	d119      	bne.n	801f36e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f33a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f33e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f342:	4291      	cmp	r1, r2
 801f344:	d113      	bne.n	801f36e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f346:	6820      	ldr	r0, [r4, #0]
 801f348:	466a      	mov	r2, sp
 801f34a:	6861      	ldr	r1, [r4, #4]
 801f34c:	c203      	stmia	r2!, {r0, r1}
 801f34e:	4619      	mov	r1, r3
 801f350:	4668      	mov	r0, sp
 801f352:	f7fd f819 	bl	801c388 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f356:	f8d8 3000 	ldr.w	r3, [r8]
 801f35a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f35e:	442b      	add	r3, r5
 801f360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f364:	4413      	add	r3, r2
 801f366:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f36a:	4293      	cmp	r3, r2
 801f36c:	ddd7      	ble.n	801f31e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801f36e:	4620      	mov	r0, r4
 801f370:	f7f8 fd0d 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f374:	b990      	cbnz	r0, 801f39c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801f376:	88a7      	ldrh	r7, [r4, #4]
 801f378:	88e3      	ldrh	r3, [r4, #6]
 801f37a:	fb17 f703 	smulbb	r7, r7, r3
 801f37e:	f8d8 3000 	ldr.w	r3, [r8]
 801f382:	441d      	add	r5, r3
 801f384:	4628      	mov	r0, r5
 801f386:	f7f8 fd02 	bl	8017d8e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f38a:	b948      	cbnz	r0, 801f3a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801f38c:	88ab      	ldrh	r3, [r5, #4]
 801f38e:	88ea      	ldrh	r2, [r5, #6]
 801f390:	fb13 f302 	smulbb	r3, r3, r2
 801f394:	42bb      	cmp	r3, r7
 801f396:	f6bf af7c 	bge.w	801f292 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f39a:	e79e      	b.n	801f2da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801f39c:	2700      	movs	r7, #0
 801f39e:	e7ee      	b.n	801f37e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	e7f7      	b.n	801f394 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801f3a4:	24015cd0 	.word	0x24015cd0
 801f3a8:	24015cb8 	.word	0x24015cb8

0801f3ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3ae:	4c24      	ldr	r4, [pc, #144]	@ (801f440 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f3b0:	6823      	ldr	r3, [r4, #0]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d042      	beq.n	801f43c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f3b6:	4a23      	ldr	r2, [pc, #140]	@ (801f444 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f3b8:	4d23      	ldr	r5, [pc, #140]	@ (801f448 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f3ba:	8811      	ldrh	r1, [r2, #0]
 801f3bc:	f8b5 c000 	ldrh.w	ip, [r5]
 801f3c0:	4822      	ldr	r0, [pc, #136]	@ (801f44c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f3c2:	4461      	add	r1, ip
 801f3c4:	1c4a      	adds	r2, r1, #1
 801f3c6:	008f      	lsls	r7, r1, #2
 801f3c8:	f022 0201 	bic.w	r2, r2, #1
 801f3cc:	19de      	adds	r6, r3, r7
 801f3ce:	0412      	lsls	r2, r2, #16
 801f3d0:	6006      	str	r6, [r0, #0]
 801f3d2:	4e1f      	ldr	r6, [pc, #124]	@ (801f450 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f3d4:	0c12      	lsrs	r2, r2, #16
 801f3d6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f3da:	19da      	adds	r2, r3, r7
 801f3dc:	6032      	str	r2, [r6, #0]
 801f3de:	220e      	movs	r2, #14
 801f3e0:	fb02 f20c 	mul.w	r2, r2, ip
 801f3e4:	3203      	adds	r2, #3
 801f3e6:	f022 0203 	bic.w	r2, r2, #3
 801f3ea:	443a      	add	r2, r7
 801f3ec:	4f19      	ldr	r7, [pc, #100]	@ (801f454 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f3ee:	4413      	add	r3, r2
 801f3f0:	603b      	str	r3, [r7, #0]
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	4f18      	ldr	r7, [pc, #96]	@ (801f458 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f3f6:	469c      	mov	ip, r3
 801f3f8:	803b      	strh	r3, [r7, #0]
 801f3fa:	4f18      	ldr	r7, [pc, #96]	@ (801f45c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f3fc:	683f      	ldr	r7, [r7, #0]
 801f3fe:	1aba      	subs	r2, r7, r2
 801f400:	4f17      	ldr	r7, [pc, #92]	@ (801f460 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f402:	603a      	str	r2, [r7, #0]
 801f404:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801f408:	4a16      	ldr	r2, [pc, #88]	@ (801f464 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f40a:	8013      	strh	r3, [r2, #0]
 801f40c:	428b      	cmp	r3, r1
 801f40e:	d10d      	bne.n	801f42c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f410:	882d      	ldrh	r5, [r5, #0]
 801f412:	2300      	movs	r3, #0
 801f414:	6830      	ldr	r0, [r6, #0]
 801f416:	240e      	movs	r4, #14
 801f418:	429d      	cmp	r5, r3
 801f41a:	d90f      	bls.n	801f43c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f41c:	fb04 0203 	mla	r2, r4, r3, r0
 801f420:	3301      	adds	r3, #1
 801f422:	7b11      	ldrb	r1, [r2, #12]
 801f424:	f36f 1145 	bfc	r1, #5, #1
 801f428:	7311      	strb	r1, [r2, #12]
 801f42a:	e7f5      	b.n	801f418 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801f42c:	6822      	ldr	r2, [r4, #0]
 801f42e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f432:	6802      	ldr	r2, [r0, #0]
 801f434:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801f438:	3301      	adds	r3, #1
 801f43a:	e7e7      	b.n	801f40c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801f43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f43e:	bf00      	nop
 801f440:	24015cb4 	.word	0x24015cb4
 801f444:	24015cd0 	.word	0x24015cd0
 801f448:	24015cd4 	.word	0x24015cd4
 801f44c:	24015cc8 	.word	0x24015cc8
 801f450:	24015cb8 	.word	0x24015cb8
 801f454:	24015cc0 	.word	0x24015cc0
 801f458:	24015cd2 	.word	0x24015cd2
 801f45c:	24015cbc 	.word	0x24015cbc
 801f460:	24015ccc 	.word	0x24015ccc
 801f464:	24015cc4 	.word	0x24015cc4

0801f468 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f468:	4b06      	ldr	r3, [pc, #24]	@ (801f484 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	b943      	cbnz	r3, 801f480 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f46e:	b139      	cbz	r1, 801f480 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f470:	4b05      	ldr	r3, [pc, #20]	@ (801f488 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801f472:	801a      	strh	r2, [r3, #0]
 801f474:	4b05      	ldr	r3, [pc, #20]	@ (801f48c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801f476:	6019      	str	r1, [r3, #0]
 801f478:	4b05      	ldr	r3, [pc, #20]	@ (801f490 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801f47a:	6018      	str	r0, [r3, #0]
 801f47c:	f7ff bf96 	b.w	801f3ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f480:	4770      	bx	lr
 801f482:	bf00      	nop
 801f484:	24015cc0 	.word	0x24015cc0
 801f488:	24015cd4 	.word	0x24015cd4
 801f48c:	24015cbc 	.word	0x24015cbc
 801f490:	24015cb4 	.word	0x24015cb4

0801f494 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f494:	b470      	push	{r4, r5, r6}
 801f496:	4c07      	ldr	r4, [pc, #28]	@ (801f4b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f498:	4605      	mov	r5, r0
 801f49a:	4610      	mov	r0, r2
 801f49c:	9a03      	ldr	r2, [sp, #12]
 801f49e:	6826      	ldr	r6, [r4, #0]
 801f4a0:	b936      	cbnz	r6, 801f4b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f4a2:	6025      	str	r5, [r4, #0]
 801f4a4:	4c04      	ldr	r4, [pc, #16]	@ (801f4b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f4a6:	8021      	strh	r1, [r4, #0]
 801f4a8:	4619      	mov	r1, r3
 801f4aa:	bc70      	pop	{r4, r5, r6}
 801f4ac:	f7ff bfdc 	b.w	801f468 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f4b0:	bc70      	pop	{r4, r5, r6}
 801f4b2:	4770      	bx	lr
 801f4b4:	24015cd8 	.word	0x24015cd8
 801f4b8:	24015cd0 	.word	0x24015cd0

0801f4bc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f4bc:	4a12      	ldr	r2, [pc, #72]	@ (801f508 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801f4be:	8803      	ldrh	r3, [r0, #0]
 801f4c0:	8812      	ldrh	r2, [r2, #0]
 801f4c2:	4293      	cmp	r3, r2
 801f4c4:	d207      	bcs.n	801f4d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801f4c6:	4a11      	ldr	r2, [pc, #68]	@ (801f50c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801f4c8:	2114      	movs	r1, #20
 801f4ca:	6812      	ldr	r2, [r2, #0]
 801f4cc:	fb01 2303 	mla	r3, r1, r3, r2
 801f4d0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801f4d4:	4770      	bx	lr
 801f4d6:	490e      	ldr	r1, [pc, #56]	@ (801f510 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f4d8:	8809      	ldrh	r1, [r1, #0]
 801f4da:	4411      	add	r1, r2
 801f4dc:	428b      	cmp	r3, r1
 801f4de:	da04      	bge.n	801f4ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801f4e0:	1a9b      	subs	r3, r3, r2
 801f4e2:	4a0c      	ldr	r2, [pc, #48]	@ (801f514 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f4e4:	210e      	movs	r1, #14
 801f4e6:	6812      	ldr	r2, [r2, #0]
 801f4e8:	e7f0      	b.n	801f4cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801f4ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f4ee:	4293      	cmp	r3, r2
 801f4f0:	d108      	bne.n	801f504 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801f4f2:	4b09      	ldr	r3, [pc, #36]	@ (801f518 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f4f4:	781b      	ldrb	r3, [r3, #0]
 801f4f6:	b91b      	cbnz	r3, 801f500 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801f4f8:	4b08      	ldr	r3, [pc, #32]	@ (801f51c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f4fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f4fe:	4770      	bx	lr
 801f500:	4b07      	ldr	r3, [pc, #28]	@ (801f520 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f502:	e7fa      	b.n	801f4fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801f504:	2000      	movs	r0, #0
 801f506:	4770      	bx	lr
 801f508:	24015cd0 	.word	0x24015cd0
 801f50c:	24015cd8 	.word	0x24015cd8
 801f510:	24015cd4 	.word	0x24015cd4
 801f514:	24015cb8 	.word	0x24015cb8
 801f518:	24015c40 	.word	0x24015c40
 801f51c:	24015c42 	.word	0x24015c42
 801f520:	24015c44 	.word	0x24015c44

0801f524 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f524:	4a12      	ldr	r2, [pc, #72]	@ (801f570 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801f526:	8803      	ldrh	r3, [r0, #0]
 801f528:	8812      	ldrh	r2, [r2, #0]
 801f52a:	4293      	cmp	r3, r2
 801f52c:	d207      	bcs.n	801f53e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801f52e:	4a11      	ldr	r2, [pc, #68]	@ (801f574 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801f530:	2114      	movs	r1, #20
 801f532:	6812      	ldr	r2, [r2, #0]
 801f534:	fb01 2303 	mla	r3, r1, r3, r2
 801f538:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801f53c:	4770      	bx	lr
 801f53e:	490e      	ldr	r1, [pc, #56]	@ (801f578 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f540:	8809      	ldrh	r1, [r1, #0]
 801f542:	4411      	add	r1, r2
 801f544:	428b      	cmp	r3, r1
 801f546:	da04      	bge.n	801f552 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801f548:	1a9b      	subs	r3, r3, r2
 801f54a:	4a0c      	ldr	r2, [pc, #48]	@ (801f57c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f54c:	210e      	movs	r1, #14
 801f54e:	6812      	ldr	r2, [r2, #0]
 801f550:	e7f0      	b.n	801f534 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801f552:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f556:	4293      	cmp	r3, r2
 801f558:	d108      	bne.n	801f56c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801f55a:	4b09      	ldr	r3, [pc, #36]	@ (801f580 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f55c:	781b      	ldrb	r3, [r3, #0]
 801f55e:	b91b      	cbnz	r3, 801f568 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801f560:	4b08      	ldr	r3, [pc, #32]	@ (801f584 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f562:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f566:	4770      	bx	lr
 801f568:	4b07      	ldr	r3, [pc, #28]	@ (801f588 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f56a:	e7fa      	b.n	801f562 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801f56c:	2000      	movs	r0, #0
 801f56e:	4770      	bx	lr
 801f570:	24015cd0 	.word	0x24015cd0
 801f574:	24015cd8 	.word	0x24015cd8
 801f578:	24015cd4 	.word	0x24015cd4
 801f57c:	24015cb8 	.word	0x24015cb8
 801f580:	24015c40 	.word	0x24015c40
 801f584:	24015c44 	.word	0x24015c44
 801f588:	24015c42 	.word	0x24015c42

0801f58c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f58c:	4a1f      	ldr	r2, [pc, #124]	@ (801f60c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801f58e:	b510      	push	{r4, lr}
 801f590:	880b      	ldrh	r3, [r1, #0]
 801f592:	8812      	ldrh	r2, [r2, #0]
 801f594:	4293      	cmp	r3, r2
 801f596:	d213      	bcs.n	801f5c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801f598:	4a1d      	ldr	r2, [pc, #116]	@ (801f610 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801f59a:	2114      	movs	r1, #20
 801f59c:	6812      	ldr	r2, [r2, #0]
 801f59e:	fb01 2303 	mla	r3, r1, r3, r2
 801f5a2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f5a6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f5aa:	8a1a      	ldrh	r2, [r3, #16]
 801f5ac:	8a5b      	ldrh	r3, [r3, #18]
 801f5ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f5b2:	8004      	strh	r4, [r0, #0]
 801f5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f5b8:	8041      	strh	r1, [r0, #2]
 801f5ba:	8082      	strh	r2, [r0, #4]
 801f5bc:	80c3      	strh	r3, [r0, #6]
 801f5be:	e00e      	b.n	801f5de <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f5c0:	4914      	ldr	r1, [pc, #80]	@ (801f614 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801f5c2:	8809      	ldrh	r1, [r1, #0]
 801f5c4:	4411      	add	r1, r2
 801f5c6:	428b      	cmp	r3, r1
 801f5c8:	da0a      	bge.n	801f5e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801f5ca:	1a9b      	subs	r3, r3, r2
 801f5cc:	4a12      	ldr	r2, [pc, #72]	@ (801f618 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801f5ce:	210e      	movs	r1, #14
 801f5d0:	6812      	ldr	r2, [r2, #0]
 801f5d2:	fb01 2303 	mla	r3, r1, r3, r2
 801f5d6:	681a      	ldr	r2, [r3, #0]
 801f5d8:	6002      	str	r2, [r0, #0]
 801f5da:	685a      	ldr	r2, [r3, #4]
 801f5dc:	6042      	str	r2, [r0, #4]
 801f5de:	bd10      	pop	{r4, pc}
 801f5e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f5e4:	4293      	cmp	r3, r2
 801f5e6:	d10b      	bne.n	801f600 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801f5e8:	4b0c      	ldr	r3, [pc, #48]	@ (801f61c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f5ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f5ee:	4b0c      	ldr	r3, [pc, #48]	@ (801f620 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f5f0:	8081      	strh	r1, [r0, #4]
 801f5f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f5f6:	2300      	movs	r3, #0
 801f5f8:	80c2      	strh	r2, [r0, #6]
 801f5fa:	8003      	strh	r3, [r0, #0]
 801f5fc:	8043      	strh	r3, [r0, #2]
 801f5fe:	e7ee      	b.n	801f5de <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f600:	2300      	movs	r3, #0
 801f602:	8003      	strh	r3, [r0, #0]
 801f604:	8043      	strh	r3, [r0, #2]
 801f606:	8083      	strh	r3, [r0, #4]
 801f608:	e7d8      	b.n	801f5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801f60a:	bf00      	nop
 801f60c:	24015cd0 	.word	0x24015cd0
 801f610:	24015cd8 	.word	0x24015cd8
 801f614:	24015cd4 	.word	0x24015cd4
 801f618:	24015cb8 	.word	0x24015cb8
 801f61c:	24015c3c 	.word	0x24015c3c
 801f620:	24015c3e 	.word	0x24015c3e

0801f624 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f624:	4a12      	ldr	r2, [pc, #72]	@ (801f670 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f626:	8803      	ldrh	r3, [r0, #0]
 801f628:	8811      	ldrh	r1, [r2, #0]
 801f62a:	428b      	cmp	r3, r1
 801f62c:	d20b      	bcs.n	801f646 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801f62e:	4a11      	ldr	r2, [pc, #68]	@ (801f674 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f630:	6812      	ldr	r2, [r2, #0]
 801f632:	b112      	cbz	r2, 801f63a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801f634:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f638:	b9c0      	cbnz	r0, 801f66c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801f63a:	4a0f      	ldr	r2, [pc, #60]	@ (801f678 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801f63c:	6811      	ldr	r1, [r2, #0]
 801f63e:	2214      	movs	r2, #20
 801f640:	4353      	muls	r3, r2
 801f642:	58c8      	ldr	r0, [r1, r3]
 801f644:	4770      	bx	lr
 801f646:	4a0d      	ldr	r2, [pc, #52]	@ (801f67c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801f648:	8812      	ldrh	r2, [r2, #0]
 801f64a:	440a      	add	r2, r1
 801f64c:	4293      	cmp	r3, r2
 801f64e:	da04      	bge.n	801f65a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801f650:	4a08      	ldr	r2, [pc, #32]	@ (801f674 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f652:	6812      	ldr	r2, [r2, #0]
 801f654:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f658:	4770      	bx	lr
 801f65a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f65e:	4293      	cmp	r3, r2
 801f660:	d103      	bne.n	801f66a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801f662:	4b07      	ldr	r3, [pc, #28]	@ (801f680 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801f668:	4770      	bx	lr
 801f66a:	2000      	movs	r0, #0
 801f66c:	4770      	bx	lr
 801f66e:	bf00      	nop
 801f670:	24015cd0 	.word	0x24015cd0
 801f674:	24015cb4 	.word	0x24015cb4
 801f678:	24015cd8 	.word	0x24015cd8
 801f67c:	24015cd4 	.word	0x24015cd4
 801f680:	24015c48 	.word	0x24015c48

0801f684 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f684:	4b24      	ldr	r3, [pc, #144]	@ (801f718 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801f686:	8802      	ldrh	r2, [r0, #0]
 801f688:	8818      	ldrh	r0, [r3, #0]
 801f68a:	4282      	cmp	r2, r0
 801f68c:	d221      	bcs.n	801f6d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801f68e:	4b23      	ldr	r3, [pc, #140]	@ (801f71c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801f690:	6819      	ldr	r1, [r3, #0]
 801f692:	2314      	movs	r3, #20
 801f694:	fb03 1302 	mla	r3, r3, r2, r1
 801f698:	6858      	ldr	r0, [r3, #4]
 801f69a:	2800      	cmp	r0, #0
 801f69c:	d03a      	beq.n	801f714 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f69e:	4920      	ldr	r1, [pc, #128]	@ (801f720 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f6a0:	6809      	ldr	r1, [r1, #0]
 801f6a2:	2900      	cmp	r1, #0
 801f6a4:	d036      	beq.n	801f714 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f6a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f6aa:	2900      	cmp	r1, #0
 801f6ac:	d032      	beq.n	801f714 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f6ae:	891a      	ldrh	r2, [r3, #8]
 801f6b0:	8958      	ldrh	r0, [r3, #10]
 801f6b2:	4350      	muls	r0, r2
 801f6b4:	7c5a      	ldrb	r2, [r3, #17]
 801f6b6:	7cdb      	ldrb	r3, [r3, #19]
 801f6b8:	0952      	lsrs	r2, r2, #5
 801f6ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f6be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f6c2:	2b0b      	cmp	r3, #11
 801f6c4:	bf18      	it	ne
 801f6c6:	0040      	lslne	r0, r0, #1
 801f6c8:	3003      	adds	r0, #3
 801f6ca:	f020 0003 	bic.w	r0, r0, #3
 801f6ce:	4408      	add	r0, r1
 801f6d0:	4770      	bx	lr
 801f6d2:	4b14      	ldr	r3, [pc, #80]	@ (801f724 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f6d4:	881b      	ldrh	r3, [r3, #0]
 801f6d6:	4403      	add	r3, r0
 801f6d8:	429a      	cmp	r2, r3
 801f6da:	da1a      	bge.n	801f712 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f6dc:	4b12      	ldr	r3, [pc, #72]	@ (801f728 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f6de:	1a10      	subs	r0, r2, r0
 801f6e0:	210e      	movs	r1, #14
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	fb01 3000 	mla	r0, r1, r0, r3
 801f6e8:	7b03      	ldrb	r3, [r0, #12]
 801f6ea:	f003 031f 	and.w	r3, r3, #31
 801f6ee:	2b0b      	cmp	r3, #11
 801f6f0:	d10b      	bne.n	801f70a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f6f2:	8903      	ldrh	r3, [r0, #8]
 801f6f4:	8940      	ldrh	r0, [r0, #10]
 801f6f6:	4358      	muls	r0, r3
 801f6f8:	4b09      	ldr	r3, [pc, #36]	@ (801f720 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f6fa:	3003      	adds	r0, #3
 801f6fc:	6819      	ldr	r1, [r3, #0]
 801f6fe:	f020 0303 	bic.w	r3, r0, #3
 801f702:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f706:	4418      	add	r0, r3
 801f708:	4770      	bx	lr
 801f70a:	2b0d      	cmp	r3, #13
 801f70c:	d101      	bne.n	801f712 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f70e:	300d      	adds	r0, #13
 801f710:	4770      	bx	lr
 801f712:	2000      	movs	r0, #0
 801f714:	4770      	bx	lr
 801f716:	bf00      	nop
 801f718:	24015cd0 	.word	0x24015cd0
 801f71c:	24015cd8 	.word	0x24015cd8
 801f720:	24015cb4 	.word	0x24015cb4
 801f724:	24015cd4 	.word	0x24015cd4
 801f728:	24015cb8 	.word	0x24015cb8

0801f72c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f72c:	4a17      	ldr	r2, [pc, #92]	@ (801f78c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f72e:	b510      	push	{r4, lr}
 801f730:	8803      	ldrh	r3, [r0, #0]
 801f732:	8812      	ldrh	r2, [r2, #0]
 801f734:	4293      	cmp	r3, r2
 801f736:	d20c      	bcs.n	801f752 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f738:	4a15      	ldr	r2, [pc, #84]	@ (801f790 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f73a:	2114      	movs	r1, #20
 801f73c:	6812      	ldr	r2, [r2, #0]
 801f73e:	fb01 2303 	mla	r3, r1, r3, r2
 801f742:	7c58      	ldrb	r0, [r3, #17]
 801f744:	0942      	lsrs	r2, r0, #5
 801f746:	7cd8      	ldrb	r0, [r3, #19]
 801f748:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f74c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f750:	bd10      	pop	{r4, pc}
 801f752:	4910      	ldr	r1, [pc, #64]	@ (801f794 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f754:	8809      	ldrh	r1, [r1, #0]
 801f756:	4411      	add	r1, r2
 801f758:	428b      	cmp	r3, r1
 801f75a:	da09      	bge.n	801f770 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801f75c:	1a9b      	subs	r3, r3, r2
 801f75e:	4a0e      	ldr	r2, [pc, #56]	@ (801f798 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f760:	210e      	movs	r1, #14
 801f762:	6812      	ldr	r2, [r2, #0]
 801f764:	fb01 2303 	mla	r3, r1, r3, r2
 801f768:	7b18      	ldrb	r0, [r3, #12]
 801f76a:	f000 001f 	and.w	r0, r0, #31
 801f76e:	e7ef      	b.n	801f750 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f770:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f774:	4293      	cmp	r3, r2
 801f776:	d106      	bne.n	801f786 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801f778:	f7e3 fd8e 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 801f77c:	6803      	ldr	r3, [r0, #0]
 801f77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f784:	4718      	bx	r3
 801f786:	2000      	movs	r0, #0
 801f788:	e7e2      	b.n	801f750 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f78a:	bf00      	nop
 801f78c:	24015cd0 	.word	0x24015cd0
 801f790:	24015cd8 	.word	0x24015cd8
 801f794:	24015cd4 	.word	0x24015cd4
 801f798:	24015cb8 	.word	0x24015cb8

0801f79c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801f79c:	2018      	movs	r0, #24
 801f79e:	4770      	bx	lr

0801f7a0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801f7a0:	2001      	movs	r0, #1
 801f7a2:	4770      	bx	lr

0801f7a4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f7a4:	4b02      	ldr	r3, [pc, #8]	@ (801f7b0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801f7a6:	8818      	ldrh	r0, [r3, #0]
 801f7a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f7ac:	b280      	uxth	r0, r0
 801f7ae:	4770      	bx	lr
 801f7b0:	24015c42 	.word	0x24015c42

0801f7b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f7b4:	2bff      	cmp	r3, #255	@ 0xff
 801f7b6:	d040      	beq.n	801f83a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801f7b8:	2a2c      	cmp	r2, #44	@ 0x2c
 801f7ba:	d02a      	beq.n	801f812 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801f7bc:	d80f      	bhi.n	801f7de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801f7be:	2a08      	cmp	r2, #8
 801f7c0:	d037      	beq.n	801f832 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f7c2:	d805      	bhi.n	801f7d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801f7c4:	2a04      	cmp	r2, #4
 801f7c6:	d032      	beq.n	801f82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801f7c8:	2a05      	cmp	r2, #5
 801f7ca:	d02e      	beq.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f7cc:	2000      	movs	r0, #0
 801f7ce:	4770      	bx	lr
 801f7d0:	2a0a      	cmp	r2, #10
 801f7d2:	d02e      	beq.n	801f832 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f7d4:	d301      	bcc.n	801f7da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801f7d6:	2a0b      	cmp	r2, #11
 801f7d8:	d1f8      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7da:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801f7dc:	4770      	bx	lr
 801f7de:	2a30      	cmp	r2, #48	@ 0x30
 801f7e0:	d029      	beq.n	801f836 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f7e2:	d808      	bhi.n	801f7f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801f7e4:	2a2e      	cmp	r2, #46	@ 0x2e
 801f7e6:	684b      	ldr	r3, [r1, #4]
 801f7e8:	d01a      	beq.n	801f820 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801f7ea:	d90b      	bls.n	801f804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801f7ec:	781b      	ldrb	r3, [r3, #0]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d1ec      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f7f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801f7f4:	4770      	bx	lr
 801f7f6:	2a32      	cmp	r2, #50	@ 0x32
 801f7f8:	d01d      	beq.n	801f836 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f7fa:	d301      	bcc.n	801f800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801f7fc:	2a33      	cmp	r2, #51	@ 0x33
 801f7fe:	d1e5      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f800:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801f802:	4770      	bx	lr
 801f804:	781b      	ldrb	r3, [r3, #0]
 801f806:	2b00      	cmp	r3, #0
 801f808:	d0f3      	beq.n	801f7f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801f80a:	2b01      	cmp	r3, #1
 801f80c:	d1de      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f80e:	6940      	ldr	r0, [r0, #20]
 801f810:	4770      	bx	lr
 801f812:	684b      	ldr	r3, [r1, #4]
 801f814:	781b      	ldrb	r3, [r3, #0]
 801f816:	b133      	cbz	r3, 801f826 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f818:	2b01      	cmp	r3, #1
 801f81a:	d1d7      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f81c:	68c0      	ldr	r0, [r0, #12]
 801f81e:	4770      	bx	lr
 801f820:	781b      	ldrb	r3, [r3, #0]
 801f822:	2b00      	cmp	r3, #0
 801f824:	d1d2      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f826:	69c0      	ldr	r0, [r0, #28]
 801f828:	4770      	bx	lr
 801f82a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f82c:	4770      	bx	lr
 801f82e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801f830:	4770      	bx	lr
 801f832:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801f834:	4770      	bx	lr
 801f836:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801f838:	4770      	bx	lr
 801f83a:	2a2c      	cmp	r2, #44	@ 0x2c
 801f83c:	d02a      	beq.n	801f894 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801f83e:	d80f      	bhi.n	801f860 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801f840:	2a08      	cmp	r2, #8
 801f842:	d035      	beq.n	801f8b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801f844:	d805      	bhi.n	801f852 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f846:	2a04      	cmp	r2, #4
 801f848:	d030      	beq.n	801f8ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801f84a:	2a05      	cmp	r2, #5
 801f84c:	d1be      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f84e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801f850:	4770      	bx	lr
 801f852:	2a0a      	cmp	r2, #10
 801f854:	d02c      	beq.n	801f8b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801f856:	d301      	bcc.n	801f85c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801f858:	2a0b      	cmp	r2, #11
 801f85a:	d1b7      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f85c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801f85e:	4770      	bx	lr
 801f860:	2a30      	cmp	r2, #48	@ 0x30
 801f862:	d027      	beq.n	801f8b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f864:	d808      	bhi.n	801f878 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801f866:	2a2e      	cmp	r2, #46	@ 0x2e
 801f868:	684b      	ldr	r3, [r1, #4]
 801f86a:	d01a      	beq.n	801f8a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801f86c:	d90b      	bls.n	801f886 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801f86e:	781b      	ldrb	r3, [r3, #0]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d1ab      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f874:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801f876:	4770      	bx	lr
 801f878:	2a32      	cmp	r2, #50	@ 0x32
 801f87a:	d01b      	beq.n	801f8b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f87c:	d301      	bcc.n	801f882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801f87e:	2a33      	cmp	r2, #51	@ 0x33
 801f880:	d1a4      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f882:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801f884:	4770      	bx	lr
 801f886:	781b      	ldrb	r3, [r3, #0]
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d0f3      	beq.n	801f874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801f88c:	2b01      	cmp	r3, #1
 801f88e:	d19d      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f890:	6980      	ldr	r0, [r0, #24]
 801f892:	4770      	bx	lr
 801f894:	684b      	ldr	r3, [r1, #4]
 801f896:	781b      	ldrb	r3, [r3, #0]
 801f898:	b133      	cbz	r3, 801f8a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801f89a:	2b01      	cmp	r3, #1
 801f89c:	d196      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f89e:	6900      	ldr	r0, [r0, #16]
 801f8a0:	4770      	bx	lr
 801f8a2:	781b      	ldrb	r3, [r3, #0]
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d191      	bne.n	801f7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f8a8:	6a00      	ldr	r0, [r0, #32]
 801f8aa:	4770      	bx	lr
 801f8ac:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801f8ae:	4770      	bx	lr
 801f8b0:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801f8b2:	4770      	bx	lr
 801f8b4:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801f8b6:	4770      	bx	lr

0801f8b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8bc:	b085      	sub	sp, #20
 801f8be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f8c0:	9203      	str	r2, [sp, #12]
 801f8c2:	6870      	ldr	r0, [r6, #4]
 801f8c4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f8c8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801f8cc:	9101      	str	r1, [sp, #4]
 801f8ce:	fa1f f885 	uxth.w	r8, r5
 801f8d2:	43ed      	mvns	r5, r5
 801f8d4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f8d8:	b2ed      	uxtb	r5, r5
 801f8da:	fb00 2404 	mla	r4, r0, r4, r2
 801f8de:	6832      	ldr	r2, [r6, #0]
 801f8e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8e4:	4414      	add	r4, r2
 801f8e6:	f8dc 2000 	ldr.w	r2, [ip]
 801f8ea:	9202      	str	r2, [sp, #8]
 801f8ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f8f0:	f102 0e04 	add.w	lr, r2, #4
 801f8f4:	9a01      	ldr	r2, [sp, #4]
 801f8f6:	2a00      	cmp	r2, #0
 801f8f8:	dc03      	bgt.n	801f902 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f8fa:	9a03      	ldr	r2, [sp, #12]
 801f8fc:	2a00      	cmp	r2, #0
 801f8fe:	f340 8116 	ble.w	801fb2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f902:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f904:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801f908:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f90c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f90e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801f912:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f916:	2b00      	cmp	r3, #0
 801f918:	dd0e      	ble.n	801f938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f91a:	1406      	asrs	r6, r0, #16
 801f91c:	d405      	bmi.n	801f92a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f91e:	4556      	cmp	r6, sl
 801f920:	da03      	bge.n	801f92a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f922:	1416      	asrs	r6, r2, #16
 801f924:	d401      	bmi.n	801f92a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f926:	454e      	cmp	r6, r9
 801f928:	db07      	blt.n	801f93a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f92a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f92c:	3b01      	subs	r3, #1
 801f92e:	3403      	adds	r4, #3
 801f930:	4430      	add	r0, r6
 801f932:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f934:	4432      	add	r2, r6
 801f936:	e7ee      	b.n	801f916 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f938:	d063      	beq.n	801fa02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f93a:	1e5e      	subs	r6, r3, #1
 801f93c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801f93e:	fb07 0706 	mla	r7, r7, r6, r0
 801f942:	143f      	asrs	r7, r7, #16
 801f944:	d454      	bmi.n	801f9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f946:	4557      	cmp	r7, sl
 801f948:	da52      	bge.n	801f9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f94a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f94c:	fb07 2606 	mla	r6, r7, r6, r2
 801f950:	1436      	asrs	r6, r6, #16
 801f952:	d44d      	bmi.n	801f9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f954:	454e      	cmp	r6, r9
 801f956:	da4b      	bge.n	801f9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f958:	1ce6      	adds	r6, r4, #3
 801f95a:	4699      	mov	r9, r3
 801f95c:	f1b9 0f00 	cmp.w	r9, #0
 801f960:	f106 0603 	add.w	r6, r6, #3
 801f964:	dd48      	ble.n	801f9f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801f966:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801f96a:	1417      	asrs	r7, r2, #16
 801f96c:	9902      	ldr	r1, [sp, #8]
 801f96e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f972:	f109 39ff 	add.w	r9, r9, #4294967295
 801f976:	fb0b 1707 	mla	r7, fp, r7, r1
 801f97a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f97e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f980:	f817 700a 	ldrb.w	r7, [r7, sl]
 801f984:	fb1b fb05 	smulbb	fp, fp, r5
 801f988:	4408      	add	r0, r1
 801f98a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f98c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f990:	440a      	add	r2, r1
 801f992:	eb0e 0a07 	add.w	sl, lr, r7
 801f996:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801f99a:	fb07 b708 	mla	r7, r7, r8, fp
 801f99e:	b2bf      	uxth	r7, r7
 801f9a0:	f107 0b01 	add.w	fp, r7, #1
 801f9a4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f9a8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f9ac:	fb1b fb05 	smulbb	fp, fp, r5
 801f9b0:	123f      	asrs	r7, r7, #8
 801f9b2:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f9b6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f9ba:	fb07 b708 	mla	r7, r7, r8, fp
 801f9be:	b2bf      	uxth	r7, r7
 801f9c0:	f107 0b01 	add.w	fp, r7, #1
 801f9c4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f9c8:	123f      	asrs	r7, r7, #8
 801f9ca:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f9ce:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f9d2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f9d6:	fb1a fa05 	smulbb	sl, sl, r5
 801f9da:	fb07 a708 	mla	r7, r7, r8, sl
 801f9de:	b2bf      	uxth	r7, r7
 801f9e0:	f107 0a01 	add.w	sl, r7, #1
 801f9e4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f9e8:	123f      	asrs	r7, r7, #8
 801f9ea:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f9ee:	e7b5      	b.n	801f95c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f9f0:	2700      	movs	r7, #0
 801f9f2:	1bde      	subs	r6, r3, r7
 801f9f4:	2e00      	cmp	r6, #0
 801f9f6:	dc42      	bgt.n	801fa7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f9f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa00:	441c      	add	r4, r3
 801fa02:	9b01      	ldr	r3, [sp, #4]
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	f340 8092 	ble.w	801fb2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fa0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fa0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa18:	eef0 6a62 	vmov.f32	s13, s5
 801fa1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fa20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa28:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801fa2c:	eef0 6a43 	vmov.f32	s13, s6
 801fa30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa34:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801fa38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa50:	ee12 2a90 	vmov	r2, s5
 801fa54:	eef0 2a47 	vmov.f32	s5, s14
 801fa58:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa5c:	ee13 2a10 	vmov	r2, s6
 801fa60:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa64:	eeb0 3a67 	vmov.f32	s6, s15
 801fa68:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa6c:	9312      	str	r3, [sp, #72]	@ 0x48
 801fa6e:	9b01      	ldr	r3, [sp, #4]
 801fa70:	9a03      	ldr	r2, [sp, #12]
 801fa72:	3b01      	subs	r3, #1
 801fa74:	9301      	str	r3, [sp, #4]
 801fa76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa78:	bf08      	it	eq
 801fa7a:	4613      	moveq	r3, r2
 801fa7c:	e73a      	b.n	801f8f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fa7e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fa82:	d44e      	bmi.n	801fb22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa84:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fa88:	4556      	cmp	r6, sl
 801fa8a:	dd4a      	ble.n	801fb22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa8c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fa90:	d447      	bmi.n	801fb22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa92:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801fa96:	4559      	cmp	r1, fp
 801fa98:	dd43      	ble.n	801fb22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fa9a:	fa0f f986 	sxth.w	r9, r6
 801fa9e:	9902      	ldr	r1, [sp, #8]
 801faa0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801faa4:	fb0b 1909 	mla	r9, fp, r9, r1
 801faa8:	f814 b006 	ldrb.w	fp, [r4, r6]
 801faac:	f819 900a 	ldrb.w	r9, [r9, sl]
 801fab0:	fb1b fb05 	smulbb	fp, fp, r5
 801fab4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fab8:	eb0e 0a09 	add.w	sl, lr, r9
 801fabc:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801fac0:	fb09 b908 	mla	r9, r9, r8, fp
 801fac4:	fa1f f989 	uxth.w	r9, r9
 801fac8:	f109 0b01 	add.w	fp, r9, #1
 801facc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fad0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fad4:	f804 9006 	strb.w	r9, [r4, r6]
 801fad8:	4426      	add	r6, r4
 801fada:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fade:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fae2:	fb1b fb05 	smulbb	fp, fp, r5
 801fae6:	fb09 b908 	mla	r9, r9, r8, fp
 801faea:	fa1f f989 	uxth.w	r9, r9
 801faee:	f109 0b01 	add.w	fp, r9, #1
 801faf2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801faf6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fafa:	f886 9001 	strb.w	r9, [r6, #1]
 801fafe:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fb02:	f896 a002 	ldrb.w	sl, [r6, #2]
 801fb06:	fb1a fa05 	smulbb	sl, sl, r5
 801fb0a:	fb09 a908 	mla	r9, r9, r8, sl
 801fb0e:	fa1f f989 	uxth.w	r9, r9
 801fb12:	f109 0a01 	add.w	sl, r9, #1
 801fb16:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fb1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb1e:	f886 9002 	strb.w	r9, [r6, #2]
 801fb22:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fb24:	3701      	adds	r7, #1
 801fb26:	4408      	add	r0, r1
 801fb28:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fb2a:	440a      	add	r2, r1
 801fb2c:	e761      	b.n	801f9f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fb2e:	b005      	add	sp, #20
 801fb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb38:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fb3a:	4693      	mov	fp, r2
 801fb3c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fb3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fb42:	6868      	ldr	r0, [r5, #4]
 801fb44:	6877      	ldr	r7, [r6, #4]
 801fb46:	9100      	str	r1, [sp, #0]
 801fb48:	3704      	adds	r7, #4
 801fb4a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801fb4e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801fb52:	fb00 2404 	mla	r4, r0, r4, r2
 801fb56:	682a      	ldr	r2, [r5, #0]
 801fb58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb5c:	4414      	add	r4, r2
 801fb5e:	6832      	ldr	r2, [r6, #0]
 801fb60:	9201      	str	r2, [sp, #4]
 801fb62:	9a00      	ldr	r2, [sp, #0]
 801fb64:	2a00      	cmp	r2, #0
 801fb66:	dc03      	bgt.n	801fb70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fb68:	f1bb 0f00 	cmp.w	fp, #0
 801fb6c:	f340 80bc 	ble.w	801fce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fb70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fb72:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801fb76:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fb7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb7c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801fb80:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	dd0c      	ble.n	801fba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb88:	1405      	asrs	r5, r0, #16
 801fb8a:	d405      	bmi.n	801fb98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb8c:	4555      	cmp	r5, sl
 801fb8e:	da03      	bge.n	801fb98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb90:	1415      	asrs	r5, r2, #16
 801fb92:	d401      	bmi.n	801fb98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb94:	454d      	cmp	r5, r9
 801fb96:	db05      	blt.n	801fba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fb98:	4440      	add	r0, r8
 801fb9a:	4472      	add	r2, lr
 801fb9c:	3b01      	subs	r3, #1
 801fb9e:	3403      	adds	r4, #3
 801fba0:	e7f0      	b.n	801fb84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fba2:	d03f      	beq.n	801fc24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801fba4:	1e5d      	subs	r5, r3, #1
 801fba6:	fb08 0c05 	mla	ip, r8, r5, r0
 801fbaa:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801fbae:	d42e      	bmi.n	801fc0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fbb0:	45d4      	cmp	ip, sl
 801fbb2:	da2c      	bge.n	801fc0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fbb4:	fb0e 2505 	mla	r5, lr, r5, r2
 801fbb8:	142d      	asrs	r5, r5, #16
 801fbba:	d428      	bmi.n	801fc0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fbbc:	454d      	cmp	r5, r9
 801fbbe:	da26      	bge.n	801fc0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fbc0:	1ce5      	adds	r5, r4, #3
 801fbc2:	469c      	mov	ip, r3
 801fbc4:	f1bc 0f00 	cmp.w	ip, #0
 801fbc8:	f105 0503 	add.w	r5, r5, #3
 801fbcc:	dd25      	ble.n	801fc1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801fbce:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801fbd2:	ea4f 4922 	mov.w	r9, r2, asr #16
 801fbd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fbda:	4472      	add	r2, lr
 801fbdc:	468a      	mov	sl, r1
 801fbde:	9901      	ldr	r1, [sp, #4]
 801fbe0:	fb0a 1909 	mla	r9, sl, r9, r1
 801fbe4:	1401      	asrs	r1, r0, #16
 801fbe6:	4440      	add	r0, r8
 801fbe8:	f819 9001 	ldrb.w	r9, [r9, r1]
 801fbec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fbf0:	eb07 0a09 	add.w	sl, r7, r9
 801fbf4:	f817 9009 	ldrb.w	r9, [r7, r9]
 801fbf8:	f805 9c06 	strb.w	r9, [r5, #-6]
 801fbfc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fc00:	f805 9c05 	strb.w	r9, [r5, #-5]
 801fc04:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fc08:	f805 9c04 	strb.w	r9, [r5, #-4]
 801fc0c:	e7da      	b.n	801fbc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc0e:	2500      	movs	r5, #0
 801fc10:	eba3 0c05 	sub.w	ip, r3, r5
 801fc14:	f1bc 0f00 	cmp.w	ip, #0
 801fc18:	dc3b      	bgt.n	801fc92 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801fc1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc22:	441c      	add	r4, r3
 801fc24:	9b00      	ldr	r3, [sp, #0]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	dd5e      	ble.n	801fce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fc2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc34:	eeb0 6a62 	vmov.f32	s12, s5
 801fc38:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc44:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801fc48:	eeb0 6a43 	vmov.f32	s12, s6
 801fc4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc50:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801fc54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc6c:	ee12 2a90 	vmov	r2, s5
 801fc70:	eef0 2a47 	vmov.f32	s5, s14
 801fc74:	fb92 f8f3 	sdiv	r8, r2, r3
 801fc78:	ee13 2a10 	vmov	r2, s6
 801fc7c:	eeb0 3a67 	vmov.f32	s6, s15
 801fc80:	fb92 fef3 	sdiv	lr, r2, r3
 801fc84:	9b00      	ldr	r3, [sp, #0]
 801fc86:	3b01      	subs	r3, #1
 801fc88:	9300      	str	r3, [sp, #0]
 801fc8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc8c:	bf08      	it	eq
 801fc8e:	465b      	moveq	r3, fp
 801fc90:	e767      	b.n	801fb62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fc92:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fc96:	d423      	bmi.n	801fce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fc98:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801fc9c:	45cc      	cmp	ip, r9
 801fc9e:	dd1f      	ble.n	801fce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fca0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fca4:	d41c      	bmi.n	801fce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fca6:	68f1      	ldr	r1, [r6, #12]
 801fca8:	4551      	cmp	r1, sl
 801fcaa:	dd19      	ble.n	801fce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fcac:	fa0f fc8c 	sxth.w	ip, ip
 801fcb0:	9901      	ldr	r1, [sp, #4]
 801fcb2:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801fcb6:	f81c c009 	ldrb.w	ip, [ip, r9]
 801fcba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fcbe:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801fcc2:	eb07 090c 	add.w	r9, r7, ip
 801fcc6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801fcca:	f804 a00c 	strb.w	sl, [r4, ip]
 801fcce:	44a4      	add	ip, r4
 801fcd0:	f899 a001 	ldrb.w	sl, [r9, #1]
 801fcd4:	f88c a001 	strb.w	sl, [ip, #1]
 801fcd8:	f899 9002 	ldrb.w	r9, [r9, #2]
 801fcdc:	f88c 9002 	strb.w	r9, [ip, #2]
 801fce0:	4440      	add	r0, r8
 801fce2:	4472      	add	r2, lr
 801fce4:	3501      	adds	r5, #1
 801fce6:	e793      	b.n	801fc10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801fce8:	b003      	add	sp, #12
 801fcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fcee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcf2:	b085      	sub	sp, #20
 801fcf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fcf8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fcfa:	9202      	str	r2, [sp, #8]
 801fcfc:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801fd00:	6860      	ldr	r0, [r4, #4]
 801fd02:	9203      	str	r2, [sp, #12]
 801fd04:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801fd08:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801fd0c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801fd10:	fb00 2505 	mla	r5, r0, r5, r2
 801fd14:	6822      	ldr	r2, [r4, #0]
 801fd16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fd1a:	4415      	add	r5, r2
 801fd1c:	f8dc 2000 	ldr.w	r2, [ip]
 801fd20:	9200      	str	r2, [sp, #0]
 801fd22:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fd26:	3204      	adds	r2, #4
 801fd28:	9201      	str	r2, [sp, #4]
 801fd2a:	2900      	cmp	r1, #0
 801fd2c:	dc03      	bgt.n	801fd36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fd2e:	9a02      	ldr	r2, [sp, #8]
 801fd30:	2a00      	cmp	r2, #0
 801fd32:	f340 8127 	ble.w	801ff84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fd36:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fd38:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fd3c:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801fd40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fd42:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fd46:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	dd0d      	ble.n	801fd6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fd4e:	1422      	asrs	r2, r4, #16
 801fd50:	d405      	bmi.n	801fd5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd52:	4542      	cmp	r2, r8
 801fd54:	da03      	bge.n	801fd5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd56:	1402      	asrs	r2, r0, #16
 801fd58:	d401      	bmi.n	801fd5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd5a:	42ba      	cmp	r2, r7
 801fd5c:	db06      	blt.n	801fd6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fd5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fd60:	4474      	add	r4, lr
 801fd62:	3b01      	subs	r3, #1
 801fd64:	3503      	adds	r5, #3
 801fd66:	4410      	add	r0, r2
 801fd68:	e7ef      	b.n	801fd4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fd6a:	d075      	beq.n	801fe58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801fd6c:	1e5a      	subs	r2, r3, #1
 801fd6e:	fb0e 4602 	mla	r6, lr, r2, r4
 801fd72:	1436      	asrs	r6, r6, #16
 801fd74:	d465      	bmi.n	801fe42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd76:	4546      	cmp	r6, r8
 801fd78:	da63      	bge.n	801fe42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd7a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801fd7c:	fb06 0202 	mla	r2, r6, r2, r0
 801fd80:	1412      	asrs	r2, r2, #16
 801fd82:	d45e      	bmi.n	801fe42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd84:	42ba      	cmp	r2, r7
 801fd86:	da5c      	bge.n	801fe42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fd88:	1cef      	adds	r7, r5, #3
 801fd8a:	4699      	mov	r9, r3
 801fd8c:	f1b9 0f00 	cmp.w	r9, #0
 801fd90:	dd5d      	ble.n	801fe4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801fd92:	1402      	asrs	r2, r0, #16
 801fd94:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fd98:	1426      	asrs	r6, r4, #16
 801fd9a:	4692      	mov	sl, r2
 801fd9c:	9a00      	ldr	r2, [sp, #0]
 801fd9e:	fb08 220a 	mla	r2, r8, sl, r2
 801fda2:	5d92      	ldrb	r2, [r2, r6]
 801fda4:	9e01      	ldr	r6, [sp, #4]
 801fda6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801fdaa:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801fdae:	d041      	beq.n	801fe34 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801fdb0:	9a03      	ldr	r2, [sp, #12]
 801fdb2:	fa5f fb86 	uxtb.w	fp, r6
 801fdb6:	fb02 f808 	mul.w	r8, r2, r8
 801fdba:	f108 0201 	add.w	r2, r8, #1
 801fdbe:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801fdc2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801fdc6:	1212      	asrs	r2, r2, #8
 801fdc8:	fa1f fa82 	uxth.w	sl, r2
 801fdcc:	43d2      	mvns	r2, r2
 801fdce:	fb1b fb0a 	smulbb	fp, fp, sl
 801fdd2:	b2d2      	uxtb	r2, r2
 801fdd4:	fb08 b802 	mla	r8, r8, r2, fp
 801fdd8:	fa1f f888 	uxth.w	r8, r8
 801fddc:	f108 0b01 	add.w	fp, r8, #1
 801fde0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fde4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801fde8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fdec:	fb1b fb0a 	smulbb	fp, fp, sl
 801fdf0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fdf4:	fb16 fa0a 	smulbb	sl, r6, sl
 801fdf8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801fdfc:	f807 8c03 	strb.w	r8, [r7, #-3]
 801fe00:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801fe04:	fb06 aa02 	mla	sl, r6, r2, sl
 801fe08:	fb08 b802 	mla	r8, r8, r2, fp
 801fe0c:	fa1f fa8a 	uxth.w	sl, sl
 801fe10:	fa1f f888 	uxth.w	r8, r8
 801fe14:	f10a 0601 	add.w	r6, sl, #1
 801fe18:	f108 0b01 	add.w	fp, r8, #1
 801fe1c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801fe20:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fe24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fe28:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fe2c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801fe30:	f807 8c02 	strb.w	r8, [r7, #-2]
 801fe34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fe36:	4474      	add	r4, lr
 801fe38:	3703      	adds	r7, #3
 801fe3a:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe3e:	4410      	add	r0, r2
 801fe40:	e7a4      	b.n	801fd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fe42:	f04f 0800 	mov.w	r8, #0
 801fe46:	eba3 0208 	sub.w	r2, r3, r8
 801fe4a:	2a00      	cmp	r2, #0
 801fe4c:	dc3b      	bgt.n	801fec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801fe4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe56:	441d      	add	r5, r3
 801fe58:	2900      	cmp	r1, #0
 801fe5a:	f340 8093 	ble.w	801ff84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fe5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe68:	3901      	subs	r1, #1
 801fe6a:	eeb0 6a62 	vmov.f32	s12, s5
 801fe6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe7a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fe7e:	eeb0 6a43 	vmov.f32	s12, s6
 801fe82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe86:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fe8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fea2:	ee12 2a90 	vmov	r2, s5
 801fea6:	eef0 2a47 	vmov.f32	s5, s14
 801feaa:	fb92 fef3 	sdiv	lr, r2, r3
 801feae:	ee13 2a10 	vmov	r2, s6
 801feb2:	eeb0 3a67 	vmov.f32	s6, s15
 801feb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801feba:	9a02      	ldr	r2, [sp, #8]
 801febc:	9312      	str	r3, [sp, #72]	@ 0x48
 801febe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fec0:	bf08      	it	eq
 801fec2:	4613      	moveq	r3, r2
 801fec4:	e731      	b.n	801fd2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fec6:	1427      	asrs	r7, r4, #16
 801fec8:	d456      	bmi.n	801ff78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801feca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fece:	42be      	cmp	r6, r7
 801fed0:	dd52      	ble.n	801ff78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fed2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fed6:	d44f      	bmi.n	801ff78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fed8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fedc:	454a      	cmp	r2, r9
 801fede:	dd4b      	ble.n	801ff78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fee0:	9a00      	ldr	r2, [sp, #0]
 801fee2:	b236      	sxth	r6, r6
 801fee4:	fb09 2606 	mla	r6, r9, r6, r2
 801fee8:	5df2      	ldrb	r2, [r6, r7]
 801feea:	9e01      	ldr	r6, [sp, #4]
 801feec:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fef0:	0e3a      	lsrs	r2, r7, #24
 801fef2:	d041      	beq.n	801ff78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fef4:	9e03      	ldr	r6, [sp, #12]
 801fef6:	fa5f fb87 	uxtb.w	fp, r7
 801fefa:	4372      	muls	r2, r6
 801fefc:	1c56      	adds	r6, r2, #1
 801fefe:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ff02:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ff06:	1212      	asrs	r2, r2, #8
 801ff08:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ff0c:	fa1f fa82 	uxth.w	sl, r2
 801ff10:	43d2      	mvns	r2, r2
 801ff12:	fb1b fb0a 	smulbb	fp, fp, sl
 801ff16:	b2d2      	uxtb	r2, r2
 801ff18:	fb09 b902 	mla	r9, r9, r2, fp
 801ff1c:	fa1f f989 	uxth.w	r9, r9
 801ff20:	f109 0b01 	add.w	fp, r9, #1
 801ff24:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ff28:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ff2c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ff30:	fb1b fb0a 	smulbb	fp, fp, sl
 801ff34:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff38:	fb17 fa0a 	smulbb	sl, r7, sl
 801ff3c:	f805 9006 	strb.w	r9, [r5, r6]
 801ff40:	442e      	add	r6, r5
 801ff42:	78b7      	ldrb	r7, [r6, #2]
 801ff44:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ff48:	fb07 aa02 	mla	sl, r7, r2, sl
 801ff4c:	fb09 b902 	mla	r9, r9, r2, fp
 801ff50:	fa1f fa8a 	uxth.w	sl, sl
 801ff54:	fa1f f989 	uxth.w	r9, r9
 801ff58:	f10a 0701 	add.w	r7, sl, #1
 801ff5c:	f109 0b01 	add.w	fp, r9, #1
 801ff60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff64:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ff68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff70:	f886 a002 	strb.w	sl, [r6, #2]
 801ff74:	f886 9001 	strb.w	r9, [r6, #1]
 801ff78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ff7a:	4474      	add	r4, lr
 801ff7c:	f108 0801 	add.w	r8, r8, #1
 801ff80:	4410      	add	r0, r2
 801ff82:	e760      	b.n	801fe46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801ff84:	b005      	add	sp, #20
 801ff86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff8e:	b085      	sub	sp, #20
 801ff90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ff94:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ff96:	9203      	str	r2, [sp, #12]
 801ff98:	6868      	ldr	r0, [r5, #4]
 801ff9a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ff9e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ffa2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ffa6:	fb00 2404 	mla	r4, r0, r4, r2
 801ffaa:	682a      	ldr	r2, [r5, #0]
 801ffac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ffb0:	4414      	add	r4, r2
 801ffb2:	f8dc 2000 	ldr.w	r2, [ip]
 801ffb6:	9201      	str	r2, [sp, #4]
 801ffb8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ffbc:	3204      	adds	r2, #4
 801ffbe:	9202      	str	r2, [sp, #8]
 801ffc0:	2900      	cmp	r1, #0
 801ffc2:	dc03      	bgt.n	801ffcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ffc4:	9a03      	ldr	r2, [sp, #12]
 801ffc6:	2a00      	cmp	r2, #0
 801ffc8:	f340 8137 	ble.w	802023a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ffcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ffce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ffd2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ffd6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ffd8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ffdc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	dd0d      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ffe4:	1405      	asrs	r5, r0, #16
 801ffe6:	d405      	bmi.n	801fff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ffe8:	4545      	cmp	r5, r8
 801ffea:	da03      	bge.n	801fff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ffec:	1415      	asrs	r5, r2, #16
 801ffee:	d401      	bmi.n	801fff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fff0:	42bd      	cmp	r5, r7
 801fff2:	db06      	blt.n	8020002 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fff4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fff6:	4470      	add	r0, lr
 801fff8:	3b01      	subs	r3, #1
 801fffa:	3403      	adds	r4, #3
 801fffc:	442a      	add	r2, r5
 801fffe:	e7ef      	b.n	801ffe0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020000:	d070      	beq.n	80200e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8020002:	1e5d      	subs	r5, r3, #1
 8020004:	fb0e 0605 	mla	r6, lr, r5, r0
 8020008:	1436      	asrs	r6, r6, #16
 802000a:	d462      	bmi.n	80200d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802000c:	4546      	cmp	r6, r8
 802000e:	da60      	bge.n	80200d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020010:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020012:	fb06 2505 	mla	r5, r6, r5, r2
 8020016:	142d      	asrs	r5, r5, #16
 8020018:	d45b      	bmi.n	80200d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802001a:	42bd      	cmp	r5, r7
 802001c:	da59      	bge.n	80200d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802001e:	1ce5      	adds	r5, r4, #3
 8020020:	469a      	mov	sl, r3
 8020022:	f1ba 0f00 	cmp.w	sl, #0
 8020026:	dd58      	ble.n	80200da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020028:	1416      	asrs	r6, r2, #16
 802002a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802002e:	1407      	asrs	r7, r0, #16
 8020030:	46b1      	mov	r9, r6
 8020032:	9e01      	ldr	r6, [sp, #4]
 8020034:	fb08 6609 	mla	r6, r8, r9, r6
 8020038:	5df6      	ldrb	r6, [r6, r7]
 802003a:	9f02      	ldr	r7, [sp, #8]
 802003c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8020040:	0e37      	lsrs	r7, r6, #24
 8020042:	2fff      	cmp	r7, #255	@ 0xff
 8020044:	f000 80f0 	beq.w	8020228 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020048:	fa5f f887 	uxtb.w	r8, r7
 802004c:	b3d7      	cbz	r7, 80200c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802004e:	fa1f f788 	uxth.w	r7, r8
 8020052:	ea6f 0808 	mvn.w	r8, r8
 8020056:	fa5f fb86 	uxtb.w	fp, r6
 802005a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 802005e:	fa5f f888 	uxtb.w	r8, r8
 8020062:	fb1b fb07 	smulbb	fp, fp, r7
 8020066:	fb09 b908 	mla	r9, r9, r8, fp
 802006a:	fa1f f989 	uxth.w	r9, r9
 802006e:	f109 0b01 	add.w	fp, r9, #1
 8020072:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020076:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802007a:	fb1b fb08 	smulbb	fp, fp, r8
 802007e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020082:	f805 9c03 	strb.w	r9, [r5, #-3]
 8020086:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802008a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802008e:	fb09 b907 	mla	r9, r9, r7, fp
 8020092:	fa1f f989 	uxth.w	r9, r9
 8020096:	f109 0b01 	add.w	fp, r9, #1
 802009a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802009e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80200a2:	f805 9c02 	strb.w	r9, [r5, #-2]
 80200a6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80200aa:	fb19 f808 	smulbb	r8, r9, r8
 80200ae:	fb06 8607 	mla	r6, r6, r7, r8
 80200b2:	b2b6      	uxth	r6, r6
 80200b4:	f106 0801 	add.w	r8, r6, #1
 80200b8:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80200bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80200c0:	f805 8c01 	strb.w	r8, [r5, #-1]
 80200c4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80200c6:	4470      	add	r0, lr
 80200c8:	3503      	adds	r5, #3
 80200ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200ce:	4432      	add	r2, r6
 80200d0:	e7a7      	b.n	8020022 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80200d2:	2600      	movs	r6, #0
 80200d4:	1b9d      	subs	r5, r3, r6
 80200d6:	2d00      	cmp	r5, #0
 80200d8:	dc3b      	bgt.n	8020152 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80200da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200e2:	441c      	add	r4, r3
 80200e4:	2900      	cmp	r1, #0
 80200e6:	f340 80a8 	ble.w	802023a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80200ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80200f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200f4:	3901      	subs	r1, #1
 80200f6:	eeb0 6a62 	vmov.f32	s12, s5
 80200fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80200fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020102:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020106:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802010a:	eeb0 6a43 	vmov.f32	s12, s6
 802010e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020112:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020116:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802011a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802011e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020122:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020126:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802012a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802012e:	ee12 2a90 	vmov	r2, s5
 8020132:	eef0 2a47 	vmov.f32	s5, s14
 8020136:	fb92 fef3 	sdiv	lr, r2, r3
 802013a:	ee13 2a10 	vmov	r2, s6
 802013e:	eeb0 3a67 	vmov.f32	s6, s15
 8020142:	fb92 f3f3 	sdiv	r3, r2, r3
 8020146:	9a03      	ldr	r2, [sp, #12]
 8020148:	9312      	str	r3, [sp, #72]	@ 0x48
 802014a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802014c:	bf08      	it	eq
 802014e:	4613      	moveq	r3, r2
 8020150:	e736      	b.n	801ffc0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020152:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020156:	d457      	bmi.n	8020208 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020158:	f8dc 7008 	ldr.w	r7, [ip, #8]
 802015c:	4547      	cmp	r7, r8
 802015e:	dd53      	ble.n	8020208 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020160:	ea5f 4922 	movs.w	r9, r2, asr #16
 8020164:	d450      	bmi.n	8020208 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020166:	f8dc 500c 	ldr.w	r5, [ip, #12]
 802016a:	454d      	cmp	r5, r9
 802016c:	dd4c      	ble.n	8020208 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802016e:	9d01      	ldr	r5, [sp, #4]
 8020170:	b23f      	sxth	r7, r7
 8020172:	fb09 5707 	mla	r7, r9, r7, r5
 8020176:	f817 5008 	ldrb.w	r5, [r7, r8]
 802017a:	9f02      	ldr	r7, [sp, #8]
 802017c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020180:	0e2f      	lsrs	r7, r5, #24
 8020182:	2fff      	cmp	r7, #255	@ 0xff
 8020184:	d045      	beq.n	8020212 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020186:	fa5f f987 	uxtb.w	r9, r7
 802018a:	b3ef      	cbz	r7, 8020208 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802018c:	fa1f f889 	uxth.w	r8, r9
 8020190:	ea6f 0909 	mvn.w	r9, r9
 8020194:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020198:	fa5f fb85 	uxtb.w	fp, r5
 802019c:	f814 a007 	ldrb.w	sl, [r4, r7]
 80201a0:	fa5f f989 	uxtb.w	r9, r9
 80201a4:	fb1b fb08 	smulbb	fp, fp, r8
 80201a8:	fb0a ba09 	mla	sl, sl, r9, fp
 80201ac:	fa1f fa8a 	uxth.w	sl, sl
 80201b0:	f10a 0b01 	add.w	fp, sl, #1
 80201b4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80201b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80201bc:	f804 a007 	strb.w	sl, [r4, r7]
 80201c0:	4427      	add	r7, r4
 80201c2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80201c6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80201ca:	f897 b001 	ldrb.w	fp, [r7, #1]
 80201ce:	fb1b fb09 	smulbb	fp, fp, r9
 80201d2:	fb0a ba08 	mla	sl, sl, r8, fp
 80201d6:	fa1f fa8a 	uxth.w	sl, sl
 80201da:	f10a 0b01 	add.w	fp, sl, #1
 80201de:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80201e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80201e6:	f887 a001 	strb.w	sl, [r7, #1]
 80201ea:	f897 a002 	ldrb.w	sl, [r7, #2]
 80201ee:	fb1a f909 	smulbb	r9, sl, r9
 80201f2:	fb05 9508 	mla	r5, r5, r8, r9
 80201f6:	b2ad      	uxth	r5, r5
 80201f8:	f105 0901 	add.w	r9, r5, #1
 80201fc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8020200:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020204:	f887 9002 	strb.w	r9, [r7, #2]
 8020208:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802020a:	4470      	add	r0, lr
 802020c:	3601      	adds	r6, #1
 802020e:	442a      	add	r2, r5
 8020210:	e760      	b.n	80200d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020212:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020216:	ea4f 2815 	mov.w	r8, r5, lsr #8
 802021a:	55e5      	strb	r5, [r4, r7]
 802021c:	4427      	add	r7, r4
 802021e:	0c2d      	lsrs	r5, r5, #16
 8020220:	f887 8001 	strb.w	r8, [r7, #1]
 8020224:	70bd      	strb	r5, [r7, #2]
 8020226:	e7ef      	b.n	8020208 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020228:	0a37      	lsrs	r7, r6, #8
 802022a:	f805 6c03 	strb.w	r6, [r5, #-3]
 802022e:	0c36      	lsrs	r6, r6, #16
 8020230:	f805 7c02 	strb.w	r7, [r5, #-2]
 8020234:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020238:	e744      	b.n	80200c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802023a:	b005      	add	sp, #20
 802023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020240 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020244:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020246:	9201      	str	r2, [sp, #4]
 8020248:	6870      	ldr	r0, [r6, #4]
 802024a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 802024e:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8020252:	fa1f fe85 	uxth.w	lr, r5
 8020256:	43ed      	mvns	r5, r5
 8020258:	f8dc 8000 	ldr.w	r8, [ip]
 802025c:	b2ed      	uxtb	r5, r5
 802025e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8020262:	fb00 2404 	mla	r4, r0, r4, r2
 8020266:	6832      	ldr	r2, [r6, #0]
 8020268:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802026c:	4414      	add	r4, r2
 802026e:	2900      	cmp	r1, #0
 8020270:	dc03      	bgt.n	802027a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020272:	9a01      	ldr	r2, [sp, #4]
 8020274:	2a00      	cmp	r2, #0
 8020276:	f340 810d 	ble.w	8020494 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802027a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802027c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8020280:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020286:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 802028a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 802028e:	2b00      	cmp	r3, #0
 8020290:	dd0e      	ble.n	80202b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020292:	1406      	asrs	r6, r0, #16
 8020294:	d405      	bmi.n	80202a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020296:	4556      	cmp	r6, sl
 8020298:	da03      	bge.n	80202a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802029a:	1416      	asrs	r6, r2, #16
 802029c:	d401      	bmi.n	80202a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802029e:	454e      	cmp	r6, r9
 80202a0:	db07      	blt.n	80202b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80202a2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80202a4:	3b01      	subs	r3, #1
 80202a6:	3403      	adds	r4, #3
 80202a8:	4430      	add	r0, r6
 80202aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80202ac:	4432      	add	r2, r6
 80202ae:	e7ee      	b.n	802028e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80202b0:	d060      	beq.n	8020374 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80202b2:	1e5e      	subs	r6, r3, #1
 80202b4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80202b6:	fb07 0706 	mla	r7, r7, r6, r0
 80202ba:	143f      	asrs	r7, r7, #16
 80202bc:	d451      	bmi.n	8020362 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80202be:	4557      	cmp	r7, sl
 80202c0:	da4f      	bge.n	8020362 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80202c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80202c4:	fb07 2606 	mla	r6, r7, r6, r2
 80202c8:	1436      	asrs	r6, r6, #16
 80202ca:	d44a      	bmi.n	8020362 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80202cc:	454e      	cmp	r6, r9
 80202ce:	da48      	bge.n	8020362 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80202d0:	1ce6      	adds	r6, r4, #3
 80202d2:	4699      	mov	r9, r3
 80202d4:	f1b9 0f00 	cmp.w	r9, #0
 80202d8:	f106 0603 	add.w	r6, r6, #3
 80202dc:	dd45      	ble.n	802036a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80202de:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80202e2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80202e6:	1417      	asrs	r7, r2, #16
 80202e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80202ec:	fb0b a707 	mla	r7, fp, r7, sl
 80202f0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80202f4:	fb1b fb05 	smulbb	fp, fp, r5
 80202f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80202fc:	eb08 0a07 	add.w	sl, r8, r7
 8020300:	f818 7007 	ldrb.w	r7, [r8, r7]
 8020304:	fb07 b70e 	mla	r7, r7, lr, fp
 8020308:	b2bf      	uxth	r7, r7
 802030a:	f107 0b01 	add.w	fp, r7, #1
 802030e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020312:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8020316:	fb1b fb05 	smulbb	fp, fp, r5
 802031a:	123f      	asrs	r7, r7, #8
 802031c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8020320:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8020324:	fb07 b70e 	mla	r7, r7, lr, fp
 8020328:	b2bf      	uxth	r7, r7
 802032a:	f107 0b01 	add.w	fp, r7, #1
 802032e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020332:	123f      	asrs	r7, r7, #8
 8020334:	f806 7c05 	strb.w	r7, [r6, #-5]
 8020338:	f89a 7002 	ldrb.w	r7, [sl, #2]
 802033c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8020340:	fb1a fa05 	smulbb	sl, sl, r5
 8020344:	fb07 a70e 	mla	r7, r7, lr, sl
 8020348:	b2bf      	uxth	r7, r7
 802034a:	f107 0a01 	add.w	sl, r7, #1
 802034e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8020352:	123f      	asrs	r7, r7, #8
 8020354:	f806 7c04 	strb.w	r7, [r6, #-4]
 8020358:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802035a:	4438      	add	r0, r7
 802035c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 802035e:	443a      	add	r2, r7
 8020360:	e7b8      	b.n	80202d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020362:	2700      	movs	r7, #0
 8020364:	1bde      	subs	r6, r3, r7
 8020366:	2e00      	cmp	r6, #0
 8020368:	dc3f      	bgt.n	80203ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802036a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802036e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020372:	441c      	add	r4, r3
 8020374:	2900      	cmp	r1, #0
 8020376:	f340 808d 	ble.w	8020494 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802037a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802037e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020380:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020384:	3901      	subs	r1, #1
 8020386:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802038a:	eef0 6a62 	vmov.f32	s13, s5
 802038e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020392:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020396:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802039a:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 802039e:	eef0 6a43 	vmov.f32	s13, s6
 80203a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203a6:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80203aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203c2:	ee12 2a90 	vmov	r2, s5
 80203c6:	eef0 2a47 	vmov.f32	s5, s14
 80203ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ce:	ee13 2a10 	vmov	r2, s6
 80203d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80203d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203d6:	eeb0 3a67 	vmov.f32	s6, s15
 80203da:	fb92 f3f3 	sdiv	r3, r2, r3
 80203de:	9a01      	ldr	r2, [sp, #4]
 80203e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80203e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203e4:	bf08      	it	eq
 80203e6:	4613      	moveq	r3, r2
 80203e8:	e741      	b.n	802026e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80203ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 80203ee:	d44b      	bmi.n	8020488 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80203f0:	f8dc b008 	ldr.w	fp, [ip, #8]
 80203f4:	45cb      	cmp	fp, r9
 80203f6:	dd47      	ble.n	8020488 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80203f8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80203fc:	d444      	bmi.n	8020488 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80203fe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8020402:	4556      	cmp	r6, sl
 8020404:	dd40      	ble.n	8020488 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020406:	fa0f f68b 	sxth.w	r6, fp
 802040a:	fb0a 9906 	mla	r9, sl, r6, r9
 802040e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8020412:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020416:	f814 b006 	ldrb.w	fp, [r4, r6]
 802041a:	fb1b fb05 	smulbb	fp, fp, r5
 802041e:	eb08 0a09 	add.w	sl, r8, r9
 8020422:	f818 9009 	ldrb.w	r9, [r8, r9]
 8020426:	fb09 b90e 	mla	r9, r9, lr, fp
 802042a:	fa1f f989 	uxth.w	r9, r9
 802042e:	f109 0b01 	add.w	fp, r9, #1
 8020432:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020436:	ea4f 2929 	mov.w	r9, r9, asr #8
 802043a:	f804 9006 	strb.w	r9, [r4, r6]
 802043e:	4426      	add	r6, r4
 8020440:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020444:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020448:	fb1b fb05 	smulbb	fp, fp, r5
 802044c:	fb09 b90e 	mla	r9, r9, lr, fp
 8020450:	fa1f f989 	uxth.w	r9, r9
 8020454:	f109 0b01 	add.w	fp, r9, #1
 8020458:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802045c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020460:	f886 9001 	strb.w	r9, [r6, #1]
 8020464:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020468:	f896 a002 	ldrb.w	sl, [r6, #2]
 802046c:	fb1a fa05 	smulbb	sl, sl, r5
 8020470:	fb09 a90e 	mla	r9, r9, lr, sl
 8020474:	fa1f f989 	uxth.w	r9, r9
 8020478:	f109 0a01 	add.w	sl, r9, #1
 802047c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020480:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020484:	f886 9002 	strb.w	r9, [r6, #2]
 8020488:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 802048a:	3701      	adds	r7, #1
 802048c:	4430      	add	r0, r6
 802048e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8020490:	4432      	add	r2, r6
 8020492:	e767      	b.n	8020364 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020494:	b003      	add	sp, #12
 8020496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802049a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802049a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802049e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80204a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80204a4:	9201      	str	r2, [sp, #4]
 80204a6:	6868      	ldr	r0, [r5, #4]
 80204a8:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80204aa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80204ae:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80204b2:	fb00 2404 	mla	r4, r0, r4, r2
 80204b6:	682a      	ldr	r2, [r5, #0]
 80204b8:	f8d7 8000 	ldr.w	r8, [r7]
 80204bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80204c0:	4414      	add	r4, r2
 80204c2:	2900      	cmp	r1, #0
 80204c4:	dc03      	bgt.n	80204ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80204c6:	9a01      	ldr	r2, [sp, #4]
 80204c8:	2a00      	cmp	r2, #0
 80204ca:	f340 80af 	ble.w	802062c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80204ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80204d0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80204d4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80204d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80204da:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80204de:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	dd0c      	ble.n	8020500 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204e6:	1405      	asrs	r5, r0, #16
 80204e8:	d405      	bmi.n	80204f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80204ea:	4555      	cmp	r5, sl
 80204ec:	da03      	bge.n	80204f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80204ee:	1415      	asrs	r5, r2, #16
 80204f0:	d401      	bmi.n	80204f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80204f2:	454d      	cmp	r5, r9
 80204f4:	db05      	blt.n	8020502 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80204f6:	4470      	add	r0, lr
 80204f8:	4462      	add	r2, ip
 80204fa:	3b01      	subs	r3, #1
 80204fc:	3403      	adds	r4, #3
 80204fe:	e7f0      	b.n	80204e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020500:	d038      	beq.n	8020574 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020502:	1e5d      	subs	r5, r3, #1
 8020504:	fb0e 0605 	mla	r6, lr, r5, r0
 8020508:	1436      	asrs	r6, r6, #16
 802050a:	d42a      	bmi.n	8020562 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802050c:	4556      	cmp	r6, sl
 802050e:	da28      	bge.n	8020562 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020510:	fb0c 2505 	mla	r5, ip, r5, r2
 8020514:	142d      	asrs	r5, r5, #16
 8020516:	d424      	bmi.n	8020562 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020518:	454d      	cmp	r5, r9
 802051a:	da22      	bge.n	8020562 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802051c:	1ce6      	adds	r6, r4, #3
 802051e:	4699      	mov	r9, r3
 8020520:	f1b9 0f00 	cmp.w	r9, #0
 8020524:	f106 0603 	add.w	r6, r6, #3
 8020528:	dd1f      	ble.n	802056a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802052a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 802052e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020532:	1415      	asrs	r5, r2, #16
 8020534:	4470      	add	r0, lr
 8020536:	4462      	add	r2, ip
 8020538:	f109 39ff 	add.w	r9, r9, #4294967295
 802053c:	fb0b a505 	mla	r5, fp, r5, sl
 8020540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020544:	eb08 0a05 	add.w	sl, r8, r5
 8020548:	f818 5005 	ldrb.w	r5, [r8, r5]
 802054c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020550:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020554:	f806 5c05 	strb.w	r5, [r6, #-5]
 8020558:	f89a 5002 	ldrb.w	r5, [sl, #2]
 802055c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020560:	e7de      	b.n	8020520 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020562:	2600      	movs	r6, #0
 8020564:	1b9d      	subs	r5, r3, r6
 8020566:	2d00      	cmp	r5, #0
 8020568:	dc38      	bgt.n	80205dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802056a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802056e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020572:	441c      	add	r4, r3
 8020574:	2900      	cmp	r1, #0
 8020576:	dd59      	ble.n	802062c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020578:	ee30 0a04 	vadd.f32	s0, s0, s8
 802057c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802057e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020582:	3901      	subs	r1, #1
 8020584:	eeb0 6a62 	vmov.f32	s12, s5
 8020588:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802058c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020590:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020594:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020598:	eeb0 6a43 	vmov.f32	s12, s6
 802059c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205a0:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80205a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205bc:	ee12 2a90 	vmov	r2, s5
 80205c0:	eef0 2a47 	vmov.f32	s5, s14
 80205c4:	fb92 fef3 	sdiv	lr, r2, r3
 80205c8:	ee13 2a10 	vmov	r2, s6
 80205cc:	eeb0 3a67 	vmov.f32	s6, s15
 80205d0:	fb92 fcf3 	sdiv	ip, r2, r3
 80205d4:	9a01      	ldr	r2, [sp, #4]
 80205d6:	bf08      	it	eq
 80205d8:	4613      	moveq	r3, r2
 80205da:	e772      	b.n	80204c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80205dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80205e0:	d420      	bmi.n	8020624 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80205e2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80205e6:	45cb      	cmp	fp, r9
 80205e8:	dd1c      	ble.n	8020624 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80205ea:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80205ee:	d419      	bmi.n	8020624 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80205f0:	68fd      	ldr	r5, [r7, #12]
 80205f2:	4555      	cmp	r5, sl
 80205f4:	dd16      	ble.n	8020624 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80205f6:	fa0f f58b 	sxth.w	r5, fp
 80205fa:	fb0a 9505 	mla	r5, sl, r5, r9
 80205fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020602:	f818 9005 	ldrb.w	r9, [r8, r5]
 8020606:	eb08 0b05 	add.w	fp, r8, r5
 802060a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 802060e:	f804 9005 	strb.w	r9, [r4, r5]
 8020612:	4425      	add	r5, r4
 8020614:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8020618:	f885 9001 	strb.w	r9, [r5, #1]
 802061c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8020620:	f885 9002 	strb.w	r9, [r5, #2]
 8020624:	4470      	add	r0, lr
 8020626:	4462      	add	r2, ip
 8020628:	3601      	adds	r6, #1
 802062a:	e79b      	b.n	8020564 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802062c:	b003      	add	sp, #12
 802062e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020632 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020636:	b085      	sub	sp, #20
 8020638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802063c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802063e:	9202      	str	r2, [sp, #8]
 8020640:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8020644:	6860      	ldr	r0, [r4, #4]
 8020646:	9203      	str	r2, [sp, #12]
 8020648:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 802064c:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8020650:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8020654:	fb00 2505 	mla	r5, r0, r5, r2
 8020658:	6822      	ldr	r2, [r4, #0]
 802065a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802065e:	4415      	add	r5, r2
 8020660:	f8dc 2000 	ldr.w	r2, [ip]
 8020664:	9201      	str	r2, [sp, #4]
 8020666:	2900      	cmp	r1, #0
 8020668:	dc03      	bgt.n	8020672 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802066a:	9a02      	ldr	r2, [sp, #8]
 802066c:	2a00      	cmp	r2, #0
 802066e:	f340 8122 	ble.w	80208b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020672:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020674:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020678:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802067c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802067e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020682:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020686:	2b00      	cmp	r3, #0
 8020688:	dd0d      	ble.n	80206a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802068a:	1422      	asrs	r2, r4, #16
 802068c:	d405      	bmi.n	802069a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802068e:	4542      	cmp	r2, r8
 8020690:	da03      	bge.n	802069a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020692:	1402      	asrs	r2, r0, #16
 8020694:	d401      	bmi.n	802069a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020696:	42ba      	cmp	r2, r7
 8020698:	db06      	blt.n	80206a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802069a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802069c:	4474      	add	r4, lr
 802069e:	3b01      	subs	r3, #1
 80206a0:	3503      	adds	r5, #3
 80206a2:	4410      	add	r0, r2
 80206a4:	e7ef      	b.n	8020686 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80206a6:	d072      	beq.n	802078e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80206a8:	1e5a      	subs	r2, r3, #1
 80206aa:	fb0e 4602 	mla	r6, lr, r2, r4
 80206ae:	1436      	asrs	r6, r6, #16
 80206b0:	d462      	bmi.n	8020778 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80206b2:	4546      	cmp	r6, r8
 80206b4:	da60      	bge.n	8020778 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80206b6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80206b8:	fb06 0202 	mla	r2, r6, r2, r0
 80206bc:	1412      	asrs	r2, r2, #16
 80206be:	d45b      	bmi.n	8020778 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80206c0:	42ba      	cmp	r2, r7
 80206c2:	da59      	bge.n	8020778 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80206c4:	1cef      	adds	r7, r5, #3
 80206c6:	4699      	mov	r9, r3
 80206c8:	f1b9 0f00 	cmp.w	r9, #0
 80206cc:	dd5a      	ble.n	8020784 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80206ce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80206d2:	1426      	asrs	r6, r4, #16
 80206d4:	1402      	asrs	r2, r0, #16
 80206d6:	fb08 6202 	mla	r2, r8, r2, r6
 80206da:	9e01      	ldr	r6, [sp, #4]
 80206dc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80206e0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80206e4:	d041      	beq.n	802076a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80206e6:	9a03      	ldr	r2, [sp, #12]
 80206e8:	fa5f fb86 	uxtb.w	fp, r6
 80206ec:	fb02 f808 	mul.w	r8, r2, r8
 80206f0:	f108 0201 	add.w	r2, r8, #1
 80206f4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80206f8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80206fc:	1212      	asrs	r2, r2, #8
 80206fe:	fa1f fa82 	uxth.w	sl, r2
 8020702:	43d2      	mvns	r2, r2
 8020704:	fb1b fb0a 	smulbb	fp, fp, sl
 8020708:	b2d2      	uxtb	r2, r2
 802070a:	fb08 b802 	mla	r8, r8, r2, fp
 802070e:	fa1f f888 	uxth.w	r8, r8
 8020712:	f108 0b01 	add.w	fp, r8, #1
 8020716:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802071a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 802071e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020722:	fb1b fb0a 	smulbb	fp, fp, sl
 8020726:	ea4f 2828 	mov.w	r8, r8, asr #8
 802072a:	fb16 fa0a 	smulbb	sl, r6, sl
 802072e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020732:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020736:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 802073a:	fb06 aa02 	mla	sl, r6, r2, sl
 802073e:	fb08 b802 	mla	r8, r8, r2, fp
 8020742:	fa1f fa8a 	uxth.w	sl, sl
 8020746:	fa1f f888 	uxth.w	r8, r8
 802074a:	f10a 0601 	add.w	r6, sl, #1
 802074e:	f108 0b01 	add.w	fp, r8, #1
 8020752:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020756:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802075a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802075e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020762:	f807 ac01 	strb.w	sl, [r7, #-1]
 8020766:	f807 8c02 	strb.w	r8, [r7, #-2]
 802076a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802076c:	4474      	add	r4, lr
 802076e:	3703      	adds	r7, #3
 8020770:	f109 39ff 	add.w	r9, r9, #4294967295
 8020774:	4410      	add	r0, r2
 8020776:	e7a7      	b.n	80206c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020778:	f04f 0800 	mov.w	r8, #0
 802077c:	eba3 0208 	sub.w	r2, r3, r8
 8020780:	2a00      	cmp	r2, #0
 8020782:	dc3b      	bgt.n	80207fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802078c:	441d      	add	r5, r3
 802078e:	2900      	cmp	r1, #0
 8020790:	f340 8091 	ble.w	80208b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020794:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802079a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802079e:	3901      	subs	r1, #1
 80207a0:	eeb0 6a62 	vmov.f32	s12, s5
 80207a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80207a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80207ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207b0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80207b4:	eeb0 6a43 	vmov.f32	s12, s6
 80207b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207bc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80207c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80207d8:	ee12 2a90 	vmov	r2, s5
 80207dc:	eef0 2a47 	vmov.f32	s5, s14
 80207e0:	fb92 fef3 	sdiv	lr, r2, r3
 80207e4:	ee13 2a10 	vmov	r2, s6
 80207e8:	eeb0 3a67 	vmov.f32	s6, s15
 80207ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80207f0:	9a02      	ldr	r2, [sp, #8]
 80207f2:	9312      	str	r3, [sp, #72]	@ 0x48
 80207f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80207f6:	bf08      	it	eq
 80207f8:	4613      	moveq	r3, r2
 80207fa:	e734      	b.n	8020666 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80207fc:	1427      	asrs	r7, r4, #16
 80207fe:	d454      	bmi.n	80208aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020800:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020804:	42be      	cmp	r6, r7
 8020806:	dd50      	ble.n	80208aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020808:	ea5f 4920 	movs.w	r9, r0, asr #16
 802080c:	d44d      	bmi.n	80208aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802080e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020812:	454a      	cmp	r2, r9
 8020814:	dd49      	ble.n	80208aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020816:	b236      	sxth	r6, r6
 8020818:	9a01      	ldr	r2, [sp, #4]
 802081a:	fb09 7606 	mla	r6, r9, r6, r7
 802081e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020822:	0e3a      	lsrs	r2, r7, #24
 8020824:	d041      	beq.n	80208aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020826:	9e03      	ldr	r6, [sp, #12]
 8020828:	fa5f fb87 	uxtb.w	fp, r7
 802082c:	4372      	muls	r2, r6
 802082e:	1c56      	adds	r6, r2, #1
 8020830:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020834:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8020838:	1212      	asrs	r2, r2, #8
 802083a:	f815 9006 	ldrb.w	r9, [r5, r6]
 802083e:	fa1f fa82 	uxth.w	sl, r2
 8020842:	43d2      	mvns	r2, r2
 8020844:	fb1b fb0a 	smulbb	fp, fp, sl
 8020848:	b2d2      	uxtb	r2, r2
 802084a:	fb09 b902 	mla	r9, r9, r2, fp
 802084e:	fa1f f989 	uxth.w	r9, r9
 8020852:	f109 0b01 	add.w	fp, r9, #1
 8020856:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802085a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802085e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020862:	fb1b fb0a 	smulbb	fp, fp, sl
 8020866:	ea4f 2929 	mov.w	r9, r9, asr #8
 802086a:	fb17 fa0a 	smulbb	sl, r7, sl
 802086e:	f805 9006 	strb.w	r9, [r5, r6]
 8020872:	442e      	add	r6, r5
 8020874:	78b7      	ldrb	r7, [r6, #2]
 8020876:	f896 9001 	ldrb.w	r9, [r6, #1]
 802087a:	fb07 aa02 	mla	sl, r7, r2, sl
 802087e:	fb09 b902 	mla	r9, r9, r2, fp
 8020882:	fa1f fa8a 	uxth.w	sl, sl
 8020886:	fa1f f989 	uxth.w	r9, r9
 802088a:	f10a 0701 	add.w	r7, sl, #1
 802088e:	f109 0b01 	add.w	fp, r9, #1
 8020892:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020896:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802089a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802089e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80208a2:	f886 a002 	strb.w	sl, [r6, #2]
 80208a6:	f886 9001 	strb.w	r9, [r6, #1]
 80208aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80208ac:	4474      	add	r4, lr
 80208ae:	f108 0801 	add.w	r8, r8, #1
 80208b2:	4410      	add	r0, r2
 80208b4:	e762      	b.n	802077c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80208b6:	b005      	add	sp, #20
 80208b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208c0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80208c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80208c6:	9201      	str	r2, [sp, #4]
 80208c8:	6860      	ldr	r0, [r4, #4]
 80208ca:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80208ce:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80208d2:	fb00 2505 	mla	r5, r0, r5, r2
 80208d6:	6822      	ldr	r2, [r4, #0]
 80208d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80208dc:	4415      	add	r5, r2
 80208de:	f8dc 2000 	ldr.w	r2, [ip]
 80208e2:	9200      	str	r2, [sp, #0]
 80208e4:	2900      	cmp	r1, #0
 80208e6:	dc03      	bgt.n	80208f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80208e8:	9a01      	ldr	r2, [sp, #4]
 80208ea:	2a00      	cmp	r2, #0
 80208ec:	f340 812b 	ble.w	8020b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80208f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80208f2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80208f6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80208fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80208fc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020900:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020904:	2b00      	cmp	r3, #0
 8020906:	dd0e      	ble.n	8020926 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020908:	1422      	asrs	r2, r4, #16
 802090a:	d405      	bmi.n	8020918 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802090c:	4572      	cmp	r2, lr
 802090e:	da03      	bge.n	8020918 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020910:	1402      	asrs	r2, r0, #16
 8020912:	d401      	bmi.n	8020918 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020914:	42ba      	cmp	r2, r7
 8020916:	db07      	blt.n	8020928 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020918:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802091a:	3b01      	subs	r3, #1
 802091c:	3503      	adds	r5, #3
 802091e:	4414      	add	r4, r2
 8020920:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020922:	4410      	add	r0, r2
 8020924:	e7ee      	b.n	8020904 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020926:	d06f      	beq.n	8020a08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020928:	1e5a      	subs	r2, r3, #1
 802092a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 802092c:	fb06 4602 	mla	r6, r6, r2, r4
 8020930:	1436      	asrs	r6, r6, #16
 8020932:	d45e      	bmi.n	80209f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020934:	4576      	cmp	r6, lr
 8020936:	da5c      	bge.n	80209f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020938:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 802093a:	fb06 0202 	mla	r2, r6, r2, r0
 802093e:	1412      	asrs	r2, r2, #16
 8020940:	d457      	bmi.n	80209f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020942:	42ba      	cmp	r2, r7
 8020944:	da55      	bge.n	80209f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020946:	1cee      	adds	r6, r5, #3
 8020948:	469a      	mov	sl, r3
 802094a:	f1ba 0f00 	cmp.w	sl, #0
 802094e:	dd56      	ble.n	80209fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020950:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020954:	1427      	asrs	r7, r4, #16
 8020956:	1402      	asrs	r2, r0, #16
 8020958:	fb0e 7202 	mla	r2, lr, r2, r7
 802095c:	9f00      	ldr	r7, [sp, #0]
 802095e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020962:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8020966:	d03c      	beq.n	80209e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020968:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802096c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020970:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020974:	fa5f f28e 	uxtb.w	r2, lr
 8020978:	b2ff      	uxtb	r7, r7
 802097a:	f000 80dd 	beq.w	8020b38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802097e:	fa1f f882 	uxth.w	r8, r2
 8020982:	43d2      	mvns	r2, r2
 8020984:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8020988:	fb17 f708 	smulbb	r7, r7, r8
 802098c:	b2d2      	uxtb	r2, r2
 802098e:	fb19 f908 	smulbb	r9, r9, r8
 8020992:	fb0e 7702 	mla	r7, lr, r2, r7
 8020996:	fb1b f808 	smulbb	r8, fp, r8
 802099a:	b2bf      	uxth	r7, r7
 802099c:	f107 0e01 	add.w	lr, r7, #1
 80209a0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80209a4:	123f      	asrs	r7, r7, #8
 80209a6:	f806 7c03 	strb.w	r7, [r6, #-3]
 80209aa:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80209ae:	fb07 9902 	mla	r9, r7, r2, r9
 80209b2:	fa1f f989 	uxth.w	r9, r9
 80209b6:	f109 0701 	add.w	r7, r9, #1
 80209ba:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80209be:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80209c2:	fb07 8802 	mla	r8, r7, r2, r8
 80209c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209ca:	fa1f f888 	uxth.w	r8, r8
 80209ce:	f806 9c02 	strb.w	r9, [r6, #-2]
 80209d2:	f108 0201 	add.w	r2, r8, #1
 80209d6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80209da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80209de:	f806 8c01 	strb.w	r8, [r6, #-1]
 80209e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80209e4:	3603      	adds	r6, #3
 80209e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209ea:	4414      	add	r4, r2
 80209ec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80209ee:	4410      	add	r0, r2
 80209f0:	e7ab      	b.n	802094a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80209f2:	f04f 0e00 	mov.w	lr, #0
 80209f6:	eba3 020e 	sub.w	r2, r3, lr
 80209fa:	2a00      	cmp	r2, #0
 80209fc:	dc3d      	bgt.n	8020a7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80209fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a06:	441d      	add	r5, r3
 8020a08:	2900      	cmp	r1, #0
 8020a0a:	f340 809c 	ble.w	8020b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020a0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a18:	3901      	subs	r1, #1
 8020a1a:	eeb0 6a62 	vmov.f32	s12, s5
 8020a1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020a22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a2a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020a2e:	eeb0 6a43 	vmov.f32	s12, s6
 8020a32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a36:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020a3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a52:	ee12 2a90 	vmov	r2, s5
 8020a56:	eef0 2a47 	vmov.f32	s5, s14
 8020a5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a5e:	ee13 2a10 	vmov	r2, s6
 8020a62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a66:	eeb0 3a67 	vmov.f32	s6, s15
 8020a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a6e:	9a01      	ldr	r2, [sp, #4]
 8020a70:	9310      	str	r3, [sp, #64]	@ 0x40
 8020a72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a74:	bf08      	it	eq
 8020a76:	4613      	moveq	r3, r2
 8020a78:	e734      	b.n	80208e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020a7a:	1427      	asrs	r7, r4, #16
 8020a7c:	d44d      	bmi.n	8020b1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a7e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020a82:	42be      	cmp	r6, r7
 8020a84:	dd49      	ble.n	8020b1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a86:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020a8a:	d446      	bmi.n	8020b1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a8c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020a90:	4542      	cmp	r2, r8
 8020a92:	dd42      	ble.n	8020b1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020a94:	b236      	sxth	r6, r6
 8020a96:	9a00      	ldr	r2, [sp, #0]
 8020a98:	fb08 7606 	mla	r6, r8, r6, r7
 8020a9c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020aa0:	0e3a      	lsrs	r2, r7, #24
 8020aa2:	d03a      	beq.n	8020b1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020aa4:	2aff      	cmp	r2, #255	@ 0xff
 8020aa6:	b2d6      	uxtb	r6, r2
 8020aa8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020aac:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020ab0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8020ab4:	b2ff      	uxtb	r7, r7
 8020ab6:	d037      	beq.n	8020b28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020ab8:	fa1f f986 	uxth.w	r9, r6
 8020abc:	4472      	add	r2, lr
 8020abe:	43f6      	mvns	r6, r6
 8020ac0:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020ac4:	fb17 f709 	smulbb	r7, r7, r9
 8020ac8:	fb1a fa09 	smulbb	sl, sl, r9
 8020acc:	b2f6      	uxtb	r6, r6
 8020ace:	fb1b f909 	smulbb	r9, fp, r9
 8020ad2:	fb08 7706 	mla	r7, r8, r6, r7
 8020ad6:	b2bf      	uxth	r7, r7
 8020ad8:	f107 0801 	add.w	r8, r7, #1
 8020adc:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020ae0:	123f      	asrs	r7, r7, #8
 8020ae2:	54af      	strb	r7, [r5, r2]
 8020ae4:	442a      	add	r2, r5
 8020ae6:	7857      	ldrb	r7, [r2, #1]
 8020ae8:	fb07 aa06 	mla	sl, r7, r6, sl
 8020aec:	fa1f fa8a 	uxth.w	sl, sl
 8020af0:	f10a 0701 	add.w	r7, sl, #1
 8020af4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020af8:	7897      	ldrb	r7, [r2, #2]
 8020afa:	fb07 9906 	mla	r9, r7, r6, r9
 8020afe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020b02:	fa1f f989 	uxth.w	r9, r9
 8020b06:	f882 a001 	strb.w	sl, [r2, #1]
 8020b0a:	f109 0601 	add.w	r6, r9, #1
 8020b0e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020b12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b16:	f882 9002 	strb.w	r9, [r2, #2]
 8020b1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b1c:	f10e 0e01 	add.w	lr, lr, #1
 8020b20:	4414      	add	r4, r2
 8020b22:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020b24:	4410      	add	r0, r2
 8020b26:	e766      	b.n	80209f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020b28:	4472      	add	r2, lr
 8020b2a:	54af      	strb	r7, [r5, r2]
 8020b2c:	442a      	add	r2, r5
 8020b2e:	f882 a001 	strb.w	sl, [r2, #1]
 8020b32:	f882 b002 	strb.w	fp, [r2, #2]
 8020b36:	e7f0      	b.n	8020b1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020b38:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020b3c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020b40:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020b44:	e74d      	b.n	80209e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020b46:	b003      	add	sp, #12
 8020b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b50:	b087      	sub	sp, #28
 8020b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020b56:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020b58:	9204      	str	r2, [sp, #16]
 8020b5a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020b5e:	6860      	ldr	r0, [r4, #4]
 8020b60:	9205      	str	r2, [sp, #20]
 8020b62:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8020b66:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8020b6a:	9101      	str	r1, [sp, #4]
 8020b6c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8020b70:	fb00 2505 	mla	r5, r0, r5, r2
 8020b74:	6822      	ldr	r2, [r4, #0]
 8020b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b7a:	4415      	add	r5, r2
 8020b7c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020b80:	3201      	adds	r2, #1
 8020b82:	f022 0201 	bic.w	r2, r2, #1
 8020b86:	9202      	str	r2, [sp, #8]
 8020b88:	f8dc 2000 	ldr.w	r2, [ip]
 8020b8c:	9203      	str	r2, [sp, #12]
 8020b8e:	9a01      	ldr	r2, [sp, #4]
 8020b90:	2a00      	cmp	r2, #0
 8020b92:	dc03      	bgt.n	8020b9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020b94:	9a04      	ldr	r2, [sp, #16]
 8020b96:	2a00      	cmp	r2, #0
 8020b98:	f340 8135 	ble.w	8020e06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020b9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020ba2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020ba6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020ba8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020bac:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	dd0d      	ble.n	8020bd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020bb4:	1422      	asrs	r2, r4, #16
 8020bb6:	d405      	bmi.n	8020bc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020bb8:	4542      	cmp	r2, r8
 8020bba:	da03      	bge.n	8020bc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020bbc:	1402      	asrs	r2, r0, #16
 8020bbe:	d401      	bmi.n	8020bc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020bc0:	42ba      	cmp	r2, r7
 8020bc2:	db06      	blt.n	8020bd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020bc4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020bc6:	4474      	add	r4, lr
 8020bc8:	3b01      	subs	r3, #1
 8020bca:	3503      	adds	r5, #3
 8020bcc:	4410      	add	r0, r2
 8020bce:	e7ef      	b.n	8020bb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020bd0:	d077      	beq.n	8020cc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020bd2:	1e5a      	subs	r2, r3, #1
 8020bd4:	fb0e 4602 	mla	r6, lr, r2, r4
 8020bd8:	1436      	asrs	r6, r6, #16
 8020bda:	d469      	bmi.n	8020cb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020bdc:	4546      	cmp	r6, r8
 8020bde:	da67      	bge.n	8020cb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020be0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8020be2:	fb06 0202 	mla	r2, r6, r2, r0
 8020be6:	1412      	asrs	r2, r2, #16
 8020be8:	d462      	bmi.n	8020cb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020bea:	42ba      	cmp	r2, r7
 8020bec:	da60      	bge.n	8020cb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020bee:	1cee      	adds	r6, r5, #3
 8020bf0:	4699      	mov	r9, r3
 8020bf2:	f1b9 0f00 	cmp.w	r9, #0
 8020bf6:	dd5f      	ble.n	8020cb8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020bf8:	1422      	asrs	r2, r4, #16
 8020bfa:	9902      	ldr	r1, [sp, #8]
 8020bfc:	1407      	asrs	r7, r0, #16
 8020bfe:	fb01 2707 	mla	r7, r1, r7, r2
 8020c02:	9903      	ldr	r1, [sp, #12]
 8020c04:	087a      	lsrs	r2, r7, #1
 8020c06:	5c8a      	ldrb	r2, [r1, r2]
 8020c08:	07f9      	lsls	r1, r7, #31
 8020c0a:	bf54      	ite	pl
 8020c0c:	f002 020f 	andpl.w	r2, r2, #15
 8020c10:	1112      	asrmi	r2, r2, #4
 8020c12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020c16:	b2d2      	uxtb	r2, r2
 8020c18:	2a00      	cmp	r2, #0
 8020c1a:	d042      	beq.n	8020ca2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020c1c:	497b      	ldr	r1, [pc, #492]	@ (8020e0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020c1e:	680f      	ldr	r7, [r1, #0]
 8020c20:	9905      	ldr	r1, [sp, #20]
 8020c22:	fa5f fb87 	uxtb.w	fp, r7
 8020c26:	434a      	muls	r2, r1
 8020c28:	f102 0801 	add.w	r8, r2, #1
 8020c2c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8020c30:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8020c34:	1212      	asrs	r2, r2, #8
 8020c36:	fa1f fa82 	uxth.w	sl, r2
 8020c3a:	43d2      	mvns	r2, r2
 8020c3c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c40:	b2d2      	uxtb	r2, r2
 8020c42:	fb08 b802 	mla	r8, r8, r2, fp
 8020c46:	fa1f f888 	uxth.w	r8, r8
 8020c4a:	f108 0b01 	add.w	fp, r8, #1
 8020c4e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020c52:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020c56:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020c5a:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c62:	fb17 fa0a 	smulbb	sl, r7, sl
 8020c66:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020c6a:	f806 8c03 	strb.w	r8, [r6, #-3]
 8020c6e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8020c72:	fb07 aa02 	mla	sl, r7, r2, sl
 8020c76:	fb08 b802 	mla	r8, r8, r2, fp
 8020c7a:	fa1f fa8a 	uxth.w	sl, sl
 8020c7e:	fa1f f888 	uxth.w	r8, r8
 8020c82:	f10a 0701 	add.w	r7, sl, #1
 8020c86:	f108 0b01 	add.w	fp, r8, #1
 8020c8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020c8e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020c92:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020c96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c9a:	f806 ac01 	strb.w	sl, [r6, #-1]
 8020c9e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8020ca2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020ca4:	4474      	add	r4, lr
 8020ca6:	3603      	adds	r6, #3
 8020ca8:	f109 39ff 	add.w	r9, r9, #4294967295
 8020cac:	4410      	add	r0, r2
 8020cae:	e7a0      	b.n	8020bf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020cb0:	2700      	movs	r7, #0
 8020cb2:	1bda      	subs	r2, r3, r7
 8020cb4:	2a00      	cmp	r2, #0
 8020cb6:	dc3e      	bgt.n	8020d36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020cb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020cbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cc0:	441d      	add	r5, r3
 8020cc2:	9b01      	ldr	r3, [sp, #4]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	f340 809e 	ble.w	8020e06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020cca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020cce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020cd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020cd4:	eeb0 6a62 	vmov.f32	s12, s5
 8020cd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020cdc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ce0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ce4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020ce8:	eeb0 6a43 	vmov.f32	s12, s6
 8020cec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020cf0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020cf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020cf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020cfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d0c:	ee12 2a90 	vmov	r2, s5
 8020d10:	eef0 2a47 	vmov.f32	s5, s14
 8020d14:	fb92 fef3 	sdiv	lr, r2, r3
 8020d18:	ee13 2a10 	vmov	r2, s6
 8020d1c:	eeb0 3a67 	vmov.f32	s6, s15
 8020d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d24:	9314      	str	r3, [sp, #80]	@ 0x50
 8020d26:	9b01      	ldr	r3, [sp, #4]
 8020d28:	9a04      	ldr	r2, [sp, #16]
 8020d2a:	3b01      	subs	r3, #1
 8020d2c:	9301      	str	r3, [sp, #4]
 8020d2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d30:	bf08      	it	eq
 8020d32:	4613      	moveq	r3, r2
 8020d34:	e72b      	b.n	8020b8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020d36:	1426      	asrs	r6, r4, #16
 8020d38:	d460      	bmi.n	8020dfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d3a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020d3e:	42b2      	cmp	r2, r6
 8020d40:	dd5c      	ble.n	8020dfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d42:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020d46:	d459      	bmi.n	8020dfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d48:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020d4c:	4542      	cmp	r2, r8
 8020d4e:	dd55      	ble.n	8020dfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d50:	9a02      	ldr	r2, [sp, #8]
 8020d52:	9903      	ldr	r1, [sp, #12]
 8020d54:	fb08 6602 	mla	r6, r8, r2, r6
 8020d58:	0872      	lsrs	r2, r6, #1
 8020d5a:	07f6      	lsls	r6, r6, #31
 8020d5c:	5c8a      	ldrb	r2, [r1, r2]
 8020d5e:	bf54      	ite	pl
 8020d60:	f002 020f 	andpl.w	r2, r2, #15
 8020d64:	1112      	asrmi	r2, r2, #4
 8020d66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020d6a:	b2d2      	uxtb	r2, r2
 8020d6c:	2a00      	cmp	r2, #0
 8020d6e:	d045      	beq.n	8020dfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d70:	4926      	ldr	r1, [pc, #152]	@ (8020e0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020d72:	f8d1 8000 	ldr.w	r8, [r1]
 8020d76:	9905      	ldr	r1, [sp, #20]
 8020d78:	fa5f fb88 	uxtb.w	fp, r8
 8020d7c:	434a      	muls	r2, r1
 8020d7e:	1c56      	adds	r6, r2, #1
 8020d80:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020d84:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8020d88:	1212      	asrs	r2, r2, #8
 8020d8a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020d8e:	fa1f fa82 	uxth.w	sl, r2
 8020d92:	43d2      	mvns	r2, r2
 8020d94:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d98:	b2d2      	uxtb	r2, r2
 8020d9a:	fb09 b902 	mla	r9, r9, r2, fp
 8020d9e:	fa1f f989 	uxth.w	r9, r9
 8020da2:	f109 0b01 	add.w	fp, r9, #1
 8020da6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020daa:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8020dae:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8020db2:	fb1b fb0a 	smulbb	fp, fp, sl
 8020db6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020dba:	fb18 fa0a 	smulbb	sl, r8, sl
 8020dbe:	f805 9006 	strb.w	r9, [r5, r6]
 8020dc2:	442e      	add	r6, r5
 8020dc4:	f896 8002 	ldrb.w	r8, [r6, #2]
 8020dc8:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020dcc:	fb08 aa02 	mla	sl, r8, r2, sl
 8020dd0:	fb09 b902 	mla	r9, r9, r2, fp
 8020dd4:	fa1f fa8a 	uxth.w	sl, sl
 8020dd8:	fa1f f989 	uxth.w	r9, r9
 8020ddc:	f10a 0801 	add.w	r8, sl, #1
 8020de0:	f109 0b01 	add.w	fp, r9, #1
 8020de4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8020de8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020dec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020df0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020df4:	f886 a002 	strb.w	sl, [r6, #2]
 8020df8:	f886 9001 	strb.w	r9, [r6, #1]
 8020dfc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020dfe:	4474      	add	r4, lr
 8020e00:	3701      	adds	r7, #1
 8020e02:	4410      	add	r0, r2
 8020e04:	e755      	b.n	8020cb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8020e06:	b007      	add	sp, #28
 8020e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e0c:	24015c58 	.word	0x24015c58

08020e10 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e14:	b085      	sub	sp, #20
 8020e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020e1a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020e1c:	9203      	str	r2, [sp, #12]
 8020e1e:	6860      	ldr	r0, [r4, #4]
 8020e20:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8020e24:	9100      	str	r1, [sp, #0]
 8020e26:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8020e2a:	fb00 2606 	mla	r6, r0, r6, r2
 8020e2e:	6822      	ldr	r2, [r4, #0]
 8020e30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020e34:	4416      	add	r6, r2
 8020e36:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020e3a:	3201      	adds	r2, #1
 8020e3c:	f022 0201 	bic.w	r2, r2, #1
 8020e40:	9201      	str	r2, [sp, #4]
 8020e42:	f8dc 2000 	ldr.w	r2, [ip]
 8020e46:	9202      	str	r2, [sp, #8]
 8020e48:	9a00      	ldr	r2, [sp, #0]
 8020e4a:	2a00      	cmp	r2, #0
 8020e4c:	dc03      	bgt.n	8020e56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020e4e:	9a03      	ldr	r2, [sp, #12]
 8020e50:	2a00      	cmp	r2, #0
 8020e52:	f340 8140 	ble.w	80210d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020e56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020e58:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020e5c:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8020e60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020e62:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020e66:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	dd0e      	ble.n	8020e8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e6e:	142a      	asrs	r2, r5, #16
 8020e70:	d405      	bmi.n	8020e7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e72:	4572      	cmp	r2, lr
 8020e74:	da03      	bge.n	8020e7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e76:	1422      	asrs	r2, r4, #16
 8020e78:	d401      	bmi.n	8020e7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e7a:	42ba      	cmp	r2, r7
 8020e7c:	db07      	blt.n	8020e8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020e7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020e80:	3b01      	subs	r3, #1
 8020e82:	3603      	adds	r6, #3
 8020e84:	4415      	add	r5, r2
 8020e86:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020e88:	4414      	add	r4, r2
 8020e8a:	e7ee      	b.n	8020e6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020e8c:	d072      	beq.n	8020f74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e8e:	1e5a      	subs	r2, r3, #1
 8020e90:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020e92:	fb00 5002 	mla	r0, r0, r2, r5
 8020e96:	1400      	asrs	r0, r0, #16
 8020e98:	d463      	bmi.n	8020f62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020e9a:	4570      	cmp	r0, lr
 8020e9c:	da61      	bge.n	8020f62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020e9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020ea0:	fb00 4202 	mla	r2, r0, r2, r4
 8020ea4:	1412      	asrs	r2, r2, #16
 8020ea6:	d45c      	bmi.n	8020f62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020ea8:	42ba      	cmp	r2, r7
 8020eaa:	da5a      	bge.n	8020f62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020eac:	1cf0      	adds	r0, r6, #3
 8020eae:	469a      	mov	sl, r3
 8020eb0:	f1ba 0f00 	cmp.w	sl, #0
 8020eb4:	dd59      	ble.n	8020f6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8020eb6:	142a      	asrs	r2, r5, #16
 8020eb8:	9901      	ldr	r1, [sp, #4]
 8020eba:	1427      	asrs	r7, r4, #16
 8020ebc:	fb01 2707 	mla	r7, r1, r7, r2
 8020ec0:	9902      	ldr	r1, [sp, #8]
 8020ec2:	087a      	lsrs	r2, r7, #1
 8020ec4:	5c8a      	ldrb	r2, [r1, r2]
 8020ec6:	07f9      	lsls	r1, r7, #31
 8020ec8:	bf54      	ite	pl
 8020eca:	f002 020f 	andpl.w	r2, r2, #15
 8020ece:	1112      	asrmi	r2, r2, #4
 8020ed0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020ed4:	b2d2      	uxtb	r2, r2
 8020ed6:	2a00      	cmp	r2, #0
 8020ed8:	d03b      	beq.n	8020f52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020eda:	4980      	ldr	r1, [pc, #512]	@ (80210dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8020edc:	2aff      	cmp	r2, #255	@ 0xff
 8020ede:	680f      	ldr	r7, [r1, #0]
 8020ee0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020ee4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020ee8:	b2ff      	uxtb	r7, r7
 8020eea:	f000 80ed 	beq.w	80210c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8020eee:	fa1f f882 	uxth.w	r8, r2
 8020ef2:	43d2      	mvns	r2, r2
 8020ef4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8020ef8:	fb17 f708 	smulbb	r7, r7, r8
 8020efc:	b2d2      	uxtb	r2, r2
 8020efe:	fb19 f908 	smulbb	r9, r9, r8
 8020f02:	fb0e 7702 	mla	r7, lr, r2, r7
 8020f06:	fb1b f808 	smulbb	r8, fp, r8
 8020f0a:	b2bf      	uxth	r7, r7
 8020f0c:	f107 0e01 	add.w	lr, r7, #1
 8020f10:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020f14:	123f      	asrs	r7, r7, #8
 8020f16:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020f1a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8020f1e:	fb07 9902 	mla	r9, r7, r2, r9
 8020f22:	fa1f f989 	uxth.w	r9, r9
 8020f26:	f109 0701 	add.w	r7, r9, #1
 8020f2a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020f2e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8020f32:	fb07 8802 	mla	r8, r7, r2, r8
 8020f36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f3a:	fa1f f888 	uxth.w	r8, r8
 8020f3e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020f42:	f108 0201 	add.w	r2, r8, #1
 8020f46:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020f4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020f4e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8020f52:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020f54:	3003      	adds	r0, #3
 8020f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f5a:	4415      	add	r5, r2
 8020f5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020f5e:	4414      	add	r4, r2
 8020f60:	e7a6      	b.n	8020eb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020f62:	2700      	movs	r7, #0
 8020f64:	1bda      	subs	r2, r3, r7
 8020f66:	2a00      	cmp	r2, #0
 8020f68:	dc40      	bgt.n	8020fec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020f6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f72:	441e      	add	r6, r3
 8020f74:	9b00      	ldr	r3, [sp, #0]
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	f340 80ad 	ble.w	80210d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020f7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f86:	eeb0 6a62 	vmov.f32	s12, s5
 8020f8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020f8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f96:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020f9a:	eeb0 6a43 	vmov.f32	s12, s6
 8020f9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020fa2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020fa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020faa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020fae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020fb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020fb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020fba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020fbe:	ee12 2a90 	vmov	r2, s5
 8020fc2:	eef0 2a47 	vmov.f32	s5, s14
 8020fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fca:	ee13 2a10 	vmov	r2, s6
 8020fce:	9311      	str	r3, [sp, #68]	@ 0x44
 8020fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fd2:	eeb0 3a67 	vmov.f32	s6, s15
 8020fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fda:	9312      	str	r3, [sp, #72]	@ 0x48
 8020fdc:	9b00      	ldr	r3, [sp, #0]
 8020fde:	9a03      	ldr	r2, [sp, #12]
 8020fe0:	3b01      	subs	r3, #1
 8020fe2:	9300      	str	r3, [sp, #0]
 8020fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fe6:	bf08      	it	eq
 8020fe8:	4613      	moveq	r3, r2
 8020fea:	e72d      	b.n	8020e48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020fec:	1428      	asrs	r0, r5, #16
 8020fee:	d45c      	bmi.n	80210aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020ff0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020ff4:	4282      	cmp	r2, r0
 8020ff6:	dd58      	ble.n	80210aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020ff8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020ffc:	d455      	bmi.n	80210aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020ffe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8021002:	4572      	cmp	r2, lr
 8021004:	dd51      	ble.n	80210aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021006:	9a01      	ldr	r2, [sp, #4]
 8021008:	9902      	ldr	r1, [sp, #8]
 802100a:	fb0e 0002 	mla	r0, lr, r2, r0
 802100e:	0842      	lsrs	r2, r0, #1
 8021010:	07c0      	lsls	r0, r0, #31
 8021012:	5c8a      	ldrb	r2, [r1, r2]
 8021014:	bf54      	ite	pl
 8021016:	f002 020f 	andpl.w	r2, r2, #15
 802101a:	1112      	asrmi	r2, r2, #4
 802101c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021020:	b2d2      	uxtb	r2, r2
 8021022:	2a00      	cmp	r2, #0
 8021024:	d041      	beq.n	80210aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021026:	492d      	ldr	r1, [pc, #180]	@ (80210dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8021028:	2aff      	cmp	r2, #255	@ 0xff
 802102a:	6808      	ldr	r0, [r1, #0]
 802102c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8021030:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021034:	fa5f fe80 	uxtb.w	lr, r0
 8021038:	ea4f 0047 	mov.w	r0, r7, lsl #1
 802103c:	d03b      	beq.n	80210b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802103e:	fa1f f982 	uxth.w	r9, r2
 8021042:	4438      	add	r0, r7
 8021044:	43d2      	mvns	r2, r2
 8021046:	f816 8000 	ldrb.w	r8, [r6, r0]
 802104a:	fb1e fe09 	smulbb	lr, lr, r9
 802104e:	fb1a fa09 	smulbb	sl, sl, r9
 8021052:	b2d2      	uxtb	r2, r2
 8021054:	fb1b f909 	smulbb	r9, fp, r9
 8021058:	fb08 ee02 	mla	lr, r8, r2, lr
 802105c:	fa1f fe8e 	uxth.w	lr, lr
 8021060:	f10e 0801 	add.w	r8, lr, #1
 8021064:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8021068:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802106c:	f806 e000 	strb.w	lr, [r6, r0]
 8021070:	4430      	add	r0, r6
 8021072:	f890 e001 	ldrb.w	lr, [r0, #1]
 8021076:	fb0e aa02 	mla	sl, lr, r2, sl
 802107a:	fa1f fa8a 	uxth.w	sl, sl
 802107e:	f10a 0e01 	add.w	lr, sl, #1
 8021082:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8021086:	f890 e002 	ldrb.w	lr, [r0, #2]
 802108a:	fb0e 9902 	mla	r9, lr, r2, r9
 802108e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021092:	fa1f f989 	uxth.w	r9, r9
 8021096:	f880 a001 	strb.w	sl, [r0, #1]
 802109a:	f109 0201 	add.w	r2, r9, #1
 802109e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80210a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80210a6:	f880 9002 	strb.w	r9, [r0, #2]
 80210aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80210ac:	3701      	adds	r7, #1
 80210ae:	4415      	add	r5, r2
 80210b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80210b2:	4414      	add	r4, r2
 80210b4:	e756      	b.n	8020f64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80210b6:	4438      	add	r0, r7
 80210b8:	f806 e000 	strb.w	lr, [r6, r0]
 80210bc:	4430      	add	r0, r6
 80210be:	f880 a001 	strb.w	sl, [r0, #1]
 80210c2:	f880 b002 	strb.w	fp, [r0, #2]
 80210c6:	e7f0      	b.n	80210aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80210c8:	f800 7c03 	strb.w	r7, [r0, #-3]
 80210cc:	f800 9c02 	strb.w	r9, [r0, #-2]
 80210d0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80210d4:	e73d      	b.n	8020f52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80210d6:	b005      	add	sp, #20
 80210d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210dc:	24015c58 	.word	0x24015c58

080210e0 <_ZN8touchgfx8LCD24bppD1Ev>:
 80210e0:	4770      	bx	lr

080210e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 80210e2:	4770      	bx	lr

080210e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 80210e4:	4770      	bx	lr

080210e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 80210e6:	4770      	bx	lr

080210e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80210e8:	4770      	bx	lr

080210ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80210ea:	4770      	bx	lr

080210ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80210ec:	4770      	bx	lr

080210ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80210ee:	4770      	bx	lr

080210f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80210f0:	4770      	bx	lr

080210f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80210f2:	4770      	bx	lr

080210f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80210f4:	4770      	bx	lr

080210f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210f6:	4770      	bx	lr

080210f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210f8:	4770      	bx	lr

080210fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80210fa:	4770      	bx	lr

080210fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210fc:	4770      	bx	lr

080210fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80210fe:	4770      	bx	lr

08021100 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021100:	4770      	bx	lr

08021102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021102:	4770      	bx	lr

08021104 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021104:	4770      	bx	lr

08021106 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021106:	4770      	bx	lr

08021108 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021108:	4770      	bx	lr

0802110a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802110a:	4770      	bx	lr

0802110c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802110c:	4770      	bx	lr

0802110e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802110e:	4770      	bx	lr

08021110 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021112:	4606      	mov	r6, r0
 8021114:	b087      	sub	sp, #28
 8021116:	4615      	mov	r5, r2
 8021118:	461f      	mov	r7, r3
 802111a:	b353      	cbz	r3, 8021172 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802111c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8021120:	2b00      	cmp	r3, #0
 8021122:	dd26      	ble.n	8021172 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021124:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021128:	2b00      	cmp	r3, #0
 802112a:	dd22      	ble.n	8021172 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802112c:	6808      	ldr	r0, [r1, #0]
 802112e:	aa04      	add	r2, sp, #16
 8021130:	6849      	ldr	r1, [r1, #4]
 8021132:	4c1b      	ldr	r4, [pc, #108]	@ (80211a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021134:	c203      	stmia	r2!, {r0, r1}
 8021136:	a804      	add	r0, sp, #16
 8021138:	f7fa ffd4 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802113c:	6820      	ldr	r0, [r4, #0]
 802113e:	6803      	ldr	r3, [r0, #0]
 8021140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021142:	4798      	blx	r3
 8021144:	2fff      	cmp	r7, #255	@ 0xff
 8021146:	d016      	beq.n	8021176 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021148:	f010 0f08 	tst.w	r0, #8
 802114c:	6820      	ldr	r0, [r4, #0]
 802114e:	d015      	beq.n	802117c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021150:	2400      	movs	r4, #0
 8021152:	6801      	ldr	r1, [r0, #0]
 8021154:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021158:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802115c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8021160:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021164:	9401      	str	r4, [sp, #4]
 8021166:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802116a:	9400      	str	r4, [sp, #0]
 802116c:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 802116e:	4629      	mov	r1, r5
 8021170:	47a0      	blx	r4
 8021172:	b007      	add	sp, #28
 8021174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021176:	f010 0f02 	tst.w	r0, #2
 802117a:	e7e7      	b.n	802114c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 802117c:	6803      	ldr	r3, [r0, #0]
 802117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021180:	4798      	blx	r3
 8021182:	4b08      	ldr	r3, [pc, #32]	@ (80211a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8021184:	4601      	mov	r1, r0
 8021186:	4630      	mov	r0, r6
 8021188:	881a      	ldrh	r2, [r3, #0]
 802118a:	6833      	ldr	r3, [r6, #0]
 802118c:	e9cd 5700 	strd	r5, r7, [sp]
 8021190:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8021192:	ab04      	add	r3, sp, #16
 8021194:	47a8      	blx	r5
 8021196:	6820      	ldr	r0, [r4, #0]
 8021198:	6803      	ldr	r3, [r0, #0]
 802119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802119c:	4798      	blx	r3
 802119e:	e7e8      	b.n	8021172 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80211a0:	24015c48 	.word	0x24015c48
 80211a4:	24015c42 	.word	0x24015c42

080211a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80211a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80211ac:	b08b      	sub	sp, #44	@ 0x2c
 80211ae:	460d      	mov	r5, r1
 80211b0:	4616      	mov	r6, r2
 80211b2:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80211b6:	f1b8 0f00 	cmp.w	r8, #0
 80211ba:	d047      	beq.n	802124c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80211bc:	6810      	ldr	r0, [r2, #0]
 80211be:	ac06      	add	r4, sp, #24
 80211c0:	6851      	ldr	r1, [r2, #4]
 80211c2:	4f51      	ldr	r7, [pc, #324]	@ (8021308 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80211c4:	c403      	stmia	r4!, {r0, r1}
 80211c6:	6818      	ldr	r0, [r3, #0]
 80211c8:	ac08      	add	r4, sp, #32
 80211ca:	6859      	ldr	r1, [r3, #4]
 80211cc:	c403      	stmia	r4!, {r0, r1}
 80211ce:	a806      	add	r0, sp, #24
 80211d0:	f7fa ff88 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211d4:	4631      	mov	r1, r6
 80211d6:	a808      	add	r0, sp, #32
 80211d8:	f7fa ffac 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80211e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80211e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80211e8:	6838      	ldr	r0, [r7, #0]
 80211ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 80211ee:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80211f2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 80211f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80211fa:	440d      	add	r5, r1
 80211fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021200:	440a      	add	r2, r1
 8021202:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021206:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802120a:	4413      	add	r3, r2
 802120c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8021210:	6803      	ldr	r3, [r0, #0]
 8021212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021214:	4798      	blx	r3
 8021216:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802121a:	d01a      	beq.n	8021252 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 802121c:	f010 0f04 	tst.w	r0, #4
 8021220:	6838      	ldr	r0, [r7, #0]
 8021222:	d019      	beq.n	8021258 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8021224:	2100      	movs	r1, #0
 8021226:	6807      	ldr	r7, [r0, #0]
 8021228:	b2a4      	uxth	r4, r4
 802122a:	f8cd 800c 	str.w	r8, [sp, #12]
 802122e:	b2b6      	uxth	r6, r6
 8021230:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8021234:	9401      	str	r4, [sp, #4]
 8021236:	9600      	str	r6, [sp, #0]
 8021238:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802123c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8021240:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021244:	9102      	str	r1, [sp, #8]
 8021246:	4629      	mov	r1, r5
 8021248:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 802124a:	47a0      	blx	r4
 802124c:	b00b      	add	sp, #44	@ 0x2c
 802124e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021252:	f010 0f01 	tst.w	r0, #1
 8021256:	e7e3      	b.n	8021220 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8021258:	6803      	ldr	r3, [r0, #0]
 802125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802125c:	4798      	blx	r3
 802125e:	4a2b      	ldr	r2, [pc, #172]	@ (802130c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8021260:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8021264:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021268:	8813      	ldrh	r3, [r2, #0]
 802126a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 802126e:	fb03 f404 	mul.w	r4, r3, r4
 8021272:	fb03 c101 	mla	r1, r3, r1, ip
 8021276:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802127a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802127e:	4408      	add	r0, r1
 8021280:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8021284:	4404      	add	r4, r0
 8021286:	d02e      	beq.n	80212e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8021288:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802128c:	1b9b      	subs	r3, r3, r6
 802128e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8021292:	1b96      	subs	r6, r2, r6
 8021294:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021298:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802129c:	42a0      	cmp	r0, r4
 802129e:	d22d      	bcs.n	80212fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80212a0:	eb00 0e01 	add.w	lr, r0, r1
 80212a4:	4570      	cmp	r0, lr
 80212a6:	d210      	bcs.n	80212ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80212a8:	f890 9000 	ldrb.w	r9, [r0]
 80212ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80212b0:	fb19 f90c 	smulbb	r9, r9, ip
 80212b4:	fb02 9208 	mla	r2, r2, r8, r9
 80212b8:	b292      	uxth	r2, r2
 80212ba:	f102 0901 	add.w	r9, r2, #1
 80212be:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80212c2:	1212      	asrs	r2, r2, #8
 80212c4:	f800 2b01 	strb.w	r2, [r0], #1
 80212c8:	e7ec      	b.n	80212a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80212ca:	4418      	add	r0, r3
 80212cc:	4435      	add	r5, r6
 80212ce:	e7e5      	b.n	802129c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80212d0:	8813      	ldrh	r3, [r2, #0]
 80212d2:	1b9b      	subs	r3, r3, r6
 80212d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212d8:	4418      	add	r0, r3
 80212da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80212de:	1b9b      	subs	r3, r3, r6
 80212e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212e4:	441d      	add	r5, r3
 80212e6:	42a0      	cmp	r0, r4
 80212e8:	d208      	bcs.n	80212fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80212ea:	eb00 0c01 	add.w	ip, r0, r1
 80212ee:	4560      	cmp	r0, ip
 80212f0:	d2ee      	bcs.n	80212d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80212f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80212f6:	f800 3b01 	strb.w	r3, [r0], #1
 80212fa:	e7f8      	b.n	80212ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80212fc:	6838      	ldr	r0, [r7, #0]
 80212fe:	6803      	ldr	r3, [r0, #0]
 8021300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021302:	4798      	blx	r3
 8021304:	e7a2      	b.n	802124c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021306:	bf00      	nop
 8021308:	24015c48 	.word	0x24015c48
 802130c:	24015c42 	.word	0x24015c42

08021310 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8021310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021312:	2300      	movs	r3, #0
 8021314:	b085      	sub	sp, #20
 8021316:	9300      	str	r3, [sp, #0]
 8021318:	4b41      	ldr	r3, [pc, #260]	@ (8021420 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 802131a:	781b      	ldrb	r3, [r3, #0]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d136      	bne.n	802138e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8021320:	4a40      	ldr	r2, [pc, #256]	@ (8021424 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021322:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021326:	f8ad 2004 	strh.w	r2, [sp, #4]
 802132a:	2b00      	cmp	r3, #0
 802132c:	d131      	bne.n	8021392 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 802132e:	4b3e      	ldr	r3, [pc, #248]	@ (8021428 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8021330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021334:	ac02      	add	r4, sp, #8
 8021336:	6808      	ldr	r0, [r1, #0]
 8021338:	f8ad 3006 	strh.w	r3, [sp, #6]
 802133c:	ab02      	add	r3, sp, #8
 802133e:	6849      	ldr	r1, [r1, #4]
 8021340:	4d3a      	ldr	r5, [pc, #232]	@ (802142c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8021342:	c303      	stmia	r3!, {r0, r1}
 8021344:	4669      	mov	r1, sp
 8021346:	4620      	mov	r0, r4
 8021348:	f7fa fef4 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802134c:	4668      	mov	r0, sp
 802134e:	f7fa fec9 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021352:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021356:	f8bd 2000 	ldrh.w	r2, [sp]
 802135a:	462e      	mov	r6, r5
 802135c:	6828      	ldr	r0, [r5, #0]
 802135e:	4413      	add	r3, r2
 8021360:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021364:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021368:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802136c:	4413      	add	r3, r2
 802136e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021372:	6803      	ldr	r3, [r0, #0]
 8021374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021376:	4798      	blx	r3
 8021378:	f010 0f01 	tst.w	r0, #1
 802137c:	d00b      	beq.n	8021396 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 802137e:	6828      	ldr	r0, [r5, #0]
 8021380:	6803      	ldr	r3, [r0, #0]
 8021382:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021388:	4798      	blx	r3
 802138a:	b005      	add	sp, #20
 802138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802138e:	4a26      	ldr	r2, [pc, #152]	@ (8021428 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8021390:	e7c7      	b.n	8021322 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021392:	4b24      	ldr	r3, [pc, #144]	@ (8021424 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021394:	e7cc      	b.n	8021330 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021396:	6830      	ldr	r0, [r6, #0]
 8021398:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 802139c:	6803      	ldr	r3, [r0, #0]
 802139e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80213a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80213a4:	4798      	blx	r3
 80213a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80213aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80213ae:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80213b2:	fb14 3402 	smlabb	r4, r4, r2, r3
 80213b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80213ba:	4404      	add	r4, r0
 80213bc:	6830      	ldr	r0, [r6, #0]
 80213be:	6803      	ldr	r3, [r0, #0]
 80213c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213c2:	4798      	blx	r3
 80213c4:	4917      	ldr	r1, [pc, #92]	@ (8021424 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80213c6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80213ca:	880b      	ldrh	r3, [r1, #0]
 80213cc:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80213d0:	fb03 c202 	mla	r2, r3, r2, ip
 80213d4:	437b      	muls	r3, r7
 80213d6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80213da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80213de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213e2:	4410      	add	r0, r2
 80213e4:	18c2      	adds	r2, r0, r3
 80213e6:	4290      	cmp	r0, r2
 80213e8:	d214      	bcs.n	8021414 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80213ea:	eb00 0c07 	add.w	ip, r0, r7
 80213ee:	4560      	cmp	r0, ip
 80213f0:	d204      	bcs.n	80213fc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80213f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80213f6:	f800 3b01 	strb.w	r3, [r0], #1
 80213fa:	e7f8      	b.n	80213ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80213fc:	880b      	ldrh	r3, [r1, #0]
 80213fe:	1b5b      	subs	r3, r3, r5
 8021400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021404:	4418      	add	r0, r3
 8021406:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802140a:	1b5b      	subs	r3, r3, r5
 802140c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021410:	441c      	add	r4, r3
 8021412:	e7e8      	b.n	80213e6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8021414:	6830      	ldr	r0, [r6, #0]
 8021416:	6803      	ldr	r3, [r0, #0]
 8021418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802141a:	4798      	blx	r3
 802141c:	e7b5      	b.n	802138a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 802141e:	bf00      	nop
 8021420:	24015c40 	.word	0x24015c40
 8021424:	24015c42 	.word	0x24015c42
 8021428:	24015c44 	.word	0x24015c44
 802142c:	24015c48 	.word	0x24015c48

08021430 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021434:	b08f      	sub	sp, #60	@ 0x3c
 8021436:	461c      	mov	r4, r3
 8021438:	9203      	str	r2, [sp, #12]
 802143a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802143e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021440:	6820      	ldr	r0, [r4, #0]
 8021442:	9100      	str	r1, [sp, #0]
 8021444:	9204      	str	r2, [sp, #16]
 8021446:	aa0a      	add	r2, sp, #40	@ 0x28
 8021448:	6861      	ldr	r1, [r4, #4]
 802144a:	c203      	stmia	r2!, {r0, r1}
 802144c:	6818      	ldr	r0, [r3, #0]
 802144e:	aa0c      	add	r2, sp, #48	@ 0x30
 8021450:	6859      	ldr	r1, [r3, #4]
 8021452:	c203      	stmia	r2!, {r0, r1}
 8021454:	a80a      	add	r0, sp, #40	@ 0x28
 8021456:	f7fa fe45 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802145a:	4621      	mov	r1, r4
 802145c:	a80c      	add	r0, sp, #48	@ 0x30
 802145e:	f7fa fe69 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021462:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021466:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 802146a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802146e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8021472:	bfdb      	ittet	le
 8021474:	b2b3      	uxthle	r3, r6
 8021476:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 802147a:	2301      	movgt	r3, #1
 802147c:	fb92 f3f3 	sdivle	r3, r2, r3
 8021480:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021484:	441d      	add	r5, r3
 8021486:	fb92 f1f3 	sdiv	r1, r2, r3
 802148a:	fa1f fc81 	uxth.w	ip, r1
 802148e:	3d01      	subs	r5, #1
 8021490:	fb0c 2413 	mls	r4, ip, r3, r2
 8021494:	4661      	mov	r1, ip
 8021496:	fb14 f406 	smulbb	r4, r4, r6
 802149a:	4404      	add	r4, r0
 802149c:	fb95 f5f3 	sdiv	r5, r5, r3
 80214a0:	b2a4      	uxth	r4, r4
 80214a2:	b131      	cbz	r1, 80214b2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80214a4:	9b03      	ldr	r3, [sp, #12]
 80214a6:	9900      	ldr	r1, [sp, #0]
 80214a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80214ac:	ba1b      	rev	r3, r3
 80214ae:	4419      	add	r1, r3
 80214b0:	9100      	str	r1, [sp, #0]
 80214b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80214b6:	b2ad      	uxth	r5, r5
 80214b8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80214bc:	4418      	add	r0, r3
 80214be:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80214c2:	00ad      	lsls	r5, r5, #2
 80214c4:	441a      	add	r2, r3
 80214c6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80214ca:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80214ce:	9301      	str	r3, [sp, #4]
 80214d0:	4b79      	ldr	r3, [pc, #484]	@ (80216b8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80214d2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80214d6:	6818      	ldr	r0, [r3, #0]
 80214d8:	6803      	ldr	r3, [r0, #0]
 80214da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80214dc:	4798      	blx	r3
 80214de:	4a77      	ldr	r2, [pc, #476]	@ (80216bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80214e0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80214e4:	2c00      	cmp	r4, #0
 80214e6:	8813      	ldrh	r3, [r2, #0]
 80214e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80214ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80214ee:	fb03 c101 	mla	r1, r3, r1, ip
 80214f2:	fb06 f303 	mul.w	r3, r6, r3
 80214f6:	bf18      	it	ne
 80214f8:	2600      	movne	r6, #0
 80214fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80214fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021502:	4408      	add	r0, r1
 8021504:	4403      	add	r3, r0
 8021506:	9306      	str	r3, [sp, #24]
 8021508:	f105 0304 	add.w	r3, r5, #4
 802150c:	9305      	str	r3, [sp, #20]
 802150e:	9b01      	ldr	r3, [sp, #4]
 8021510:	bf08      	it	eq
 8021512:	461e      	moveq	r6, r3
 8021514:	2300      	movs	r3, #0
 8021516:	b2b6      	uxth	r6, r6
 8021518:	9302      	str	r3, [sp, #8]
 802151a:	9a06      	ldr	r2, [sp, #24]
 802151c:	4290      	cmp	r0, r2
 802151e:	f080 80c2 	bcs.w	80216a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8021522:	b963      	cbnz	r3, 802153e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8021524:	9b00      	ldr	r3, [sp, #0]
 8021526:	781a      	ldrb	r2, [r3, #0]
 8021528:	0993      	lsrs	r3, r2, #6
 802152a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802152e:	9202      	str	r2, [sp, #8]
 8021530:	1e5a      	subs	r2, r3, #1
 8021532:	2a02      	cmp	r2, #2
 8021534:	d815      	bhi.n	8021562 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8021536:	9a00      	ldr	r2, [sp, #0]
 8021538:	b29b      	uxth	r3, r3
 802153a:	3201      	adds	r2, #1
 802153c:	9200      	str	r2, [sp, #0]
 802153e:	b1b4      	cbz	r4, 802156e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8021540:	429c      	cmp	r4, r3
 8021542:	bf91      	iteee	ls
 8021544:	1b1c      	subls	r4, r3, r4
 8021546:	1ae4      	subhi	r4, r4, r3
 8021548:	4635      	movhi	r5, r6
 802154a:	f04f 0e00 	movhi.w	lr, #0
 802154e:	bf9b      	ittet	ls
 8021550:	fa1f fe84 	uxthls.w	lr, r4
 8021554:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8021558:	b2a4      	uxthhi	r4, r4
 802155a:	2400      	movls	r4, #0
 802155c:	4673      	mov	r3, lr
 802155e:	462e      	mov	r6, r5
 8021560:	e7db      	b.n	802151a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021562:	9a00      	ldr	r2, [sp, #0]
 8021564:	9b00      	ldr	r3, [sp, #0]
 8021566:	3202      	adds	r2, #2
 8021568:	785b      	ldrb	r3, [r3, #1]
 802156a:	9200      	str	r2, [sp, #0]
 802156c:	e7e7      	b.n	802153e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 802156e:	2204      	movs	r2, #4
 8021570:	9905      	ldr	r1, [sp, #20]
 8021572:	429e      	cmp	r6, r3
 8021574:	4615      	mov	r5, r2
 8021576:	9a02      	ldr	r2, [sp, #8]
 8021578:	bf94      	ite	ls
 802157a:	eba3 0e06 	subls.w	lr, r3, r6
 802157e:	46a6      	movhi	lr, r4
 8021580:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021584:	9903      	ldr	r1, [sp, #12]
 8021586:	bf8c      	ite	hi
 8021588:	1af5      	subhi	r5, r6, r3
 802158a:	fa1f fe8e 	uxthls.w	lr, lr
 802158e:	f851 c002 	ldr.w	ip, [r1, r2]
 8021592:	bf9a      	itte	ls
 8021594:	4625      	movls	r5, r4
 8021596:	4632      	movls	r2, r6
 8021598:	b2ad      	uxthhi	r5, r5
 802159a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 802159e:	bf88      	it	hi
 80215a0:	461a      	movhi	r2, r3
 80215a2:	b179      	cbz	r1, 80215c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80215a4:	29ff      	cmp	r1, #255	@ 0xff
 80215a6:	fa5f f98c 	uxtb.w	r9, ip
 80215aa:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80215ae:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80215b2:	d126      	bne.n	8021602 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80215b4:	9f04      	ldr	r7, [sp, #16]
 80215b6:	2fff      	cmp	r7, #255	@ 0xff
 80215b8:	d123      	bne.n	8021602 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80215ba:	4682      	mov	sl, r0
 80215bc:	4611      	mov	r1, r2
 80215be:	f10a 0a03 	add.w	sl, sl, #3
 80215c2:	b9a9      	cbnz	r1, 80215f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80215c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80215c8:	429e      	cmp	r6, r3
 80215ca:	4410      	add	r0, r2
 80215cc:	d8c6      	bhi.n	802155c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80215ce:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80215d2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80215d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215d8:	1b64      	subs	r4, r4, r5
 80215da:	9a01      	ldr	r2, [sp, #4]
 80215dc:	881b      	ldrh	r3, [r3, #0]
 80215de:	b2a4      	uxth	r4, r4
 80215e0:	1a9b      	subs	r3, r3, r2
 80215e2:	2c00      	cmp	r4, #0
 80215e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80215e8:	bf18      	it	ne
 80215ea:	2500      	movne	r5, #0
 80215ec:	4418      	add	r0, r3
 80215ee:	e7b5      	b.n	802155c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80215f0:	3901      	subs	r1, #1
 80215f2:	f80a 9c03 	strb.w	r9, [sl, #-3]
 80215f6:	f80a 8c02 	strb.w	r8, [sl, #-2]
 80215fa:	f80a cc01 	strb.w	ip, [sl, #-1]
 80215fe:	b289      	uxth	r1, r1
 8021600:	e7dd      	b.n	80215be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8021602:	9f04      	ldr	r7, [sp, #16]
 8021604:	fb07 fa01 	mul.w	sl, r7, r1
 8021608:	f10a 0101 	add.w	r1, sl, #1
 802160c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8021610:	1209      	asrs	r1, r1, #8
 8021612:	ea6f 0a01 	mvn.w	sl, r1
 8021616:	b289      	uxth	r1, r1
 8021618:	fb19 f901 	smulbb	r9, r9, r1
 802161c:	fa5f fa8a 	uxtb.w	sl, sl
 8021620:	fb18 f801 	smulbb	r8, r8, r1
 8021624:	fb1c f101 	smulbb	r1, ip, r1
 8021628:	fa1f f789 	uxth.w	r7, r9
 802162c:	4684      	mov	ip, r0
 802162e:	4691      	mov	r9, r2
 8021630:	9707      	str	r7, [sp, #28]
 8021632:	b289      	uxth	r1, r1
 8021634:	fa1f f788 	uxth.w	r7, r8
 8021638:	9708      	str	r7, [sp, #32]
 802163a:	f10c 0c03 	add.w	ip, ip, #3
 802163e:	f1b9 0f00 	cmp.w	r9, #0
 8021642:	d0bf      	beq.n	80215c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8021644:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8021648:	f109 39ff 	add.w	r9, r9, #4294967295
 802164c:	9f07      	ldr	r7, [sp, #28]
 802164e:	fa1f f989 	uxth.w	r9, r9
 8021652:	fb08 780a 	mla	r8, r8, sl, r7
 8021656:	9f08      	ldr	r7, [sp, #32]
 8021658:	fa1f f888 	uxth.w	r8, r8
 802165c:	f108 0b01 	add.w	fp, r8, #1
 8021660:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021664:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021668:	f80c 8c03 	strb.w	r8, [ip, #-3]
 802166c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8021670:	fb08 780a 	mla	r8, r8, sl, r7
 8021674:	fa1f f888 	uxth.w	r8, r8
 8021678:	f108 0b01 	add.w	fp, r8, #1
 802167c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021680:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021684:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8021688:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 802168c:	fb08 180a 	mla	r8, r8, sl, r1
 8021690:	fa1f f888 	uxth.w	r8, r8
 8021694:	f108 0b01 	add.w	fp, r8, #1
 8021698:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802169c:	ea4f 2828 	mov.w	r8, r8, asr #8
 80216a0:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80216a4:	e7c9      	b.n	802163a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80216a6:	4b04      	ldr	r3, [pc, #16]	@ (80216b8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80216a8:	6818      	ldr	r0, [r3, #0]
 80216aa:	6803      	ldr	r3, [r0, #0]
 80216ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80216ae:	4798      	blx	r3
 80216b0:	b00f      	add	sp, #60	@ 0x3c
 80216b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216b6:	bf00      	nop
 80216b8:	24015c48 	.word	0x24015c48
 80216bc:	24015c42 	.word	0x24015c42

080216c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80216c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216c4:	b089      	sub	sp, #36	@ 0x24
 80216c6:	4607      	mov	r7, r0
 80216c8:	4689      	mov	r9, r1
 80216ca:	4692      	mov	sl, r2
 80216cc:	ac08      	add	r4, sp, #32
 80216ce:	461e      	mov	r6, r3
 80216d0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80216d4:	4620      	mov	r0, r4
 80216d6:	f7fd ffa5 	bl	801f624 <_ZNK8touchgfx6Bitmap7getDataEv>
 80216da:	683b      	ldr	r3, [r7, #0]
 80216dc:	4605      	mov	r5, r0
 80216de:	4620      	mov	r0, r4
 80216e0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80216e4:	f7fd feea 	bl	801f4bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80216e8:	4683      	mov	fp, r0
 80216ea:	4620      	mov	r0, r4
 80216ec:	f7fd ff1a 	bl	801f524 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80216f0:	4653      	mov	r3, sl
 80216f2:	464a      	mov	r2, r9
 80216f4:	4639      	mov	r1, r7
 80216f6:	9500      	str	r5, [sp, #0]
 80216f8:	e9cd b001 	strd	fp, r0, [sp, #4]
 80216fc:	a806      	add	r0, sp, #24
 80216fe:	47c0      	blx	r8
 8021700:	a906      	add	r1, sp, #24
 8021702:	4630      	mov	r0, r6
 8021704:	f7fd fdbe 	bl	801f284 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8021708:	4628      	mov	r0, r5
 802170a:	b009      	add	sp, #36	@ 0x24
 802170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021710 <_ZN8touchgfx8LCD24bppD0Ev>:
 8021710:	b510      	push	{r4, lr}
 8021712:	4604      	mov	r4, r0
 8021714:	2168      	movs	r1, #104	@ 0x68
 8021716:	f007 fe99 	bl	802944c <_ZdlPvj>
 802171a:	4620      	mov	r0, r4
 802171c:	bd10      	pop	{r4, pc}

0802171e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 802171e:	b510      	push	{r4, lr}
 8021720:	4604      	mov	r4, r0
 8021722:	2104      	movs	r1, #4
 8021724:	f007 fe92 	bl	802944c <_ZdlPvj>
 8021728:	4620      	mov	r0, r4
 802172a:	bd10      	pop	{r4, pc}

0802172c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 802172c:	b510      	push	{r4, lr}
 802172e:	4604      	mov	r4, r0
 8021730:	2104      	movs	r1, #4
 8021732:	f007 fe8b 	bl	802944c <_ZdlPvj>
 8021736:	4620      	mov	r0, r4
 8021738:	bd10      	pop	{r4, pc}

0802173a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 802173a:	b510      	push	{r4, lr}
 802173c:	4604      	mov	r4, r0
 802173e:	f640 0144 	movw	r1, #2116	@ 0x844
 8021742:	f007 fe83 	bl	802944c <_ZdlPvj>
 8021746:	4620      	mov	r0, r4
 8021748:	bd10      	pop	{r4, pc}

0802174a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802174a:	b510      	push	{r4, lr}
 802174c:	4604      	mov	r4, r0
 802174e:	2104      	movs	r1, #4
 8021750:	f007 fe7c 	bl	802944c <_ZdlPvj>
 8021754:	4620      	mov	r0, r4
 8021756:	bd10      	pop	{r4, pc}

08021758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021758:	b510      	push	{r4, lr}
 802175a:	4604      	mov	r4, r0
 802175c:	2104      	movs	r1, #4
 802175e:	f007 fe75 	bl	802944c <_ZdlPvj>
 8021762:	4620      	mov	r0, r4
 8021764:	bd10      	pop	{r4, pc}

08021766 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021766:	b510      	push	{r4, lr}
 8021768:	4604      	mov	r4, r0
 802176a:	2104      	movs	r1, #4
 802176c:	f007 fe6e 	bl	802944c <_ZdlPvj>
 8021770:	4620      	mov	r0, r4
 8021772:	bd10      	pop	{r4, pc}

08021774 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021774:	b510      	push	{r4, lr}
 8021776:	4604      	mov	r4, r0
 8021778:	2104      	movs	r1, #4
 802177a:	f007 fe67 	bl	802944c <_ZdlPvj>
 802177e:	4620      	mov	r0, r4
 8021780:	bd10      	pop	{r4, pc}

08021782 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021782:	b510      	push	{r4, lr}
 8021784:	4604      	mov	r4, r0
 8021786:	2104      	movs	r1, #4
 8021788:	f007 fe60 	bl	802944c <_ZdlPvj>
 802178c:	4620      	mov	r0, r4
 802178e:	bd10      	pop	{r4, pc}

08021790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021790:	b510      	push	{r4, lr}
 8021792:	4604      	mov	r4, r0
 8021794:	2104      	movs	r1, #4
 8021796:	f007 fe59 	bl	802944c <_ZdlPvj>
 802179a:	4620      	mov	r0, r4
 802179c:	bd10      	pop	{r4, pc}

0802179e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802179e:	b510      	push	{r4, lr}
 80217a0:	4604      	mov	r4, r0
 80217a2:	2104      	movs	r1, #4
 80217a4:	f007 fe52 	bl	802944c <_ZdlPvj>
 80217a8:	4620      	mov	r0, r4
 80217aa:	bd10      	pop	{r4, pc}

080217ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80217ac:	b510      	push	{r4, lr}
 80217ae:	4604      	mov	r4, r0
 80217b0:	2104      	movs	r1, #4
 80217b2:	f007 fe4b 	bl	802944c <_ZdlPvj>
 80217b6:	4620      	mov	r0, r4
 80217b8:	bd10      	pop	{r4, pc}

080217ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80217ba:	b510      	push	{r4, lr}
 80217bc:	4604      	mov	r4, r0
 80217be:	2104      	movs	r1, #4
 80217c0:	f007 fe44 	bl	802944c <_ZdlPvj>
 80217c4:	4620      	mov	r0, r4
 80217c6:	bd10      	pop	{r4, pc}

080217c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80217c8:	b510      	push	{r4, lr}
 80217ca:	4604      	mov	r4, r0
 80217cc:	2104      	movs	r1, #4
 80217ce:	f007 fe3d 	bl	802944c <_ZdlPvj>
 80217d2:	4620      	mov	r0, r4
 80217d4:	bd10      	pop	{r4, pc}

080217d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80217d6:	b510      	push	{r4, lr}
 80217d8:	4604      	mov	r4, r0
 80217da:	2104      	movs	r1, #4
 80217dc:	f007 fe36 	bl	802944c <_ZdlPvj>
 80217e0:	4620      	mov	r0, r4
 80217e2:	bd10      	pop	{r4, pc}

080217e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80217e4:	b510      	push	{r4, lr}
 80217e6:	4604      	mov	r4, r0
 80217e8:	2104      	movs	r1, #4
 80217ea:	f007 fe2f 	bl	802944c <_ZdlPvj>
 80217ee:	4620      	mov	r0, r4
 80217f0:	bd10      	pop	{r4, pc}

080217f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80217f2:	b510      	push	{r4, lr}
 80217f4:	4604      	mov	r4, r0
 80217f6:	2104      	movs	r1, #4
 80217f8:	f007 fe28 	bl	802944c <_ZdlPvj>
 80217fc:	4620      	mov	r0, r4
 80217fe:	bd10      	pop	{r4, pc}

08021800 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021800:	b510      	push	{r4, lr}
 8021802:	4604      	mov	r4, r0
 8021804:	2104      	movs	r1, #4
 8021806:	f007 fe21 	bl	802944c <_ZdlPvj>
 802180a:	4620      	mov	r0, r4
 802180c:	bd10      	pop	{r4, pc}

0802180e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802180e:	b510      	push	{r4, lr}
 8021810:	4604      	mov	r4, r0
 8021812:	2104      	movs	r1, #4
 8021814:	f007 fe1a 	bl	802944c <_ZdlPvj>
 8021818:	4620      	mov	r0, r4
 802181a:	bd10      	pop	{r4, pc}

0802181c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802181c:	b510      	push	{r4, lr}
 802181e:	4604      	mov	r4, r0
 8021820:	2104      	movs	r1, #4
 8021822:	f007 fe13 	bl	802944c <_ZdlPvj>
 8021826:	4620      	mov	r0, r4
 8021828:	bd10      	pop	{r4, pc}

0802182a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802182a:	b510      	push	{r4, lr}
 802182c:	4604      	mov	r4, r0
 802182e:	2104      	movs	r1, #4
 8021830:	f007 fe0c 	bl	802944c <_ZdlPvj>
 8021834:	4620      	mov	r0, r4
 8021836:	bd10      	pop	{r4, pc}

08021838 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021838:	b510      	push	{r4, lr}
 802183a:	4604      	mov	r4, r0
 802183c:	2104      	movs	r1, #4
 802183e:	f007 fe05 	bl	802944c <_ZdlPvj>
 8021842:	4620      	mov	r0, r4
 8021844:	bd10      	pop	{r4, pc}

08021846 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021846:	b510      	push	{r4, lr}
 8021848:	4604      	mov	r4, r0
 802184a:	2104      	movs	r1, #4
 802184c:	f007 fdfe 	bl	802944c <_ZdlPvj>
 8021850:	4620      	mov	r0, r4
 8021852:	bd10      	pop	{r4, pc}

08021854 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021854:	b510      	push	{r4, lr}
 8021856:	4604      	mov	r4, r0
 8021858:	2104      	movs	r1, #4
 802185a:	f007 fdf7 	bl	802944c <_ZdlPvj>
 802185e:	4620      	mov	r0, r4
 8021860:	bd10      	pop	{r4, pc}
	...

08021864 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021868:	b08f      	sub	sp, #60	@ 0x3c
 802186a:	461c      	mov	r4, r3
 802186c:	460e      	mov	r6, r1
 802186e:	9206      	str	r2, [sp, #24]
 8021870:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021874:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021876:	9202      	str	r2, [sp, #8]
 8021878:	2a00      	cmp	r2, #0
 802187a:	f000 8128 	beq.w	8021ace <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 802187e:	6820      	ldr	r0, [r4, #0]
 8021880:	aa0a      	add	r2, sp, #40	@ 0x28
 8021882:	6861      	ldr	r1, [r4, #4]
 8021884:	c203      	stmia	r2!, {r0, r1}
 8021886:	6818      	ldr	r0, [r3, #0]
 8021888:	aa0c      	add	r2, sp, #48	@ 0x30
 802188a:	6859      	ldr	r1, [r3, #4]
 802188c:	c203      	stmia	r2!, {r0, r1}
 802188e:	a80a      	add	r0, sp, #40	@ 0x28
 8021890:	f7fa fc28 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021894:	4621      	mov	r1, r4
 8021896:	a80c      	add	r0, sp, #48	@ 0x30
 8021898:	f7fa fc4c 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802189c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80218a0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80218a4:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80218a8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80218ac:	bfdb      	ittet	le
 80218ae:	b2bb      	uxthle	r3, r7
 80218b0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80218b4:	2301      	movgt	r3, #1
 80218b6:	fb92 f3f3 	sdivle	r3, r2, r3
 80218ba:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80218be:	441d      	add	r5, r3
 80218c0:	fb92 f1f3 	sdiv	r1, r2, r3
 80218c4:	fa1f fc81 	uxth.w	ip, r1
 80218c8:	3d01      	subs	r5, #1
 80218ca:	fb0c 2413 	mls	r4, ip, r3, r2
 80218ce:	4661      	mov	r1, ip
 80218d0:	fb14 f407 	smulbb	r4, r4, r7
 80218d4:	4404      	add	r4, r0
 80218d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80218da:	b2a4      	uxth	r4, r4
 80218dc:	b121      	cbz	r1, 80218e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80218de:	9b06      	ldr	r3, [sp, #24]
 80218e0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80218e4:	ba1b      	rev	r3, r3
 80218e6:	441e      	add	r6, r3
 80218e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80218ec:	b2ad      	uxth	r5, r5
 80218ee:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80218f2:	4418      	add	r0, r3
 80218f4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80218f8:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 80218fc:	00ad      	lsls	r5, r5, #2
 80218fe:	441a      	add	r2, r3
 8021900:	4b74      	ldr	r3, [pc, #464]	@ (8021ad4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021902:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021906:	6818      	ldr	r0, [r3, #0]
 8021908:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802190c:	6803      	ldr	r3, [r0, #0]
 802190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021910:	4798      	blx	r3
 8021912:	4a71      	ldr	r2, [pc, #452]	@ (8021ad8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021914:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021918:	2c00      	cmp	r4, #0
 802191a:	8813      	ldrh	r3, [r2, #0]
 802191c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021920:	9209      	str	r2, [sp, #36]	@ 0x24
 8021922:	fb03 c101 	mla	r1, r3, r1, ip
 8021926:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 802192a:	fb03 f307 	mul.w	r3, r3, r7
 802192e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021932:	9204      	str	r2, [sp, #16]
 8021934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021938:	9a02      	ldr	r2, [sp, #8]
 802193a:	4408      	add	r0, r1
 802193c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8021940:	4403      	add	r3, r0
 8021942:	b292      	uxth	r2, r2
 8021944:	9307      	str	r3, [sp, #28]
 8021946:	f105 0304 	add.w	r3, r5, #4
 802194a:	bf0c      	ite	eq
 802194c:	4645      	moveq	r5, r8
 802194e:	2500      	movne	r5, #0
 8021950:	9308      	str	r3, [sp, #32]
 8021952:	2300      	movs	r3, #0
 8021954:	b2ad      	uxth	r5, r5
 8021956:	9205      	str	r2, [sp, #20]
 8021958:	9303      	str	r3, [sp, #12]
 802195a:	9a07      	ldr	r2, [sp, #28]
 802195c:	4282      	cmp	r2, r0
 802195e:	f240 80b1 	bls.w	8021ac4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8021962:	b95b      	cbnz	r3, 802197c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8021964:	7832      	ldrb	r2, [r6, #0]
 8021966:	0993      	lsrs	r3, r2, #6
 8021968:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802196c:	9203      	str	r2, [sp, #12]
 802196e:	1e5a      	subs	r2, r3, #1
 8021970:	2a02      	cmp	r2, #2
 8021972:	bf8d      	iteet	hi
 8021974:	7873      	ldrbhi	r3, [r6, #1]
 8021976:	3601      	addls	r6, #1
 8021978:	b29b      	uxthls	r3, r3
 802197a:	3602      	addhi	r6, #2
 802197c:	b184      	cbz	r4, 80219a0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 802197e:	429c      	cmp	r4, r3
 8021980:	bf91      	iteee	ls
 8021982:	1b1c      	subls	r4, r3, r4
 8021984:	1ae4      	subhi	r4, r4, r3
 8021986:	4629      	movhi	r1, r5
 8021988:	f04f 0e00 	movhi.w	lr, #0
 802198c:	bf9b      	ittet	ls
 802198e:	fa1f fe84 	uxthls.w	lr, r4
 8021992:	2400      	movls	r4, #0
 8021994:	b2a4      	uxthhi	r4, r4
 8021996:	fa1f f188 	uxthls.w	r1, r8
 802199a:	4673      	mov	r3, lr
 802199c:	460d      	mov	r5, r1
 802199e:	e7dc      	b.n	802195a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80219a0:	2203      	movs	r2, #3
 80219a2:	9908      	ldr	r1, [sp, #32]
 80219a4:	42ab      	cmp	r3, r5
 80219a6:	4617      	mov	r7, r2
 80219a8:	9a03      	ldr	r2, [sp, #12]
 80219aa:	bf24      	itt	cs
 80219ac:	eba3 0e05 	subcs.w	lr, r3, r5
 80219b0:	9501      	strcs	r5, [sp, #4]
 80219b2:	fb17 1702 	smlabb	r7, r7, r2, r1
 80219b6:	9a06      	ldr	r2, [sp, #24]
 80219b8:	bf34      	ite	cc
 80219ba:	1ae9      	subcc	r1, r5, r3
 80219bc:	fa1f fe8e 	uxthcs.w	lr, lr
 80219c0:	4417      	add	r7, r2
 80219c2:	9a02      	ldr	r2, [sp, #8]
 80219c4:	bf2f      	iteee	cs
 80219c6:	4621      	movcs	r1, r4
 80219c8:	b289      	uxthcc	r1, r1
 80219ca:	9301      	strcc	r3, [sp, #4]
 80219cc:	46a6      	movcc	lr, r4
 80219ce:	2aff      	cmp	r2, #255	@ 0xff
 80219d0:	d11e      	bne.n	8021a10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80219d2:	4681      	mov	r9, r0
 80219d4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80219d8:	f109 0903 	add.w	r9, r9, #3
 80219dc:	f1bc 0f00 	cmp.w	ip, #0
 80219e0:	d15f      	bne.n	8021aa2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 80219e2:	9a01      	ldr	r2, [sp, #4]
 80219e4:	42ab      	cmp	r3, r5
 80219e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80219ea:	4410      	add	r0, r2
 80219ec:	d3d5      	bcc.n	802199a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80219ee:	fa1f f188 	uxth.w	r1, r8
 80219f2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80219f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219f8:	1a64      	subs	r4, r4, r1
 80219fa:	881b      	ldrh	r3, [r3, #0]
 80219fc:	b2a4      	uxth	r4, r4
 80219fe:	eba3 0308 	sub.w	r3, r3, r8
 8021a02:	2c00      	cmp	r4, #0
 8021a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a08:	bf18      	it	ne
 8021a0a:	2100      	movne	r1, #0
 8021a0c:	4418      	add	r0, r3
 8021a0e:	e7c4      	b.n	802199a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8021a10:	4684      	mov	ip, r0
 8021a12:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021a16:	f10c 0c03 	add.w	ip, ip, #3
 8021a1a:	f1ba 0f00 	cmp.w	sl, #0
 8021a1e:	d0e0      	beq.n	80219e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8021a20:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8021a24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021a28:	9a05      	ldr	r2, [sp, #20]
 8021a2a:	f897 9000 	ldrb.w	r9, [r7]
 8021a2e:	fa1f fa8a 	uxth.w	sl, sl
 8021a32:	fb1b fb02 	smulbb	fp, fp, r2
 8021a36:	9a04      	ldr	r2, [sp, #16]
 8021a38:	fb09 b902 	mla	r9, r9, r2, fp
 8021a3c:	9a05      	ldr	r2, [sp, #20]
 8021a3e:	fa1f f989 	uxth.w	r9, r9
 8021a42:	f109 0b01 	add.w	fp, r9, #1
 8021a46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021a4a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8021a4e:	fb1b fb02 	smulbb	fp, fp, r2
 8021a52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a56:	9a04      	ldr	r2, [sp, #16]
 8021a58:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8021a5c:	f897 9001 	ldrb.w	r9, [r7, #1]
 8021a60:	fb09 b902 	mla	r9, r9, r2, fp
 8021a64:	9a05      	ldr	r2, [sp, #20]
 8021a66:	fa1f f989 	uxth.w	r9, r9
 8021a6a:	f109 0b01 	add.w	fp, r9, #1
 8021a6e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021a72:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8021a76:	fb1b fb02 	smulbb	fp, fp, r2
 8021a7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a7e:	9a04      	ldr	r2, [sp, #16]
 8021a80:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8021a84:	f897 9002 	ldrb.w	r9, [r7, #2]
 8021a88:	fb09 b902 	mla	r9, r9, r2, fp
 8021a8c:	fa1f f989 	uxth.w	r9, r9
 8021a90:	f109 0b01 	add.w	fp, r9, #1
 8021a94:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021a98:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a9c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8021aa0:	e7b9      	b.n	8021a16 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8021aa2:	f897 a000 	ldrb.w	sl, [r7]
 8021aa6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021aaa:	f809 ac03 	strb.w	sl, [r9, #-3]
 8021aae:	fa1f fc8c 	uxth.w	ip, ip
 8021ab2:	f897 a001 	ldrb.w	sl, [r7, #1]
 8021ab6:	f809 ac02 	strb.w	sl, [r9, #-2]
 8021aba:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021abe:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021ac2:	e789      	b.n	80219d8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8021ac4:	4b03      	ldr	r3, [pc, #12]	@ (8021ad4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021ac6:	6818      	ldr	r0, [r3, #0]
 8021ac8:	6803      	ldr	r3, [r0, #0]
 8021aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021acc:	4798      	blx	r3
 8021ace:	b00f      	add	sp, #60	@ 0x3c
 8021ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ad4:	24015c48 	.word	0x24015c48
 8021ad8:	24015c42 	.word	0x24015c42

08021adc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ae0:	b09b      	sub	sp, #108	@ 0x6c
 8021ae2:	461d      	mov	r5, r3
 8021ae4:	4604      	mov	r4, r0
 8021ae6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021ae8:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8021aec:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8021af0:	9208      	str	r2, [sp, #32]
 8021af2:	2a00      	cmp	r2, #0
 8021af4:	f000 81f3 	beq.w	8021ede <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8021af8:	6828      	ldr	r0, [r5, #0]
 8021afa:	aa16      	add	r2, sp, #88	@ 0x58
 8021afc:	6869      	ldr	r1, [r5, #4]
 8021afe:	c203      	stmia	r2!, {r0, r1}
 8021b00:	6818      	ldr	r0, [r3, #0]
 8021b02:	aa18      	add	r2, sp, #96	@ 0x60
 8021b04:	6859      	ldr	r1, [r3, #4]
 8021b06:	c203      	stmia	r2!, {r0, r1}
 8021b08:	a816      	add	r0, sp, #88	@ 0x58
 8021b0a:	f7fa faeb 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b0e:	4629      	mov	r1, r5
 8021b10:	a818      	add	r0, sp, #96	@ 0x60
 8021b12:	f7fa fb0f 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b16:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8021b1a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8021b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b22:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8021b26:	bfdb      	ittet	le
 8021b28:	b29a      	uxthle	r2, r3
 8021b2a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021b2e:	f04f 0a01 	movgt.w	sl, #1
 8021b32:	fb91 faf2 	sdivle	sl, r1, r2
 8021b36:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8021b3a:	4456      	add	r6, sl
 8021b3c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8021b40:	3e01      	subs	r6, #1
 8021b42:	fb92 f0fa 	sdiv	r0, r2, sl
 8021b46:	b280      	uxth	r0, r0
 8021b48:	fb00 281a 	mls	r8, r0, sl, r2
 8021b4c:	900e      	str	r0, [sp, #56]	@ 0x38
 8021b4e:	fb18 f803 	smulbb	r8, r8, r3
 8021b52:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8021b56:	4488      	add	r8, r1
 8021b58:	4419      	add	r1, r3
 8021b5a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8021b5e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8021b62:	fa1f f888 	uxth.w	r8, r8
 8021b66:	441a      	add	r2, r3
 8021b68:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8021b6c:	9303      	str	r3, [sp, #12]
 8021b6e:	4b9c      	ldr	r3, [pc, #624]	@ (8021de0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8021b70:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8021b74:	6818      	ldr	r0, [r3, #0]
 8021b76:	6803      	ldr	r3, [r0, #0]
 8021b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021b7a:	4798      	blx	r3
 8021b7c:	4b99      	ldr	r3, [pc, #612]	@ (8021de4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8021b7e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8021b82:	f1b8 0f00 	cmp.w	r8, #0
 8021b86:	881a      	ldrh	r2, [r3, #0]
 8021b88:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8021b8c:	fb02 f505 	mul.w	r5, r2, r5
 8021b90:	fb02 7101 	mla	r1, r2, r1, r7
 8021b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021b98:	9314      	str	r3, [sp, #80]	@ 0x50
 8021b9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021b9e:	9b08      	ldr	r3, [sp, #32]
 8021ba0:	fb96 f6fa 	sdiv	r6, r6, sl
 8021ba4:	4408      	add	r0, r1
 8021ba6:	f106 0601 	add.w	r6, r6, #1
 8021baa:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8021bae:	f04f 0100 	mov.w	r1, #0
 8021bb2:	eb00 0205 	add.w	r2, r0, r5
 8021bb6:	b2b6      	uxth	r6, r6
 8021bb8:	b29b      	uxth	r3, r3
 8021bba:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8021bbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021bc0:	930d      	str	r3, [sp, #52]	@ 0x34
 8021bc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021bc6:	4b88      	ldr	r3, [pc, #544]	@ (8021de8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8021bc8:	f106 0204 	add.w	r2, r6, #4
 8021bcc:	eba3 0304 	sub.w	r3, r3, r4
 8021bd0:	9205      	str	r2, [sp, #20]
 8021bd2:	9a03      	ldr	r2, [sp, #12]
 8021bd4:	bf18      	it	ne
 8021bd6:	2200      	movne	r2, #0
 8021bd8:	9315      	str	r3, [sp, #84]	@ 0x54
 8021bda:	b292      	uxth	r2, r2
 8021bdc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021be0:	fa11 f383 	uxtah	r3, r1, r3
 8021be4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021be6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021bea:	3304      	adds	r3, #4
 8021bec:	9306      	str	r3, [sp, #24]
 8021bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021bf0:	4283      	cmp	r3, r0
 8021bf2:	f240 816f 	bls.w	8021ed4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8021bf6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8021bfa:	f04f 0900 	mov.w	r9, #0
 8021bfe:	9d06      	ldr	r5, [sp, #24]
 8021c00:	fbb8 f3f3 	udiv	r3, r8, r3
 8021c04:	ebaa 0303 	sub.w	r3, sl, r3
 8021c08:	782d      	ldrb	r5, [r5, #0]
 8021c0a:	b29b      	uxth	r3, r3
 8021c0c:	950f      	str	r5, [sp, #60]	@ 0x3c
 8021c0e:	3501      	adds	r5, #1
 8021c10:	9312      	str	r3, [sp, #72]	@ 0x48
 8021c12:	9b06      	ldr	r3, [sp, #24]
 8021c14:	9504      	str	r5, [sp, #16]
 8021c16:	7859      	ldrb	r1, [r3, #1]
 8021c18:	789b      	ldrb	r3, [r3, #2]
 8021c1a:	021b      	lsls	r3, r3, #8
 8021c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8021c20:	9906      	ldr	r1, [sp, #24]
 8021c22:	78c9      	ldrb	r1, [r1, #3]
 8021c24:	430b      	orrs	r3, r1
 8021c26:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021c28:	4419      	add	r1, r3
 8021c2a:	1c4d      	adds	r5, r1, #1
 8021c2c:	7849      	ldrb	r1, [r1, #1]
 8021c2e:	9502      	str	r5, [sp, #8]
 8021c30:	0209      	lsls	r1, r1, #8
 8021c32:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021c34:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8021c38:	5ceb      	ldrb	r3, [r5, r3]
 8021c3a:	4319      	orrs	r1, r3
 8021c3c:	b28b      	uxth	r3, r1
 8021c3e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c44:	2300      	movs	r3, #0
 8021c46:	9307      	str	r3, [sp, #28]
 8021c48:	2301      	movs	r3, #1
 8021c4a:	e9cd 3300 	strd	r3, r3, [sp]
 8021c4e:	469c      	mov	ip, r3
 8021c50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021c54:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c56:	f1b8 0f00 	cmp.w	r8, #0
 8021c5a:	f000 8082 	beq.w	8021d62 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8021c5e:	45c4      	cmp	ip, r8
 8021c60:	d270      	bcs.n	8021d44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8021c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c64:	eba8 080c 	sub.w	r8, r8, ip
 8021c68:	4611      	mov	r1, r2
 8021c6a:	4283      	cmp	r3, r0
 8021c6c:	fa1f f888 	uxth.w	r8, r8
 8021c70:	d802      	bhi.n	8021c78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021c72:	e074      	b.n	8021d5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	d15f      	bne.n	8021d38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8021c78:	9b02      	ldr	r3, [sp, #8]
 8021c7a:	9a01      	ldr	r2, [sp, #4]
 8021c7c:	785b      	ldrb	r3, [r3, #1]
 8021c7e:	f1c2 0207 	rsb	r2, r2, #7
 8021c82:	9d01      	ldr	r5, [sp, #4]
 8021c84:	4093      	lsls	r3, r2
 8021c86:	005b      	lsls	r3, r3, #1
 8021c88:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021c8c:	9b02      	ldr	r3, [sp, #8]
 8021c8e:	781b      	ldrb	r3, [r3, #0]
 8021c90:	412b      	asrs	r3, r5
 8021c92:	b2db      	uxtb	r3, r3
 8021c94:	4313      	orrs	r3, r2
 8021c96:	462a      	mov	r2, r5
 8021c98:	3201      	adds	r2, #1
 8021c9a:	b29e      	uxth	r6, r3
 8021c9c:	b2d2      	uxtb	r2, r2
 8021c9e:	2a08      	cmp	r2, #8
 8021ca0:	9201      	str	r2, [sp, #4]
 8021ca2:	9a02      	ldr	r2, [sp, #8]
 8021ca4:	bf09      	itett	eq
 8021ca6:	3202      	addeq	r2, #2
 8021ca8:	3201      	addne	r2, #1
 8021caa:	9202      	streq	r2, [sp, #8]
 8021cac:	2200      	moveq	r2, #0
 8021cae:	bf14      	ite	ne
 8021cb0:	9202      	strne	r2, [sp, #8]
 8021cb2:	9201      	streq	r2, [sp, #4]
 8021cb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021cb6:	42b2      	cmp	r2, r6
 8021cb8:	d309      	bcc.n	8021cce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8021cba:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021cbe:	2301      	movs	r3, #1
 8021cc0:	9a04      	ldr	r2, [sp, #16]
 8021cc2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8021cc6:	d30e      	bcc.n	8021ce6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021cc8:	9300      	str	r3, [sp, #0]
 8021cca:	2500      	movs	r5, #0
 8021ccc:	e035      	b.n	8021d3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8021cce:	9b04      	ldr	r3, [sp, #16]
 8021cd0:	429e      	cmp	r6, r3
 8021cd2:	d318      	bcc.n	8021d06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8021cd4:	9b00      	ldr	r3, [sp, #0]
 8021cd6:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8021cda:	18e3      	adds	r3, r4, r3
 8021cdc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8021ce0:	9b00      	ldr	r3, [sp, #0]
 8021ce2:	3301      	adds	r3, #1
 8021ce4:	b29b      	uxth	r3, r3
 8021ce6:	9a04      	ldr	r2, [sp, #16]
 8021ce8:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8021cec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021cf0:	9f00      	ldr	r7, [sp, #0]
 8021cf2:	7115      	strb	r5, [r2, #4]
 8021cf4:	3701      	adds	r7, #1
 8021cf6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021cf8:	7157      	strb	r7, [r2, #5]
 8021cfa:	80d5      	strh	r5, [r2, #6]
 8021cfc:	9a04      	ldr	r2, [sp, #16]
 8021cfe:	3201      	adds	r2, #1
 8021d00:	b292      	uxth	r2, r2
 8021d02:	9204      	str	r2, [sp, #16]
 8021d04:	e7e0      	b.n	8021cc8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8021d06:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8021d0a:	4632      	mov	r2, r6
 8021d0c:	795b      	ldrb	r3, [r3, #5]
 8021d0e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8021d12:	4425      	add	r5, r4
 8021d14:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8021d16:	eb07 0c05 	add.w	ip, r7, r5
 8021d1a:	f1bc 0f00 	cmp.w	ip, #0
 8021d1e:	dd07      	ble.n	8021d30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8021d20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021d24:	f892 c004 	ldrb.w	ip, [r2, #4]
 8021d28:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8021d2c:	88d2      	ldrh	r2, [r2, #6]
 8021d2e:	e7f1      	b.n	8021d14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8021d30:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8021d34:	b29b      	uxth	r3, r3
 8021d36:	e7c3      	b.n	8021cc0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8021d38:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8021d3a:	460a      	mov	r2, r1
 8021d3c:	960a      	str	r6, [sp, #40]	@ 0x28
 8021d3e:	46a9      	mov	r9, r5
 8021d40:	469c      	mov	ip, r3
 8021d42:	e788      	b.n	8021c56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8021d44:	ebac 0308 	sub.w	r3, ip, r8
 8021d48:	eb09 0508 	add.w	r5, r9, r8
 8021d4c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021d50:	b29b      	uxth	r3, r3
 8021d52:	b2ad      	uxth	r5, r5
 8021d54:	f04f 0800 	mov.w	r8, #0
 8021d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d5a:	4282      	cmp	r2, r0
 8021d5c:	d88a      	bhi.n	8021c74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8021d5e:	460a      	mov	r2, r1
 8021d60:	e745      	b.n	8021bee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8021d62:	4594      	cmp	ip, r2
 8021d64:	9d08      	ldr	r5, [sp, #32]
 8021d66:	4686      	mov	lr, r0
 8021d68:	bf27      	ittee	cs
 8021d6a:	ebac 0302 	subcs.w	r3, ip, r2
 8021d6e:	4616      	movcs	r6, r2
 8021d70:	eba2 010c 	subcc.w	r1, r2, ip
 8021d74:	4666      	movcc	r6, ip
 8021d76:	bf27      	ittee	cs
 8021d78:	b29b      	uxthcs	r3, r3
 8021d7a:	4641      	movcs	r1, r8
 8021d7c:	b289      	uxthcc	r1, r1
 8021d7e:	4643      	movcc	r3, r8
 8021d80:	2dff      	cmp	r5, #255	@ 0xff
 8021d82:	eb09 0506 	add.w	r5, r9, r6
 8021d86:	b2ad      	uxth	r5, r5
 8021d88:	d130      	bne.n	8021dec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8021d8a:	45a9      	cmp	r9, r5
 8021d8c:	f10e 0e03 	add.w	lr, lr, #3
 8021d90:	d17a      	bne.n	8021e88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8021d92:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021d96:	4594      	cmp	ip, r2
 8021d98:	4430      	add	r0, r6
 8021d9a:	d3db      	bcc.n	8021d54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8021d9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021d9e:	9903      	ldr	r1, [sp, #12]
 8021da0:	8812      	ldrh	r2, [r2, #0]
 8021da2:	1a52      	subs	r2, r2, r1
 8021da4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021da6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021daa:	4410      	add	r0, r2
 8021dac:	9a07      	ldr	r2, [sp, #28]
 8021dae:	3201      	adds	r2, #1
 8021db0:	428a      	cmp	r2, r1
 8021db2:	9207      	str	r2, [sp, #28]
 8021db4:	f040 8081 	bne.w	8021eba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8021db8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8021dbc:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8021dc0:	9b03      	ldr	r3, [sp, #12]
 8021dc2:	eba8 080c 	sub.w	r8, r8, ip
 8021dc6:	fa1f f888 	uxth.w	r8, r8
 8021dca:	f1b8 0f00 	cmp.w	r8, #0
 8021dce:	bf08      	it	eq
 8021dd0:	461a      	moveq	r2, r3
 8021dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021dd4:	bf18      	it	ne
 8021dd6:	2200      	movne	r2, #0
 8021dd8:	3301      	adds	r3, #1
 8021dda:	b292      	uxth	r2, r2
 8021ddc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021dde:	e6fd      	b.n	8021bdc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8021de0:	24015c48 	.word	0x24015c48
 8021de4:	24015c42 	.word	0x24015c42
 8021de8:	fffff7fb 	.word	0xfffff7fb
 8021dec:	45a9      	cmp	r9, r5
 8021dee:	f10e 0e03 	add.w	lr, lr, #3
 8021df2:	d0ce      	beq.n	8021d92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8021df4:	f109 0701 	add.w	r7, r9, #1
 8021df8:	44a1      	add	r9, r4
 8021dfa:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8021dfe:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8021e02:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021e04:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021e08:	9f05      	ldr	r7, [sp, #20]
 8021e0a:	eb07 0908 	add.w	r9, r7, r8
 8021e0e:	f817 8008 	ldrb.w	r8, [r7, r8]
 8021e12:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8021e14:	fb1b fb07 	smulbb	fp, fp, r7
 8021e18:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021e1a:	fb08 b807 	mla	r8, r8, r7, fp
 8021e1e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8021e20:	fa1f f888 	uxth.w	r8, r8
 8021e24:	f108 0b01 	add.w	fp, r8, #1
 8021e28:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021e2c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8021e30:	fb1b fb07 	smulbb	fp, fp, r7
 8021e34:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021e38:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021e3a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8021e3e:	f899 8001 	ldrb.w	r8, [r9, #1]
 8021e42:	fb08 b807 	mla	r8, r8, r7, fp
 8021e46:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8021e48:	fa1f f888 	uxth.w	r8, r8
 8021e4c:	f108 0b01 	add.w	fp, r8, #1
 8021e50:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021e54:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021e58:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8021e5c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8021e60:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8021e64:	fb19 f907 	smulbb	r9, r9, r7
 8021e68:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021e6a:	fb08 9807 	mla	r8, r8, r7, r9
 8021e6e:	fa1f f888 	uxth.w	r8, r8
 8021e72:	f108 0901 	add.w	r9, r8, #1
 8021e76:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8021e7a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8021e7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021e82:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8021e86:	e7b1      	b.n	8021dec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8021e88:	f109 0b01 	add.w	fp, r9, #1
 8021e8c:	44a1      	add	r9, r4
 8021e8e:	9f05      	ldr	r7, [sp, #20]
 8021e90:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8021e94:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021e98:	eb07 0908 	add.w	r9, r7, r8
 8021e9c:	f817 8008 	ldrb.w	r8, [r7, r8]
 8021ea0:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8021ea4:	f899 8001 	ldrb.w	r8, [r9, #1]
 8021ea8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8021eac:	f899 8002 	ldrb.w	r8, [r9, #2]
 8021eb0:	fa1f f98b 	uxth.w	r9, fp
 8021eb4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8021eb8:	e767      	b.n	8021d8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8021eba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021ebe:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8021ec2:	eba8 0801 	sub.w	r8, r8, r1
 8021ec6:	fa1f f888 	uxth.w	r8, r8
 8021eca:	f1b8 0f00 	cmp.w	r8, #0
 8021ece:	bf18      	it	ne
 8021ed0:	2100      	movne	r1, #0
 8021ed2:	e741      	b.n	8021d58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8021ed4:	4b03      	ldr	r3, [pc, #12]	@ (8021ee4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8021ed6:	6818      	ldr	r0, [r3, #0]
 8021ed8:	6803      	ldr	r3, [r0, #0]
 8021eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021edc:	4798      	blx	r3
 8021ede:	b01b      	add	sp, #108	@ 0x6c
 8021ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ee4:	24015c48 	.word	0x24015c48

08021ee8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eec:	b09d      	sub	sp, #116	@ 0x74
 8021eee:	461d      	mov	r5, r3
 8021ef0:	4604      	mov	r4, r0
 8021ef2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021ef4:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8021ef8:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8021efc:	920c      	str	r2, [sp, #48]	@ 0x30
 8021efe:	2a00      	cmp	r2, #0
 8021f00:	f000 81de 	beq.w	80222c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8021f04:	6828      	ldr	r0, [r5, #0]
 8021f06:	aa18      	add	r2, sp, #96	@ 0x60
 8021f08:	6869      	ldr	r1, [r5, #4]
 8021f0a:	c203      	stmia	r2!, {r0, r1}
 8021f0c:	6818      	ldr	r0, [r3, #0]
 8021f0e:	aa1a      	add	r2, sp, #104	@ 0x68
 8021f10:	6859      	ldr	r1, [r3, #4]
 8021f12:	c203      	stmia	r2!, {r0, r1}
 8021f14:	a818      	add	r0, sp, #96	@ 0x60
 8021f16:	f7fa f8e5 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f1a:	4629      	mov	r1, r5
 8021f1c:	a81a      	add	r0, sp, #104	@ 0x68
 8021f1e:	f7fa f909 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f22:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8021f26:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8021f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021f2e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8021f32:	bfdb      	ittet	le
 8021f34:	b29a      	uxthle	r2, r3
 8021f36:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021f3a:	2201      	movgt	r2, #1
 8021f3c:	fb91 f2f2 	sdivle	r2, r1, r2
 8021f40:	9201      	str	r2, [sp, #4]
 8021f42:	9801      	ldr	r0, [sp, #4]
 8021f44:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021f48:	9901      	ldr	r1, [sp, #4]
 8021f4a:	fb92 f0f0 	sdiv	r0, r2, r0
 8021f4e:	b280      	uxth	r0, r0
 8021f50:	440f      	add	r7, r1
 8021f52:	900d      	str	r0, [sp, #52]	@ 0x34
 8021f54:	3f01      	subs	r7, #1
 8021f56:	9801      	ldr	r0, [sp, #4]
 8021f58:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021f5a:	fb05 2510 	mls	r5, r5, r0, r2
 8021f5e:	fb97 f7f1 	sdiv	r7, r7, r1
 8021f62:	fb15 f503 	smulbb	r5, r5, r3
 8021f66:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8021f6a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8021f6e:	3701      	adds	r7, #1
 8021f70:	440d      	add	r5, r1
 8021f72:	4419      	add	r1, r3
 8021f74:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8021f78:	b2bf      	uxth	r7, r7
 8021f7a:	441a      	add	r2, r3
 8021f7c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021f80:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021f84:	00bf      	lsls	r7, r7, #2
 8021f86:	9304      	str	r3, [sp, #16]
 8021f88:	b2ad      	uxth	r5, r5
 8021f8a:	4bb0      	ldr	r3, [pc, #704]	@ (802224c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8021f8c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021f90:	6818      	ldr	r0, [r3, #0]
 8021f92:	6803      	ldr	r3, [r0, #0]
 8021f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f96:	4798      	blx	r3
 8021f98:	4bad      	ldr	r3, [pc, #692]	@ (8022250 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8021f9a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8021f9e:	2d00      	cmp	r5, #0
 8021fa0:	881a      	ldrh	r2, [r3, #0]
 8021fa2:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8021fa6:	fb02 f606 	mul.w	r6, r2, r6
 8021faa:	fb02 c101 	mla	r1, r2, r1, ip
 8021fae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021fb2:	9316      	str	r3, [sp, #88]	@ 0x58
 8021fb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021fb8:	4ba6      	ldr	r3, [pc, #664]	@ (8022254 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8021fba:	eb00 0801 	add.w	r8, r0, r1
 8021fbe:	bf18      	it	ne
 8021fc0:	2100      	movne	r1, #0
 8021fc2:	eba3 0304 	sub.w	r3, r3, r4
 8021fc6:	eb08 0206 	add.w	r2, r8, r6
 8021fca:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021fcc:	9208      	str	r2, [sp, #32]
 8021fce:	f107 0204 	add.w	r2, r7, #4
 8021fd2:	9211      	str	r2, [sp, #68]	@ 0x44
 8021fd4:	9a04      	ldr	r2, [sp, #16]
 8021fd6:	bf08      	it	eq
 8021fd8:	4611      	moveq	r1, r2
 8021fda:	2200      	movs	r2, #0
 8021fdc:	b289      	uxth	r1, r1
 8021fde:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021fe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021fe4:	fa12 f383 	uxtah	r3, r2, r3
 8021fe8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021fea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021fee:	3304      	adds	r3, #4
 8021ff0:	9306      	str	r3, [sp, #24]
 8021ff2:	9b08      	ldr	r3, [sp, #32]
 8021ff4:	4543      	cmp	r3, r8
 8021ff6:	f240 815e 	bls.w	80222b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8021ffa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021ffe:	f04f 0b01 	mov.w	fp, #1
 8022002:	9a01      	ldr	r2, [sp, #4]
 8022004:	9806      	ldr	r0, [sp, #24]
 8022006:	465e      	mov	r6, fp
 8022008:	f8cd b008 	str.w	fp, [sp, #8]
 802200c:	7800      	ldrb	r0, [r0, #0]
 802200e:	fbb5 f3f3 	udiv	r3, r5, r3
 8022012:	1ad3      	subs	r3, r2, r3
 8022014:	900e      	str	r0, [sp, #56]	@ 0x38
 8022016:	3001      	adds	r0, #1
 8022018:	b29b      	uxth	r3, r3
 802201a:	9005      	str	r0, [sp, #20]
 802201c:	9312      	str	r3, [sp, #72]	@ 0x48
 802201e:	9b06      	ldr	r3, [sp, #24]
 8022020:	785a      	ldrb	r2, [r3, #1]
 8022022:	789b      	ldrb	r3, [r3, #2]
 8022024:	021b      	lsls	r3, r3, #8
 8022026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802202a:	9a06      	ldr	r2, [sp, #24]
 802202c:	78d2      	ldrb	r2, [r2, #3]
 802202e:	4313      	orrs	r3, r2
 8022030:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022032:	441a      	add	r2, r3
 8022034:	1c50      	adds	r0, r2, #1
 8022036:	7852      	ldrb	r2, [r2, #1]
 8022038:	9003      	str	r0, [sp, #12]
 802203a:	0212      	lsls	r2, r2, #8
 802203c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802203e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022042:	5cc3      	ldrb	r3, [r0, r3]
 8022044:	431a      	orrs	r2, r3
 8022046:	b293      	uxth	r3, r2
 8022048:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 802204c:	930a      	str	r3, [sp, #40]	@ 0x28
 802204e:	2300      	movs	r3, #0
 8022050:	461a      	mov	r2, r3
 8022052:	9307      	str	r3, [sp, #28]
 8022054:	2d00      	cmp	r5, #0
 8022056:	d07c      	beq.n	8022152 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8022058:	42ae      	cmp	r6, r5
 802205a:	d26c      	bcs.n	8022136 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 802205c:	9b08      	ldr	r3, [sp, #32]
 802205e:	1bad      	subs	r5, r5, r6
 8022060:	4608      	mov	r0, r1
 8022062:	4543      	cmp	r3, r8
 8022064:	b2ad      	uxth	r5, r5
 8022066:	d802      	bhi.n	802206e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8022068:	e071      	b.n	802214e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 802206a:	2b00      	cmp	r3, #0
 802206c:	d15d      	bne.n	802212a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 802206e:	9b03      	ldr	r3, [sp, #12]
 8022070:	9a02      	ldr	r2, [sp, #8]
 8022072:	785b      	ldrb	r3, [r3, #1]
 8022074:	f1c2 0207 	rsb	r2, r2, #7
 8022078:	9902      	ldr	r1, [sp, #8]
 802207a:	4093      	lsls	r3, r2
 802207c:	005b      	lsls	r3, r3, #1
 802207e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022082:	9b03      	ldr	r3, [sp, #12]
 8022084:	781b      	ldrb	r3, [r3, #0]
 8022086:	410b      	asrs	r3, r1
 8022088:	3101      	adds	r1, #1
 802208a:	b2c9      	uxtb	r1, r1
 802208c:	b2db      	uxtb	r3, r3
 802208e:	2908      	cmp	r1, #8
 8022090:	9102      	str	r1, [sp, #8]
 8022092:	9903      	ldr	r1, [sp, #12]
 8022094:	ea43 0302 	orr.w	r3, r3, r2
 8022098:	bf0c      	ite	eq
 802209a:	3102      	addeq	r1, #2
 802209c:	3101      	addne	r1, #1
 802209e:	b29a      	uxth	r2, r3
 80220a0:	bf05      	ittet	eq
 80220a2:	9103      	streq	r1, [sp, #12]
 80220a4:	2100      	moveq	r1, #0
 80220a6:	9103      	strne	r1, [sp, #12]
 80220a8:	9102      	streq	r1, [sp, #8]
 80220aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80220ac:	4291      	cmp	r1, r2
 80220ae:	d30a      	bcc.n	80220c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80220b0:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80220b4:	2301      	movs	r3, #1
 80220b6:	9905      	ldr	r1, [sp, #20]
 80220b8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80220bc:	d30f      	bcc.n	80220de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80220be:	469b      	mov	fp, r3
 80220c0:	f04f 0c00 	mov.w	ip, #0
 80220c4:	e032      	b.n	802212c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80220c6:	9b05      	ldr	r3, [sp, #20]
 80220c8:	429a      	cmp	r2, r3
 80220ca:	d318      	bcc.n	80220fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 80220cc:	eb04 030b 	add.w	r3, r4, fp
 80220d0:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80220d4:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80220d8:	f10b 0301 	add.w	r3, fp, #1
 80220dc:	b29b      	uxth	r3, r3
 80220de:	9905      	ldr	r1, [sp, #20]
 80220e0:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80220e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80220e8:	710e      	strb	r6, [r1, #4]
 80220ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80220ec:	80ce      	strh	r6, [r1, #6]
 80220ee:	f10b 0601 	add.w	r6, fp, #1
 80220f2:	714e      	strb	r6, [r1, #5]
 80220f4:	9905      	ldr	r1, [sp, #20]
 80220f6:	3101      	adds	r1, #1
 80220f8:	b289      	uxth	r1, r1
 80220fa:	9105      	str	r1, [sp, #20]
 80220fc:	e7df      	b.n	80220be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80220fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022102:	4611      	mov	r1, r2
 8022104:	795b      	ldrb	r3, [r3, #5]
 8022106:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802210a:	4426      	add	r6, r4
 802210c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802210e:	4437      	add	r7, r6
 8022110:	2f00      	cmp	r7, #0
 8022112:	dd06      	ble.n	8022122 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8022114:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8022118:	790f      	ldrb	r7, [r1, #4]
 802211a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802211e:	88c9      	ldrh	r1, [r1, #6]
 8022120:	e7f4      	b.n	802210c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8022122:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8022126:	b29b      	uxth	r3, r3
 8022128:	e7c5      	b.n	80220b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 802212a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802212c:	920a      	str	r2, [sp, #40]	@ 0x28
 802212e:	4601      	mov	r1, r0
 8022130:	4662      	mov	r2, ip
 8022132:	461e      	mov	r6, r3
 8022134:	e78e      	b.n	8022054 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8022136:	1b73      	subs	r3, r6, r5
 8022138:	eb02 0c05 	add.w	ip, r2, r5
 802213c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022140:	b29b      	uxth	r3, r3
 8022142:	fa1f fc8c 	uxth.w	ip, ip
 8022146:	2500      	movs	r5, #0
 8022148:	9a08      	ldr	r2, [sp, #32]
 802214a:	4542      	cmp	r2, r8
 802214c:	d88d      	bhi.n	802206a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 802214e:	4601      	mov	r1, r0
 8022150:	e74f      	b.n	8021ff2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8022152:	428e      	cmp	r6, r1
 8022154:	bf2b      	itete	cs
 8022156:	468e      	movcs	lr, r1
 8022158:	46b6      	movcc	lr, r6
 802215a:	1a73      	subcs	r3, r6, r1
 802215c:	1b88      	subcc	r0, r1, r6
 802215e:	eb02 0c0e 	add.w	ip, r2, lr
 8022162:	bf2b      	itete	cs
 8022164:	4628      	movcs	r0, r5
 8022166:	462b      	movcc	r3, r5
 8022168:	b29b      	uxthcs	r3, r3
 802216a:	b280      	uxthcc	r0, r0
 802216c:	f108 0503 	add.w	r5, r8, #3
 8022170:	fa1f fc8c 	uxth.w	ip, ip
 8022174:	4562      	cmp	r2, ip
 8022176:	d06f      	beq.n	8022258 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8022178:	1c57      	adds	r7, r2, #1
 802217a:	4422      	add	r2, r4
 802217c:	b2bf      	uxth	r7, r7
 802217e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8022182:	9713      	str	r7, [sp, #76]	@ 0x4c
 8022184:	2704      	movs	r7, #4
 8022186:	46b9      	mov	r9, r7
 8022188:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802218a:	fb19 7202 	smlabb	r2, r9, r2, r7
 802218e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8022190:	58bf      	ldr	r7, [r7, r2]
 8022192:	0e3a      	lsrs	r2, r7, #24
 8022194:	9209      	str	r2, [sp, #36]	@ 0x24
 8022196:	d016      	beq.n	80221c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8022198:	f3c7 2907 	ubfx	r9, r7, #8, #8
 802219c:	fa5f fa87 	uxtb.w	sl, r7
 80221a0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80221a4:	fa5f f289 	uxtb.w	r2, r9
 80221a8:	9214      	str	r2, [sp, #80]	@ 0x50
 80221aa:	b2fa      	uxtb	r2, r7
 80221ac:	9215      	str	r2, [sp, #84]	@ 0x54
 80221ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80221b0:	2aff      	cmp	r2, #255	@ 0xff
 80221b2:	d10b      	bne.n	80221cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80221b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80221b6:	2aff      	cmp	r2, #255	@ 0xff
 80221b8:	d108      	bne.n	80221cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80221ba:	f805 ac03 	strb.w	sl, [r5, #-3]
 80221be:	f805 9c02 	strb.w	r9, [r5, #-2]
 80221c2:	f805 7c01 	strb.w	r7, [r5, #-1]
 80221c6:	3503      	adds	r5, #3
 80221c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80221ca:	e7d3      	b.n	8022174 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80221cc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80221ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80221d0:	437a      	muls	r2, r7
 80221d2:	1c57      	adds	r7, r2, #1
 80221d4:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80221d8:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80221dc:	1212      	asrs	r2, r2, #8
 80221de:	fa1f f982 	uxth.w	r9, r2
 80221e2:	43d2      	mvns	r2, r2
 80221e4:	fb1a fa09 	smulbb	sl, sl, r9
 80221e8:	b2d2      	uxtb	r2, r2
 80221ea:	fb07 a702 	mla	r7, r7, r2, sl
 80221ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80221f0:	b2bf      	uxth	r7, r7
 80221f2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80221f4:	f107 0a01 	add.w	sl, r7, #1
 80221f8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80221fc:	fb12 fa09 	smulbb	sl, r2, r9
 8022200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022202:	123f      	asrs	r7, r7, #8
 8022204:	f805 7c03 	strb.w	r7, [r5, #-3]
 8022208:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 802220c:	fb07 aa02 	mla	sl, r7, r2, sl
 8022210:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022212:	fb12 f909 	smulbb	r9, r2, r9
 8022216:	fa1f fa8a 	uxth.w	sl, sl
 802221a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802221c:	f10a 0701 	add.w	r7, sl, #1
 8022220:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022224:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8022228:	fb07 9902 	mla	r9, r7, r2, r9
 802222c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022230:	fa1f f989 	uxth.w	r9, r9
 8022234:	f805 ac02 	strb.w	sl, [r5, #-2]
 8022238:	f109 0201 	add.w	r2, r9, #1
 802223c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8022240:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022244:	f805 9c01 	strb.w	r9, [r5, #-1]
 8022248:	e7bd      	b.n	80221c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 802224a:	bf00      	nop
 802224c:	24015c48 	.word	0x24015c48
 8022250:	24015c42 	.word	0x24015c42
 8022254:	fffff7fb 	.word	0xfffff7fb
 8022258:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802225c:	428e      	cmp	r6, r1
 802225e:	44f0      	add	r8, lr
 8022260:	f4ff af71 	bcc.w	8022146 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8022264:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022266:	9904      	ldr	r1, [sp, #16]
 8022268:	8812      	ldrh	r2, [r2, #0]
 802226a:	1a52      	subs	r2, r2, r1
 802226c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802226e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022272:	4490      	add	r8, r2
 8022274:	9a07      	ldr	r2, [sp, #28]
 8022276:	3201      	adds	r2, #1
 8022278:	428a      	cmp	r2, r1
 802227a:	9207      	str	r2, [sp, #28]
 802227c:	d111      	bne.n	80222a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 802227e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8022282:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8022286:	9b04      	ldr	r3, [sp, #16]
 8022288:	eba5 050c 	sub.w	r5, r5, ip
 802228c:	b2ad      	uxth	r5, r5
 802228e:	2d00      	cmp	r5, #0
 8022290:	bf08      	it	eq
 8022292:	4619      	moveq	r1, r3
 8022294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022296:	bf18      	it	ne
 8022298:	2100      	movne	r1, #0
 802229a:	3301      	adds	r3, #1
 802229c:	b289      	uxth	r1, r1
 802229e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80222a0:	e69e      	b.n	8021fe0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80222a2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80222a6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80222aa:	1a2d      	subs	r5, r5, r0
 80222ac:	b2ad      	uxth	r5, r5
 80222ae:	2d00      	cmp	r5, #0
 80222b0:	bf18      	it	ne
 80222b2:	2000      	movne	r0, #0
 80222b4:	e748      	b.n	8022148 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80222b6:	4b04      	ldr	r3, [pc, #16]	@ (80222c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80222b8:	6818      	ldr	r0, [r3, #0]
 80222ba:	6803      	ldr	r3, [r0, #0]
 80222bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222be:	4798      	blx	r3
 80222c0:	b01d      	add	sp, #116	@ 0x74
 80222c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222c6:	bf00      	nop
 80222c8:	24015c48 	.word	0x24015c48

080222cc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80222cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222d0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80222d4:	9c06      	ldr	r4, [sp, #24]
 80222d6:	2800      	cmp	r0, #0
 80222d8:	d06e      	beq.n	80223b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80222da:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80222de:	2d00      	cmp	r5, #0
 80222e0:	dd6a      	ble.n	80223b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80222e2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80222e6:	f1bc 0f00 	cmp.w	ip, #0
 80222ea:	dd65      	ble.n	80223b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80222ec:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80222f0:	28ff      	cmp	r0, #255	@ 0xff
 80222f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80222f6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80222fa:	fb02 3306 	mla	r3, r2, r6, r3
 80222fe:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8022302:	b2e4      	uxtb	r4, r4
 8022304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022308:	4419      	add	r1, r3
 802230a:	fb02 f30c 	mul.w	r3, r2, ip
 802230e:	eba2 0205 	sub.w	r2, r2, r5
 8022312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802231a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802231e:	440b      	add	r3, r1
 8022320:	d03e      	beq.n	80223a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8022322:	fa1f fc80 	uxth.w	ip, r0
 8022326:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 802232a:	fb06 f60c 	mul.w	r6, r6, ip
 802232e:	b280      	uxth	r0, r0
 8022330:	fb07 f70c 	mul.w	r7, r7, ip
 8022334:	fb04 f40c 	mul.w	r4, r4, ip
 8022338:	4299      	cmp	r1, r3
 802233a:	d23d      	bcs.n	80223b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802233c:	eb01 0c05 	add.w	ip, r1, r5
 8022340:	458c      	cmp	ip, r1
 8022342:	f101 0e03 	add.w	lr, r1, #3
 8022346:	d928      	bls.n	802239a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8022348:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802234c:	fb11 f100 	smulbb	r1, r1, r0
 8022350:	4421      	add	r1, r4
 8022352:	b289      	uxth	r1, r1
 8022354:	f101 0801 	add.w	r8, r1, #1
 8022358:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802235c:	1209      	asrs	r1, r1, #8
 802235e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022362:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8022366:	fb11 f100 	smulbb	r1, r1, r0
 802236a:	4439      	add	r1, r7
 802236c:	b289      	uxth	r1, r1
 802236e:	f101 0801 	add.w	r8, r1, #1
 8022372:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022376:	1209      	asrs	r1, r1, #8
 8022378:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802237c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022380:	fb11 f100 	smulbb	r1, r1, r0
 8022384:	4431      	add	r1, r6
 8022386:	b289      	uxth	r1, r1
 8022388:	f101 0801 	add.w	r8, r1, #1
 802238c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022390:	1209      	asrs	r1, r1, #8
 8022392:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8022396:	4671      	mov	r1, lr
 8022398:	e7d2      	b.n	8022340 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 802239a:	4411      	add	r1, r2
 802239c:	e7cc      	b.n	8022338 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 802239e:	4411      	add	r1, r2
 80223a0:	4299      	cmp	r1, r3
 80223a2:	d209      	bcs.n	80223b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80223a4:	1948      	adds	r0, r1, r5
 80223a6:	4281      	cmp	r1, r0
 80223a8:	d2f9      	bcs.n	802239e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80223aa:	700c      	strb	r4, [r1, #0]
 80223ac:	3103      	adds	r1, #3
 80223ae:	f801 7c02 	strb.w	r7, [r1, #-2]
 80223b2:	f801 6c01 	strb.w	r6, [r1, #-1]
 80223b6:	e7f6      	b.n	80223a6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80223b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080223bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80223bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223c0:	b093      	sub	sp, #76	@ 0x4c
 80223c2:	4699      	mov	r9, r3
 80223c4:	4617      	mov	r7, r2
 80223c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80223ca:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 80223ce:	4604      	mov	r4, r0
 80223d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80223d4:	a80c      	add	r0, sp, #48	@ 0x30
 80223d6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 80223da:	460d      	mov	r5, r1
 80223dc:	4649      	mov	r1, r9
 80223de:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80223e2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80223e6:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 80223ea:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 80223ee:	f7f5 fc8b 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 80223f2:	4639      	mov	r1, r7
 80223f4:	a80c      	add	r0, sp, #48	@ 0x30
 80223f6:	f7f5 fc87 	bl	8017d08 <_ZN8touchgfx4RectaNERKS0_>
 80223fa:	4b78      	ldr	r3, [pc, #480]	@ (80225dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80223fc:	8818      	ldrh	r0, [r3, #0]
 80223fe:	4b78      	ldr	r3, [pc, #480]	@ (80225e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8022400:	b202      	sxth	r2, r0
 8022402:	8819      	ldrh	r1, [r3, #0]
 8022404:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8022408:	b20f      	sxth	r7, r1
 802240a:	2b00      	cmp	r3, #0
 802240c:	da07      	bge.n	802241e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 802240e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8022412:	4463      	add	r3, ip
 8022414:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8022418:	2300      	movs	r3, #0
 802241a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 802241e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8022422:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8022426:	1ad2      	subs	r2, r2, r3
 8022428:	4594      	cmp	ip, r2
 802242a:	bfc4      	itt	gt
 802242c:	1ac2      	subgt	r2, r0, r3
 802242e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8022432:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8022436:	2a00      	cmp	r2, #0
 8022438:	da07      	bge.n	802244a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 802243a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 802243e:	4462      	add	r2, ip
 8022440:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8022444:	2200      	movs	r2, #0
 8022446:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802244a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802244e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8022452:	1abf      	subs	r7, r7, r2
 8022454:	45bc      	cmp	ip, r7
 8022456:	f8df c190 	ldr.w	ip, [pc, #400]	@ 80225e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 802245a:	bfc8      	it	gt
 802245c:	1a8f      	subgt	r7, r1, r2
 802245e:	f89c c000 	ldrb.w	ip, [ip]
 8022462:	bfc8      	it	gt
 8022464:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8022468:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802246c:	f1bc 0f00 	cmp.w	ip, #0
 8022470:	d176      	bne.n	8022560 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8022472:	4287      	cmp	r7, r0
 8022474:	bf14      	ite	ne
 8022476:	2100      	movne	r1, #0
 8022478:	2101      	moveq	r1, #1
 802247a:	2f00      	cmp	r7, #0
 802247c:	9107      	str	r1, [sp, #28]
 802247e:	dd73      	ble.n	8022568 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8022480:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8022484:	2900      	cmp	r1, #0
 8022486:	9104      	str	r1, [sp, #16]
 8022488:	dd6e      	ble.n	8022568 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 802248a:	f8b9 1000 	ldrh.w	r1, [r9]
 802248e:	a80e      	add	r0, sp, #56	@ 0x38
 8022490:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8022494:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8022498:	1a5b      	subs	r3, r3, r1
 802249a:	a910      	add	r1, sp, #64	@ 0x40
 802249c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80224a0:	b21b      	sxth	r3, r3
 80224a2:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 80224a6:	f8df a144 	ldr.w	sl, [pc, #324]	@ 80225ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80224aa:	9305      	str	r3, [sp, #20]
 80224ac:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80224b0:	1ad2      	subs	r2, r2, r3
 80224b2:	b213      	sxth	r3, r2
 80224b4:	9306      	str	r3, [sp, #24]
 80224b6:	9b05      	ldr	r3, [sp, #20]
 80224b8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80224bc:	9b06      	ldr	r3, [sp, #24]
 80224be:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80224c2:	9b04      	ldr	r3, [sp, #16]
 80224c4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80224c8:	2300      	movs	r3, #0
 80224ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80224cc:	f7f9 fe32 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224d0:	4640      	mov	r0, r8
 80224d2:	f7f9 fe07 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224d6:	a810      	add	r0, sp, #64	@ 0x40
 80224d8:	f7f9 fe04 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224dc:	4b41      	ldr	r3, [pc, #260]	@ (80225e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80224de:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80224e2:	4628      	mov	r0, r5
 80224e4:	881b      	ldrh	r3, [r3, #0]
 80224e6:	9308      	str	r3, [sp, #32]
 80224e8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80224ec:	b21b      	sxth	r3, r3
 80224ee:	9303      	str	r3, [sp, #12]
 80224f0:	682b      	ldr	r3, [r5, #0]
 80224f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224f4:	4798      	blx	r3
 80224f6:	9a03      	ldr	r2, [sp, #12]
 80224f8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80224fc:	4681      	mov	r9, r0
 80224fe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8022502:	fb13 f302 	smulbb	r3, r3, r2
 8022506:	2203      	movs	r2, #3
 8022508:	f8da 0000 	ldr.w	r0, [sl]
 802250c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8022510:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8022512:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022514:	441d      	add	r5, r3
 8022516:	6803      	ldr	r3, [r0, #0]
 8022518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802251a:	4798      	blx	r3
 802251c:	9009      	str	r0, [sp, #36]	@ 0x24
 802251e:	f8da 0000 	ldr.w	r0, [sl]
 8022522:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8022526:	6803      	ldr	r3, [r0, #0]
 8022528:	910a      	str	r1, [sp, #40]	@ 0x28
 802252a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802252c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8022530:	4798      	blx	r3
 8022532:	f010 0f01 	tst.w	r0, #1
 8022536:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 802253a:	d01e      	beq.n	802257a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 802253c:	f8da 0000 	ldr.w	r0, [sl]
 8022540:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022544:	6803      	ldr	r3, [r0, #0]
 8022546:	9200      	str	r2, [sp, #0]
 8022548:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 802254a:	462b      	mov	r3, r5
 802254c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022550:	47b0      	blx	r6
 8022552:	9b05      	ldr	r3, [sp, #20]
 8022554:	80a7      	strh	r7, [r4, #4]
 8022556:	8023      	strh	r3, [r4, #0]
 8022558:	9b06      	ldr	r3, [sp, #24]
 802255a:	8063      	strh	r3, [r4, #2]
 802255c:	9b04      	ldr	r3, [sp, #16]
 802255e:	e007      	b.n	8022570 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8022560:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8022564:	4288      	cmp	r0, r1
 8022566:	e785      	b.n	8022474 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8022568:	2300      	movs	r3, #0
 802256a:	8023      	strh	r3, [r4, #0]
 802256c:	8063      	strh	r3, [r4, #2]
 802256e:	80a3      	strh	r3, [r4, #4]
 8022570:	4620      	mov	r0, r4
 8022572:	80e3      	strh	r3, [r4, #6]
 8022574:	b013      	add	sp, #76	@ 0x4c
 8022576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802257a:	fb09 f606 	mul.w	r6, r9, r6
 802257e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022580:	fb11 6602 	smlabb	r6, r1, r2, r6
 8022584:	9a07      	ldr	r2, [sp, #28]
 8022586:	4433      	add	r3, r6
 8022588:	461e      	mov	r6, r3
 802258a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802258e:	b16a      	cbz	r2, 80225ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022590:	9a08      	ldr	r2, [sp, #32]
 8022592:	4593      	cmp	fp, r2
 8022594:	d10a      	bne.n	80225ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022596:	f8da 0000 	ldr.w	r0, [sl]
 802259a:	fb09 f303 	mul.w	r3, r9, r3
 802259e:	4629      	mov	r1, r5
 80225a0:	6802      	ldr	r2, [r0, #0]
 80225a2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80225a6:	4632      	mov	r2, r6
 80225a8:	47d0      	blx	sl
 80225aa:	e7d2      	b.n	8022552 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80225ac:	9a03      	ldr	r2, [sp, #12]
 80225ae:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80225ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80225b2:	fb02 5803 	mla	r8, r2, r3, r5
 80225b6:	4545      	cmp	r5, r8
 80225b8:	d2cb      	bcs.n	8022552 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80225ba:	f8db 0000 	ldr.w	r0, [fp]
 80225be:	4629      	mov	r1, r5
 80225c0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80225c4:	6802      	ldr	r2, [r0, #0]
 80225c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225ca:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80225ce:	4632      	mov	r2, r6
 80225d0:	47d0      	blx	sl
 80225d2:	9b03      	ldr	r3, [sp, #12]
 80225d4:	444e      	add	r6, r9
 80225d6:	441d      	add	r5, r3
 80225d8:	e7ed      	b.n	80225b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80225da:	bf00      	nop
 80225dc:	24015c3c 	.word	0x24015c3c
 80225e0:	24015c3e 	.word	0x24015c3e
 80225e4:	24015c42 	.word	0x24015c42
 80225e8:	24015c40 	.word	0x24015c40
 80225ec:	24015c48 	.word	0x24015c48

080225f0 <_ZN8touchgfx8LCD24bppC1Ev>:
 80225f0:	2200      	movs	r2, #0
 80225f2:	490e      	ldr	r1, [pc, #56]	@ (802262c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 80225f4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80225f8:	6001      	str	r1, [r0, #0]
 80225fa:	6642      	str	r2, [r0, #100]	@ 0x64
 80225fc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8022600:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8022604:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022608:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 802260c:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8022610:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8022614:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8022618:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 802261c:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8022620:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8022624:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8022628:	4770      	bx	lr
 802262a:	bf00      	nop
 802262c:	0802fa74 	.word	0x0802fa74

08022630 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022634:	b091      	sub	sp, #68	@ 0x44
 8022636:	4607      	mov	r7, r0
 8022638:	4688      	mov	r8, r1
 802263a:	6810      	ldr	r0, [r2, #0]
 802263c:	6851      	ldr	r1, [r2, #4]
 802263e:	ac0c      	add	r4, sp, #48	@ 0x30
 8022640:	4616      	mov	r6, r2
 8022642:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8022646:	4d64      	ldr	r5, [pc, #400]	@ (80227d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022648:	f8df a190 	ldr.w	sl, [pc, #400]	@ 80227dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802264c:	c403      	stmia	r4!, {r0, r1}
 802264e:	6818      	ldr	r0, [r3, #0]
 8022650:	ac0e      	add	r4, sp, #56	@ 0x38
 8022652:	6859      	ldr	r1, [r3, #4]
 8022654:	c403      	stmia	r4!, {r0, r1}
 8022656:	a80c      	add	r0, sp, #48	@ 0x30
 8022658:	f7f9 fd44 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802265c:	4631      	mov	r1, r6
 802265e:	a80e      	add	r0, sp, #56	@ 0x38
 8022660:	f7f9 fd68 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022664:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022668:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802266c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022670:	6828      	ldr	r0, [r5, #0]
 8022672:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022676:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 802267a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 802267e:	440f      	add	r7, r1
 8022680:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022684:	440a      	add	r2, r1
 8022686:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802268a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802268e:	4413      	add	r3, r2
 8022690:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022694:	6803      	ldr	r3, [r0, #0]
 8022696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022698:	4798      	blx	r3
 802269a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802269e:	6828      	ldr	r0, [r5, #0]
 80226a0:	d01f      	beq.n	80226e2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80226a2:	2201      	movs	r2, #1
 80226a4:	2500      	movs	r5, #0
 80226a6:	6801      	ldr	r1, [r0, #0]
 80226a8:	b2a4      	uxth	r4, r4
 80226aa:	b2b6      	uxth	r6, r6
 80226ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80226b0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80226b4:	250b      	movs	r5, #11
 80226b6:	9507      	str	r5, [sp, #28]
 80226b8:	f8ba 5000 	ldrh.w	r5, [sl]
 80226bc:	f8cd 9010 	str.w	r9, [sp, #16]
 80226c0:	9602      	str	r6, [sp, #8]
 80226c2:	9401      	str	r4, [sp, #4]
 80226c4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80226c8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80226cc:	9203      	str	r2, [sp, #12]
 80226ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80226d2:	9200      	str	r2, [sp, #0]
 80226d4:	4642      	mov	r2, r8
 80226d6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80226d8:	4639      	mov	r1, r7
 80226da:	47a0      	blx	r4
 80226dc:	b011      	add	sp, #68	@ 0x44
 80226de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226e2:	6803      	ldr	r3, [r0, #0]
 80226e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80226e6:	4798      	blx	r3
 80226e8:	f8ba 5000 	ldrh.w	r5, [sl]
 80226ec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80226f0:	f04f 0e04 	mov.w	lr, #4
 80226f4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80226f8:	436e      	muls	r6, r5
 80226fa:	fb05 2303 	mla	r3, r5, r3, r2
 80226fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022702:	1b2d      	subs	r5, r5, r4
 8022704:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802270c:	4418      	add	r0, r3
 802270e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022712:	1982      	adds	r2, r0, r6
 8022714:	1b1b      	subs	r3, r3, r4
 8022716:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802271a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802271c:	4290      	cmp	r0, r2
 802271e:	d254      	bcs.n	80227ca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022720:	eb00 0a04 	add.w	sl, r0, r4
 8022724:	4550      	cmp	r0, sl
 8022726:	d24c      	bcs.n	80227c2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8022728:	f817 1b01 	ldrb.w	r1, [r7], #1
 802272c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8022730:	eb08 0c01 	add.w	ip, r8, r1
 8022734:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022738:	b173      	cbz	r3, 8022758 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802273a:	2bff      	cmp	r3, #255	@ 0xff
 802273c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8022740:	d10c      	bne.n	802275c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022742:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022746:	d109      	bne.n	802275c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022748:	f880 b000 	strb.w	fp, [r0]
 802274c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022750:	7043      	strb	r3, [r0, #1]
 8022752:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022756:	7083      	strb	r3, [r0, #2]
 8022758:	3003      	adds	r0, #3
 802275a:	e7e3      	b.n	8022724 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 802275c:	fb09 f103 	mul.w	r1, r9, r3
 8022760:	1c4b      	adds	r3, r1, #1
 8022762:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022766:	7801      	ldrb	r1, [r0, #0]
 8022768:	121b      	asrs	r3, r3, #8
 802276a:	b29e      	uxth	r6, r3
 802276c:	43db      	mvns	r3, r3
 802276e:	fb1b fb06 	smulbb	fp, fp, r6
 8022772:	b2db      	uxtb	r3, r3
 8022774:	fb01 b103 	mla	r1, r1, r3, fp
 8022778:	b289      	uxth	r1, r1
 802277a:	f101 0b01 	add.w	fp, r1, #1
 802277e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022782:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022786:	fb1b fb03 	smulbb	fp, fp, r3
 802278a:	1209      	asrs	r1, r1, #8
 802278c:	7001      	strb	r1, [r0, #0]
 802278e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022792:	fb01 b106 	mla	r1, r1, r6, fp
 8022796:	b289      	uxth	r1, r1
 8022798:	f101 0b01 	add.w	fp, r1, #1
 802279c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80227a0:	1209      	asrs	r1, r1, #8
 80227a2:	7041      	strb	r1, [r0, #1]
 80227a4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80227a8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80227ac:	fb1c f303 	smulbb	r3, ip, r3
 80227b0:	fb01 3606 	mla	r6, r1, r6, r3
 80227b4:	b2b6      	uxth	r6, r6
 80227b6:	1c73      	adds	r3, r6, #1
 80227b8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80227bc:	1236      	asrs	r6, r6, #8
 80227be:	7086      	strb	r6, [r0, #2]
 80227c0:	e7ca      	b.n	8022758 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80227c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227c4:	4428      	add	r0, r5
 80227c6:	441f      	add	r7, r3
 80227c8:	e7a8      	b.n	802271c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80227ca:	4b03      	ldr	r3, [pc, #12]	@ (80227d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80227cc:	6818      	ldr	r0, [r3, #0]
 80227ce:	6803      	ldr	r3, [r0, #0]
 80227d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227d2:	4798      	blx	r3
 80227d4:	e782      	b.n	80226dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80227d6:	bf00      	nop
 80227d8:	24015c48 	.word	0x24015c48
 80227dc:	24015c42 	.word	0x24015c42

080227e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80227e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227e4:	b091      	sub	sp, #68	@ 0x44
 80227e6:	4680      	mov	r8, r0
 80227e8:	460e      	mov	r6, r1
 80227ea:	6810      	ldr	r0, [r2, #0]
 80227ec:	6851      	ldr	r1, [r2, #4]
 80227ee:	ad0c      	add	r5, sp, #48	@ 0x30
 80227f0:	4614      	mov	r4, r2
 80227f2:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80227f6:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8022990 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80227fa:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8022994 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80227fe:	c503      	stmia	r5!, {r0, r1}
 8022800:	6818      	ldr	r0, [r3, #0]
 8022802:	ad0e      	add	r5, sp, #56	@ 0x38
 8022804:	6859      	ldr	r1, [r3, #4]
 8022806:	c503      	stmia	r5!, {r0, r1}
 8022808:	a80c      	add	r0, sp, #48	@ 0x30
 802280a:	f7f9 fc6b 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802280e:	4621      	mov	r1, r4
 8022810:	a80e      	add	r0, sp, #56	@ 0x38
 8022812:	f7f9 fc8f 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022816:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802281a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802281e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022822:	f8d9 0000 	ldr.w	r0, [r9]
 8022826:	fb11 2103 	smlabb	r1, r1, r3, r2
 802282a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 802282e:	eb08 0401 	add.w	r4, r8, r1
 8022832:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022836:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802283a:	440a      	add	r2, r1
 802283c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022840:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022844:	4413      	add	r3, r2
 8022846:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802284a:	6803      	ldr	r3, [r0, #0]
 802284c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802284e:	4798      	blx	r3
 8022850:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022854:	f8d9 0000 	ldr.w	r0, [r9]
 8022858:	d022      	beq.n	80228a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 802285a:	2200      	movs	r2, #0
 802285c:	f04f 0c01 	mov.w	ip, #1
 8022860:	6801      	ldr	r1, [r0, #0]
 8022862:	b2ad      	uxth	r5, r5
 8022864:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022868:	e9cd c208 	strd	ip, r2, [sp, #32]
 802286c:	f04f 0c0b 	mov.w	ip, #11
 8022870:	f8cd c01c 	str.w	ip, [sp, #28]
 8022874:	f8ba c000 	ldrh.w	ip, [sl]
 8022878:	9704      	str	r7, [sp, #16]
 802287a:	9502      	str	r5, [sp, #8]
 802287c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022880:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022884:	9203      	str	r2, [sp, #12]
 8022886:	fa1f f288 	uxth.w	r2, r8
 802288a:	9201      	str	r2, [sp, #4]
 802288c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022890:	9200      	str	r2, [sp, #0]
 8022892:	4632      	mov	r2, r6
 8022894:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022896:	4621      	mov	r1, r4
 8022898:	47a8      	blx	r5
 802289a:	b011      	add	sp, #68	@ 0x44
 802289c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228a0:	6803      	ldr	r3, [r0, #0]
 80228a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80228a4:	4798      	blx	r3
 80228a6:	f8ba 2000 	ldrh.w	r2, [sl]
 80228aa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80228ae:	f04f 0e03 	mov.w	lr, #3
 80228b2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80228b6:	4355      	muls	r5, r2
 80228b8:	fa1f fc87 	uxth.w	ip, r7
 80228bc:	fb02 1303 	mla	r3, r2, r3, r1
 80228c0:	eba2 0208 	sub.w	r2, r2, r8
 80228c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80228c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80228d0:	4418      	add	r0, r3
 80228d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80228d4:	1943      	adds	r3, r0, r5
 80228d6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80228da:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 80228de:	eba2 0208 	sub.w	r2, r2, r8
 80228e2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80228e6:	b2ad      	uxth	r5, r5
 80228e8:	4298      	cmp	r0, r3
 80228ea:	d24a      	bcs.n	8022982 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80228ec:	eb00 0908 	add.w	r9, r0, r8
 80228f0:	4621      	mov	r1, r4
 80228f2:	4548      	cmp	r0, r9
 80228f4:	460c      	mov	r4, r1
 80228f6:	d240      	bcs.n	802297a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80228f8:	f04f 0a04 	mov.w	sl, #4
 80228fc:	7824      	ldrb	r4, [r4, #0]
 80228fe:	2fff      	cmp	r7, #255	@ 0xff
 8022900:	f101 0101 	add.w	r1, r1, #1
 8022904:	fb1e a404 	smlabb	r4, lr, r4, sl
 8022908:	eb06 0a04 	add.w	sl, r6, r4
 802290c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8022910:	d02b      	beq.n	802296a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8022912:	7804      	ldrb	r4, [r0, #0]
 8022914:	fb14 f405 	smulbb	r4, r4, r5
 8022918:	fb0b 440c 	mla	r4, fp, ip, r4
 802291c:	b2a4      	uxth	r4, r4
 802291e:	f104 0b01 	add.w	fp, r4, #1
 8022922:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022926:	f890 b001 	ldrb.w	fp, [r0, #1]
 802292a:	fb1b fb05 	smulbb	fp, fp, r5
 802292e:	1224      	asrs	r4, r4, #8
 8022930:	7004      	strb	r4, [r0, #0]
 8022932:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022936:	fb04 b40c 	mla	r4, r4, ip, fp
 802293a:	b2a4      	uxth	r4, r4
 802293c:	f104 0b01 	add.w	fp, r4, #1
 8022940:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022944:	1224      	asrs	r4, r4, #8
 8022946:	7044      	strb	r4, [r0, #1]
 8022948:	f89a 4002 	ldrb.w	r4, [sl, #2]
 802294c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022950:	fb1a fa05 	smulbb	sl, sl, r5
 8022954:	fb04 a40c 	mla	r4, r4, ip, sl
 8022958:	b2a4      	uxth	r4, r4
 802295a:	f104 0a01 	add.w	sl, r4, #1
 802295e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022962:	1224      	asrs	r4, r4, #8
 8022964:	7084      	strb	r4, [r0, #2]
 8022966:	3003      	adds	r0, #3
 8022968:	e7c3      	b.n	80228f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 802296a:	f880 b000 	strb.w	fp, [r0]
 802296e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022972:	7044      	strb	r4, [r0, #1]
 8022974:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022978:	e7f4      	b.n	8022964 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 802297a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802297c:	4420      	add	r0, r4
 802297e:	188c      	adds	r4, r1, r2
 8022980:	e7b2      	b.n	80228e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8022982:	4b03      	ldr	r3, [pc, #12]	@ (8022990 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022984:	6818      	ldr	r0, [r3, #0]
 8022986:	6803      	ldr	r3, [r0, #0]
 8022988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802298a:	4798      	blx	r3
 802298c:	e785      	b.n	802289a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 802298e:	bf00      	nop
 8022990:	24015c48 	.word	0x24015c48
 8022994:	24015c42 	.word	0x24015c42

08022998 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022998:	b4f0      	push	{r4, r5, r6, r7}
 802299a:	460c      	mov	r4, r1
 802299c:	4611      	mov	r1, r2
 802299e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80229a2:	461a      	mov	r2, r3
 80229a4:	780f      	ldrb	r7, [r1, #0]
 80229a6:	9b04      	ldr	r3, [sp, #16]
 80229a8:	784e      	ldrb	r6, [r1, #1]
 80229aa:	b11f      	cbz	r7, 80229b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 80229ac:	2f01      	cmp	r7, #1
 80229ae:	d01d      	beq.n	80229ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 80229b0:	bcf0      	pop	{r4, r5, r6, r7}
 80229b2:	4770      	bx	lr
 80229b4:	2e03      	cmp	r6, #3
 80229b6:	d8fb      	bhi.n	80229b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80229b8:	e8df f006 	tbb	[pc, r6]
 80229bc:	16140702 	.word	0x16140702
 80229c0:	9504      	str	r5, [sp, #16]
 80229c2:	4620      	mov	r0, r4
 80229c4:	bcf0      	pop	{r4, r5, r6, r7}
 80229c6:	f7ff be33 	b.w	8022630 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80229ca:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80229cc:	2800      	cmp	r0, #0
 80229ce:	d0ef      	beq.n	80229b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80229d0:	6806      	ldr	r6, [r0, #0]
 80229d2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80229d6:	68f5      	ldr	r5, [r6, #12]
 80229d8:	4613      	mov	r3, r2
 80229da:	46ac      	mov	ip, r5
 80229dc:	460a      	mov	r2, r1
 80229de:	4621      	mov	r1, r4
 80229e0:	bcf0      	pop	{r4, r5, r6, r7}
 80229e2:	4760      	bx	ip
 80229e4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80229e6:	e7f1      	b.n	80229cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80229e8:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80229ea:	e7ef      	b.n	80229cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80229ec:	2e03      	cmp	r6, #3
 80229ee:	d8df      	bhi.n	80229b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80229f0:	e8df f006 	tbb	[pc, r6]
 80229f4:	110f0702 	.word	0x110f0702
 80229f8:	9504      	str	r5, [sp, #16]
 80229fa:	4620      	mov	r0, r4
 80229fc:	bcf0      	pop	{r4, r5, r6, r7}
 80229fe:	f7ff beef 	b.w	80227e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022a02:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8022a04:	2800      	cmp	r0, #0
 8022a06:	d0d3      	beq.n	80229b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022a08:	6806      	ldr	r6, [r0, #0]
 8022a0a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022a0e:	68b5      	ldr	r5, [r6, #8]
 8022a10:	e7e2      	b.n	80229d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022a12:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8022a14:	e7f6      	b.n	8022a04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8022a16:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8022a18:	e7f4      	b.n	8022a04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08022a1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8022a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022a20:	4605      	mov	r5, r0
 8022a22:	b08f      	sub	sp, #60	@ 0x3c
 8022a24:	460c      	mov	r4, r1
 8022a26:	461f      	mov	r7, r3
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	d052      	beq.n	8022ad2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022a2c:	6808      	ldr	r0, [r1, #0]
 8022a2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8022a30:	6849      	ldr	r1, [r1, #4]
 8022a32:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8022bfc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8022a36:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8022c00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022a3a:	c303      	stmia	r3!, {r0, r1}
 8022a3c:	6810      	ldr	r0, [r2, #0]
 8022a3e:	ab0c      	add	r3, sp, #48	@ 0x30
 8022a40:	6851      	ldr	r1, [r2, #4]
 8022a42:	c303      	stmia	r3!, {r0, r1}
 8022a44:	a80a      	add	r0, sp, #40	@ 0x28
 8022a46:	f7f9 fb4d 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a4a:	4621      	mov	r1, r4
 8022a4c:	a80c      	add	r0, sp, #48	@ 0x30
 8022a4e:	f7f9 fb71 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022a52:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022a56:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022a5a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022a5e:	f8d8 0000 	ldr.w	r0, [r8]
 8022a62:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022a66:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8022a6a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8022a6e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8022a72:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022a76:	440a      	add	r2, r1
 8022a78:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022a7c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022a80:	4413      	add	r3, r2
 8022a82:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022a86:	6803      	ldr	r3, [r0, #0]
 8022a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022a8a:	4798      	blx	r3
 8022a8c:	2fff      	cmp	r7, #255	@ 0xff
 8022a8e:	d023      	beq.n	8022ad8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022a90:	f010 0f04 	tst.w	r0, #4
 8022a94:	f8d8 0000 	ldr.w	r0, [r8]
 8022a98:	d021      	beq.n	8022ade <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8022a9a:	2100      	movs	r1, #0
 8022a9c:	f04f 0e01 	mov.w	lr, #1
 8022aa0:	f8d0 c000 	ldr.w	ip, [r0]
 8022aa4:	b2a4      	uxth	r4, r4
 8022aa6:	9106      	str	r1, [sp, #24]
 8022aa8:	b2b6      	uxth	r6, r6
 8022aaa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022aae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022ab2:	e9cd e107 	strd	lr, r1, [sp, #28]
 8022ab6:	f8b9 e000 	ldrh.w	lr, [r9]
 8022aba:	9703      	str	r7, [sp, #12]
 8022abc:	9401      	str	r4, [sp, #4]
 8022abe:	9600      	str	r6, [sp, #0]
 8022ac0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022ac4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022ac8:	9102      	str	r1, [sp, #8]
 8022aca:	4629      	mov	r1, r5
 8022acc:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8022ad0:	47a0      	blx	r4
 8022ad2:	b00f      	add	sp, #60	@ 0x3c
 8022ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022ad8:	f010 0f01 	tst.w	r0, #1
 8022adc:	e7da      	b.n	8022a94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8022ade:	6803      	ldr	r3, [r0, #0]
 8022ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022ae2:	4798      	blx	r3
 8022ae4:	f8b9 1000 	ldrh.w	r1, [r9]
 8022ae8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022aec:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8022af0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022af4:	434c      	muls	r4, r1
 8022af6:	2fff      	cmp	r7, #255	@ 0xff
 8022af8:	fb01 2303 	mla	r3, r1, r3, r2
 8022afc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022b00:	eba1 0106 	sub.w	r1, r1, r6
 8022b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022b0c:	4418      	add	r0, r3
 8022b0e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022b12:	eba3 0606 	sub.w	r6, r3, r6
 8022b16:	4404      	add	r4, r0
 8022b18:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8022b1c:	d04a      	beq.n	8022bb4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8022b1e:	43fa      	mvns	r2, r7
 8022b20:	b2bb      	uxth	r3, r7
 8022b22:	b2d7      	uxtb	r7, r2
 8022b24:	42a0      	cmp	r0, r4
 8022b26:	d263      	bcs.n	8022bf0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022b28:	eb00 0e0c 	add.w	lr, r0, ip
 8022b2c:	4586      	cmp	lr, r0
 8022b2e:	f100 0803 	add.w	r8, r0, #3
 8022b32:	d93a      	bls.n	8022baa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8022b34:	f835 2b02 	ldrh.w	r2, [r5], #2
 8022b38:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8022b3c:	00d0      	lsls	r0, r2, #3
 8022b3e:	fb19 f907 	smulbb	r9, r9, r7
 8022b42:	b2c0      	uxtb	r0, r0
 8022b44:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022b48:	fb00 9003 	mla	r0, r0, r3, r9
 8022b4c:	b280      	uxth	r0, r0
 8022b4e:	f100 0901 	add.w	r9, r0, #1
 8022b52:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022b56:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8022b5a:	fb19 f907 	smulbb	r9, r9, r7
 8022b5e:	1200      	asrs	r0, r0, #8
 8022b60:	f808 0c03 	strb.w	r0, [r8, #-3]
 8022b64:	10d0      	asrs	r0, r2, #3
 8022b66:	1212      	asrs	r2, r2, #8
 8022b68:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8022b6c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022b70:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8022b74:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022b78:	fb00 9003 	mla	r0, r0, r3, r9
 8022b7c:	b280      	uxth	r0, r0
 8022b7e:	f100 0901 	add.w	r9, r0, #1
 8022b82:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022b86:	1200      	asrs	r0, r0, #8
 8022b88:	f808 0c02 	strb.w	r0, [r8, #-2]
 8022b8c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8022b90:	fb10 f007 	smulbb	r0, r0, r7
 8022b94:	fb02 0203 	mla	r2, r2, r3, r0
 8022b98:	b292      	uxth	r2, r2
 8022b9a:	1c50      	adds	r0, r2, #1
 8022b9c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022ba0:	4640      	mov	r0, r8
 8022ba2:	1212      	asrs	r2, r2, #8
 8022ba4:	f808 2c01 	strb.w	r2, [r8, #-1]
 8022ba8:	e7c0      	b.n	8022b2c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8022baa:	4408      	add	r0, r1
 8022bac:	4435      	add	r5, r6
 8022bae:	e7b9      	b.n	8022b24 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8022bb0:	4408      	add	r0, r1
 8022bb2:	4435      	add	r5, r6
 8022bb4:	42a0      	cmp	r0, r4
 8022bb6:	d21b      	bcs.n	8022bf0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022bb8:	eb00 070c 	add.w	r7, r0, ip
 8022bbc:	42b8      	cmp	r0, r7
 8022bbe:	d2f7      	bcs.n	8022bb0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8022bc0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8022bc4:	3003      	adds	r0, #3
 8022bc6:	00da      	lsls	r2, r3, #3
 8022bc8:	b2d2      	uxtb	r2, r2
 8022bca:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022bce:	f800 2c03 	strb.w	r2, [r0, #-3]
 8022bd2:	10da      	asrs	r2, r3, #3
 8022bd4:	121b      	asrs	r3, r3, #8
 8022bd6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022bda:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8022bde:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022be2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022be6:	f800 2c02 	strb.w	r2, [r0, #-2]
 8022bea:	f800 3c01 	strb.w	r3, [r0, #-1]
 8022bee:	e7e5      	b.n	8022bbc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8022bf0:	4b02      	ldr	r3, [pc, #8]	@ (8022bfc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8022bf2:	6818      	ldr	r0, [r3, #0]
 8022bf4:	6803      	ldr	r3, [r0, #0]
 8022bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022bf8:	4798      	blx	r3
 8022bfa:	e76a      	b.n	8022ad2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022bfc:	24015c48 	.word	0x24015c48
 8022c00:	24015c42 	.word	0x24015c42

08022c04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c08:	b08a      	sub	sp, #40	@ 0x28
 8022c0a:	460d      	mov	r5, r1
 8022c0c:	4604      	mov	r4, r0
 8022c0e:	461e      	mov	r6, r3
 8022c10:	6808      	ldr	r0, [r1, #0]
 8022c12:	ab06      	add	r3, sp, #24
 8022c14:	6849      	ldr	r1, [r1, #4]
 8022c16:	4f5d      	ldr	r7, [pc, #372]	@ (8022d8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8022c18:	c303      	stmia	r3!, {r0, r1}
 8022c1a:	6810      	ldr	r0, [r2, #0]
 8022c1c:	ab08      	add	r3, sp, #32
 8022c1e:	6851      	ldr	r1, [r2, #4]
 8022c20:	c303      	stmia	r3!, {r0, r1}
 8022c22:	a806      	add	r0, sp, #24
 8022c24:	f7f9 fa5e 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c28:	4629      	mov	r1, r5
 8022c2a:	a808      	add	r0, sp, #32
 8022c2c:	f7f9 fa82 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c30:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022c34:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8022c38:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022c3c:	6838      	ldr	r0, [r7, #0]
 8022c3e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022c42:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8022c46:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8022c4a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022c4e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8022c52:	440a      	add	r2, r1
 8022c54:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022c58:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022c5c:	4413      	add	r3, r2
 8022c5e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8022c62:	6803      	ldr	r3, [r0, #0]
 8022c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022c66:	4798      	blx	r3
 8022c68:	2eff      	cmp	r6, #255	@ 0xff
 8022c6a:	d119      	bne.n	8022ca0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8022c6c:	f010 0f20 	tst.w	r0, #32
 8022c70:	6838      	ldr	r0, [r7, #0]
 8022c72:	d018      	beq.n	8022ca6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8022c74:	b2ad      	uxth	r5, r5
 8022c76:	2700      	movs	r7, #0
 8022c78:	6801      	ldr	r1, [r0, #0]
 8022c7a:	9501      	str	r5, [sp, #4]
 8022c7c:	fa1f f588 	uxth.w	r5, r8
 8022c80:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8022c84:	9500      	str	r5, [sp, #0]
 8022c86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022c8a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8022c8e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022c92:	9602      	str	r6, [sp, #8]
 8022c94:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8022c96:	4621      	mov	r1, r4
 8022c98:	47a8      	blx	r5
 8022c9a:	b00a      	add	sp, #40	@ 0x28
 8022c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ca0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8022ca4:	e7e4      	b.n	8022c70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8022ca6:	6803      	ldr	r3, [r0, #0]
 8022ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022caa:	4798      	blx	r3
 8022cac:	4b38      	ldr	r3, [pc, #224]	@ (8022d90 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8022cae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022cb2:	f8b3 c000 	ldrh.w	ip, [r3]
 8022cb6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8022cba:	fb0c f505 	mul.w	r5, ip, r5
 8022cbe:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8022cc2:	fb0c 2303 	mla	r3, ip, r3, r2
 8022cc6:	ebac 0c08 	sub.w	ip, ip, r8
 8022cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022cce:	ebae 0e08 	sub.w	lr, lr, r8
 8022cd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cd6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022cda:	4418      	add	r0, r3
 8022cdc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8022ce0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8022ce4:	4405      	add	r5, r0
 8022ce6:	42a8      	cmp	r0, r5
 8022ce8:	d24a      	bcs.n	8022d80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8022cea:	eb00 0803 	add.w	r8, r0, r3
 8022cee:	4540      	cmp	r0, r8
 8022cf0:	d243      	bcs.n	8022d7a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8022cf2:	78e2      	ldrb	r2, [r4, #3]
 8022cf4:	b15a      	cbz	r2, 8022d0e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8022cf6:	2aff      	cmp	r2, #255	@ 0xff
 8022cf8:	f894 9000 	ldrb.w	r9, [r4]
 8022cfc:	d10a      	bne.n	8022d14 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8022cfe:	2eff      	cmp	r6, #255	@ 0xff
 8022d00:	d108      	bne.n	8022d14 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8022d02:	f880 9000 	strb.w	r9, [r0]
 8022d06:	7862      	ldrb	r2, [r4, #1]
 8022d08:	7042      	strb	r2, [r0, #1]
 8022d0a:	78a2      	ldrb	r2, [r4, #2]
 8022d0c:	7082      	strb	r2, [r0, #2]
 8022d0e:	3003      	adds	r0, #3
 8022d10:	3404      	adds	r4, #4
 8022d12:	e7ec      	b.n	8022cee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8022d14:	4372      	muls	r2, r6
 8022d16:	1c51      	adds	r1, r2, #1
 8022d18:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022d1c:	1209      	asrs	r1, r1, #8
 8022d1e:	fa1f fa81 	uxth.w	sl, r1
 8022d22:	43c9      	mvns	r1, r1
 8022d24:	fb19 f90a 	smulbb	r9, r9, sl
 8022d28:	b2ca      	uxtb	r2, r1
 8022d2a:	7801      	ldrb	r1, [r0, #0]
 8022d2c:	fb01 9902 	mla	r9, r1, r2, r9
 8022d30:	fa1f f989 	uxth.w	r9, r9
 8022d34:	f109 0101 	add.w	r1, r9, #1
 8022d38:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8022d3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022d40:	f880 9000 	strb.w	r9, [r0]
 8022d44:	f890 9001 	ldrb.w	r9, [r0, #1]
 8022d48:	7861      	ldrb	r1, [r4, #1]
 8022d4a:	fb19 f902 	smulbb	r9, r9, r2
 8022d4e:	fb01 910a 	mla	r1, r1, sl, r9
 8022d52:	b289      	uxth	r1, r1
 8022d54:	f101 0901 	add.w	r9, r1, #1
 8022d58:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8022d5c:	1209      	asrs	r1, r1, #8
 8022d5e:	7041      	strb	r1, [r0, #1]
 8022d60:	7881      	ldrb	r1, [r0, #2]
 8022d62:	f894 9002 	ldrb.w	r9, [r4, #2]
 8022d66:	fb11 f202 	smulbb	r2, r1, r2
 8022d6a:	fb09 220a 	mla	r2, r9, sl, r2
 8022d6e:	b292      	uxth	r2, r2
 8022d70:	1c51      	adds	r1, r2, #1
 8022d72:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022d76:	1212      	asrs	r2, r2, #8
 8022d78:	e7c8      	b.n	8022d0c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8022d7a:	4460      	add	r0, ip
 8022d7c:	4474      	add	r4, lr
 8022d7e:	e7b2      	b.n	8022ce6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8022d80:	6838      	ldr	r0, [r7, #0]
 8022d82:	6803      	ldr	r3, [r0, #0]
 8022d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d86:	4798      	blx	r3
 8022d88:	e787      	b.n	8022c9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8022d8a:	bf00      	nop
 8022d8c:	24015c48 	.word	0x24015c48
 8022d90:	24015c42 	.word	0x24015c42

08022d94 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022d98:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8022d9c:	4607      	mov	r7, r0
 8022d9e:	460c      	mov	r4, r1
 8022da0:	4692      	mov	sl, r2
 8022da2:	4699      	mov	r9, r3
 8022da4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022da6:	b31d      	cbz	r5, 8022df0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022da8:	4608      	mov	r0, r1
 8022daa:	f7fc fb87 	bl	801f4bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022dae:	4680      	mov	r8, r0
 8022db0:	4620      	mov	r0, r4
 8022db2:	f7fc fbb7 	bl	801f524 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022db6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022dba:	4620      	mov	r0, r4
 8022dbc:	f8ad a008 	strh.w	sl, [sp, #8]
 8022dc0:	f8ad 900a 	strh.w	r9, [sp, #10]
 8022dc4:	f8ad 800c 	strh.w	r8, [sp, #12]
 8022dc8:	f7fc fcb0 	bl	801f72c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022dcc:	280b      	cmp	r0, #11
 8022dce:	d80f      	bhi.n	8022df0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022dd0:	e8df f000 	tbb	[pc, r0]
 8022dd4:	0e062a21 	.word	0x0e062a21
 8022dd8:	0e0e0e0e 	.word	0x0e0e0e0e
 8022ddc:	110e0e0e 	.word	0x110e0e0e
 8022de0:	4620      	mov	r0, r4
 8022de2:	f7fc fc1f 	bl	801f624 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022de6:	462b      	mov	r3, r5
 8022de8:	4632      	mov	r2, r6
 8022dea:	a902      	add	r1, sp, #8
 8022dec:	f7ff ff0a 	bl	8022c04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022df0:	b004      	add	sp, #16
 8022df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022df6:	4620      	mov	r0, r4
 8022df8:	f7fc fc14 	bl	801f624 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022dfc:	4680      	mov	r8, r0
 8022dfe:	4620      	mov	r0, r4
 8022e00:	f7fc fc40 	bl	801f684 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022e04:	ab02      	add	r3, sp, #8
 8022e06:	4602      	mov	r2, r0
 8022e08:	4641      	mov	r1, r8
 8022e0a:	4638      	mov	r0, r7
 8022e0c:	e9cd 6500 	strd	r6, r5, [sp]
 8022e10:	f7ff fdc2 	bl	8022998 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022e14:	e7ec      	b.n	8022df0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022e16:	4620      	mov	r0, r4
 8022e18:	f7fc fc04 	bl	801f624 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022e1c:	462b      	mov	r3, r5
 8022e1e:	4632      	mov	r2, r6
 8022e20:	a902      	add	r1, sp, #8
 8022e22:	f7ff fdfb 	bl	8022a1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022e26:	e7e3      	b.n	8022df0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022e28:	683b      	ldr	r3, [r7, #0]
 8022e2a:	4620      	mov	r0, r4
 8022e2c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8022e30:	f7fc fbf8 	bl	801f624 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022e34:	2300      	movs	r3, #0
 8022e36:	4601      	mov	r1, r0
 8022e38:	aa02      	add	r2, sp, #8
 8022e3a:	4638      	mov	r0, r7
 8022e3c:	e9cd 5300 	strd	r5, r3, [sp]
 8022e40:	4633      	mov	r3, r6
 8022e42:	47c0      	blx	r8
 8022e44:	e7d4      	b.n	8022df0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08022e46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022e46:	b4f0      	push	{r4, r5, r6, r7}
 8022e48:	4616      	mov	r6, r2
 8022e4a:	461c      	mov	r4, r3
 8022e4c:	460d      	mov	r5, r1
 8022e4e:	9a04      	ldr	r2, [sp, #16]
 8022e50:	2e01      	cmp	r6, #1
 8022e52:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022e56:	d00e      	beq.n	8022e76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8022e58:	d303      	bcc.n	8022e62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8022e5a:	2e02      	cmp	r6, #2
 8022e5c:	d006      	beq.n	8022e6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8022e5e:	bcf0      	pop	{r4, r5, r6, r7}
 8022e60:	4770      	bx	lr
 8022e62:	4621      	mov	r1, r4
 8022e64:	4628      	mov	r0, r5
 8022e66:	bcf0      	pop	{r4, r5, r6, r7}
 8022e68:	f7ff bdd8 	b.w	8022a1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022e6c:	4621      	mov	r1, r4
 8022e6e:	4628      	mov	r0, r5
 8022e70:	bcf0      	pop	{r4, r5, r6, r7}
 8022e72:	f7ff bec7 	b.w	8022c04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e76:	6805      	ldr	r5, [r0, #0]
 8022e78:	2600      	movs	r6, #0
 8022e7a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8022e7e:	68ed      	ldr	r5, [r5, #12]
 8022e80:	4613      	mov	r3, r2
 8022e82:	4622      	mov	r2, r4
 8022e84:	46ac      	mov	ip, r5
 8022e86:	bcf0      	pop	{r4, r5, r6, r7}
 8022e88:	4760      	bx	ip
	...

08022e8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8022e8c:	b160      	cbz	r0, 8022ea8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8022e8e:	2903      	cmp	r1, #3
 8022e90:	d818      	bhi.n	8022ec4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8022e92:	e8df f001 	tbb	[pc, r1]
 8022e96:	1902      	.short	0x1902
 8022e98:	1b06      	.short	0x1b06
 8022e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8022ed4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8022e9c:	8818      	ldrh	r0, [r3, #0]
 8022e9e:	4240      	negs	r0, r0
 8022ea0:	4770      	bx	lr
 8022ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8022ed4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8022ea4:	8818      	ldrh	r0, [r3, #0]
 8022ea6:	4770      	bx	lr
 8022ea8:	2903      	cmp	r1, #3
 8022eaa:	d80b      	bhi.n	8022ec4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8022eac:	a301      	add	r3, pc, #4	@ (adr r3, 8022eb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8022eae:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022eb2:	bf00      	nop
 8022eb4:	08022ec9 	.word	0x08022ec9
 8022eb8:	08022ea3 	.word	0x08022ea3
 8022ebc:	08022ecd 	.word	0x08022ecd
 8022ec0:	08022e9b 	.word	0x08022e9b
 8022ec4:	2000      	movs	r0, #0
 8022ec6:	4770      	bx	lr
 8022ec8:	2001      	movs	r0, #1
 8022eca:	4770      	bx	lr
 8022ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8022ed0:	4770      	bx	lr
 8022ed2:	bf00      	nop
 8022ed4:	24015c42 	.word	0x24015c42

08022ed8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8022ed8:	b160      	cbz	r0, 8022ef4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8022eda:	2903      	cmp	r1, #3
 8022edc:	d818      	bhi.n	8022f10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8022ede:	e8df f001 	tbb	[pc, r1]
 8022ee2:	0219      	.short	0x0219
 8022ee4:	051b      	.short	0x051b
 8022ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8022f20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8022ee8:	8818      	ldrh	r0, [r3, #0]
 8022eea:	4770      	bx	lr
 8022eec:	4b0c      	ldr	r3, [pc, #48]	@ (8022f20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8022eee:	8818      	ldrh	r0, [r3, #0]
 8022ef0:	4240      	negs	r0, r0
 8022ef2:	4770      	bx	lr
 8022ef4:	2903      	cmp	r1, #3
 8022ef6:	d80b      	bhi.n	8022f10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8022ef8:	a301      	add	r3, pc, #4	@ (adr r3, 8022f00 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8022efa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022efe:	bf00      	nop
 8022f00:	08022ee7 	.word	0x08022ee7
 8022f04:	08022f19 	.word	0x08022f19
 8022f08:	08022eed 	.word	0x08022eed
 8022f0c:	08022f15 	.word	0x08022f15
 8022f10:	2000      	movs	r0, #0
 8022f12:	4770      	bx	lr
 8022f14:	2001      	movs	r0, #1
 8022f16:	4770      	bx	lr
 8022f18:	f04f 30ff 	mov.w	r0, #4294967295
 8022f1c:	4770      	bx	lr
 8022f1e:	bf00      	nop
 8022f20:	24015c42 	.word	0x24015c42

08022f24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f28:	b097      	sub	sp, #92	@ 0x5c
 8022f2a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022f2c:	a912      	add	r1, sp, #72	@ 0x48
 8022f2e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8022f32:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8022f36:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8022f3a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8022f3e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8022f42:	e881 000c 	stmia.w	r1, {r2, r3}
 8022f46:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8022f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f4c:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8022f50:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8022f54:	9311      	str	r3, [sp, #68]	@ 0x44
 8022f56:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8022f5a:	798d      	ldrb	r5, [r1, #6]
 8022f5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8022f5e:	7b4b      	ldrb	r3, [r1, #13]
 8022f60:	0158      	lsls	r0, r3, #5
 8022f62:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8022f66:	4328      	orrs	r0, r5
 8022f68:	9009      	str	r0, [sp, #36]	@ 0x24
 8022f6a:	f000 817c 	beq.w	8023266 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022f6e:	011b      	lsls	r3, r3, #4
 8022f70:	79c8      	ldrb	r0, [r1, #7]
 8022f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022f76:	4303      	orrs	r3, r0
 8022f78:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f7a:	f000 8174 	beq.w	8023266 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022f7e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022f82:	b29b      	uxth	r3, r3
 8022f84:	2f00      	cmp	r7, #0
 8022f86:	f000 8116 	beq.w	80231b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8022f8a:	1aff      	subs	r7, r7, r3
 8022f8c:	b2bf      	uxth	r7, r7
 8022f8e:	043b      	lsls	r3, r7, #16
 8022f90:	d502      	bpl.n	8022f98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022f92:	1bf6      	subs	r6, r6, r7
 8022f94:	2700      	movs	r7, #0
 8022f96:	b236      	sxth	r6, r6
 8022f98:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022f9c:	a812      	add	r0, sp, #72	@ 0x48
 8022f9e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8022fa2:	428e      	cmp	r6, r1
 8022fa4:	b28b      	uxth	r3, r1
 8022fa6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8022faa:	bfbf      	itttt	lt
 8022fac:	18ff      	addlt	r7, r7, r3
 8022fae:	1bbe      	sublt	r6, r7, r6
 8022fb0:	b2b7      	uxthlt	r7, r6
 8022fb2:	460e      	movlt	r6, r1
 8022fb4:	8891      	ldrh	r1, [r2, #4]
 8022fb6:	440b      	add	r3, r1
 8022fb8:	4631      	mov	r1, r6
 8022fba:	b21b      	sxth	r3, r3
 8022fbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8022fbe:	88d3      	ldrh	r3, [r2, #6]
 8022fc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022fc2:	449a      	add	sl, r3
 8022fc4:	fa0f f38a 	sxth.w	r3, sl
 8022fc8:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8022fcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022fce:	4bb5      	ldr	r3, [pc, #724]	@ (80232a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8022fd0:	f893 b000 	ldrb.w	fp, [r3]
 8022fd4:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022fd8:	f1dc 0300 	rsbs	r3, ip, #0
 8022fdc:	eb43 030c 	adc.w	r3, r3, ip
 8022fe0:	930d      	str	r3, [sp, #52]	@ 0x34
 8022fe2:	464b      	mov	r3, r9
 8022fe4:	f7f8 fef2 	bl	801bdcc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022fe8:	4631      	mov	r1, r6
 8022fea:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8022fee:	464b      	mov	r3, r9
 8022ff0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022ff2:	a812      	add	r0, sp, #72	@ 0x48
 8022ff4:	f7f8 ff07 	bl	801be06 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022ff8:	a916      	add	r1, sp, #88	@ 0x58
 8022ffa:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022ffe:	a815      	add	r0, sp, #84	@ 0x54
 8023000:	f7f9 f82e 	bl	801c060 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023004:	f1b9 0f00 	cmp.w	r9, #0
 8023008:	f040 80d8 	bne.w	80231bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 802300c:	f1bb 0f01 	cmp.w	fp, #1
 8023010:	f040 80dc 	bne.w	80231cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8023014:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023016:	b153      	cbz	r3, 802302e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8023018:	2508      	movs	r5, #8
 802301a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802301c:	fb95 f3f8 	sdiv	r3, r5, r8
 8023020:	1e5d      	subs	r5, r3, #1
 8023022:	4415      	add	r5, r2
 8023024:	fb95 f5f3 	sdiv	r5, r5, r3
 8023028:	fb15 f503 	smulbb	r5, r5, r3
 802302c:	b2ad      	uxth	r5, r5
 802302e:	b907      	cbnz	r7, 8023032 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023030:	b16c      	cbz	r4, 802304e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8023032:	fb04 7305 	mla	r3, r4, r5, r7
 8023036:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023038:	ebaa 0a04 	sub.w	sl, sl, r4
 802303c:	fb08 f303 	mul.w	r3, r8, r3
 8023040:	fa1f fa8a 	uxth.w	sl, sl
 8023044:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8023048:	f003 0407 	and.w	r4, r3, #7
 802304c:	9226      	str	r2, [sp, #152]	@ 0x98
 802304e:	4649      	mov	r1, r9
 8023050:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023052:	f7ff ff1b 	bl	8022e8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8023056:	4683      	mov	fp, r0
 8023058:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802305a:	f7ff ff3d 	bl	8022ed8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802305e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023060:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023062:	4681      	mov	r9, r0
 8023064:	1a9b      	subs	r3, r3, r2
 8023066:	459a      	cmp	sl, r3
 8023068:	bfa8      	it	ge
 802306a:	469a      	movge	sl, r3
 802306c:	f1ba 0f00 	cmp.w	sl, #0
 8023070:	f340 80f9 	ble.w	8023266 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023074:	1bf6      	subs	r6, r6, r7
 8023076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023078:	1b9e      	subs	r6, r3, r6
 802307a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802307c:	429e      	cmp	r6, r3
 802307e:	bfd4      	ite	le
 8023080:	ebc7 0706 	rsble	r7, r7, r6
 8023084:	ebc7 0703 	rsbgt	r7, r7, r3
 8023088:	2f00      	cmp	r7, #0
 802308a:	f340 80ec 	ble.w	8023266 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802308e:	1bed      	subs	r5, r5, r7
 8023090:	fb08 f305 	mul.w	r3, r8, r5
 8023094:	930d      	str	r3, [sp, #52]	@ 0x34
 8023096:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023098:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802309c:	930e      	str	r3, [sp, #56]	@ 0x38
 802309e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80230a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80230a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80230a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80230a8:	b2db      	uxtb	r3, r3
 80230aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80230ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	f040 80de 	bne.w	8023270 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80230b4:	4b7c      	ldr	r3, [pc, #496]	@ (80232a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80230b6:	6818      	ldr	r0, [r3, #0]
 80230b8:	6803      	ldr	r3, [r0, #0]
 80230ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80230bc:	4798      	blx	r3
 80230be:	2301      	movs	r3, #1
 80230c0:	4a7a      	ldr	r2, [pc, #488]	@ (80232ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80230c2:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80230c6:	fb07 9b1b 	mls	fp, r7, fp, r9
 80230ca:	fa03 f308 	lsl.w	r3, r3, r8
 80230ce:	8811      	ldrh	r1, [r2, #0]
 80230d0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 80230d4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80230d8:	3b01      	subs	r3, #1
 80230da:	fb06 bb07 	mla	fp, r6, r7, fp
 80230de:	b2db      	uxtb	r3, r3
 80230e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80230e2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80230e6:	fb01 2303 	mla	r3, r1, r3, r2
 80230ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80230ee:	18c3      	adds	r3, r0, r3
 80230f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80230f2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80230f4:	781a      	ldrb	r2, [r3, #0]
 80230f6:	4122      	asrs	r2, r4
 80230f8:	b2d2      	uxtb	r2, r2
 80230fa:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80230fe:	f0c0 80d7 	bcc.w	80232b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8023102:	46be      	mov	lr, r7
 8023104:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023106:	f11e 3eff 	adds.w	lr, lr, #4294967295
 802310a:	f0c0 80ba 	bcc.w	8023282 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 802310e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023110:	4013      	ands	r3, r2
 8023112:	d041      	beq.n	8023198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8023114:	20ff      	movs	r0, #255	@ 0xff
 8023116:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023118:	fb90 f5f5 	sdiv	r5, r0, r5
 802311c:	436b      	muls	r3, r5
 802311e:	2bfe      	cmp	r3, #254	@ 0xfe
 8023120:	dd03      	ble.n	802312a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8023122:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023124:	4285      	cmp	r5, r0
 8023126:	f000 80a5 	beq.w	8023274 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 802312a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802312c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802312e:	fb15 f303 	smulbb	r3, r5, r3
 8023132:	b29b      	uxth	r3, r3
 8023134:	1c5d      	adds	r5, r3, #1
 8023136:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802313a:	780d      	ldrb	r5, [r1, #0]
 802313c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023140:	fa1f fc83 	uxth.w	ip, r3
 8023144:	43db      	mvns	r3, r3
 8023146:	fb10 f90c 	smulbb	r9, r0, ip
 802314a:	b2db      	uxtb	r3, r3
 802314c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802314e:	fb05 9503 	mla	r5, r5, r3, r9
 8023152:	b2ad      	uxth	r5, r5
 8023154:	f105 0901 	add.w	r9, r5, #1
 8023158:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802315c:	fb10 f90c 	smulbb	r9, r0, ip
 8023160:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023162:	122d      	asrs	r5, r5, #8
 8023164:	fb10 fc0c 	smulbb	ip, r0, ip
 8023168:	700d      	strb	r5, [r1, #0]
 802316a:	784d      	ldrb	r5, [r1, #1]
 802316c:	fb05 9503 	mla	r5, r5, r3, r9
 8023170:	b2ad      	uxth	r5, r5
 8023172:	f105 0901 	add.w	r9, r5, #1
 8023176:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802317a:	122d      	asrs	r5, r5, #8
 802317c:	704d      	strb	r5, [r1, #1]
 802317e:	788d      	ldrb	r5, [r1, #2]
 8023180:	fb05 cc03 	mla	ip, r5, r3, ip
 8023184:	fa1f fc8c 	uxth.w	ip, ip
 8023188:	f10c 0301 	add.w	r3, ip, #1
 802318c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023190:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023194:	f881 c002 	strb.w	ip, [r1, #2]
 8023198:	4444      	add	r4, r8
 802319a:	4431      	add	r1, r6
 802319c:	b2a4      	uxth	r4, r4
 802319e:	2c07      	cmp	r4, #7
 80231a0:	bf89      	itett	hi
 80231a2:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 80231a4:	fa42 f208 	asrls.w	r2, r2, r8
 80231a8:	2400      	movhi	r4, #0
 80231aa:	785a      	ldrbhi	r2, [r3, #1]
 80231ac:	bf8a      	itet	hi
 80231ae:	3301      	addhi	r3, #1
 80231b0:	b2d2      	uxtbls	r2, r2
 80231b2:	9326      	strhi	r3, [sp, #152]	@ 0x98
 80231b4:	e7a7      	b.n	8023106 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80231b6:	441e      	add	r6, r3
 80231b8:	b236      	sxth	r6, r6
 80231ba:	e6ed      	b.n	8022f98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80231bc:	f1b9 0f01 	cmp.w	r9, #1
 80231c0:	f47f af28 	bne.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80231c4:	f1bb 0f01 	cmp.w	fp, #1
 80231c8:	f47f af24 	bne.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80231cc:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80232a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80231d0:	f8db 0000 	ldr.w	r0, [fp]
 80231d4:	6803      	ldr	r3, [r0, #0]
 80231d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80231d8:	4798      	blx	r3
 80231da:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80231de:	465a      	mov	r2, fp
 80231e0:	d006      	beq.n	80231f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80231e2:	f1b8 0f04 	cmp.w	r8, #4
 80231e6:	d141      	bne.n	802326c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80231e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80231ea:	3300      	adds	r3, #0
 80231ec:	bf18      	it	ne
 80231ee:	2301      	movne	r3, #1
 80231f0:	0580      	lsls	r0, r0, #22
 80231f2:	d566      	bpl.n	80232c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80231f4:	f1b8 0f08 	cmp.w	r8, #8
 80231f8:	d163      	bne.n	80232c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	bf0c      	ite	eq
 80231fe:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8023202:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8023206:	2f00      	cmp	r7, #0
 8023208:	f47f af04 	bne.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802320c:	2c00      	cmp	r4, #0
 802320e:	f47f af01 	bne.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023214:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023216:	18f3      	adds	r3, r6, r3
 8023218:	4283      	cmp	r3, r0
 802321a:	f73f aefb 	bgt.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802321e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023222:	4403      	add	r3, r0
 8023224:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8023226:	4283      	cmp	r3, r0
 8023228:	f73f aef4 	bgt.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802322c:	f1b8 0f08 	cmp.w	r8, #8
 8023230:	6810      	ldr	r0, [r2, #0]
 8023232:	f04f 0600 	mov.w	r6, #0
 8023236:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 802323a:	bf18      	it	ne
 802323c:	3501      	addne	r5, #1
 802323e:	6804      	ldr	r4, [r0, #0]
 8023240:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8023244:	bf18      	it	ne
 8023246:	f025 0501 	bicne.w	r5, r5, #1
 802324a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 802324e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023250:	bf18      	it	ne
 8023252:	b2ad      	uxthne	r5, r5
 8023254:	9104      	str	r1, [sp, #16]
 8023256:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023258:	e9cd 5a00 	strd	r5, sl, [sp]
 802325c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8023260:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023262:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8023264:	47a0      	blx	r4
 8023266:	b017      	add	sp, #92	@ 0x5c
 8023268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802326c:	2300      	movs	r3, #0
 802326e:	e7bf      	b.n	80231f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8023270:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023272:	e724      	b.n	80230be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8023274:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023276:	700b      	strb	r3, [r1, #0]
 8023278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802327a:	704b      	strb	r3, [r1, #1]
 802327c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802327e:	708b      	strb	r3, [r1, #2]
 8023280:	e78a      	b.n	8023198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8023282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023284:	b153      	cbz	r3, 802329c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8023286:	441c      	add	r4, r3
 8023288:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802328a:	b2a4      	uxth	r4, r4
 802328c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8023290:	f004 0407 	and.w	r4, r4, #7
 8023294:	781a      	ldrb	r2, [r3, #0]
 8023296:	9326      	str	r3, [sp, #152]	@ 0x98
 8023298:	4122      	asrs	r2, r4
 802329a:	b2d2      	uxtb	r2, r2
 802329c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802329e:	445b      	add	r3, fp
 80232a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80232a2:	e72a      	b.n	80230fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80232a4:	24015c40 	.word	0x24015c40
 80232a8:	24015c48 	.word	0x24015c48
 80232ac:	24015c42 	.word	0x24015c42
 80232b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d1d7      	bne.n	8023266 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80232b6:	4b06      	ldr	r3, [pc, #24]	@ (80232d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80232b8:	6818      	ldr	r0, [r3, #0]
 80232ba:	6803      	ldr	r3, [r0, #0]
 80232bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80232be:	4798      	blx	r3
 80232c0:	e7d1      	b.n	8023266 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	f43f aea6 	beq.w	8023014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80232c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80232cc:	e79b      	b.n	8023206 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80232ce:	bf00      	nop
 80232d0:	24015c48 	.word	0x24015c48

080232d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80232d4:	b538      	push	{r3, r4, r5, lr}
 80232d6:	4c15      	ldr	r4, [pc, #84]	@ (802332c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80232d8:	4605      	mov	r5, r0
 80232da:	7823      	ldrb	r3, [r4, #0]
 80232dc:	f3bf 8f5b 	dmb	ish
 80232e0:	07da      	lsls	r2, r3, #31
 80232e2:	d40b      	bmi.n	80232fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80232e4:	4620      	mov	r0, r4
 80232e6:	f006 f8b3 	bl	8029450 <__cxa_guard_acquire>
 80232ea:	b138      	cbz	r0, 80232fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80232ec:	4620      	mov	r0, r4
 80232ee:	f006 f8bb 	bl	8029468 <__cxa_guard_release>
 80232f2:	4a0f      	ldr	r2, [pc, #60]	@ (8023330 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80232f4:	490f      	ldr	r1, [pc, #60]	@ (8023334 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80232f6:	4810      	ldr	r0, [pc, #64]	@ (8023338 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80232f8:	f006 f8a3 	bl	8029442 <__aeabi_atexit>
 80232fc:	4c0f      	ldr	r4, [pc, #60]	@ (802333c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80232fe:	7823      	ldrb	r3, [r4, #0]
 8023300:	f3bf 8f5b 	dmb	ish
 8023304:	07db      	lsls	r3, r3, #31
 8023306:	d40b      	bmi.n	8023320 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023308:	4620      	mov	r0, r4
 802330a:	f006 f8a1 	bl	8029450 <__cxa_guard_acquire>
 802330e:	b138      	cbz	r0, 8023320 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023310:	4620      	mov	r0, r4
 8023312:	f006 f8a9 	bl	8029468 <__cxa_guard_release>
 8023316:	4a06      	ldr	r2, [pc, #24]	@ (8023330 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023318:	4909      	ldr	r1, [pc, #36]	@ (8023340 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802331a:	480a      	ldr	r0, [pc, #40]	@ (8023344 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802331c:	f006 f891 	bl	8029442 <__aeabi_atexit>
 8023320:	4b05      	ldr	r3, [pc, #20]	@ (8023338 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023322:	616b      	str	r3, [r5, #20]
 8023324:	4b07      	ldr	r3, [pc, #28]	@ (8023344 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023326:	61ab      	str	r3, [r5, #24]
 8023328:	bd38      	pop	{r3, r4, r5, pc}
 802332a:	bf00      	nop
 802332c:	24015d28 	.word	0x24015d28
 8023330:	24000000 	.word	0x24000000
 8023334:	0802110b 	.word	0x0802110b
 8023338:	2400009c 	.word	0x2400009c
 802333c:	24015d2c 	.word	0x24015d2c
 8023340:	08021109 	.word	0x08021109
 8023344:	240000a0 	.word	0x240000a0

08023348 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023348:	b538      	push	{r3, r4, r5, lr}
 802334a:	4c15      	ldr	r4, [pc, #84]	@ (80233a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802334c:	4605      	mov	r5, r0
 802334e:	7823      	ldrb	r3, [r4, #0]
 8023350:	f3bf 8f5b 	dmb	ish
 8023354:	07da      	lsls	r2, r3, #31
 8023356:	d40b      	bmi.n	8023370 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023358:	4620      	mov	r0, r4
 802335a:	f006 f879 	bl	8029450 <__cxa_guard_acquire>
 802335e:	b138      	cbz	r0, 8023370 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023360:	4620      	mov	r0, r4
 8023362:	f006 f881 	bl	8029468 <__cxa_guard_release>
 8023366:	4a0f      	ldr	r2, [pc, #60]	@ (80233a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023368:	490f      	ldr	r1, [pc, #60]	@ (80233a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802336a:	4810      	ldr	r0, [pc, #64]	@ (80233ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802336c:	f006 f869 	bl	8029442 <__aeabi_atexit>
 8023370:	4c0f      	ldr	r4, [pc, #60]	@ (80233b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8023372:	7823      	ldrb	r3, [r4, #0]
 8023374:	f3bf 8f5b 	dmb	ish
 8023378:	07db      	lsls	r3, r3, #31
 802337a:	d40b      	bmi.n	8023394 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802337c:	4620      	mov	r0, r4
 802337e:	f006 f867 	bl	8029450 <__cxa_guard_acquire>
 8023382:	b138      	cbz	r0, 8023394 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023384:	4620      	mov	r0, r4
 8023386:	f006 f86f 	bl	8029468 <__cxa_guard_release>
 802338a:	4a06      	ldr	r2, [pc, #24]	@ (80233a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802338c:	4909      	ldr	r1, [pc, #36]	@ (80233b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802338e:	480a      	ldr	r0, [pc, #40]	@ (80233b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023390:	f006 f857 	bl	8029442 <__aeabi_atexit>
 8023394:	4b05      	ldr	r3, [pc, #20]	@ (80233ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023396:	60eb      	str	r3, [r5, #12]
 8023398:	4b07      	ldr	r3, [pc, #28]	@ (80233b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802339a:	612b      	str	r3, [r5, #16]
 802339c:	bd38      	pop	{r3, r4, r5, pc}
 802339e:	bf00      	nop
 80233a0:	24015d08 	.word	0x24015d08
 80233a4:	24000000 	.word	0x24000000
 80233a8:	0802110f 	.word	0x0802110f
 80233ac:	2400007c 	.word	0x2400007c
 80233b0:	24015d0c 	.word	0x24015d0c
 80233b4:	0802110d 	.word	0x0802110d
 80233b8:	24000080 	.word	0x24000080

080233bc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80233bc:	b510      	push	{r4, lr}
 80233be:	4604      	mov	r4, r0
 80233c0:	f7ff ff88 	bl	80232d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80233c4:	4620      	mov	r0, r4
 80233c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233ca:	f7ff bfbd 	b.w	8023348 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080233d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80233d0:	b538      	push	{r3, r4, r5, lr}
 80233d2:	4c15      	ldr	r4, [pc, #84]	@ (8023428 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80233d4:	4605      	mov	r5, r0
 80233d6:	7823      	ldrb	r3, [r4, #0]
 80233d8:	f3bf 8f5b 	dmb	ish
 80233dc:	07da      	lsls	r2, r3, #31
 80233de:	d40b      	bmi.n	80233f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80233e0:	4620      	mov	r0, r4
 80233e2:	f006 f835 	bl	8029450 <__cxa_guard_acquire>
 80233e6:	b138      	cbz	r0, 80233f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80233e8:	4620      	mov	r0, r4
 80233ea:	f006 f83d 	bl	8029468 <__cxa_guard_release>
 80233ee:	4a0f      	ldr	r2, [pc, #60]	@ (802342c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80233f0:	490f      	ldr	r1, [pc, #60]	@ (8023430 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80233f2:	4810      	ldr	r0, [pc, #64]	@ (8023434 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80233f4:	f006 f825 	bl	8029442 <__aeabi_atexit>
 80233f8:	4c0f      	ldr	r4, [pc, #60]	@ (8023438 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80233fa:	7823      	ldrb	r3, [r4, #0]
 80233fc:	f3bf 8f5b 	dmb	ish
 8023400:	07db      	lsls	r3, r3, #31
 8023402:	d40b      	bmi.n	802341c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023404:	4620      	mov	r0, r4
 8023406:	f006 f823 	bl	8029450 <__cxa_guard_acquire>
 802340a:	b138      	cbz	r0, 802341c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802340c:	4620      	mov	r0, r4
 802340e:	f006 f82b 	bl	8029468 <__cxa_guard_release>
 8023412:	4a06      	ldr	r2, [pc, #24]	@ (802342c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023414:	4909      	ldr	r1, [pc, #36]	@ (802343c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023416:	480a      	ldr	r0, [pc, #40]	@ (8023440 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023418:	f006 f813 	bl	8029442 <__aeabi_atexit>
 802341c:	4b05      	ldr	r3, [pc, #20]	@ (8023434 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802341e:	626b      	str	r3, [r5, #36]	@ 0x24
 8023420:	4b07      	ldr	r3, [pc, #28]	@ (8023440 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023422:	62ab      	str	r3, [r5, #40]	@ 0x28
 8023424:	bd38      	pop	{r3, r4, r5, pc}
 8023426:	bf00      	nop
 8023428:	24015d30 	.word	0x24015d30
 802342c:	24000000 	.word	0x24000000
 8023430:	08021103 	.word	0x08021103
 8023434:	240000a4 	.word	0x240000a4
 8023438:	24015d34 	.word	0x24015d34
 802343c:	08021101 	.word	0x08021101
 8023440:	240000a8 	.word	0x240000a8

08023444 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023444:	b538      	push	{r3, r4, r5, lr}
 8023446:	4c15      	ldr	r4, [pc, #84]	@ (802349c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023448:	4605      	mov	r5, r0
 802344a:	7823      	ldrb	r3, [r4, #0]
 802344c:	f3bf 8f5b 	dmb	ish
 8023450:	07da      	lsls	r2, r3, #31
 8023452:	d40b      	bmi.n	802346c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023454:	4620      	mov	r0, r4
 8023456:	f005 fffb 	bl	8029450 <__cxa_guard_acquire>
 802345a:	b138      	cbz	r0, 802346c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802345c:	4620      	mov	r0, r4
 802345e:	f006 f803 	bl	8029468 <__cxa_guard_release>
 8023462:	4a0f      	ldr	r2, [pc, #60]	@ (80234a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023464:	490f      	ldr	r1, [pc, #60]	@ (80234a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023466:	4810      	ldr	r0, [pc, #64]	@ (80234a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023468:	f005 ffeb 	bl	8029442 <__aeabi_atexit>
 802346c:	4c0f      	ldr	r4, [pc, #60]	@ (80234ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802346e:	7823      	ldrb	r3, [r4, #0]
 8023470:	f3bf 8f5b 	dmb	ish
 8023474:	07db      	lsls	r3, r3, #31
 8023476:	d40b      	bmi.n	8023490 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023478:	4620      	mov	r0, r4
 802347a:	f005 ffe9 	bl	8029450 <__cxa_guard_acquire>
 802347e:	b138      	cbz	r0, 8023490 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023480:	4620      	mov	r0, r4
 8023482:	f005 fff1 	bl	8029468 <__cxa_guard_release>
 8023486:	4a06      	ldr	r2, [pc, #24]	@ (80234a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023488:	4909      	ldr	r1, [pc, #36]	@ (80234b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802348a:	480a      	ldr	r0, [pc, #40]	@ (80234b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802348c:	f005 ffd9 	bl	8029442 <__aeabi_atexit>
 8023490:	4b05      	ldr	r3, [pc, #20]	@ (80234a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023492:	61eb      	str	r3, [r5, #28]
 8023494:	4b07      	ldr	r3, [pc, #28]	@ (80234b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023496:	622b      	str	r3, [r5, #32]
 8023498:	bd38      	pop	{r3, r4, r5, pc}
 802349a:	bf00      	nop
 802349c:	24015d10 	.word	0x24015d10
 80234a0:	24000000 	.word	0x24000000
 80234a4:	08021107 	.word	0x08021107
 80234a8:	24000084 	.word	0x24000084
 80234ac:	24015d14 	.word	0x24015d14
 80234b0:	08021105 	.word	0x08021105
 80234b4:	24000088 	.word	0x24000088

080234b8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80234b8:	b510      	push	{r4, lr}
 80234ba:	4604      	mov	r4, r0
 80234bc:	f7ff ff88 	bl	80233d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80234c0:	4620      	mov	r0, r4
 80234c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234c6:	f7ff bfbd 	b.w	8023444 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080234cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80234cc:	b538      	push	{r3, r4, r5, lr}
 80234ce:	4c15      	ldr	r4, [pc, #84]	@ (8023524 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80234d0:	4605      	mov	r5, r0
 80234d2:	7823      	ldrb	r3, [r4, #0]
 80234d4:	f3bf 8f5b 	dmb	ish
 80234d8:	07da      	lsls	r2, r3, #31
 80234da:	d40b      	bmi.n	80234f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80234dc:	4620      	mov	r0, r4
 80234de:	f005 ffb7 	bl	8029450 <__cxa_guard_acquire>
 80234e2:	b138      	cbz	r0, 80234f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80234e4:	4620      	mov	r0, r4
 80234e6:	f005 ffbf 	bl	8029468 <__cxa_guard_release>
 80234ea:	4a0f      	ldr	r2, [pc, #60]	@ (8023528 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80234ec:	490f      	ldr	r1, [pc, #60]	@ (802352c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80234ee:	4810      	ldr	r0, [pc, #64]	@ (8023530 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80234f0:	f005 ffa7 	bl	8029442 <__aeabi_atexit>
 80234f4:	4c0f      	ldr	r4, [pc, #60]	@ (8023534 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80234f6:	7823      	ldrb	r3, [r4, #0]
 80234f8:	f3bf 8f5b 	dmb	ish
 80234fc:	07db      	lsls	r3, r3, #31
 80234fe:	d40b      	bmi.n	8023518 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023500:	4620      	mov	r0, r4
 8023502:	f005 ffa5 	bl	8029450 <__cxa_guard_acquire>
 8023506:	b138      	cbz	r0, 8023518 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023508:	4620      	mov	r0, r4
 802350a:	f005 ffad 	bl	8029468 <__cxa_guard_release>
 802350e:	4a06      	ldr	r2, [pc, #24]	@ (8023528 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023510:	4909      	ldr	r1, [pc, #36]	@ (8023538 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8023512:	480a      	ldr	r0, [pc, #40]	@ (802353c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023514:	f005 ff95 	bl	8029442 <__aeabi_atexit>
 8023518:	4b05      	ldr	r3, [pc, #20]	@ (8023530 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802351a:	636b      	str	r3, [r5, #52]	@ 0x34
 802351c:	4b07      	ldr	r3, [pc, #28]	@ (802353c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802351e:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023520:	bd38      	pop	{r3, r4, r5, pc}
 8023522:	bf00      	nop
 8023524:	24015d18 	.word	0x24015d18
 8023528:	24000000 	.word	0x24000000
 802352c:	080210fb 	.word	0x080210fb
 8023530:	2400008c 	.word	0x2400008c
 8023534:	24015d1c 	.word	0x24015d1c
 8023538:	080210f9 	.word	0x080210f9
 802353c:	24000090 	.word	0x24000090

08023540 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8023540:	b538      	push	{r3, r4, r5, lr}
 8023542:	4c15      	ldr	r4, [pc, #84]	@ (8023598 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023544:	4605      	mov	r5, r0
 8023546:	7823      	ldrb	r3, [r4, #0]
 8023548:	f3bf 8f5b 	dmb	ish
 802354c:	07da      	lsls	r2, r3, #31
 802354e:	d40b      	bmi.n	8023568 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023550:	4620      	mov	r0, r4
 8023552:	f005 ff7d 	bl	8029450 <__cxa_guard_acquire>
 8023556:	b138      	cbz	r0, 8023568 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023558:	4620      	mov	r0, r4
 802355a:	f005 ff85 	bl	8029468 <__cxa_guard_release>
 802355e:	4a0f      	ldr	r2, [pc, #60]	@ (802359c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023560:	490f      	ldr	r1, [pc, #60]	@ (80235a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023562:	4810      	ldr	r0, [pc, #64]	@ (80235a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023564:	f005 ff6d 	bl	8029442 <__aeabi_atexit>
 8023568:	4c0f      	ldr	r4, [pc, #60]	@ (80235a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802356a:	7823      	ldrb	r3, [r4, #0]
 802356c:	f3bf 8f5b 	dmb	ish
 8023570:	07db      	lsls	r3, r3, #31
 8023572:	d40b      	bmi.n	802358c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023574:	4620      	mov	r0, r4
 8023576:	f005 ff6b 	bl	8029450 <__cxa_guard_acquire>
 802357a:	b138      	cbz	r0, 802358c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802357c:	4620      	mov	r0, r4
 802357e:	f005 ff73 	bl	8029468 <__cxa_guard_release>
 8023582:	4a06      	ldr	r2, [pc, #24]	@ (802359c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023584:	4909      	ldr	r1, [pc, #36]	@ (80235ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8023586:	480a      	ldr	r0, [pc, #40]	@ (80235b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023588:	f005 ff5b 	bl	8029442 <__aeabi_atexit>
 802358c:	4b05      	ldr	r3, [pc, #20]	@ (80235a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802358e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023590:	4b07      	ldr	r3, [pc, #28]	@ (80235b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023592:	632b      	str	r3, [r5, #48]	@ 0x30
 8023594:	bd38      	pop	{r3, r4, r5, pc}
 8023596:	bf00      	nop
 8023598:	24015cf0 	.word	0x24015cf0
 802359c:	24000000 	.word	0x24000000
 80235a0:	080210ff 	.word	0x080210ff
 80235a4:	24000064 	.word	0x24000064
 80235a8:	24015cf4 	.word	0x24015cf4
 80235ac:	080210fd 	.word	0x080210fd
 80235b0:	24000068 	.word	0x24000068

080235b4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80235b4:	b510      	push	{r4, lr}
 80235b6:	4604      	mov	r4, r0
 80235b8:	f7ff ff88 	bl	80234cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80235bc:	4620      	mov	r0, r4
 80235be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235c2:	f7ff bfbd 	b.w	8023540 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080235c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80235c8:	b538      	push	{r3, r4, r5, lr}
 80235ca:	4c15      	ldr	r4, [pc, #84]	@ (8023620 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80235cc:	4605      	mov	r5, r0
 80235ce:	7823      	ldrb	r3, [r4, #0]
 80235d0:	f3bf 8f5b 	dmb	ish
 80235d4:	07da      	lsls	r2, r3, #31
 80235d6:	d40b      	bmi.n	80235f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80235d8:	4620      	mov	r0, r4
 80235da:	f005 ff39 	bl	8029450 <__cxa_guard_acquire>
 80235de:	b138      	cbz	r0, 80235f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80235e0:	4620      	mov	r0, r4
 80235e2:	f005 ff41 	bl	8029468 <__cxa_guard_release>
 80235e6:	4a0f      	ldr	r2, [pc, #60]	@ (8023624 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80235e8:	490f      	ldr	r1, [pc, #60]	@ (8023628 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80235ea:	4810      	ldr	r0, [pc, #64]	@ (802362c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80235ec:	f005 ff29 	bl	8029442 <__aeabi_atexit>
 80235f0:	4c0f      	ldr	r4, [pc, #60]	@ (8023630 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80235f2:	7823      	ldrb	r3, [r4, #0]
 80235f4:	f3bf 8f5b 	dmb	ish
 80235f8:	07db      	lsls	r3, r3, #31
 80235fa:	d40b      	bmi.n	8023614 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80235fc:	4620      	mov	r0, r4
 80235fe:	f005 ff27 	bl	8029450 <__cxa_guard_acquire>
 8023602:	b138      	cbz	r0, 8023614 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023604:	4620      	mov	r0, r4
 8023606:	f005 ff2f 	bl	8029468 <__cxa_guard_release>
 802360a:	4a06      	ldr	r2, [pc, #24]	@ (8023624 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802360c:	4909      	ldr	r1, [pc, #36]	@ (8023634 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802360e:	480a      	ldr	r0, [pc, #40]	@ (8023638 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023610:	f005 ff17 	bl	8029442 <__aeabi_atexit>
 8023614:	4b05      	ldr	r3, [pc, #20]	@ (802362c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023616:	646b      	str	r3, [r5, #68]	@ 0x44
 8023618:	4b07      	ldr	r3, [pc, #28]	@ (8023638 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802361a:	64ab      	str	r3, [r5, #72]	@ 0x48
 802361c:	bd38      	pop	{r3, r4, r5, pc}
 802361e:	bf00      	nop
 8023620:	24015d20 	.word	0x24015d20
 8023624:	24000000 	.word	0x24000000
 8023628:	080210f3 	.word	0x080210f3
 802362c:	24000094 	.word	0x24000094
 8023630:	24015d24 	.word	0x24015d24
 8023634:	080210f1 	.word	0x080210f1
 8023638:	24000098 	.word	0x24000098

0802363c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802363c:	b538      	push	{r3, r4, r5, lr}
 802363e:	4c15      	ldr	r4, [pc, #84]	@ (8023694 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023640:	4605      	mov	r5, r0
 8023642:	7823      	ldrb	r3, [r4, #0]
 8023644:	f3bf 8f5b 	dmb	ish
 8023648:	07da      	lsls	r2, r3, #31
 802364a:	d40b      	bmi.n	8023664 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802364c:	4620      	mov	r0, r4
 802364e:	f005 feff 	bl	8029450 <__cxa_guard_acquire>
 8023652:	b138      	cbz	r0, 8023664 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023654:	4620      	mov	r0, r4
 8023656:	f005 ff07 	bl	8029468 <__cxa_guard_release>
 802365a:	4a0f      	ldr	r2, [pc, #60]	@ (8023698 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802365c:	490f      	ldr	r1, [pc, #60]	@ (802369c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802365e:	4810      	ldr	r0, [pc, #64]	@ (80236a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023660:	f005 feef 	bl	8029442 <__aeabi_atexit>
 8023664:	4c0f      	ldr	r4, [pc, #60]	@ (80236a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023666:	7823      	ldrb	r3, [r4, #0]
 8023668:	f3bf 8f5b 	dmb	ish
 802366c:	07db      	lsls	r3, r3, #31
 802366e:	d40b      	bmi.n	8023688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023670:	4620      	mov	r0, r4
 8023672:	f005 feed 	bl	8029450 <__cxa_guard_acquire>
 8023676:	b138      	cbz	r0, 8023688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023678:	4620      	mov	r0, r4
 802367a:	f005 fef5 	bl	8029468 <__cxa_guard_release>
 802367e:	4a06      	ldr	r2, [pc, #24]	@ (8023698 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023680:	4909      	ldr	r1, [pc, #36]	@ (80236a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023682:	480a      	ldr	r0, [pc, #40]	@ (80236ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023684:	f005 fedd 	bl	8029442 <__aeabi_atexit>
 8023688:	4b05      	ldr	r3, [pc, #20]	@ (80236a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802368a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 802368c:	4b07      	ldr	r3, [pc, #28]	@ (80236ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802368e:	642b      	str	r3, [r5, #64]	@ 0x40
 8023690:	bd38      	pop	{r3, r4, r5, pc}
 8023692:	bf00      	nop
 8023694:	24015d00 	.word	0x24015d00
 8023698:	24000000 	.word	0x24000000
 802369c:	080210f7 	.word	0x080210f7
 80236a0:	24000074 	.word	0x24000074
 80236a4:	24015d04 	.word	0x24015d04
 80236a8:	080210f5 	.word	0x080210f5
 80236ac:	24000078 	.word	0x24000078

080236b0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80236b0:	b510      	push	{r4, lr}
 80236b2:	4604      	mov	r4, r0
 80236b4:	f7ff ff88 	bl	80235c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80236b8:	4620      	mov	r0, r4
 80236ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80236be:	f7ff bfbd 	b.w	802363c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080236c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80236c4:	b538      	push	{r3, r4, r5, lr}
 80236c6:	4c15      	ldr	r4, [pc, #84]	@ (802371c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80236c8:	4605      	mov	r5, r0
 80236ca:	7823      	ldrb	r3, [r4, #0]
 80236cc:	f3bf 8f5b 	dmb	ish
 80236d0:	07da      	lsls	r2, r3, #31
 80236d2:	d40b      	bmi.n	80236ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80236d4:	4620      	mov	r0, r4
 80236d6:	f005 febb 	bl	8029450 <__cxa_guard_acquire>
 80236da:	b138      	cbz	r0, 80236ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80236dc:	4620      	mov	r0, r4
 80236de:	f005 fec3 	bl	8029468 <__cxa_guard_release>
 80236e2:	4a0f      	ldr	r2, [pc, #60]	@ (8023720 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80236e4:	490f      	ldr	r1, [pc, #60]	@ (8023724 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80236e6:	4810      	ldr	r0, [pc, #64]	@ (8023728 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80236e8:	f005 feab 	bl	8029442 <__aeabi_atexit>
 80236ec:	4c0f      	ldr	r4, [pc, #60]	@ (802372c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80236ee:	7823      	ldrb	r3, [r4, #0]
 80236f0:	f3bf 8f5b 	dmb	ish
 80236f4:	07db      	lsls	r3, r3, #31
 80236f6:	d40b      	bmi.n	8023710 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80236f8:	4620      	mov	r0, r4
 80236fa:	f005 fea9 	bl	8029450 <__cxa_guard_acquire>
 80236fe:	b138      	cbz	r0, 8023710 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023700:	4620      	mov	r0, r4
 8023702:	f005 feb1 	bl	8029468 <__cxa_guard_release>
 8023706:	4a06      	ldr	r2, [pc, #24]	@ (8023720 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023708:	4909      	ldr	r1, [pc, #36]	@ (8023730 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802370a:	480a      	ldr	r0, [pc, #40]	@ (8023734 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802370c:	f005 fe99 	bl	8029442 <__aeabi_atexit>
 8023710:	4b05      	ldr	r3, [pc, #20]	@ (8023728 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023712:	656b      	str	r3, [r5, #84]	@ 0x54
 8023714:	4b07      	ldr	r3, [pc, #28]	@ (8023734 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023716:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023718:	bd38      	pop	{r3, r4, r5, pc}
 802371a:	bf00      	nop
 802371c:	24015cf8 	.word	0x24015cf8
 8023720:	24000000 	.word	0x24000000
 8023724:	080210eb 	.word	0x080210eb
 8023728:	2400006c 	.word	0x2400006c
 802372c:	24015cfc 	.word	0x24015cfc
 8023730:	080210e9 	.word	0x080210e9
 8023734:	24000070 	.word	0x24000070

08023738 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023738:	b538      	push	{r3, r4, r5, lr}
 802373a:	4c15      	ldr	r4, [pc, #84]	@ (8023790 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802373c:	4605      	mov	r5, r0
 802373e:	7823      	ldrb	r3, [r4, #0]
 8023740:	f3bf 8f5b 	dmb	ish
 8023744:	07da      	lsls	r2, r3, #31
 8023746:	d40b      	bmi.n	8023760 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023748:	4620      	mov	r0, r4
 802374a:	f005 fe81 	bl	8029450 <__cxa_guard_acquire>
 802374e:	b138      	cbz	r0, 8023760 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023750:	4620      	mov	r0, r4
 8023752:	f005 fe89 	bl	8029468 <__cxa_guard_release>
 8023756:	4a0f      	ldr	r2, [pc, #60]	@ (8023794 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023758:	490f      	ldr	r1, [pc, #60]	@ (8023798 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802375a:	4810      	ldr	r0, [pc, #64]	@ (802379c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802375c:	f005 fe71 	bl	8029442 <__aeabi_atexit>
 8023760:	4c0f      	ldr	r4, [pc, #60]	@ (80237a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023762:	7823      	ldrb	r3, [r4, #0]
 8023764:	f3bf 8f5b 	dmb	ish
 8023768:	07db      	lsls	r3, r3, #31
 802376a:	d40b      	bmi.n	8023784 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802376c:	4620      	mov	r0, r4
 802376e:	f005 fe6f 	bl	8029450 <__cxa_guard_acquire>
 8023772:	b138      	cbz	r0, 8023784 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023774:	4620      	mov	r0, r4
 8023776:	f005 fe77 	bl	8029468 <__cxa_guard_release>
 802377a:	4a06      	ldr	r2, [pc, #24]	@ (8023794 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802377c:	4909      	ldr	r1, [pc, #36]	@ (80237a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802377e:	480a      	ldr	r0, [pc, #40]	@ (80237a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023780:	f005 fe5f 	bl	8029442 <__aeabi_atexit>
 8023784:	4b05      	ldr	r3, [pc, #20]	@ (802379c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023786:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023788:	4b07      	ldr	r3, [pc, #28]	@ (80237a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802378a:	652b      	str	r3, [r5, #80]	@ 0x50
 802378c:	bd38      	pop	{r3, r4, r5, pc}
 802378e:	bf00      	nop
 8023790:	24015ce8 	.word	0x24015ce8
 8023794:	24000000 	.word	0x24000000
 8023798:	080210ef 	.word	0x080210ef
 802379c:	2400005c 	.word	0x2400005c
 80237a0:	24015cec 	.word	0x24015cec
 80237a4:	080210ed 	.word	0x080210ed
 80237a8:	24000060 	.word	0x24000060

080237ac <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80237ac:	b510      	push	{r4, lr}
 80237ae:	4604      	mov	r4, r0
 80237b0:	f7ff ff88 	bl	80236c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80237b4:	4620      	mov	r0, r4
 80237b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237ba:	f7ff bfbd 	b.w	8023738 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080237be <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80237be:	b510      	push	{r4, lr}
 80237c0:	4604      	mov	r4, r0
 80237c2:	f7ff fff3 	bl	80237ac <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80237c6:	4620      	mov	r0, r4
 80237c8:	f7ff ff72 	bl	80236b0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80237cc:	4620      	mov	r0, r4
 80237ce:	f7ff fe73 	bl	80234b8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80237d2:	4620      	mov	r0, r4
 80237d4:	f7ff fdf2 	bl	80233bc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80237d8:	4620      	mov	r0, r4
 80237da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237de:	f7ff bee9 	b.w	80235b4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080237e4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80237e4:	b538      	push	{r3, r4, r5, lr}
 80237e6:	4c0b      	ldr	r4, [pc, #44]	@ (8023814 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 80237e8:	4605      	mov	r5, r0
 80237ea:	7823      	ldrb	r3, [r4, #0]
 80237ec:	f3bf 8f5b 	dmb	ish
 80237f0:	07db      	lsls	r3, r3, #31
 80237f2:	d40b      	bmi.n	802380c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80237f4:	4620      	mov	r0, r4
 80237f6:	f005 fe2b 	bl	8029450 <__cxa_guard_acquire>
 80237fa:	b138      	cbz	r0, 802380c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80237fc:	4620      	mov	r0, r4
 80237fe:	f005 fe33 	bl	8029468 <__cxa_guard_release>
 8023802:	4a05      	ldr	r2, [pc, #20]	@ (8023818 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8023804:	4905      	ldr	r1, [pc, #20]	@ (802381c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8023806:	4806      	ldr	r0, [pc, #24]	@ (8023820 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023808:	f005 fe1b 	bl	8029442 <__aeabi_atexit>
 802380c:	4b04      	ldr	r3, [pc, #16]	@ (8023820 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802380e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023810:	bd38      	pop	{r3, r4, r5, pc}
 8023812:	bf00      	nop
 8023814:	24015cdc 	.word	0x24015cdc
 8023818:	24000000 	.word	0x24000000
 802381c:	080210e7 	.word	0x080210e7
 8023820:	24000054 	.word	0x24000054

08023824 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8023824:	b538      	push	{r3, r4, r5, lr}
 8023826:	4c0b      	ldr	r4, [pc, #44]	@ (8023854 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8023828:	4605      	mov	r5, r0
 802382a:	7823      	ldrb	r3, [r4, #0]
 802382c:	f3bf 8f5b 	dmb	ish
 8023830:	07db      	lsls	r3, r3, #31
 8023832:	d40b      	bmi.n	802384c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023834:	4620      	mov	r0, r4
 8023836:	f005 fe0b 	bl	8029450 <__cxa_guard_acquire>
 802383a:	b138      	cbz	r0, 802384c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 802383c:	4620      	mov	r0, r4
 802383e:	f005 fe13 	bl	8029468 <__cxa_guard_release>
 8023842:	4a05      	ldr	r2, [pc, #20]	@ (8023858 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8023844:	4905      	ldr	r1, [pc, #20]	@ (802385c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8023846:	4806      	ldr	r0, [pc, #24]	@ (8023860 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023848:	f005 fdfb 	bl	8029442 <__aeabi_atexit>
 802384c:	4b04      	ldr	r3, [pc, #16]	@ (8023860 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 802384e:	662b      	str	r3, [r5, #96]	@ 0x60
 8023850:	bd38      	pop	{r3, r4, r5, pc}
 8023852:	bf00      	nop
 8023854:	24015ce0 	.word	0x24015ce0
 8023858:	24000000 	.word	0x24000000
 802385c:	080210e5 	.word	0x080210e5
 8023860:	24000058 	.word	0x24000058

08023864 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8023864:	b570      	push	{r4, r5, r6, lr}
 8023866:	4d0c      	ldr	r5, [pc, #48]	@ (8023898 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023868:	4606      	mov	r6, r0
 802386a:	4c0c      	ldr	r4, [pc, #48]	@ (802389c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 802386c:	782b      	ldrb	r3, [r5, #0]
 802386e:	f3bf 8f5b 	dmb	ish
 8023872:	f013 0f01 	tst.w	r3, #1
 8023876:	d10d      	bne.n	8023894 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023878:	4628      	mov	r0, r5
 802387a:	f005 fde9 	bl	8029450 <__cxa_guard_acquire>
 802387e:	b148      	cbz	r0, 8023894 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023880:	4b07      	ldr	r3, [pc, #28]	@ (80238a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023882:	4628      	mov	r0, r5
 8023884:	6023      	str	r3, [r4, #0]
 8023886:	f005 fdef 	bl	8029468 <__cxa_guard_release>
 802388a:	4a06      	ldr	r2, [pc, #24]	@ (80238a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 802388c:	4620      	mov	r0, r4
 802388e:	4906      	ldr	r1, [pc, #24]	@ (80238a8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023890:	f005 fdd7 	bl	8029442 <__aeabi_atexit>
 8023894:	6674      	str	r4, [r6, #100]	@ 0x64
 8023896:	bd70      	pop	{r4, r5, r6, pc}
 8023898:	24015ce4 	.word	0x24015ce4
 802389c:	24015d38 	.word	0x24015d38
 80238a0:	0802f8cc 	.word	0x0802f8cc
 80238a4:	24000000 	.word	0x24000000
 80238a8:	080210e3 	.word	0x080210e3

080238ac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80238ac:	b510      	push	{r4, lr}
 80238ae:	4604      	mov	r4, r0
 80238b0:	f7ff ff98 	bl	80237e4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80238b4:	4620      	mov	r0, r4
 80238b6:	f7ff ffb5 	bl	8023824 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80238ba:	4620      	mov	r0, r4
 80238bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238c0:	f7ff bfd0 	b.w	8023864 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080238c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80238c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238c8:	b087      	sub	sp, #28
 80238ca:	788d      	ldrb	r5, [r1, #2]
 80238cc:	f891 9000 	ldrb.w	r9, [r1]
 80238d0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80238d4:	9501      	str	r5, [sp, #4]
 80238d6:	784d      	ldrb	r5, [r1, #1]
 80238d8:	9203      	str	r2, [sp, #12]
 80238da:	9502      	str	r5, [sp, #8]
 80238dc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80238e0:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80238e4:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80238e8:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 80238ec:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 80238f0:	fb06 0708 	mla	r7, r6, r8, r0
 80238f4:	2e00      	cmp	r6, #0
 80238f6:	eb02 0a07 	add.w	sl, r2, r7
 80238fa:	ea4f 2205 	mov.w	r2, r5, lsl #8
 80238fe:	9d01      	ldr	r5, [sp, #4]
 8023900:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023904:	ea45 0509 	orr.w	r5, r5, r9
 8023908:	9505      	str	r5, [sp, #20]
 802390a:	f2c0 80b2 	blt.w	8023a72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 802390e:	45b3      	cmp	fp, r6
 8023910:	f340 80af 	ble.w	8023a72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023914:	2800      	cmp	r0, #0
 8023916:	f2c0 80aa 	blt.w	8023a6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802391a:	4580      	cmp	r8, r0
 802391c:	f340 80a7 	ble.w	8023a6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023920:	9a03      	ldr	r2, [sp, #12]
 8023922:	5dd7      	ldrb	r7, [r2, r7]
 8023924:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023928:	441f      	add	r7, r3
 802392a:	1c42      	adds	r2, r0, #1
 802392c:	f100 80a4 	bmi.w	8023a78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023930:	4590      	cmp	r8, r2
 8023932:	f340 80a1 	ble.w	8023a78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023936:	2c00      	cmp	r4, #0
 8023938:	f000 809e 	beq.w	8023a78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802393c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023944:	441d      	add	r5, r3
 8023946:	3601      	adds	r6, #1
 8023948:	f100 809a 	bmi.w	8023a80 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 802394c:	45b3      	cmp	fp, r6
 802394e:	f340 8097 	ble.w	8023a80 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023952:	f1bc 0f00 	cmp.w	ip, #0
 8023956:	f000 8093 	beq.w	8023a80 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 802395a:	2800      	cmp	r0, #0
 802395c:	f2c0 808e 	blt.w	8023a7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023960:	4580      	cmp	r8, r0
 8023962:	f340 808b 	ble.w	8023a7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023966:	f81a 6008 	ldrb.w	r6, [sl, r8]
 802396a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802396e:	441e      	add	r6, r3
 8023970:	3001      	adds	r0, #1
 8023972:	f100 8088 	bmi.w	8023a86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023976:	4580      	cmp	r8, r0
 8023978:	f340 8085 	ble.w	8023a86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 802397c:	2c00      	cmp	r4, #0
 802397e:	f000 8082 	beq.w	8023a86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023982:	44d0      	add	r8, sl
 8023984:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023988:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802398c:	4413      	add	r3, r2
 802398e:	b2a4      	uxth	r4, r4
 8023990:	f895 a000 	ldrb.w	sl, [r5]
 8023994:	fa1f fc8c 	uxth.w	ip, ip
 8023998:	fb04 fb0c 	mul.w	fp, r4, ip
 802399c:	0124      	lsls	r4, r4, #4
 802399e:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80239a2:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 80239a6:	eba4 040b 	sub.w	r4, r4, fp
 80239aa:	fa1f f08c 	uxth.w	r0, ip
 80239ae:	b2a2      	uxth	r2, r4
 80239b0:	783c      	ldrb	r4, [r7, #0]
 80239b2:	eba8 0800 	sub.w	r8, r8, r0
 80239b6:	fa1f fc8e 	uxth.w	ip, lr
 80239ba:	fb02 fa0a 	mul.w	sl, r2, sl
 80239be:	ea6f 0e0e 	mvn.w	lr, lr
 80239c2:	fa1f f888 	uxth.w	r8, r8
 80239c6:	fa5f fe8e 	uxtb.w	lr, lr
 80239ca:	fb08 aa04 	mla	sl, r8, r4, sl
 80239ce:	7834      	ldrb	r4, [r6, #0]
 80239d0:	fb19 f90e 	smulbb	r9, r9, lr
 80239d4:	fb00 aa04 	mla	sl, r0, r4, sl
 80239d8:	781c      	ldrb	r4, [r3, #0]
 80239da:	fb0b a404 	mla	r4, fp, r4, sl
 80239de:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80239e2:	fb04 990c 	mla	r9, r4, ip, r9
 80239e6:	fa1f f989 	uxth.w	r9, r9
 80239ea:	f109 0401 	add.w	r4, r9, #1
 80239ee:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80239f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80239f6:	f881 9000 	strb.w	r9, [r1]
 80239fa:	f895 9001 	ldrb.w	r9, [r5, #1]
 80239fe:	787c      	ldrb	r4, [r7, #1]
 8023a00:	fb02 f909 	mul.w	r9, r2, r9
 8023a04:	fb08 9904 	mla	r9, r8, r4, r9
 8023a08:	7874      	ldrb	r4, [r6, #1]
 8023a0a:	fb00 9904 	mla	r9, r0, r4, r9
 8023a0e:	785c      	ldrb	r4, [r3, #1]
 8023a10:	fb0b 9404 	mla	r4, fp, r4, r9
 8023a14:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8023a18:	9c02      	ldr	r4, [sp, #8]
 8023a1a:	fb14 f90e 	smulbb	r9, r4, lr
 8023a1e:	fb0a 940c 	mla	r4, sl, ip, r9
 8023a22:	b2a4      	uxth	r4, r4
 8023a24:	f104 0901 	add.w	r9, r4, #1
 8023a28:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023a2c:	1224      	asrs	r4, r4, #8
 8023a2e:	704c      	strb	r4, [r1, #1]
 8023a30:	78ad      	ldrb	r5, [r5, #2]
 8023a32:	78bc      	ldrb	r4, [r7, #2]
 8023a34:	436a      	muls	r2, r5
 8023a36:	789b      	ldrb	r3, [r3, #2]
 8023a38:	fb08 2204 	mla	r2, r8, r4, r2
 8023a3c:	78b4      	ldrb	r4, [r6, #2]
 8023a3e:	fb00 2004 	mla	r0, r0, r4, r2
 8023a42:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023a46:	9b01      	ldr	r3, [sp, #4]
 8023a48:	fb13 fe0e 	smulbb	lr, r3, lr
 8023a4c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8023a50:	fb0b ec0c 	mla	ip, fp, ip, lr
 8023a54:	fa1f fc8c 	uxth.w	ip, ip
 8023a58:	f10c 0e01 	add.w	lr, ip, #1
 8023a5c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8023a60:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023a64:	f881 c002 	strb.w	ip, [r1, #2]
 8023a68:	b007      	add	sp, #28
 8023a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a6e:	af05      	add	r7, sp, #20
 8023a70:	e75b      	b.n	802392a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8023a72:	ad05      	add	r5, sp, #20
 8023a74:	462f      	mov	r7, r5
 8023a76:	e766      	b.n	8023946 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023a78:	ad05      	add	r5, sp, #20
 8023a7a:	e764      	b.n	8023946 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023a7c:	ae05      	add	r6, sp, #20
 8023a7e:	e777      	b.n	8023970 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8023a80:	ab05      	add	r3, sp, #20
 8023a82:	461e      	mov	r6, r3
 8023a84:	e783      	b.n	802398e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8023a86:	ab05      	add	r3, sp, #20
 8023a88:	e781      	b.n	802398e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08023a8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a8e:	b093      	sub	sp, #76	@ 0x4c
 8023a90:	9210      	str	r2, [sp, #64]	@ 0x40
 8023a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a94:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023a96:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8023a9a:	9011      	str	r0, [sp, #68]	@ 0x44
 8023a9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8023a9e:	6850      	ldr	r0, [r2, #4]
 8023aa0:	910d      	str	r1, [sp, #52]	@ 0x34
 8023aa2:	6812      	ldr	r2, [r2, #0]
 8023aa4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023aa8:	fb00 1303 	mla	r3, r0, r3, r1
 8023aac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ab0:	18d3      	adds	r3, r2, r3
 8023ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ab4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ab6:	681b      	ldr	r3, [r3, #0]
 8023ab8:	930c      	str	r3, [sp, #48]	@ 0x30
 8023aba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023abc:	685c      	ldr	r4, [r3, #4]
 8023abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023ac0:	3404      	adds	r4, #4
 8023ac2:	43db      	mvns	r3, r3
 8023ac4:	b2db      	uxtb	r3, r3
 8023ac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023ac8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	dc03      	bgt.n	8023ad6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023ace:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	f340 8250 	ble.w	8023f76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023ad6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ad8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023adc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ae0:	1e48      	subs	r0, r1, #1
 8023ae2:	1e55      	subs	r5, r2, #1
 8023ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	f340 80ee 	ble.w	8023cc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023aec:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8023aee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023af0:	1436      	asrs	r6, r6, #16
 8023af2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023af6:	d406      	bmi.n	8023b06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023af8:	4286      	cmp	r6, r0
 8023afa:	da04      	bge.n	8023b06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023afc:	2b00      	cmp	r3, #0
 8023afe:	db02      	blt.n	8023b06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023b00:	42ab      	cmp	r3, r5
 8023b02:	f2c0 80e2 	blt.w	8023cca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023b06:	3601      	adds	r6, #1
 8023b08:	f100 80cf 	bmi.w	8023caa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023b0c:	42b1      	cmp	r1, r6
 8023b0e:	f2c0 80cc 	blt.w	8023caa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023b12:	3301      	adds	r3, #1
 8023b14:	f100 80c9 	bmi.w	8023caa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023b18:	429a      	cmp	r2, r3
 8023b1a:	f2c0 80c6 	blt.w	8023caa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023b1e:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 8023b22:	f1bb 0f00 	cmp.w	fp, #0
 8023b26:	f340 80f1 	ble.w	8023d0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023b2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b2c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023b2e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8023b30:	141d      	asrs	r5, r3, #16
 8023b32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023b34:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023b38:	68c7      	ldr	r7, [r0, #12]
 8023b3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023b3c:	1418      	asrs	r0, r3, #16
 8023b3e:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8023b42:	6892      	ldr	r2, [r2, #8]
 8023b44:	f100 8137 	bmi.w	8023db6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023b48:	f102 3cff 	add.w	ip, r2, #4294967295
 8023b4c:	4560      	cmp	r0, ip
 8023b4e:	f280 8132 	bge.w	8023db6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023b52:	2d00      	cmp	r5, #0
 8023b54:	f2c0 812f 	blt.w	8023db6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023b58:	f107 3cff 	add.w	ip, r7, #4294967295
 8023b5c:	4565      	cmp	r5, ip
 8023b5e:	f280 812a 	bge.w	8023db6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023b62:	b212      	sxth	r2, r2
 8023b64:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8023b66:	fb05 0002 	mla	r0, r5, r2, r0
 8023b6a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023b6c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023b70:	4405      	add	r5, r0
 8023b72:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023b76:	eb04 0e0c 	add.w	lr, r4, ip
 8023b7a:	f1b8 0f00 	cmp.w	r8, #0
 8023b7e:	f000 810c 	beq.w	8023d9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8023b82:	786f      	ldrb	r7, [r5, #1]
 8023b84:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023b88:	4427      	add	r7, r4
 8023b8a:	2900      	cmp	r1, #0
 8023b8c:	f000 810d 	beq.w	8023daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023b90:	18a8      	adds	r0, r5, r2
 8023b92:	5caa      	ldrb	r2, [r5, r2]
 8023b94:	7840      	ldrb	r0, [r0, #1]
 8023b96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b9e:	4422      	add	r2, r4
 8023ba0:	4420      	add	r0, r4
 8023ba2:	fa1f f388 	uxth.w	r3, r8
 8023ba6:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8023baa:	b289      	uxth	r1, r1
 8023bac:	f897 c000 	ldrb.w	ip, [r7]
 8023bb0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8023bb4:	fb03 f901 	mul.w	r9, r3, r1
 8023bb8:	011b      	lsls	r3, r3, #4
 8023bba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023bbe:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8023bc2:	eba3 0309 	sub.w	r3, r3, r9
 8023bc6:	b289      	uxth	r1, r1
 8023bc8:	b29b      	uxth	r3, r3
 8023bca:	eba8 0801 	sub.w	r8, r8, r1
 8023bce:	fb03 fc0c 	mul.w	ip, r3, ip
 8023bd2:	fa1f f888 	uxth.w	r8, r8
 8023bd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023bd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023bda:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023bde:	f892 a000 	ldrb.w	sl, [r2]
 8023be2:	fb01 cc0a 	mla	ip, r1, sl, ip
 8023be6:	f890 a000 	ldrb.w	sl, [r0]
 8023bea:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023bee:	f896 a000 	ldrb.w	sl, [r6]
 8023bf2:	fb1a fa03 	smulbb	sl, sl, r3
 8023bf6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023bfc:	fb0c ac05 	mla	ip, ip, r5, sl
 8023c00:	fa1f fc8c 	uxth.w	ip, ip
 8023c04:	f10c 0a01 	add.w	sl, ip, #1
 8023c08:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8023c0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023c10:	f886 a000 	strb.w	sl, [r6]
 8023c14:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023c18:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023c1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8023c20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023c22:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023c26:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023c2a:	fb01 cc0a 	mla	ip, r1, sl, ip
 8023c2e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023c32:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023c36:	f896 a001 	ldrb.w	sl, [r6, #1]
 8023c3a:	fb1a fa03 	smulbb	sl, sl, r3
 8023c3e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023c44:	fb0c ac05 	mla	ip, ip, r5, sl
 8023c48:	fa1f fc8c 	uxth.w	ip, ip
 8023c4c:	f10c 0a01 	add.w	sl, ip, #1
 8023c50:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8023c54:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023c58:	f886 c001 	strb.w	ip, [r6, #1]
 8023c5c:	78bf      	ldrb	r7, [r7, #2]
 8023c5e:	f89e c002 	ldrb.w	ip, [lr, #2]
 8023c62:	437b      	muls	r3, r7
 8023c64:	fb08 330c 	mla	r3, r8, ip, r3
 8023c68:	f892 c002 	ldrb.w	ip, [r2, #2]
 8023c6c:	7882      	ldrb	r2, [r0, #2]
 8023c6e:	fb01 310c 	mla	r1, r1, ip, r3
 8023c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023c74:	fb09 1902 	mla	r9, r9, r2, r1
 8023c78:	78b1      	ldrb	r1, [r6, #2]
 8023c7a:	fb11 f103 	smulbb	r1, r1, r3
 8023c7e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8023c82:	fb09 1505 	mla	r5, r9, r5, r1
 8023c86:	b2ad      	uxth	r5, r5
 8023c88:	1c6b      	adds	r3, r5, #1
 8023c8a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023c8e:	122d      	asrs	r5, r5, #8
 8023c90:	70b5      	strb	r5, [r6, #2]
 8023c92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023c94:	3603      	adds	r6, #3
 8023c96:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8023c98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023c9c:	4413      	add	r3, r2
 8023c9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023ca0:	931d      	str	r3, [sp, #116]	@ 0x74
 8023ca2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023ca4:	4413      	add	r3, r2
 8023ca6:	931e      	str	r3, [sp, #120]	@ 0x78
 8023ca8:	e73b      	b.n	8023b22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023caa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023cac:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8023cae:	4433      	add	r3, r6
 8023cb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023cb2:	931d      	str	r3, [sp, #116]	@ 0x74
 8023cb4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023cb6:	4433      	add	r3, r6
 8023cb8:	931e      	str	r3, [sp, #120]	@ 0x78
 8023cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cbc:	3b01      	subs	r3, #1
 8023cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023cc2:	3303      	adds	r3, #3
 8023cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8023cc6:	e70d      	b.n	8023ae4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023cc8:	d028      	beq.n	8023d1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ccc:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8023cce:	3b01      	subs	r3, #1
 8023cd0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023cd2:	fb00 5003 	mla	r0, r0, r3, r5
 8023cd6:	1400      	asrs	r0, r0, #16
 8023cd8:	f53f af21 	bmi.w	8023b1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023cdc:	3901      	subs	r1, #1
 8023cde:	4288      	cmp	r0, r1
 8023ce0:	f6bf af1d 	bge.w	8023b1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023ce4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8023ce6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8023ce8:	fb01 0303 	mla	r3, r1, r3, r0
 8023cec:	141b      	asrs	r3, r3, #16
 8023cee:	f53f af16 	bmi.w	8023b1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023cf2:	3a01      	subs	r2, #1
 8023cf4:	4293      	cmp	r3, r2
 8023cf6:	f6bf af12 	bge.w	8023b1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023cfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023cfc:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8023d00:	1cdf      	adds	r7, r3, #3
 8023d02:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8023d06:	f1b9 0f00 	cmp.w	r9, #0
 8023d0a:	dc73      	bgt.n	8023df4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023d14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d18:	441a      	add	r2, r3
 8023d1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8023d1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	f340 8129 	ble.w	8023f76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023d24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023d28:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023d2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d32:	eef0 6a62 	vmov.f32	s13, s5
 8023d36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023d3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d42:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8023d46:	eef0 6a43 	vmov.f32	s13, s6
 8023d4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d4e:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8023d52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d6a:	ee12 2a90 	vmov	r2, s5
 8023d6e:	eef0 2a47 	vmov.f32	s5, s14
 8023d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d76:	ee13 2a10 	vmov	r2, s6
 8023d7a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023d7c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023d7e:	eeb0 3a67 	vmov.f32	s6, s15
 8023d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d86:	9320      	str	r3, [sp, #128]	@ 0x80
 8023d88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023d8c:	3b01      	subs	r3, #1
 8023d8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023d90:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023d92:	bf08      	it	eq
 8023d94:	4613      	moveq	r3, r2
 8023d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d98:	e696      	b.n	8023ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023d9a:	b149      	cbz	r1, 8023db0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023d9c:	5caa      	ldrb	r2, [r5, r2]
 8023d9e:	4670      	mov	r0, lr
 8023da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023da4:	4422      	add	r2, r4
 8023da6:	4677      	mov	r7, lr
 8023da8:	e6fb      	b.n	8023ba2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023daa:	4670      	mov	r0, lr
 8023dac:	4672      	mov	r2, lr
 8023dae:	e6f8      	b.n	8023ba2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023db0:	4670      	mov	r0, lr
 8023db2:	4672      	mov	r2, lr
 8023db4:	e7f7      	b.n	8023da6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023db6:	f110 0c01 	adds.w	ip, r0, #1
 8023dba:	f53f af6a 	bmi.w	8023c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023dbe:	4562      	cmp	r2, ip
 8023dc0:	f6ff af67 	blt.w	8023c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023dc4:	f115 0c01 	adds.w	ip, r5, #1
 8023dc8:	f53f af63 	bmi.w	8023c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023dcc:	4567      	cmp	r7, ip
 8023dce:	f6ff af60 	blt.w	8023c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023dd4:	b23f      	sxth	r7, r7
 8023dd6:	b212      	sxth	r2, r2
 8023dd8:	9002      	str	r0, [sp, #8]
 8023dda:	9701      	str	r7, [sp, #4]
 8023ddc:	9200      	str	r2, [sp, #0]
 8023dde:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023de0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023de2:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8023de6:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8023dea:	4623      	mov	r3, r4
 8023dec:	4631      	mov	r1, r6
 8023dee:	f7ff fd69 	bl	80238c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8023df2:	e74e      	b.n	8023c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023df4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023df6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8023df8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023dfc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023dfe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023e00:	1400      	asrs	r0, r0, #16
 8023e02:	142d      	asrs	r5, r5, #16
 8023e04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e06:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023e0a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023e0e:	fb02 5000 	mla	r0, r2, r0, r5
 8023e12:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023e14:	f815 e000 	ldrb.w	lr, [r5, r0]
 8023e18:	eb05 0c00 	add.w	ip, r5, r0
 8023e1c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023e20:	eb04 060e 	add.w	r6, r4, lr
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	f000 8097 	beq.w	8023f58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8023e2a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e32:	4425      	add	r5, r4
 8023e34:	2900      	cmp	r1, #0
 8023e36:	f000 8098 	beq.w	8023f6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8023e3a:	eb0c 0002 	add.w	r0, ip, r2
 8023e3e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023e42:	7840      	ldrb	r0, [r0, #1]
 8023e44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e4c:	4422      	add	r2, r4
 8023e4e:	4420      	add	r0, r4
 8023e50:	b29b      	uxth	r3, r3
 8023e52:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8023e56:	b289      	uxth	r1, r1
 8023e58:	f895 e000 	ldrb.w	lr, [r5]
 8023e5c:	3703      	adds	r7, #3
 8023e5e:	f109 39ff 	add.w	r9, r9, #4294967295
 8023e62:	fb03 f801 	mul.w	r8, r3, r1
 8023e66:	011b      	lsls	r3, r3, #4
 8023e68:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023e6c:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8023e70:	eba3 0308 	sub.w	r3, r3, r8
 8023e74:	b289      	uxth	r1, r1
 8023e76:	b29b      	uxth	r3, r3
 8023e78:	ebac 0c01 	sub.w	ip, ip, r1
 8023e7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8023e80:	fa1f fc8c 	uxth.w	ip, ip
 8023e84:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e88:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023e8c:	f892 b000 	ldrb.w	fp, [r2]
 8023e90:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023e94:	f890 b000 	ldrb.w	fp, [r0]
 8023e98:	fb08 ee0b 	mla	lr, r8, fp, lr
 8023e9c:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8023ea0:	fb1b fb03 	smulbb	fp, fp, r3
 8023ea4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023eaa:	fb0e be0a 	mla	lr, lr, sl, fp
 8023eae:	fa1f fe8e 	uxth.w	lr, lr
 8023eb2:	f10e 0b01 	add.w	fp, lr, #1
 8023eb6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8023eba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023ebe:	f807 ec06 	strb.w	lr, [r7, #-6]
 8023ec2:	f895 e001 	ldrb.w	lr, [r5, #1]
 8023ec6:	f896 b001 	ldrb.w	fp, [r6, #1]
 8023eca:	fb03 fe0e 	mul.w	lr, r3, lr
 8023ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ed0:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023ed4:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023ed8:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023edc:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023ee0:	fb08 ee0b 	mla	lr, r8, fp, lr
 8023ee4:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8023ee8:	fb1b fb03 	smulbb	fp, fp, r3
 8023eec:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023ef2:	fb0e be0a 	mla	lr, lr, sl, fp
 8023ef6:	fa1f fe8e 	uxth.w	lr, lr
 8023efa:	f10e 0b01 	add.w	fp, lr, #1
 8023efe:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8023f02:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023f06:	f807 ec05 	strb.w	lr, [r7, #-5]
 8023f0a:	78ad      	ldrb	r5, [r5, #2]
 8023f0c:	78b6      	ldrb	r6, [r6, #2]
 8023f0e:	436b      	muls	r3, r5
 8023f10:	7895      	ldrb	r5, [r2, #2]
 8023f12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023f14:	fb0c 3306 	mla	r3, ip, r6, r3
 8023f18:	fb01 3305 	mla	r3, r1, r5, r3
 8023f1c:	7885      	ldrb	r5, [r0, #2]
 8023f1e:	fb08 3805 	mla	r8, r8, r5, r3
 8023f22:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8023f26:	fb13 f302 	smulbb	r3, r3, r2
 8023f2a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023f2e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8023f30:	fb08 380a 	mla	r8, r8, sl, r3
 8023f34:	fa1f f888 	uxth.w	r8, r8
 8023f38:	f108 0301 	add.w	r3, r8, #1
 8023f3c:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8023f40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f42:	4413      	add	r3, r2
 8023f44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023f46:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023f4a:	931d      	str	r3, [sp, #116]	@ 0x74
 8023f4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023f4e:	f807 8c04 	strb.w	r8, [r7, #-4]
 8023f52:	4413      	add	r3, r2
 8023f54:	931e      	str	r3, [sp, #120]	@ 0x78
 8023f56:	e6d6      	b.n	8023d06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023f58:	b151      	cbz	r1, 8023f70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023f5a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023f5e:	4630      	mov	r0, r6
 8023f60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f64:	4422      	add	r2, r4
 8023f66:	4635      	mov	r5, r6
 8023f68:	e772      	b.n	8023e50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023f6a:	4630      	mov	r0, r6
 8023f6c:	4632      	mov	r2, r6
 8023f6e:	e76f      	b.n	8023e50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023f70:	4630      	mov	r0, r6
 8023f72:	4632      	mov	r2, r6
 8023f74:	e7f7      	b.n	8023f66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023f76:	b013      	add	sp, #76	@ 0x4c
 8023f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8023f7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023f80:	784c      	ldrb	r4, [r1, #1]
 8023f82:	f891 a002 	ldrb.w	sl, [r1, #2]
 8023f86:	0224      	lsls	r4, r4, #8
 8023f88:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8023f8c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8023f90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023f94:	f891 a000 	ldrb.w	sl, [r1]
 8023f98:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8023f9c:	ea44 040a 	orr.w	r4, r4, sl
 8023fa0:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8023fa4:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8023fa8:	9401      	str	r4, [sp, #4]
 8023faa:	fb05 c70e 	mla	r7, r5, lr, ip
 8023fae:	2d00      	cmp	r5, #0
 8023fb0:	eb02 0807 	add.w	r8, r2, r7
 8023fb4:	db72      	blt.n	802409c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023fb6:	45a9      	cmp	r9, r5
 8023fb8:	dd70      	ble.n	802409c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023fba:	f1bc 0f00 	cmp.w	ip, #0
 8023fbe:	db6b      	blt.n	8024098 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023fc0:	45e6      	cmp	lr, ip
 8023fc2:	dd69      	ble.n	8024098 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023fc4:	5dd7      	ldrb	r7, [r2, r7]
 8023fc6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023fca:	441f      	add	r7, r3
 8023fcc:	f11c 0201 	adds.w	r2, ip, #1
 8023fd0:	d467      	bmi.n	80240a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023fd2:	4596      	cmp	lr, r2
 8023fd4:	dd65      	ble.n	80240a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023fd6:	2800      	cmp	r0, #0
 8023fd8:	d063      	beq.n	80240a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023fda:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023fde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023fe2:	441c      	add	r4, r3
 8023fe4:	3501      	adds	r5, #1
 8023fe6:	d460      	bmi.n	80240aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023fe8:	45a9      	cmp	r9, r5
 8023fea:	dd5e      	ble.n	80240aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023fec:	2e00      	cmp	r6, #0
 8023fee:	d05c      	beq.n	80240aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023ff0:	f1bc 0f00 	cmp.w	ip, #0
 8023ff4:	db57      	blt.n	80240a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023ff6:	45e6      	cmp	lr, ip
 8023ff8:	dd55      	ble.n	80240a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023ffa:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024002:	441d      	add	r5, r3
 8024004:	f11c 0201 	adds.w	r2, ip, #1
 8024008:	d452      	bmi.n	80240b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802400a:	4596      	cmp	lr, r2
 802400c:	dd50      	ble.n	80240b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802400e:	2800      	cmp	r0, #0
 8024010:	d04e      	beq.n	80240b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8024012:	44c6      	add	lr, r8
 8024014:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024018:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802401c:	4413      	add	r3, r2
 802401e:	b280      	uxth	r0, r0
 8024020:	f897 8000 	ldrb.w	r8, [r7]
 8024024:	b2b2      	uxth	r2, r6
 8024026:	fb00 f602 	mul.w	r6, r0, r2
 802402a:	0100      	lsls	r0, r0, #4
 802402c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024030:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8024034:	1b80      	subs	r0, r0, r6
 8024036:	fa1f fc82 	uxth.w	ip, r2
 802403a:	b282      	uxth	r2, r0
 802403c:	7820      	ldrb	r0, [r4, #0]
 802403e:	ebae 0e0c 	sub.w	lr, lr, ip
 8024042:	4350      	muls	r0, r2
 8024044:	fa1f fe8e 	uxth.w	lr, lr
 8024048:	fb0e 0808 	mla	r8, lr, r8, r0
 802404c:	7828      	ldrb	r0, [r5, #0]
 802404e:	fb0c 8800 	mla	r8, ip, r0, r8
 8024052:	7818      	ldrb	r0, [r3, #0]
 8024054:	fb06 8000 	mla	r0, r6, r0, r8
 8024058:	1200      	asrs	r0, r0, #8
 802405a:	7008      	strb	r0, [r1, #0]
 802405c:	7860      	ldrb	r0, [r4, #1]
 802405e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024062:	4350      	muls	r0, r2
 8024064:	fb0e 0808 	mla	r8, lr, r8, r0
 8024068:	7868      	ldrb	r0, [r5, #1]
 802406a:	fb0c 8800 	mla	r8, ip, r0, r8
 802406e:	7858      	ldrb	r0, [r3, #1]
 8024070:	fb06 8000 	mla	r0, r6, r0, r8
 8024074:	1200      	asrs	r0, r0, #8
 8024076:	7048      	strb	r0, [r1, #1]
 8024078:	78a0      	ldrb	r0, [r4, #2]
 802407a:	78bf      	ldrb	r7, [r7, #2]
 802407c:	4350      	muls	r0, r2
 802407e:	78aa      	ldrb	r2, [r5, #2]
 8024080:	fb0e 0007 	mla	r0, lr, r7, r0
 8024084:	fb0c 0c02 	mla	ip, ip, r2, r0
 8024088:	789a      	ldrb	r2, [r3, #2]
 802408a:	fb06 c202 	mla	r2, r6, r2, ip
 802408e:	1212      	asrs	r2, r2, #8
 8024090:	708a      	strb	r2, [r1, #2]
 8024092:	b002      	add	sp, #8
 8024094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024098:	af01      	add	r7, sp, #4
 802409a:	e797      	b.n	8023fcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802409c:	ac01      	add	r4, sp, #4
 802409e:	4627      	mov	r7, r4
 80240a0:	e7a0      	b.n	8023fe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80240a2:	ac01      	add	r4, sp, #4
 80240a4:	e79e      	b.n	8023fe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80240a6:	ad01      	add	r5, sp, #4
 80240a8:	e7ac      	b.n	8024004 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80240aa:	ab01      	add	r3, sp, #4
 80240ac:	461d      	mov	r5, r3
 80240ae:	e7b6      	b.n	802401e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80240b0:	ab01      	add	r3, sp, #4
 80240b2:	e7b4      	b.n	802401e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080240b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80240b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240b8:	b08d      	sub	sp, #52	@ 0x34
 80240ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80240be:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 80240c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80240c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80240c6:	9306      	str	r3, [sp, #24]
 80240c8:	6850      	ldr	r0, [r2, #4]
 80240ca:	6812      	ldr	r2, [r2, #0]
 80240cc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80240ce:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 80240d2:	fb00 1303 	mla	r3, r0, r3, r1
 80240d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80240da:	18d3      	adds	r3, r2, r3
 80240dc:	9307      	str	r3, [sp, #28]
 80240de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	9308      	str	r3, [sp, #32]
 80240e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80240e6:	685d      	ldr	r5, [r3, #4]
 80240e8:	3504      	adds	r5, #4
 80240ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240ec:	2b00      	cmp	r3, #0
 80240ee:	dc03      	bgt.n	80240f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80240f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	f340 81e6 	ble.w	80244c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80240f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80240fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80240fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024102:	1e48      	subs	r0, r1, #1
 8024104:	1e56      	subs	r6, r2, #1
 8024106:	9b06      	ldr	r3, [sp, #24]
 8024108:	2b00      	cmp	r3, #0
 802410a:	f340 80bd 	ble.w	8024288 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802410e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024110:	1427      	asrs	r7, r4, #16
 8024112:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024116:	d406      	bmi.n	8024126 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024118:	4287      	cmp	r7, r0
 802411a:	da04      	bge.n	8024126 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802411c:	2b00      	cmp	r3, #0
 802411e:	db02      	blt.n	8024126 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024120:	42b3      	cmp	r3, r6
 8024122:	f2c0 80b2 	blt.w	802428a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024126:	3701      	adds	r7, #1
 8024128:	f100 80a1 	bmi.w	802426e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802412c:	42b9      	cmp	r1, r7
 802412e:	f2c0 809e 	blt.w	802426e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024132:	3301      	adds	r3, #1
 8024134:	f100 809b 	bmi.w	802426e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024138:	429a      	cmp	r2, r3
 802413a:	f2c0 8098 	blt.w	802426e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802413e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8024142:	f1bb 0f00 	cmp.w	fp, #0
 8024146:	f340 80bf 	ble.w	80242c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802414a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802414c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802414e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024150:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024154:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8024158:	1420      	asrs	r0, r4, #16
 802415a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802415c:	ea4f 4723 	mov.w	r7, r3, asr #16
 8024160:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024164:	6892      	ldr	r2, [r2, #8]
 8024166:	f100 8103 	bmi.w	8024370 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802416a:	f102 3eff 	add.w	lr, r2, #4294967295
 802416e:	4570      	cmp	r0, lr
 8024170:	f280 80fe 	bge.w	8024370 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024174:	2f00      	cmp	r7, #0
 8024176:	f2c0 80fb 	blt.w	8024370 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802417a:	f10c 3eff 	add.w	lr, ip, #4294967295
 802417e:	4577      	cmp	r7, lr
 8024180:	f280 80f6 	bge.w	8024370 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024184:	b212      	sxth	r2, r2
 8024186:	fb07 0002 	mla	r0, r7, r2, r0
 802418a:	9f08      	ldr	r7, [sp, #32]
 802418c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8024190:	eb07 0e00 	add.w	lr, r7, r0
 8024194:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024198:	eb05 0c08 	add.w	ip, r5, r8
 802419c:	2b00      	cmp	r3, #0
 802419e:	f000 80d8 	beq.w	8024352 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80241a2:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80241a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80241aa:	442f      	add	r7, r5
 80241ac:	2900      	cmp	r1, #0
 80241ae:	f000 80d9 	beq.w	8024364 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80241b2:	eb0e 0002 	add.w	r0, lr, r2
 80241b6:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80241ba:	7840      	ldrb	r0, [r0, #1]
 80241bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80241c4:	442a      	add	r2, r5
 80241c6:	4428      	add	r0, r5
 80241c8:	b29b      	uxth	r3, r3
 80241ca:	f815 a008 	ldrb.w	sl, [r5, r8]
 80241ce:	b289      	uxth	r1, r1
 80241d0:	f897 8000 	ldrb.w	r8, [r7]
 80241d4:	fb03 f901 	mul.w	r9, r3, r1
 80241d8:	011b      	lsls	r3, r3, #4
 80241da:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80241de:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80241e2:	eba3 0309 	sub.w	r3, r3, r9
 80241e6:	b289      	uxth	r1, r1
 80241e8:	b29b      	uxth	r3, r3
 80241ea:	ebae 0e01 	sub.w	lr, lr, r1
 80241ee:	fb03 f808 	mul.w	r8, r3, r8
 80241f2:	fa1f fe8e 	uxth.w	lr, lr
 80241f6:	fb0e 880a 	mla	r8, lr, sl, r8
 80241fa:	f892 a000 	ldrb.w	sl, [r2]
 80241fe:	fb01 880a 	mla	r8, r1, sl, r8
 8024202:	f890 a000 	ldrb.w	sl, [r0]
 8024206:	fb09 880a 	mla	r8, r9, sl, r8
 802420a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802420e:	f886 8000 	strb.w	r8, [r6]
 8024212:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024216:	f89c a001 	ldrb.w	sl, [ip, #1]
 802421a:	fb03 f808 	mul.w	r8, r3, r8
 802421e:	fb0e 880a 	mla	r8, lr, sl, r8
 8024222:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024226:	fb01 880a 	mla	r8, r1, sl, r8
 802422a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802422e:	fb09 880a 	mla	r8, r9, sl, r8
 8024232:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024236:	f886 8001 	strb.w	r8, [r6, #1]
 802423a:	78bf      	ldrb	r7, [r7, #2]
 802423c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024240:	437b      	muls	r3, r7
 8024242:	7892      	ldrb	r2, [r2, #2]
 8024244:	fb0e 330c 	mla	r3, lr, ip, r3
 8024248:	fb01 3102 	mla	r1, r1, r2, r3
 802424c:	7882      	ldrb	r2, [r0, #2]
 802424e:	fb09 1902 	mla	r9, r9, r2, r1
 8024252:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024256:	f886 9002 	strb.w	r9, [r6, #2]
 802425a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802425c:	3603      	adds	r6, #3
 802425e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024260:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024264:	441c      	add	r4, r3
 8024266:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024268:	4413      	add	r3, r2
 802426a:	9318      	str	r3, [sp, #96]	@ 0x60
 802426c:	e769      	b.n	8024142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802426e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024270:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8024272:	441c      	add	r4, r3
 8024274:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024276:	443b      	add	r3, r7
 8024278:	9318      	str	r3, [sp, #96]	@ 0x60
 802427a:	9b06      	ldr	r3, [sp, #24]
 802427c:	3b01      	subs	r3, #1
 802427e:	9306      	str	r3, [sp, #24]
 8024280:	9b07      	ldr	r3, [sp, #28]
 8024282:	3303      	adds	r3, #3
 8024284:	9307      	str	r3, [sp, #28]
 8024286:	e73e      	b.n	8024106 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024288:	d026      	beq.n	80242d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802428a:	9b06      	ldr	r3, [sp, #24]
 802428c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802428e:	3b01      	subs	r3, #1
 8024290:	fb00 4003 	mla	r0, r0, r3, r4
 8024294:	1400      	asrs	r0, r0, #16
 8024296:	f53f af52 	bmi.w	802413e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802429a:	3901      	subs	r1, #1
 802429c:	4288      	cmp	r0, r1
 802429e:	f6bf af4e 	bge.w	802413e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80242a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80242a4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80242a6:	fb01 0303 	mla	r3, r1, r3, r0
 80242aa:	141b      	asrs	r3, r3, #16
 80242ac:	f53f af47 	bmi.w	802413e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80242b0:	3a01      	subs	r2, #1
 80242b2:	4293      	cmp	r3, r2
 80242b4:	f6bf af43 	bge.w	802413e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80242b8:	9b07      	ldr	r3, [sp, #28]
 80242ba:	f8dd a018 	ldr.w	sl, [sp, #24]
 80242be:	f103 0803 	add.w	r8, r3, #3
 80242c2:	f1ba 0f00 	cmp.w	sl, #0
 80242c6:	dc71      	bgt.n	80243ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80242c8:	9b06      	ldr	r3, [sp, #24]
 80242ca:	9a07      	ldr	r2, [sp, #28]
 80242cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80242d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80242d4:	441a      	add	r2, r3
 80242d6:	9207      	str	r2, [sp, #28]
 80242d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242da:	2b00      	cmp	r3, #0
 80242dc:	f340 80f2 	ble.w	80244c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80242e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80242e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80242e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80242ea:	eeb0 6a62 	vmov.f32	s12, s5
 80242ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80242f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80242f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80242fa:	ee16 4a10 	vmov	r4, s12
 80242fe:	eeb0 6a43 	vmov.f32	s12, s6
 8024302:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024306:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 802430a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802430e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024312:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024316:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802431a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802431e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024322:	ee12 2a90 	vmov	r2, s5
 8024326:	eef0 2a47 	vmov.f32	s5, s14
 802432a:	fb92 f3f3 	sdiv	r3, r2, r3
 802432e:	ee13 2a10 	vmov	r2, s6
 8024332:	9319      	str	r3, [sp, #100]	@ 0x64
 8024334:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024336:	eeb0 3a67 	vmov.f32	s6, s15
 802433a:	fb92 f3f3 	sdiv	r3, r2, r3
 802433e:	931a      	str	r3, [sp, #104]	@ 0x68
 8024340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024342:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024344:	3b01      	subs	r3, #1
 8024346:	9309      	str	r3, [sp, #36]	@ 0x24
 8024348:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802434a:	bf08      	it	eq
 802434c:	4613      	moveq	r3, r2
 802434e:	9306      	str	r3, [sp, #24]
 8024350:	e6cb      	b.n	80240ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8024352:	b151      	cbz	r1, 802436a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8024354:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8024358:	4660      	mov	r0, ip
 802435a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802435e:	442a      	add	r2, r5
 8024360:	4667      	mov	r7, ip
 8024362:	e731      	b.n	80241c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8024364:	4660      	mov	r0, ip
 8024366:	4662      	mov	r2, ip
 8024368:	e72e      	b.n	80241c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802436a:	4660      	mov	r0, ip
 802436c:	4662      	mov	r2, ip
 802436e:	e7f7      	b.n	8024360 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8024370:	f110 0e01 	adds.w	lr, r0, #1
 8024374:	f53f af71 	bmi.w	802425a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8024378:	4572      	cmp	r2, lr
 802437a:	f6ff af6e 	blt.w	802425a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802437e:	f117 0e01 	adds.w	lr, r7, #1
 8024382:	f53f af6a 	bmi.w	802425a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8024386:	45f4      	cmp	ip, lr
 8024388:	f6ff af67 	blt.w	802425a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802438c:	b212      	sxth	r2, r2
 802438e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024392:	fa0f f38c 	sxth.w	r3, ip
 8024396:	9200      	str	r2, [sp, #0]
 8024398:	4631      	mov	r1, r6
 802439a:	9a08      	ldr	r2, [sp, #32]
 802439c:	9301      	str	r3, [sp, #4]
 802439e:	462b      	mov	r3, r5
 80243a0:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80243a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80243a6:	f7ff fde9 	bl	8023f7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80243aa:	e756      	b.n	802425a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80243ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80243ae:	1426      	asrs	r6, r4, #16
 80243b0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80243b2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80243b6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80243ba:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80243bc:	1400      	asrs	r0, r0, #16
 80243be:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80243c2:	fb02 6000 	mla	r0, r2, r0, r6
 80243c6:	9e08      	ldr	r6, [sp, #32]
 80243c8:	f816 e000 	ldrb.w	lr, [r6, r0]
 80243cc:	eb06 0c00 	add.w	ip, r6, r0
 80243d0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80243d4:	eb05 070e 	add.w	r7, r5, lr
 80243d8:	2b00      	cmp	r3, #0
 80243da:	d064      	beq.n	80244a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80243dc:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80243e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80243e4:	442e      	add	r6, r5
 80243e6:	2900      	cmp	r1, #0
 80243e8:	d066      	beq.n	80244b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80243ea:	eb0c 0002 	add.w	r0, ip, r2
 80243ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80243f2:	7840      	ldrb	r0, [r0, #1]
 80243f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80243f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80243fc:	442a      	add	r2, r5
 80243fe:	4428      	add	r0, r5
 8024400:	b29b      	uxth	r3, r3
 8024402:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8024406:	b289      	uxth	r1, r1
 8024408:	f896 e000 	ldrb.w	lr, [r6]
 802440c:	f108 0803 	add.w	r8, r8, #3
 8024410:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024414:	fb03 f901 	mul.w	r9, r3, r1
 8024418:	011b      	lsls	r3, r3, #4
 802441a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802441e:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8024422:	eba3 0309 	sub.w	r3, r3, r9
 8024426:	b289      	uxth	r1, r1
 8024428:	b29b      	uxth	r3, r3
 802442a:	ebac 0c01 	sub.w	ip, ip, r1
 802442e:	fb03 fe0e 	mul.w	lr, r3, lr
 8024432:	fa1f fc8c 	uxth.w	ip, ip
 8024436:	fb0c ee0b 	mla	lr, ip, fp, lr
 802443a:	f892 b000 	ldrb.w	fp, [r2]
 802443e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024442:	f890 b000 	ldrb.w	fp, [r0]
 8024446:	fb09 ee0b 	mla	lr, r9, fp, lr
 802444a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802444e:	f808 ec06 	strb.w	lr, [r8, #-6]
 8024452:	f896 e001 	ldrb.w	lr, [r6, #1]
 8024456:	f897 b001 	ldrb.w	fp, [r7, #1]
 802445a:	fb03 fe0e 	mul.w	lr, r3, lr
 802445e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024462:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024466:	fb01 ee0b 	mla	lr, r1, fp, lr
 802446a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802446e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024472:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024476:	f808 ec05 	strb.w	lr, [r8, #-5]
 802447a:	78b6      	ldrb	r6, [r6, #2]
 802447c:	78bf      	ldrb	r7, [r7, #2]
 802447e:	4373      	muls	r3, r6
 8024480:	7896      	ldrb	r6, [r2, #2]
 8024482:	7882      	ldrb	r2, [r0, #2]
 8024484:	fb0c 3307 	mla	r3, ip, r7, r3
 8024488:	fb01 3306 	mla	r3, r1, r6, r3
 802448c:	fb09 3902 	mla	r9, r9, r2, r3
 8024490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024492:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024494:	441c      	add	r4, r3
 8024496:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024498:	ea4f 2929 	mov.w	r9, r9, asr #8
 802449c:	4413      	add	r3, r2
 802449e:	f808 9c04 	strb.w	r9, [r8, #-4]
 80244a2:	9318      	str	r3, [sp, #96]	@ 0x60
 80244a4:	e70d      	b.n	80242c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80244a6:	b151      	cbz	r1, 80244be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80244a8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80244ac:	4638      	mov	r0, r7
 80244ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80244b2:	442a      	add	r2, r5
 80244b4:	463e      	mov	r6, r7
 80244b6:	e7a3      	b.n	8024400 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80244b8:	4638      	mov	r0, r7
 80244ba:	463a      	mov	r2, r7
 80244bc:	e7a0      	b.n	8024400 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80244be:	4638      	mov	r0, r7
 80244c0:	463a      	mov	r2, r7
 80244c2:	e7f7      	b.n	80244b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80244c4:	b00d      	add	sp, #52	@ 0x34
 80244c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080244ca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80244ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244ce:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80244d2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80244d6:	2d00      	cmp	r5, #0
 80244d8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80244dc:	fb05 700c 	mla	r0, r5, ip, r7
 80244e0:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80244e4:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 80244e8:	eb02 0800 	add.w	r8, r2, r0
 80244ec:	f2c0 8118 	blt.w	8024720 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80244f0:	45a9      	cmp	r9, r5
 80244f2:	f340 8115 	ble.w	8024720 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80244f6:	2f00      	cmp	r7, #0
 80244f8:	f2c0 8110 	blt.w	802471c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80244fc:	45bc      	cmp	ip, r7
 80244fe:	f340 810d 	ble.w	802471c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024502:	5c12      	ldrb	r2, [r2, r0]
 8024504:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024508:	1c7a      	adds	r2, r7, #1
 802450a:	f100 810c 	bmi.w	8024726 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802450e:	4594      	cmp	ip, r2
 8024510:	f340 8109 	ble.w	8024726 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024514:	2c00      	cmp	r4, #0
 8024516:	f000 8108 	beq.w	802472a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 802451a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802451e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024522:	3501      	adds	r5, #1
 8024524:	f100 8105 	bmi.w	8024732 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024528:	45a9      	cmp	r9, r5
 802452a:	f340 8102 	ble.w	8024732 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802452e:	f1be 0f00 	cmp.w	lr, #0
 8024532:	f000 8101 	beq.w	8024738 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8024536:	2f00      	cmp	r7, #0
 8024538:	f2c0 80f9 	blt.w	802472e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802453c:	45bc      	cmp	ip, r7
 802453e:	f340 80f6 	ble.w	802472e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024542:	f818 200c 	ldrb.w	r2, [r8, ip]
 8024546:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802454a:	3701      	adds	r7, #1
 802454c:	f100 80f7 	bmi.w	802473e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024550:	45bc      	cmp	ip, r7
 8024552:	f340 80f4 	ble.w	802473e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024556:	2c00      	cmp	r4, #0
 8024558:	f000 80f3 	beq.w	8024742 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 802455c:	44c4      	add	ip, r8
 802455e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024566:	fa1f fc84 	uxth.w	ip, r4
 802456a:	fa1f f48e 	uxth.w	r4, lr
 802456e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024572:	fb04 fe0c 	mul.w	lr, r4, ip
 8024576:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802457a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802457e:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024582:	ebac 070e 	sub.w	r7, ip, lr
 8024586:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802458a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802458e:	b2a4      	uxth	r4, r4
 8024590:	b2bf      	uxth	r7, r7
 8024592:	1b1b      	subs	r3, r3, r4
 8024594:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024598:	fb07 fc0a 	mul.w	ip, r7, sl
 802459c:	b29b      	uxth	r3, r3
 802459e:	fb03 cc0b 	mla	ip, r3, fp, ip
 80245a2:	9300      	str	r3, [sp, #0]
 80245a4:	fb04 cc09 	mla	ip, r4, r9, ip
 80245a8:	fb0e cc08 	mla	ip, lr, r8, ip
 80245ac:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80245b0:	9301      	str	r3, [sp, #4]
 80245b2:	2b00      	cmp	r3, #0
 80245b4:	f000 80af 	beq.w	8024716 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80245b8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80245bc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80245c0:	fb0b fc0c 	mul.w	ip, fp, ip
 80245c4:	fb0b f606 	mul.w	r6, fp, r6
 80245c8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80245cc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80245d0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80245d4:	44dc      	add	ip, fp
 80245d6:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80245da:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80245de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80245e2:	fb0a fb0b 	mul.w	fp, sl, fp
 80245e6:	fb0a fa00 	mul.w	sl, sl, r0
 80245ea:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80245ee:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80245f2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80245f6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80245fa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80245fe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024602:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024606:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802460a:	0a36      	lsrs	r6, r6, #8
 802460c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024610:	44dc      	add	ip, fp
 8024612:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024616:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802461a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802461e:	fb09 fb0b 	mul.w	fp, r9, fp
 8024622:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024626:	fb09 f905 	mul.w	r9, r9, r5
 802462a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802462e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024632:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024636:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802463a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802463e:	fb0c fc07 	mul.w	ip, ip, r7
 8024642:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024646:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802464a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802464e:	4458      	add	r0, fp
 8024650:	fb08 f505 	mul.w	r5, r8, r5
 8024654:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024658:	fb08 f802 	mul.w	r8, r8, r2
 802465c:	0a00      	lsrs	r0, r0, #8
 802465e:	0a2a      	lsrs	r2, r5, #8
 8024660:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024664:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024668:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802466c:	4415      	add	r5, r2
 802466e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8024672:	0a2d      	lsrs	r5, r5, #8
 8024674:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024678:	9a00      	ldr	r2, [sp, #0]
 802467a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802467e:	fb03 cc02 	mla	ip, r3, r2, ip
 8024682:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024686:	9b01      	ldr	r3, [sp, #4]
 8024688:	fb05 c50e 	mla	r5, r5, lr, ip
 802468c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024690:	fb00 5004 	mla	r0, r0, r4, r5
 8024694:	0a00      	lsrs	r0, r0, #8
 8024696:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802469a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802469e:	4378      	muls	r0, r7
 80246a0:	fb02 0006 	mla	r0, r2, r6, r0
 80246a4:	fb0e 0e08 	mla	lr, lr, r8, r0
 80246a8:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80246ac:	fb04 e000 	mla	r0, r4, r0, lr
 80246b0:	0a00      	lsrs	r0, r0, #8
 80246b2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80246b6:	4328      	orrs	r0, r5
 80246b8:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80246bc:	b2ad      	uxth	r5, r5
 80246be:	b2c4      	uxtb	r4, r0
 80246c0:	436b      	muls	r3, r5
 80246c2:	fb14 f405 	smulbb	r4, r4, r5
 80246c6:	1c5a      	adds	r2, r3, #1
 80246c8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80246cc:	780b      	ldrb	r3, [r1, #0]
 80246ce:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80246d2:	b2d2      	uxtb	r2, r2
 80246d4:	fb03 4302 	mla	r3, r3, r2, r4
 80246d8:	b29b      	uxth	r3, r3
 80246da:	1c5c      	adds	r4, r3, #1
 80246dc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80246e0:	784c      	ldrb	r4, [r1, #1]
 80246e2:	fb14 f402 	smulbb	r4, r4, r2
 80246e6:	121b      	asrs	r3, r3, #8
 80246e8:	700b      	strb	r3, [r1, #0]
 80246ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80246ee:	fb03 4305 	mla	r3, r3, r5, r4
 80246f2:	b29b      	uxth	r3, r3
 80246f4:	1c5c      	adds	r4, r3, #1
 80246f6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80246fa:	0c04      	lsrs	r4, r0, #16
 80246fc:	7888      	ldrb	r0, [r1, #2]
 80246fe:	121b      	asrs	r3, r3, #8
 8024700:	fb10 f002 	smulbb	r0, r0, r2
 8024704:	704b      	strb	r3, [r1, #1]
 8024706:	fb04 0005 	mla	r0, r4, r5, r0
 802470a:	b280      	uxth	r0, r0
 802470c:	1c43      	adds	r3, r0, #1
 802470e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024712:	1200      	asrs	r0, r0, #8
 8024714:	7088      	strb	r0, [r1, #2]
 8024716:	b003      	add	sp, #12
 8024718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802471c:	2600      	movs	r6, #0
 802471e:	e6f3      	b.n	8024508 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8024720:	2000      	movs	r0, #0
 8024722:	4606      	mov	r6, r0
 8024724:	e6fd      	b.n	8024522 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024726:	2000      	movs	r0, #0
 8024728:	e6fb      	b.n	8024522 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802472a:	4620      	mov	r0, r4
 802472c:	e6f9      	b.n	8024522 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802472e:	2500      	movs	r5, #0
 8024730:	e70b      	b.n	802454a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8024732:	2200      	movs	r2, #0
 8024734:	4615      	mov	r5, r2
 8024736:	e716      	b.n	8024566 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024738:	4672      	mov	r2, lr
 802473a:	4675      	mov	r5, lr
 802473c:	e713      	b.n	8024566 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802473e:	2200      	movs	r2, #0
 8024740:	e711      	b.n	8024566 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024742:	4622      	mov	r2, r4
 8024744:	e70f      	b.n	8024566 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08024746 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802474a:	b09f      	sub	sp, #124	@ 0x7c
 802474c:	921b      	str	r2, [sp, #108]	@ 0x6c
 802474e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024750:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024752:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8024756:	901d      	str	r0, [sp, #116]	@ 0x74
 8024758:	931c      	str	r3, [sp, #112]	@ 0x70
 802475a:	6850      	ldr	r0, [r2, #4]
 802475c:	9119      	str	r1, [sp, #100]	@ 0x64
 802475e:	6812      	ldr	r2, [r2, #0]
 8024760:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8024762:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8024766:	fb00 1303 	mla	r3, r0, r3, r1
 802476a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802476e:	18d3      	adds	r3, r2, r3
 8024770:	930c      	str	r3, [sp, #48]	@ 0x30
 8024772:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024774:	681b      	ldr	r3, [r3, #0]
 8024776:	9312      	str	r3, [sp, #72]	@ 0x48
 8024778:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802477a:	685e      	ldr	r6, [r3, #4]
 802477c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8024780:	3604      	adds	r6, #4
 8024782:	930d      	str	r3, [sp, #52]	@ 0x34
 8024784:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024786:	2b00      	cmp	r3, #0
 8024788:	dc03      	bgt.n	8024792 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802478a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802478c:	2b00      	cmp	r3, #0
 802478e:	f340 8378 	ble.w	8024e82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024792:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024794:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024798:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802479c:	1e48      	subs	r0, r1, #1
 802479e:	1e57      	subs	r7, r2, #1
 80247a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	f340 818c 	ble.w	8024ac0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80247a8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80247aa:	142b      	asrs	r3, r5, #16
 80247ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80247b0:	d406      	bmi.n	80247c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80247b2:	4584      	cmp	ip, r0
 80247b4:	da04      	bge.n	80247c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	db02      	blt.n	80247c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80247ba:	42bb      	cmp	r3, r7
 80247bc:	f2c0 8181 	blt.w	8024ac2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80247c0:	f11c 0c01 	adds.w	ip, ip, #1
 80247c4:	f100 816f 	bmi.w	8024aa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80247c8:	4561      	cmp	r1, ip
 80247ca:	f2c0 816c 	blt.w	8024aa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80247ce:	3301      	adds	r3, #1
 80247d0:	f100 8169 	bmi.w	8024aa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80247d4:	429a      	cmp	r2, r3
 80247d6:	f2c0 8166 	blt.w	8024aa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80247da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247dc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80247de:	931a      	str	r3, [sp, #104]	@ 0x68
 80247e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	f340 818c 	ble.w	8024b00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80247e8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80247ea:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80247ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80247f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80247f6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80247f8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80247fc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80247fe:	141b      	asrs	r3, r3, #16
 8024800:	f100 81d0 	bmi.w	8024ba4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024804:	f100 38ff 	add.w	r8, r0, #4294967295
 8024808:	4543      	cmp	r3, r8
 802480a:	f280 81cb 	bge.w	8024ba4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802480e:	f1bc 0f00 	cmp.w	ip, #0
 8024812:	f2c0 81c7 	blt.w	8024ba4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024816:	f10e 38ff 	add.w	r8, lr, #4294967295
 802481a:	45c4      	cmp	ip, r8
 802481c:	f280 81c2 	bge.w	8024ba4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024820:	b200      	sxth	r0, r0
 8024822:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024824:	fb0c 3300 	mla	r3, ip, r0, r3
 8024828:	eb04 0803 	add.w	r8, r4, r3
 802482c:	5ce3      	ldrb	r3, [r4, r3]
 802482e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024832:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024836:	2a00      	cmp	r2, #0
 8024838:	f000 81a9 	beq.w	8024b8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802483c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024840:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024844:	940e      	str	r4, [sp, #56]	@ 0x38
 8024846:	0e24      	lsrs	r4, r4, #24
 8024848:	9415      	str	r4, [sp, #84]	@ 0x54
 802484a:	b179      	cbz	r1, 802486c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802484c:	eb08 0c00 	add.w	ip, r8, r0
 8024850:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024854:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024858:	900a      	str	r0, [sp, #40]	@ 0x28
 802485a:	0e00      	lsrs	r0, r0, #24
 802485c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802485e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024862:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024866:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024868:	0e00      	lsrs	r0, r0, #24
 802486a:	9016      	str	r0, [sp, #88]	@ 0x58
 802486c:	b292      	uxth	r2, r2
 802486e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024870:	b289      	uxth	r1, r1
 8024872:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024874:	fb02 f901 	mul.w	r9, r2, r1
 8024878:	0112      	lsls	r2, r2, #4
 802487a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802487e:	eba2 0809 	sub.w	r8, r2, r9
 8024882:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024886:	b289      	uxth	r1, r1
 8024888:	fa1f f888 	uxth.w	r8, r8
 802488c:	1a52      	subs	r2, r2, r1
 802488e:	fb08 f000 	mul.w	r0, r8, r0
 8024892:	b292      	uxth	r2, r2
 8024894:	fb02 000e 	mla	r0, r2, lr, r0
 8024898:	fb01 0004 	mla	r0, r1, r4, r0
 802489c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802489e:	fb09 0004 	mla	r0, r9, r4, r0
 80248a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80248a6:	2800      	cmp	r0, #0
 80248a8:	f000 80f2 	beq.w	8024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80248ac:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80248b0:	d01b      	beq.n	80248ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80248b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80248b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80248ba:	fb0e fa0a 	mul.w	sl, lr, sl
 80248be:	fb0e fe03 	mul.w	lr, lr, r3
 80248c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80248c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80248ca:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80248ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80248d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80248d6:	4453      	add	r3, sl
 80248d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248dc:	0a1b      	lsrs	r3, r3, #8
 80248de:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80248e2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80248e6:	ea43 030c 	orr.w	r3, r3, ip
 80248ea:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80248ec:	2cff      	cmp	r4, #255	@ 0xff
 80248ee:	d021      	beq.n	8024934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80248f0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80248f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80248f6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80248f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80248fc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80248fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024902:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024904:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024908:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802490c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024910:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024914:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024918:	44de      	add	lr, fp
 802491a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802491e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024922:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024926:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802492a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802492e:	ea4e 040a 	orr.w	r4, lr, sl
 8024932:	940e      	str	r4, [sp, #56]	@ 0x38
 8024934:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024936:	2cff      	cmp	r4, #255	@ 0xff
 8024938:	d021      	beq.n	802497e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802493a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802493c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024940:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024942:	fb04 fb0b 	mul.w	fp, r4, fp
 8024946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024948:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802494c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802494e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024952:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024956:	fb04 fa0a 	mul.w	sl, r4, sl
 802495a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802495e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024962:	44de      	add	lr, fp
 8024964:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024968:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802496c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024970:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024974:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024978:	ea4e 040a 	orr.w	r4, lr, sl
 802497c:	940a      	str	r4, [sp, #40]	@ 0x28
 802497e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024980:	2cff      	cmp	r4, #255	@ 0xff
 8024982:	d021      	beq.n	80249c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024984:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024986:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802498a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802498c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024990:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024992:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024996:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024998:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802499c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80249a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80249a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80249a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80249ac:	44de      	add	lr, fp
 80249ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80249b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80249b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80249be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80249c2:	ea4e 040a 	orr.w	r4, lr, sl
 80249c6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80249c8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80249ca:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80249ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80249d2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80249d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80249d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80249dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80249e0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80249e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80249e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80249ea:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80249ee:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80249f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80249f4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80249f8:	fb08 f80e 	mul.w	r8, r8, lr
 80249fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a00:	fb02 8303 	mla	r3, r2, r3, r8
 8024a04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024a0a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024a0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024a10:	fb01 330a 	mla	r3, r1, sl, r3
 8024a14:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8024a18:	fb09 3901 	mla	r9, r9, r1, r3
 8024a1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024a1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024a20:	4343      	muls	r3, r0
 8024a22:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024a26:	1c58      	adds	r0, r3, #1
 8024a28:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024a2c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024a30:	ea4c 0c09 	orr.w	ip, ip, r9
 8024a34:	783b      	ldrb	r3, [r7, #0]
 8024a36:	fa5f f28c 	uxtb.w	r2, ip
 8024a3a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024a3e:	fb12 f201 	smulbb	r2, r2, r1
 8024a42:	b2c0      	uxtb	r0, r0
 8024a44:	fb03 2300 	mla	r3, r3, r0, r2
 8024a48:	b29b      	uxth	r3, r3
 8024a4a:	1c5a      	adds	r2, r3, #1
 8024a4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a50:	787a      	ldrb	r2, [r7, #1]
 8024a52:	fb12 f200 	smulbb	r2, r2, r0
 8024a56:	121b      	asrs	r3, r3, #8
 8024a58:	703b      	strb	r3, [r7, #0]
 8024a5a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024a5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024a62:	fb03 2301 	mla	r3, r3, r1, r2
 8024a66:	b29b      	uxth	r3, r3
 8024a68:	1c5a      	adds	r2, r3, #1
 8024a6a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a6e:	121b      	asrs	r3, r3, #8
 8024a70:	707b      	strb	r3, [r7, #1]
 8024a72:	78bb      	ldrb	r3, [r7, #2]
 8024a74:	fb13 f000 	smulbb	r0, r3, r0
 8024a78:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024a7c:	fa1f fc8c 	uxth.w	ip, ip
 8024a80:	f10c 0301 	add.w	r3, ip, #1
 8024a84:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024a88:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024a8c:	f887 c002 	strb.w	ip, [r7, #2]
 8024a90:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024a92:	3703      	adds	r7, #3
 8024a94:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024a96:	441a      	add	r2, r3
 8024a98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024a9a:	441d      	add	r5, r3
 8024a9c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024a9e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024aa0:	3b01      	subs	r3, #1
 8024aa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8024aa4:	e69c      	b.n	80247e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024aa6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024aa8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024aaa:	441c      	add	r4, r3
 8024aac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024aae:	441d      	add	r5, r3
 8024ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ab2:	9429      	str	r4, [sp, #164]	@ 0xa4
 8024ab4:	3b01      	subs	r3, #1
 8024ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024aba:	3303      	adds	r3, #3
 8024abc:	930c      	str	r3, [sp, #48]	@ 0x30
 8024abe:	e66f      	b.n	80247a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024ac0:	d026      	beq.n	8024b10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ac4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8024ac6:	3b01      	subs	r3, #1
 8024ac8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024aca:	fb00 4003 	mla	r0, r0, r3, r4
 8024ace:	1400      	asrs	r0, r0, #16
 8024ad0:	f53f ae83 	bmi.w	80247da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024ad4:	3901      	subs	r1, #1
 8024ad6:	4288      	cmp	r0, r1
 8024ad8:	f6bf ae7f 	bge.w	80247da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024adc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8024ade:	fb01 5303 	mla	r3, r1, r3, r5
 8024ae2:	141b      	asrs	r3, r3, #16
 8024ae4:	f53f ae79 	bmi.w	80247da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024ae8:	3a01      	subs	r2, #1
 8024aea:	4293      	cmp	r3, r2
 8024aec:	f6bf ae75 	bge.w	80247da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024af2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8024af6:	f103 0e03 	add.w	lr, r3, #3
 8024afa:	f1bb 0f00 	cmp.w	fp, #0
 8024afe:	dc71      	bgt.n	8024be4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b02:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024b06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024b0c:	4423      	add	r3, r4
 8024b0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	f340 81b5 	ble.w	8024e82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024b1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024b22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024b26:	eef0 6a62 	vmov.f32	s13, s5
 8024b2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024b2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024b32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b36:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8024b3a:	eef0 6a43 	vmov.f32	s13, s6
 8024b3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b42:	ee16 5a90 	vmov	r5, s13
 8024b46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024b4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024b4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024b52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024b56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024b5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024b5e:	ee12 2a90 	vmov	r2, s5
 8024b62:	eef0 2a47 	vmov.f32	s5, s14
 8024b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b6a:	ee13 2a10 	vmov	r2, s6
 8024b6e:	932b      	str	r3, [sp, #172]	@ 0xac
 8024b70:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b72:	eeb0 3a67 	vmov.f32	s6, s15
 8024b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b7a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8024b7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024b7e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024b80:	3b01      	subs	r3, #1
 8024b82:	9319      	str	r3, [sp, #100]	@ 0x64
 8024b84:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b86:	bf08      	it	eq
 8024b88:	4613      	moveq	r3, r2
 8024b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b8c:	e5fa      	b.n	8024784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024b8e:	2900      	cmp	r1, #0
 8024b90:	f43f ae6c 	beq.w	802486c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024b94:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024b98:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024b9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8024b9e:	0e00      	lsrs	r0, r0, #24
 8024ba0:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024ba2:	e663      	b.n	802486c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024ba4:	f113 0801 	adds.w	r8, r3, #1
 8024ba8:	f53f af72 	bmi.w	8024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024bac:	4540      	cmp	r0, r8
 8024bae:	f6ff af6f 	blt.w	8024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024bb2:	f11c 0801 	adds.w	r8, ip, #1
 8024bb6:	f53f af6b 	bmi.w	8024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024bba:	45c6      	cmp	lr, r8
 8024bbc:	f6ff af68 	blt.w	8024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024bc0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024bc2:	b200      	sxth	r0, r0
 8024bc4:	9302      	str	r3, [sp, #8]
 8024bc6:	fa0f f38e 	sxth.w	r3, lr
 8024bca:	9000      	str	r0, [sp, #0]
 8024bcc:	9301      	str	r3, [sp, #4]
 8024bce:	4633      	mov	r3, r6
 8024bd0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024bd2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024bd6:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024bda:	4639      	mov	r1, r7
 8024bdc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024bde:	f7ff fc74 	bl	80244ca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8024be2:	e755      	b.n	8024a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024be4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024be6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024bea:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024bec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024bf0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024bf2:	1427      	asrs	r7, r4, #16
 8024bf4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024bf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024bfa:	142b      	asrs	r3, r5, #16
 8024bfc:	fb01 7303 	mla	r3, r1, r3, r7
 8024c00:	18e7      	adds	r7, r4, r3
 8024c02:	5ce3      	ldrb	r3, [r4, r3]
 8024c04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024c08:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024c0c:	2a00      	cmp	r2, #0
 8024c0e:	f000 812e 	beq.w	8024e6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8024c12:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024c16:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024c1a:	9410      	str	r4, [sp, #64]	@ 0x40
 8024c1c:	0e24      	lsrs	r4, r4, #24
 8024c1e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8024c20:	b170      	cbz	r0, 8024c40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024c22:	eb07 0801 	add.w	r8, r7, r1
 8024c26:	5c79      	ldrb	r1, [r7, r1]
 8024c28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024c2e:	0e09      	lsrs	r1, r1, #24
 8024c30:	9114      	str	r1, [sp, #80]	@ 0x50
 8024c32:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024c36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c3a:	9111      	str	r1, [sp, #68]	@ 0x44
 8024c3c:	0e09      	lsrs	r1, r1, #24
 8024c3e:	9118      	str	r1, [sp, #96]	@ 0x60
 8024c40:	b292      	uxth	r2, r2
 8024c42:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024c44:	b280      	uxth	r0, r0
 8024c46:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024c48:	fb02 f900 	mul.w	r9, r2, r0
 8024c4c:	0112      	lsls	r2, r2, #4
 8024c4e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024c52:	eba2 0809 	sub.w	r8, r2, r9
 8024c56:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024c5a:	b280      	uxth	r0, r0
 8024c5c:	fa1f f888 	uxth.w	r8, r8
 8024c60:	1a12      	subs	r2, r2, r0
 8024c62:	fb08 f101 	mul.w	r1, r8, r1
 8024c66:	b292      	uxth	r2, r2
 8024c68:	fb02 110c 	mla	r1, r2, ip, r1
 8024c6c:	fb00 1104 	mla	r1, r0, r4, r1
 8024c70:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024c72:	fb09 1104 	mla	r1, r9, r4, r1
 8024c76:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c7a:	2900      	cmp	r1, #0
 8024c7c:	f000 80ec 	beq.w	8024e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8024c80:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024c84:	d019      	beq.n	8024cba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8024c86:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024c8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024c8e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024c92:	fb0c fc03 	mul.w	ip, ip, r3
 8024c96:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024c9a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024c9e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024ca2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024ca6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024caa:	4453      	add	r3, sl
 8024cac:	0a3f      	lsrs	r7, r7, #8
 8024cae:	0a1b      	lsrs	r3, r3, #8
 8024cb0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024cb4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024cb8:	433b      	orrs	r3, r7
 8024cba:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024cbc:	2cff      	cmp	r4, #255	@ 0xff
 8024cbe:	d020      	beq.n	8024d02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8024cc0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024cc2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024cc6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024cc8:	4367      	muls	r7, r4
 8024cca:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024ccc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024cd0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024cd4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024cd6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024cda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024cde:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ce2:	44bc      	add	ip, r7
 8024ce4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024ce8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024cec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024cf0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024cf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cf8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024cfc:	ea4c 040a 	orr.w	r4, ip, sl
 8024d00:	9410      	str	r4, [sp, #64]	@ 0x40
 8024d02:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024d04:	2cff      	cmp	r4, #255	@ 0xff
 8024d06:	d020      	beq.n	8024d4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8024d08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d0a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024d0e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024d10:	4367      	muls	r7, r4
 8024d12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024d18:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024d1c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024d1e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024d22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024d26:	fb04 fa0a 	mul.w	sl, r4, sl
 8024d2a:	44bc      	add	ip, r7
 8024d2c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024d30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024d38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024d3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024d44:	ea4c 040a 	orr.w	r4, ip, sl
 8024d48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024d4a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024d4c:	2cff      	cmp	r4, #255	@ 0xff
 8024d4e:	d020      	beq.n	8024d92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8024d50:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024d52:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024d56:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024d58:	4367      	muls	r7, r4
 8024d5a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024d5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024d60:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024d64:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024d66:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024d6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024d6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024d72:	44bc      	add	ip, r7
 8024d74:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024d78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024d80:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024d84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d88:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024d8c:	ea4c 040a 	orr.w	r4, ip, sl
 8024d90:	9411      	str	r4, [sp, #68]	@ 0x44
 8024d92:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024d94:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024d98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024d9c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024da0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024da2:	fb08 f707 	mul.w	r7, r8, r7
 8024da6:	fb02 770c 	mla	r7, r2, ip, r7
 8024daa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024dae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024db0:	fb00 770c 	mla	r7, r0, ip, r7
 8024db4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024db8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024dba:	fb09 770c 	mla	r7, r9, ip, r7
 8024dbe:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024dc2:	fb08 f80c 	mul.w	r8, r8, ip
 8024dc6:	0a3f      	lsrs	r7, r7, #8
 8024dc8:	fb02 8303 	mla	r3, r2, r3, r8
 8024dcc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024dce:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024dd2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024dd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024dd8:	fb00 330a 	mla	r3, r0, sl, r3
 8024ddc:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8024de0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024de2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dec:	434b      	muls	r3, r1
 8024dee:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024df2:	1c59      	adds	r1, r3, #1
 8024df4:	ea47 070c 	orr.w	r7, r7, ip
 8024df8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024dfc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024e00:	b2fa      	uxtb	r2, r7
 8024e02:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024e06:	fb12 f200 	smulbb	r2, r2, r0
 8024e0a:	b2c9      	uxtb	r1, r1
 8024e0c:	fb03 2301 	mla	r3, r3, r1, r2
 8024e10:	b29b      	uxth	r3, r3
 8024e12:	1c5a      	adds	r2, r3, #1
 8024e14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e18:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024e1c:	fb12 f201 	smulbb	r2, r2, r1
 8024e20:	121b      	asrs	r3, r3, #8
 8024e22:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024e26:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8024e2a:	0c3f      	lsrs	r7, r7, #16
 8024e2c:	fb03 2300 	mla	r3, r3, r0, r2
 8024e30:	b29b      	uxth	r3, r3
 8024e32:	1c5a      	adds	r2, r3, #1
 8024e34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e38:	121b      	asrs	r3, r3, #8
 8024e3a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024e3e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024e42:	fb13 f101 	smulbb	r1, r3, r1
 8024e46:	fb07 1700 	mla	r7, r7, r0, r1
 8024e4a:	b2bf      	uxth	r7, r7
 8024e4c:	1c7b      	adds	r3, r7, #1
 8024e4e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024e52:	123f      	asrs	r7, r7, #8
 8024e54:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024e58:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024e5a:	f10e 0e03 	add.w	lr, lr, #3
 8024e5e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024e60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024e64:	441a      	add	r2, r3
 8024e66:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024e68:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024e6a:	441d      	add	r5, r3
 8024e6c:	e645      	b.n	8024afa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8024e6e:	2800      	cmp	r0, #0
 8024e70:	f43f aee6 	beq.w	8024c40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024e74:	5c79      	ldrb	r1, [r7, r1]
 8024e76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024e7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024e7c:	0e09      	lsrs	r1, r1, #24
 8024e7e:	9114      	str	r1, [sp, #80]	@ 0x50
 8024e80:	e6de      	b.n	8024c40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024e82:	b01f      	add	sp, #124	@ 0x7c
 8024e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024e88 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8024e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e8c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8024e90:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8024e94:	2d00      	cmp	r5, #0
 8024e96:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8024e9a:	fb05 700e 	mla	r0, r5, lr, r7
 8024e9e:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8024ea2:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8024ea6:	eb02 0800 	add.w	r8, r2, r0
 8024eaa:	f2c0 8105 	blt.w	80250b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8024eae:	45a9      	cmp	r9, r5
 8024eb0:	f340 8102 	ble.w	80250b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8024eb4:	2f00      	cmp	r7, #0
 8024eb6:	f2c0 80fd 	blt.w	80250b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8024eba:	45be      	cmp	lr, r7
 8024ebc:	f340 80fa 	ble.w	80250b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8024ec0:	5c12      	ldrb	r2, [r2, r0]
 8024ec2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024ec6:	1c7a      	adds	r2, r7, #1
 8024ec8:	f100 80f9 	bmi.w	80250be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8024ecc:	4596      	cmp	lr, r2
 8024ece:	f340 80f6 	ble.w	80250be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8024ed2:	2c00      	cmp	r4, #0
 8024ed4:	f000 80f5 	beq.w	80250c2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8024ed8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024edc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024ee0:	3501      	adds	r5, #1
 8024ee2:	f100 80f2 	bmi.w	80250ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8024ee6:	45a9      	cmp	r9, r5
 8024ee8:	f340 80ef 	ble.w	80250ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8024eec:	f1bc 0f00 	cmp.w	ip, #0
 8024ef0:	f000 80ee 	beq.w	80250d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8024ef4:	2f00      	cmp	r7, #0
 8024ef6:	f2c0 80e6 	blt.w	80250c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024efa:	45be      	cmp	lr, r7
 8024efc:	f340 80e3 	ble.w	80250c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024f00:	f818 200e 	ldrb.w	r2, [r8, lr]
 8024f04:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024f08:	3701      	adds	r7, #1
 8024f0a:	f100 80e4 	bmi.w	80250d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024f0e:	45be      	cmp	lr, r7
 8024f10:	f340 80e1 	ble.w	80250d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024f14:	2c00      	cmp	r4, #0
 8024f16:	f000 80e0 	beq.w	80250da <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8024f1a:	44c6      	add	lr, r8
 8024f1c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024f20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024f24:	b2a3      	uxth	r3, r4
 8024f26:	fa1f fc8c 	uxth.w	ip, ip
 8024f2a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024f2e:	fb0c fe03 	mul.w	lr, ip, r3
 8024f32:	011b      	lsls	r3, r3, #4
 8024f34:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024f38:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8024f3c:	eba3 070e 	sub.w	r7, r3, lr
 8024f40:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8024f44:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024f48:	fa1f f48c 	uxth.w	r4, ip
 8024f4c:	b2bf      	uxth	r7, r7
 8024f4e:	1b1b      	subs	r3, r3, r4
 8024f50:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024f54:	fb07 fc0a 	mul.w	ip, r7, sl
 8024f58:	b29b      	uxth	r3, r3
 8024f5a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024f5e:	9300      	str	r3, [sp, #0]
 8024f60:	fb04 cc09 	mla	ip, r4, r9, ip
 8024f64:	fb0e cc08 	mla	ip, lr, r8, ip
 8024f68:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024f6c:	9301      	str	r3, [sp, #4]
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	f000 809d 	beq.w	80250ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8024f74:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8024f78:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024f7c:	fb0b fc0c 	mul.w	ip, fp, ip
 8024f80:	fb0b f606 	mul.w	r6, fp, r6
 8024f84:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024f88:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024f8c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024f90:	44dc      	add	ip, fp
 8024f92:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8024f96:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024f9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f9e:	fb0a fb0b 	mul.w	fp, sl, fp
 8024fa2:	fb0a fa00 	mul.w	sl, sl, r0
 8024fa6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8024faa:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024fae:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024fb2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024fb6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024fba:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024fbe:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024fc2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024fc6:	0a36      	lsrs	r6, r6, #8
 8024fc8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fcc:	44dc      	add	ip, fp
 8024fce:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024fd2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024fd6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024fda:	fb09 fb0b 	mul.w	fp, r9, fp
 8024fde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024fe2:	fb09 f905 	mul.w	r9, r9, r5
 8024fe6:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024fea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024fee:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024ff2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024ff6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024ffa:	fb0c fc07 	mul.w	ip, ip, r7
 8024ffe:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8025002:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8025006:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802500a:	4458      	add	r0, fp
 802500c:	fb08 f505 	mul.w	r5, r8, r5
 8025010:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025014:	fb08 f802 	mul.w	r8, r8, r2
 8025018:	0a00      	lsrs	r0, r0, #8
 802501a:	0a2a      	lsrs	r2, r5, #8
 802501c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8025020:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025024:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025028:	4415      	add	r5, r2
 802502a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802502e:	0a2d      	lsrs	r5, r5, #8
 8025030:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025034:	9a00      	ldr	r2, [sp, #0]
 8025036:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802503a:	fb03 cc02 	mla	ip, r3, r2, ip
 802503e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025042:	9b01      	ldr	r3, [sp, #4]
 8025044:	fb05 c50e 	mla	r5, r5, lr, ip
 8025048:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802504c:	43db      	mvns	r3, r3
 802504e:	fb00 5004 	mla	r0, r0, r4, r5
 8025052:	b2db      	uxtb	r3, r3
 8025054:	0a00      	lsrs	r0, r0, #8
 8025056:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802505a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802505e:	4378      	muls	r0, r7
 8025060:	fb02 0006 	mla	r0, r2, r6, r0
 8025064:	780a      	ldrb	r2, [r1, #0]
 8025066:	fb0e 0e08 	mla	lr, lr, r8, r0
 802506a:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802506e:	fb04 e000 	mla	r0, r4, r0, lr
 8025072:	fb02 f403 	mul.w	r4, r2, r3
 8025076:	0a00      	lsrs	r0, r0, #8
 8025078:	1c62      	adds	r2, r4, #1
 802507a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802507e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025082:	4328      	orrs	r0, r5
 8025084:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025088:	700a      	strb	r2, [r1, #0]
 802508a:	784a      	ldrb	r2, [r1, #1]
 802508c:	435a      	muls	r2, r3
 802508e:	1c54      	adds	r4, r2, #1
 8025090:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8025094:	0a02      	lsrs	r2, r0, #8
 8025096:	0c00      	lsrs	r0, r0, #16
 8025098:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802509c:	704a      	strb	r2, [r1, #1]
 802509e:	788a      	ldrb	r2, [r1, #2]
 80250a0:	4353      	muls	r3, r2
 80250a2:	1c5a      	adds	r2, r3, #1
 80250a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80250a8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80250ac:	7088      	strb	r0, [r1, #2]
 80250ae:	b003      	add	sp, #12
 80250b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250b4:	2600      	movs	r6, #0
 80250b6:	e706      	b.n	8024ec6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80250b8:	2000      	movs	r0, #0
 80250ba:	4606      	mov	r6, r0
 80250bc:	e710      	b.n	8024ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80250be:	2000      	movs	r0, #0
 80250c0:	e70e      	b.n	8024ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80250c2:	4620      	mov	r0, r4
 80250c4:	e70c      	b.n	8024ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80250c6:	2500      	movs	r5, #0
 80250c8:	e71e      	b.n	8024f08 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80250ca:	2200      	movs	r2, #0
 80250cc:	4615      	mov	r5, r2
 80250ce:	e729      	b.n	8024f24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80250d0:	4662      	mov	r2, ip
 80250d2:	4665      	mov	r5, ip
 80250d4:	e726      	b.n	8024f24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80250d6:	2200      	movs	r2, #0
 80250d8:	e724      	b.n	8024f24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80250da:	4622      	mov	r2, r4
 80250dc:	e722      	b.n	8024f24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080250de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80250de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250e2:	b09b      	sub	sp, #108	@ 0x6c
 80250e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80250e8:	9218      	str	r2, [sp, #96]	@ 0x60
 80250ea:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80250ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80250ee:	9116      	str	r1, [sp, #88]	@ 0x58
 80250f0:	6850      	ldr	r0, [r2, #4]
 80250f2:	9307      	str	r3, [sp, #28]
 80250f4:	6812      	ldr	r2, [r2, #0]
 80250f6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80250f8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80250fc:	fb00 1303 	mla	r3, r0, r3, r1
 8025100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025104:	18d3      	adds	r3, r2, r3
 8025106:	930a      	str	r3, [sp, #40]	@ 0x28
 8025108:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802510a:	681b      	ldr	r3, [r3, #0]
 802510c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802510e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025110:	685e      	ldr	r6, [r3, #4]
 8025112:	3604      	adds	r6, #4
 8025114:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025116:	2b00      	cmp	r3, #0
 8025118:	dc03      	bgt.n	8025122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802511a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802511c:	2b00      	cmp	r3, #0
 802511e:	f340 834f 	ble.w	80257c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8025122:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025124:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025128:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802512c:	1e48      	subs	r0, r1, #1
 802512e:	1e57      	subs	r7, r2, #1
 8025130:	9b07      	ldr	r3, [sp, #28]
 8025132:	2b00      	cmp	r3, #0
 8025134:	f340 8178 	ble.w	8025428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025138:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802513a:	142b      	asrs	r3, r5, #16
 802513c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025140:	d406      	bmi.n	8025150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025142:	4584      	cmp	ip, r0
 8025144:	da04      	bge.n	8025150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025146:	2b00      	cmp	r3, #0
 8025148:	db02      	blt.n	8025150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802514a:	42bb      	cmp	r3, r7
 802514c:	f2c0 816d 	blt.w	802542a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8025150:	f11c 0c01 	adds.w	ip, ip, #1
 8025154:	f100 815b 	bmi.w	802540e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025158:	4561      	cmp	r1, ip
 802515a:	f2c0 8158 	blt.w	802540e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802515e:	3301      	adds	r3, #1
 8025160:	f100 8155 	bmi.w	802540e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025164:	429a      	cmp	r2, r3
 8025166:	f2c0 8152 	blt.w	802540e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802516a:	9b07      	ldr	r3, [sp, #28]
 802516c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802516e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025170:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025172:	2b00      	cmp	r3, #0
 8025174:	f340 8178 	ble.w	8025468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025178:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802517a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802517e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025182:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025186:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025188:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802518c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802518e:	141b      	asrs	r3, r3, #16
 8025190:	f100 81ba 	bmi.w	8025508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025194:	f101 38ff 	add.w	r8, r1, #4294967295
 8025198:	4543      	cmp	r3, r8
 802519a:	f280 81b5 	bge.w	8025508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802519e:	f1bc 0f00 	cmp.w	ip, #0
 80251a2:	f2c0 81b1 	blt.w	8025508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80251a6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80251aa:	45c4      	cmp	ip, r8
 80251ac:	f280 81ac 	bge.w	8025508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80251b0:	b209      	sxth	r1, r1
 80251b2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80251b4:	fb0c 3301 	mla	r3, ip, r1, r3
 80251b8:	eb04 0803 	add.w	r8, r4, r3
 80251bc:	5ce3      	ldrb	r3, [r4, r3]
 80251be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80251c2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80251c6:	2a00      	cmp	r2, #0
 80251c8:	f000 8193 	beq.w	80254f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80251cc:	f898 c001 	ldrb.w	ip, [r8, #1]
 80251d0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80251d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80251d6:	0e24      	lsrs	r4, r4, #24
 80251d8:	9412      	str	r4, [sp, #72]	@ 0x48
 80251da:	b178      	cbz	r0, 80251fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80251dc:	eb08 0c01 	add.w	ip, r8, r1
 80251e0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80251e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251e8:	9108      	str	r1, [sp, #32]
 80251ea:	0e09      	lsrs	r1, r1, #24
 80251ec:	9110      	str	r1, [sp, #64]	@ 0x40
 80251ee:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80251f2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251f6:	910c      	str	r1, [sp, #48]	@ 0x30
 80251f8:	0e09      	lsrs	r1, r1, #24
 80251fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80251fc:	b292      	uxth	r2, r2
 80251fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025200:	b280      	uxth	r0, r0
 8025202:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025204:	fb02 f900 	mul.w	r9, r2, r0
 8025208:	0112      	lsls	r2, r2, #4
 802520a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802520e:	eba2 0809 	sub.w	r8, r2, r9
 8025212:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025216:	b280      	uxth	r0, r0
 8025218:	fa1f f888 	uxth.w	r8, r8
 802521c:	1a12      	subs	r2, r2, r0
 802521e:	fb08 f101 	mul.w	r1, r8, r1
 8025222:	b292      	uxth	r2, r2
 8025224:	fb02 110e 	mla	r1, r2, lr, r1
 8025228:	fb00 1104 	mla	r1, r0, r4, r1
 802522c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802522e:	fb09 1104 	mla	r1, r9, r4, r1
 8025232:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025236:	2900      	cmp	r1, #0
 8025238:	f000 80de 	beq.w	80253f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802523c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025240:	d01b      	beq.n	802527a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8025242:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025246:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802524a:	fb0e fa0a 	mul.w	sl, lr, sl
 802524e:	fb0e fe03 	mul.w	lr, lr, r3
 8025252:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025256:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802525a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802525e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025262:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025266:	4453      	add	r3, sl
 8025268:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802526c:	0a1b      	lsrs	r3, r3, #8
 802526e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025272:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025276:	ea43 030c 	orr.w	r3, r3, ip
 802527a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802527c:	2cff      	cmp	r4, #255	@ 0xff
 802527e:	d021      	beq.n	80252c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025280:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025282:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025286:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025288:	fb04 fb0b 	mul.w	fp, r4, fp
 802528c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802528e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025292:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025294:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025298:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802529c:	fb04 fa0a 	mul.w	sl, r4, sl
 80252a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80252a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80252a8:	44de      	add	lr, fp
 80252aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80252ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80252ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80252be:	ea4e 040a 	orr.w	r4, lr, sl
 80252c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80252c4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80252c6:	2cff      	cmp	r4, #255	@ 0xff
 80252c8:	d021      	beq.n	802530e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80252ca:	9c08      	ldr	r4, [sp, #32]
 80252cc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80252d0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80252d2:	fb04 fb0b 	mul.w	fp, r4, fp
 80252d6:	9c08      	ldr	r4, [sp, #32]
 80252d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80252dc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80252de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80252e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80252e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80252ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80252ee:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80252f2:	44de      	add	lr, fp
 80252f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80252f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025300:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025304:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025308:	ea4e 040a 	orr.w	r4, lr, sl
 802530c:	9408      	str	r4, [sp, #32]
 802530e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025310:	2cff      	cmp	r4, #255	@ 0xff
 8025312:	d021      	beq.n	8025358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025314:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025316:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802531a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802531c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025320:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025322:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025326:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025328:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802532c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025330:	fb04 fa0a 	mul.w	sl, r4, sl
 8025334:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025338:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802533c:	44de      	add	lr, fp
 802533e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025342:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025346:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802534a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802534e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025352:	ea4e 040a 	orr.w	r4, lr, sl
 8025356:	940c      	str	r4, [sp, #48]	@ 0x30
 8025358:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802535a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802535e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025362:	43c9      	mvns	r1, r1
 8025364:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025368:	9c08      	ldr	r4, [sp, #32]
 802536a:	b2c9      	uxtb	r1, r1
 802536c:	fb08 fc0c 	mul.w	ip, r8, ip
 8025370:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025374:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025378:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802537a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802537e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025382:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025384:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025388:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802538c:	fb08 f80e 	mul.w	r8, r8, lr
 8025390:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025394:	fb02 8303 	mla	r3, r2, r3, r8
 8025398:	9a08      	ldr	r2, [sp, #32]
 802539a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802539e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80253a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80253a4:	fb00 330a 	mla	r3, r0, sl, r3
 80253a8:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80253ac:	fb09 3900 	mla	r9, r9, r0, r3
 80253b0:	783b      	ldrb	r3, [r7, #0]
 80253b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80253b6:	fb03 f201 	mul.w	r2, r3, r1
 80253ba:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80253be:	1c53      	adds	r3, r2, #1
 80253c0:	ea4c 0c09 	orr.w	ip, ip, r9
 80253c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253c8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80253cc:	703b      	strb	r3, [r7, #0]
 80253ce:	787b      	ldrb	r3, [r7, #1]
 80253d0:	434b      	muls	r3, r1
 80253d2:	1c5a      	adds	r2, r3, #1
 80253d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80253d8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80253dc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80253e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253e4:	707b      	strb	r3, [r7, #1]
 80253e6:	78bb      	ldrb	r3, [r7, #2]
 80253e8:	4359      	muls	r1, r3
 80253ea:	1c4b      	adds	r3, r1, #1
 80253ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80253f0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80253f4:	f887 c002 	strb.w	ip, [r7, #2]
 80253f8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80253fa:	3703      	adds	r7, #3
 80253fc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80253fe:	441a      	add	r2, r3
 8025400:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025402:	441d      	add	r5, r3
 8025404:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025406:	9225      	str	r2, [sp, #148]	@ 0x94
 8025408:	3b01      	subs	r3, #1
 802540a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802540c:	e6b0      	b.n	8025170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802540e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025410:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025412:	441c      	add	r4, r3
 8025414:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025416:	441d      	add	r5, r3
 8025418:	9b07      	ldr	r3, [sp, #28]
 802541a:	9425      	str	r4, [sp, #148]	@ 0x94
 802541c:	3b01      	subs	r3, #1
 802541e:	9307      	str	r3, [sp, #28]
 8025420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025422:	3303      	adds	r3, #3
 8025424:	930a      	str	r3, [sp, #40]	@ 0x28
 8025426:	e683      	b.n	8025130 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025428:	d026      	beq.n	8025478 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802542a:	9b07      	ldr	r3, [sp, #28]
 802542c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802542e:	3b01      	subs	r3, #1
 8025430:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025432:	fb00 4003 	mla	r0, r0, r3, r4
 8025436:	1400      	asrs	r0, r0, #16
 8025438:	f53f ae97 	bmi.w	802516a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802543c:	3901      	subs	r1, #1
 802543e:	4288      	cmp	r0, r1
 8025440:	f6bf ae93 	bge.w	802516a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025444:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8025446:	fb01 5303 	mla	r3, r1, r3, r5
 802544a:	141b      	asrs	r3, r3, #16
 802544c:	f53f ae8d 	bmi.w	802516a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025450:	3a01      	subs	r2, #1
 8025452:	4293      	cmp	r3, r2
 8025454:	f6bf ae89 	bge.w	802516a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802545a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802545e:	f103 0e03 	add.w	lr, r3, #3
 8025462:	f1bb 0f00 	cmp.w	fp, #0
 8025466:	dc6d      	bgt.n	8025544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8025468:	9b07      	ldr	r3, [sp, #28]
 802546a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802546e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025470:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025474:	4423      	add	r3, r4
 8025476:	930a      	str	r3, [sp, #40]	@ 0x28
 8025478:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802547a:	2b00      	cmp	r3, #0
 802547c:	f340 81a0 	ble.w	80257c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8025480:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025484:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025486:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802548a:	eeb0 6a62 	vmov.f32	s12, s5
 802548e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025492:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025496:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802549a:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 802549e:	eeb0 6a43 	vmov.f32	s12, s6
 80254a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80254a6:	ee16 5a10 	vmov	r5, s12
 80254aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80254ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80254b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80254b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80254ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80254be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80254c2:	ee12 2a90 	vmov	r2, s5
 80254c6:	eef0 2a47 	vmov.f32	s5, s14
 80254ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80254ce:	ee13 2a10 	vmov	r2, s6
 80254d2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80254d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80254d6:	eeb0 3a67 	vmov.f32	s6, s15
 80254da:	fb92 f3f3 	sdiv	r3, r2, r3
 80254de:	9328      	str	r3, [sp, #160]	@ 0xa0
 80254e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80254e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80254e4:	3b01      	subs	r3, #1
 80254e6:	9316      	str	r3, [sp, #88]	@ 0x58
 80254e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80254ea:	bf08      	it	eq
 80254ec:	4613      	moveq	r3, r2
 80254ee:	9307      	str	r3, [sp, #28]
 80254f0:	e610      	b.n	8025114 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80254f2:	2800      	cmp	r0, #0
 80254f4:	f43f ae82 	beq.w	80251fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80254f8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80254fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025500:	9108      	str	r1, [sp, #32]
 8025502:	0e09      	lsrs	r1, r1, #24
 8025504:	9110      	str	r1, [sp, #64]	@ 0x40
 8025506:	e679      	b.n	80251fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025508:	f113 0801 	adds.w	r8, r3, #1
 802550c:	f53f af74 	bmi.w	80253f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025510:	4541      	cmp	r1, r8
 8025512:	f6ff af71 	blt.w	80253f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025516:	f11c 0801 	adds.w	r8, ip, #1
 802551a:	f53f af6d 	bmi.w	80253f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802551e:	45c6      	cmp	lr, r8
 8025520:	f6ff af6a 	blt.w	80253f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025524:	b209      	sxth	r1, r1
 8025526:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802552a:	fa0f f38e 	sxth.w	r3, lr
 802552e:	9100      	str	r1, [sp, #0]
 8025530:	4639      	mov	r1, r7
 8025532:	9301      	str	r3, [sp, #4]
 8025534:	4633      	mov	r3, r6
 8025536:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802553a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802553c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802553e:	f7ff fca3 	bl	8024e88 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8025542:	e759      	b.n	80253f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025544:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025546:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802554a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802554c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025550:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025552:	1427      	asrs	r7, r4, #16
 8025554:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025556:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802555a:	142b      	asrs	r3, r5, #16
 802555c:	fb01 7303 	mla	r3, r1, r3, r7
 8025560:	18e7      	adds	r7, r4, r3
 8025562:	5ce3      	ldrb	r3, [r4, r3]
 8025564:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025568:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802556c:	2a00      	cmp	r2, #0
 802556e:	f000 811d 	beq.w	80257ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8025572:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025576:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802557a:	940d      	str	r4, [sp, #52]	@ 0x34
 802557c:	0e24      	lsrs	r4, r4, #24
 802557e:	9414      	str	r4, [sp, #80]	@ 0x50
 8025580:	b170      	cbz	r0, 80255a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025582:	eb07 0801 	add.w	r8, r7, r1
 8025586:	5c79      	ldrb	r1, [r7, r1]
 8025588:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802558c:	9109      	str	r1, [sp, #36]	@ 0x24
 802558e:	0e09      	lsrs	r1, r1, #24
 8025590:	9111      	str	r1, [sp, #68]	@ 0x44
 8025592:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025596:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802559a:	910e      	str	r1, [sp, #56]	@ 0x38
 802559c:	0e09      	lsrs	r1, r1, #24
 802559e:	9115      	str	r1, [sp, #84]	@ 0x54
 80255a0:	b292      	uxth	r2, r2
 80255a2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80255a4:	b280      	uxth	r0, r0
 80255a6:	fb02 f900 	mul.w	r9, r2, r0
 80255aa:	0112      	lsls	r2, r2, #4
 80255ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80255b0:	eba2 0809 	sub.w	r8, r2, r9
 80255b4:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80255b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80255ba:	b280      	uxth	r0, r0
 80255bc:	fa1f f888 	uxth.w	r8, r8
 80255c0:	1a09      	subs	r1, r1, r0
 80255c2:	fb08 f202 	mul.w	r2, r8, r2
 80255c6:	b289      	uxth	r1, r1
 80255c8:	fb01 220c 	mla	r2, r1, ip, r2
 80255cc:	fb00 2204 	mla	r2, r0, r4, r2
 80255d0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80255d2:	fb09 2204 	mla	r2, r9, r4, r2
 80255d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80255da:	2a00      	cmp	r2, #0
 80255dc:	f000 80db 	beq.w	8025796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80255e0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80255e4:	d019      	beq.n	802561a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80255e6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80255ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80255ee:	fb0c fa0a 	mul.w	sl, ip, sl
 80255f2:	fb0c fc03 	mul.w	ip, ip, r3
 80255f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80255fa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80255fe:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025602:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025606:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802560a:	4453      	add	r3, sl
 802560c:	0a3f      	lsrs	r7, r7, #8
 802560e:	0a1b      	lsrs	r3, r3, #8
 8025610:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025614:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025618:	433b      	orrs	r3, r7
 802561a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802561c:	2cff      	cmp	r4, #255	@ 0xff
 802561e:	d020      	beq.n	8025662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8025620:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025622:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025626:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025628:	4367      	muls	r7, r4
 802562a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802562c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025630:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025634:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025636:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802563a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802563e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025642:	44bc      	add	ip, r7
 8025644:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025648:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802564c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025650:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025654:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025658:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802565c:	ea4c 040a 	orr.w	r4, ip, sl
 8025660:	940d      	str	r4, [sp, #52]	@ 0x34
 8025662:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025664:	2cff      	cmp	r4, #255	@ 0xff
 8025666:	d020      	beq.n	80256aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8025668:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802566a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802566e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025670:	4367      	muls	r7, r4
 8025672:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025674:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025678:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802567c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802567e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025682:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025686:	fb04 fa0a 	mul.w	sl, r4, sl
 802568a:	44bc      	add	ip, r7
 802568c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025690:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025694:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025698:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802569c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80256a4:	ea4c 040a 	orr.w	r4, ip, sl
 80256a8:	9409      	str	r4, [sp, #36]	@ 0x24
 80256aa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80256ac:	2cff      	cmp	r4, #255	@ 0xff
 80256ae:	d020      	beq.n	80256f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80256b0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80256b2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80256b6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80256b8:	4367      	muls	r7, r4
 80256ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80256bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80256c0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80256c4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80256c6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80256ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80256ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80256d2:	44bc      	add	ip, r7
 80256d4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80256d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80256e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80256e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80256ec:	ea4c 040a 	orr.w	r4, ip, sl
 80256f0:	940e      	str	r4, [sp, #56]	@ 0x38
 80256f2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80256f4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80256f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80256fc:	43d2      	mvns	r2, r2
 80256fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025702:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025704:	b2d2      	uxtb	r2, r2
 8025706:	fb08 f707 	mul.w	r7, r8, r7
 802570a:	fb01 770c 	mla	r7, r1, ip, r7
 802570e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025712:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025714:	fb00 770c 	mla	r7, r0, ip, r7
 8025718:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802571c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802571e:	fb09 770c 	mla	r7, r9, ip, r7
 8025722:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025726:	fb08 f80c 	mul.w	r8, r8, ip
 802572a:	0a3f      	lsrs	r7, r7, #8
 802572c:	fb01 8303 	mla	r3, r1, r3, r8
 8025730:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025732:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025736:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802573a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802573c:	fb00 330a 	mla	r3, r0, sl, r3
 8025740:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8025744:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025748:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802574c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025750:	fb03 f102 	mul.w	r1, r3, r2
 8025754:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025758:	1c4b      	adds	r3, r1, #1
 802575a:	ea47 070c 	orr.w	r7, r7, ip
 802575e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025762:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025766:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802576a:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 802576e:	4353      	muls	r3, r2
 8025770:	1c59      	adds	r1, r3, #1
 8025772:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025776:	0a3b      	lsrs	r3, r7, #8
 8025778:	0c3f      	lsrs	r7, r7, #16
 802577a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802577e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025782:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025786:	435a      	muls	r2, r3
 8025788:	1c53      	adds	r3, r2, #1
 802578a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802578e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025792:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025796:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025798:	f10e 0e03 	add.w	lr, lr, #3
 802579c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802579e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80257a2:	441a      	add	r2, r3
 80257a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80257a6:	9225      	str	r2, [sp, #148]	@ 0x94
 80257a8:	441d      	add	r5, r3
 80257aa:	e65a      	b.n	8025462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80257ac:	2800      	cmp	r0, #0
 80257ae:	f43f aef7 	beq.w	80255a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80257b2:	5c79      	ldrb	r1, [r7, r1]
 80257b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80257b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80257ba:	0e09      	lsrs	r1, r1, #24
 80257bc:	9111      	str	r1, [sp, #68]	@ 0x44
 80257be:	e6ef      	b.n	80255a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80257c0:	b01b      	add	sp, #108	@ 0x6c
 80257c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080257c6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80257c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257ca:	b08d      	sub	sp, #52	@ 0x34
 80257cc:	468b      	mov	fp, r1
 80257ce:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 80257d2:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80257d6:	fb0c 5703 	mla	r7, ip, r3, r5
 80257da:	f1bc 0f00 	cmp.w	ip, #0
 80257de:	910b      	str	r1, [sp, #44]	@ 0x2c
 80257e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80257e4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 80257e8:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 80257ec:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 80257f0:	eb02 0607 	add.w	r6, r2, r7
 80257f4:	f89b 4000 	ldrb.w	r4, [fp]
 80257f8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80257fc:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8025800:	f2c0 80c1 	blt.w	8025986 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025804:	45e6      	cmp	lr, ip
 8025806:	f340 80be 	ble.w	8025986 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802580a:	2d00      	cmp	r5, #0
 802580c:	f2c0 80b7 	blt.w	802597e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025810:	42ab      	cmp	r3, r5
 8025812:	f340 80b4 	ble.w	802597e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025816:	5dd2      	ldrb	r2, [r2, r7]
 8025818:	9205      	str	r2, [sp, #20]
 802581a:	7872      	ldrb	r2, [r6, #1]
 802581c:	9206      	str	r2, [sp, #24]
 802581e:	78b2      	ldrb	r2, [r6, #2]
 8025820:	9207      	str	r2, [sp, #28]
 8025822:	1c6a      	adds	r2, r5, #1
 8025824:	f100 80b6 	bmi.w	8025994 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025828:	4293      	cmp	r3, r2
 802582a:	f340 80b3 	ble.w	8025994 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802582e:	f1b8 0f00 	cmp.w	r8, #0
 8025832:	f000 80af 	beq.w	8025994 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025836:	78f2      	ldrb	r2, [r6, #3]
 8025838:	9201      	str	r2, [sp, #4]
 802583a:	7932      	ldrb	r2, [r6, #4]
 802583c:	9202      	str	r2, [sp, #8]
 802583e:	7972      	ldrb	r2, [r6, #5]
 8025840:	9203      	str	r2, [sp, #12]
 8025842:	f11c 0c01 	adds.w	ip, ip, #1
 8025846:	f100 80ad 	bmi.w	80259a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802584a:	45e6      	cmp	lr, ip
 802584c:	f340 80aa 	ble.w	80259a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025850:	f1ba 0f00 	cmp.w	sl, #0
 8025854:	f000 80a6 	beq.w	80259a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025858:	2d00      	cmp	r5, #0
 802585a:	f2c0 809f 	blt.w	802599c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802585e:	42ab      	cmp	r3, r5
 8025860:	f340 809c 	ble.w	802599c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025864:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025868:	f816 9002 	ldrb.w	r9, [r6, r2]
 802586c:	2203      	movs	r2, #3
 802586e:	fb03 6c02 	mla	ip, r3, r2, r6
 8025872:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025876:	f89c e002 	ldrb.w	lr, [ip, #2]
 802587a:	9704      	str	r7, [sp, #16]
 802587c:	3501      	adds	r5, #1
 802587e:	f100 8098 	bmi.w	80259b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025882:	42ab      	cmp	r3, r5
 8025884:	f340 8095 	ble.w	80259b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025888:	f1b8 0f00 	cmp.w	r8, #0
 802588c:	f000 8091 	beq.w	80259b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025890:	f04f 0c03 	mov.w	ip, #3
 8025894:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8025898:	5cb5      	ldrb	r5, [r6, r2]
 802589a:	fb03 620c 	mla	r2, r3, ip, r6
 802589e:	fb03 630c 	mla	r3, r3, ip, r6
 80258a2:	7912      	ldrb	r2, [r2, #4]
 80258a4:	795e      	ldrb	r6, [r3, #5]
 80258a6:	fa1f f388 	uxth.w	r3, r8
 80258aa:	fa1f fc8a 	uxth.w	ip, sl
 80258ae:	fb03 f70c 	mul.w	r7, r3, ip
 80258b2:	011b      	lsls	r3, r3, #4
 80258b4:	9708      	str	r7, [sp, #32]
 80258b6:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80258ba:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 80258be:	1bdb      	subs	r3, r3, r7
 80258c0:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80258c4:	fa1f fc8c 	uxth.w	ip, ip
 80258c8:	b29b      	uxth	r3, r3
 80258ca:	9709      	str	r7, [sp, #36]	@ 0x24
 80258cc:	ebaa 0a0c 	sub.w	sl, sl, ip
 80258d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80258d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80258d4:	fa1f fa8a 	uxth.w	sl, sl
 80258d8:	ea6f 0807 	mvn.w	r8, r7
 80258dc:	9f01      	ldr	r7, [sp, #4]
 80258de:	435f      	muls	r7, r3
 80258e0:	9b05      	ldr	r3, [sp, #20]
 80258e2:	fa5f f888 	uxtb.w	r8, r8
 80258e6:	fb0a 7703 	mla	r7, sl, r3, r7
 80258ea:	9b08      	ldr	r3, [sp, #32]
 80258ec:	fb14 f408 	smulbb	r4, r4, r8
 80258f0:	fb0c 7709 	mla	r7, ip, r9, r7
 80258f4:	fb10 f008 	smulbb	r0, r0, r8
 80258f8:	fb11 f108 	smulbb	r1, r1, r8
 80258fc:	fb03 7705 	mla	r7, r3, r5, r7
 8025900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025902:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025906:	fb07 4703 	mla	r7, r7, r3, r4
 802590a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802590c:	b2bf      	uxth	r7, r7
 802590e:	1c7c      	adds	r4, r7, #1
 8025910:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025914:	1224      	asrs	r4, r4, #8
 8025916:	f88b 4000 	strb.w	r4, [fp]
 802591a:	9c02      	ldr	r4, [sp, #8]
 802591c:	435c      	muls	r4, r3
 802591e:	9b06      	ldr	r3, [sp, #24]
 8025920:	fb0a 4403 	mla	r4, sl, r3, r4
 8025924:	9b04      	ldr	r3, [sp, #16]
 8025926:	fb0c 4403 	mla	r4, ip, r3, r4
 802592a:	9b08      	ldr	r3, [sp, #32]
 802592c:	fb03 4402 	mla	r4, r3, r2, r4
 8025930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025934:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025938:	fb04 0403 	mla	r4, r4, r3, r0
 802593c:	9b03      	ldr	r3, [sp, #12]
 802593e:	435a      	muls	r2, r3
 8025940:	b2a4      	uxth	r4, r4
 8025942:	4613      	mov	r3, r2
 8025944:	9a07      	ldr	r2, [sp, #28]
 8025946:	1c60      	adds	r0, r4, #1
 8025948:	fb0a 3a02 	mla	sl, sl, r2, r3
 802594c:	9b08      	ldr	r3, [sp, #32]
 802594e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025952:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025956:	1224      	asrs	r4, r4, #8
 8025958:	fb03 c606 	mla	r6, r3, r6, ip
 802595c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802595e:	f88b 4001 	strb.w	r4, [fp, #1]
 8025962:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025966:	fb06 1103 	mla	r1, r6, r3, r1
 802596a:	b289      	uxth	r1, r1
 802596c:	1c4e      	adds	r6, r1, #1
 802596e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8025972:	1209      	asrs	r1, r1, #8
 8025974:	f88b 1002 	strb.w	r1, [fp, #2]
 8025978:	b00d      	add	sp, #52	@ 0x34
 802597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802597e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025982:	9405      	str	r4, [sp, #20]
 8025984:	e74d      	b.n	8025822 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8025986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802598a:	9401      	str	r4, [sp, #4]
 802598c:	9405      	str	r4, [sp, #20]
 802598e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025992:	e756      	b.n	8025842 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025998:	9401      	str	r4, [sp, #4]
 802599a:	e752      	b.n	8025842 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 802599c:	468e      	mov	lr, r1
 802599e:	9004      	str	r0, [sp, #16]
 80259a0:	46a1      	mov	r9, r4
 80259a2:	e76b      	b.n	802587c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80259a4:	460e      	mov	r6, r1
 80259a6:	4602      	mov	r2, r0
 80259a8:	4625      	mov	r5, r4
 80259aa:	468e      	mov	lr, r1
 80259ac:	9004      	str	r0, [sp, #16]
 80259ae:	46a1      	mov	r9, r4
 80259b0:	e779      	b.n	80258a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80259b2:	460e      	mov	r6, r1
 80259b4:	4602      	mov	r2, r0
 80259b6:	4625      	mov	r5, r4
 80259b8:	e775      	b.n	80258a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080259ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80259ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259be:	b09f      	sub	sp, #124	@ 0x7c
 80259c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80259c2:	9307      	str	r3, [sp, #28]
 80259c4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80259c6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80259ca:	901d      	str	r0, [sp, #116]	@ 0x74
 80259cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80259ce:	6850      	ldr	r0, [r2, #4]
 80259d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80259d2:	6812      	ldr	r2, [r2, #0]
 80259d4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80259d8:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 80259dc:	fb00 1303 	mla	r3, r0, r3, r1
 80259e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80259e4:	18d3      	adds	r3, r2, r3
 80259e6:	9308      	str	r3, [sp, #32]
 80259e8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80259ea:	681b      	ldr	r3, [r3, #0]
 80259ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80259ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259f0:	43db      	mvns	r3, r3
 80259f2:	b2db      	uxtb	r3, r3
 80259f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80259f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80259f8:	2b00      	cmp	r3, #0
 80259fa:	dc03      	bgt.n	8025a04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80259fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80259fe:	2b00      	cmp	r3, #0
 8025a00:	f340 81f5 	ble.w	8025dee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025a04:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025a06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025a0e:	1e48      	subs	r0, r1, #1
 8025a10:	1e54      	subs	r4, r2, #1
 8025a12:	9b07      	ldr	r3, [sp, #28]
 8025a14:	2b00      	cmp	r3, #0
 8025a16:	f340 80d5 	ble.w	8025bc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025a1a:	ea5f 452a 	movs.w	r5, sl, asr #16
 8025a1e:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025a22:	d406      	bmi.n	8025a32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025a24:	4285      	cmp	r5, r0
 8025a26:	da04      	bge.n	8025a32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025a28:	2b00      	cmp	r3, #0
 8025a2a:	db02      	blt.n	8025a32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025a2c:	42a3      	cmp	r3, r4
 8025a2e:	f2c0 80ca 	blt.w	8025bc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025a32:	3501      	adds	r5, #1
 8025a34:	f100 80bb 	bmi.w	8025bae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025a38:	42a9      	cmp	r1, r5
 8025a3a:	f2c0 80b8 	blt.w	8025bae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025a3e:	3301      	adds	r3, #1
 8025a40:	f100 80b5 	bmi.w	8025bae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025a44:	429a      	cmp	r2, r3
 8025a46:	f2c0 80b2 	blt.w	8025bae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025a4a:	9b07      	ldr	r3, [sp, #28]
 8025a4c:	9d08      	ldr	r5, [sp, #32]
 8025a4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025a50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025a52:	2b00      	cmp	r3, #0
 8025a54:	f340 80d6 	ble.w	8025c04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8025a58:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8025a5a:	ea4f 4428 	mov.w	r4, r8, asr #16
 8025a5e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025a60:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8025a64:	68c6      	ldr	r6, [r0, #12]
 8025a66:	ea5f 402a 	movs.w	r0, sl, asr #16
 8025a6a:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8025a6e:	689b      	ldr	r3, [r3, #8]
 8025a70:	f100 810f 	bmi.w	8025c92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025a74:	1e5f      	subs	r7, r3, #1
 8025a76:	42b8      	cmp	r0, r7
 8025a78:	f280 810b 	bge.w	8025c92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025a7c:	2c00      	cmp	r4, #0
 8025a7e:	f2c0 8108 	blt.w	8025c92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025a82:	1e77      	subs	r7, r6, #1
 8025a84:	42bc      	cmp	r4, r7
 8025a86:	f280 8104 	bge.w	8025c92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025a8a:	b21b      	sxth	r3, r3
 8025a8c:	fb04 0003 	mla	r0, r4, r3, r0
 8025a90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025a96:	1826      	adds	r6, r4, r0
 8025a98:	5c24      	ldrb	r4, [r4, r0]
 8025a9a:	78b7      	ldrb	r7, [r6, #2]
 8025a9c:	7870      	ldrb	r0, [r6, #1]
 8025a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8025aa0:	7977      	ldrb	r7, [r6, #5]
 8025aa2:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025aa6:	f896 c004 	ldrb.w	ip, [r6, #4]
 8025aaa:	9710      	str	r7, [sp, #64]	@ 0x40
 8025aac:	b1c9      	cbz	r1, 8025ae2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025aae:	f04f 0b03 	mov.w	fp, #3
 8025ab2:	f06f 0904 	mvn.w	r9, #4
 8025ab6:	3605      	adds	r6, #5
 8025ab8:	fb13 930b 	smlabb	r3, r3, fp, r9
 8025abc:	eb06 0b03 	add.w	fp, r6, r3
 8025ac0:	5cf3      	ldrb	r3, [r6, r3]
 8025ac2:	9311      	str	r3, [sp, #68]	@ 0x44
 8025ac4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8025ac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025aca:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8025ace:	9315      	str	r3, [sp, #84]	@ 0x54
 8025ad0:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8025ad4:	9312      	str	r3, [sp, #72]	@ 0x48
 8025ad6:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8025ada:	9314      	str	r3, [sp, #80]	@ 0x50
 8025adc:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8025ae0:	9316      	str	r3, [sp, #88]	@ 0x58
 8025ae2:	b292      	uxth	r2, r2
 8025ae4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8025ae6:	b289      	uxth	r1, r1
 8025ae8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8025aec:	fb02 f601 	mul.w	r6, r2, r1
 8025af0:	0112      	lsls	r2, r2, #4
 8025af2:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8025af6:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8025afa:	1b92      	subs	r2, r2, r6
 8025afc:	b289      	uxth	r1, r1
 8025afe:	b292      	uxth	r2, r2
 8025b00:	eba9 0901 	sub.w	r9, r9, r1
 8025b04:	fb02 fe0e 	mul.w	lr, r2, lr
 8025b08:	fa1f f989 	uxth.w	r9, r9
 8025b0c:	fb02 fc0c 	mul.w	ip, r2, ip
 8025b10:	fb09 e404 	mla	r4, r9, r4, lr
 8025b14:	f895 e000 	ldrb.w	lr, [r5]
 8025b18:	fb09 c000 	mla	r0, r9, r0, ip
 8025b1c:	fb01 4407 	mla	r4, r1, r7, r4
 8025b20:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8025b22:	fb06 4407 	mla	r4, r6, r7, r4
 8025b26:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025b28:	fb1e fe07 	smulbb	lr, lr, r7
 8025b2c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025b30:	fb04 e403 	mla	r4, r4, r3, lr
 8025b34:	b2a4      	uxth	r4, r4
 8025b36:	f104 0e01 	add.w	lr, r4, #1
 8025b3a:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8025b3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025b40:	fb01 0004 	mla	r0, r1, r4, r0
 8025b44:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b46:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025b4a:	fb06 0004 	mla	r0, r6, r4, r0
 8025b4e:	786c      	ldrb	r4, [r5, #1]
 8025b50:	f885 e000 	strb.w	lr, [r5]
 8025b54:	fb14 f407 	smulbb	r4, r4, r7
 8025b58:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025b5c:	fb00 4003 	mla	r0, r0, r3, r4
 8025b60:	b280      	uxth	r0, r0
 8025b62:	1c44      	adds	r4, r0, #1
 8025b64:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8025b68:	1200      	asrs	r0, r0, #8
 8025b6a:	7068      	strb	r0, [r5, #1]
 8025b6c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025b6e:	4342      	muls	r2, r0
 8025b70:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025b72:	fb09 2200 	mla	r2, r9, r0, r2
 8025b76:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025b78:	fb01 2100 	mla	r1, r1, r0, r2
 8025b7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025b7e:	fb06 1602 	mla	r6, r6, r2, r1
 8025b82:	78a9      	ldrb	r1, [r5, #2]
 8025b84:	fb11 f107 	smulbb	r1, r1, r7
 8025b88:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025b8c:	fb06 1303 	mla	r3, r6, r3, r1
 8025b90:	b29b      	uxth	r3, r3
 8025b92:	1c5e      	adds	r6, r3, #1
 8025b94:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8025b98:	121b      	asrs	r3, r3, #8
 8025b9a:	70ab      	strb	r3, [r5, #2]
 8025b9c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025b9e:	3503      	adds	r5, #3
 8025ba0:	449a      	add	sl, r3
 8025ba2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ba4:	4498      	add	r8, r3
 8025ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025ba8:	3b01      	subs	r3, #1
 8025baa:	930d      	str	r3, [sp, #52]	@ 0x34
 8025bac:	e750      	b.n	8025a50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025bae:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025bb0:	449a      	add	sl, r3
 8025bb2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025bb4:	4498      	add	r8, r3
 8025bb6:	9b07      	ldr	r3, [sp, #28]
 8025bb8:	3b01      	subs	r3, #1
 8025bba:	9307      	str	r3, [sp, #28]
 8025bbc:	9b08      	ldr	r3, [sp, #32]
 8025bbe:	3303      	adds	r3, #3
 8025bc0:	9308      	str	r3, [sp, #32]
 8025bc2:	e726      	b.n	8025a12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025bc4:	d026      	beq.n	8025c14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8025bc6:	9b07      	ldr	r3, [sp, #28]
 8025bc8:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8025bca:	3b01      	subs	r3, #1
 8025bcc:	fb00 a003 	mla	r0, r0, r3, sl
 8025bd0:	1400      	asrs	r0, r0, #16
 8025bd2:	f53f af3a 	bmi.w	8025a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bd6:	3901      	subs	r1, #1
 8025bd8:	4288      	cmp	r0, r1
 8025bda:	f6bf af36 	bge.w	8025a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bde:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025be0:	fb01 8303 	mla	r3, r1, r3, r8
 8025be4:	141b      	asrs	r3, r3, #16
 8025be6:	f53f af30 	bmi.w	8025a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bea:	3a01      	subs	r2, #1
 8025bec:	4293      	cmp	r3, r2
 8025bee:	f6bf af2c 	bge.w	8025a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bf2:	9b08      	ldr	r3, [sp, #32]
 8025bf4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8025bf8:	1cdd      	adds	r5, r3, #3
 8025bfa:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8025bfe:	f1bc 0f00 	cmp.w	ip, #0
 8025c02:	dc5f      	bgt.n	8025cc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8025c04:	9b07      	ldr	r3, [sp, #28]
 8025c06:	9a08      	ldr	r2, [sp, #32]
 8025c08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025c0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025c10:	441a      	add	r2, r3
 8025c12:	9208      	str	r2, [sp, #32]
 8025c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c16:	2b00      	cmp	r3, #0
 8025c18:	f340 80e9 	ble.w	8025dee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025c1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025c20:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c22:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c2a:	eef0 6a62 	vmov.f32	s13, s5
 8025c2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c32:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c3a:	ee16 aa90 	vmov	sl, s13
 8025c3e:	eef0 6a43 	vmov.f32	s13, s6
 8025c42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c46:	ee16 8a90 	vmov	r8, s13
 8025c4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025c52:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025c56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025c5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025c5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025c62:	ee12 2a90 	vmov	r2, s5
 8025c66:	eef0 2a47 	vmov.f32	s5, s14
 8025c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c6e:	ee13 2a10 	vmov	r2, s6
 8025c72:	932b      	str	r3, [sp, #172]	@ 0xac
 8025c74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c76:	eeb0 3a67 	vmov.f32	s6, s15
 8025c7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c7e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8025c80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025c84:	3b01      	subs	r3, #1
 8025c86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025c88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c8a:	bf08      	it	eq
 8025c8c:	4613      	moveq	r3, r2
 8025c8e:	9307      	str	r3, [sp, #28]
 8025c90:	e6b1      	b.n	80259f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025c92:	1c47      	adds	r7, r0, #1
 8025c94:	d482      	bmi.n	8025b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025c96:	42bb      	cmp	r3, r7
 8025c98:	db80      	blt.n	8025b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025c9a:	1c67      	adds	r7, r4, #1
 8025c9c:	f53f af7e 	bmi.w	8025b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025ca0:	42be      	cmp	r6, r7
 8025ca2:	f6ff af7b 	blt.w	8025b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025ca6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025ca8:	b236      	sxth	r6, r6
 8025caa:	9001      	str	r0, [sp, #4]
 8025cac:	b21b      	sxth	r3, r3
 8025cae:	9600      	str	r6, [sp, #0]
 8025cb0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025cb2:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8025cb6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8025cba:	4629      	mov	r1, r5
 8025cbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025cbe:	f7ff fd82 	bl	80257c6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8025cc2:	e76b      	b.n	8025b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025cc4:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8025cc6:	ea4f 402a 	mov.w	r0, sl, asr #16
 8025cca:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025cce:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8025cd2:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8025cd6:	ea4f 4128 	mov.w	r1, r8, asr #16
 8025cda:	fb07 0101 	mla	r1, r7, r1, r0
 8025cde:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025ce0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025ce4:	1844      	adds	r4, r0, r1
 8025ce6:	5c40      	ldrb	r0, [r0, r1]
 8025ce8:	78a6      	ldrb	r6, [r4, #2]
 8025cea:	7861      	ldrb	r1, [r4, #1]
 8025cec:	960f      	str	r6, [sp, #60]	@ 0x3c
 8025cee:	78e6      	ldrb	r6, [r4, #3]
 8025cf0:	910d      	str	r1, [sp, #52]	@ 0x34
 8025cf2:	9610      	str	r6, [sp, #64]	@ 0x40
 8025cf4:	f894 9004 	ldrb.w	r9, [r4, #4]
 8025cf8:	f894 b005 	ldrb.w	fp, [r4, #5]
 8025cfc:	b192      	cbz	r2, 8025d24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8025cfe:	f06f 0604 	mvn.w	r6, #4
 8025d02:	2103      	movs	r1, #3
 8025d04:	3405      	adds	r4, #5
 8025d06:	fb17 6701 	smlabb	r7, r7, r1, r6
 8025d0a:	19e6      	adds	r6, r4, r7
 8025d0c:	5de4      	ldrb	r4, [r4, r7]
 8025d0e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025d10:	7874      	ldrb	r4, [r6, #1]
 8025d12:	9419      	str	r4, [sp, #100]	@ 0x64
 8025d14:	78b4      	ldrb	r4, [r6, #2]
 8025d16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025d18:	78f4      	ldrb	r4, [r6, #3]
 8025d1a:	9418      	str	r4, [sp, #96]	@ 0x60
 8025d1c:	7934      	ldrb	r4, [r6, #4]
 8025d1e:	941a      	str	r4, [sp, #104]	@ 0x68
 8025d20:	7974      	ldrb	r4, [r6, #5]
 8025d22:	941c      	str	r4, [sp, #112]	@ 0x70
 8025d24:	b29b      	uxth	r3, r3
 8025d26:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025d28:	b292      	uxth	r2, r2
 8025d2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025d2c:	3503      	adds	r5, #3
 8025d2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025d32:	fb03 f402 	mul.w	r4, r3, r2
 8025d36:	011b      	lsls	r3, r3, #4
 8025d38:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8025d3c:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8025d40:	1b1b      	subs	r3, r3, r4
 8025d42:	b292      	uxth	r2, r2
 8025d44:	b29b      	uxth	r3, r3
 8025d46:	1ab6      	subs	r6, r6, r2
 8025d48:	435f      	muls	r7, r3
 8025d4a:	b2b6      	uxth	r6, r6
 8025d4c:	fb03 f909 	mul.w	r9, r3, r9
 8025d50:	fb03 fb0b 	mul.w	fp, r3, fp
 8025d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d56:	fb06 7000 	mla	r0, r6, r0, r7
 8025d5a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025d5c:	fb06 bb03 	mla	fp, r6, r3, fp
 8025d60:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025d62:	fb02 0007 	mla	r0, r2, r7, r0
 8025d66:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8025d68:	fb02 bb03 	mla	fp, r2, r3, fp
 8025d6c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025d6e:	fb04 0007 	mla	r0, r4, r7, r0
 8025d72:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8025d76:	fb17 f701 	smulbb	r7, r7, r1
 8025d7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025d7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025d80:	fb00 700e 	mla	r0, r0, lr, r7
 8025d84:	fb06 9101 	mla	r1, r6, r1, r9
 8025d88:	b280      	uxth	r0, r0
 8025d8a:	1c47      	adds	r7, r0, #1
 8025d8c:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8025d90:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025d92:	1200      	asrs	r0, r0, #8
 8025d94:	f805 0c06 	strb.w	r0, [r5, #-6]
 8025d98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8025d9a:	fb02 1100 	mla	r1, r2, r0, r1
 8025d9e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8025da0:	fb04 1100 	mla	r1, r4, r0, r1
 8025da4:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8025da8:	fb04 b403 	mla	r4, r4, r3, fp
 8025dac:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8025db0:	fb10 f007 	smulbb	r0, r0, r7
 8025db4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025db8:	fb13 f307 	smulbb	r3, r3, r7
 8025dbc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025dc0:	fb01 010e 	mla	r1, r1, lr, r0
 8025dc4:	fb04 340e 	mla	r4, r4, lr, r3
 8025dc8:	b289      	uxth	r1, r1
 8025dca:	b2a4      	uxth	r4, r4
 8025dcc:	1c48      	adds	r0, r1, #1
 8025dce:	1c63      	adds	r3, r4, #1
 8025dd0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025dd4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025dd8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025dda:	1209      	asrs	r1, r1, #8
 8025ddc:	1224      	asrs	r4, r4, #8
 8025dde:	449a      	add	sl, r3
 8025de0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025de2:	f805 1c05 	strb.w	r1, [r5, #-5]
 8025de6:	f805 4c04 	strb.w	r4, [r5, #-4]
 8025dea:	4498      	add	r8, r3
 8025dec:	e707      	b.n	8025bfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025dee:	b01f      	add	sp, #124	@ 0x7c
 8025df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025df4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8025df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025df8:	b087      	sub	sp, #28
 8025dfa:	780d      	ldrb	r5, [r1, #0]
 8025dfc:	784c      	ldrb	r4, [r1, #1]
 8025dfe:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8025e02:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8025e06:	9004      	str	r0, [sp, #16]
 8025e08:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8025e0c:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8025e10:	9005      	str	r0, [sp, #20]
 8025e12:	fb06 bc03 	mla	ip, r6, r3, fp
 8025e16:	2e00      	cmp	r6, #0
 8025e18:	7888      	ldrb	r0, [r1, #2]
 8025e1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025e1e:	eb02 090c 	add.w	r9, r2, ip
 8025e22:	f2c0 8084 	blt.w	8025f2e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025e26:	42b7      	cmp	r7, r6
 8025e28:	f340 8081 	ble.w	8025f2e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025e2c:	f1bb 0f00 	cmp.w	fp, #0
 8025e30:	db79      	blt.n	8025f26 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025e32:	455b      	cmp	r3, fp
 8025e34:	dd77      	ble.n	8025f26 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025e36:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025e3a:	9201      	str	r2, [sp, #4]
 8025e3c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025e40:	9202      	str	r2, [sp, #8]
 8025e42:	f899 2002 	ldrb.w	r2, [r9, #2]
 8025e46:	9203      	str	r2, [sp, #12]
 8025e48:	f11b 0201 	adds.w	r2, fp, #1
 8025e4c:	d476      	bmi.n	8025f3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025e4e:	4293      	cmp	r3, r2
 8025e50:	dd74      	ble.n	8025f3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025e52:	9a04      	ldr	r2, [sp, #16]
 8025e54:	2a00      	cmp	r2, #0
 8025e56:	d071      	beq.n	8025f3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025e58:	f899 8003 	ldrb.w	r8, [r9, #3]
 8025e5c:	f899 c004 	ldrb.w	ip, [r9, #4]
 8025e60:	f899 a005 	ldrb.w	sl, [r9, #5]
 8025e64:	3601      	adds	r6, #1
 8025e66:	d471      	bmi.n	8025f4c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025e68:	42b7      	cmp	r7, r6
 8025e6a:	dd6f      	ble.n	8025f4c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025e6c:	9a05      	ldr	r2, [sp, #20]
 8025e6e:	2a00      	cmp	r2, #0
 8025e70:	d06c      	beq.n	8025f4c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025e72:	f1bb 0f00 	cmp.w	fp, #0
 8025e76:	db65      	blt.n	8025f44 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8025e78:	455b      	cmp	r3, fp
 8025e7a:	dd63      	ble.n	8025f44 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8025e7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025e80:	f819 e002 	ldrb.w	lr, [r9, r2]
 8025e84:	2203      	movs	r2, #3
 8025e86:	fb03 9602 	mla	r6, r3, r2, r9
 8025e8a:	7877      	ldrb	r7, [r6, #1]
 8025e8c:	78b6      	ldrb	r6, [r6, #2]
 8025e8e:	f11b 0b01 	adds.w	fp, fp, #1
 8025e92:	d40c      	bmi.n	8025eae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8025e94:	455b      	cmp	r3, fp
 8025e96:	dd0a      	ble.n	8025eae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8025e98:	9a04      	ldr	r2, [sp, #16]
 8025e9a:	b142      	cbz	r2, 8025eae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8025e9c:	2203      	movs	r2, #3
 8025e9e:	fb13 2002 	smlabb	r0, r3, r2, r2
 8025ea2:	f819 5000 	ldrb.w	r5, [r9, r0]
 8025ea6:	fb03 9002 	mla	r0, r3, r2, r9
 8025eaa:	7904      	ldrb	r4, [r0, #4]
 8025eac:	7940      	ldrb	r0, [r0, #5]
 8025eae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8025eb2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8025eb6:	fb03 fb02 	mul.w	fp, r3, r2
 8025eba:	011b      	lsls	r3, r3, #4
 8025ebc:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8025ec0:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8025ec4:	eba3 030b 	sub.w	r3, r3, fp
 8025ec8:	b292      	uxth	r2, r2
 8025eca:	b29b      	uxth	r3, r3
 8025ecc:	eba9 0902 	sub.w	r9, r9, r2
 8025ed0:	9304      	str	r3, [sp, #16]
 8025ed2:	fa1f f989 	uxth.w	r9, r9
 8025ed6:	fb03 f808 	mul.w	r8, r3, r8
 8025eda:	9b01      	ldr	r3, [sp, #4]
 8025edc:	fb09 8803 	mla	r8, r9, r3, r8
 8025ee0:	9b04      	ldr	r3, [sp, #16]
 8025ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8025ee6:	9b02      	ldr	r3, [sp, #8]
 8025ee8:	fb02 880e 	mla	r8, r2, lr, r8
 8025eec:	fb09 cc03 	mla	ip, r9, r3, ip
 8025ef0:	9b04      	ldr	r3, [sp, #16]
 8025ef2:	fb0b 8805 	mla	r8, fp, r5, r8
 8025ef6:	fb02 c707 	mla	r7, r2, r7, ip
 8025efa:	fb03 f30a 	mul.w	r3, r3, sl
 8025efe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025f02:	fb0b 7404 	mla	r4, fp, r4, r7
 8025f06:	f881 8000 	strb.w	r8, [r1]
 8025f0a:	1224      	asrs	r4, r4, #8
 8025f0c:	704c      	strb	r4, [r1, #1]
 8025f0e:	9c03      	ldr	r4, [sp, #12]
 8025f10:	fb09 3904 	mla	r9, r9, r4, r3
 8025f14:	fb02 9206 	mla	r2, r2, r6, r9
 8025f18:	fb0b 2000 	mla	r0, fp, r0, r2
 8025f1c:	1200      	asrs	r0, r0, #8
 8025f1e:	7088      	strb	r0, [r1, #2]
 8025f20:	b007      	add	sp, #28
 8025f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f26:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025f2a:	9501      	str	r5, [sp, #4]
 8025f2c:	e78c      	b.n	8025e48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8025f2e:	4682      	mov	sl, r0
 8025f30:	46a4      	mov	ip, r4
 8025f32:	46a8      	mov	r8, r5
 8025f34:	9501      	str	r5, [sp, #4]
 8025f36:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025f3a:	e793      	b.n	8025e64 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025f3c:	4682      	mov	sl, r0
 8025f3e:	46a4      	mov	ip, r4
 8025f40:	46a8      	mov	r8, r5
 8025f42:	e78f      	b.n	8025e64 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025f44:	4606      	mov	r6, r0
 8025f46:	4627      	mov	r7, r4
 8025f48:	46ae      	mov	lr, r5
 8025f4a:	e7a0      	b.n	8025e8e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8025f4c:	4606      	mov	r6, r0
 8025f4e:	4627      	mov	r7, r4
 8025f50:	46ae      	mov	lr, r5
 8025f52:	e7ac      	b.n	8025eae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08025f54 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f58:	b09b      	sub	sp, #108	@ 0x6c
 8025f5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025f5c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025f5e:	9019      	str	r0, [sp, #100]	@ 0x64
 8025f60:	9109      	str	r1, [sp, #36]	@ 0x24
 8025f62:	6850      	ldr	r0, [r2, #4]
 8025f64:	9306      	str	r3, [sp, #24]
 8025f66:	6812      	ldr	r2, [r2, #0]
 8025f68:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8025f6c:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8025f70:	fb00 1303 	mla	r3, r0, r3, r1
 8025f74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025f78:	18d3      	adds	r3, r2, r3
 8025f7a:	9307      	str	r3, [sp, #28]
 8025f7c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f7e:	681b      	ldr	r3, [r3, #0]
 8025f80:	9308      	str	r3, [sp, #32]
 8025f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f84:	2b00      	cmp	r3, #0
 8025f86:	dc03      	bgt.n	8025f90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025f88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f8a:	2b00      	cmp	r3, #0
 8025f8c:	f340 81ab 	ble.w	80262e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025f90:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f9a:	1e48      	subs	r0, r1, #1
 8025f9c:	1e55      	subs	r5, r2, #1
 8025f9e:	9b06      	ldr	r3, [sp, #24]
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	f340 80b1 	ble.w	8026108 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8025fa6:	ea5f 462b 	movs.w	r6, fp, asr #16
 8025faa:	ea4f 4324 	mov.w	r3, r4, asr #16
 8025fae:	d406      	bmi.n	8025fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025fb0:	4286      	cmp	r6, r0
 8025fb2:	da04      	bge.n	8025fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	db02      	blt.n	8025fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025fb8:	42ab      	cmp	r3, r5
 8025fba:	f2c0 80a6 	blt.w	802610a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025fbe:	3601      	adds	r6, #1
 8025fc0:	f100 8097 	bmi.w	80260f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025fc4:	42b1      	cmp	r1, r6
 8025fc6:	f2c0 8094 	blt.w	80260f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025fca:	3301      	adds	r3, #1
 8025fcc:	f100 8091 	bmi.w	80260f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025fd0:	429a      	cmp	r2, r3
 8025fd2:	f2c0 808e 	blt.w	80260f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025fd6:	9b06      	ldr	r3, [sp, #24]
 8025fd8:	9e07      	ldr	r6, [sp, #28]
 8025fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8025fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025fde:	2b00      	cmp	r3, #0
 8025fe0:	f340 80b0 	ble.w	8026144 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8025fe4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8025fe6:	1425      	asrs	r5, r4, #16
 8025fe8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025fea:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025fee:	68c7      	ldr	r7, [r0, #12]
 8025ff0:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025ff4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025ff8:	689b      	ldr	r3, [r3, #8]
 8025ffa:	f100 80ea 	bmi.w	80261d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025ffe:	f103 3cff 	add.w	ip, r3, #4294967295
 8026002:	4560      	cmp	r0, ip
 8026004:	f280 80e5 	bge.w	80261d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026008:	2d00      	cmp	r5, #0
 802600a:	f2c0 80e2 	blt.w	80261d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802600e:	f107 3cff 	add.w	ip, r7, #4294967295
 8026012:	4565      	cmp	r5, ip
 8026014:	f280 80dd 	bge.w	80261d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026018:	b21b      	sxth	r3, r3
 802601a:	fb05 0003 	mla	r0, r5, r3, r0
 802601e:	9d08      	ldr	r5, [sp, #32]
 8026020:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026024:	182f      	adds	r7, r5, r0
 8026026:	5c2d      	ldrb	r5, [r5, r0]
 8026028:	7878      	ldrb	r0, [r7, #1]
 802602a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802602e:	900c      	str	r0, [sp, #48]	@ 0x30
 8026030:	f897 9003 	ldrb.w	r9, [r7, #3]
 8026034:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026038:	f897 a005 	ldrb.w	sl, [r7, #5]
 802603c:	b1c9      	cbz	r1, 8026072 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802603e:	f04f 0c03 	mov.w	ip, #3
 8026042:	f06f 0004 	mvn.w	r0, #4
 8026046:	3705      	adds	r7, #5
 8026048:	fb13 030c 	smlabb	r3, r3, ip, r0
 802604c:	eb07 0c03 	add.w	ip, r7, r3
 8026050:	5cfb      	ldrb	r3, [r7, r3]
 8026052:	930d      	str	r3, [sp, #52]	@ 0x34
 8026054:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026058:	930f      	str	r3, [sp, #60]	@ 0x3c
 802605a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802605e:	9311      	str	r3, [sp, #68]	@ 0x44
 8026060:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8026064:	930e      	str	r3, [sp, #56]	@ 0x38
 8026066:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802606a:	9310      	str	r3, [sp, #64]	@ 0x40
 802606c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8026070:	9312      	str	r3, [sp, #72]	@ 0x48
 8026072:	b292      	uxth	r2, r2
 8026074:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026076:	b289      	uxth	r1, r1
 8026078:	fb02 f301 	mul.w	r3, r2, r1
 802607c:	0112      	lsls	r2, r2, #4
 802607e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026082:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8026086:	1ad2      	subs	r2, r2, r3
 8026088:	b289      	uxth	r1, r1
 802608a:	b292      	uxth	r2, r2
 802608c:	1a7f      	subs	r7, r7, r1
 802608e:	fb02 f909 	mul.w	r9, r2, r9
 8026092:	b2bf      	uxth	r7, r7
 8026094:	fb02 f808 	mul.w	r8, r2, r8
 8026098:	fb02 fa0a 	mul.w	sl, r2, sl
 802609c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802609e:	fb07 9905 	mla	r9, r7, r5, r9
 80260a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80260a4:	fb07 8800 	mla	r8, r7, r0, r8
 80260a8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80260aa:	fb07 aa0e 	mla	sl, r7, lr, sl
 80260ae:	fb01 9905 	mla	r9, r1, r5, r9
 80260b2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80260b4:	fb01 8800 	mla	r8, r1, r0, r8
 80260b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80260ba:	fb01 a102 	mla	r1, r1, r2, sl
 80260be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80260c0:	fb03 9905 	mla	r9, r3, r5, r9
 80260c4:	fb03 8800 	mla	r8, r3, r0, r8
 80260c8:	fb03 1302 	mla	r3, r3, r2, r1
 80260cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80260d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80260d4:	121b      	asrs	r3, r3, #8
 80260d6:	f886 9000 	strb.w	r9, [r6]
 80260da:	f886 8001 	strb.w	r8, [r6, #1]
 80260de:	70b3      	strb	r3, [r6, #2]
 80260e0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80260e2:	3603      	adds	r6, #3
 80260e4:	449b      	add	fp, r3
 80260e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80260e8:	441c      	add	r4, r3
 80260ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80260ec:	3b01      	subs	r3, #1
 80260ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80260f0:	e774      	b.n	8025fdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80260f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80260f4:	449b      	add	fp, r3
 80260f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80260f8:	441c      	add	r4, r3
 80260fa:	9b06      	ldr	r3, [sp, #24]
 80260fc:	3b01      	subs	r3, #1
 80260fe:	9306      	str	r3, [sp, #24]
 8026100:	9b07      	ldr	r3, [sp, #28]
 8026102:	3303      	adds	r3, #3
 8026104:	9307      	str	r3, [sp, #28]
 8026106:	e74a      	b.n	8025f9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026108:	d024      	beq.n	8026154 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802610a:	9b06      	ldr	r3, [sp, #24]
 802610c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802610e:	3b01      	subs	r3, #1
 8026110:	fb00 b003 	mla	r0, r0, r3, fp
 8026114:	1400      	asrs	r0, r0, #16
 8026116:	f53f af5e 	bmi.w	8025fd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802611a:	3901      	subs	r1, #1
 802611c:	4288      	cmp	r0, r1
 802611e:	f6bf af5a 	bge.w	8025fd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026122:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8026124:	fb01 4303 	mla	r3, r1, r3, r4
 8026128:	141b      	asrs	r3, r3, #16
 802612a:	f53f af54 	bmi.w	8025fd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802612e:	3a01      	subs	r2, #1
 8026130:	4293      	cmp	r3, r2
 8026132:	f6bf af50 	bge.w	8025fd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026136:	9b07      	ldr	r3, [sp, #28]
 8026138:	f8dd e018 	ldr.w	lr, [sp, #24]
 802613c:	1cde      	adds	r6, r3, #3
 802613e:	f1be 0f00 	cmp.w	lr, #0
 8026142:	dc5f      	bgt.n	8026204 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026144:	9b06      	ldr	r3, [sp, #24]
 8026146:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802614a:	9b07      	ldr	r3, [sp, #28]
 802614c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026150:	4423      	add	r3, r4
 8026152:	9307      	str	r3, [sp, #28]
 8026154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026156:	2b00      	cmp	r3, #0
 8026158:	f340 80c5 	ble.w	80262e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802615c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026160:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026162:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026166:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802616a:	eef0 6a62 	vmov.f32	s13, s5
 802616e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026172:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026176:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802617a:	ee16 ba90 	vmov	fp, s13
 802617e:	eef0 6a43 	vmov.f32	s13, s6
 8026182:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026186:	ee16 4a90 	vmov	r4, s13
 802618a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802618e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026192:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026196:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802619a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802619e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80261a2:	ee12 2a90 	vmov	r2, s5
 80261a6:	eef0 2a47 	vmov.f32	s5, s14
 80261aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80261ae:	ee13 2a10 	vmov	r2, s6
 80261b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80261b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80261b6:	eeb0 3a67 	vmov.f32	s6, s15
 80261ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80261be:	9328      	str	r3, [sp, #160]	@ 0xa0
 80261c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80261c4:	3b01      	subs	r3, #1
 80261c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80261c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80261ca:	bf08      	it	eq
 80261cc:	4613      	moveq	r3, r2
 80261ce:	9306      	str	r3, [sp, #24]
 80261d0:	e6d7      	b.n	8025f82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80261d2:	f110 0c01 	adds.w	ip, r0, #1
 80261d6:	d483      	bmi.n	80260e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80261d8:	4563      	cmp	r3, ip
 80261da:	db81      	blt.n	80260e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80261dc:	f115 0c01 	adds.w	ip, r5, #1
 80261e0:	f53f af7e 	bmi.w	80260e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80261e4:	4567      	cmp	r7, ip
 80261e6:	f6ff af7b 	blt.w	80260e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80261ea:	b23f      	sxth	r7, r7
 80261ec:	b21b      	sxth	r3, r3
 80261ee:	9700      	str	r7, [sp, #0]
 80261f0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80261f4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80261f8:	9a08      	ldr	r2, [sp, #32]
 80261fa:	4631      	mov	r1, r6
 80261fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80261fe:	f7ff fdf9 	bl	8025df4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8026202:	e76d      	b.n	80260e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026204:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026206:	ea4f 402b 	mov.w	r0, fp, asr #16
 802620a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802620e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026212:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8026216:	1421      	asrs	r1, r4, #16
 8026218:	930a      	str	r3, [sp, #40]	@ 0x28
 802621a:	fb0c 0101 	mla	r1, ip, r1, r0
 802621e:	9808      	ldr	r0, [sp, #32]
 8026220:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026224:	1845      	adds	r5, r0, r1
 8026226:	5c40      	ldrb	r0, [r0, r1]
 8026228:	796f      	ldrb	r7, [r5, #5]
 802622a:	7869      	ldrb	r1, [r5, #1]
 802622c:	f895 8002 	ldrb.w	r8, [r5, #2]
 8026230:	f895 a003 	ldrb.w	sl, [r5, #3]
 8026234:	f895 9004 	ldrb.w	r9, [r5, #4]
 8026238:	970c      	str	r7, [sp, #48]	@ 0x30
 802623a:	b1a2      	cbz	r2, 8026266 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802623c:	2703      	movs	r7, #3
 802623e:	f06f 0304 	mvn.w	r3, #4
 8026242:	3505      	adds	r5, #5
 8026244:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8026248:	eb05 070c 	add.w	r7, r5, ip
 802624c:	f815 500c 	ldrb.w	r5, [r5, ip]
 8026250:	9513      	str	r5, [sp, #76]	@ 0x4c
 8026252:	787d      	ldrb	r5, [r7, #1]
 8026254:	9515      	str	r5, [sp, #84]	@ 0x54
 8026256:	78bd      	ldrb	r5, [r7, #2]
 8026258:	9517      	str	r5, [sp, #92]	@ 0x5c
 802625a:	78fd      	ldrb	r5, [r7, #3]
 802625c:	9514      	str	r5, [sp, #80]	@ 0x50
 802625e:	793d      	ldrb	r5, [r7, #4]
 8026260:	9516      	str	r5, [sp, #88]	@ 0x58
 8026262:	797d      	ldrb	r5, [r7, #5]
 8026264:	9518      	str	r5, [sp, #96]	@ 0x60
 8026266:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802626a:	b292      	uxth	r2, r2
 802626c:	3603      	adds	r6, #3
 802626e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026272:	fb03 f502 	mul.w	r5, r3, r2
 8026276:	011b      	lsls	r3, r3, #4
 8026278:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802627c:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8026280:	1b5b      	subs	r3, r3, r5
 8026282:	b292      	uxth	r2, r2
 8026284:	b29b      	uxth	r3, r3
 8026286:	1abf      	subs	r7, r7, r2
 8026288:	fb03 f909 	mul.w	r9, r3, r9
 802628c:	b2bf      	uxth	r7, r7
 802628e:	fb03 fa0a 	mul.w	sl, r3, sl
 8026292:	fb07 9901 	mla	r9, r7, r1, r9
 8026296:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026298:	fb07 aa00 	mla	sl, r7, r0, sl
 802629c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802629e:	fb02 9901 	mla	r9, r2, r1, r9
 80262a2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80262a4:	fb02 aa00 	mla	sl, r2, r0, sl
 80262a8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80262aa:	fb05 9901 	mla	r9, r5, r1, r9
 80262ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80262b0:	fb05 aa00 	mla	sl, r5, r0, sl
 80262b4:	434b      	muls	r3, r1
 80262b6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80262b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80262bc:	fb07 3308 	mla	r3, r7, r8, r3
 80262c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80262c4:	f806 ac06 	strb.w	sl, [r6, #-6]
 80262c8:	fb02 3201 	mla	r2, r2, r1, r3
 80262cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80262ce:	f806 9c05 	strb.w	r9, [r6, #-5]
 80262d2:	fb05 2503 	mla	r5, r5, r3, r2
 80262d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80262d8:	122d      	asrs	r5, r5, #8
 80262da:	449b      	add	fp, r3
 80262dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80262de:	f806 5c04 	strb.w	r5, [r6, #-4]
 80262e2:	441c      	add	r4, r3
 80262e4:	e72b      	b.n	802613e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80262e6:	b01b      	add	sp, #108	@ 0x6c
 80262e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080262ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80262ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262f0:	b087      	sub	sp, #28
 80262f2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80262f6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80262fa:	fb05 7003 	mla	r0, r5, r3, r7
 80262fe:	2d00      	cmp	r5, #0
 8026300:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8026304:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8026308:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802630c:	f2c0 811f 	blt.w	802654e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026310:	45a8      	cmp	r8, r5
 8026312:	f340 811c 	ble.w	802654e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026316:	2f00      	cmp	r7, #0
 8026318:	f2c0 8117 	blt.w	802654a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802631c:	42bb      	cmp	r3, r7
 802631e:	f340 8114 	ble.w	802654a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8026322:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026326:	1c7a      	adds	r2, r7, #1
 8026328:	f100 8114 	bmi.w	8026554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802632c:	4293      	cmp	r3, r2
 802632e:	f340 8111 	ble.w	8026554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8026332:	2c00      	cmp	r4, #0
 8026334:	f000 8110 	beq.w	8026558 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8026338:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802633c:	3501      	adds	r5, #1
 802633e:	f100 810f 	bmi.w	8026560 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026342:	45a8      	cmp	r8, r5
 8026344:	f340 810c 	ble.w	8026560 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026348:	f1be 0f00 	cmp.w	lr, #0
 802634c:	f000 810b 	beq.w	8026566 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8026350:	2f00      	cmp	r7, #0
 8026352:	f2c0 8103 	blt.w	802655c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8026356:	42bb      	cmp	r3, r7
 8026358:	f340 8100 	ble.w	802655c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802635c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8026360:	3701      	adds	r7, #1
 8026362:	f100 8103 	bmi.w	802656c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8026366:	42bb      	cmp	r3, r7
 8026368:	f340 8100 	ble.w	802656c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802636c:	2c00      	cmp	r4, #0
 802636e:	f000 80ff 	beq.w	8026570 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8026372:	3301      	adds	r3, #1
 8026374:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026378:	fa1f fc84 	uxth.w	ip, r4
 802637c:	fa1f fe8e 	uxth.w	lr, lr
 8026380:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026384:	fb0c f90e 	mul.w	r9, ip, lr
 8026388:	0e13      	lsrs	r3, r2, #24
 802638a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802638e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8026392:	9302      	str	r3, [sp, #8]
 8026394:	ebac 0709 	sub.w	r7, ip, r9
 8026398:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802639c:	fa1f f48e 	uxth.w	r4, lr
 80263a0:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80263a4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80263a8:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80263ac:	fb0a fe0e 	mul.w	lr, sl, lr
 80263b0:	1b1b      	subs	r3, r3, r4
 80263b2:	fb0a f606 	mul.w	r6, sl, r6
 80263b6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80263ba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80263be:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80263c2:	b29b      	uxth	r3, r3
 80263c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80263c8:	b2bf      	uxth	r7, r7
 80263ca:	9301      	str	r3, [sp, #4]
 80263cc:	44e6      	add	lr, ip
 80263ce:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80263d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263d6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80263da:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80263de:	9303      	str	r3, [sp, #12]
 80263e0:	0a33      	lsrs	r3, r6, #8
 80263e2:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80263e6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80263ea:	9304      	str	r3, [sp, #16]
 80263ec:	fb0b f606 	mul.w	r6, fp, r6
 80263f0:	fb0b f000 	mul.w	r0, fp, r0
 80263f4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80263f8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80263fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026400:	44b6      	add	lr, r6
 8026402:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8026406:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802640a:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802640e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026412:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026416:	fb08 f606 	mul.w	r6, r8, r6
 802641a:	0a03      	lsrs	r3, r0, #8
 802641c:	fb08 f505 	mul.w	r5, r8, r5
 8026420:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026424:	0a30      	lsrs	r0, r6, #8
 8026426:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802642a:	9305      	str	r3, [sp, #20]
 802642c:	0e13      	lsrs	r3, r2, #24
 802642e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026432:	fb0e fe07 	mul.w	lr, lr, r7
 8026436:	4430      	add	r0, r6
 8026438:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802643c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8026440:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8026444:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026448:	0a00      	lsrs	r0, r0, #8
 802644a:	435e      	muls	r6, r3
 802644c:	0a2d      	lsrs	r5, r5, #8
 802644e:	435a      	muls	r2, r3
 8026450:	9b03      	ldr	r3, [sp, #12]
 8026452:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8026456:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802645a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802645e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026462:	44b4      	add	ip, r6
 8026464:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8026468:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802646c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026470:	9e01      	ldr	r6, [sp, #4]
 8026472:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026476:	fb03 ee06 	mla	lr, r3, r6, lr
 802647a:	9b04      	ldr	r3, [sp, #16]
 802647c:	0a12      	lsrs	r2, r2, #8
 802647e:	fb0c ee09 	mla	lr, ip, r9, lr
 8026482:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8026486:	9b05      	ldr	r3, [sp, #20]
 8026488:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802648c:	fb00 ee04 	mla	lr, r0, r4, lr
 8026490:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026494:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8026498:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802649c:	9b01      	ldr	r3, [sp, #4]
 802649e:	fb07 fe0e 	mul.w	lr, r7, lr
 80264a2:	fb07 f70b 	mul.w	r7, r7, fp
 80264a6:	fb03 ee06 	mla	lr, r3, r6, lr
 80264aa:	fb03 730a 	mla	r3, r3, sl, r7
 80264ae:	fb09 e202 	mla	r2, r9, r2, lr
 80264b2:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80264b6:	fb04 2e0e 	mla	lr, r4, lr, r2
 80264ba:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80264be:	fb04 3408 	mla	r4, r4, r8, r3
 80264c2:	9b02      	ldr	r3, [sp, #8]
 80264c4:	b292      	uxth	r2, r2
 80264c6:	fb09 4903 	mla	r9, r9, r3, r4
 80264ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264ce:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80264d2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80264d6:	fb09 f902 	mul.w	r9, r9, r2
 80264da:	ea40 0e0e 	orr.w	lr, r0, lr
 80264de:	f109 0301 	add.w	r3, r9, #1
 80264e2:	fa5f f08e 	uxtb.w	r0, lr
 80264e6:	fb10 f002 	smulbb	r0, r0, r2
 80264ea:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80264ee:	780b      	ldrb	r3, [r1, #0]
 80264f0:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80264f4:	fa5f f989 	uxtb.w	r9, r9
 80264f8:	fb03 0309 	mla	r3, r3, r9, r0
 80264fc:	b29b      	uxth	r3, r3
 80264fe:	1c58      	adds	r0, r3, #1
 8026500:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026504:	7848      	ldrb	r0, [r1, #1]
 8026506:	fb10 f009 	smulbb	r0, r0, r9
 802650a:	121b      	asrs	r3, r3, #8
 802650c:	700b      	strb	r3, [r1, #0]
 802650e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8026512:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026516:	fb03 0302 	mla	r3, r3, r2, r0
 802651a:	b29b      	uxth	r3, r3
 802651c:	1c58      	adds	r0, r3, #1
 802651e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026522:	121b      	asrs	r3, r3, #8
 8026524:	704b      	strb	r3, [r1, #1]
 8026526:	788b      	ldrb	r3, [r1, #2]
 8026528:	fb13 f909 	smulbb	r9, r3, r9
 802652c:	fb0e 9e02 	mla	lr, lr, r2, r9
 8026530:	fa1f fe8e 	uxth.w	lr, lr
 8026534:	f10e 0301 	add.w	r3, lr, #1
 8026538:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802653c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026540:	f881 e002 	strb.w	lr, [r1, #2]
 8026544:	b007      	add	sp, #28
 8026546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802654a:	2600      	movs	r6, #0
 802654c:	e6eb      	b.n	8026326 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802654e:	2000      	movs	r0, #0
 8026550:	4606      	mov	r6, r0
 8026552:	e6f3      	b.n	802633c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026554:	2000      	movs	r0, #0
 8026556:	e6f1      	b.n	802633c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026558:	4620      	mov	r0, r4
 802655a:	e6ef      	b.n	802633c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802655c:	2500      	movs	r5, #0
 802655e:	e6ff      	b.n	8026360 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8026560:	2200      	movs	r2, #0
 8026562:	4615      	mov	r5, r2
 8026564:	e708      	b.n	8026378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026566:	4672      	mov	r2, lr
 8026568:	4675      	mov	r5, lr
 802656a:	e705      	b.n	8026378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802656c:	2200      	movs	r2, #0
 802656e:	e703      	b.n	8026378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026570:	4622      	mov	r2, r4
 8026572:	e701      	b.n	8026378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08026574 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026578:	b09d      	sub	sp, #116	@ 0x74
 802657a:	9219      	str	r2, [sp, #100]	@ 0x64
 802657c:	9307      	str	r3, [sp, #28]
 802657e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026580:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8026584:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026586:	931a      	str	r3, [sp, #104]	@ 0x68
 8026588:	6850      	ldr	r0, [r2, #4]
 802658a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802658c:	6812      	ldr	r2, [r2, #0]
 802658e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8026592:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8026596:	fb00 1303 	mla	r3, r0, r3, r1
 802659a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802659e:	18d3      	adds	r3, r2, r3
 80265a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80265a2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80265a8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80265ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80265ae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	dc03      	bgt.n	80265bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80265b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80265b6:	2b00      	cmp	r3, #0
 80265b8:	f340 8368 	ble.w	8026c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80265bc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80265be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80265c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80265c6:	1e48      	subs	r0, r1, #1
 80265c8:	1e57      	subs	r7, r2, #1
 80265ca:	9b07      	ldr	r3, [sp, #28]
 80265cc:	2b00      	cmp	r3, #0
 80265ce:	f340 8187 	ble.w	80268e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80265d2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80265d6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80265da:	d406      	bmi.n	80265ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80265dc:	4584      	cmp	ip, r0
 80265de:	da04      	bge.n	80265ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	db02      	blt.n	80265ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80265e4:	42bb      	cmp	r3, r7
 80265e6:	f2c0 817c 	blt.w	80268e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80265ea:	f11c 0c01 	adds.w	ip, ip, #1
 80265ee:	f100 816c 	bmi.w	80268ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80265f2:	4561      	cmp	r1, ip
 80265f4:	f2c0 8169 	blt.w	80268ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80265f8:	3301      	adds	r3, #1
 80265fa:	f100 8166 	bmi.w	80268ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80265fe:	429a      	cmp	r2, r3
 8026600:	f2c0 8163 	blt.w	80268ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026604:	9b07      	ldr	r3, [sp, #28]
 8026606:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026608:	9318      	str	r3, [sp, #96]	@ 0x60
 802660a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802660c:	2b00      	cmp	r3, #0
 802660e:	f340 8186 	ble.w	802691e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026612:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026614:	142a      	asrs	r2, r5, #16
 8026616:	ea4f 4026 	mov.w	r0, r6, asr #16
 802661a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802661e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026622:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026626:	f100 81cb 	bmi.w	80269c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802662a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802662e:	4542      	cmp	r2, r8
 8026630:	f280 81c6 	bge.w	80269c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026634:	2800      	cmp	r0, #0
 8026636:	f2c0 81c3 	blt.w	80269c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802663a:	f103 38ff 	add.w	r8, r3, #4294967295
 802663e:	4540      	cmp	r0, r8
 8026640:	f280 81be 	bge.w	80269c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026644:	fa0f f38e 	sxth.w	r3, lr
 8026648:	fb00 2203 	mla	r2, r0, r3, r2
 802664c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802664e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8026652:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8026656:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802665a:	2900      	cmp	r1, #0
 802665c:	f000 81a6 	beq.w	80269ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8026660:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026664:	900c      	str	r0, [sp, #48]	@ 0x30
 8026666:	0e00      	lsrs	r0, r0, #24
 8026668:	9013      	str	r0, [sp, #76]	@ 0x4c
 802666a:	f1bc 0f00 	cmp.w	ip, #0
 802666e:	d00f      	beq.n	8026690 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026674:	3b01      	subs	r3, #1
 8026676:	009b      	lsls	r3, r3, #2
 8026678:	3304      	adds	r3, #4
 802667a:	eb08 0003 	add.w	r0, r8, r3
 802667e:	f858 3003 	ldr.w	r3, [r8, r3]
 8026682:	9308      	str	r3, [sp, #32]
 8026684:	0e1b      	lsrs	r3, r3, #24
 8026686:	9311      	str	r3, [sp, #68]	@ 0x44
 8026688:	6843      	ldr	r3, [r0, #4]
 802668a:	930d      	str	r3, [sp, #52]	@ 0x34
 802668c:	0e1b      	lsrs	r3, r3, #24
 802668e:	9314      	str	r3, [sp, #80]	@ 0x50
 8026690:	b289      	uxth	r1, r1
 8026692:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026694:	fa1f fc8c 	uxth.w	ip, ip
 8026698:	0108      	lsls	r0, r1, #4
 802669a:	fb01 f90c 	mul.w	r9, r1, ip
 802669e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80266a2:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80266a6:	eba0 0809 	sub.w	r8, r0, r9
 80266aa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80266ac:	fa1f f18c 	uxth.w	r1, ip
 80266b0:	fa1f f888 	uxth.w	r8, r8
 80266b4:	1a5b      	subs	r3, r3, r1
 80266b6:	fb08 f000 	mul.w	r0, r8, r0
 80266ba:	b29b      	uxth	r3, r3
 80266bc:	fb03 000e 	mla	r0, r3, lr, r0
 80266c0:	fb01 0004 	mla	r0, r1, r4, r0
 80266c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80266c6:	fb09 0004 	mla	r0, r9, r4, r0
 80266ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80266ce:	2800      	cmp	r0, #0
 80266d0:	f000 80f2 	beq.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80266d4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80266d8:	d01b      	beq.n	8026712 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80266da:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80266de:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80266e2:	fb0e fa0a 	mul.w	sl, lr, sl
 80266e6:	fb0e fe02 	mul.w	lr, lr, r2
 80266ea:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80266ee:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80266f2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80266f6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80266fa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80266fe:	4452      	add	r2, sl
 8026700:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026704:	0a12      	lsrs	r2, r2, #8
 8026706:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802670a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802670e:	ea42 020c 	orr.w	r2, r2, ip
 8026712:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026714:	2cff      	cmp	r4, #255	@ 0xff
 8026716:	d021      	beq.n	802675c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8026718:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802671a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802671e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026720:	fb04 fb0b 	mul.w	fp, r4, fp
 8026724:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026726:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802672a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802672c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026730:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026734:	fb04 fa0a 	mul.w	sl, r4, sl
 8026738:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802673c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026740:	44de      	add	lr, fp
 8026742:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026746:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802674a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802674e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026752:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026756:	ea4e 040a 	orr.w	r4, lr, sl
 802675a:	940c      	str	r4, [sp, #48]	@ 0x30
 802675c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802675e:	2cff      	cmp	r4, #255	@ 0xff
 8026760:	d021      	beq.n	80267a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8026762:	9c08      	ldr	r4, [sp, #32]
 8026764:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026768:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802676a:	fb04 fb0b 	mul.w	fp, r4, fp
 802676e:	9c08      	ldr	r4, [sp, #32]
 8026770:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026774:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026776:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802677a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802677e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026782:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026786:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802678a:	44de      	add	lr, fp
 802678c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026790:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026798:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802679c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80267a0:	ea4e 040a 	orr.w	r4, lr, sl
 80267a4:	9408      	str	r4, [sp, #32]
 80267a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80267a8:	2cff      	cmp	r4, #255	@ 0xff
 80267aa:	d021      	beq.n	80267f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80267ac:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80267ae:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80267b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80267b4:	fb04 fb0b 	mul.w	fp, r4, fp
 80267b8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80267ba:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80267be:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80267c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80267c4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80267c8:	fb04 fa0a 	mul.w	sl, r4, sl
 80267cc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80267d0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80267d4:	44de      	add	lr, fp
 80267d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80267da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80267e6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80267ea:	ea4e 040a 	orr.w	r4, lr, sl
 80267ee:	940d      	str	r4, [sp, #52]	@ 0x34
 80267f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80267f2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80267f6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80267fa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80267fe:	9c08      	ldr	r4, [sp, #32]
 8026800:	fb08 fc0c 	mul.w	ip, r8, ip
 8026804:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026808:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802680c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802680e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026812:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026816:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026818:	fb09 cc0e 	mla	ip, r9, lr, ip
 802681c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026820:	fb08 f80e 	mul.w	r8, r8, lr
 8026824:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026828:	fb03 8202 	mla	r2, r3, r2, r8
 802682c:	9b08      	ldr	r3, [sp, #32]
 802682e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026832:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8026836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026838:	fb01 220a 	mla	r2, r1, sl, r2
 802683c:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8026840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026842:	fb09 2901 	mla	r9, r9, r1, r2
 8026846:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026848:	4343      	muls	r3, r0
 802684a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802684e:	1c58      	adds	r0, r3, #1
 8026850:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026854:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026858:	783b      	ldrb	r3, [r7, #0]
 802685a:	ea4c 0c09 	orr.w	ip, ip, r9
 802685e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026862:	fa5f f28c 	uxtb.w	r2, ip
 8026866:	b2c0      	uxtb	r0, r0
 8026868:	fb12 f201 	smulbb	r2, r2, r1
 802686c:	fb03 2300 	mla	r3, r3, r0, r2
 8026870:	b29b      	uxth	r3, r3
 8026872:	1c5a      	adds	r2, r3, #1
 8026874:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026878:	787a      	ldrb	r2, [r7, #1]
 802687a:	fb12 f200 	smulbb	r2, r2, r0
 802687e:	121b      	asrs	r3, r3, #8
 8026880:	703b      	strb	r3, [r7, #0]
 8026882:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026886:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802688a:	fb03 2301 	mla	r3, r3, r1, r2
 802688e:	b29b      	uxth	r3, r3
 8026890:	1c5a      	adds	r2, r3, #1
 8026892:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026896:	121b      	asrs	r3, r3, #8
 8026898:	707b      	strb	r3, [r7, #1]
 802689a:	78bb      	ldrb	r3, [r7, #2]
 802689c:	fb13 f000 	smulbb	r0, r3, r0
 80268a0:	fb0c 0c01 	mla	ip, ip, r1, r0
 80268a4:	fa1f fc8c 	uxth.w	ip, ip
 80268a8:	f10c 0301 	add.w	r3, ip, #1
 80268ac:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80268b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80268b4:	f887 c002 	strb.w	ip, [r7, #2]
 80268b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80268ba:	3703      	adds	r7, #3
 80268bc:	441d      	add	r5, r3
 80268be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80268c0:	441e      	add	r6, r3
 80268c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80268c4:	3b01      	subs	r3, #1
 80268c6:	9318      	str	r3, [sp, #96]	@ 0x60
 80268c8:	e69f      	b.n	802660a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80268ca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80268cc:	441d      	add	r5, r3
 80268ce:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80268d0:	441e      	add	r6, r3
 80268d2:	9b07      	ldr	r3, [sp, #28]
 80268d4:	3b01      	subs	r3, #1
 80268d6:	9307      	str	r3, [sp, #28]
 80268d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80268da:	3303      	adds	r3, #3
 80268dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80268de:	e674      	b.n	80265ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80268e0:	d025      	beq.n	802692e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80268e2:	9b07      	ldr	r3, [sp, #28]
 80268e4:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80268e6:	3b01      	subs	r3, #1
 80268e8:	fb00 5003 	mla	r0, r0, r3, r5
 80268ec:	1400      	asrs	r0, r0, #16
 80268ee:	f53f ae89 	bmi.w	8026604 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80268f2:	3901      	subs	r1, #1
 80268f4:	4288      	cmp	r0, r1
 80268f6:	f6bf ae85 	bge.w	8026604 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80268fa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80268fc:	fb01 6303 	mla	r3, r1, r3, r6
 8026900:	141b      	asrs	r3, r3, #16
 8026902:	f53f ae7f 	bmi.w	8026604 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026906:	3a01      	subs	r2, #1
 8026908:	4293      	cmp	r3, r2
 802690a:	f6bf ae7b 	bge.w	8026604 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802690e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026910:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026914:	f103 0e03 	add.w	lr, r3, #3
 8026918:	f1bb 0f00 	cmp.w	fp, #0
 802691c:	dc6e      	bgt.n	80269fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802691e:	9b07      	ldr	r3, [sp, #28]
 8026920:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026926:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802692a:	4423      	add	r3, r4
 802692c:	930a      	str	r3, [sp, #40]	@ 0x28
 802692e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026930:	2b00      	cmp	r3, #0
 8026932:	f340 81ab 	ble.w	8026c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026936:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802693a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802693c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026940:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026944:	eef0 6a62 	vmov.f32	s13, s5
 8026948:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802694c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026950:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026954:	ee16 5a90 	vmov	r5, s13
 8026958:	eef0 6a43 	vmov.f32	s13, s6
 802695c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026960:	ee16 6a90 	vmov	r6, s13
 8026964:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026968:	ee61 7a27 	vmul.f32	s15, s2, s15
 802696c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026970:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026974:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026978:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802697c:	ee12 2a90 	vmov	r2, s5
 8026980:	eef0 2a47 	vmov.f32	s5, s14
 8026984:	fb92 f3f3 	sdiv	r3, r2, r3
 8026988:	ee13 2a10 	vmov	r2, s6
 802698c:	9329      	str	r3, [sp, #164]	@ 0xa4
 802698e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026990:	eeb0 3a67 	vmov.f32	s6, s15
 8026994:	fb92 f3f3 	sdiv	r3, r2, r3
 8026998:	932a      	str	r3, [sp, #168]	@ 0xa8
 802699a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802699c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802699e:	3b01      	subs	r3, #1
 80269a0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80269a2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80269a4:	bf08      	it	eq
 80269a6:	4613      	moveq	r3, r2
 80269a8:	9307      	str	r3, [sp, #28]
 80269aa:	e600      	b.n	80265ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80269ac:	f1bc 0f00 	cmp.w	ip, #0
 80269b0:	f43f ae6e 	beq.w	8026690 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80269b4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80269b8:	9308      	str	r3, [sp, #32]
 80269ba:	0e1b      	lsrs	r3, r3, #24
 80269bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80269be:	e667      	b.n	8026690 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80269c0:	f112 0801 	adds.w	r8, r2, #1
 80269c4:	f53f af78 	bmi.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80269c8:	45c6      	cmp	lr, r8
 80269ca:	f6ff af75 	blt.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80269ce:	f110 0801 	adds.w	r8, r0, #1
 80269d2:	f53f af71 	bmi.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80269d6:	4543      	cmp	r3, r8
 80269d8:	f6ff af6e 	blt.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80269dc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80269de:	b21b      	sxth	r3, r3
 80269e0:	9201      	str	r2, [sp, #4]
 80269e2:	9300      	str	r3, [sp, #0]
 80269e4:	fa0f f38e 	sxth.w	r3, lr
 80269e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80269ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80269ee:	e9cd c404 	strd	ip, r4, [sp, #16]
 80269f2:	4639      	mov	r1, r7
 80269f4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80269f6:	f7ff fc79 	bl	80262ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80269fa:	e75d      	b.n	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80269fc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80269fe:	142f      	asrs	r7, r5, #16
 8026a00:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026a02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026a06:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026a0a:	1433      	asrs	r3, r6, #16
 8026a0c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026a10:	fb02 7303 	mla	r3, r2, r3, r7
 8026a14:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8026a18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026a1c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026a20:	2900      	cmp	r1, #0
 8026a22:	f000 812a 	beq.w	8026c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026a26:	687c      	ldr	r4, [r7, #4]
 8026a28:	940e      	str	r4, [sp, #56]	@ 0x38
 8026a2a:	0e24      	lsrs	r4, r4, #24
 8026a2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8026a2e:	b178      	cbz	r0, 8026a50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026a30:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8026a34:	3a01      	subs	r2, #1
 8026a36:	0092      	lsls	r2, r2, #2
 8026a38:	3204      	adds	r2, #4
 8026a3a:	eb07 0802 	add.w	r8, r7, r2
 8026a3e:	58ba      	ldr	r2, [r7, r2]
 8026a40:	9209      	str	r2, [sp, #36]	@ 0x24
 8026a42:	0e12      	lsrs	r2, r2, #24
 8026a44:	9212      	str	r2, [sp, #72]	@ 0x48
 8026a46:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8026a4a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026a4c:	0e12      	lsrs	r2, r2, #24
 8026a4e:	9216      	str	r2, [sp, #88]	@ 0x58
 8026a50:	b289      	uxth	r1, r1
 8026a52:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026a54:	b280      	uxth	r0, r0
 8026a56:	fb01 f900 	mul.w	r9, r1, r0
 8026a5a:	0109      	lsls	r1, r1, #4
 8026a5c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026a60:	eba1 0809 	sub.w	r8, r1, r9
 8026a64:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8026a68:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026a6a:	b280      	uxth	r0, r0
 8026a6c:	fa1f f888 	uxth.w	r8, r8
 8026a70:	1a12      	subs	r2, r2, r0
 8026a72:	fb08 f101 	mul.w	r1, r8, r1
 8026a76:	b292      	uxth	r2, r2
 8026a78:	fb02 110c 	mla	r1, r2, ip, r1
 8026a7c:	fb00 1104 	mla	r1, r0, r4, r1
 8026a80:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026a82:	fb09 1104 	mla	r1, r9, r4, r1
 8026a86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026a8a:	2900      	cmp	r1, #0
 8026a8c:	f000 80ec 	beq.w	8026c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8026a90:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026a94:	d019      	beq.n	8026aca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8026a96:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026a9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026a9e:	fb0c fa0a 	mul.w	sl, ip, sl
 8026aa2:	fb0c fc03 	mul.w	ip, ip, r3
 8026aa6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026aaa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026aae:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026ab2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026ab6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026aba:	4453      	add	r3, sl
 8026abc:	0a3f      	lsrs	r7, r7, #8
 8026abe:	0a1b      	lsrs	r3, r3, #8
 8026ac0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026ac4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026ac8:	433b      	orrs	r3, r7
 8026aca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026acc:	2cff      	cmp	r4, #255	@ 0xff
 8026ace:	d020      	beq.n	8026b12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8026ad0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026ad2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026ad6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026ad8:	4367      	muls	r7, r4
 8026ada:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026adc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026ae0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026ae4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026ae6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026aea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026aee:	fb04 fa0a 	mul.w	sl, r4, sl
 8026af2:	44bc      	add	ip, r7
 8026af4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026af8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026afc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026b00:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026b04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b08:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026b0c:	ea4c 040a 	orr.w	r4, ip, sl
 8026b10:	940e      	str	r4, [sp, #56]	@ 0x38
 8026b12:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b14:	2cff      	cmp	r4, #255	@ 0xff
 8026b16:	d020      	beq.n	8026b5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8026b18:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026b1a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026b1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b20:	4367      	muls	r7, r4
 8026b22:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026b24:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026b28:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026b2c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b2e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026b32:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026b36:	fb04 fa0a 	mul.w	sl, r4, sl
 8026b3a:	44bc      	add	ip, r7
 8026b3c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026b40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b44:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026b48:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026b4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b50:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026b54:	ea4c 040a 	orr.w	r4, ip, sl
 8026b58:	9409      	str	r4, [sp, #36]	@ 0x24
 8026b5a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026b5c:	2cff      	cmp	r4, #255	@ 0xff
 8026b5e:	d020      	beq.n	8026ba2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8026b60:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026b62:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026b66:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026b68:	4367      	muls	r7, r4
 8026b6a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026b6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026b70:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026b74:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026b76:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026b7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026b7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026b82:	44bc      	add	ip, r7
 8026b84:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026b88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026b90:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026b94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b98:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026b9c:	ea4c 040a 	orr.w	r4, ip, sl
 8026ba0:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026ba2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026ba4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026ba8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026bac:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026bb0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026bb2:	fb08 f707 	mul.w	r7, r8, r7
 8026bb6:	fb02 770c 	mla	r7, r2, ip, r7
 8026bba:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026bbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026bc0:	fb00 770c 	mla	r7, r0, ip, r7
 8026bc4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026bc8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026bca:	fb09 770c 	mla	r7, r9, ip, r7
 8026bce:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8026bd2:	fb08 f80c 	mul.w	r8, r8, ip
 8026bd6:	0a3f      	lsrs	r7, r7, #8
 8026bd8:	fb02 8303 	mla	r3, r2, r3, r8
 8026bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026bde:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026be2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026be6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026be8:	fb00 330a 	mla	r3, r0, sl, r3
 8026bec:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8026bf0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026bf2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026bf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bfc:	434b      	muls	r3, r1
 8026bfe:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026c02:	1c59      	adds	r1, r3, #1
 8026c04:	ea47 070c 	orr.w	r7, r7, ip
 8026c08:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026c0c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026c10:	b2fa      	uxtb	r2, r7
 8026c12:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026c16:	fb12 f200 	smulbb	r2, r2, r0
 8026c1a:	b2c9      	uxtb	r1, r1
 8026c1c:	fb03 2301 	mla	r3, r3, r1, r2
 8026c20:	b29b      	uxth	r3, r3
 8026c22:	1c5a      	adds	r2, r3, #1
 8026c24:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026c28:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026c2c:	fb12 f201 	smulbb	r2, r2, r1
 8026c30:	121b      	asrs	r3, r3, #8
 8026c32:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026c36:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8026c3a:	0c3f      	lsrs	r7, r7, #16
 8026c3c:	fb03 2300 	mla	r3, r3, r0, r2
 8026c40:	b29b      	uxth	r3, r3
 8026c42:	1c5a      	adds	r2, r3, #1
 8026c44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026c48:	121b      	asrs	r3, r3, #8
 8026c4a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026c4e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026c52:	fb13 f101 	smulbb	r1, r3, r1
 8026c56:	fb07 1700 	mla	r7, r7, r0, r1
 8026c5a:	b2bf      	uxth	r7, r7
 8026c5c:	1c79      	adds	r1, r7, #1
 8026c5e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026c62:	123f      	asrs	r7, r7, #8
 8026c64:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8026c68:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026c6a:	f10e 0e03 	add.w	lr, lr, #3
 8026c6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026c72:	441d      	add	r5, r3
 8026c74:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026c76:	441e      	add	r6, r3
 8026c78:	e64e      	b.n	8026918 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026c7a:	2800      	cmp	r0, #0
 8026c7c:	f43f aee8 	beq.w	8026a50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026c80:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8026c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8026c86:	0e12      	lsrs	r2, r2, #24
 8026c88:	9212      	str	r2, [sp, #72]	@ 0x48
 8026c8a:	e6e1      	b.n	8026a50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026c8c:	b01d      	add	sp, #116	@ 0x74
 8026c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026c92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8026c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c96:	b087      	sub	sp, #28
 8026c98:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8026c9c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8026ca0:	fb05 7003 	mla	r0, r5, r3, r7
 8026ca4:	2d00      	cmp	r5, #0
 8026ca6:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8026caa:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8026cae:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8026cb2:	f2c0 810a 	blt.w	8026eca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8026cb6:	45a8      	cmp	r8, r5
 8026cb8:	f340 8107 	ble.w	8026eca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8026cbc:	2f00      	cmp	r7, #0
 8026cbe:	f2c0 8102 	blt.w	8026ec6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8026cc2:	42bb      	cmp	r3, r7
 8026cc4:	f340 80ff 	ble.w	8026ec6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8026cc8:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026ccc:	1c7a      	adds	r2, r7, #1
 8026cce:	f100 80ff 	bmi.w	8026ed0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8026cd2:	4293      	cmp	r3, r2
 8026cd4:	f340 80fc 	ble.w	8026ed0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8026cd8:	2c00      	cmp	r4, #0
 8026cda:	f000 80fb 	beq.w	8026ed4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8026cde:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8026ce2:	3501      	adds	r5, #1
 8026ce4:	f100 80fa 	bmi.w	8026edc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8026ce8:	45a8      	cmp	r8, r5
 8026cea:	f340 80f7 	ble.w	8026edc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8026cee:	f1be 0f00 	cmp.w	lr, #0
 8026cf2:	f000 80f6 	beq.w	8026ee2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8026cf6:	2f00      	cmp	r7, #0
 8026cf8:	f2c0 80ee 	blt.w	8026ed8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026cfc:	42bb      	cmp	r3, r7
 8026cfe:	f340 80eb 	ble.w	8026ed8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026d02:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8026d06:	3701      	adds	r7, #1
 8026d08:	f100 80ee 	bmi.w	8026ee8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026d0c:	42bb      	cmp	r3, r7
 8026d0e:	f340 80eb 	ble.w	8026ee8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026d12:	2c00      	cmp	r4, #0
 8026d14:	f000 80ea 	beq.w	8026eec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8026d18:	3301      	adds	r3, #1
 8026d1a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026d1e:	fa1f fc84 	uxth.w	ip, r4
 8026d22:	fa1f fe8e 	uxth.w	lr, lr
 8026d26:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026d2a:	fb0c f90e 	mul.w	r9, ip, lr
 8026d2e:	0e13      	lsrs	r3, r2, #24
 8026d30:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026d34:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8026d38:	9302      	str	r3, [sp, #8]
 8026d3a:	ebac 0709 	sub.w	r7, ip, r9
 8026d3e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8026d42:	fa1f f48e 	uxth.w	r4, lr
 8026d46:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8026d4a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026d4e:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8026d52:	fb0a fe0e 	mul.w	lr, sl, lr
 8026d56:	1b1b      	subs	r3, r3, r4
 8026d58:	fb0a f606 	mul.w	r6, sl, r6
 8026d5c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8026d60:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026d64:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8026d68:	b29b      	uxth	r3, r3
 8026d6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d6e:	b2bf      	uxth	r7, r7
 8026d70:	9301      	str	r3, [sp, #4]
 8026d72:	44e6      	add	lr, ip
 8026d74:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8026d78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d7c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026d80:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8026d84:	9303      	str	r3, [sp, #12]
 8026d86:	0a33      	lsrs	r3, r6, #8
 8026d88:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8026d8c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026d90:	9304      	str	r3, [sp, #16]
 8026d92:	fb0b f606 	mul.w	r6, fp, r6
 8026d96:	fb0b f000 	mul.w	r0, fp, r0
 8026d9a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8026d9e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026da2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026da6:	44b6      	add	lr, r6
 8026da8:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8026dac:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8026db0:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8026db4:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026db8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026dbc:	fb08 f606 	mul.w	r6, r8, r6
 8026dc0:	0a03      	lsrs	r3, r0, #8
 8026dc2:	fb08 f505 	mul.w	r5, r8, r5
 8026dc6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026dca:	0a30      	lsrs	r0, r6, #8
 8026dcc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026dd0:	9305      	str	r3, [sp, #20]
 8026dd2:	0e13      	lsrs	r3, r2, #24
 8026dd4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026dd8:	fb0e fe07 	mul.w	lr, lr, r7
 8026ddc:	4430      	add	r0, r6
 8026dde:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8026de2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8026de6:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8026dea:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026dee:	0a00      	lsrs	r0, r0, #8
 8026df0:	435e      	muls	r6, r3
 8026df2:	0a2d      	lsrs	r5, r5, #8
 8026df4:	435a      	muls	r2, r3
 8026df6:	9b03      	ldr	r3, [sp, #12]
 8026df8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8026dfc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026e00:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026e04:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026e08:	44b4      	add	ip, r6
 8026e0a:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8026e0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e12:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026e16:	9e01      	ldr	r6, [sp, #4]
 8026e18:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026e1c:	fb03 ee06 	mla	lr, r3, r6, lr
 8026e20:	9b04      	ldr	r3, [sp, #16]
 8026e22:	0a12      	lsrs	r2, r2, #8
 8026e24:	fb0c ee09 	mla	lr, ip, r9, lr
 8026e28:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8026e2c:	9b05      	ldr	r3, [sp, #20]
 8026e2e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026e32:	fb00 ee04 	mla	lr, r0, r4, lr
 8026e36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e3a:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8026e3e:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8026e42:	9b01      	ldr	r3, [sp, #4]
 8026e44:	fb07 fe0e 	mul.w	lr, r7, lr
 8026e48:	fb07 f70b 	mul.w	r7, r7, fp
 8026e4c:	fb03 ee06 	mla	lr, r3, r6, lr
 8026e50:	fb03 730a 	mla	r3, r3, sl, r7
 8026e54:	fb09 e202 	mla	r2, r9, r2, lr
 8026e58:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8026e5c:	fb04 2e0e 	mla	lr, r4, lr, r2
 8026e60:	fb04 3408 	mla	r4, r4, r8, r3
 8026e64:	9b02      	ldr	r3, [sp, #8]
 8026e66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e6a:	fb09 4903 	mla	r9, r9, r3, r4
 8026e6e:	780b      	ldrb	r3, [r1, #0]
 8026e70:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8026e74:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026e78:	ea40 0e0e 	orr.w	lr, r0, lr
 8026e7c:	fa5f f989 	uxtb.w	r9, r9
 8026e80:	fb03 f209 	mul.w	r2, r3, r9
 8026e84:	1c53      	adds	r3, r2, #1
 8026e86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026e8a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8026e8e:	700b      	strb	r3, [r1, #0]
 8026e90:	784b      	ldrb	r3, [r1, #1]
 8026e92:	fb03 f309 	mul.w	r3, r3, r9
 8026e96:	1c5a      	adds	r2, r3, #1
 8026e98:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026e9c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8026ea0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026ea4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026ea8:	704b      	strb	r3, [r1, #1]
 8026eaa:	788b      	ldrb	r3, [r1, #2]
 8026eac:	fb03 f909 	mul.w	r9, r3, r9
 8026eb0:	f109 0301 	add.w	r3, r9, #1
 8026eb4:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8026eb8:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8026ebc:	f881 e002 	strb.w	lr, [r1, #2]
 8026ec0:	b007      	add	sp, #28
 8026ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ec6:	2600      	movs	r6, #0
 8026ec8:	e700      	b.n	8026ccc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8026eca:	2000      	movs	r0, #0
 8026ecc:	4606      	mov	r6, r0
 8026ece:	e708      	b.n	8026ce2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8026ed0:	2000      	movs	r0, #0
 8026ed2:	e706      	b.n	8026ce2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8026ed4:	4620      	mov	r0, r4
 8026ed6:	e704      	b.n	8026ce2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8026ed8:	2500      	movs	r5, #0
 8026eda:	e714      	b.n	8026d06 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8026edc:	2200      	movs	r2, #0
 8026ede:	4615      	mov	r5, r2
 8026ee0:	e71d      	b.n	8026d1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026ee2:	4672      	mov	r2, lr
 8026ee4:	4675      	mov	r5, lr
 8026ee6:	e71a      	b.n	8026d1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026ee8:	2200      	movs	r2, #0
 8026eea:	e718      	b.n	8026d1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026eec:	4622      	mov	r2, r4
 8026eee:	e716      	b.n	8026d1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08026ef0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ef4:	b099      	sub	sp, #100	@ 0x64
 8026ef6:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8026efa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8026efc:	9017      	str	r0, [sp, #92]	@ 0x5c
 8026efe:	9306      	str	r3, [sp, #24]
 8026f00:	6850      	ldr	r0, [r2, #4]
 8026f02:	6812      	ldr	r2, [r2, #0]
 8026f04:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8026f08:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8026f0c:	fb00 1303 	mla	r3, r0, r3, r1
 8026f10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026f14:	18d3      	adds	r3, r2, r3
 8026f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8026f18:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026f1a:	681b      	ldr	r3, [r3, #0]
 8026f1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8026f1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026f20:	2b00      	cmp	r3, #0
 8026f22:	dc03      	bgt.n	8026f2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026f24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026f26:	2b00      	cmp	r3, #0
 8026f28:	f340 8360 	ble.w	80275ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026f2c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026f2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026f32:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026f36:	1e48      	subs	r0, r1, #1
 8026f38:	1e57      	subs	r7, r2, #1
 8026f3a:	9b06      	ldr	r3, [sp, #24]
 8026f3c:	2b00      	cmp	r3, #0
 8026f3e:	f340 817b 	ble.w	8027238 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8026f42:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026f46:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026f4a:	d406      	bmi.n	8026f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026f4c:	4584      	cmp	ip, r0
 8026f4e:	da04      	bge.n	8026f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026f50:	2b00      	cmp	r3, #0
 8026f52:	db02      	blt.n	8026f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026f54:	42bb      	cmp	r3, r7
 8026f56:	f2c0 8170 	blt.w	802723a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026f5a:	f11c 0c01 	adds.w	ip, ip, #1
 8026f5e:	f100 8160 	bmi.w	8027222 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026f62:	4561      	cmp	r1, ip
 8026f64:	f2c0 815d 	blt.w	8027222 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026f68:	3301      	adds	r3, #1
 8026f6a:	f100 815a 	bmi.w	8027222 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026f6e:	429a      	cmp	r2, r3
 8026f70:	f2c0 8157 	blt.w	8027222 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026f74:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026f78:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026f7a:	f1b8 0f00 	cmp.w	r8, #0
 8026f7e:	f340 8179 	ble.w	8027274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8026f82:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8026f84:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026f88:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026f8a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026f8e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026f92:	142a      	asrs	r2, r5, #16
 8026f94:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026f98:	689b      	ldr	r3, [r3, #8]
 8026f9a:	f100 81be 	bmi.w	802731a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026f9e:	f103 39ff 	add.w	r9, r3, #4294967295
 8026fa2:	454a      	cmp	r2, r9
 8026fa4:	f280 81b9 	bge.w	802731a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026fa8:	f1bc 0f00 	cmp.w	ip, #0
 8026fac:	f2c0 81b5 	blt.w	802731a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026fb0:	f10e 39ff 	add.w	r9, lr, #4294967295
 8026fb4:	45cc      	cmp	ip, r9
 8026fb6:	f280 81b0 	bge.w	802731a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026fba:	b21b      	sxth	r3, r3
 8026fbc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026fbe:	fb0c 2203 	mla	r2, ip, r3, r2
 8026fc2:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8026fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026fca:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026fce:	2900      	cmp	r1, #0
 8026fd0:	f000 8197 	beq.w	8027302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026fd4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8026fd8:	940a      	str	r4, [sp, #40]	@ 0x28
 8026fda:	0e24      	lsrs	r4, r4, #24
 8026fdc:	9411      	str	r4, [sp, #68]	@ 0x44
 8026fde:	b180      	cbz	r0, 8027002 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026fe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026fe4:	3b01      	subs	r3, #1
 8026fe6:	009b      	lsls	r3, r3, #2
 8026fe8:	3304      	adds	r3, #4
 8026fea:	eb09 0c03 	add.w	ip, r9, r3
 8026fee:	f859 3003 	ldr.w	r3, [r9, r3]
 8026ff2:	9307      	str	r3, [sp, #28]
 8026ff4:	0e1b      	lsrs	r3, r3, #24
 8026ff6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026ff8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026ffe:	0e1b      	lsrs	r3, r3, #24
 8027000:	9312      	str	r3, [sp, #72]	@ 0x48
 8027002:	b289      	uxth	r1, r1
 8027004:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027006:	b280      	uxth	r0, r0
 8027008:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802700a:	fb01 fa00 	mul.w	sl, r1, r0
 802700e:	0109      	lsls	r1, r1, #4
 8027010:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027014:	eba1 090a 	sub.w	r9, r1, sl
 8027018:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802701c:	b280      	uxth	r0, r0
 802701e:	fa1f f989 	uxth.w	r9, r9
 8027022:	1a09      	subs	r1, r1, r0
 8027024:	fb09 f303 	mul.w	r3, r9, r3
 8027028:	b289      	uxth	r1, r1
 802702a:	fb01 330e 	mla	r3, r1, lr, r3
 802702e:	fb00 3304 	mla	r3, r0, r4, r3
 8027032:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027034:	fb0a 3304 	mla	r3, sl, r4, r3
 8027038:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802703c:	2b00      	cmp	r3, #0
 802703e:	f000 80e8 	beq.w	8027212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027042:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027046:	d01b      	beq.n	8027080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8027048:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 802704c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027050:	fb0e fb0b 	mul.w	fp, lr, fp
 8027054:	fb0e fe02 	mul.w	lr, lr, r2
 8027058:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802705c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027060:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027064:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027068:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802706c:	445a      	add	r2, fp
 802706e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027072:	0a12      	lsrs	r2, r2, #8
 8027074:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027078:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802707c:	ea42 020c 	orr.w	r2, r2, ip
 8027080:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027082:	2cff      	cmp	r4, #255	@ 0xff
 8027084:	d021      	beq.n	80270ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8027086:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027088:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802708c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802708e:	fb04 fc0c 	mul.w	ip, r4, ip
 8027092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027094:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027098:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802709c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802709e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80270a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80270a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80270aa:	44e6      	add	lr, ip
 80270ac:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80270b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270b4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80270b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80270bc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80270c0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80270c4:	ea4e 040b 	orr.w	r4, lr, fp
 80270c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80270ca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80270cc:	2cff      	cmp	r4, #255	@ 0xff
 80270ce:	d021      	beq.n	8027114 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80270d0:	9c07      	ldr	r4, [sp, #28]
 80270d2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80270d6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80270d8:	fb04 fc0c 	mul.w	ip, r4, ip
 80270dc:	9c07      	ldr	r4, [sp, #28]
 80270de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80270e2:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80270e6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80270e8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80270ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80270f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80270f4:	44e6      	add	lr, ip
 80270f6:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80270fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270fe:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027102:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027106:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802710a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802710e:	ea4e 040b 	orr.w	r4, lr, fp
 8027112:	9407      	str	r4, [sp, #28]
 8027114:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027116:	2cff      	cmp	r4, #255	@ 0xff
 8027118:	d021      	beq.n	802715e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802711a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802711c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027120:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027122:	fb04 fc0c 	mul.w	ip, r4, ip
 8027126:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027128:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802712c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027130:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027132:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027136:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802713a:	fb04 fb0b 	mul.w	fp, r4, fp
 802713e:	44e6      	add	lr, ip
 8027140:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8027144:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027148:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802714c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027150:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027154:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027158:	ea4e 040b 	orr.w	r4, lr, fp
 802715c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802715e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027160:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027164:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027168:	2bff      	cmp	r3, #255	@ 0xff
 802716a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802716e:	9c07      	ldr	r4, [sp, #28]
 8027170:	fb09 fc0c 	mul.w	ip, r9, ip
 8027174:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027178:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802717c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802717e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027182:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027186:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027188:	fb0a cc0e 	mla	ip, sl, lr, ip
 802718c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027190:	fb09 f90e 	mul.w	r9, r9, lr
 8027194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027198:	fb01 9202 	mla	r2, r1, r2, r9
 802719c:	9907      	ldr	r1, [sp, #28]
 802719e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80271a2:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80271a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80271a8:	fb00 220b 	mla	r2, r0, fp, r2
 80271ac:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80271b0:	fb0a 2a00 	mla	sl, sl, r0, r2
 80271b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80271bc:	ea4c 0c0a 	orr.w	ip, ip, sl
 80271c0:	fa5f f08c 	uxtb.w	r0, ip
 80271c4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80271c8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80271cc:	f000 80a2 	beq.w	8027314 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80271d0:	43db      	mvns	r3, r3
 80271d2:	783a      	ldrb	r2, [r7, #0]
 80271d4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80271d8:	b2db      	uxtb	r3, r3
 80271da:	fb02 fe03 	mul.w	lr, r2, r3
 80271de:	fb0a fa03 	mul.w	sl, sl, r3
 80271e2:	f10e 0201 	add.w	r2, lr, #1
 80271e6:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80271ea:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80271ee:	703a      	strb	r2, [r7, #0]
 80271f0:	787a      	ldrb	r2, [r7, #1]
 80271f2:	fb02 f003 	mul.w	r0, r2, r3
 80271f6:	f10a 0301 	add.w	r3, sl, #1
 80271fa:	1c42      	adds	r2, r0, #1
 80271fc:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027200:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027204:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027208:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802720c:	707a      	strb	r2, [r7, #1]
 802720e:	f887 c002 	strb.w	ip, [r7, #2]
 8027212:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027214:	3703      	adds	r7, #3
 8027216:	f108 38ff 	add.w	r8, r8, #4294967295
 802721a:	441d      	add	r5, r3
 802721c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802721e:	441e      	add	r6, r3
 8027220:	e6ab      	b.n	8026f7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027222:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027224:	441d      	add	r5, r3
 8027226:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027228:	441e      	add	r6, r3
 802722a:	9b06      	ldr	r3, [sp, #24]
 802722c:	3b01      	subs	r3, #1
 802722e:	9306      	str	r3, [sp, #24]
 8027230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027232:	3303      	adds	r3, #3
 8027234:	9309      	str	r3, [sp, #36]	@ 0x24
 8027236:	e680      	b.n	8026f3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027238:	d024      	beq.n	8027284 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802723a:	9b06      	ldr	r3, [sp, #24]
 802723c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802723e:	3b01      	subs	r3, #1
 8027240:	fb00 5003 	mla	r0, r0, r3, r5
 8027244:	1400      	asrs	r0, r0, #16
 8027246:	f53f ae95 	bmi.w	8026f74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802724a:	3901      	subs	r1, #1
 802724c:	4288      	cmp	r0, r1
 802724e:	f6bf ae91 	bge.w	8026f74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027252:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8027254:	fb01 6303 	mla	r3, r1, r3, r6
 8027258:	141b      	asrs	r3, r3, #16
 802725a:	f53f ae8b 	bmi.w	8026f74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802725e:	3a01      	subs	r2, #1
 8027260:	4293      	cmp	r3, r2
 8027262:	f6bf ae87 	bge.w	8026f74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027268:	f8dd b018 	ldr.w	fp, [sp, #24]
 802726c:	1cdf      	adds	r7, r3, #3
 802726e:	f1bb 0f00 	cmp.w	fp, #0
 8027272:	dc6e      	bgt.n	8027352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8027274:	9b06      	ldr	r3, [sp, #24]
 8027276:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802727a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802727c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027280:	4423      	add	r3, r4
 8027282:	9309      	str	r3, [sp, #36]	@ 0x24
 8027284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027286:	2b00      	cmp	r3, #0
 8027288:	f340 81b0 	ble.w	80275ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802728c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027290:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027292:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027296:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802729a:	eef0 6a62 	vmov.f32	s13, s5
 802729e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80272a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80272a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80272aa:	ee16 5a90 	vmov	r5, s13
 80272ae:	eef0 6a43 	vmov.f32	s13, s6
 80272b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80272b6:	ee16 6a90 	vmov	r6, s13
 80272ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80272be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80272c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80272c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80272ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80272ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80272d2:	ee12 2a90 	vmov	r2, s5
 80272d6:	eef0 2a47 	vmov.f32	s5, s14
 80272da:	fb92 f3f3 	sdiv	r3, r2, r3
 80272de:	ee13 2a10 	vmov	r2, s6
 80272e2:	9325      	str	r3, [sp, #148]	@ 0x94
 80272e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80272e6:	eeb0 3a67 	vmov.f32	s6, s15
 80272ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80272ee:	9326      	str	r3, [sp, #152]	@ 0x98
 80272f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80272f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80272f4:	3b01      	subs	r3, #1
 80272f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80272f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80272fa:	bf08      	it	eq
 80272fc:	4613      	moveq	r3, r2
 80272fe:	9306      	str	r3, [sp, #24]
 8027300:	e60d      	b.n	8026f1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027302:	2800      	cmp	r0, #0
 8027304:	f43f ae7d 	beq.w	8027002 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027308:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802730c:	9307      	str	r3, [sp, #28]
 802730e:	0e1b      	lsrs	r3, r3, #24
 8027310:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027312:	e676      	b.n	8027002 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027314:	7038      	strb	r0, [r7, #0]
 8027316:	7079      	strb	r1, [r7, #1]
 8027318:	e779      	b.n	802720e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802731a:	f112 0901 	adds.w	r9, r2, #1
 802731e:	f53f af78 	bmi.w	8027212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027322:	454b      	cmp	r3, r9
 8027324:	f6ff af75 	blt.w	8027212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027328:	f11c 0901 	adds.w	r9, ip, #1
 802732c:	f53f af71 	bmi.w	8027212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027330:	45ce      	cmp	lr, r9
 8027332:	f6ff af6e 	blt.w	8027212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027336:	b21b      	sxth	r3, r3
 8027338:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802733c:	fa0f f28e 	sxth.w	r2, lr
 8027340:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027344:	9200      	str	r2, [sp, #0]
 8027346:	4639      	mov	r1, r7
 8027348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802734a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802734c:	f7ff fca1 	bl	8026c92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8027350:	e75f      	b.n	8027212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027352:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027354:	1429      	asrs	r1, r5, #16
 8027356:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027358:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802735c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8027360:	1433      	asrs	r3, r6, #16
 8027362:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027366:	fb0c 1303 	mla	r3, ip, r3, r1
 802736a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802736c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027370:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8027374:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027378:	2a00      	cmp	r2, #0
 802737a:	f000 8129 	beq.w	80275d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802737e:	684c      	ldr	r4, [r1, #4]
 8027380:	940c      	str	r4, [sp, #48]	@ 0x30
 8027382:	0e24      	lsrs	r4, r4, #24
 8027384:	9413      	str	r4, [sp, #76]	@ 0x4c
 8027386:	b198      	cbz	r0, 80273b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027388:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 802738c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027390:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8027394:	f10c 0c04 	add.w	ip, ip, #4
 8027398:	eb01 080c 	add.w	r8, r1, ip
 802739c:	f851 100c 	ldr.w	r1, [r1, ip]
 80273a0:	9108      	str	r1, [sp, #32]
 80273a2:	0e09      	lsrs	r1, r1, #24
 80273a4:	9110      	str	r1, [sp, #64]	@ 0x40
 80273a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80273aa:	910d      	str	r1, [sp, #52]	@ 0x34
 80273ac:	0e09      	lsrs	r1, r1, #24
 80273ae:	9114      	str	r1, [sp, #80]	@ 0x50
 80273b0:	b292      	uxth	r2, r2
 80273b2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80273b4:	b280      	uxth	r0, r0
 80273b6:	fb02 f900 	mul.w	r9, r2, r0
 80273ba:	0112      	lsls	r2, r2, #4
 80273bc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80273c0:	eba2 0809 	sub.w	r8, r2, r9
 80273c4:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80273c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80273ca:	b280      	uxth	r0, r0
 80273cc:	fa1f f888 	uxth.w	r8, r8
 80273d0:	1a09      	subs	r1, r1, r0
 80273d2:	fb08 f202 	mul.w	r2, r8, r2
 80273d6:	b289      	uxth	r1, r1
 80273d8:	fb01 220e 	mla	r2, r1, lr, r2
 80273dc:	fb00 2204 	mla	r2, r0, r4, r2
 80273e0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80273e2:	fb09 2204 	mla	r2, r9, r4, r2
 80273e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80273ea:	2a00      	cmp	r2, #0
 80273ec:	f000 80e8 	beq.w	80275c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80273f0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80273f4:	d01b      	beq.n	802742e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80273f6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80273fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80273fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8027402:	fb0e fe03 	mul.w	lr, lr, r3
 8027406:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802740a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802740e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027412:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027416:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802741a:	4453      	add	r3, sl
 802741c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027420:	0a1b      	lsrs	r3, r3, #8
 8027422:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027426:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802742a:	ea43 030c 	orr.w	r3, r3, ip
 802742e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027430:	2cff      	cmp	r4, #255	@ 0xff
 8027432:	d021      	beq.n	8027478 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8027434:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027436:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802743a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802743c:	fb04 fc0c 	mul.w	ip, r4, ip
 8027440:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027442:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027446:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802744a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802744c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027450:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027454:	fb04 fa0a 	mul.w	sl, r4, sl
 8027458:	44e6      	add	lr, ip
 802745a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802745e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027462:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027466:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802746a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802746e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027472:	ea4e 040a 	orr.w	r4, lr, sl
 8027476:	940c      	str	r4, [sp, #48]	@ 0x30
 8027478:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802747a:	2cff      	cmp	r4, #255	@ 0xff
 802747c:	d021      	beq.n	80274c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802747e:	9c08      	ldr	r4, [sp, #32]
 8027480:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027484:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027486:	fb04 fc0c 	mul.w	ip, r4, ip
 802748a:	9c08      	ldr	r4, [sp, #32]
 802748c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027490:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027492:	fb04 fa0e 	mul.w	sl, r4, lr
 8027496:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802749a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802749e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80274a2:	44e6      	add	lr, ip
 80274a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80274a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80274ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80274b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80274b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80274b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80274bc:	ea4e 040a 	orr.w	r4, lr, sl
 80274c0:	9408      	str	r4, [sp, #32]
 80274c2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80274c4:	2cff      	cmp	r4, #255	@ 0xff
 80274c6:	d021      	beq.n	802750c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80274c8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80274ca:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80274ce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80274d0:	fb04 fc0c 	mul.w	ip, r4, ip
 80274d4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80274d6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80274da:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80274de:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80274e0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80274e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80274e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80274ec:	44e6      	add	lr, ip
 80274ee:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80274f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80274f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80274fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80274fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027502:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027506:	ea4e 040a 	orr.w	r4, lr, sl
 802750a:	940d      	str	r4, [sp, #52]	@ 0x34
 802750c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802750e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8027512:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027516:	2aff      	cmp	r2, #255	@ 0xff
 8027518:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802751c:	9c08      	ldr	r4, [sp, #32]
 802751e:	fb08 fc0c 	mul.w	ip, r8, ip
 8027522:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027526:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802752a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802752c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027530:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027534:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027536:	fb09 cc0e 	mla	ip, r9, lr, ip
 802753a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802753e:	fb08 f80e 	mul.w	r8, r8, lr
 8027542:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027546:	fb01 8303 	mla	r3, r1, r3, r8
 802754a:	9908      	ldr	r1, [sp, #32]
 802754c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027550:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027554:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8027556:	fb00 330a 	mla	r3, r0, sl, r3
 802755a:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 802755e:	fb09 3e0e 	mla	lr, r9, lr, r3
 8027562:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027566:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802756a:	ea4c 0c0e 	orr.w	ip, ip, lr
 802756e:	fa5f f08c 	uxtb.w	r0, ip
 8027572:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027576:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802757a:	d032      	beq.n	80275e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802757c:	43d2      	mvns	r2, r2
 802757e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8027582:	b2d2      	uxtb	r2, r2
 8027584:	fb0e fe02 	mul.w	lr, lr, r2
 8027588:	f10e 0301 	add.w	r3, lr, #1
 802758c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8027590:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027594:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8027598:	4350      	muls	r0, r2
 802759a:	f807 3c03 	strb.w	r3, [r7, #-3]
 802759e:	1c43      	adds	r3, r0, #1
 80275a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80275a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80275a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80275ac:	4353      	muls	r3, r2
 80275ae:	f807 1c02 	strb.w	r1, [r7, #-2]
 80275b2:	1c5a      	adds	r2, r3, #1
 80275b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80275b8:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80275bc:	f807 cc01 	strb.w	ip, [r7, #-1]
 80275c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80275c2:	3703      	adds	r7, #3
 80275c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80275c8:	441d      	add	r5, r3
 80275ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80275cc:	441e      	add	r6, r3
 80275ce:	e64e      	b.n	802726e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80275d0:	2800      	cmp	r0, #0
 80275d2:	f43f aeed 	beq.w	80273b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80275d6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80275da:	9108      	str	r1, [sp, #32]
 80275dc:	0e09      	lsrs	r1, r1, #24
 80275de:	9110      	str	r1, [sp, #64]	@ 0x40
 80275e0:	e6e6      	b.n	80273b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80275e2:	f807 0c03 	strb.w	r0, [r7, #-3]
 80275e6:	f807 1c02 	strb.w	r1, [r7, #-2]
 80275ea:	e7e7      	b.n	80275bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80275ec:	b019      	add	sp, #100	@ 0x64
 80275ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080275f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80275f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275f8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80275fc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027600:	2c00      	cmp	r4, #0
 8027602:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8027606:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802760a:	fb00 4e03 	mla	lr, r0, r3, r4
 802760e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8027612:	f2c0 80b8 	blt.w	8027786 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027616:	45a1      	cmp	r9, r4
 8027618:	f340 80b5 	ble.w	8027786 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802761c:	2800      	cmp	r0, #0
 802761e:	f2c0 80b2 	blt.w	8027786 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027622:	4580      	cmp	r8, r0
 8027624:	f340 80af 	ble.w	8027786 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027628:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802762c:	f01e 0f01 	tst.w	lr, #1
 8027630:	5d56      	ldrb	r6, [r2, r5]
 8027632:	bf0c      	ite	eq
 8027634:	f006 060f 	andeq.w	r6, r6, #15
 8027638:	1136      	asrne	r6, r6, #4
 802763a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802763e:	b2f6      	uxtb	r6, r6
 8027640:	f114 0a01 	adds.w	sl, r4, #1
 8027644:	f100 80a1 	bmi.w	802778a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027648:	45d1      	cmp	r9, sl
 802764a:	f340 809e 	ble.w	802778a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802764e:	2800      	cmp	r0, #0
 8027650:	f2c0 809b 	blt.w	802778a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027654:	4580      	cmp	r8, r0
 8027656:	f340 8098 	ble.w	802778a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802765a:	2f00      	cmp	r7, #0
 802765c:	f000 8097 	beq.w	802778e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8027660:	f10e 0b01 	add.w	fp, lr, #1
 8027664:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027668:	f01b 0f01 	tst.w	fp, #1
 802766c:	5d55      	ldrb	r5, [r2, r5]
 802766e:	bf0c      	ite	eq
 8027670:	f005 050f 	andeq.w	r5, r5, #15
 8027674:	112d      	asrne	r5, r5, #4
 8027676:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802767a:	b2ed      	uxtb	r5, r5
 802767c:	f1bc 0f00 	cmp.w	ip, #0
 8027680:	f000 8089 	beq.w	8027796 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8027684:	2c00      	cmp	r4, #0
 8027686:	f100 0001 	add.w	r0, r0, #1
 802768a:	f2c0 8082 	blt.w	8027792 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802768e:	45a1      	cmp	r9, r4
 8027690:	dd7f      	ble.n	8027792 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027692:	2800      	cmp	r0, #0
 8027694:	db7d      	blt.n	8027792 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027696:	4580      	cmp	r8, r0
 8027698:	dd7b      	ble.n	8027792 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802769a:	eb03 0b0e 	add.w	fp, r3, lr
 802769e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80276a2:	f01b 0f01 	tst.w	fp, #1
 80276a6:	5d14      	ldrb	r4, [r2, r4]
 80276a8:	bf0c      	ite	eq
 80276aa:	f004 040f 	andeq.w	r4, r4, #15
 80276ae:	1124      	asrne	r4, r4, #4
 80276b0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80276b4:	b2e4      	uxtb	r4, r4
 80276b6:	f1ba 0f00 	cmp.w	sl, #0
 80276ba:	db6f      	blt.n	802779c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80276bc:	45d1      	cmp	r9, sl
 80276be:	dd6d      	ble.n	802779c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80276c0:	2800      	cmp	r0, #0
 80276c2:	db6b      	blt.n	802779c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80276c4:	4580      	cmp	r8, r0
 80276c6:	dd69      	ble.n	802779c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80276c8:	2f00      	cmp	r7, #0
 80276ca:	d069      	beq.n	80277a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80276cc:	3301      	adds	r3, #1
 80276ce:	449e      	add	lr, r3
 80276d0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80276d4:	f01e 0f01 	tst.w	lr, #1
 80276d8:	5cd0      	ldrb	r0, [r2, r3]
 80276da:	bf0c      	ite	eq
 80276dc:	f000 000f 	andeq.w	r0, r0, #15
 80276e0:	1100      	asrne	r0, r0, #4
 80276e2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80276e6:	b2c3      	uxtb	r3, r0
 80276e8:	b2ba      	uxth	r2, r7
 80276ea:	fa1f fc8c 	uxth.w	ip, ip
 80276ee:	fb02 f00c 	mul.w	r0, r2, ip
 80276f2:	0112      	lsls	r2, r2, #4
 80276f4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80276f8:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80276fc:	1a12      	subs	r2, r2, r0
 80276fe:	fa1f fc8c 	uxth.w	ip, ip
 8027702:	b292      	uxth	r2, r2
 8027704:	eba7 070c 	sub.w	r7, r7, ip
 8027708:	436a      	muls	r2, r5
 802770a:	b2bf      	uxth	r7, r7
 802770c:	fb06 2207 	mla	r2, r6, r7, r2
 8027710:	fb0c 2404 	mla	r4, ip, r4, r2
 8027714:	fb00 4303 	mla	r3, r0, r3, r4
 8027718:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802771c:	b38b      	cbz	r3, 8027782 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802771e:	4a21      	ldr	r2, [pc, #132]	@ (80277a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8027720:	6814      	ldr	r4, [r2, #0]
 8027722:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8027726:	b2e5      	uxtb	r5, r4
 8027728:	4353      	muls	r3, r2
 802772a:	1c5a      	adds	r2, r3, #1
 802772c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027730:	1212      	asrs	r2, r2, #8
 8027732:	b290      	uxth	r0, r2
 8027734:	43d2      	mvns	r2, r2
 8027736:	fb15 f500 	smulbb	r5, r5, r0
 802773a:	b2d3      	uxtb	r3, r2
 802773c:	780a      	ldrb	r2, [r1, #0]
 802773e:	fb02 5203 	mla	r2, r2, r3, r5
 8027742:	b292      	uxth	r2, r2
 8027744:	1c55      	adds	r5, r2, #1
 8027746:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802774a:	784d      	ldrb	r5, [r1, #1]
 802774c:	fb15 f503 	smulbb	r5, r5, r3
 8027750:	1212      	asrs	r2, r2, #8
 8027752:	700a      	strb	r2, [r1, #0]
 8027754:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8027758:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802775c:	fb02 5200 	mla	r2, r2, r0, r5
 8027760:	b292      	uxth	r2, r2
 8027762:	1c55      	adds	r5, r2, #1
 8027764:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027768:	1212      	asrs	r2, r2, #8
 802776a:	704a      	strb	r2, [r1, #1]
 802776c:	788a      	ldrb	r2, [r1, #2]
 802776e:	fb12 f303 	smulbb	r3, r2, r3
 8027772:	fb04 3300 	mla	r3, r4, r0, r3
 8027776:	b29b      	uxth	r3, r3
 8027778:	1c5a      	adds	r2, r3, #1
 802777a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802777e:	121b      	asrs	r3, r3, #8
 8027780:	708b      	strb	r3, [r1, #2]
 8027782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027786:	2600      	movs	r6, #0
 8027788:	e75a      	b.n	8027640 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 802778a:	2500      	movs	r5, #0
 802778c:	e776      	b.n	802767c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802778e:	463d      	mov	r5, r7
 8027790:	e774      	b.n	802767c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027792:	2400      	movs	r4, #0
 8027794:	e78f      	b.n	80276b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8027796:	4663      	mov	r3, ip
 8027798:	4664      	mov	r4, ip
 802779a:	e7a5      	b.n	80276e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802779c:	2300      	movs	r3, #0
 802779e:	e7a3      	b.n	80276e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80277a0:	463b      	mov	r3, r7
 80277a2:	e7a1      	b.n	80276e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80277a4:	24015c58 	.word	0x24015c58

080277a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80277a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277ac:	b097      	sub	sp, #92	@ 0x5c
 80277ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80277b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80277b2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80277b4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80277b8:	9015      	str	r0, [sp, #84]	@ 0x54
 80277ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80277bc:	6850      	ldr	r0, [r2, #4]
 80277be:	930e      	str	r3, [sp, #56]	@ 0x38
 80277c0:	6812      	ldr	r2, [r2, #0]
 80277c2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80277c6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 80277ca:	fb00 1303 	mla	r3, r0, r3, r1
 80277ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80277d2:	eb02 0a03 	add.w	sl, r2, r3
 80277d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80277d8:	689b      	ldr	r3, [r3, #8]
 80277da:	3301      	adds	r3, #1
 80277dc:	f023 0301 	bic.w	r3, r3, #1
 80277e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80277e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80277e4:	681f      	ldr	r7, [r3, #0]
 80277e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80277e8:	2b00      	cmp	r3, #0
 80277ea:	dc03      	bgt.n	80277f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80277ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80277ee:	2b00      	cmp	r3, #0
 80277f0:	f340 8247 	ble.w	8027c82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80277f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80277f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80277fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80277fe:	1e48      	subs	r0, r1, #1
 8027800:	f102 3cff 	add.w	ip, r2, #4294967295
 8027804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027806:	2b00      	cmp	r3, #0
 8027808:	f340 80e5 	ble.w	80279d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802780c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8027810:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027814:	d406      	bmi.n	8027824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027816:	4586      	cmp	lr, r0
 8027818:	da04      	bge.n	8027824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802781a:	2b00      	cmp	r3, #0
 802781c:	db02      	blt.n	8027824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802781e:	4563      	cmp	r3, ip
 8027820:	f2c0 80da 	blt.w	80279d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027824:	f11e 0e01 	adds.w	lr, lr, #1
 8027828:	f100 80cb 	bmi.w	80279c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802782c:	4571      	cmp	r1, lr
 802782e:	f2c0 80c8 	blt.w	80279c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027832:	3301      	adds	r3, #1
 8027834:	f100 80c5 	bmi.w	80279c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027838:	429a      	cmp	r2, r3
 802783a:	f2c0 80c2 	blt.w	80279c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802783e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027840:	46d0      	mov	r8, sl
 8027842:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027846:	930d      	str	r3, [sp, #52]	@ 0x34
 8027848:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802784a:	2b00      	cmp	r3, #0
 802784c:	f340 80e3 	ble.w	8027a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027850:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027852:	1430      	asrs	r0, r6, #16
 8027854:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027858:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802785c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027860:	142b      	asrs	r3, r5, #16
 8027862:	f100 812e 	bmi.w	8027ac2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027866:	f10c 3bff 	add.w	fp, ip, #4294967295
 802786a:	455b      	cmp	r3, fp
 802786c:	f280 8129 	bge.w	8027ac2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027870:	2800      	cmp	r0, #0
 8027872:	f2c0 8126 	blt.w	8027ac2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027876:	f10e 3bff 	add.w	fp, lr, #4294967295
 802787a:	4558      	cmp	r0, fp
 802787c:	f280 8121 	bge.w	8027ac2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027880:	fb00 3309 	mla	r3, r0, r9, r3
 8027884:	0858      	lsrs	r0, r3, #1
 8027886:	07dc      	lsls	r4, r3, #31
 8027888:	f817 c000 	ldrb.w	ip, [r7, r0]
 802788c:	bf54      	ite	pl
 802788e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027892:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027896:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802789a:	fa5f fc8c 	uxtb.w	ip, ip
 802789e:	2a00      	cmp	r2, #0
 80278a0:	f000 80fe 	beq.w	8027aa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80278a4:	1c58      	adds	r0, r3, #1
 80278a6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80278aa:	07c0      	lsls	r0, r0, #31
 80278ac:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80278b0:	bf54      	ite	pl
 80278b2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80278b6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80278ba:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80278be:	fa5f f08e 	uxtb.w	r0, lr
 80278c2:	9010      	str	r0, [sp, #64]	@ 0x40
 80278c4:	b1d9      	cbz	r1, 80278fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80278c6:	444b      	add	r3, r9
 80278c8:	0858      	lsrs	r0, r3, #1
 80278ca:	07dc      	lsls	r4, r3, #31
 80278cc:	f103 0301 	add.w	r3, r3, #1
 80278d0:	5c38      	ldrb	r0, [r7, r0]
 80278d2:	bf54      	ite	pl
 80278d4:	f000 000f 	andpl.w	r0, r0, #15
 80278d8:	1100      	asrmi	r0, r0, #4
 80278da:	07dc      	lsls	r4, r3, #31
 80278dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80278e0:	b2c0      	uxtb	r0, r0
 80278e2:	900a      	str	r0, [sp, #40]	@ 0x28
 80278e4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80278e8:	f817 e000 	ldrb.w	lr, [r7, r0]
 80278ec:	bf54      	ite	pl
 80278ee:	f00e 030f 	andpl.w	r3, lr, #15
 80278f2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80278f6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80278fa:	b2db      	uxtb	r3, r3
 80278fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80278fe:	b292      	uxth	r2, r2
 8027900:	b289      	uxth	r1, r1
 8027902:	0113      	lsls	r3, r2, #4
 8027904:	fb02 f001 	mul.w	r0, r2, r1
 8027908:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802790a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802790e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8027912:	1a1b      	subs	r3, r3, r0
 8027914:	b289      	uxth	r1, r1
 8027916:	b29b      	uxth	r3, r3
 8027918:	ebae 0e01 	sub.w	lr, lr, r1
 802791c:	4353      	muls	r3, r2
 802791e:	fa1f fe8e 	uxth.w	lr, lr
 8027922:	fb0c 320e 	mla	r2, ip, lr, r3
 8027926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027928:	fb01 2203 	mla	r2, r1, r3, r2
 802792c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802792e:	fb00 2203 	mla	r2, r0, r3, r2
 8027932:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027936:	2a00      	cmp	r2, #0
 8027938:	d039      	beq.n	80279ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802793a:	4bc7      	ldr	r3, [pc, #796]	@ (8027c58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802793c:	6819      	ldr	r1, [r3, #0]
 802793e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027940:	fa5f fc81 	uxtb.w	ip, r1
 8027944:	435a      	muls	r2, r3
 8027946:	1c53      	adds	r3, r2, #1
 8027948:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802794c:	1212      	asrs	r2, r2, #8
 802794e:	b290      	uxth	r0, r2
 8027950:	43d2      	mvns	r2, r2
 8027952:	fb1c fc00 	smulbb	ip, ip, r0
 8027956:	b2d3      	uxtb	r3, r2
 8027958:	f898 2000 	ldrb.w	r2, [r8]
 802795c:	fb02 c203 	mla	r2, r2, r3, ip
 8027960:	b292      	uxth	r2, r2
 8027962:	f102 0c01 	add.w	ip, r2, #1
 8027966:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802796a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802796e:	fb1c fc03 	smulbb	ip, ip, r3
 8027972:	1212      	asrs	r2, r2, #8
 8027974:	f888 2000 	strb.w	r2, [r8]
 8027978:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802797c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8027980:	fb02 c200 	mla	r2, r2, r0, ip
 8027984:	b292      	uxth	r2, r2
 8027986:	f102 0c01 	add.w	ip, r2, #1
 802798a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802798e:	1212      	asrs	r2, r2, #8
 8027990:	f888 2001 	strb.w	r2, [r8, #1]
 8027994:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027998:	fb12 f303 	smulbb	r3, r2, r3
 802799c:	fb01 3300 	mla	r3, r1, r0, r3
 80279a0:	b29b      	uxth	r3, r3
 80279a2:	1c5a      	adds	r2, r3, #1
 80279a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80279a8:	121b      	asrs	r3, r3, #8
 80279aa:	f888 3002 	strb.w	r3, [r8, #2]
 80279ae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80279b0:	f108 0803 	add.w	r8, r8, #3
 80279b4:	441d      	add	r5, r3
 80279b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80279b8:	441e      	add	r6, r3
 80279ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80279bc:	3b01      	subs	r3, #1
 80279be:	930d      	str	r3, [sp, #52]	@ 0x34
 80279c0:	e742      	b.n	8027848 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80279c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80279c4:	f10a 0a03 	add.w	sl, sl, #3
 80279c8:	441d      	add	r5, r3
 80279ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80279cc:	441e      	add	r6, r3
 80279ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80279d0:	3b01      	subs	r3, #1
 80279d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80279d4:	e716      	b.n	8027804 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80279d6:	d024      	beq.n	8027a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80279d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80279da:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80279dc:	3b01      	subs	r3, #1
 80279de:	fb00 5003 	mla	r0, r0, r3, r5
 80279e2:	1400      	asrs	r0, r0, #16
 80279e4:	f53f af2b 	bmi.w	802783e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80279e8:	3901      	subs	r1, #1
 80279ea:	4288      	cmp	r0, r1
 80279ec:	f6bf af27 	bge.w	802783e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80279f0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80279f2:	fb01 6303 	mla	r3, r1, r3, r6
 80279f6:	141b      	asrs	r3, r3, #16
 80279f8:	f53f af21 	bmi.w	802783e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80279fc:	3a01      	subs	r2, #1
 80279fe:	4293      	cmp	r3, r2
 8027a00:	f6bf af1d 	bge.w	802783e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027a04:	f10a 0e03 	add.w	lr, sl, #3
 8027a08:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8027a0c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027a10:	f1b8 0f00 	cmp.w	r8, #0
 8027a14:	dc76      	bgt.n	8027b04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8027a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a18:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027a1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027a20:	44a2      	add	sl, r4
 8027a22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	f340 812c 	ble.w	8027c82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027a2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027a34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027a38:	eef0 6a62 	vmov.f32	s13, s5
 8027a3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027a40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027a44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a48:	ee16 5a90 	vmov	r5, s13
 8027a4c:	eef0 6a43 	vmov.f32	s13, s6
 8027a50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a54:	ee16 6a90 	vmov	r6, s13
 8027a58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027a5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027a60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027a64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027a68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027a6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027a70:	ee12 2a90 	vmov	r2, s5
 8027a74:	eef0 2a47 	vmov.f32	s5, s14
 8027a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a7c:	ee13 2a10 	vmov	r2, s6
 8027a80:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027a82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a84:	eeb0 3a67 	vmov.f32	s6, s15
 8027a88:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a8c:	9324      	str	r3, [sp, #144]	@ 0x90
 8027a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027a90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027a92:	3b01      	subs	r3, #1
 8027a94:	930c      	str	r3, [sp, #48]	@ 0x30
 8027a96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a98:	bf08      	it	eq
 8027a9a:	4613      	moveq	r3, r2
 8027a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027a9e:	e6a2      	b.n	80277e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8027aa0:	2900      	cmp	r1, #0
 8027aa2:	f43f af2c 	beq.w	80278fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027aa6:	eb09 0003 	add.w	r0, r9, r3
 8027aaa:	0843      	lsrs	r3, r0, #1
 8027aac:	07c0      	lsls	r0, r0, #31
 8027aae:	5cfb      	ldrb	r3, [r7, r3]
 8027ab0:	bf54      	ite	pl
 8027ab2:	f003 030f 	andpl.w	r3, r3, #15
 8027ab6:	111b      	asrmi	r3, r3, #4
 8027ab8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027abc:	b2db      	uxtb	r3, r3
 8027abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ac0:	e71d      	b.n	80278fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027ac2:	f113 0b01 	adds.w	fp, r3, #1
 8027ac6:	f53f af72 	bmi.w	80279ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027aca:	45dc      	cmp	ip, fp
 8027acc:	f6ff af6f 	blt.w	80279ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027ad0:	f110 0b01 	adds.w	fp, r0, #1
 8027ad4:	f53f af6b 	bmi.w	80279ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027ad8:	45de      	cmp	lr, fp
 8027ada:	f6ff af68 	blt.w	80279ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027ade:	9302      	str	r3, [sp, #8]
 8027ae0:	fa0f f38e 	sxth.w	r3, lr
 8027ae4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027ae6:	9301      	str	r3, [sp, #4]
 8027ae8:	fa0f f38c 	sxth.w	r3, ip
 8027aec:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027af0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027af4:	9300      	str	r3, [sp, #0]
 8027af6:	463a      	mov	r2, r7
 8027af8:	464b      	mov	r3, r9
 8027afa:	4641      	mov	r1, r8
 8027afc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027afe:	f7ff fd79 	bl	80275f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8027b02:	e754      	b.n	80279ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027b04:	142a      	asrs	r2, r5, #16
 8027b06:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027b0a:	1433      	asrs	r3, r6, #16
 8027b0c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027b10:	fb09 2303 	mla	r3, r9, r3, r2
 8027b14:	085a      	lsrs	r2, r3, #1
 8027b16:	07dc      	lsls	r4, r3, #31
 8027b18:	5cba      	ldrb	r2, [r7, r2]
 8027b1a:	bf54      	ite	pl
 8027b1c:	f002 020f 	andpl.w	r2, r2, #15
 8027b20:	1112      	asrmi	r2, r2, #4
 8027b22:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027b26:	b2d2      	uxtb	r2, r2
 8027b28:	2900      	cmp	r1, #0
 8027b2a:	f000 8097 	beq.w	8027c5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027b2e:	f103 0b01 	add.w	fp, r3, #1
 8027b32:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8027b36:	f01b 0f01 	tst.w	fp, #1
 8027b3a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027b3e:	bf0c      	ite	eq
 8027b40:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027b44:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027b48:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027b4c:	fa5f f48c 	uxtb.w	r4, ip
 8027b50:	9412      	str	r4, [sp, #72]	@ 0x48
 8027b52:	b300      	cbz	r0, 8027b96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027b54:	444b      	add	r3, r9
 8027b56:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027b5a:	07dc      	lsls	r4, r3, #31
 8027b5c:	f103 0301 	add.w	r3, r3, #1
 8027b60:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027b64:	bf54      	ite	pl
 8027b66:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027b6a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027b6e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027b72:	fa5f f48c 	uxtb.w	r4, ip
 8027b76:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027b7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027b7c:	07dc      	lsls	r4, r3, #31
 8027b7e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027b82:	bf54      	ite	pl
 8027b84:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027b88:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027b8c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027b90:	fa5f f38c 	uxtb.w	r3, ip
 8027b94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027b96:	b289      	uxth	r1, r1
 8027b98:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027b9a:	b280      	uxth	r0, r0
 8027b9c:	fb01 f300 	mul.w	r3, r1, r0
 8027ba0:	0109      	lsls	r1, r1, #4
 8027ba2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027ba6:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8027baa:	1ac9      	subs	r1, r1, r3
 8027bac:	b280      	uxth	r0, r0
 8027bae:	b289      	uxth	r1, r1
 8027bb0:	ebac 0c00 	sub.w	ip, ip, r0
 8027bb4:	4361      	muls	r1, r4
 8027bb6:	fa1f fc8c 	uxth.w	ip, ip
 8027bba:	fb02 120c 	mla	r2, r2, ip, r1
 8027bbe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027bc0:	fb00 2001 	mla	r0, r0, r1, r2
 8027bc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027bc6:	fb03 0302 	mla	r3, r3, r2, r0
 8027bca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	d039      	beq.n	8027c46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027bd2:	4a21      	ldr	r2, [pc, #132]	@ (8027c58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027bd4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8027bd8:	6810      	ldr	r0, [r2, #0]
 8027bda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027bdc:	fa5f fc80 	uxtb.w	ip, r0
 8027be0:	4353      	muls	r3, r2
 8027be2:	1c5a      	adds	r2, r3, #1
 8027be4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027be8:	121b      	asrs	r3, r3, #8
 8027bea:	b29a      	uxth	r2, r3
 8027bec:	43db      	mvns	r3, r3
 8027bee:	fb1c fc02 	smulbb	ip, ip, r2
 8027bf2:	b2db      	uxtb	r3, r3
 8027bf4:	fb01 c103 	mla	r1, r1, r3, ip
 8027bf8:	b289      	uxth	r1, r1
 8027bfa:	f101 0c01 	add.w	ip, r1, #1
 8027bfe:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027c02:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8027c06:	fb1c fc03 	smulbb	ip, ip, r3
 8027c0a:	1209      	asrs	r1, r1, #8
 8027c0c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027c10:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8027c14:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8027c18:	fb01 c102 	mla	r1, r1, r2, ip
 8027c1c:	b289      	uxth	r1, r1
 8027c1e:	f101 0c01 	add.w	ip, r1, #1
 8027c22:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027c26:	1209      	asrs	r1, r1, #8
 8027c28:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8027c2c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8027c30:	fb11 f303 	smulbb	r3, r1, r3
 8027c34:	fb00 3002 	mla	r0, r0, r2, r3
 8027c38:	b280      	uxth	r0, r0
 8027c3a:	1c42      	adds	r2, r0, #1
 8027c3c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027c40:	1200      	asrs	r0, r0, #8
 8027c42:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8027c46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027c48:	f10e 0e03 	add.w	lr, lr, #3
 8027c4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8027c50:	441d      	add	r5, r3
 8027c52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027c54:	441e      	add	r6, r3
 8027c56:	e6db      	b.n	8027a10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8027c58:	24015c58 	.word	0x24015c58
 8027c5c:	2800      	cmp	r0, #0
 8027c5e:	d09a      	beq.n	8027b96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027c60:	444b      	add	r3, r9
 8027c62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027c66:	07db      	lsls	r3, r3, #31
 8027c68:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027c6c:	bf54      	ite	pl
 8027c6e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027c72:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027c76:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027c7a:	fa5f f38c 	uxtb.w	r3, ip
 8027c7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027c80:	e789      	b.n	8027b96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027c82:	b017      	add	sp, #92	@ 0x5c
 8027c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027c88 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8027c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c8c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8027c90:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027c94:	2d00      	cmp	r5, #0
 8027c96:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8027c9a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8027c9e:	fb04 5e03 	mla	lr, r4, r3, r5
 8027ca2:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8027ca6:	f2c0 80b1 	blt.w	8027e0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027caa:	45a9      	cmp	r9, r5
 8027cac:	f340 80ae 	ble.w	8027e0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027cb0:	2c00      	cmp	r4, #0
 8027cb2:	f2c0 80ab 	blt.w	8027e0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027cb6:	45a0      	cmp	r8, r4
 8027cb8:	f340 80a8 	ble.w	8027e0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027cbc:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8027cc0:	f01e 0f01 	tst.w	lr, #1
 8027cc4:	5d97      	ldrb	r7, [r2, r6]
 8027cc6:	bf0c      	ite	eq
 8027cc8:	f007 070f 	andeq.w	r7, r7, #15
 8027ccc:	113f      	asrne	r7, r7, #4
 8027cce:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8027cd2:	b2ff      	uxtb	r7, r7
 8027cd4:	f115 0a01 	adds.w	sl, r5, #1
 8027cd8:	f100 809a 	bmi.w	8027e10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027cdc:	45d1      	cmp	r9, sl
 8027cde:	f340 8097 	ble.w	8027e10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027ce2:	2c00      	cmp	r4, #0
 8027ce4:	f2c0 8094 	blt.w	8027e10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027ce8:	45a0      	cmp	r8, r4
 8027cea:	f340 8091 	ble.w	8027e10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027cee:	2800      	cmp	r0, #0
 8027cf0:	f000 8090 	beq.w	8027e14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8027cf4:	f10e 0b01 	add.w	fp, lr, #1
 8027cf8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8027cfc:	f01b 0f01 	tst.w	fp, #1
 8027d00:	5d96      	ldrb	r6, [r2, r6]
 8027d02:	bf0c      	ite	eq
 8027d04:	f006 060f 	andeq.w	r6, r6, #15
 8027d08:	1136      	asrne	r6, r6, #4
 8027d0a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027d0e:	b2f6      	uxtb	r6, r6
 8027d10:	f1bc 0f00 	cmp.w	ip, #0
 8027d14:	f000 8082 	beq.w	8027e1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8027d18:	2d00      	cmp	r5, #0
 8027d1a:	f104 0401 	add.w	r4, r4, #1
 8027d1e:	db7b      	blt.n	8027e18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027d20:	45a9      	cmp	r9, r5
 8027d22:	dd79      	ble.n	8027e18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027d24:	2c00      	cmp	r4, #0
 8027d26:	db77      	blt.n	8027e18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027d28:	45a0      	cmp	r8, r4
 8027d2a:	dd75      	ble.n	8027e18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027d2c:	eb03 0b0e 	add.w	fp, r3, lr
 8027d30:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027d34:	f01b 0f01 	tst.w	fp, #1
 8027d38:	5d55      	ldrb	r5, [r2, r5]
 8027d3a:	bf0c      	ite	eq
 8027d3c:	f005 050f 	andeq.w	r5, r5, #15
 8027d40:	112d      	asrne	r5, r5, #4
 8027d42:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027d46:	b2ed      	uxtb	r5, r5
 8027d48:	f1ba 0f00 	cmp.w	sl, #0
 8027d4c:	db69      	blt.n	8027e22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027d4e:	45d1      	cmp	r9, sl
 8027d50:	dd67      	ble.n	8027e22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027d52:	2c00      	cmp	r4, #0
 8027d54:	db65      	blt.n	8027e22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027d56:	45a0      	cmp	r8, r4
 8027d58:	dd63      	ble.n	8027e22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027d5a:	2800      	cmp	r0, #0
 8027d5c:	d063      	beq.n	8027e26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8027d5e:	3301      	adds	r3, #1
 8027d60:	449e      	add	lr, r3
 8027d62:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027d66:	f01e 0f01 	tst.w	lr, #1
 8027d6a:	5cd4      	ldrb	r4, [r2, r3]
 8027d6c:	bf0c      	ite	eq
 8027d6e:	f004 040f 	andeq.w	r4, r4, #15
 8027d72:	1124      	asrne	r4, r4, #4
 8027d74:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027d78:	b2e3      	uxtb	r3, r4
 8027d7a:	b282      	uxth	r2, r0
 8027d7c:	fa1f fc8c 	uxth.w	ip, ip
 8027d80:	fb02 f40c 	mul.w	r4, r2, ip
 8027d84:	0112      	lsls	r2, r2, #4
 8027d86:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8027d8a:	fa1f f08c 	uxth.w	r0, ip
 8027d8e:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8027d92:	1b12      	subs	r2, r2, r4
 8027d94:	ebac 0c00 	sub.w	ip, ip, r0
 8027d98:	b292      	uxth	r2, r2
 8027d9a:	fa1f fc8c 	uxth.w	ip, ip
 8027d9e:	4372      	muls	r2, r6
 8027da0:	fb07 220c 	mla	r2, r7, ip, r2
 8027da4:	fb00 2005 	mla	r0, r0, r5, r2
 8027da8:	fb04 0303 	mla	r3, r4, r3, r0
 8027dac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027db0:	b353      	cbz	r3, 8027e08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8027db2:	4a1e      	ldr	r2, [pc, #120]	@ (8027e2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8027db4:	7808      	ldrb	r0, [r1, #0]
 8027db6:	6814      	ldr	r4, [r2, #0]
 8027db8:	b29a      	uxth	r2, r3
 8027dba:	43db      	mvns	r3, r3
 8027dbc:	b2e5      	uxtb	r5, r4
 8027dbe:	b2db      	uxtb	r3, r3
 8027dc0:	fb15 f502 	smulbb	r5, r5, r2
 8027dc4:	fb00 5003 	mla	r0, r0, r3, r5
 8027dc8:	b280      	uxth	r0, r0
 8027dca:	1c45      	adds	r5, r0, #1
 8027dcc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027dd0:	784d      	ldrb	r5, [r1, #1]
 8027dd2:	fb15 f503 	smulbb	r5, r5, r3
 8027dd6:	1200      	asrs	r0, r0, #8
 8027dd8:	7008      	strb	r0, [r1, #0]
 8027dda:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8027dde:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027de2:	fb00 5002 	mla	r0, r0, r2, r5
 8027de6:	b280      	uxth	r0, r0
 8027de8:	1c45      	adds	r5, r0, #1
 8027dea:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027dee:	1200      	asrs	r0, r0, #8
 8027df0:	7048      	strb	r0, [r1, #1]
 8027df2:	7888      	ldrb	r0, [r1, #2]
 8027df4:	fb10 f303 	smulbb	r3, r0, r3
 8027df8:	fb04 3202 	mla	r2, r4, r2, r3
 8027dfc:	b292      	uxth	r2, r2
 8027dfe:	1c53      	adds	r3, r2, #1
 8027e00:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027e04:	1212      	asrs	r2, r2, #8
 8027e06:	708a      	strb	r2, [r1, #2]
 8027e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e0c:	2700      	movs	r7, #0
 8027e0e:	e761      	b.n	8027cd4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8027e10:	2600      	movs	r6, #0
 8027e12:	e77d      	b.n	8027d10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027e14:	4606      	mov	r6, r0
 8027e16:	e77b      	b.n	8027d10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027e18:	2500      	movs	r5, #0
 8027e1a:	e795      	b.n	8027d48 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8027e1c:	4663      	mov	r3, ip
 8027e1e:	4665      	mov	r5, ip
 8027e20:	e7ab      	b.n	8027d7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027e22:	2300      	movs	r3, #0
 8027e24:	e7a9      	b.n	8027d7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027e26:	4603      	mov	r3, r0
 8027e28:	e7a7      	b.n	8027d7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027e2a:	bf00      	nop
 8027e2c:	24015c58 	.word	0x24015c58

08027e30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e34:	b093      	sub	sp, #76	@ 0x4c
 8027e36:	461c      	mov	r4, r3
 8027e38:	920c      	str	r2, [sp, #48]	@ 0x30
 8027e3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027e3c:	9011      	str	r0, [sp, #68]	@ 0x44
 8027e3e:	9107      	str	r1, [sp, #28]
 8027e40:	6850      	ldr	r0, [r2, #4]
 8027e42:	6812      	ldr	r2, [r2, #0]
 8027e44:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8027e48:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8027e4c:	fb00 1303 	mla	r3, r0, r3, r1
 8027e50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027e54:	eb02 0b03 	add.w	fp, r2, r3
 8027e58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e5a:	689b      	ldr	r3, [r3, #8]
 8027e5c:	3301      	adds	r3, #1
 8027e5e:	f023 0301 	bic.w	r3, r3, #1
 8027e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8027e64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e66:	f8d3 8000 	ldr.w	r8, [r3]
 8027e6a:	9b07      	ldr	r3, [sp, #28]
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	dc03      	bgt.n	8027e78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027e72:	2b00      	cmp	r3, #0
 8027e74:	f340 822b 	ble.w	80282ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027e78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027e82:	1e48      	subs	r0, r1, #1
 8027e84:	1e57      	subs	r7, r2, #1
 8027e86:	2c00      	cmp	r4, #0
 8027e88:	f340 80d7 	ble.w	802803a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8027e8c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027e90:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027e94:	d406      	bmi.n	8027ea4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027e96:	4584      	cmp	ip, r0
 8027e98:	da04      	bge.n	8027ea4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027e9a:	2b00      	cmp	r3, #0
 8027e9c:	db02      	blt.n	8027ea4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027e9e:	42bb      	cmp	r3, r7
 8027ea0:	f2c0 80cc 	blt.w	802803c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027ea4:	f11c 0c01 	adds.w	ip, ip, #1
 8027ea8:	f100 80bf 	bmi.w	802802a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027eac:	4561      	cmp	r1, ip
 8027eae:	f2c0 80bc 	blt.w	802802a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027eb2:	3301      	adds	r3, #1
 8027eb4:	f100 80b9 	bmi.w	802802a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027eb8:	429a      	cmp	r2, r3
 8027eba:	f2c0 80b6 	blt.w	802802a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027ebe:	46a2      	mov	sl, r4
 8027ec0:	465f      	mov	r7, fp
 8027ec2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027ec6:	f1ba 0f00 	cmp.w	sl, #0
 8027eca:	f340 80d4 	ble.w	8028076 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027ece:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8027ed2:	1430      	asrs	r0, r6, #16
 8027ed4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027ed8:	9308      	str	r3, [sp, #32]
 8027eda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027edc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027ee0:	142b      	asrs	r3, r5, #16
 8027ee2:	f100 8124 	bmi.w	802812e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027ee6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8027eea:	4293      	cmp	r3, r2
 8027eec:	f280 811f 	bge.w	802812e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027ef0:	2800      	cmp	r0, #0
 8027ef2:	f2c0 811c 	blt.w	802812e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027ef6:	f10e 32ff 	add.w	r2, lr, #4294967295
 8027efa:	4290      	cmp	r0, r2
 8027efc:	f280 8117 	bge.w	802812e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027f00:	fb00 3309 	mla	r3, r0, r9, r3
 8027f04:	0858      	lsrs	r0, r3, #1
 8027f06:	07da      	lsls	r2, r3, #31
 8027f08:	9a08      	ldr	r2, [sp, #32]
 8027f0a:	f818 c000 	ldrb.w	ip, [r8, r0]
 8027f0e:	bf54      	ite	pl
 8027f10:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027f14:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027f18:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027f1c:	fa5f fc8c 	uxtb.w	ip, ip
 8027f20:	2a00      	cmp	r2, #0
 8027f22:	f000 80ed 	beq.w	8028100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8027f26:	1c58      	adds	r0, r3, #1
 8027f28:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027f2c:	07c0      	lsls	r0, r0, #31
 8027f2e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8027f32:	bf54      	ite	pl
 8027f34:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027f38:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027f3c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027f40:	fa5f fe8e 	uxtb.w	lr, lr
 8027f44:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8027f48:	b1c9      	cbz	r1, 8027f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027f4a:	444b      	add	r3, r9
 8027f4c:	0858      	lsrs	r0, r3, #1
 8027f4e:	07da      	lsls	r2, r3, #31
 8027f50:	f818 0000 	ldrb.w	r0, [r8, r0]
 8027f54:	bf54      	ite	pl
 8027f56:	f000 000f 	andpl.w	r0, r0, #15
 8027f5a:	1100      	asrmi	r0, r0, #4
 8027f5c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027f60:	b2c0      	uxtb	r0, r0
 8027f62:	900a      	str	r0, [sp, #40]	@ 0x28
 8027f64:	1c58      	adds	r0, r3, #1
 8027f66:	0843      	lsrs	r3, r0, #1
 8027f68:	07c2      	lsls	r2, r0, #31
 8027f6a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8027f6e:	bf54      	ite	pl
 8027f70:	f003 030f 	andpl.w	r3, r3, #15
 8027f74:	111b      	asrmi	r3, r3, #4
 8027f76:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027f7a:	b2db      	uxtb	r3, r3
 8027f7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8027f7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027f82:	b289      	uxth	r1, r1
 8027f84:	fb02 f301 	mul.w	r3, r2, r1
 8027f88:	0112      	lsls	r2, r2, #4
 8027f8a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027f8e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8027f92:	1ad2      	subs	r2, r2, r3
 8027f94:	b289      	uxth	r1, r1
 8027f96:	b292      	uxth	r2, r2
 8027f98:	1a40      	subs	r0, r0, r1
 8027f9a:	fa1f fe80 	uxth.w	lr, r0
 8027f9e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027fa0:	4342      	muls	r2, r0
 8027fa2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027fa8:	fb01 c102 	mla	r1, r1, r2, ip
 8027fac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027fae:	fb03 1302 	mla	r3, r3, r2, r1
 8027fb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027fb6:	b383      	cbz	r3, 802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027fb8:	4ac6      	ldr	r2, [pc, #792]	@ (80282d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027fba:	2bff      	cmp	r3, #255	@ 0xff
 8027fbc:	6812      	ldr	r2, [r2, #0]
 8027fbe:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8027fc2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8027fc6:	b2d2      	uxtb	r2, r2
 8027fc8:	f000 80ac 	beq.w	8028124 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027fcc:	b299      	uxth	r1, r3
 8027fce:	43db      	mvns	r3, r3
 8027fd0:	f897 c000 	ldrb.w	ip, [r7]
 8027fd4:	fb12 f201 	smulbb	r2, r2, r1
 8027fd8:	b2db      	uxtb	r3, r3
 8027fda:	fb10 f001 	smulbb	r0, r0, r1
 8027fde:	fb0c 2203 	mla	r2, ip, r3, r2
 8027fe2:	fb1e f101 	smulbb	r1, lr, r1
 8027fe6:	b292      	uxth	r2, r2
 8027fe8:	f102 0c01 	add.w	ip, r2, #1
 8027fec:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027ff0:	1212      	asrs	r2, r2, #8
 8027ff2:	703a      	strb	r2, [r7, #0]
 8027ff4:	787a      	ldrb	r2, [r7, #1]
 8027ff6:	fb02 0003 	mla	r0, r2, r3, r0
 8027ffa:	b280      	uxth	r0, r0
 8027ffc:	1c42      	adds	r2, r0, #1
 8027ffe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028002:	78ba      	ldrb	r2, [r7, #2]
 8028004:	fb02 1303 	mla	r3, r2, r3, r1
 8028008:	1200      	asrs	r0, r0, #8
 802800a:	b29b      	uxth	r3, r3
 802800c:	7078      	strb	r0, [r7, #1]
 802800e:	f103 0e01 	add.w	lr, r3, #1
 8028012:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8028016:	121b      	asrs	r3, r3, #8
 8028018:	70bb      	strb	r3, [r7, #2]
 802801a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802801c:	3703      	adds	r7, #3
 802801e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028022:	441d      	add	r5, r3
 8028024:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028026:	441e      	add	r6, r3
 8028028:	e74d      	b.n	8027ec6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802802a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802802c:	3c01      	subs	r4, #1
 802802e:	f10b 0b03 	add.w	fp, fp, #3
 8028032:	441d      	add	r5, r3
 8028034:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028036:	441e      	add	r6, r3
 8028038:	e725      	b.n	8027e86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802803a:	d021      	beq.n	8028080 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802803c:	1e63      	subs	r3, r4, #1
 802803e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028040:	fb00 5003 	mla	r0, r0, r3, r5
 8028044:	1400      	asrs	r0, r0, #16
 8028046:	f53f af3a 	bmi.w	8027ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802804a:	3901      	subs	r1, #1
 802804c:	4288      	cmp	r0, r1
 802804e:	f6bf af36 	bge.w	8027ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028052:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028054:	fb01 6303 	mla	r3, r1, r3, r6
 8028058:	141b      	asrs	r3, r3, #16
 802805a:	f53f af30 	bmi.w	8027ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802805e:	3a01      	subs	r2, #1
 8028060:	4293      	cmp	r3, r2
 8028062:	f6bf af2c 	bge.w	8027ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028066:	f10b 0c03 	add.w	ip, fp, #3
 802806a:	46a6      	mov	lr, r4
 802806c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028070:	f1be 0f00 	cmp.w	lr, #0
 8028074:	dc79      	bgt.n	802816a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028076:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802807a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802807e:	44a3      	add	fp, r4
 8028080:	9b07      	ldr	r3, [sp, #28]
 8028082:	2b00      	cmp	r3, #0
 8028084:	f340 8123 	ble.w	80282ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802808c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802808e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028092:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028096:	eef0 6a62 	vmov.f32	s13, s5
 802809a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802809e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80280a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280a6:	ee16 5a90 	vmov	r5, s13
 80280aa:	eef0 6a43 	vmov.f32	s13, s6
 80280ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280b2:	ee16 6a90 	vmov	r6, s13
 80280b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80280ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80280be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80280c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80280c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80280ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80280ce:	ee12 2a90 	vmov	r2, s5
 80280d2:	eef0 2a47 	vmov.f32	s5, s14
 80280d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80280da:	ee13 2a10 	vmov	r2, s6
 80280de:	931f      	str	r3, [sp, #124]	@ 0x7c
 80280e0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80280e2:	eeb0 3a67 	vmov.f32	s6, s15
 80280e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80280ea:	9320      	str	r3, [sp, #128]	@ 0x80
 80280ec:	9b07      	ldr	r3, [sp, #28]
 80280ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80280f0:	3b01      	subs	r3, #1
 80280f2:	9307      	str	r3, [sp, #28]
 80280f4:	bf08      	it	eq
 80280f6:	4614      	moveq	r4, r2
 80280f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80280fa:	bf18      	it	ne
 80280fc:	461c      	movne	r4, r3
 80280fe:	e6b4      	b.n	8027e6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028100:	2900      	cmp	r1, #0
 8028102:	f43f af3c 	beq.w	8027f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028106:	eb09 0003 	add.w	r0, r9, r3
 802810a:	0843      	lsrs	r3, r0, #1
 802810c:	07c0      	lsls	r0, r0, #31
 802810e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8028112:	bf54      	ite	pl
 8028114:	f003 030f 	andpl.w	r3, r3, #15
 8028118:	111b      	asrmi	r3, r3, #4
 802811a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802811e:	b2db      	uxtb	r3, r3
 8028120:	930a      	str	r3, [sp, #40]	@ 0x28
 8028122:	e72c      	b.n	8027f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028124:	703a      	strb	r2, [r7, #0]
 8028126:	7078      	strb	r0, [r7, #1]
 8028128:	f887 e002 	strb.w	lr, [r7, #2]
 802812c:	e775      	b.n	802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802812e:	1c5a      	adds	r2, r3, #1
 8028130:	f53f af73 	bmi.w	802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028134:	4594      	cmp	ip, r2
 8028136:	f6ff af70 	blt.w	802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802813a:	1c42      	adds	r2, r0, #1
 802813c:	f53f af6d 	bmi.w	802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028140:	4596      	cmp	lr, r2
 8028142:	f6ff af6a 	blt.w	802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028146:	9302      	str	r3, [sp, #8]
 8028148:	fa0f f38e 	sxth.w	r3, lr
 802814c:	9a08      	ldr	r2, [sp, #32]
 802814e:	9301      	str	r3, [sp, #4]
 8028150:	fa0f f38c 	sxth.w	r3, ip
 8028154:	9105      	str	r1, [sp, #20]
 8028156:	4639      	mov	r1, r7
 8028158:	9300      	str	r3, [sp, #0]
 802815a:	464b      	mov	r3, r9
 802815c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028160:	4642      	mov	r2, r8
 8028162:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028164:	f7ff fd90 	bl	8027c88 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8028168:	e757      	b.n	802801a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802816a:	142a      	asrs	r2, r5, #16
 802816c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8028170:	1433      	asrs	r3, r6, #16
 8028172:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8028176:	fb09 2303 	mla	r3, r9, r3, r2
 802817a:	085a      	lsrs	r2, r3, #1
 802817c:	07d9      	lsls	r1, r3, #31
 802817e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8028182:	bf54      	ite	pl
 8028184:	f002 020f 	andpl.w	r2, r2, #15
 8028188:	1112      	asrmi	r2, r2, #4
 802818a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802818e:	b2d2      	uxtb	r2, r2
 8028190:	2800      	cmp	r0, #0
 8028192:	f000 8085 	beq.w	80282a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8028196:	f103 0a01 	add.w	sl, r3, #1
 802819a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802819e:	f01a 0f01 	tst.w	sl, #1
 80281a2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80281a6:	bf0c      	ite	eq
 80281a8:	f001 010f 	andeq.w	r1, r1, #15
 80281ac:	1109      	asrne	r1, r1, #4
 80281ae:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80281b2:	b2c9      	uxtb	r1, r1
 80281b4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80281b6:	b1df      	cbz	r7, 80281f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80281b8:	444b      	add	r3, r9
 80281ba:	0859      	lsrs	r1, r3, #1
 80281bc:	f013 0f01 	tst.w	r3, #1
 80281c0:	f103 0301 	add.w	r3, r3, #1
 80281c4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80281c8:	bf0c      	ite	eq
 80281ca:	f001 010f 	andeq.w	r1, r1, #15
 80281ce:	1109      	asrne	r1, r1, #4
 80281d0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80281d4:	b2c9      	uxtb	r1, r1
 80281d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80281d8:	0859      	lsrs	r1, r3, #1
 80281da:	07db      	lsls	r3, r3, #31
 80281dc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80281e0:	bf54      	ite	pl
 80281e2:	f001 010f 	andpl.w	r1, r1, #15
 80281e6:	1109      	asrmi	r1, r1, #4
 80281e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80281ec:	b2c9      	uxtb	r1, r1
 80281ee:	9110      	str	r1, [sp, #64]	@ 0x40
 80281f0:	b280      	uxth	r0, r0
 80281f2:	b2bf      	uxth	r7, r7
 80281f4:	fb00 f307 	mul.w	r3, r0, r7
 80281f8:	0100      	lsls	r0, r0, #4
 80281fa:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80281fe:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8028202:	1ac0      	subs	r0, r0, r3
 8028204:	b2bf      	uxth	r7, r7
 8028206:	b280      	uxth	r0, r0
 8028208:	1bc9      	subs	r1, r1, r7
 802820a:	fa1f fa81 	uxth.w	sl, r1
 802820e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8028210:	4348      	muls	r0, r1
 8028212:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028214:	fb02 020a 	mla	r2, r2, sl, r0
 8028218:	fb07 2701 	mla	r7, r7, r1, r2
 802821c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802821e:	fb03 7302 	mla	r3, r3, r2, r7
 8028222:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028226:	b393      	cbz	r3, 802828e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028228:	4a2a      	ldr	r2, [pc, #168]	@ (80282d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802822a:	2bff      	cmp	r3, #255	@ 0xff
 802822c:	6811      	ldr	r1, [r2, #0]
 802822e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8028232:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8028236:	b2c9      	uxtb	r1, r1
 8028238:	d042      	beq.n	80282c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802823a:	b298      	uxth	r0, r3
 802823c:	43db      	mvns	r3, r3
 802823e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8028242:	fb11 f100 	smulbb	r1, r1, r0
 8028246:	b2db      	uxtb	r3, r3
 8028248:	fb17 f700 	smulbb	r7, r7, r0
 802824c:	fb02 1103 	mla	r1, r2, r3, r1
 8028250:	fb1a f000 	smulbb	r0, sl, r0
 8028254:	b289      	uxth	r1, r1
 8028256:	1c4a      	adds	r2, r1, #1
 8028258:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802825c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8028260:	fb02 7703 	mla	r7, r2, r3, r7
 8028264:	1209      	asrs	r1, r1, #8
 8028266:	b2bf      	uxth	r7, r7
 8028268:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802826c:	1c7a      	adds	r2, r7, #1
 802826e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8028272:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8028276:	fb02 0303 	mla	r3, r2, r3, r0
 802827a:	123f      	asrs	r7, r7, #8
 802827c:	b29b      	uxth	r3, r3
 802827e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8028282:	1c5a      	adds	r2, r3, #1
 8028284:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028288:	121b      	asrs	r3, r3, #8
 802828a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802828e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028290:	f10c 0c03 	add.w	ip, ip, #3
 8028294:	f10e 3eff 	add.w	lr, lr, #4294967295
 8028298:	441d      	add	r5, r3
 802829a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802829c:	441e      	add	r6, r3
 802829e:	e6e7      	b.n	8028070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80282a0:	2f00      	cmp	r7, #0
 80282a2:	d0a5      	beq.n	80281f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80282a4:	444b      	add	r3, r9
 80282a6:	0859      	lsrs	r1, r3, #1
 80282a8:	07db      	lsls	r3, r3, #31
 80282aa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80282ae:	bf54      	ite	pl
 80282b0:	f001 010f 	andpl.w	r1, r1, #15
 80282b4:	1109      	asrmi	r1, r1, #4
 80282b6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80282ba:	b2c9      	uxtb	r1, r1
 80282bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80282be:	e797      	b.n	80281f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80282c0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80282c4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80282c8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80282cc:	e7df      	b.n	802828e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80282ce:	b013      	add	sp, #76	@ 0x4c
 80282d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282d4:	24015c58 	.word	0x24015c58

080282d8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80282d8:	b530      	push	{r4, r5, lr}
 80282da:	b29d      	uxth	r5, r3
 80282dc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80282e0:	780c      	ldrb	r4, [r1, #0]
 80282e2:	b298      	uxth	r0, r3
 80282e4:	7813      	ldrb	r3, [r2, #0]
 80282e6:	fb14 f405 	smulbb	r4, r4, r5
 80282ea:	fb13 f300 	smulbb	r3, r3, r0
 80282ee:	441c      	add	r4, r3
 80282f0:	b2a4      	uxth	r4, r4
 80282f2:	1c63      	adds	r3, r4, #1
 80282f4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80282f8:	7853      	ldrb	r3, [r2, #1]
 80282fa:	fb13 f300 	smulbb	r3, r3, r0
 80282fe:	1224      	asrs	r4, r4, #8
 8028300:	7014      	strb	r4, [r2, #0]
 8028302:	784c      	ldrb	r4, [r1, #1]
 8028304:	fb14 f405 	smulbb	r4, r4, r5
 8028308:	441c      	add	r4, r3
 802830a:	b2a4      	uxth	r4, r4
 802830c:	1c63      	adds	r3, r4, #1
 802830e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028312:	1224      	asrs	r4, r4, #8
 8028314:	7054      	strb	r4, [r2, #1]
 8028316:	788b      	ldrb	r3, [r1, #2]
 8028318:	7891      	ldrb	r1, [r2, #2]
 802831a:	fb13 f305 	smulbb	r3, r3, r5
 802831e:	fb11 f000 	smulbb	r0, r1, r0
 8028322:	4403      	add	r3, r0
 8028324:	b29b      	uxth	r3, r3
 8028326:	1c59      	adds	r1, r3, #1
 8028328:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802832c:	121b      	asrs	r3, r3, #8
 802832e:	7093      	strb	r3, [r2, #2]
 8028330:	bd30      	pop	{r4, r5, pc}
	...

08028334 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8028334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028338:	461c      	mov	r4, r3
 802833a:	b08b      	sub	sp, #44	@ 0x2c
 802833c:	460e      	mov	r6, r1
 802833e:	4615      	mov	r5, r2
 8028340:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028342:	4682      	mov	sl, r0
 8028344:	6861      	ldr	r1, [r4, #4]
 8028346:	aa06      	add	r2, sp, #24
 8028348:	6820      	ldr	r0, [r4, #0]
 802834a:	2702      	movs	r7, #2
 802834c:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8028350:	3504      	adds	r5, #4
 8028352:	c203      	stmia	r2!, {r0, r1}
 8028354:	6818      	ldr	r0, [r3, #0]
 8028356:	aa08      	add	r2, sp, #32
 8028358:	6859      	ldr	r1, [r3, #4]
 802835a:	c203      	stmia	r2!, {r0, r1}
 802835c:	a806      	add	r0, sp, #24
 802835e:	f7f3 fec1 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028362:	4621      	mov	r1, r4
 8028364:	a808      	add	r0, sp, #32
 8028366:	f7f3 fee5 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802836a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802836e:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8028372:	f002 0301 	and.w	r3, r2, #1
 8028376:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802837a:	9302      	str	r3, [sp, #8]
 802837c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8028380:	f003 0101 	and.w	r1, r3, #1
 8028384:	9101      	str	r1, [sp, #4]
 8028386:	9801      	ldr	r0, [sp, #4]
 8028388:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802838c:	4403      	add	r3, r0
 802838e:	fb01 2303 	mla	r3, r1, r3, r2
 8028392:	fb93 f3f7 	sdiv	r3, r3, r7
 8028396:	441e      	add	r6, r3
 8028398:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802839c:	441a      	add	r2, r3
 802839e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80283a2:	4419      	add	r1, r3
 80283a4:	4b70      	ldr	r3, [pc, #448]	@ (8028568 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80283a6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80283aa:	6818      	ldr	r0, [r3, #0]
 80283ac:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80283b0:	6803      	ldr	r3, [r0, #0]
 80283b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80283b4:	4798      	blx	r3
 80283b6:	4a6d      	ldr	r2, [pc, #436]	@ (802856c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80283b8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80283bc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80283c0:	8813      	ldrh	r3, [r2, #0]
 80283c2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80283c6:	fb03 1404 	mla	r4, r3, r4, r1
 80283ca:	4611      	mov	r1, r2
 80283cc:	fb0b f303 	mul.w	r3, fp, r3
 80283d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80283d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80283d8:	4404      	add	r4, r0
 80283da:	4423      	add	r3, r4
 80283dc:	d073      	beq.n	80284c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80283de:	9705      	str	r7, [sp, #20]
 80283e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80283e4:	9b03      	ldr	r3, [sp, #12]
 80283e6:	429c      	cmp	r4, r3
 80283e8:	f080 80b5 	bcs.w	8028556 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80283ec:	9b02      	ldr	r3, [sp, #8]
 80283ee:	b35b      	cbz	r3, 8028448 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80283f0:	7831      	ldrb	r1, [r6, #0]
 80283f2:	4622      	mov	r2, r4
 80283f4:	1c77      	adds	r7, r6, #1
 80283f6:	3403      	adds	r4, #3
 80283f8:	f001 010f 	and.w	r1, r1, #15
 80283fc:	f108 3bff 	add.w	fp, r8, #4294967295
 8028400:	464b      	mov	r3, r9
 8028402:	4650      	mov	r0, sl
 8028404:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028408:	4429      	add	r1, r5
 802840a:	f7ff ff65 	bl	80282d8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802840e:	f1bb 0f01 	cmp.w	fp, #1
 8028412:	dd1c      	ble.n	802844e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8028414:	7839      	ldrb	r1, [r7, #0]
 8028416:	4622      	mov	r2, r4
 8028418:	464b      	mov	r3, r9
 802841a:	4650      	mov	r0, sl
 802841c:	0909      	lsrs	r1, r1, #4
 802841e:	f1ab 0b02 	sub.w	fp, fp, #2
 8028422:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028426:	4429      	add	r1, r5
 8028428:	f7ff ff56 	bl	80282d8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802842c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8028430:	1ce2      	adds	r2, r4, #3
 8028432:	464b      	mov	r3, r9
 8028434:	f001 010f 	and.w	r1, r1, #15
 8028438:	4650      	mov	r0, sl
 802843a:	3406      	adds	r4, #6
 802843c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028440:	4429      	add	r1, r5
 8028442:	f7ff ff49 	bl	80282d8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028446:	e7e2      	b.n	802840e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8028448:	4637      	mov	r7, r6
 802844a:	46c3      	mov	fp, r8
 802844c:	e7df      	b.n	802840e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802844e:	d10a      	bne.n	8028466 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8028450:	7839      	ldrb	r1, [r7, #0]
 8028452:	4622      	mov	r2, r4
 8028454:	3403      	adds	r4, #3
 8028456:	464b      	mov	r3, r9
 8028458:	0909      	lsrs	r1, r1, #4
 802845a:	4650      	mov	r0, sl
 802845c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028460:	4429      	add	r1, r5
 8028462:	f7ff ff39 	bl	80282d8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028466:	9b04      	ldr	r3, [sp, #16]
 8028468:	9a01      	ldr	r2, [sp, #4]
 802846a:	881b      	ldrh	r3, [r3, #0]
 802846c:	eba3 0308 	sub.w	r3, r3, r8
 8028470:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028474:	441c      	add	r4, r3
 8028476:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802847a:	4413      	add	r3, r2
 802847c:	9a05      	ldr	r2, [sp, #20]
 802847e:	fb93 f3f2 	sdiv	r3, r3, r2
 8028482:	441e      	add	r6, r3
 8028484:	e7ae      	b.n	80283e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8028486:	4632      	mov	r2, r6
 8028488:	46c4      	mov	ip, r8
 802848a:	e037      	b.n	80284fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802848c:	d10e      	bne.n	80284ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802848e:	7812      	ldrb	r2, [r2, #0]
 8028490:	3003      	adds	r0, #3
 8028492:	0912      	lsrs	r2, r2, #4
 8028494:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028498:	18ac      	adds	r4, r5, r2
 802849a:	5caa      	ldrb	r2, [r5, r2]
 802849c:	f800 2c03 	strb.w	r2, [r0, #-3]
 80284a0:	7862      	ldrb	r2, [r4, #1]
 80284a2:	f800 2c02 	strb.w	r2, [r0, #-2]
 80284a6:	78a2      	ldrb	r2, [r4, #2]
 80284a8:	f800 2c01 	strb.w	r2, [r0, #-1]
 80284ac:	880c      	ldrh	r4, [r1, #0]
 80284ae:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80284b2:	eba4 0408 	sub.w	r4, r4, r8
 80284b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80284ba:	4404      	add	r4, r0
 80284bc:	9801      	ldr	r0, [sp, #4]
 80284be:	4402      	add	r2, r0
 80284c0:	fb92 f2f7 	sdiv	r2, r2, r7
 80284c4:	4416      	add	r6, r2
 80284c6:	429c      	cmp	r4, r3
 80284c8:	d245      	bcs.n	8028556 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80284ca:	9a02      	ldr	r2, [sp, #8]
 80284cc:	2a00      	cmp	r2, #0
 80284ce:	d0da      	beq.n	8028486 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80284d0:	7830      	ldrb	r0, [r6, #0]
 80284d2:	1c72      	adds	r2, r6, #1
 80284d4:	3403      	adds	r4, #3
 80284d6:	f000 000f 	and.w	r0, r0, #15
 80284da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80284de:	eb05 0c00 	add.w	ip, r5, r0
 80284e2:	5c28      	ldrb	r0, [r5, r0]
 80284e4:	f804 0c03 	strb.w	r0, [r4, #-3]
 80284e8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80284ec:	f804 0c02 	strb.w	r0, [r4, #-2]
 80284f0:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80284f4:	f108 3cff 	add.w	ip, r8, #4294967295
 80284f8:	f804 0c01 	strb.w	r0, [r4, #-1]
 80284fc:	f1bc 0f01 	cmp.w	ip, #1
 8028500:	4620      	mov	r0, r4
 8028502:	f104 0406 	add.w	r4, r4, #6
 8028506:	ddc1      	ble.n	802848c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8028508:	7810      	ldrb	r0, [r2, #0]
 802850a:	f1ac 0c02 	sub.w	ip, ip, #2
 802850e:	0900      	lsrs	r0, r0, #4
 8028510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028514:	eb05 0e00 	add.w	lr, r5, r0
 8028518:	5c28      	ldrb	r0, [r5, r0]
 802851a:	f804 0c06 	strb.w	r0, [r4, #-6]
 802851e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028522:	f804 0c05 	strb.w	r0, [r4, #-5]
 8028526:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802852a:	f804 0c04 	strb.w	r0, [r4, #-4]
 802852e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8028532:	f000 000f 	and.w	r0, r0, #15
 8028536:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802853a:	eb05 0e00 	add.w	lr, r5, r0
 802853e:	5c28      	ldrb	r0, [r5, r0]
 8028540:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028544:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028548:	f804 0c02 	strb.w	r0, [r4, #-2]
 802854c:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028550:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028554:	e7d2      	b.n	80284fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8028556:	4b04      	ldr	r3, [pc, #16]	@ (8028568 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8028558:	6818      	ldr	r0, [r3, #0]
 802855a:	6803      	ldr	r3, [r0, #0]
 802855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802855e:	4798      	blx	r3
 8028560:	b00b      	add	sp, #44	@ 0x2c
 8028562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028566:	bf00      	nop
 8028568:	24015c48 	.word	0x24015c48
 802856c:	24015c42 	.word	0x24015c42

08028570 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8028570:	b530      	push	{r4, r5, lr}
 8028572:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8028576:	780d      	ldrb	r5, [r1, #0]
 8028578:	28ff      	cmp	r0, #255	@ 0xff
 802857a:	d107      	bne.n	802858c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802857c:	2bff      	cmp	r3, #255	@ 0xff
 802857e:	d105      	bne.n	802858c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028580:	7015      	strb	r5, [r2, #0]
 8028582:	784b      	ldrb	r3, [r1, #1]
 8028584:	7053      	strb	r3, [r2, #1]
 8028586:	788b      	ldrb	r3, [r1, #2]
 8028588:	7093      	strb	r3, [r2, #2]
 802858a:	bd30      	pop	{r4, r5, pc}
 802858c:	fb10 f003 	smulbb	r0, r0, r3
 8028590:	b283      	uxth	r3, r0
 8028592:	1c58      	adds	r0, r3, #1
 8028594:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028598:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802859c:	b284      	uxth	r4, r0
 802859e:	43c0      	mvns	r0, r0
 80285a0:	fb15 f504 	smulbb	r5, r5, r4
 80285a4:	b2c3      	uxtb	r3, r0
 80285a6:	7810      	ldrb	r0, [r2, #0]
 80285a8:	fb00 5003 	mla	r0, r0, r3, r5
 80285ac:	b280      	uxth	r0, r0
 80285ae:	1c45      	adds	r5, r0, #1
 80285b0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80285b4:	7855      	ldrb	r5, [r2, #1]
 80285b6:	fb15 f503 	smulbb	r5, r5, r3
 80285ba:	1200      	asrs	r0, r0, #8
 80285bc:	7010      	strb	r0, [r2, #0]
 80285be:	7848      	ldrb	r0, [r1, #1]
 80285c0:	fb00 5004 	mla	r0, r0, r4, r5
 80285c4:	b280      	uxth	r0, r0
 80285c6:	1c45      	adds	r5, r0, #1
 80285c8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80285cc:	1200      	asrs	r0, r0, #8
 80285ce:	7050      	strb	r0, [r2, #1]
 80285d0:	7888      	ldrb	r0, [r1, #2]
 80285d2:	7891      	ldrb	r1, [r2, #2]
 80285d4:	fb11 f303 	smulbb	r3, r1, r3
 80285d8:	fb00 3304 	mla	r3, r0, r4, r3
 80285dc:	b29b      	uxth	r3, r3
 80285de:	1c59      	adds	r1, r3, #1
 80285e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80285e4:	121b      	asrs	r3, r3, #8
 80285e6:	e7cf      	b.n	8028588 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080285e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80285e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285ec:	461d      	mov	r5, r3
 80285ee:	b08f      	sub	sp, #60	@ 0x3c
 80285f0:	460c      	mov	r4, r1
 80285f2:	4616      	mov	r6, r2
 80285f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80285f6:	4680      	mov	r8, r0
 80285f8:	6869      	ldr	r1, [r5, #4]
 80285fa:	aa0a      	add	r2, sp, #40	@ 0x28
 80285fc:	6828      	ldr	r0, [r5, #0]
 80285fe:	3604      	adds	r6, #4
 8028600:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8028604:	4f57      	ldr	r7, [pc, #348]	@ (8028764 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8028606:	c203      	stmia	r2!, {r0, r1}
 8028608:	6818      	ldr	r0, [r3, #0]
 802860a:	aa0c      	add	r2, sp, #48	@ 0x30
 802860c:	6859      	ldr	r1, [r3, #4]
 802860e:	c203      	stmia	r2!, {r0, r1}
 8028610:	a80a      	add	r0, sp, #40	@ 0x28
 8028612:	f7f3 fd67 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028616:	4629      	mov	r1, r5
 8028618:	a80c      	add	r0, sp, #48	@ 0x30
 802861a:	2502      	movs	r5, #2
 802861c:	f7f3 fd8a 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028620:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028624:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8028628:	f002 0301 	and.w	r3, r2, #1
 802862c:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8028630:	9304      	str	r3, [sp, #16]
 8028632:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028636:	f003 0101 	and.w	r1, r3, #1
 802863a:	9103      	str	r1, [sp, #12]
 802863c:	9803      	ldr	r0, [sp, #12]
 802863e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028642:	4403      	add	r3, r0
 8028644:	6838      	ldr	r0, [r7, #0]
 8028646:	fb01 2303 	mla	r3, r1, r3, r2
 802864a:	fb93 f3f5 	sdiv	r3, r3, r5
 802864e:	18e5      	adds	r5, r4, r3
 8028650:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028654:	441a      	add	r2, r3
 8028656:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802865a:	4419      	add	r1, r3
 802865c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028660:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028664:	6803      	ldr	r3, [r0, #0]
 8028666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028668:	4798      	blx	r3
 802866a:	4a3f      	ldr	r2, [pc, #252]	@ (8028768 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 802866c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028670:	8813      	ldrh	r3, [r2, #0]
 8028672:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8028676:	9207      	str	r2, [sp, #28]
 8028678:	fb03 1404 	mla	r4, r3, r4, r1
 802867c:	fb0a f303 	mul.w	r3, sl, r3
 8028680:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028688:	4404      	add	r4, r0
 802868a:	18e3      	adds	r3, r4, r3
 802868c:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8028690:	9b05      	ldr	r3, [sp, #20]
 8028692:	429c      	cmp	r4, r3
 8028694:	d25d      	bcs.n	8028752 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8028696:	9b04      	ldr	r3, [sp, #16]
 8028698:	2b00      	cmp	r3, #0
 802869a:	d037      	beq.n	802870c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 802869c:	782b      	ldrb	r3, [r5, #0]
 802869e:	1c6f      	adds	r7, r5, #1
 80286a0:	f003 030f 	and.w	r3, r3, #15
 80286a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80286a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80286aa:	0e1b      	lsrs	r3, r3, #24
 80286ac:	d006      	beq.n	80286bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80286ae:	9300      	str	r3, [sp, #0]
 80286b0:	4622      	mov	r2, r4
 80286b2:	464b      	mov	r3, r9
 80286b4:	a909      	add	r1, sp, #36	@ 0x24
 80286b6:	4640      	mov	r0, r8
 80286b8:	f7ff ff5a 	bl	8028570 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80286bc:	3403      	adds	r4, #3
 80286be:	f10b 3aff 	add.w	sl, fp, #4294967295
 80286c2:	f1ba 0f01 	cmp.w	sl, #1
 80286c6:	dd24      	ble.n	8028712 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80286c8:	783b      	ldrb	r3, [r7, #0]
 80286ca:	091b      	lsrs	r3, r3, #4
 80286cc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80286d0:	9308      	str	r3, [sp, #32]
 80286d2:	0e1b      	lsrs	r3, r3, #24
 80286d4:	d006      	beq.n	80286e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80286d6:	9300      	str	r3, [sp, #0]
 80286d8:	4622      	mov	r2, r4
 80286da:	464b      	mov	r3, r9
 80286dc:	a908      	add	r1, sp, #32
 80286de:	4640      	mov	r0, r8
 80286e0:	f7ff ff46 	bl	8028570 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80286e4:	f817 3b01 	ldrb.w	r3, [r7], #1
 80286e8:	f003 030f 	and.w	r3, r3, #15
 80286ec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80286f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80286f2:	0e1b      	lsrs	r3, r3, #24
 80286f4:	d006      	beq.n	8028704 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80286f6:	9300      	str	r3, [sp, #0]
 80286f8:	1ce2      	adds	r2, r4, #3
 80286fa:	464b      	mov	r3, r9
 80286fc:	a909      	add	r1, sp, #36	@ 0x24
 80286fe:	4640      	mov	r0, r8
 8028700:	f7ff ff36 	bl	8028570 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028704:	3406      	adds	r4, #6
 8028706:	f1aa 0a02 	sub.w	sl, sl, #2
 802870a:	e7da      	b.n	80286c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802870c:	462f      	mov	r7, r5
 802870e:	46da      	mov	sl, fp
 8028710:	e7d7      	b.n	80286c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028712:	d10e      	bne.n	8028732 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8028714:	783b      	ldrb	r3, [r7, #0]
 8028716:	091b      	lsrs	r3, r3, #4
 8028718:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802871c:	9309      	str	r3, [sp, #36]	@ 0x24
 802871e:	0e1b      	lsrs	r3, r3, #24
 8028720:	d006      	beq.n	8028730 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8028722:	9300      	str	r3, [sp, #0]
 8028724:	4622      	mov	r2, r4
 8028726:	464b      	mov	r3, r9
 8028728:	a909      	add	r1, sp, #36	@ 0x24
 802872a:	4640      	mov	r0, r8
 802872c:	f7ff ff20 	bl	8028570 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028730:	3403      	adds	r4, #3
 8028732:	9b07      	ldr	r3, [sp, #28]
 8028734:	9a03      	ldr	r2, [sp, #12]
 8028736:	881b      	ldrh	r3, [r3, #0]
 8028738:	eba3 030b 	sub.w	r3, r3, fp
 802873c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028740:	441c      	add	r4, r3
 8028742:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028746:	4413      	add	r3, r2
 8028748:	2202      	movs	r2, #2
 802874a:	fb93 f3f2 	sdiv	r3, r3, r2
 802874e:	441d      	add	r5, r3
 8028750:	e79e      	b.n	8028690 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8028752:	9b06      	ldr	r3, [sp, #24]
 8028754:	6818      	ldr	r0, [r3, #0]
 8028756:	6803      	ldr	r3, [r0, #0]
 8028758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802875a:	4798      	blx	r3
 802875c:	b00f      	add	sp, #60	@ 0x3c
 802875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028762:	bf00      	nop
 8028764:	24015c48 	.word	0x24015c48
 8028768:	24015c42 	.word	0x24015c42

0802876c <CRC_Lock>:
 802876c:	4a20      	ldr	r2, [pc, #128]	@ (80287f0 <CRC_Lock+0x84>)
 802876e:	b530      	push	{r4, r5, lr}
 8028770:	6813      	ldr	r3, [r2, #0]
 8028772:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 8028776:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802877a:	f023 0301 	bic.w	r3, r3, #1
 802877e:	6013      	str	r3, [r2, #0]
 8028780:	4b1c      	ldr	r3, [pc, #112]	@ (80287f4 <CRC_Lock+0x88>)
 8028782:	681a      	ldr	r2, [r3, #0]
 8028784:	4022      	ands	r2, r4
 8028786:	42aa      	cmp	r2, r5
 8028788:	d005      	beq.n	8028796 <CRC_Lock+0x2a>
 802878a:	681b      	ldr	r3, [r3, #0]
 802878c:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8028790:	4023      	ands	r3, r4
 8028792:	4293      	cmp	r3, r2
 8028794:	d124      	bne.n	80287e0 <CRC_Lock+0x74>
 8028796:	4b18      	ldr	r3, [pc, #96]	@ (80287f8 <CRC_Lock+0x8c>)
 8028798:	681b      	ldr	r3, [r3, #0]
 802879a:	bb0b      	cbnz	r3, 80287e0 <CRC_Lock+0x74>
 802879c:	4b17      	ldr	r3, [pc, #92]	@ (80287fc <CRC_Lock+0x90>)
 802879e:	681a      	ldr	r2, [r3, #0]
 80287a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80287a4:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80287a8:	d00d      	beq.n	80287c6 <CRC_Lock+0x5a>
 80287aa:	681a      	ldr	r2, [r3, #0]
 80287ac:	f240 4483 	movw	r4, #1155	@ 0x483
 80287b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80287b4:	42a2      	cmp	r2, r4
 80287b6:	d006      	beq.n	80287c6 <CRC_Lock+0x5a>
 80287b8:	681b      	ldr	r3, [r3, #0]
 80287ba:	f240 4285 	movw	r2, #1157	@ 0x485
 80287be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80287c2:	4293      	cmp	r3, r2
 80287c4:	d10c      	bne.n	80287e0 <CRC_Lock+0x74>
 80287c6:	4b0e      	ldr	r3, [pc, #56]	@ (8028800 <CRC_Lock+0x94>)
 80287c8:	2201      	movs	r2, #1
 80287ca:	601a      	str	r2, [r3, #0]
 80287cc:	681a      	ldr	r2, [r3, #0]
 80287ce:	2a00      	cmp	r2, #0
 80287d0:	d1fc      	bne.n	80287cc <CRC_Lock+0x60>
 80287d2:	4b0c      	ldr	r3, [pc, #48]	@ (8028804 <CRC_Lock+0x98>)
 80287d4:	6018      	str	r0, [r3, #0]
 80287d6:	6818      	ldr	r0, [r3, #0]
 80287d8:	1a43      	subs	r3, r0, r1
 80287da:	4258      	negs	r0, r3
 80287dc:	4158      	adcs	r0, r3
 80287de:	bd30      	pop	{r4, r5, pc}
 80287e0:	4b09      	ldr	r3, [pc, #36]	@ (8028808 <CRC_Lock+0x9c>)
 80287e2:	2201      	movs	r2, #1
 80287e4:	601a      	str	r2, [r3, #0]
 80287e6:	681a      	ldr	r2, [r3, #0]
 80287e8:	2a00      	cmp	r2, #0
 80287ea:	d1fc      	bne.n	80287e6 <CRC_Lock+0x7a>
 80287ec:	4b07      	ldr	r3, [pc, #28]	@ (802880c <CRC_Lock+0xa0>)
 80287ee:	e7f1      	b.n	80287d4 <CRC_Lock+0x68>
 80287f0:	e0002000 	.word	0xe0002000
 80287f4:	e000ed00 	.word	0xe000ed00
 80287f8:	e0042000 	.word	0xe0042000
 80287fc:	5c001000 	.word	0x5c001000
 8028800:	58024c08 	.word	0x58024c08
 8028804:	58024c00 	.word	0x58024c00
 8028808:	40023008 	.word	0x40023008
 802880c:	40023000 	.word	0x40023000

08028810 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028810:	6101      	str	r1, [r0, #16]
 8028812:	4770      	bx	lr

08028814 <_ZN8touchgfx8Gestures4tickEv>:
 8028814:	7b83      	ldrb	r3, [r0, #14]
 8028816:	b14b      	cbz	r3, 802882c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028818:	8903      	ldrh	r3, [r0, #8]
 802881a:	3301      	adds	r3, #1
 802881c:	b29b      	uxth	r3, r3
 802881e:	2b07      	cmp	r3, #7
 8028820:	8103      	strh	r3, [r0, #8]
 8028822:	bf81      	itttt	hi
 8028824:	2300      	movhi	r3, #0
 8028826:	8143      	strhhi	r3, [r0, #10]
 8028828:	8183      	strhhi	r3, [r0, #12]
 802882a:	7383      	strbhi	r3, [r0, #14]
 802882c:	4770      	bx	lr
	...

08028830 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028830:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028834:	4698      	mov	r8, r3
 8028836:	8883      	ldrh	r3, [r0, #4]
 8028838:	4604      	mov	r4, r0
 802883a:	4617      	mov	r7, r2
 802883c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028840:	eba8 0303 	sub.w	r3, r8, r3
 8028844:	4a19      	ldr	r2, [pc, #100]	@ (80288ac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028846:	460e      	mov	r6, r1
 8028848:	b21b      	sxth	r3, r3
 802884a:	88c1      	ldrh	r1, [r0, #6]
 802884c:	9200      	str	r2, [sp, #0]
 802884e:	2000      	movs	r0, #0
 8028850:	2b00      	cmp	r3, #0
 8028852:	8aa2      	ldrh	r2, [r4, #20]
 8028854:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8028858:	bfb8      	it	lt
 802885a:	425b      	neglt	r3, r3
 802885c:	f88d 0004 	strb.w	r0, [sp, #4]
 8028860:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028864:	b21b      	sxth	r3, r3
 8028866:	f8ad 800a 	strh.w	r8, [sp, #10]
 802886a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802886e:	4293      	cmp	r3, r2
 8028870:	dc07      	bgt.n	8028882 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028872:	1a69      	subs	r1, r5, r1
 8028874:	b209      	sxth	r1, r1
 8028876:	2900      	cmp	r1, #0
 8028878:	bfb8      	it	lt
 802887a:	4249      	neglt	r1, r1
 802887c:	b209      	sxth	r1, r1
 802887e:	428a      	cmp	r2, r1
 8028880:	da10      	bge.n	80288a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028882:	6920      	ldr	r0, [r4, #16]
 8028884:	4669      	mov	r1, sp
 8028886:	eba8 0606 	sub.w	r6, r8, r6
 802888a:	1bef      	subs	r7, r5, r7
 802888c:	6803      	ldr	r3, [r0, #0]
 802888e:	685b      	ldr	r3, [r3, #4]
 8028890:	4798      	blx	r3
 8028892:	2300      	movs	r3, #0
 8028894:	2001      	movs	r0, #1
 8028896:	8166      	strh	r6, [r4, #10]
 8028898:	8123      	strh	r3, [r4, #8]
 802889a:	81a7      	strh	r7, [r4, #12]
 802889c:	f8a4 8004 	strh.w	r8, [r4, #4]
 80288a0:	80e5      	strh	r5, [r4, #6]
 80288a2:	73a0      	strb	r0, [r4, #14]
 80288a4:	b004      	add	sp, #16
 80288a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80288aa:	bf00      	nop
 80288ac:	0802f840 	.word	0x0802f840

080288b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80288b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288b2:	461e      	mov	r6, r3
 80288b4:	1e4b      	subs	r3, r1, #1
 80288b6:	b085      	sub	sp, #20
 80288b8:	4604      	mov	r4, r0
 80288ba:	2b01      	cmp	r3, #1
 80288bc:	460d      	mov	r5, r1
 80288be:	4617      	mov	r7, r2
 80288c0:	d84b      	bhi.n	802895a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80288c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80288c6:	1cd3      	adds	r3, r2, #3
 80288c8:	b29b      	uxth	r3, r3
 80288ca:	2b06      	cmp	r3, #6
 80288cc:	d916      	bls.n	80288fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80288ce:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8028970 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80288d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80288d6:	f8cd c004 	str.w	ip, [sp, #4]
 80288da:	f04f 0c00 	mov.w	ip, #0
 80288de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80288e2:	6900      	ldr	r0, [r0, #16]
 80288e4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80288e8:	a901      	add	r1, sp, #4
 80288ea:	f88d c008 	strb.w	ip, [sp, #8]
 80288ee:	f8ad 200a 	strh.w	r2, [sp, #10]
 80288f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80288f6:	6803      	ldr	r3, [r0, #0]
 80288f8:	689b      	ldr	r3, [r3, #8]
 80288fa:	4798      	blx	r3
 80288fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028900:	1cd3      	adds	r3, r2, #3
 8028902:	b29b      	uxth	r3, r3
 8028904:	2b06      	cmp	r3, #6
 8028906:	d916      	bls.n	8028936 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028908:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8028970 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802890c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028910:	f8cd c004 	str.w	ip, [sp, #4]
 8028914:	f04f 0c01 	mov.w	ip, #1
 8028918:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802891c:	6920      	ldr	r0, [r4, #16]
 802891e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028922:	a901      	add	r1, sp, #4
 8028924:	f88d c008 	strb.w	ip, [sp, #8]
 8028928:	f8ad 200a 	strh.w	r2, [sp, #10]
 802892c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028930:	6803      	ldr	r3, [r0, #0]
 8028932:	689b      	ldr	r3, [r3, #8]
 8028934:	4798      	blx	r3
 8028936:	4b0d      	ldr	r3, [pc, #52]	@ (802896c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028938:	a901      	add	r1, sp, #4
 802893a:	6920      	ldr	r0, [r4, #16]
 802893c:	9301      	str	r3, [sp, #4]
 802893e:	2300      	movs	r3, #0
 8028940:	f88d 5008 	strb.w	r5, [sp, #8]
 8028944:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028948:	f8ad 600c 	strh.w	r6, [sp, #12]
 802894c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028950:	6803      	ldr	r3, [r0, #0]
 8028952:	681b      	ldr	r3, [r3, #0]
 8028954:	4798      	blx	r3
 8028956:	b005      	add	sp, #20
 8028958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802895a:	2900      	cmp	r1, #0
 802895c:	d1eb      	bne.n	8028936 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802895e:	80a2      	strh	r2, [r4, #4]
 8028960:	80c6      	strh	r6, [r0, #6]
 8028962:	60a1      	str	r1, [r4, #8]
 8028964:	81a1      	strh	r1, [r4, #12]
 8028966:	73a1      	strb	r1, [r4, #14]
 8028968:	e7e5      	b.n	8028936 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802896a:	bf00      	nop
 802896c:	0802f82c 	.word	0x0802f82c
 8028970:	0802f854 	.word	0x0802f854

08028974 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8028974:	10c9      	asrs	r1, r1, #3
 8028976:	2900      	cmp	r1, #0
 8028978:	bfb8      	it	lt
 802897a:	4249      	neglt	r1, r1
 802897c:	2801      	cmp	r0, #1
 802897e:	d108      	bne.n	8028992 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028980:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028984:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8028988:	4601      	mov	r1, r0
 802898a:	dd02      	ble.n	8028992 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802898c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8028990:	4770      	bx	lr
 8028992:	29ff      	cmp	r1, #255	@ 0xff
 8028994:	bfa8      	it	ge
 8028996:	21ff      	movge	r1, #255	@ 0xff
 8028998:	4608      	mov	r0, r1
 802899a:	4770      	bx	lr

0802899c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802899c:	b410      	push	{r4}
 802899e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80289a2:	429c      	cmp	r4, r3
 80289a4:	d803      	bhi.n	80289ae <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80289a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80289aa:	f7f2 bb4f 	b.w	801b04c <_ZN8touchgfx7Outline6lineToEii>
 80289ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80289b2:	4770      	bx	lr

080289b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80289b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289b8:	b08b      	sub	sp, #44	@ 0x2c
 80289ba:	4606      	mov	r6, r0
 80289bc:	468a      	mov	sl, r1
 80289be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80289c2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80289c6:	9308      	str	r3, [sp, #32]
 80289c8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80289cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80289ce:	f7f2 fca8 	bl	801b322 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80289d2:	68b5      	ldr	r5, [r6, #8]
 80289d4:	4604      	mov	r4, r0
 80289d6:	2d00      	cmp	r5, #0
 80289d8:	d044      	beq.n	8028a64 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80289da:	6873      	ldr	r3, [r6, #4]
 80289dc:	42ab      	cmp	r3, r5
 80289de:	d33d      	bcc.n	8028a5c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80289e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80289e4:	f04f 0800 	mov.w	r8, #0
 80289e8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80289ec:	eb02 0b03 	add.w	fp, r2, r3
 80289f0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80289f4:	fb02 1203 	mla	r2, r2, r3, r1
 80289f8:	9205      	str	r2, [sp, #20]
 80289fa:	1e6a      	subs	r2, r5, #1
 80289fc:	9204      	str	r2, [sp, #16]
 80289fe:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028a02:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028a06:	454b      	cmp	r3, r9
 8028a08:	463a      	mov	r2, r7
 8028a0a:	d008      	beq.n	8028a1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8028a0c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8028a10:	eb03 0b09 	add.w	fp, r3, r9
 8028a14:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028a18:	fb03 1309 	mla	r3, r3, r9, r1
 8028a1c:	9305      	str	r3, [sp, #20]
 8028a1e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8028a22:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028a26:	4498      	add	r8, r3
 8028a28:	9b04      	ldr	r3, [sp, #16]
 8028a2a:	3b01      	subs	r3, #1
 8028a2c:	9304      	str	r3, [sp, #16]
 8028a2e:	9b04      	ldr	r3, [sp, #16]
 8028a30:	3301      	adds	r3, #1
 8028a32:	d015      	beq.n	8028a60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028a34:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028a38:	42bb      	cmp	r3, r7
 8028a3a:	d117      	bne.n	8028a6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8028a3c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8028a40:	9b04      	ldr	r3, [sp, #16]
 8028a42:	4548      	cmp	r0, r9
 8028a44:	f103 33ff 	add.w	r3, r3, #4294967295
 8028a48:	d17d      	bne.n	8028b46 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8028a4a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8028a4e:	4401      	add	r1, r0
 8028a50:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8028a54:	4480      	add	r8, r0
 8028a56:	e7e9      	b.n	8028a2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8028a58:	461f      	mov	r7, r3
 8028a5a:	e042      	b.n	8028ae2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8028a5c:	2000      	movs	r0, #0
 8028a5e:	e002      	b.n	8028a66 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8028a60:	2900      	cmp	r1, #0
 8028a62:	d16d      	bne.n	8028b40 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8028a64:	2001      	movs	r0, #1
 8028a66:	b00b      	add	sp, #44	@ 0x2c
 8028a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a6c:	b379      	cbz	r1, 8028ace <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8028a6e:	2f00      	cmp	r7, #0
 8028a70:	db29      	blt.n	8028ac6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028a72:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8028a76:	42bb      	cmp	r3, r7
 8028a78:	dd25      	ble.n	8028ac6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028a7a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8028a7e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8028a82:	f7ff ff77 	bl	8028974 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8028a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a88:	fb10 f003 	smulbb	r0, r0, r3
 8028a8c:	b280      	uxth	r0, r0
 8028a8e:	1c41      	adds	r1, r0, #1
 8028a90:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028a94:	1209      	asrs	r1, r1, #8
 8028a96:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8028a9a:	d014      	beq.n	8028ac6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028a9c:	b2c9      	uxtb	r1, r1
 8028a9e:	9808      	ldr	r0, [sp, #32]
 8028aa0:	b2ba      	uxth	r2, r7
 8028aa2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8028aa4:	9102      	str	r1, [sp, #8]
 8028aa6:	2101      	movs	r1, #1
 8028aa8:	4413      	add	r3, r2
 8028aaa:	4402      	add	r2, r0
 8028aac:	9101      	str	r1, [sp, #4]
 8028aae:	fa0f f18b 	sxth.w	r1, fp
 8028ab2:	f8da 0000 	ldr.w	r0, [sl]
 8028ab6:	b21b      	sxth	r3, r3
 8028ab8:	9100      	str	r1, [sp, #0]
 8028aba:	b212      	sxth	r2, r2
 8028abc:	6941      	ldr	r1, [r0, #20]
 8028abe:	4650      	mov	r0, sl
 8028ac0:	460d      	mov	r5, r1
 8028ac2:	9905      	ldr	r1, [sp, #20]
 8028ac4:	47a8      	blx	r5
 8028ac6:	9b04      	ldr	r3, [sp, #16]
 8028ac8:	1c7a      	adds	r2, r7, #1
 8028aca:	3301      	adds	r3, #1
 8028acc:	d0ca      	beq.n	8028a64 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028ace:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028ad2:	1abb      	subs	r3, r7, r2
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	dd31      	ble.n	8028b3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028ad8:	2a00      	cmp	r2, #0
 8028ada:	dabd      	bge.n	8028a58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8028adc:	2f00      	cmp	r7, #0
 8028ade:	dd2d      	ble.n	8028b3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028ae0:	2200      	movs	r2, #0
 8028ae2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8028ae6:	19d1      	adds	r1, r2, r7
 8028ae8:	4299      	cmp	r1, r3
 8028aea:	db02      	blt.n	8028af2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8028aec:	1a9f      	subs	r7, r3, r2
 8028aee:	2f00      	cmp	r7, #0
 8028af0:	dd24      	ble.n	8028b3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028af2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8028af6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8028afa:	f7ff ff3b 	bl	8028974 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8028afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028b00:	fb10 f003 	smulbb	r0, r0, r3
 8028b04:	b280      	uxth	r0, r0
 8028b06:	1c41      	adds	r1, r0, #1
 8028b08:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028b0c:	1209      	asrs	r1, r1, #8
 8028b0e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8028b12:	d013      	beq.n	8028b3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028b14:	b292      	uxth	r2, r2
 8028b16:	9808      	ldr	r0, [sp, #32]
 8028b18:	b2c9      	uxtb	r1, r1
 8028b1a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8028b1c:	b23f      	sxth	r7, r7
 8028b1e:	4413      	add	r3, r2
 8028b20:	9102      	str	r1, [sp, #8]
 8028b22:	4402      	add	r2, r0
 8028b24:	fa0f f18b 	sxth.w	r1, fp
 8028b28:	f8da 0000 	ldr.w	r0, [sl]
 8028b2c:	b21b      	sxth	r3, r3
 8028b2e:	9100      	str	r1, [sp, #0]
 8028b30:	b212      	sxth	r2, r2
 8028b32:	9701      	str	r7, [sp, #4]
 8028b34:	9905      	ldr	r1, [sp, #20]
 8028b36:	6947      	ldr	r7, [r0, #20]
 8028b38:	4650      	mov	r0, sl
 8028b3a:	47b8      	blx	r7
 8028b3c:	464b      	mov	r3, r9
 8028b3e:	e75e      	b.n	80289fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8028b40:	2f00      	cmp	r7, #0
 8028b42:	da96      	bge.n	8028a72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8028b44:	e78e      	b.n	8028a64 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028b46:	2900      	cmp	r1, #0
 8028b48:	d0f8      	beq.n	8028b3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028b4a:	e790      	b.n	8028a6e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08028b4c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8028b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028b50:	461e      	mov	r6, r3
 8028b52:	4b36      	ldr	r3, [pc, #216]	@ (8028c2c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8028b54:	2500      	movs	r5, #0
 8028b56:	f100 0814 	add.w	r8, r0, #20
 8028b5a:	4604      	mov	r4, r0
 8028b5c:	4617      	mov	r7, r2
 8028b5e:	e9c0 3100 	strd	r3, r1, [r0]
 8028b62:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8028b66:	8185      	strh	r5, [r0, #12]
 8028b68:	8103      	strh	r3, [r0, #8]
 8028b6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028b6e:	81c5      	strh	r5, [r0, #14]
 8028b70:	7283      	strb	r3, [r0, #10]
 8028b72:	8205      	strh	r5, [r0, #16]
 8028b74:	8245      	strh	r5, [r0, #18]
 8028b76:	4640      	mov	r0, r8
 8028b78:	f7f1 fdae 	bl	801a6d8 <_ZN8touchgfx7OutlineC1Ev>
 8028b7c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8028b80:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8028b84:	466b      	mov	r3, sp
 8028b86:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8028b8a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8028b8e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8028b92:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8028b96:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8028b9a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8028b9e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8028ba2:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8028ba6:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8028baa:	6830      	ldr	r0, [r6, #0]
 8028bac:	6871      	ldr	r1, [r6, #4]
 8028bae:	8872      	ldrh	r2, [r6, #2]
 8028bb0:	8835      	ldrh	r5, [r6, #0]
 8028bb2:	c303      	stmia	r3!, {r0, r1}
 8028bb4:	887b      	ldrh	r3, [r7, #2]
 8028bb6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8028bba:	4413      	add	r3, r2
 8028bbc:	883a      	ldrh	r2, [r7, #0]
 8028bbe:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8028bc2:	442a      	add	r2, r5
 8028bc4:	81e3      	strh	r3, [r4, #14]
 8028bc6:	8220      	strh	r0, [r4, #16]
 8028bc8:	4668      	mov	r0, sp
 8028bca:	81a2      	strh	r2, [r4, #12]
 8028bcc:	8261      	strh	r1, [r4, #18]
 8028bce:	4639      	mov	r1, r7
 8028bd0:	f7f3 fab0 	bl	801c134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028bd4:	f104 000c 	add.w	r0, r4, #12
 8028bd8:	f7f3 fa84 	bl	801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028bdc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028be0:	f8bd 2000 	ldrh.w	r2, [sp]
 8028be4:	4640      	mov	r0, r8
 8028be6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8028bea:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8028bee:	f7f1 fd57 	bl	801a6a0 <_ZN8touchgfx7Outline5resetEv>
 8028bf2:	f9bd 3000 	ldrsh.w	r3, [sp]
 8028bf6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8028bfa:	4620      	mov	r0, r4
 8028bfc:	015b      	lsls	r3, r3, #5
 8028bfe:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8028c00:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028c04:	015b      	lsls	r3, r3, #5
 8028c06:	6523      	str	r3, [r4, #80]	@ 0x50
 8028c08:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8028c0c:	015b      	lsls	r3, r3, #5
 8028c0e:	6563      	str	r3, [r4, #84]	@ 0x54
 8028c10:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8028c14:	015b      	lsls	r3, r3, #5
 8028c16:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028c18:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8028c1c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8028c20:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8028c24:	b002      	add	sp, #8
 8028c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c2a:	bf00      	nop
 8028c2c:	0802facc 	.word	0x0802facc

08028c30 <_ZN8touchgfx6Canvas5closeEv>:
 8028c30:	b538      	push	{r3, r4, r5, lr}
 8028c32:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8028c36:	4604      	mov	r4, r0
 8028c38:	b193      	cbz	r3, 8028c60 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028c3a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8028c3e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8028c42:	4213      	tst	r3, r2
 8028c44:	d10c      	bne.n	8028c60 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028c46:	f100 0514 	add.w	r5, r0, #20
 8028c4a:	b123      	cbz	r3, 8028c56 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8028c4c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8028c50:	4628      	mov	r0, r5
 8028c52:	f7ff fea3 	bl	802899c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028c56:	4628      	mov	r0, r5
 8028c58:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8028c5c:	f7ff fe9e 	bl	802899c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028c60:	2300      	movs	r3, #0
 8028c62:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8028c66:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8028c6a:	4298      	cmp	r0, r3
 8028c6c:	bf34      	ite	cc
 8028c6e:	2000      	movcc	r0, #0
 8028c70:	2001      	movcs	r0, #1
 8028c72:	bd38      	pop	{r3, r4, r5, pc}

08028c74 <_ZN8touchgfx6Canvas6renderEh>:
 8028c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028c78:	7a85      	ldrb	r5, [r0, #10]
 8028c7a:	4604      	mov	r4, r0
 8028c7c:	4369      	muls	r1, r5
 8028c7e:	1c4d      	adds	r5, r1, #1
 8028c80:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028c84:	122d      	asrs	r5, r5, #8
 8028c86:	f000 8098 	beq.w	8028dba <_ZN8touchgfx6Canvas6renderEh+0x146>
 8028c8a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8028c8e:	2b00      	cmp	r3, #0
 8028c90:	f000 8093 	beq.w	8028dba <_ZN8touchgfx6Canvas6renderEh+0x146>
 8028c94:	f7ff ffcc 	bl	8028c30 <_ZN8touchgfx6Canvas5closeEv>
 8028c98:	4607      	mov	r7, r0
 8028c9a:	2800      	cmp	r0, #0
 8028c9c:	d045      	beq.n	8028d2a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8028c9e:	6860      	ldr	r0, [r4, #4]
 8028ca0:	4e47      	ldr	r6, [pc, #284]	@ (8028dc0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8028ca2:	6803      	ldr	r3, [r0, #0]
 8028ca4:	6837      	ldr	r7, [r6, #0]
 8028ca6:	689b      	ldr	r3, [r3, #8]
 8028ca8:	4798      	blx	r3
 8028caa:	4601      	mov	r1, r0
 8028cac:	4638      	mov	r0, r7
 8028cae:	f7ef ff31 	bl	8018b14 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8028cb2:	4607      	mov	r7, r0
 8028cb4:	f7da faf0 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 8028cb8:	6803      	ldr	r3, [r0, #0]
 8028cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028cbc:	4798      	blx	r3
 8028cbe:	4680      	mov	r8, r0
 8028cc0:	f7da faea 	bl	8003298 <_ZN8touchgfx3HAL3lcdEv>
 8028cc4:	6803      	ldr	r3, [r0, #0]
 8028cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028cc8:	4798      	blx	r3
 8028cca:	280b      	cmp	r0, #11
 8028ccc:	d85a      	bhi.n	8028d84 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8028cce:	e8df f000 	tbb	[pc, r0]
 8028cd2:	5b50      	.short	0x5b50
 8028cd4:	3059066b 	.word	0x3059066b
 8028cd8:	64646440 	.word	0x64646440
 8028cdc:	6464      	.short	0x6464
 8028cde:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028ce2:	2208      	movs	r2, #8
 8028ce4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028ce8:	fb91 f2f2 	sdiv	r2, r1, r2
 8028cec:	fb08 2303 	mla	r3, r8, r3, r2
 8028cf0:	441f      	add	r7, r3
 8028cf2:	424b      	negs	r3, r1
 8028cf4:	f001 0107 	and.w	r1, r1, #7
 8028cf8:	f003 0307 	and.w	r3, r3, #7
 8028cfc:	bf58      	it	pl
 8028cfe:	4259      	negpl	r1, r3
 8028d00:	b2c9      	uxtb	r1, r1
 8028d02:	b2ed      	uxtb	r5, r5
 8028d04:	463a      	mov	r2, r7
 8028d06:	fa0f f388 	sxth.w	r3, r8
 8028d0a:	f104 0014 	add.w	r0, r4, #20
 8028d0e:	e9cd 1500 	strd	r1, r5, [sp]
 8028d12:	6861      	ldr	r1, [r4, #4]
 8028d14:	f7ff fe4e 	bl	80289b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8028d18:	4607      	mov	r7, r0
 8028d1a:	6860      	ldr	r0, [r4, #4]
 8028d1c:	6803      	ldr	r3, [r0, #0]
 8028d1e:	691b      	ldr	r3, [r3, #16]
 8028d20:	4798      	blx	r3
 8028d22:	6830      	ldr	r0, [r6, #0]
 8028d24:	6803      	ldr	r3, [r0, #0]
 8028d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028d28:	4798      	blx	r3
 8028d2a:	4638      	mov	r0, r7
 8028d2c:	b002      	add	sp, #8
 8028d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d32:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028d36:	2204      	movs	r2, #4
 8028d38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028d3c:	fb91 f2f2 	sdiv	r2, r1, r2
 8028d40:	fb08 2303 	mla	r3, r8, r3, r2
 8028d44:	441f      	add	r7, r3
 8028d46:	424b      	negs	r3, r1
 8028d48:	f001 0103 	and.w	r1, r1, #3
 8028d4c:	f003 0303 	and.w	r3, r3, #3
 8028d50:	e7d4      	b.n	8028cfc <_ZN8touchgfx6Canvas6renderEh+0x88>
 8028d52:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028d56:	2202      	movs	r2, #2
 8028d58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028d5c:	2900      	cmp	r1, #0
 8028d5e:	fb91 f2f2 	sdiv	r2, r1, r2
 8028d62:	f001 0101 	and.w	r1, r1, #1
 8028d66:	fb08 2303 	mla	r3, r8, r3, r2
 8028d6a:	bfb8      	it	lt
 8028d6c:	4249      	neglt	r1, r1
 8028d6e:	441f      	add	r7, r3
 8028d70:	e7c6      	b.n	8028d00 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8028d72:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028d7a:	fb08 f303 	mul.w	r3, r8, r3
 8028d7e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8028d82:	441f      	add	r7, r3
 8028d84:	2100      	movs	r1, #0
 8028d86:	e7bc      	b.n	8028d02 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8028d88:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028d8c:	2103      	movs	r1, #3
 8028d8e:	fb08 f203 	mul.w	r2, r8, r3
 8028d92:	89a3      	ldrh	r3, [r4, #12]
 8028d94:	fb13 2301 	smlabb	r3, r3, r1, r2
 8028d98:	e7f3      	b.n	8028d82 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8028d9a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028d9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028da2:	fb08 2303 	mla	r3, r8, r3, r2
 8028da6:	e7ec      	b.n	8028d82 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8028da8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028db0:	fb08 f303 	mul.w	r3, r8, r3
 8028db4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8028db8:	e7e3      	b.n	8028d82 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8028dba:	2701      	movs	r7, #1
 8028dbc:	e7b5      	b.n	8028d2a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8028dbe:	bf00      	nop
 8028dc0:	24015c48 	.word	0x24015c48

08028dc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8028dc4:	4b06      	ldr	r3, [pc, #24]	@ (8028de0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8028dc6:	b510      	push	{r4, lr}
 8028dc8:	781b      	ldrb	r3, [r3, #0]
 8028dca:	2b01      	cmp	r3, #1
 8028dcc:	d107      	bne.n	8028dde <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8028dce:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8028dd2:	680b      	ldr	r3, [r1, #0]
 8028dd4:	6814      	ldr	r4, [r2, #0]
 8028dd6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8028dda:	6013      	str	r3, [r2, #0]
 8028ddc:	600c      	str	r4, [r1, #0]
 8028dde:	bd10      	pop	{r4, pc}
 8028de0:	24015c40 	.word	0x24015c40

08028de4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8028de4:	b513      	push	{r0, r1, r4, lr}
 8028de6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8028dea:	4604      	mov	r4, r0
 8028dec:	e9cd 2100 	strd	r2, r1, [sp]
 8028df0:	b9a3      	cbnz	r3, 8028e1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8028df2:	466a      	mov	r2, sp
 8028df4:	a901      	add	r1, sp, #4
 8028df6:	4620      	mov	r0, r4
 8028df8:	f7ff ffe4 	bl	8028dc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028dfc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028dfe:	9901      	ldr	r1, [sp, #4]
 8028e00:	9a00      	ldr	r2, [sp, #0]
 8028e02:	1ac9      	subs	r1, r1, r3
 8028e04:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028e06:	1ad2      	subs	r2, r2, r3
 8028e08:	9101      	str	r1, [sp, #4]
 8028e0a:	2a00      	cmp	r2, #0
 8028e0c:	9200      	str	r2, [sp, #0]
 8028e0e:	da0b      	bge.n	8028e28 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8028e10:	2301      	movs	r3, #1
 8028e12:	2900      	cmp	r1, #0
 8028e14:	da0e      	bge.n	8028e34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8028e16:	f043 0304 	orr.w	r3, r3, #4
 8028e1a:	e013      	b.n	8028e44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8028e1c:	f7ff ff08 	bl	8028c30 <_ZN8touchgfx6Canvas5closeEv>
 8028e20:	2800      	cmp	r0, #0
 8028e22:	d1e6      	bne.n	8028df2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8028e24:	b002      	add	sp, #8
 8028e26:	bd10      	pop	{r4, pc}
 8028e28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028e2a:	429a      	cmp	r2, r3
 8028e2c:	bfac      	ite	ge
 8028e2e:	2302      	movge	r3, #2
 8028e30:	2300      	movlt	r3, #0
 8028e32:	e7ee      	b.n	8028e12 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8028e34:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8028e36:	4281      	cmp	r1, r0
 8028e38:	bfac      	ite	ge
 8028e3a:	2008      	movge	r0, #8
 8028e3c:	2000      	movlt	r0, #0
 8028e3e:	4318      	orrs	r0, r3
 8028e40:	b2c3      	uxtb	r3, r0
 8028e42:	b158      	cbz	r0, 8028e5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8028e44:	2200      	movs	r2, #0
 8028e46:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8028e4a:	9901      	ldr	r1, [sp, #4]
 8028e4c:	9a00      	ldr	r2, [sp, #0]
 8028e4e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8028e50:	6722      	str	r2, [r4, #112]	@ 0x70
 8028e52:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8028e56:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8028e5a:	e7e3      	b.n	8028e24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8028e5c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8028e60:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8028e64:	4298      	cmp	r0, r3
 8028e66:	d803      	bhi.n	8028e70 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8028e68:	f104 0014 	add.w	r0, r4, #20
 8028e6c:	f7f2 f908 	bl	801b080 <_ZN8touchgfx7Outline6moveToEii>
 8028e70:	2301      	movs	r3, #1
 8028e72:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8028e76:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8028e7a:	2300      	movs	r3, #0
 8028e7c:	e7e5      	b.n	8028e4a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08028e7e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8028e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028e80:	ab02      	add	r3, sp, #8
 8028e82:	4604      	mov	r4, r0
 8028e84:	9101      	str	r1, [sp, #4]
 8028e86:	a901      	add	r1, sp, #4
 8028e88:	f843 2d08 	str.w	r2, [r3, #-8]!
 8028e8c:	461a      	mov	r2, r3
 8028e8e:	f7ff ff99 	bl	8028dc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028e92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028e94:	9901      	ldr	r1, [sp, #4]
 8028e96:	9a00      	ldr	r2, [sp, #0]
 8028e98:	1ac9      	subs	r1, r1, r3
 8028e9a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028e9c:	1ad2      	subs	r2, r2, r3
 8028e9e:	9101      	str	r1, [sp, #4]
 8028ea0:	2a00      	cmp	r2, #0
 8028ea2:	9200      	str	r2, [sp, #0]
 8028ea4:	db1c      	blt.n	8028ee0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8028ea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028ea8:	429a      	cmp	r2, r3
 8028eaa:	bfac      	ite	ge
 8028eac:	2002      	movge	r0, #2
 8028eae:	2000      	movlt	r0, #0
 8028eb0:	2900      	cmp	r1, #0
 8028eb2:	db17      	blt.n	8028ee4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8028eb4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8028eb6:	4299      	cmp	r1, r3
 8028eb8:	bfac      	ite	ge
 8028eba:	2308      	movge	r3, #8
 8028ebc:	2300      	movlt	r3, #0
 8028ebe:	4303      	orrs	r3, r0
 8028ec0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8028ec4:	b2dd      	uxtb	r5, r3
 8028ec6:	b978      	cbnz	r0, 8028ee8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8028ec8:	f104 0014 	add.w	r0, r4, #20
 8028ecc:	f7ff fd66 	bl	802899c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028ed0:	9b01      	ldr	r3, [sp, #4]
 8028ed2:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8028ed6:	6623      	str	r3, [r4, #96]	@ 0x60
 8028ed8:	9b00      	ldr	r3, [sp, #0]
 8028eda:	6663      	str	r3, [r4, #100]	@ 0x64
 8028edc:	b002      	add	sp, #8
 8028ede:	bd70      	pop	{r4, r5, r6, pc}
 8028ee0:	2001      	movs	r0, #1
 8028ee2:	e7e5      	b.n	8028eb0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8028ee4:	2304      	movs	r3, #4
 8028ee6:	e7ea      	b.n	8028ebe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8028ee8:	b113      	cbz	r3, 8028ef0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8028eea:	ea10 0305 	ands.w	r3, r0, r5
 8028eee:	d11c      	bne.n	8028f2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8028ef0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8028ef4:	f104 0614 	add.w	r6, r4, #20
 8028ef8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8028efc:	b98b      	cbnz	r3, 8028f22 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8028efe:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8028f02:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8028f06:	4298      	cmp	r0, r3
 8028f08:	d802      	bhi.n	8028f10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8028f0a:	4630      	mov	r0, r6
 8028f0c:	f7f2 f8b8 	bl	801b080 <_ZN8touchgfx7Outline6moveToEii>
 8028f10:	2301      	movs	r3, #1
 8028f12:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8028f16:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8028f1a:	4630      	mov	r0, r6
 8028f1c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8028f20:	e7d4      	b.n	8028ecc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8028f22:	4630      	mov	r0, r6
 8028f24:	f7ff fd3a 	bl	802899c <_ZN8touchgfx10Rasterizer6lineToEii>
 8028f28:	e7f7      	b.n	8028f1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8028f2a:	461d      	mov	r5, r3
 8028f2c:	e7d0      	b.n	8028ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08028f30 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8028f30:	b538      	push	{r3, r4, r5, lr}
 8028f32:	ed2d 8b10 	vpush	{d8-d15}
 8028f36:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8028f3a:	4605      	mov	r5, r0
 8028f3c:	eeb0 ca40 	vmov.f32	s24, s0
 8028f40:	460c      	mov	r4, r1
 8028f42:	eef0 ca60 	vmov.f32	s25, s1
 8028f46:	ed9f ba57 	vldr	s22, [pc, #348]	@ 80290a4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8028f4a:	eeb0 da41 	vmov.f32	s26, s2
 8028f4e:	eef0 da61 	vmov.f32	s27, s3
 8028f52:	eeb0 ea42 	vmov.f32	s28, s4
 8028f56:	eef0 ea62 	vmov.f32	s29, s5
 8028f5a:	eef0 aa6b 	vmov.f32	s21, s23
 8028f5e:	2c08      	cmp	r4, #8
 8028f60:	d86e      	bhi.n	8029040 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8028f62:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8028f66:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8028f6a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8028f6e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8028f72:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8028f76:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8028f7a:	ee7c faad 	vadd.f32	s31, s25, s27
 8028f7e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028f82:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8028f86:	ee3d aaae 	vadd.f32	s20, s27, s29
 8028f8a:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8028f8e:	ee6f faab 	vmul.f32	s31, s31, s23
 8028f92:	ee69 9aab 	vmul.f32	s19, s19, s23
 8028f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8028f9a:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8028f9e:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8028fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028fa6:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8028faa:	ee68 8aab 	vmul.f32	s17, s17, s23
 8028fae:	bf48      	it	mi
 8028fb0:	eef1 7a67 	vnegmi.f32	s15, s15
 8028fb4:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8028fb8:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8028fbc:	eef4 7acb 	vcmpe.f32	s15, s22
 8028fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028fc4:	dd3f      	ble.n	8029046 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8028fc6:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028fca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028fce:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8028fd2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8028fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8028fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028fde:	d847      	bhi.n	8029070 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8028fe0:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8028fe4:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8028fe8:	f000 fa57 	bl	802949a <atan2f>
 8028fec:	eeb0 8a40 	vmov.f32	s16, s0
 8028ff0:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8028ff4:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8028ff8:	f000 fa4f 	bl	802949a <atan2f>
 8028ffc:	ee38 0a40 	vsub.f32	s0, s16, s0
 8029000:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80290a8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8029004:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802900c:	bf48      	it	mi
 802900e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8029012:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802901a:	bfa4      	itt	ge
 802901c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 80290ac <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8029020:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8029024:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80290b0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8029028:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029030:	d51e      	bpl.n	8029070 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8029032:	eef0 0a49 	vmov.f32	s1, s18
 8029036:	4628      	mov	r0, r5
 8029038:	eeb0 0a68 	vmov.f32	s0, s17
 802903c:	f7f0 fbfc 	bl	8019838 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8029040:	ecbd 8b10 	vpop	{d8-d15}
 8029044:	bd38      	pop	{r3, r4, r5, pc}
 8029046:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802904a:	eeb0 7a68 	vmov.f32	s14, s17
 802904e:	eef0 6a49 	vmov.f32	s13, s18
 8029052:	eea7 7aea 	vfms.f32	s14, s15, s21
 8029056:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802905a:	eee7 6aea 	vfms.f32	s13, s15, s21
 802905e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8029062:	eee7 7a07 	vfma.f32	s15, s14, s14
 8029066:	eef4 7ac6 	vcmpe.f32	s15, s12
 802906a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802906e:	d9e0      	bls.n	8029032 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8029070:	3401      	adds	r4, #1
 8029072:	eef0 0a6c 	vmov.f32	s1, s25
 8029076:	eeb0 0a4c 	vmov.f32	s0, s24
 802907a:	4628      	mov	r0, r5
 802907c:	4621      	mov	r1, r4
 802907e:	eef0 2a49 	vmov.f32	s5, s18
 8029082:	eeb0 2a68 	vmov.f32	s4, s17
 8029086:	eef0 1a6f 	vmov.f32	s3, s31
 802908a:	eeb0 1a4f 	vmov.f32	s2, s30
 802908e:	f7ff ff4f 	bl	8028f30 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8029092:	eef0 da4a 	vmov.f32	s27, s20
 8029096:	eeb0 da69 	vmov.f32	s26, s19
 802909a:	eef0 ca49 	vmov.f32	s25, s18
 802909e:	eeb0 ca68 	vmov.f32	s24, s17
 80290a2:	e75c      	b.n	8028f5e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 80290a4:	2edbe6ff 	.word	0x2edbe6ff
 80290a8:	40490fdb 	.word	0x40490fdb
 80290ac:	40c90fdb 	.word	0x40c90fdb
 80290b0:	3dcccccd 	.word	0x3dcccccd

080290b4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80290b4:	b530      	push	{r4, r5, lr}
 80290b6:	ed2d 8b10 	vpush	{d8-d15}
 80290ba:	eef0 8a40 	vmov.f32	s17, s0
 80290be:	b085      	sub	sp, #20
 80290c0:	eef0 9a60 	vmov.f32	s19, s1
 80290c4:	4604      	mov	r4, r0
 80290c6:	eef0 fa41 	vmov.f32	s31, s2
 80290ca:	460d      	mov	r5, r1
 80290cc:	eeb0 fa61 	vmov.f32	s30, s3
 80290d0:	eef0 ba42 	vmov.f32	s23, s4
 80290d4:	eeb0 ca62 	vmov.f32	s24, s5
 80290d8:	eef0 aa43 	vmov.f32	s21, s6
 80290dc:	eeb0 ba63 	vmov.f32	s22, s7
 80290e0:	2d08      	cmp	r5, #8
 80290e2:	f200 8113 	bhi.w	802930c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80290e6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80290ea:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80290ee:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80290f2:	ee38 daaf 	vadd.f32	s26, s17, s31
 80290f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80290fa:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80290fe:	ee2d da27 	vmul.f32	s26, s26, s15
 8029102:	ed8d 6a01 	vstr	s12, [sp, #4]
 8029106:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802910a:	ee6c caa7 	vmul.f32	s25, s25, s15
 802910e:	eeb0 ea4d 	vmov.f32	s28, s26
 8029112:	ee79 da8f 	vadd.f32	s27, s19, s30
 8029116:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802911a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802911e:	ee66 6a27 	vmul.f32	s13, s12, s15
 8029122:	ee6d daa7 	vmul.f32	s27, s27, s15
 8029126:	edcd 6a03 	vstr	s13, [sp, #12]
 802912a:	eef0 6a6c 	vmov.f32	s13, s25
 802912e:	eef0 ea6d 	vmov.f32	s29, s27
 8029132:	ee2e ea27 	vmul.f32	s28, s28, s15
 8029136:	eee7 6a27 	vfma.f32	s13, s14, s15
 802913a:	eee7 ea27 	vfma.f32	s29, s14, s15
 802913e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8029142:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8029146:	eef0 6a67 	vmov.f32	s13, s15
 802914a:	ed8d 7a02 	vstr	s14, [sp, #8]
 802914e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8029152:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8029156:	ed9d 7a02 	vldr	s14, [sp, #8]
 802915a:	ee3e aa87 	vadd.f32	s20, s29, s14
 802915e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8029162:	ee2a aa27 	vmul.f32	s20, s20, s15
 8029166:	2d00      	cmp	r5, #0
 8029168:	f000 810b 	beq.w	8029382 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802916c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8029170:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80293c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8029174:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8029178:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802917c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8029180:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8029184:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8029188:	eea6 7a27 	vfma.f32	s14, s12, s15
 802918c:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8029190:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8029194:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8029198:	eea5 6a27 	vfma.f32	s12, s10, s15
 802919c:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 80291a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291a4:	bf48      	it	mi
 80291a6:	eeb1 7a47 	vnegmi.f32	s14, s14
 80291aa:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80291ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291b2:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80291b6:	bf48      	it	mi
 80291b8:	eeb1 6a46 	vnegmi.f32	s12, s12
 80291bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291c0:	f340 80a8 	ble.w	8029314 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80291c4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80291c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291cc:	dd5a      	ble.n	8029284 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80291ce:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80291d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80291d6:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80291da:	ee27 7a07 	vmul.f32	s14, s14, s14
 80291de:	ee65 7a85 	vmul.f32	s15, s11, s10
 80291e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80291e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291ea:	f200 80ca 	bhi.w	8029382 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80291ee:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80291f2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80291f6:	f000 f950 	bl	802949a <atan2f>
 80291fa:	eeb0 8a40 	vmov.f32	s16, s0
 80291fe:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8029202:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8029206:	f000 f948 	bl	802949a <atan2f>
 802920a:	ee38 fa40 	vsub.f32	s30, s16, s0
 802920e:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8029212:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8029216:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802921e:	bf48      	it	mi
 8029220:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8029224:	f000 f939 	bl	802949a <atan2f>
 8029228:	ee30 0a48 	vsub.f32	s0, s0, s16
 802922c:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80293cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8029230:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029238:	eeb4 fae7 	vcmpe.f32	s30, s15
 802923c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80293cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8029240:	bf48      	it	mi
 8029242:	eeb1 0a40 	vnegmi.f32	s0, s0
 8029246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802924a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802924e:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80293d0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8029252:	bfa4      	itt	ge
 8029254:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80293d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029258:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802925c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029260:	bfa4      	itt	ge
 8029262:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80293d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029266:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802926a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802926e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029276:	f140 8084 	bpl.w	8029382 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802927a:	eef0 0a4a 	vmov.f32	s1, s20
 802927e:	eeb0 0a49 	vmov.f32	s0, s18
 8029282:	e040      	b.n	8029306 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8029284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8029288:	ee27 7a07 	vmul.f32	s14, s14, s14
 802928c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8029290:	ee67 7a85 	vmul.f32	s15, s15, s10
 8029294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802929c:	d871      	bhi.n	8029382 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802929e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80292a2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80292a6:	f000 f8f8 	bl	802949a <atan2f>
 80292aa:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80292ae:	eeb0 8a40 	vmov.f32	s16, s0
 80292b2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80292b6:	f000 f8f0 	bl	802949a <atan2f>
 80292ba:	ee38 0a40 	vsub.f32	s0, s16, s0
 80292be:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80293cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80292c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80292c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292ca:	bf48      	it	mi
 80292cc:	eeb1 0a40 	vnegmi.f32	s0, s0
 80292d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80292d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292d8:	bfa4      	itt	ge
 80292da:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80293d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80292de:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80292e2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80293d0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80292e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80292ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292ee:	d548      	bpl.n	8029382 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80292f0:	eef0 0a4f 	vmov.f32	s1, s30
 80292f4:	4620      	mov	r0, r4
 80292f6:	eeb0 0a6f 	vmov.f32	s0, s31
 80292fa:	f7f0 fa9d 	bl	8019838 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80292fe:	eef0 0a4c 	vmov.f32	s1, s24
 8029302:	eeb0 0a6b 	vmov.f32	s0, s23
 8029306:	4620      	mov	r0, r4
 8029308:	f7f0 fa96 	bl	8019838 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802930c:	b005      	add	sp, #20
 802930e:	ecbd 8b10 	vpop	{d8-d15}
 8029312:	bd30      	pop	{r4, r5, pc}
 8029314:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80293c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8029318:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802931c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029320:	dd19      	ble.n	8029356 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8029322:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8029326:	ee26 7a06 	vmul.f32	s14, s12, s12
 802932a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802932e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8029332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802933a:	d822      	bhi.n	8029382 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802933c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8029340:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8029344:	f000 f8a9 	bl	802949a <atan2f>
 8029348:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802934c:	eeb0 8a40 	vmov.f32	s16, s0
 8029350:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029354:	e7af      	b.n	80292b6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8029356:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802935a:	eeb0 7a49 	vmov.f32	s14, s18
 802935e:	eeb0 6a4a 	vmov.f32	s12, s20
 8029362:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8029366:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802936a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802936e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8029372:	eee7 7a07 	vfma.f32	s15, s14, s14
 8029376:	eef4 7ac5 	vcmpe.f32	s15, s10
 802937a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802937e:	f67f af7c 	bls.w	802927a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8029382:	3501      	adds	r5, #1
 8029384:	eef0 0a69 	vmov.f32	s1, s19
 8029388:	eeb0 0a68 	vmov.f32	s0, s17
 802938c:	4620      	mov	r0, r4
 802938e:	4629      	mov	r1, r5
 8029390:	eef0 3a4a 	vmov.f32	s7, s20
 8029394:	eeb0 3a49 	vmov.f32	s6, s18
 8029398:	eef0 2a6e 	vmov.f32	s5, s29
 802939c:	eeb0 2a4e 	vmov.f32	s4, s28
 80293a0:	eef0 1a6d 	vmov.f32	s3, s27
 80293a4:	eeb0 1a4d 	vmov.f32	s2, s26
 80293a8:	f7ff fe84 	bl	80290b4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80293ac:	eeb0 ca6c 	vmov.f32	s24, s25
 80293b0:	eddd ba01 	vldr	s23, [sp, #4]
 80293b4:	eef0 9a4a 	vmov.f32	s19, s20
 80293b8:	ed9d fa02 	vldr	s30, [sp, #8]
 80293bc:	eef0 8a49 	vmov.f32	s17, s18
 80293c0:	eddd fa03 	vldr	s31, [sp, #12]
 80293c4:	e68c      	b.n	80290e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80293c6:	bf00      	nop
 80293c8:	2edbe6ff 	.word	0x2edbe6ff
 80293cc:	40490fdb 	.word	0x40490fdb
 80293d0:	3dcccccd 	.word	0x3dcccccd
 80293d4:	40c90fdb 	.word	0x40c90fdb

080293d8 <_ZN8touchgfx6CanvasD1Ev>:
 80293d8:	4b04      	ldr	r3, [pc, #16]	@ (80293ec <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80293da:	b510      	push	{r4, lr}
 80293dc:	4604      	mov	r4, r0
 80293de:	f840 3b14 	str.w	r3, [r0], #20
 80293e2:	f7f1 f955 	bl	801a690 <_ZN8touchgfx7OutlineD1Ev>
 80293e6:	4620      	mov	r0, r4
 80293e8:	bd10      	pop	{r4, pc}
 80293ea:	bf00      	nop
 80293ec:	0802facc 	.word	0x0802facc

080293f0 <_ZN8touchgfx6CanvasD0Ev>:
 80293f0:	b510      	push	{r4, lr}
 80293f2:	4604      	mov	r4, r0
 80293f4:	f7ff fff0 	bl	80293d8 <_ZN8touchgfx6CanvasD1Ev>
 80293f8:	2174      	movs	r1, #116	@ 0x74
 80293fa:	4620      	mov	r0, r4
 80293fc:	f000 f826 	bl	802944c <_ZdlPvj>
 8029400:	4620      	mov	r0, r4
 8029402:	bd10      	pop	{r4, pc}

08029404 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8029404:	790b      	ldrb	r3, [r1, #4]
 8029406:	2b00      	cmp	r3, #0
 8029408:	bf0c      	ite	eq
 802940a:	2301      	moveq	r3, #1
 802940c:	2300      	movne	r3, #0
 802940e:	b570      	push	{r4, r5, r6, lr}
 8029410:	4604      	mov	r4, r0
 8029412:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8029416:	460e      	mov	r6, r1
 8029418:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 802941c:	d109      	bne.n	8029432 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802941e:	b14d      	cbz	r5, 8029434 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8029420:	7933      	ldrb	r3, [r6, #4]
 8029422:	2b01      	cmp	r3, #1
 8029424:	d10c      	bne.n	8029440 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029426:	6823      	ldr	r3, [r4, #0]
 8029428:	4620      	mov	r0, r4
 802942a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802942c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029430:	4718      	bx	r3
 8029432:	b12d      	cbz	r5, 8029440 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029434:	6823      	ldr	r3, [r4, #0]
 8029436:	4620      	mov	r0, r4
 8029438:	695b      	ldr	r3, [r3, #20]
 802943a:	4798      	blx	r3
 802943c:	2d00      	cmp	r5, #0
 802943e:	d1ef      	bne.n	8029420 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8029440:	bd70      	pop	{r4, r5, r6, pc}

08029442 <__aeabi_atexit>:
 8029442:	460b      	mov	r3, r1
 8029444:	4601      	mov	r1, r0
 8029446:	4618      	mov	r0, r3
 8029448:	f000 bc58 	b.w	8029cfc <__cxa_atexit>

0802944c <_ZdlPvj>:
 802944c:	f000 b812 	b.w	8029474 <_ZdlPv>

08029450 <__cxa_guard_acquire>:
 8029450:	6802      	ldr	r2, [r0, #0]
 8029452:	07d2      	lsls	r2, r2, #31
 8029454:	4603      	mov	r3, r0
 8029456:	d405      	bmi.n	8029464 <__cxa_guard_acquire+0x14>
 8029458:	7842      	ldrb	r2, [r0, #1]
 802945a:	b102      	cbz	r2, 802945e <__cxa_guard_acquire+0xe>
 802945c:	deff      	udf	#255	@ 0xff
 802945e:	2001      	movs	r0, #1
 8029460:	7058      	strb	r0, [r3, #1]
 8029462:	4770      	bx	lr
 8029464:	2000      	movs	r0, #0
 8029466:	4770      	bx	lr

08029468 <__cxa_guard_release>:
 8029468:	2301      	movs	r3, #1
 802946a:	6003      	str	r3, [r0, #0]
 802946c:	4770      	bx	lr

0802946e <__cxa_pure_virtual>:
 802946e:	b508      	push	{r3, lr}
 8029470:	f000 f80e 	bl	8029490 <_ZSt9terminatev>

08029474 <_ZdlPv>:
 8029474:	f000 bb8c 	b.w	8029b90 <free>

08029478 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029478:	b508      	push	{r3, lr}
 802947a:	4780      	blx	r0
 802947c:	f000 fb55 	bl	8029b2a <abort>

08029480 <_ZSt13get_terminatev>:
 8029480:	4b02      	ldr	r3, [pc, #8]	@ (802948c <_ZSt13get_terminatev+0xc>)
 8029482:	6818      	ldr	r0, [r3, #0]
 8029484:	f3bf 8f5b 	dmb	ish
 8029488:	4770      	bx	lr
 802948a:	bf00      	nop
 802948c:	240000ac 	.word	0x240000ac

08029490 <_ZSt9terminatev>:
 8029490:	b508      	push	{r3, lr}
 8029492:	f7ff fff5 	bl	8029480 <_ZSt13get_terminatev>
 8029496:	f7ff ffef 	bl	8029478 <_ZN10__cxxabiv111__terminateEPFvvE>

0802949a <atan2f>:
 802949a:	f000 b9cd 	b.w	8029838 <__ieee754_atan2f>
	...

080294a0 <sqrtf>:
 80294a0:	b508      	push	{r3, lr}
 80294a2:	ed2d 8b02 	vpush	{d8}
 80294a6:	eeb0 8a40 	vmov.f32	s16, s0
 80294aa:	f000 f9c2 	bl	8029832 <__ieee754_sqrtf>
 80294ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80294b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294b6:	d60c      	bvs.n	80294d2 <sqrtf+0x32>
 80294b8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80294d8 <sqrtf+0x38>
 80294bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80294c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294c4:	d505      	bpl.n	80294d2 <sqrtf+0x32>
 80294c6:	f000 fefd 	bl	802a2c4 <__errno>
 80294ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80294ce:	2321      	movs	r3, #33	@ 0x21
 80294d0:	6003      	str	r3, [r0, #0]
 80294d2:	ecbd 8b02 	vpop	{d8}
 80294d6:	bd08      	pop	{r3, pc}
 80294d8:	00000000 	.word	0x00000000

080294dc <sinf_poly>:
 80294dc:	07cb      	lsls	r3, r1, #31
 80294de:	d412      	bmi.n	8029506 <sinf_poly+0x2a>
 80294e0:	ee21 5b00 	vmul.f64	d5, d1, d0
 80294e4:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80294e8:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80294ec:	eea6 7b01 	vfma.f64	d7, d6, d1
 80294f0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80294f4:	ee21 1b05 	vmul.f64	d1, d1, d5
 80294f8:	eea6 0b05 	vfma.f64	d0, d6, d5
 80294fc:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029500:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029504:	4770      	bx	lr
 8029506:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802950a:	ee21 5b01 	vmul.f64	d5, d1, d1
 802950e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029512:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029516:	eea1 7b06 	vfma.f64	d7, d1, d6
 802951a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802951e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029522:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029526:	ee21 1b05 	vmul.f64	d1, d1, d5
 802952a:	eea5 0b06 	vfma.f64	d0, d5, d6
 802952e:	e7e5      	b.n	80294fc <sinf_poly+0x20>

08029530 <sinf>:
 8029530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029532:	ee10 4a10 	vmov	r4, s0
 8029536:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802953a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802953e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8029542:	eef0 7a40 	vmov.f32	s15, s0
 8029546:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802954a:	d218      	bcs.n	802957e <sinf+0x4e>
 802954c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029550:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029554:	d20a      	bcs.n	802956c <sinf+0x3c>
 8029556:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 802955a:	d103      	bne.n	8029564 <sinf+0x34>
 802955c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8029560:	ed8d 1a01 	vstr	s2, [sp, #4]
 8029564:	eeb0 0a67 	vmov.f32	s0, s15
 8029568:	b003      	add	sp, #12
 802956a:	bd30      	pop	{r4, r5, pc}
 802956c:	483a      	ldr	r0, [pc, #232]	@ (8029658 <sinf+0x128>)
 802956e:	eeb0 0b46 	vmov.f64	d0, d6
 8029572:	2100      	movs	r1, #0
 8029574:	b003      	add	sp, #12
 8029576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802957a:	f7ff bfaf 	b.w	80294dc <sinf_poly>
 802957e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029582:	4293      	cmp	r3, r2
 8029584:	d824      	bhi.n	80295d0 <sinf+0xa0>
 8029586:	4b34      	ldr	r3, [pc, #208]	@ (8029658 <sinf+0x128>)
 8029588:	ed93 7b08 	vldr	d7, [r3, #32]
 802958c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029590:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029594:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029598:	ee17 1a90 	vmov	r1, s15
 802959c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80295a0:	1609      	asrs	r1, r1, #24
 80295a2:	ee07 1a90 	vmov	s15, r1
 80295a6:	f001 0203 	and.w	r2, r1, #3
 80295aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80295ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80295b2:	ed92 0b00 	vldr	d0, [r2]
 80295b6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80295ba:	f011 0f02 	tst.w	r1, #2
 80295be:	eea5 6b47 	vfms.f64	d6, d5, d7
 80295c2:	bf08      	it	eq
 80295c4:	4618      	moveq	r0, r3
 80295c6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80295ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 80295ce:	e7d1      	b.n	8029574 <sinf+0x44>
 80295d0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80295d4:	d237      	bcs.n	8029646 <sinf+0x116>
 80295d6:	4921      	ldr	r1, [pc, #132]	@ (802965c <sinf+0x12c>)
 80295d8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80295dc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80295e0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80295e4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80295e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80295ec:	6a10      	ldr	r0, [r2, #32]
 80295ee:	6912      	ldr	r2, [r2, #16]
 80295f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80295f4:	40ab      	lsls	r3, r5
 80295f6:	fba0 5003 	umull	r5, r0, r0, r3
 80295fa:	4359      	muls	r1, r3
 80295fc:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029600:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029604:	0f9d      	lsrs	r5, r3, #30
 8029606:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802960a:	1ac9      	subs	r1, r1, r3
 802960c:	f7d7 f85e 	bl	80006cc <__aeabi_l2d>
 8029610:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029614:	4b10      	ldr	r3, [pc, #64]	@ (8029658 <sinf+0x128>)
 8029616:	f004 0203 	and.w	r2, r4, #3
 802961a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802961e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8029650 <sinf+0x120>
 8029622:	ed92 0b00 	vldr	d0, [r2]
 8029626:	ec41 0b17 	vmov	d7, r0, r1
 802962a:	f014 0f02 	tst.w	r4, #2
 802962e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029632:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029636:	4629      	mov	r1, r5
 8029638:	bf08      	it	eq
 802963a:	4618      	moveq	r0, r3
 802963c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029640:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029644:	e796      	b.n	8029574 <sinf+0x44>
 8029646:	b003      	add	sp, #12
 8029648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802964c:	f000 b8e2 	b.w	8029814 <__math_invalidf>
 8029650:	54442d18 	.word	0x54442d18
 8029654:	3c1921fb 	.word	0x3c1921fb
 8029658:	0802fb38 	.word	0x0802fb38
 802965c:	0802fad8 	.word	0x0802fad8

08029660 <sinf_poly>:
 8029660:	07cb      	lsls	r3, r1, #31
 8029662:	d412      	bmi.n	802968a <sinf_poly+0x2a>
 8029664:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029668:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802966c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029670:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029674:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029678:	ee21 1b05 	vmul.f64	d1, d1, d5
 802967c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029680:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029684:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029688:	4770      	bx	lr
 802968a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802968e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029692:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029696:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802969a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802969e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80296a2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80296a6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80296aa:	ee21 1b05 	vmul.f64	d1, d1, d5
 80296ae:	eea5 0b06 	vfma.f64	d0, d5, d6
 80296b2:	e7e5      	b.n	8029680 <sinf_poly+0x20>
 80296b4:	0000      	movs	r0, r0
	...

080296b8 <cosf>:
 80296b8:	b538      	push	{r3, r4, r5, lr}
 80296ba:	ee10 4a10 	vmov	r4, s0
 80296be:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80296c2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80296c6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80296ca:	d21f      	bcs.n	802970c <cosf+0x54>
 80296cc:	ee27 7b07 	vmul.f64	d7, d7, d7
 80296d0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80296d4:	f0c0 8082 	bcc.w	80297dc <cosf+0x124>
 80296d8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80296dc:	4b44      	ldr	r3, [pc, #272]	@ (80297f0 <cosf+0x138>)
 80296de:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80296e2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80296e6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80296ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80296ee:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80296f2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80296f6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80296fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80296fe:	eea4 0b05 	vfma.f64	d0, d4, d5
 8029702:	eea6 0b07 	vfma.f64	d0, d6, d7
 8029706:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802970a:	bd38      	pop	{r3, r4, r5, pc}
 802970c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029710:	4293      	cmp	r3, r2
 8029712:	d829      	bhi.n	8029768 <cosf+0xb0>
 8029714:	4b36      	ldr	r3, [pc, #216]	@ (80297f0 <cosf+0x138>)
 8029716:	ed93 6b08 	vldr	d6, [r3, #32]
 802971a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802971e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8029722:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029726:	ee16 1a90 	vmov	r1, s13
 802972a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802972e:	1609      	asrs	r1, r1, #24
 8029730:	ee06 1a90 	vmov	s13, r1
 8029734:	f001 0203 	and.w	r2, r1, #3
 8029738:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802973c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8029740:	ed92 0b00 	vldr	d0, [r2]
 8029744:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8029748:	f011 0f02 	tst.w	r1, #2
 802974c:	f081 0101 	eor.w	r1, r1, #1
 8029750:	eea5 7b46 	vfms.f64	d7, d5, d6
 8029754:	bf08      	it	eq
 8029756:	4618      	moveq	r0, r3
 8029758:	ee27 1b07 	vmul.f64	d1, d7, d7
 802975c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029760:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029764:	f7ff bf7c 	b.w	8029660 <sinf_poly>
 8029768:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802976c:	d232      	bcs.n	80297d4 <cosf+0x11c>
 802976e:	4921      	ldr	r1, [pc, #132]	@ (80297f4 <cosf+0x13c>)
 8029770:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029774:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029778:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802977c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029780:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029784:	6a10      	ldr	r0, [r2, #32]
 8029786:	6912      	ldr	r2, [r2, #16]
 8029788:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802978c:	40ab      	lsls	r3, r5
 802978e:	fba0 5003 	umull	r5, r0, r0, r3
 8029792:	4359      	muls	r1, r3
 8029794:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029798:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802979c:	0f9d      	lsrs	r5, r3, #30
 802979e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80297a2:	1ac9      	subs	r1, r1, r3
 80297a4:	f7d6 ff92 	bl	80006cc <__aeabi_l2d>
 80297a8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80297ac:	4b10      	ldr	r3, [pc, #64]	@ (80297f0 <cosf+0x138>)
 80297ae:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80297e8 <cosf+0x130>
 80297b2:	ec41 0b17 	vmov	d7, r0, r1
 80297b6:	f004 0203 	and.w	r2, r4, #3
 80297ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80297be:	ed92 0b00 	vldr	d0, [r2]
 80297c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80297c6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80297ca:	f014 0f02 	tst.w	r4, #2
 80297ce:	f085 0101 	eor.w	r1, r5, #1
 80297d2:	e7bf      	b.n	8029754 <cosf+0x9c>
 80297d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80297d8:	f000 b81c 	b.w	8029814 <__math_invalidf>
 80297dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80297e0:	e793      	b.n	802970a <cosf+0x52>
 80297e2:	bf00      	nop
 80297e4:	f3af 8000 	nop.w
 80297e8:	54442d18 	.word	0x54442d18
 80297ec:	3c1921fb 	.word	0x3c1921fb
 80297f0:	0802fb38 	.word	0x0802fb38
 80297f4:	0802fad8 	.word	0x0802fad8

080297f8 <with_errnof>:
 80297f8:	b510      	push	{r4, lr}
 80297fa:	ed2d 8b02 	vpush	{d8}
 80297fe:	eeb0 8a40 	vmov.f32	s16, s0
 8029802:	4604      	mov	r4, r0
 8029804:	f000 fd5e 	bl	802a2c4 <__errno>
 8029808:	eeb0 0a48 	vmov.f32	s0, s16
 802980c:	ecbd 8b02 	vpop	{d8}
 8029810:	6004      	str	r4, [r0, #0]
 8029812:	bd10      	pop	{r4, pc}

08029814 <__math_invalidf>:
 8029814:	eef0 7a40 	vmov.f32	s15, s0
 8029818:	ee30 7a40 	vsub.f32	s14, s0, s0
 802981c:	eef4 7a67 	vcmp.f32	s15, s15
 8029820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029824:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8029828:	d602      	bvs.n	8029830 <__math_invalidf+0x1c>
 802982a:	2021      	movs	r0, #33	@ 0x21
 802982c:	f7ff bfe4 	b.w	80297f8 <with_errnof>
 8029830:	4770      	bx	lr

08029832 <__ieee754_sqrtf>:
 8029832:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8029836:	4770      	bx	lr

08029838 <__ieee754_atan2f>:
 8029838:	ee10 2a90 	vmov	r2, s1
 802983c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8029840:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8029844:	b510      	push	{r4, lr}
 8029846:	eef0 7a40 	vmov.f32	s15, s0
 802984a:	d806      	bhi.n	802985a <__ieee754_atan2f+0x22>
 802984c:	ee10 0a10 	vmov	r0, s0
 8029850:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8029854:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029858:	d904      	bls.n	8029864 <__ieee754_atan2f+0x2c>
 802985a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802985e:	eeb0 0a67 	vmov.f32	s0, s15
 8029862:	bd10      	pop	{r4, pc}
 8029864:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8029868:	d103      	bne.n	8029872 <__ieee754_atan2f+0x3a>
 802986a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802986e:	f000 b881 	b.w	8029974 <atanf>
 8029872:	1794      	asrs	r4, r2, #30
 8029874:	f004 0402 	and.w	r4, r4, #2
 8029878:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802987c:	b93b      	cbnz	r3, 802988e <__ieee754_atan2f+0x56>
 802987e:	2c02      	cmp	r4, #2
 8029880:	d05c      	beq.n	802993c <__ieee754_atan2f+0x104>
 8029882:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8029950 <__ieee754_atan2f+0x118>
 8029886:	2c03      	cmp	r4, #3
 8029888:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802988c:	e7e7      	b.n	802985e <__ieee754_atan2f+0x26>
 802988e:	b939      	cbnz	r1, 80298a0 <__ieee754_atan2f+0x68>
 8029890:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8029954 <__ieee754_atan2f+0x11c>
 8029894:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8029958 <__ieee754_atan2f+0x120>
 8029898:	2800      	cmp	r0, #0
 802989a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802989e:	e7de      	b.n	802985e <__ieee754_atan2f+0x26>
 80298a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80298a4:	d110      	bne.n	80298c8 <__ieee754_atan2f+0x90>
 80298a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80298aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80298ae:	d107      	bne.n	80298c0 <__ieee754_atan2f+0x88>
 80298b0:	2c02      	cmp	r4, #2
 80298b2:	d846      	bhi.n	8029942 <__ieee754_atan2f+0x10a>
 80298b4:	4b29      	ldr	r3, [pc, #164]	@ (802995c <__ieee754_atan2f+0x124>)
 80298b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80298ba:	edd3 7a00 	vldr	s15, [r3]
 80298be:	e7ce      	b.n	802985e <__ieee754_atan2f+0x26>
 80298c0:	2c02      	cmp	r4, #2
 80298c2:	d841      	bhi.n	8029948 <__ieee754_atan2f+0x110>
 80298c4:	4b26      	ldr	r3, [pc, #152]	@ (8029960 <__ieee754_atan2f+0x128>)
 80298c6:	e7f6      	b.n	80298b6 <__ieee754_atan2f+0x7e>
 80298c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80298cc:	d0e0      	beq.n	8029890 <__ieee754_atan2f+0x58>
 80298ce:	1a5b      	subs	r3, r3, r1
 80298d0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80298d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80298d8:	da1a      	bge.n	8029910 <__ieee754_atan2f+0xd8>
 80298da:	2a00      	cmp	r2, #0
 80298dc:	da01      	bge.n	80298e2 <__ieee754_atan2f+0xaa>
 80298de:	313c      	adds	r1, #60	@ 0x3c
 80298e0:	db19      	blt.n	8029916 <__ieee754_atan2f+0xde>
 80298e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80298e6:	f000 f919 	bl	8029b1c <fabsf>
 80298ea:	f000 f843 	bl	8029974 <atanf>
 80298ee:	eef0 7a40 	vmov.f32	s15, s0
 80298f2:	2c01      	cmp	r4, #1
 80298f4:	d012      	beq.n	802991c <__ieee754_atan2f+0xe4>
 80298f6:	2c02      	cmp	r4, #2
 80298f8:	d017      	beq.n	802992a <__ieee754_atan2f+0xf2>
 80298fa:	2c00      	cmp	r4, #0
 80298fc:	d0af      	beq.n	802985e <__ieee754_atan2f+0x26>
 80298fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8029964 <__ieee754_atan2f+0x12c>
 8029902:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029906:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8029968 <__ieee754_atan2f+0x130>
 802990a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802990e:	e7a6      	b.n	802985e <__ieee754_atan2f+0x26>
 8029910:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8029954 <__ieee754_atan2f+0x11c>
 8029914:	e7ed      	b.n	80298f2 <__ieee754_atan2f+0xba>
 8029916:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802996c <__ieee754_atan2f+0x134>
 802991a:	e7ea      	b.n	80298f2 <__ieee754_atan2f+0xba>
 802991c:	ee17 3a90 	vmov	r3, s15
 8029920:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029924:	ee07 3a90 	vmov	s15, r3
 8029928:	e799      	b.n	802985e <__ieee754_atan2f+0x26>
 802992a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8029964 <__ieee754_atan2f+0x12c>
 802992e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029932:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8029968 <__ieee754_atan2f+0x130>
 8029936:	ee77 7a67 	vsub.f32	s15, s14, s15
 802993a:	e790      	b.n	802985e <__ieee754_atan2f+0x26>
 802993c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8029968 <__ieee754_atan2f+0x130>
 8029940:	e78d      	b.n	802985e <__ieee754_atan2f+0x26>
 8029942:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8029970 <__ieee754_atan2f+0x138>
 8029946:	e78a      	b.n	802985e <__ieee754_atan2f+0x26>
 8029948:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802996c <__ieee754_atan2f+0x134>
 802994c:	e787      	b.n	802985e <__ieee754_atan2f+0x26>
 802994e:	bf00      	nop
 8029950:	c0490fdb 	.word	0xc0490fdb
 8029954:	3fc90fdb 	.word	0x3fc90fdb
 8029958:	bfc90fdb 	.word	0xbfc90fdb
 802995c:	0802fc24 	.word	0x0802fc24
 8029960:	0802fc18 	.word	0x0802fc18
 8029964:	33bbbd2e 	.word	0x33bbbd2e
 8029968:	40490fdb 	.word	0x40490fdb
 802996c:	00000000 	.word	0x00000000
 8029970:	3f490fdb 	.word	0x3f490fdb

08029974 <atanf>:
 8029974:	b538      	push	{r3, r4, r5, lr}
 8029976:	ee10 5a10 	vmov	r5, s0
 802997a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802997e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8029982:	eef0 7a40 	vmov.f32	s15, s0
 8029986:	d30f      	bcc.n	80299a8 <atanf+0x34>
 8029988:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802998c:	d904      	bls.n	8029998 <atanf+0x24>
 802998e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8029992:	eeb0 0a67 	vmov.f32	s0, s15
 8029996:	bd38      	pop	{r3, r4, r5, pc}
 8029998:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8029ad0 <atanf+0x15c>
 802999c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8029ad4 <atanf+0x160>
 80299a0:	2d00      	cmp	r5, #0
 80299a2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80299a6:	e7f4      	b.n	8029992 <atanf+0x1e>
 80299a8:	4b4b      	ldr	r3, [pc, #300]	@ (8029ad8 <atanf+0x164>)
 80299aa:	429c      	cmp	r4, r3
 80299ac:	d810      	bhi.n	80299d0 <atanf+0x5c>
 80299ae:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80299b2:	d20a      	bcs.n	80299ca <atanf+0x56>
 80299b4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8029adc <atanf+0x168>
 80299b8:	ee30 7a07 	vadd.f32	s14, s0, s14
 80299bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80299c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80299c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80299c8:	dce3      	bgt.n	8029992 <atanf+0x1e>
 80299ca:	f04f 33ff 	mov.w	r3, #4294967295
 80299ce:	e013      	b.n	80299f8 <atanf+0x84>
 80299d0:	f000 f8a4 	bl	8029b1c <fabsf>
 80299d4:	4b42      	ldr	r3, [pc, #264]	@ (8029ae0 <atanf+0x16c>)
 80299d6:	429c      	cmp	r4, r3
 80299d8:	d84f      	bhi.n	8029a7a <atanf+0x106>
 80299da:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80299de:	429c      	cmp	r4, r3
 80299e0:	d841      	bhi.n	8029a66 <atanf+0xf2>
 80299e2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80299e6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80299ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80299ee:	2300      	movs	r3, #0
 80299f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80299f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80299f8:	1c5a      	adds	r2, r3, #1
 80299fa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80299fe:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8029ae4 <atanf+0x170>
 8029a02:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8029ae8 <atanf+0x174>
 8029a06:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8029aec <atanf+0x178>
 8029a0a:	ee66 6a06 	vmul.f32	s13, s12, s12
 8029a0e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8029a12:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8029af0 <atanf+0x17c>
 8029a16:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8029a1a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8029af4 <atanf+0x180>
 8029a1e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8029a22:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8029af8 <atanf+0x184>
 8029a26:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8029a2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8029afc <atanf+0x188>
 8029a2e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8029a32:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8029b00 <atanf+0x18c>
 8029a36:	eea6 5a87 	vfma.f32	s10, s13, s14
 8029a3a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8029b04 <atanf+0x190>
 8029a3e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8029a42:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8029b08 <atanf+0x194>
 8029a46:	eea7 5a26 	vfma.f32	s10, s14, s13
 8029a4a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8029b0c <atanf+0x198>
 8029a4e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8029a52:	ee27 7a26 	vmul.f32	s14, s14, s13
 8029a56:	eea5 7a86 	vfma.f32	s14, s11, s12
 8029a5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8029a5e:	d121      	bne.n	8029aa4 <atanf+0x130>
 8029a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029a64:	e795      	b.n	8029992 <atanf+0x1e>
 8029a66:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8029a6a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8029a6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029a72:	2301      	movs	r3, #1
 8029a74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029a78:	e7be      	b.n	80299f8 <atanf+0x84>
 8029a7a:	4b25      	ldr	r3, [pc, #148]	@ (8029b10 <atanf+0x19c>)
 8029a7c:	429c      	cmp	r4, r3
 8029a7e:	d80b      	bhi.n	8029a98 <atanf+0x124>
 8029a80:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8029a84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029a88:	eea0 7a27 	vfma.f32	s14, s0, s15
 8029a8c:	2302      	movs	r3, #2
 8029a8e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8029a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8029a96:	e7af      	b.n	80299f8 <atanf+0x84>
 8029a98:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8029a9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029aa0:	2303      	movs	r3, #3
 8029aa2:	e7a9      	b.n	80299f8 <atanf+0x84>
 8029aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8029b14 <atanf+0x1a0>)
 8029aa6:	491c      	ldr	r1, [pc, #112]	@ (8029b18 <atanf+0x1a4>)
 8029aa8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8029aac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8029ab0:	edd3 6a00 	vldr	s13, [r3]
 8029ab4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8029ab8:	2d00      	cmp	r5, #0
 8029aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8029abe:	edd2 7a00 	vldr	s15, [r2]
 8029ac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029ac6:	bfb8      	it	lt
 8029ac8:	eef1 7a67 	vneglt.f32	s15, s15
 8029acc:	e761      	b.n	8029992 <atanf+0x1e>
 8029ace:	bf00      	nop
 8029ad0:	bfc90fdb 	.word	0xbfc90fdb
 8029ad4:	3fc90fdb 	.word	0x3fc90fdb
 8029ad8:	3edfffff 	.word	0x3edfffff
 8029adc:	7149f2ca 	.word	0x7149f2ca
 8029ae0:	3f97ffff 	.word	0x3f97ffff
 8029ae4:	3c8569d7 	.word	0x3c8569d7
 8029ae8:	3d4bda59 	.word	0x3d4bda59
 8029aec:	bd6ef16b 	.word	0xbd6ef16b
 8029af0:	3d886b35 	.word	0x3d886b35
 8029af4:	3dba2e6e 	.word	0x3dba2e6e
 8029af8:	3e124925 	.word	0x3e124925
 8029afc:	3eaaaaab 	.word	0x3eaaaaab
 8029b00:	bd15a221 	.word	0xbd15a221
 8029b04:	bd9d8795 	.word	0xbd9d8795
 8029b08:	bde38e38 	.word	0xbde38e38
 8029b0c:	be4ccccd 	.word	0xbe4ccccd
 8029b10:	401bffff 	.word	0x401bffff
 8029b14:	0802fc40 	.word	0x0802fc40
 8029b18:	0802fc30 	.word	0x0802fc30

08029b1c <fabsf>:
 8029b1c:	ee10 3a10 	vmov	r3, s0
 8029b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8029b24:	ee00 3a10 	vmov	s0, r3
 8029b28:	4770      	bx	lr

08029b2a <abort>:
 8029b2a:	b508      	push	{r3, lr}
 8029b2c:	2006      	movs	r0, #6
 8029b2e:	f000 fb01 	bl	802a134 <raise>
 8029b32:	2001      	movs	r0, #1
 8029b34:	f7d7 fc76 	bl	8001424 <_exit>

08029b38 <__assert_func>:
 8029b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029b3a:	4614      	mov	r4, r2
 8029b3c:	461a      	mov	r2, r3
 8029b3e:	4b09      	ldr	r3, [pc, #36]	@ (8029b64 <__assert_func+0x2c>)
 8029b40:	681b      	ldr	r3, [r3, #0]
 8029b42:	4605      	mov	r5, r0
 8029b44:	68d8      	ldr	r0, [r3, #12]
 8029b46:	b954      	cbnz	r4, 8029b5e <__assert_func+0x26>
 8029b48:	4b07      	ldr	r3, [pc, #28]	@ (8029b68 <__assert_func+0x30>)
 8029b4a:	461c      	mov	r4, r3
 8029b4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029b50:	9100      	str	r1, [sp, #0]
 8029b52:	462b      	mov	r3, r5
 8029b54:	4905      	ldr	r1, [pc, #20]	@ (8029b6c <__assert_func+0x34>)
 8029b56:	f000 f983 	bl	8029e60 <fiprintf>
 8029b5a:	f7ff ffe6 	bl	8029b2a <abort>
 8029b5e:	4b04      	ldr	r3, [pc, #16]	@ (8029b70 <__assert_func+0x38>)
 8029b60:	e7f4      	b.n	8029b4c <__assert_func+0x14>
 8029b62:	bf00      	nop
 8029b64:	240000bc 	.word	0x240000bc
 8029b68:	0802fc8b 	.word	0x0802fc8b
 8029b6c:	0802fc5d 	.word	0x0802fc5d
 8029b70:	0802fc50 	.word	0x0802fc50

08029b74 <atexit>:
 8029b74:	2300      	movs	r3, #0
 8029b76:	4601      	mov	r1, r0
 8029b78:	461a      	mov	r2, r3
 8029b7a:	4618      	mov	r0, r3
 8029b7c:	f000 bbde 	b.w	802a33c <__register_exitproc>

08029b80 <malloc>:
 8029b80:	4b02      	ldr	r3, [pc, #8]	@ (8029b8c <malloc+0xc>)
 8029b82:	4601      	mov	r1, r0
 8029b84:	6818      	ldr	r0, [r3, #0]
 8029b86:	f000 b82d 	b.w	8029be4 <_malloc_r>
 8029b8a:	bf00      	nop
 8029b8c:	240000bc 	.word	0x240000bc

08029b90 <free>:
 8029b90:	4b02      	ldr	r3, [pc, #8]	@ (8029b9c <free+0xc>)
 8029b92:	4601      	mov	r1, r0
 8029b94:	6818      	ldr	r0, [r3, #0]
 8029b96:	f000 bc2d 	b.w	802a3f4 <_free_r>
 8029b9a:	bf00      	nop
 8029b9c:	240000bc 	.word	0x240000bc

08029ba0 <sbrk_aligned>:
 8029ba0:	b570      	push	{r4, r5, r6, lr}
 8029ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8029be0 <sbrk_aligned+0x40>)
 8029ba4:	460c      	mov	r4, r1
 8029ba6:	6831      	ldr	r1, [r6, #0]
 8029ba8:	4605      	mov	r5, r0
 8029baa:	b911      	cbnz	r1, 8029bb2 <sbrk_aligned+0x12>
 8029bac:	f000 fb68 	bl	802a280 <_sbrk_r>
 8029bb0:	6030      	str	r0, [r6, #0]
 8029bb2:	4621      	mov	r1, r4
 8029bb4:	4628      	mov	r0, r5
 8029bb6:	f000 fb63 	bl	802a280 <_sbrk_r>
 8029bba:	1c43      	adds	r3, r0, #1
 8029bbc:	d103      	bne.n	8029bc6 <sbrk_aligned+0x26>
 8029bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8029bc2:	4620      	mov	r0, r4
 8029bc4:	bd70      	pop	{r4, r5, r6, pc}
 8029bc6:	1cc4      	adds	r4, r0, #3
 8029bc8:	f024 0403 	bic.w	r4, r4, #3
 8029bcc:	42a0      	cmp	r0, r4
 8029bce:	d0f8      	beq.n	8029bc2 <sbrk_aligned+0x22>
 8029bd0:	1a21      	subs	r1, r4, r0
 8029bd2:	4628      	mov	r0, r5
 8029bd4:	f000 fb54 	bl	802a280 <_sbrk_r>
 8029bd8:	3001      	adds	r0, #1
 8029bda:	d1f2      	bne.n	8029bc2 <sbrk_aligned+0x22>
 8029bdc:	e7ef      	b.n	8029bbe <sbrk_aligned+0x1e>
 8029bde:	bf00      	nop
 8029be0:	2401657c 	.word	0x2401657c

08029be4 <_malloc_r>:
 8029be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029be8:	1ccd      	adds	r5, r1, #3
 8029bea:	f025 0503 	bic.w	r5, r5, #3
 8029bee:	3508      	adds	r5, #8
 8029bf0:	2d0c      	cmp	r5, #12
 8029bf2:	bf38      	it	cc
 8029bf4:	250c      	movcc	r5, #12
 8029bf6:	2d00      	cmp	r5, #0
 8029bf8:	4606      	mov	r6, r0
 8029bfa:	db01      	blt.n	8029c00 <_malloc_r+0x1c>
 8029bfc:	42a9      	cmp	r1, r5
 8029bfe:	d904      	bls.n	8029c0a <_malloc_r+0x26>
 8029c00:	230c      	movs	r3, #12
 8029c02:	6033      	str	r3, [r6, #0]
 8029c04:	2000      	movs	r0, #0
 8029c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8029ce0 <_malloc_r+0xfc>
 8029c0e:	f000 f869 	bl	8029ce4 <__malloc_lock>
 8029c12:	f8d8 3000 	ldr.w	r3, [r8]
 8029c16:	461c      	mov	r4, r3
 8029c18:	bb44      	cbnz	r4, 8029c6c <_malloc_r+0x88>
 8029c1a:	4629      	mov	r1, r5
 8029c1c:	4630      	mov	r0, r6
 8029c1e:	f7ff ffbf 	bl	8029ba0 <sbrk_aligned>
 8029c22:	1c43      	adds	r3, r0, #1
 8029c24:	4604      	mov	r4, r0
 8029c26:	d158      	bne.n	8029cda <_malloc_r+0xf6>
 8029c28:	f8d8 4000 	ldr.w	r4, [r8]
 8029c2c:	4627      	mov	r7, r4
 8029c2e:	2f00      	cmp	r7, #0
 8029c30:	d143      	bne.n	8029cba <_malloc_r+0xd6>
 8029c32:	2c00      	cmp	r4, #0
 8029c34:	d04b      	beq.n	8029cce <_malloc_r+0xea>
 8029c36:	6823      	ldr	r3, [r4, #0]
 8029c38:	4639      	mov	r1, r7
 8029c3a:	4630      	mov	r0, r6
 8029c3c:	eb04 0903 	add.w	r9, r4, r3
 8029c40:	f000 fb1e 	bl	802a280 <_sbrk_r>
 8029c44:	4581      	cmp	r9, r0
 8029c46:	d142      	bne.n	8029cce <_malloc_r+0xea>
 8029c48:	6821      	ldr	r1, [r4, #0]
 8029c4a:	1a6d      	subs	r5, r5, r1
 8029c4c:	4629      	mov	r1, r5
 8029c4e:	4630      	mov	r0, r6
 8029c50:	f7ff ffa6 	bl	8029ba0 <sbrk_aligned>
 8029c54:	3001      	adds	r0, #1
 8029c56:	d03a      	beq.n	8029cce <_malloc_r+0xea>
 8029c58:	6823      	ldr	r3, [r4, #0]
 8029c5a:	442b      	add	r3, r5
 8029c5c:	6023      	str	r3, [r4, #0]
 8029c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8029c62:	685a      	ldr	r2, [r3, #4]
 8029c64:	bb62      	cbnz	r2, 8029cc0 <_malloc_r+0xdc>
 8029c66:	f8c8 7000 	str.w	r7, [r8]
 8029c6a:	e00f      	b.n	8029c8c <_malloc_r+0xa8>
 8029c6c:	6822      	ldr	r2, [r4, #0]
 8029c6e:	1b52      	subs	r2, r2, r5
 8029c70:	d420      	bmi.n	8029cb4 <_malloc_r+0xd0>
 8029c72:	2a0b      	cmp	r2, #11
 8029c74:	d917      	bls.n	8029ca6 <_malloc_r+0xc2>
 8029c76:	1961      	adds	r1, r4, r5
 8029c78:	42a3      	cmp	r3, r4
 8029c7a:	6025      	str	r5, [r4, #0]
 8029c7c:	bf18      	it	ne
 8029c7e:	6059      	strne	r1, [r3, #4]
 8029c80:	6863      	ldr	r3, [r4, #4]
 8029c82:	bf08      	it	eq
 8029c84:	f8c8 1000 	streq.w	r1, [r8]
 8029c88:	5162      	str	r2, [r4, r5]
 8029c8a:	604b      	str	r3, [r1, #4]
 8029c8c:	4630      	mov	r0, r6
 8029c8e:	f000 f82f 	bl	8029cf0 <__malloc_unlock>
 8029c92:	f104 000b 	add.w	r0, r4, #11
 8029c96:	1d23      	adds	r3, r4, #4
 8029c98:	f020 0007 	bic.w	r0, r0, #7
 8029c9c:	1ac2      	subs	r2, r0, r3
 8029c9e:	bf1c      	itt	ne
 8029ca0:	1a1b      	subne	r3, r3, r0
 8029ca2:	50a3      	strne	r3, [r4, r2]
 8029ca4:	e7af      	b.n	8029c06 <_malloc_r+0x22>
 8029ca6:	6862      	ldr	r2, [r4, #4]
 8029ca8:	42a3      	cmp	r3, r4
 8029caa:	bf0c      	ite	eq
 8029cac:	f8c8 2000 	streq.w	r2, [r8]
 8029cb0:	605a      	strne	r2, [r3, #4]
 8029cb2:	e7eb      	b.n	8029c8c <_malloc_r+0xa8>
 8029cb4:	4623      	mov	r3, r4
 8029cb6:	6864      	ldr	r4, [r4, #4]
 8029cb8:	e7ae      	b.n	8029c18 <_malloc_r+0x34>
 8029cba:	463c      	mov	r4, r7
 8029cbc:	687f      	ldr	r7, [r7, #4]
 8029cbe:	e7b6      	b.n	8029c2e <_malloc_r+0x4a>
 8029cc0:	461a      	mov	r2, r3
 8029cc2:	685b      	ldr	r3, [r3, #4]
 8029cc4:	42a3      	cmp	r3, r4
 8029cc6:	d1fb      	bne.n	8029cc0 <_malloc_r+0xdc>
 8029cc8:	2300      	movs	r3, #0
 8029cca:	6053      	str	r3, [r2, #4]
 8029ccc:	e7de      	b.n	8029c8c <_malloc_r+0xa8>
 8029cce:	230c      	movs	r3, #12
 8029cd0:	6033      	str	r3, [r6, #0]
 8029cd2:	4630      	mov	r0, r6
 8029cd4:	f000 f80c 	bl	8029cf0 <__malloc_unlock>
 8029cd8:	e794      	b.n	8029c04 <_malloc_r+0x20>
 8029cda:	6005      	str	r5, [r0, #0]
 8029cdc:	e7d6      	b.n	8029c8c <_malloc_r+0xa8>
 8029cde:	bf00      	nop
 8029ce0:	24016580 	.word	0x24016580

08029ce4 <__malloc_lock>:
 8029ce4:	4801      	ldr	r0, [pc, #4]	@ (8029cec <__malloc_lock+0x8>)
 8029ce6:	f000 bb18 	b.w	802a31a <__retarget_lock_acquire_recursive>
 8029cea:	bf00      	nop
 8029cec:	240166c4 	.word	0x240166c4

08029cf0 <__malloc_unlock>:
 8029cf0:	4801      	ldr	r0, [pc, #4]	@ (8029cf8 <__malloc_unlock+0x8>)
 8029cf2:	f000 bb13 	b.w	802a31c <__retarget_lock_release_recursive>
 8029cf6:	bf00      	nop
 8029cf8:	240166c4 	.word	0x240166c4

08029cfc <__cxa_atexit>:
 8029cfc:	b510      	push	{r4, lr}
 8029cfe:	4604      	mov	r4, r0
 8029d00:	4804      	ldr	r0, [pc, #16]	@ (8029d14 <__cxa_atexit+0x18>)
 8029d02:	4613      	mov	r3, r2
 8029d04:	b120      	cbz	r0, 8029d10 <__cxa_atexit+0x14>
 8029d06:	460a      	mov	r2, r1
 8029d08:	2002      	movs	r0, #2
 8029d0a:	4621      	mov	r1, r4
 8029d0c:	f000 fb16 	bl	802a33c <__register_exitproc>
 8029d10:	bd10      	pop	{r4, pc}
 8029d12:	bf00      	nop
 8029d14:	0802a33d 	.word	0x0802a33d

08029d18 <std>:
 8029d18:	2300      	movs	r3, #0
 8029d1a:	b510      	push	{r4, lr}
 8029d1c:	4604      	mov	r4, r0
 8029d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8029d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029d26:	6083      	str	r3, [r0, #8]
 8029d28:	8181      	strh	r1, [r0, #12]
 8029d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8029d2c:	81c2      	strh	r2, [r0, #14]
 8029d2e:	6183      	str	r3, [r0, #24]
 8029d30:	4619      	mov	r1, r3
 8029d32:	2208      	movs	r2, #8
 8029d34:	305c      	adds	r0, #92	@ 0x5c
 8029d36:	f000 f9bb 	bl	802a0b0 <memset>
 8029d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8029d70 <std+0x58>)
 8029d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8029d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8029d74 <std+0x5c>)
 8029d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029d42:	4b0d      	ldr	r3, [pc, #52]	@ (8029d78 <std+0x60>)
 8029d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8029d46:	4b0d      	ldr	r3, [pc, #52]	@ (8029d7c <std+0x64>)
 8029d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8029d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8029d80 <std+0x68>)
 8029d4c:	6224      	str	r4, [r4, #32]
 8029d4e:	429c      	cmp	r4, r3
 8029d50:	d006      	beq.n	8029d60 <std+0x48>
 8029d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8029d56:	4294      	cmp	r4, r2
 8029d58:	d002      	beq.n	8029d60 <std+0x48>
 8029d5a:	33d0      	adds	r3, #208	@ 0xd0
 8029d5c:	429c      	cmp	r4, r3
 8029d5e:	d105      	bne.n	8029d6c <std+0x54>
 8029d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8029d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029d68:	f000 bad6 	b.w	802a318 <__retarget_lock_init_recursive>
 8029d6c:	bd10      	pop	{r4, pc}
 8029d6e:	bf00      	nop
 8029d70:	08029f01 	.word	0x08029f01
 8029d74:	08029f23 	.word	0x08029f23
 8029d78:	08029f5b 	.word	0x08029f5b
 8029d7c:	08029f7f 	.word	0x08029f7f
 8029d80:	24016584 	.word	0x24016584

08029d84 <stdio_exit_handler>:
 8029d84:	4a02      	ldr	r2, [pc, #8]	@ (8029d90 <stdio_exit_handler+0xc>)
 8029d86:	4903      	ldr	r1, [pc, #12]	@ (8029d94 <stdio_exit_handler+0x10>)
 8029d88:	4803      	ldr	r0, [pc, #12]	@ (8029d98 <stdio_exit_handler+0x14>)
 8029d8a:	f000 b87b 	b.w	8029e84 <_fwalk_sglue>
 8029d8e:	bf00      	nop
 8029d90:	240000b0 	.word	0x240000b0
 8029d94:	0802ade1 	.word	0x0802ade1
 8029d98:	240000c0 	.word	0x240000c0

08029d9c <cleanup_stdio>:
 8029d9c:	6841      	ldr	r1, [r0, #4]
 8029d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8029dd0 <cleanup_stdio+0x34>)
 8029da0:	4299      	cmp	r1, r3
 8029da2:	b510      	push	{r4, lr}
 8029da4:	4604      	mov	r4, r0
 8029da6:	d001      	beq.n	8029dac <cleanup_stdio+0x10>
 8029da8:	f001 f81a 	bl	802ade0 <_fflush_r>
 8029dac:	68a1      	ldr	r1, [r4, #8]
 8029dae:	4b09      	ldr	r3, [pc, #36]	@ (8029dd4 <cleanup_stdio+0x38>)
 8029db0:	4299      	cmp	r1, r3
 8029db2:	d002      	beq.n	8029dba <cleanup_stdio+0x1e>
 8029db4:	4620      	mov	r0, r4
 8029db6:	f001 f813 	bl	802ade0 <_fflush_r>
 8029dba:	68e1      	ldr	r1, [r4, #12]
 8029dbc:	4b06      	ldr	r3, [pc, #24]	@ (8029dd8 <cleanup_stdio+0x3c>)
 8029dbe:	4299      	cmp	r1, r3
 8029dc0:	d004      	beq.n	8029dcc <cleanup_stdio+0x30>
 8029dc2:	4620      	mov	r0, r4
 8029dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029dc8:	f001 b80a 	b.w	802ade0 <_fflush_r>
 8029dcc:	bd10      	pop	{r4, pc}
 8029dce:	bf00      	nop
 8029dd0:	24016584 	.word	0x24016584
 8029dd4:	240165ec 	.word	0x240165ec
 8029dd8:	24016654 	.word	0x24016654

08029ddc <global_stdio_init.part.0>:
 8029ddc:	b510      	push	{r4, lr}
 8029dde:	4b0b      	ldr	r3, [pc, #44]	@ (8029e0c <global_stdio_init.part.0+0x30>)
 8029de0:	4c0b      	ldr	r4, [pc, #44]	@ (8029e10 <global_stdio_init.part.0+0x34>)
 8029de2:	4a0c      	ldr	r2, [pc, #48]	@ (8029e14 <global_stdio_init.part.0+0x38>)
 8029de4:	601a      	str	r2, [r3, #0]
 8029de6:	4620      	mov	r0, r4
 8029de8:	2200      	movs	r2, #0
 8029dea:	2104      	movs	r1, #4
 8029dec:	f7ff ff94 	bl	8029d18 <std>
 8029df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8029df4:	2201      	movs	r2, #1
 8029df6:	2109      	movs	r1, #9
 8029df8:	f7ff ff8e 	bl	8029d18 <std>
 8029dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029e00:	2202      	movs	r2, #2
 8029e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029e06:	2112      	movs	r1, #18
 8029e08:	f7ff bf86 	b.w	8029d18 <std>
 8029e0c:	240166bc 	.word	0x240166bc
 8029e10:	24016584 	.word	0x24016584
 8029e14:	08029d85 	.word	0x08029d85

08029e18 <__sfp_lock_acquire>:
 8029e18:	4801      	ldr	r0, [pc, #4]	@ (8029e20 <__sfp_lock_acquire+0x8>)
 8029e1a:	f000 ba7e 	b.w	802a31a <__retarget_lock_acquire_recursive>
 8029e1e:	bf00      	nop
 8029e20:	240166c6 	.word	0x240166c6

08029e24 <__sfp_lock_release>:
 8029e24:	4801      	ldr	r0, [pc, #4]	@ (8029e2c <__sfp_lock_release+0x8>)
 8029e26:	f000 ba79 	b.w	802a31c <__retarget_lock_release_recursive>
 8029e2a:	bf00      	nop
 8029e2c:	240166c6 	.word	0x240166c6

08029e30 <__sinit>:
 8029e30:	b510      	push	{r4, lr}
 8029e32:	4604      	mov	r4, r0
 8029e34:	f7ff fff0 	bl	8029e18 <__sfp_lock_acquire>
 8029e38:	6a23      	ldr	r3, [r4, #32]
 8029e3a:	b11b      	cbz	r3, 8029e44 <__sinit+0x14>
 8029e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029e40:	f7ff bff0 	b.w	8029e24 <__sfp_lock_release>
 8029e44:	4b04      	ldr	r3, [pc, #16]	@ (8029e58 <__sinit+0x28>)
 8029e46:	6223      	str	r3, [r4, #32]
 8029e48:	4b04      	ldr	r3, [pc, #16]	@ (8029e5c <__sinit+0x2c>)
 8029e4a:	681b      	ldr	r3, [r3, #0]
 8029e4c:	2b00      	cmp	r3, #0
 8029e4e:	d1f5      	bne.n	8029e3c <__sinit+0xc>
 8029e50:	f7ff ffc4 	bl	8029ddc <global_stdio_init.part.0>
 8029e54:	e7f2      	b.n	8029e3c <__sinit+0xc>
 8029e56:	bf00      	nop
 8029e58:	08029d9d 	.word	0x08029d9d
 8029e5c:	240166bc 	.word	0x240166bc

08029e60 <fiprintf>:
 8029e60:	b40e      	push	{r1, r2, r3}
 8029e62:	b503      	push	{r0, r1, lr}
 8029e64:	4601      	mov	r1, r0
 8029e66:	ab03      	add	r3, sp, #12
 8029e68:	4805      	ldr	r0, [pc, #20]	@ (8029e80 <fiprintf+0x20>)
 8029e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029e6e:	6800      	ldr	r0, [r0, #0]
 8029e70:	9301      	str	r3, [sp, #4]
 8029e72:	f000 fc8b 	bl	802a78c <_vfiprintf_r>
 8029e76:	b002      	add	sp, #8
 8029e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8029e7c:	b003      	add	sp, #12
 8029e7e:	4770      	bx	lr
 8029e80:	240000bc 	.word	0x240000bc

08029e84 <_fwalk_sglue>:
 8029e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029e88:	4607      	mov	r7, r0
 8029e8a:	4688      	mov	r8, r1
 8029e8c:	4614      	mov	r4, r2
 8029e8e:	2600      	movs	r6, #0
 8029e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029e94:	f1b9 0901 	subs.w	r9, r9, #1
 8029e98:	d505      	bpl.n	8029ea6 <_fwalk_sglue+0x22>
 8029e9a:	6824      	ldr	r4, [r4, #0]
 8029e9c:	2c00      	cmp	r4, #0
 8029e9e:	d1f7      	bne.n	8029e90 <_fwalk_sglue+0xc>
 8029ea0:	4630      	mov	r0, r6
 8029ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029ea6:	89ab      	ldrh	r3, [r5, #12]
 8029ea8:	2b01      	cmp	r3, #1
 8029eaa:	d907      	bls.n	8029ebc <_fwalk_sglue+0x38>
 8029eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029eb0:	3301      	adds	r3, #1
 8029eb2:	d003      	beq.n	8029ebc <_fwalk_sglue+0x38>
 8029eb4:	4629      	mov	r1, r5
 8029eb6:	4638      	mov	r0, r7
 8029eb8:	47c0      	blx	r8
 8029eba:	4306      	orrs	r6, r0
 8029ebc:	3568      	adds	r5, #104	@ 0x68
 8029ebe:	e7e9      	b.n	8029e94 <_fwalk_sglue+0x10>

08029ec0 <siprintf>:
 8029ec0:	b40e      	push	{r1, r2, r3}
 8029ec2:	b500      	push	{lr}
 8029ec4:	b09c      	sub	sp, #112	@ 0x70
 8029ec6:	ab1d      	add	r3, sp, #116	@ 0x74
 8029ec8:	9002      	str	r0, [sp, #8]
 8029eca:	9006      	str	r0, [sp, #24]
 8029ecc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8029ed0:	4809      	ldr	r0, [pc, #36]	@ (8029ef8 <siprintf+0x38>)
 8029ed2:	9107      	str	r1, [sp, #28]
 8029ed4:	9104      	str	r1, [sp, #16]
 8029ed6:	4909      	ldr	r1, [pc, #36]	@ (8029efc <siprintf+0x3c>)
 8029ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8029edc:	9105      	str	r1, [sp, #20]
 8029ede:	6800      	ldr	r0, [r0, #0]
 8029ee0:	9301      	str	r3, [sp, #4]
 8029ee2:	a902      	add	r1, sp, #8
 8029ee4:	f000 fb2c 	bl	802a540 <_svfiprintf_r>
 8029ee8:	9b02      	ldr	r3, [sp, #8]
 8029eea:	2200      	movs	r2, #0
 8029eec:	701a      	strb	r2, [r3, #0]
 8029eee:	b01c      	add	sp, #112	@ 0x70
 8029ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8029ef4:	b003      	add	sp, #12
 8029ef6:	4770      	bx	lr
 8029ef8:	240000bc 	.word	0x240000bc
 8029efc:	ffff0208 	.word	0xffff0208

08029f00 <__sread>:
 8029f00:	b510      	push	{r4, lr}
 8029f02:	460c      	mov	r4, r1
 8029f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029f08:	f000 f994 	bl	802a234 <_read_r>
 8029f0c:	2800      	cmp	r0, #0
 8029f0e:	bfab      	itete	ge
 8029f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8029f12:	89a3      	ldrhlt	r3, [r4, #12]
 8029f14:	181b      	addge	r3, r3, r0
 8029f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8029f1a:	bfac      	ite	ge
 8029f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8029f1e:	81a3      	strhlt	r3, [r4, #12]
 8029f20:	bd10      	pop	{r4, pc}

08029f22 <__swrite>:
 8029f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029f26:	461f      	mov	r7, r3
 8029f28:	898b      	ldrh	r3, [r1, #12]
 8029f2a:	05db      	lsls	r3, r3, #23
 8029f2c:	4605      	mov	r5, r0
 8029f2e:	460c      	mov	r4, r1
 8029f30:	4616      	mov	r6, r2
 8029f32:	d505      	bpl.n	8029f40 <__swrite+0x1e>
 8029f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029f38:	2302      	movs	r3, #2
 8029f3a:	2200      	movs	r2, #0
 8029f3c:	f000 f968 	bl	802a210 <_lseek_r>
 8029f40:	89a3      	ldrh	r3, [r4, #12]
 8029f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8029f4a:	81a3      	strh	r3, [r4, #12]
 8029f4c:	4632      	mov	r2, r6
 8029f4e:	463b      	mov	r3, r7
 8029f50:	4628      	mov	r0, r5
 8029f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029f56:	f000 b9a3 	b.w	802a2a0 <_write_r>

08029f5a <__sseek>:
 8029f5a:	b510      	push	{r4, lr}
 8029f5c:	460c      	mov	r4, r1
 8029f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029f62:	f000 f955 	bl	802a210 <_lseek_r>
 8029f66:	1c43      	adds	r3, r0, #1
 8029f68:	89a3      	ldrh	r3, [r4, #12]
 8029f6a:	bf15      	itete	ne
 8029f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8029f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029f76:	81a3      	strheq	r3, [r4, #12]
 8029f78:	bf18      	it	ne
 8029f7a:	81a3      	strhne	r3, [r4, #12]
 8029f7c:	bd10      	pop	{r4, pc}

08029f7e <__sclose>:
 8029f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029f82:	f000 b8df 	b.w	802a144 <_close_r>

08029f86 <__swbuf_r>:
 8029f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029f88:	460e      	mov	r6, r1
 8029f8a:	4614      	mov	r4, r2
 8029f8c:	4605      	mov	r5, r0
 8029f8e:	b118      	cbz	r0, 8029f98 <__swbuf_r+0x12>
 8029f90:	6a03      	ldr	r3, [r0, #32]
 8029f92:	b90b      	cbnz	r3, 8029f98 <__swbuf_r+0x12>
 8029f94:	f7ff ff4c 	bl	8029e30 <__sinit>
 8029f98:	69a3      	ldr	r3, [r4, #24]
 8029f9a:	60a3      	str	r3, [r4, #8]
 8029f9c:	89a3      	ldrh	r3, [r4, #12]
 8029f9e:	071a      	lsls	r2, r3, #28
 8029fa0:	d501      	bpl.n	8029fa6 <__swbuf_r+0x20>
 8029fa2:	6923      	ldr	r3, [r4, #16]
 8029fa4:	b943      	cbnz	r3, 8029fb8 <__swbuf_r+0x32>
 8029fa6:	4621      	mov	r1, r4
 8029fa8:	4628      	mov	r0, r5
 8029faa:	f000 f82b 	bl	802a004 <__swsetup_r>
 8029fae:	b118      	cbz	r0, 8029fb8 <__swbuf_r+0x32>
 8029fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8029fb4:	4638      	mov	r0, r7
 8029fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029fb8:	6823      	ldr	r3, [r4, #0]
 8029fba:	6922      	ldr	r2, [r4, #16]
 8029fbc:	1a98      	subs	r0, r3, r2
 8029fbe:	6963      	ldr	r3, [r4, #20]
 8029fc0:	b2f6      	uxtb	r6, r6
 8029fc2:	4283      	cmp	r3, r0
 8029fc4:	4637      	mov	r7, r6
 8029fc6:	dc05      	bgt.n	8029fd4 <__swbuf_r+0x4e>
 8029fc8:	4621      	mov	r1, r4
 8029fca:	4628      	mov	r0, r5
 8029fcc:	f000 ff08 	bl	802ade0 <_fflush_r>
 8029fd0:	2800      	cmp	r0, #0
 8029fd2:	d1ed      	bne.n	8029fb0 <__swbuf_r+0x2a>
 8029fd4:	68a3      	ldr	r3, [r4, #8]
 8029fd6:	3b01      	subs	r3, #1
 8029fd8:	60a3      	str	r3, [r4, #8]
 8029fda:	6823      	ldr	r3, [r4, #0]
 8029fdc:	1c5a      	adds	r2, r3, #1
 8029fde:	6022      	str	r2, [r4, #0]
 8029fe0:	701e      	strb	r6, [r3, #0]
 8029fe2:	6962      	ldr	r2, [r4, #20]
 8029fe4:	1c43      	adds	r3, r0, #1
 8029fe6:	429a      	cmp	r2, r3
 8029fe8:	d004      	beq.n	8029ff4 <__swbuf_r+0x6e>
 8029fea:	89a3      	ldrh	r3, [r4, #12]
 8029fec:	07db      	lsls	r3, r3, #31
 8029fee:	d5e1      	bpl.n	8029fb4 <__swbuf_r+0x2e>
 8029ff0:	2e0a      	cmp	r6, #10
 8029ff2:	d1df      	bne.n	8029fb4 <__swbuf_r+0x2e>
 8029ff4:	4621      	mov	r1, r4
 8029ff6:	4628      	mov	r0, r5
 8029ff8:	f000 fef2 	bl	802ade0 <_fflush_r>
 8029ffc:	2800      	cmp	r0, #0
 8029ffe:	d0d9      	beq.n	8029fb4 <__swbuf_r+0x2e>
 802a000:	e7d6      	b.n	8029fb0 <__swbuf_r+0x2a>
	...

0802a004 <__swsetup_r>:
 802a004:	b538      	push	{r3, r4, r5, lr}
 802a006:	4b29      	ldr	r3, [pc, #164]	@ (802a0ac <__swsetup_r+0xa8>)
 802a008:	4605      	mov	r5, r0
 802a00a:	6818      	ldr	r0, [r3, #0]
 802a00c:	460c      	mov	r4, r1
 802a00e:	b118      	cbz	r0, 802a018 <__swsetup_r+0x14>
 802a010:	6a03      	ldr	r3, [r0, #32]
 802a012:	b90b      	cbnz	r3, 802a018 <__swsetup_r+0x14>
 802a014:	f7ff ff0c 	bl	8029e30 <__sinit>
 802a018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a01c:	0719      	lsls	r1, r3, #28
 802a01e:	d422      	bmi.n	802a066 <__swsetup_r+0x62>
 802a020:	06da      	lsls	r2, r3, #27
 802a022:	d407      	bmi.n	802a034 <__swsetup_r+0x30>
 802a024:	2209      	movs	r2, #9
 802a026:	602a      	str	r2, [r5, #0]
 802a028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a02c:	81a3      	strh	r3, [r4, #12]
 802a02e:	f04f 30ff 	mov.w	r0, #4294967295
 802a032:	e033      	b.n	802a09c <__swsetup_r+0x98>
 802a034:	0758      	lsls	r0, r3, #29
 802a036:	d512      	bpl.n	802a05e <__swsetup_r+0x5a>
 802a038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a03a:	b141      	cbz	r1, 802a04e <__swsetup_r+0x4a>
 802a03c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a040:	4299      	cmp	r1, r3
 802a042:	d002      	beq.n	802a04a <__swsetup_r+0x46>
 802a044:	4628      	mov	r0, r5
 802a046:	f000 f9d5 	bl	802a3f4 <_free_r>
 802a04a:	2300      	movs	r3, #0
 802a04c:	6363      	str	r3, [r4, #52]	@ 0x34
 802a04e:	89a3      	ldrh	r3, [r4, #12]
 802a050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802a054:	81a3      	strh	r3, [r4, #12]
 802a056:	2300      	movs	r3, #0
 802a058:	6063      	str	r3, [r4, #4]
 802a05a:	6923      	ldr	r3, [r4, #16]
 802a05c:	6023      	str	r3, [r4, #0]
 802a05e:	89a3      	ldrh	r3, [r4, #12]
 802a060:	f043 0308 	orr.w	r3, r3, #8
 802a064:	81a3      	strh	r3, [r4, #12]
 802a066:	6923      	ldr	r3, [r4, #16]
 802a068:	b94b      	cbnz	r3, 802a07e <__swsetup_r+0x7a>
 802a06a:	89a3      	ldrh	r3, [r4, #12]
 802a06c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802a070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802a074:	d003      	beq.n	802a07e <__swsetup_r+0x7a>
 802a076:	4621      	mov	r1, r4
 802a078:	4628      	mov	r0, r5
 802a07a:	f000 feff 	bl	802ae7c <__smakebuf_r>
 802a07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a082:	f013 0201 	ands.w	r2, r3, #1
 802a086:	d00a      	beq.n	802a09e <__swsetup_r+0x9a>
 802a088:	2200      	movs	r2, #0
 802a08a:	60a2      	str	r2, [r4, #8]
 802a08c:	6962      	ldr	r2, [r4, #20]
 802a08e:	4252      	negs	r2, r2
 802a090:	61a2      	str	r2, [r4, #24]
 802a092:	6922      	ldr	r2, [r4, #16]
 802a094:	b942      	cbnz	r2, 802a0a8 <__swsetup_r+0xa4>
 802a096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802a09a:	d1c5      	bne.n	802a028 <__swsetup_r+0x24>
 802a09c:	bd38      	pop	{r3, r4, r5, pc}
 802a09e:	0799      	lsls	r1, r3, #30
 802a0a0:	bf58      	it	pl
 802a0a2:	6962      	ldrpl	r2, [r4, #20]
 802a0a4:	60a2      	str	r2, [r4, #8]
 802a0a6:	e7f4      	b.n	802a092 <__swsetup_r+0x8e>
 802a0a8:	2000      	movs	r0, #0
 802a0aa:	e7f7      	b.n	802a09c <__swsetup_r+0x98>
 802a0ac:	240000bc 	.word	0x240000bc

0802a0b0 <memset>:
 802a0b0:	4402      	add	r2, r0
 802a0b2:	4603      	mov	r3, r0
 802a0b4:	4293      	cmp	r3, r2
 802a0b6:	d100      	bne.n	802a0ba <memset+0xa>
 802a0b8:	4770      	bx	lr
 802a0ba:	f803 1b01 	strb.w	r1, [r3], #1
 802a0be:	e7f9      	b.n	802a0b4 <memset+0x4>

0802a0c0 <strncmp>:
 802a0c0:	b510      	push	{r4, lr}
 802a0c2:	b16a      	cbz	r2, 802a0e0 <strncmp+0x20>
 802a0c4:	3901      	subs	r1, #1
 802a0c6:	1884      	adds	r4, r0, r2
 802a0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a0cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802a0d0:	429a      	cmp	r2, r3
 802a0d2:	d103      	bne.n	802a0dc <strncmp+0x1c>
 802a0d4:	42a0      	cmp	r0, r4
 802a0d6:	d001      	beq.n	802a0dc <strncmp+0x1c>
 802a0d8:	2a00      	cmp	r2, #0
 802a0da:	d1f5      	bne.n	802a0c8 <strncmp+0x8>
 802a0dc:	1ad0      	subs	r0, r2, r3
 802a0de:	bd10      	pop	{r4, pc}
 802a0e0:	4610      	mov	r0, r2
 802a0e2:	e7fc      	b.n	802a0de <strncmp+0x1e>

0802a0e4 <_raise_r>:
 802a0e4:	291f      	cmp	r1, #31
 802a0e6:	b538      	push	{r3, r4, r5, lr}
 802a0e8:	4605      	mov	r5, r0
 802a0ea:	460c      	mov	r4, r1
 802a0ec:	d904      	bls.n	802a0f8 <_raise_r+0x14>
 802a0ee:	2316      	movs	r3, #22
 802a0f0:	6003      	str	r3, [r0, #0]
 802a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 802a0f6:	bd38      	pop	{r3, r4, r5, pc}
 802a0f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802a0fa:	b112      	cbz	r2, 802a102 <_raise_r+0x1e>
 802a0fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a100:	b94b      	cbnz	r3, 802a116 <_raise_r+0x32>
 802a102:	4628      	mov	r0, r5
 802a104:	f000 f8ba 	bl	802a27c <_getpid_r>
 802a108:	4622      	mov	r2, r4
 802a10a:	4601      	mov	r1, r0
 802a10c:	4628      	mov	r0, r5
 802a10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a112:	f000 b8a1 	b.w	802a258 <_kill_r>
 802a116:	2b01      	cmp	r3, #1
 802a118:	d00a      	beq.n	802a130 <_raise_r+0x4c>
 802a11a:	1c59      	adds	r1, r3, #1
 802a11c:	d103      	bne.n	802a126 <_raise_r+0x42>
 802a11e:	2316      	movs	r3, #22
 802a120:	6003      	str	r3, [r0, #0]
 802a122:	2001      	movs	r0, #1
 802a124:	e7e7      	b.n	802a0f6 <_raise_r+0x12>
 802a126:	2100      	movs	r1, #0
 802a128:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802a12c:	4620      	mov	r0, r4
 802a12e:	4798      	blx	r3
 802a130:	2000      	movs	r0, #0
 802a132:	e7e0      	b.n	802a0f6 <_raise_r+0x12>

0802a134 <raise>:
 802a134:	4b02      	ldr	r3, [pc, #8]	@ (802a140 <raise+0xc>)
 802a136:	4601      	mov	r1, r0
 802a138:	6818      	ldr	r0, [r3, #0]
 802a13a:	f7ff bfd3 	b.w	802a0e4 <_raise_r>
 802a13e:	bf00      	nop
 802a140:	240000bc 	.word	0x240000bc

0802a144 <_close_r>:
 802a144:	b538      	push	{r3, r4, r5, lr}
 802a146:	4d06      	ldr	r5, [pc, #24]	@ (802a160 <_close_r+0x1c>)
 802a148:	2300      	movs	r3, #0
 802a14a:	4604      	mov	r4, r0
 802a14c:	4608      	mov	r0, r1
 802a14e:	602b      	str	r3, [r5, #0]
 802a150:	f7d7 f98a 	bl	8001468 <_close>
 802a154:	1c43      	adds	r3, r0, #1
 802a156:	d102      	bne.n	802a15e <_close_r+0x1a>
 802a158:	682b      	ldr	r3, [r5, #0]
 802a15a:	b103      	cbz	r3, 802a15e <_close_r+0x1a>
 802a15c:	6023      	str	r3, [r4, #0]
 802a15e:	bd38      	pop	{r3, r4, r5, pc}
 802a160:	240166c0 	.word	0x240166c0

0802a164 <_reclaim_reent>:
 802a164:	4b29      	ldr	r3, [pc, #164]	@ (802a20c <_reclaim_reent+0xa8>)
 802a166:	681b      	ldr	r3, [r3, #0]
 802a168:	4283      	cmp	r3, r0
 802a16a:	b570      	push	{r4, r5, r6, lr}
 802a16c:	4604      	mov	r4, r0
 802a16e:	d04b      	beq.n	802a208 <_reclaim_reent+0xa4>
 802a170:	69c3      	ldr	r3, [r0, #28]
 802a172:	b1ab      	cbz	r3, 802a1a0 <_reclaim_reent+0x3c>
 802a174:	68db      	ldr	r3, [r3, #12]
 802a176:	b16b      	cbz	r3, 802a194 <_reclaim_reent+0x30>
 802a178:	2500      	movs	r5, #0
 802a17a:	69e3      	ldr	r3, [r4, #28]
 802a17c:	68db      	ldr	r3, [r3, #12]
 802a17e:	5959      	ldr	r1, [r3, r5]
 802a180:	2900      	cmp	r1, #0
 802a182:	d13b      	bne.n	802a1fc <_reclaim_reent+0x98>
 802a184:	3504      	adds	r5, #4
 802a186:	2d80      	cmp	r5, #128	@ 0x80
 802a188:	d1f7      	bne.n	802a17a <_reclaim_reent+0x16>
 802a18a:	69e3      	ldr	r3, [r4, #28]
 802a18c:	4620      	mov	r0, r4
 802a18e:	68d9      	ldr	r1, [r3, #12]
 802a190:	f000 f930 	bl	802a3f4 <_free_r>
 802a194:	69e3      	ldr	r3, [r4, #28]
 802a196:	6819      	ldr	r1, [r3, #0]
 802a198:	b111      	cbz	r1, 802a1a0 <_reclaim_reent+0x3c>
 802a19a:	4620      	mov	r0, r4
 802a19c:	f000 f92a 	bl	802a3f4 <_free_r>
 802a1a0:	6961      	ldr	r1, [r4, #20]
 802a1a2:	b111      	cbz	r1, 802a1aa <_reclaim_reent+0x46>
 802a1a4:	4620      	mov	r0, r4
 802a1a6:	f000 f925 	bl	802a3f4 <_free_r>
 802a1aa:	69e1      	ldr	r1, [r4, #28]
 802a1ac:	b111      	cbz	r1, 802a1b4 <_reclaim_reent+0x50>
 802a1ae:	4620      	mov	r0, r4
 802a1b0:	f000 f920 	bl	802a3f4 <_free_r>
 802a1b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802a1b6:	b111      	cbz	r1, 802a1be <_reclaim_reent+0x5a>
 802a1b8:	4620      	mov	r0, r4
 802a1ba:	f000 f91b 	bl	802a3f4 <_free_r>
 802a1be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a1c0:	b111      	cbz	r1, 802a1c8 <_reclaim_reent+0x64>
 802a1c2:	4620      	mov	r0, r4
 802a1c4:	f000 f916 	bl	802a3f4 <_free_r>
 802a1c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802a1ca:	b111      	cbz	r1, 802a1d2 <_reclaim_reent+0x6e>
 802a1cc:	4620      	mov	r0, r4
 802a1ce:	f000 f911 	bl	802a3f4 <_free_r>
 802a1d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802a1d4:	b111      	cbz	r1, 802a1dc <_reclaim_reent+0x78>
 802a1d6:	4620      	mov	r0, r4
 802a1d8:	f000 f90c 	bl	802a3f4 <_free_r>
 802a1dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802a1de:	b111      	cbz	r1, 802a1e6 <_reclaim_reent+0x82>
 802a1e0:	4620      	mov	r0, r4
 802a1e2:	f000 f907 	bl	802a3f4 <_free_r>
 802a1e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802a1e8:	b111      	cbz	r1, 802a1f0 <_reclaim_reent+0x8c>
 802a1ea:	4620      	mov	r0, r4
 802a1ec:	f000 f902 	bl	802a3f4 <_free_r>
 802a1f0:	6a23      	ldr	r3, [r4, #32]
 802a1f2:	b14b      	cbz	r3, 802a208 <_reclaim_reent+0xa4>
 802a1f4:	4620      	mov	r0, r4
 802a1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a1fa:	4718      	bx	r3
 802a1fc:	680e      	ldr	r6, [r1, #0]
 802a1fe:	4620      	mov	r0, r4
 802a200:	f000 f8f8 	bl	802a3f4 <_free_r>
 802a204:	4631      	mov	r1, r6
 802a206:	e7bb      	b.n	802a180 <_reclaim_reent+0x1c>
 802a208:	bd70      	pop	{r4, r5, r6, pc}
 802a20a:	bf00      	nop
 802a20c:	240000bc 	.word	0x240000bc

0802a210 <_lseek_r>:
 802a210:	b538      	push	{r3, r4, r5, lr}
 802a212:	4d07      	ldr	r5, [pc, #28]	@ (802a230 <_lseek_r+0x20>)
 802a214:	4604      	mov	r4, r0
 802a216:	4608      	mov	r0, r1
 802a218:	4611      	mov	r1, r2
 802a21a:	2200      	movs	r2, #0
 802a21c:	602a      	str	r2, [r5, #0]
 802a21e:	461a      	mov	r2, r3
 802a220:	f7d7 f92c 	bl	800147c <_lseek>
 802a224:	1c43      	adds	r3, r0, #1
 802a226:	d102      	bne.n	802a22e <_lseek_r+0x1e>
 802a228:	682b      	ldr	r3, [r5, #0]
 802a22a:	b103      	cbz	r3, 802a22e <_lseek_r+0x1e>
 802a22c:	6023      	str	r3, [r4, #0]
 802a22e:	bd38      	pop	{r3, r4, r5, pc}
 802a230:	240166c0 	.word	0x240166c0

0802a234 <_read_r>:
 802a234:	b538      	push	{r3, r4, r5, lr}
 802a236:	4d07      	ldr	r5, [pc, #28]	@ (802a254 <_read_r+0x20>)
 802a238:	4604      	mov	r4, r0
 802a23a:	4608      	mov	r0, r1
 802a23c:	4611      	mov	r1, r2
 802a23e:	2200      	movs	r2, #0
 802a240:	602a      	str	r2, [r5, #0]
 802a242:	461a      	mov	r2, r3
 802a244:	f7d7 f8f4 	bl	8001430 <_read>
 802a248:	1c43      	adds	r3, r0, #1
 802a24a:	d102      	bne.n	802a252 <_read_r+0x1e>
 802a24c:	682b      	ldr	r3, [r5, #0]
 802a24e:	b103      	cbz	r3, 802a252 <_read_r+0x1e>
 802a250:	6023      	str	r3, [r4, #0]
 802a252:	bd38      	pop	{r3, r4, r5, pc}
 802a254:	240166c0 	.word	0x240166c0

0802a258 <_kill_r>:
 802a258:	b538      	push	{r3, r4, r5, lr}
 802a25a:	4d07      	ldr	r5, [pc, #28]	@ (802a278 <_kill_r+0x20>)
 802a25c:	2300      	movs	r3, #0
 802a25e:	4604      	mov	r4, r0
 802a260:	4608      	mov	r0, r1
 802a262:	4611      	mov	r1, r2
 802a264:	602b      	str	r3, [r5, #0]
 802a266:	f7d7 f8d5 	bl	8001414 <_kill>
 802a26a:	1c43      	adds	r3, r0, #1
 802a26c:	d102      	bne.n	802a274 <_kill_r+0x1c>
 802a26e:	682b      	ldr	r3, [r5, #0]
 802a270:	b103      	cbz	r3, 802a274 <_kill_r+0x1c>
 802a272:	6023      	str	r3, [r4, #0]
 802a274:	bd38      	pop	{r3, r4, r5, pc}
 802a276:	bf00      	nop
 802a278:	240166c0 	.word	0x240166c0

0802a27c <_getpid_r>:
 802a27c:	f7d7 b8c8 	b.w	8001410 <_getpid>

0802a280 <_sbrk_r>:
 802a280:	b538      	push	{r3, r4, r5, lr}
 802a282:	4d06      	ldr	r5, [pc, #24]	@ (802a29c <_sbrk_r+0x1c>)
 802a284:	2300      	movs	r3, #0
 802a286:	4604      	mov	r4, r0
 802a288:	4608      	mov	r0, r1
 802a28a:	602b      	str	r3, [r5, #0]
 802a28c:	f7d7 f8f8 	bl	8001480 <_sbrk>
 802a290:	1c43      	adds	r3, r0, #1
 802a292:	d102      	bne.n	802a29a <_sbrk_r+0x1a>
 802a294:	682b      	ldr	r3, [r5, #0]
 802a296:	b103      	cbz	r3, 802a29a <_sbrk_r+0x1a>
 802a298:	6023      	str	r3, [r4, #0]
 802a29a:	bd38      	pop	{r3, r4, r5, pc}
 802a29c:	240166c0 	.word	0x240166c0

0802a2a0 <_write_r>:
 802a2a0:	b538      	push	{r3, r4, r5, lr}
 802a2a2:	4d07      	ldr	r5, [pc, #28]	@ (802a2c0 <_write_r+0x20>)
 802a2a4:	4604      	mov	r4, r0
 802a2a6:	4608      	mov	r0, r1
 802a2a8:	4611      	mov	r1, r2
 802a2aa:	2200      	movs	r2, #0
 802a2ac:	602a      	str	r2, [r5, #0]
 802a2ae:	461a      	mov	r2, r3
 802a2b0:	f7d7 f8cc 	bl	800144c <_write>
 802a2b4:	1c43      	adds	r3, r0, #1
 802a2b6:	d102      	bne.n	802a2be <_write_r+0x1e>
 802a2b8:	682b      	ldr	r3, [r5, #0]
 802a2ba:	b103      	cbz	r3, 802a2be <_write_r+0x1e>
 802a2bc:	6023      	str	r3, [r4, #0]
 802a2be:	bd38      	pop	{r3, r4, r5, pc}
 802a2c0:	240166c0 	.word	0x240166c0

0802a2c4 <__errno>:
 802a2c4:	4b01      	ldr	r3, [pc, #4]	@ (802a2cc <__errno+0x8>)
 802a2c6:	6818      	ldr	r0, [r3, #0]
 802a2c8:	4770      	bx	lr
 802a2ca:	bf00      	nop
 802a2cc:	240000bc 	.word	0x240000bc

0802a2d0 <__libc_init_array>:
 802a2d0:	b570      	push	{r4, r5, r6, lr}
 802a2d2:	4d0d      	ldr	r5, [pc, #52]	@ (802a308 <__libc_init_array+0x38>)
 802a2d4:	4c0d      	ldr	r4, [pc, #52]	@ (802a30c <__libc_init_array+0x3c>)
 802a2d6:	1b64      	subs	r4, r4, r5
 802a2d8:	10a4      	asrs	r4, r4, #2
 802a2da:	2600      	movs	r6, #0
 802a2dc:	42a6      	cmp	r6, r4
 802a2de:	d109      	bne.n	802a2f4 <__libc_init_array+0x24>
 802a2e0:	4d0b      	ldr	r5, [pc, #44]	@ (802a310 <__libc_init_array+0x40>)
 802a2e2:	4c0c      	ldr	r4, [pc, #48]	@ (802a314 <__libc_init_array+0x44>)
 802a2e4:	f000 fe78 	bl	802afd8 <_init>
 802a2e8:	1b64      	subs	r4, r4, r5
 802a2ea:	10a4      	asrs	r4, r4, #2
 802a2ec:	2600      	movs	r6, #0
 802a2ee:	42a6      	cmp	r6, r4
 802a2f0:	d105      	bne.n	802a2fe <__libc_init_array+0x2e>
 802a2f2:	bd70      	pop	{r4, r5, r6, pc}
 802a2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 802a2f8:	4798      	blx	r3
 802a2fa:	3601      	adds	r6, #1
 802a2fc:	e7ee      	b.n	802a2dc <__libc_init_array+0xc>
 802a2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 802a302:	4798      	blx	r3
 802a304:	3601      	adds	r6, #1
 802a306:	e7f2      	b.n	802a2ee <__libc_init_array+0x1e>
 802a308:	0802fe9c 	.word	0x0802fe9c
 802a30c:	0802fe9c 	.word	0x0802fe9c
 802a310:	0802fe9c 	.word	0x0802fe9c
 802a314:	0802feb4 	.word	0x0802feb4

0802a318 <__retarget_lock_init_recursive>:
 802a318:	4770      	bx	lr

0802a31a <__retarget_lock_acquire_recursive>:
 802a31a:	4770      	bx	lr

0802a31c <__retarget_lock_release_recursive>:
 802a31c:	4770      	bx	lr

0802a31e <memcpy>:
 802a31e:	440a      	add	r2, r1
 802a320:	4291      	cmp	r1, r2
 802a322:	f100 33ff 	add.w	r3, r0, #4294967295
 802a326:	d100      	bne.n	802a32a <memcpy+0xc>
 802a328:	4770      	bx	lr
 802a32a:	b510      	push	{r4, lr}
 802a32c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a330:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a334:	4291      	cmp	r1, r2
 802a336:	d1f9      	bne.n	802a32c <memcpy+0xe>
 802a338:	bd10      	pop	{r4, pc}
	...

0802a33c <__register_exitproc>:
 802a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a340:	4d27      	ldr	r5, [pc, #156]	@ (802a3e0 <__register_exitproc+0xa4>)
 802a342:	4607      	mov	r7, r0
 802a344:	6828      	ldr	r0, [r5, #0]
 802a346:	4691      	mov	r9, r2
 802a348:	460e      	mov	r6, r1
 802a34a:	4698      	mov	r8, r3
 802a34c:	f7ff ffe5 	bl	802a31a <__retarget_lock_acquire_recursive>
 802a350:	4a24      	ldr	r2, [pc, #144]	@ (802a3e4 <__register_exitproc+0xa8>)
 802a352:	6814      	ldr	r4, [r2, #0]
 802a354:	b93c      	cbnz	r4, 802a366 <__register_exitproc+0x2a>
 802a356:	4b24      	ldr	r3, [pc, #144]	@ (802a3e8 <__register_exitproc+0xac>)
 802a358:	6013      	str	r3, [r2, #0]
 802a35a:	4a24      	ldr	r2, [pc, #144]	@ (802a3ec <__register_exitproc+0xb0>)
 802a35c:	b112      	cbz	r2, 802a364 <__register_exitproc+0x28>
 802a35e:	6812      	ldr	r2, [r2, #0]
 802a360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802a364:	4c20      	ldr	r4, [pc, #128]	@ (802a3e8 <__register_exitproc+0xac>)
 802a366:	6863      	ldr	r3, [r4, #4]
 802a368:	2b1f      	cmp	r3, #31
 802a36a:	dd06      	ble.n	802a37a <__register_exitproc+0x3e>
 802a36c:	6828      	ldr	r0, [r5, #0]
 802a36e:	f7ff ffd5 	bl	802a31c <__retarget_lock_release_recursive>
 802a372:	f04f 30ff 	mov.w	r0, #4294967295
 802a376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a37a:	b32f      	cbz	r7, 802a3c8 <__register_exitproc+0x8c>
 802a37c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802a380:	b968      	cbnz	r0, 802a39e <__register_exitproc+0x62>
 802a382:	4b1b      	ldr	r3, [pc, #108]	@ (802a3f0 <__register_exitproc+0xb4>)
 802a384:	2b00      	cmp	r3, #0
 802a386:	d0f1      	beq.n	802a36c <__register_exitproc+0x30>
 802a388:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802a38c:	f7ff fbf8 	bl	8029b80 <malloc>
 802a390:	2800      	cmp	r0, #0
 802a392:	d0eb      	beq.n	802a36c <__register_exitproc+0x30>
 802a394:	2300      	movs	r3, #0
 802a396:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802a39a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802a39e:	6863      	ldr	r3, [r4, #4]
 802a3a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a3a4:	2201      	movs	r2, #1
 802a3a6:	409a      	lsls	r2, r3
 802a3a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a3ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802a3b0:	4313      	orrs	r3, r2
 802a3b2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802a3b6:	2f02      	cmp	r7, #2
 802a3b8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802a3bc:	bf02      	ittt	eq
 802a3be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802a3c2:	4313      	orreq	r3, r2
 802a3c4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802a3c8:	6863      	ldr	r3, [r4, #4]
 802a3ca:	6828      	ldr	r0, [r5, #0]
 802a3cc:	1c5a      	adds	r2, r3, #1
 802a3ce:	3302      	adds	r3, #2
 802a3d0:	6062      	str	r2, [r4, #4]
 802a3d2:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802a3d6:	f7ff ffa1 	bl	802a31c <__retarget_lock_release_recursive>
 802a3da:	2000      	movs	r0, #0
 802a3dc:	e7cb      	b.n	802a376 <__register_exitproc+0x3a>
 802a3de:	bf00      	nop
 802a3e0:	2400010c 	.word	0x2400010c
 802a3e4:	24016754 	.word	0x24016754
 802a3e8:	240166c8 	.word	0x240166c8
 802a3ec:	0802fc8c 	.word	0x0802fc8c
 802a3f0:	08029b81 	.word	0x08029b81

0802a3f4 <_free_r>:
 802a3f4:	b538      	push	{r3, r4, r5, lr}
 802a3f6:	4605      	mov	r5, r0
 802a3f8:	2900      	cmp	r1, #0
 802a3fa:	d041      	beq.n	802a480 <_free_r+0x8c>
 802a3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a400:	1f0c      	subs	r4, r1, #4
 802a402:	2b00      	cmp	r3, #0
 802a404:	bfb8      	it	lt
 802a406:	18e4      	addlt	r4, r4, r3
 802a408:	f7ff fc6c 	bl	8029ce4 <__malloc_lock>
 802a40c:	4a1d      	ldr	r2, [pc, #116]	@ (802a484 <_free_r+0x90>)
 802a40e:	6813      	ldr	r3, [r2, #0]
 802a410:	b933      	cbnz	r3, 802a420 <_free_r+0x2c>
 802a412:	6063      	str	r3, [r4, #4]
 802a414:	6014      	str	r4, [r2, #0]
 802a416:	4628      	mov	r0, r5
 802a418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a41c:	f7ff bc68 	b.w	8029cf0 <__malloc_unlock>
 802a420:	42a3      	cmp	r3, r4
 802a422:	d908      	bls.n	802a436 <_free_r+0x42>
 802a424:	6820      	ldr	r0, [r4, #0]
 802a426:	1821      	adds	r1, r4, r0
 802a428:	428b      	cmp	r3, r1
 802a42a:	bf01      	itttt	eq
 802a42c:	6819      	ldreq	r1, [r3, #0]
 802a42e:	685b      	ldreq	r3, [r3, #4]
 802a430:	1809      	addeq	r1, r1, r0
 802a432:	6021      	streq	r1, [r4, #0]
 802a434:	e7ed      	b.n	802a412 <_free_r+0x1e>
 802a436:	461a      	mov	r2, r3
 802a438:	685b      	ldr	r3, [r3, #4]
 802a43a:	b10b      	cbz	r3, 802a440 <_free_r+0x4c>
 802a43c:	42a3      	cmp	r3, r4
 802a43e:	d9fa      	bls.n	802a436 <_free_r+0x42>
 802a440:	6811      	ldr	r1, [r2, #0]
 802a442:	1850      	adds	r0, r2, r1
 802a444:	42a0      	cmp	r0, r4
 802a446:	d10b      	bne.n	802a460 <_free_r+0x6c>
 802a448:	6820      	ldr	r0, [r4, #0]
 802a44a:	4401      	add	r1, r0
 802a44c:	1850      	adds	r0, r2, r1
 802a44e:	4283      	cmp	r3, r0
 802a450:	6011      	str	r1, [r2, #0]
 802a452:	d1e0      	bne.n	802a416 <_free_r+0x22>
 802a454:	6818      	ldr	r0, [r3, #0]
 802a456:	685b      	ldr	r3, [r3, #4]
 802a458:	6053      	str	r3, [r2, #4]
 802a45a:	4408      	add	r0, r1
 802a45c:	6010      	str	r0, [r2, #0]
 802a45e:	e7da      	b.n	802a416 <_free_r+0x22>
 802a460:	d902      	bls.n	802a468 <_free_r+0x74>
 802a462:	230c      	movs	r3, #12
 802a464:	602b      	str	r3, [r5, #0]
 802a466:	e7d6      	b.n	802a416 <_free_r+0x22>
 802a468:	6820      	ldr	r0, [r4, #0]
 802a46a:	1821      	adds	r1, r4, r0
 802a46c:	428b      	cmp	r3, r1
 802a46e:	bf04      	itt	eq
 802a470:	6819      	ldreq	r1, [r3, #0]
 802a472:	685b      	ldreq	r3, [r3, #4]
 802a474:	6063      	str	r3, [r4, #4]
 802a476:	bf04      	itt	eq
 802a478:	1809      	addeq	r1, r1, r0
 802a47a:	6021      	streq	r1, [r4, #0]
 802a47c:	6054      	str	r4, [r2, #4]
 802a47e:	e7ca      	b.n	802a416 <_free_r+0x22>
 802a480:	bd38      	pop	{r3, r4, r5, pc}
 802a482:	bf00      	nop
 802a484:	24016580 	.word	0x24016580

0802a488 <__ssputs_r>:
 802a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a48c:	688e      	ldr	r6, [r1, #8]
 802a48e:	461f      	mov	r7, r3
 802a490:	42be      	cmp	r6, r7
 802a492:	680b      	ldr	r3, [r1, #0]
 802a494:	4682      	mov	sl, r0
 802a496:	460c      	mov	r4, r1
 802a498:	4690      	mov	r8, r2
 802a49a:	d82d      	bhi.n	802a4f8 <__ssputs_r+0x70>
 802a49c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802a4a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802a4a4:	d026      	beq.n	802a4f4 <__ssputs_r+0x6c>
 802a4a6:	6965      	ldr	r5, [r4, #20]
 802a4a8:	6909      	ldr	r1, [r1, #16]
 802a4aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a4ae:	eba3 0901 	sub.w	r9, r3, r1
 802a4b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a4b6:	1c7b      	adds	r3, r7, #1
 802a4b8:	444b      	add	r3, r9
 802a4ba:	106d      	asrs	r5, r5, #1
 802a4bc:	429d      	cmp	r5, r3
 802a4be:	bf38      	it	cc
 802a4c0:	461d      	movcc	r5, r3
 802a4c2:	0553      	lsls	r3, r2, #21
 802a4c4:	d527      	bpl.n	802a516 <__ssputs_r+0x8e>
 802a4c6:	4629      	mov	r1, r5
 802a4c8:	f7ff fb8c 	bl	8029be4 <_malloc_r>
 802a4cc:	4606      	mov	r6, r0
 802a4ce:	b360      	cbz	r0, 802a52a <__ssputs_r+0xa2>
 802a4d0:	6921      	ldr	r1, [r4, #16]
 802a4d2:	464a      	mov	r2, r9
 802a4d4:	f7ff ff23 	bl	802a31e <memcpy>
 802a4d8:	89a3      	ldrh	r3, [r4, #12]
 802a4da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802a4de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a4e2:	81a3      	strh	r3, [r4, #12]
 802a4e4:	6126      	str	r6, [r4, #16]
 802a4e6:	6165      	str	r5, [r4, #20]
 802a4e8:	444e      	add	r6, r9
 802a4ea:	eba5 0509 	sub.w	r5, r5, r9
 802a4ee:	6026      	str	r6, [r4, #0]
 802a4f0:	60a5      	str	r5, [r4, #8]
 802a4f2:	463e      	mov	r6, r7
 802a4f4:	42be      	cmp	r6, r7
 802a4f6:	d900      	bls.n	802a4fa <__ssputs_r+0x72>
 802a4f8:	463e      	mov	r6, r7
 802a4fa:	6820      	ldr	r0, [r4, #0]
 802a4fc:	4632      	mov	r2, r6
 802a4fe:	4641      	mov	r1, r8
 802a500:	f000 fcf8 	bl	802aef4 <memmove>
 802a504:	68a3      	ldr	r3, [r4, #8]
 802a506:	1b9b      	subs	r3, r3, r6
 802a508:	60a3      	str	r3, [r4, #8]
 802a50a:	6823      	ldr	r3, [r4, #0]
 802a50c:	4433      	add	r3, r6
 802a50e:	6023      	str	r3, [r4, #0]
 802a510:	2000      	movs	r0, #0
 802a512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a516:	462a      	mov	r2, r5
 802a518:	f000 fd28 	bl	802af6c <_realloc_r>
 802a51c:	4606      	mov	r6, r0
 802a51e:	2800      	cmp	r0, #0
 802a520:	d1e0      	bne.n	802a4e4 <__ssputs_r+0x5c>
 802a522:	6921      	ldr	r1, [r4, #16]
 802a524:	4650      	mov	r0, sl
 802a526:	f7ff ff65 	bl	802a3f4 <_free_r>
 802a52a:	230c      	movs	r3, #12
 802a52c:	f8ca 3000 	str.w	r3, [sl]
 802a530:	89a3      	ldrh	r3, [r4, #12]
 802a532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a536:	81a3      	strh	r3, [r4, #12]
 802a538:	f04f 30ff 	mov.w	r0, #4294967295
 802a53c:	e7e9      	b.n	802a512 <__ssputs_r+0x8a>
	...

0802a540 <_svfiprintf_r>:
 802a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a544:	4698      	mov	r8, r3
 802a546:	898b      	ldrh	r3, [r1, #12]
 802a548:	061b      	lsls	r3, r3, #24
 802a54a:	b09d      	sub	sp, #116	@ 0x74
 802a54c:	4607      	mov	r7, r0
 802a54e:	460d      	mov	r5, r1
 802a550:	4614      	mov	r4, r2
 802a552:	d510      	bpl.n	802a576 <_svfiprintf_r+0x36>
 802a554:	690b      	ldr	r3, [r1, #16]
 802a556:	b973      	cbnz	r3, 802a576 <_svfiprintf_r+0x36>
 802a558:	2140      	movs	r1, #64	@ 0x40
 802a55a:	f7ff fb43 	bl	8029be4 <_malloc_r>
 802a55e:	6028      	str	r0, [r5, #0]
 802a560:	6128      	str	r0, [r5, #16]
 802a562:	b930      	cbnz	r0, 802a572 <_svfiprintf_r+0x32>
 802a564:	230c      	movs	r3, #12
 802a566:	603b      	str	r3, [r7, #0]
 802a568:	f04f 30ff 	mov.w	r0, #4294967295
 802a56c:	b01d      	add	sp, #116	@ 0x74
 802a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a572:	2340      	movs	r3, #64	@ 0x40
 802a574:	616b      	str	r3, [r5, #20]
 802a576:	2300      	movs	r3, #0
 802a578:	9309      	str	r3, [sp, #36]	@ 0x24
 802a57a:	2320      	movs	r3, #32
 802a57c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802a580:	f8cd 800c 	str.w	r8, [sp, #12]
 802a584:	2330      	movs	r3, #48	@ 0x30
 802a586:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802a724 <_svfiprintf_r+0x1e4>
 802a58a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802a58e:	f04f 0901 	mov.w	r9, #1
 802a592:	4623      	mov	r3, r4
 802a594:	469a      	mov	sl, r3
 802a596:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a59a:	b10a      	cbz	r2, 802a5a0 <_svfiprintf_r+0x60>
 802a59c:	2a25      	cmp	r2, #37	@ 0x25
 802a59e:	d1f9      	bne.n	802a594 <_svfiprintf_r+0x54>
 802a5a0:	ebba 0b04 	subs.w	fp, sl, r4
 802a5a4:	d00b      	beq.n	802a5be <_svfiprintf_r+0x7e>
 802a5a6:	465b      	mov	r3, fp
 802a5a8:	4622      	mov	r2, r4
 802a5aa:	4629      	mov	r1, r5
 802a5ac:	4638      	mov	r0, r7
 802a5ae:	f7ff ff6b 	bl	802a488 <__ssputs_r>
 802a5b2:	3001      	adds	r0, #1
 802a5b4:	f000 80a7 	beq.w	802a706 <_svfiprintf_r+0x1c6>
 802a5b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a5ba:	445a      	add	r2, fp
 802a5bc:	9209      	str	r2, [sp, #36]	@ 0x24
 802a5be:	f89a 3000 	ldrb.w	r3, [sl]
 802a5c2:	2b00      	cmp	r3, #0
 802a5c4:	f000 809f 	beq.w	802a706 <_svfiprintf_r+0x1c6>
 802a5c8:	2300      	movs	r3, #0
 802a5ca:	f04f 32ff 	mov.w	r2, #4294967295
 802a5ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a5d2:	f10a 0a01 	add.w	sl, sl, #1
 802a5d6:	9304      	str	r3, [sp, #16]
 802a5d8:	9307      	str	r3, [sp, #28]
 802a5da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802a5de:	931a      	str	r3, [sp, #104]	@ 0x68
 802a5e0:	4654      	mov	r4, sl
 802a5e2:	2205      	movs	r2, #5
 802a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a5e8:	484e      	ldr	r0, [pc, #312]	@ (802a724 <_svfiprintf_r+0x1e4>)
 802a5ea:	f7d5 fe91 	bl	8000310 <memchr>
 802a5ee:	9a04      	ldr	r2, [sp, #16]
 802a5f0:	b9d8      	cbnz	r0, 802a62a <_svfiprintf_r+0xea>
 802a5f2:	06d0      	lsls	r0, r2, #27
 802a5f4:	bf44      	itt	mi
 802a5f6:	2320      	movmi	r3, #32
 802a5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a5fc:	0711      	lsls	r1, r2, #28
 802a5fe:	bf44      	itt	mi
 802a600:	232b      	movmi	r3, #43	@ 0x2b
 802a602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a606:	f89a 3000 	ldrb.w	r3, [sl]
 802a60a:	2b2a      	cmp	r3, #42	@ 0x2a
 802a60c:	d015      	beq.n	802a63a <_svfiprintf_r+0xfa>
 802a60e:	9a07      	ldr	r2, [sp, #28]
 802a610:	4654      	mov	r4, sl
 802a612:	2000      	movs	r0, #0
 802a614:	f04f 0c0a 	mov.w	ip, #10
 802a618:	4621      	mov	r1, r4
 802a61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a61e:	3b30      	subs	r3, #48	@ 0x30
 802a620:	2b09      	cmp	r3, #9
 802a622:	d94b      	bls.n	802a6bc <_svfiprintf_r+0x17c>
 802a624:	b1b0      	cbz	r0, 802a654 <_svfiprintf_r+0x114>
 802a626:	9207      	str	r2, [sp, #28]
 802a628:	e014      	b.n	802a654 <_svfiprintf_r+0x114>
 802a62a:	eba0 0308 	sub.w	r3, r0, r8
 802a62e:	fa09 f303 	lsl.w	r3, r9, r3
 802a632:	4313      	orrs	r3, r2
 802a634:	9304      	str	r3, [sp, #16]
 802a636:	46a2      	mov	sl, r4
 802a638:	e7d2      	b.n	802a5e0 <_svfiprintf_r+0xa0>
 802a63a:	9b03      	ldr	r3, [sp, #12]
 802a63c:	1d19      	adds	r1, r3, #4
 802a63e:	681b      	ldr	r3, [r3, #0]
 802a640:	9103      	str	r1, [sp, #12]
 802a642:	2b00      	cmp	r3, #0
 802a644:	bfbb      	ittet	lt
 802a646:	425b      	neglt	r3, r3
 802a648:	f042 0202 	orrlt.w	r2, r2, #2
 802a64c:	9307      	strge	r3, [sp, #28]
 802a64e:	9307      	strlt	r3, [sp, #28]
 802a650:	bfb8      	it	lt
 802a652:	9204      	strlt	r2, [sp, #16]
 802a654:	7823      	ldrb	r3, [r4, #0]
 802a656:	2b2e      	cmp	r3, #46	@ 0x2e
 802a658:	d10a      	bne.n	802a670 <_svfiprintf_r+0x130>
 802a65a:	7863      	ldrb	r3, [r4, #1]
 802a65c:	2b2a      	cmp	r3, #42	@ 0x2a
 802a65e:	d132      	bne.n	802a6c6 <_svfiprintf_r+0x186>
 802a660:	9b03      	ldr	r3, [sp, #12]
 802a662:	1d1a      	adds	r2, r3, #4
 802a664:	681b      	ldr	r3, [r3, #0]
 802a666:	9203      	str	r2, [sp, #12]
 802a668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802a66c:	3402      	adds	r4, #2
 802a66e:	9305      	str	r3, [sp, #20]
 802a670:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802a734 <_svfiprintf_r+0x1f4>
 802a674:	7821      	ldrb	r1, [r4, #0]
 802a676:	2203      	movs	r2, #3
 802a678:	4650      	mov	r0, sl
 802a67a:	f7d5 fe49 	bl	8000310 <memchr>
 802a67e:	b138      	cbz	r0, 802a690 <_svfiprintf_r+0x150>
 802a680:	9b04      	ldr	r3, [sp, #16]
 802a682:	eba0 000a 	sub.w	r0, r0, sl
 802a686:	2240      	movs	r2, #64	@ 0x40
 802a688:	4082      	lsls	r2, r0
 802a68a:	4313      	orrs	r3, r2
 802a68c:	3401      	adds	r4, #1
 802a68e:	9304      	str	r3, [sp, #16]
 802a690:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a694:	4824      	ldr	r0, [pc, #144]	@ (802a728 <_svfiprintf_r+0x1e8>)
 802a696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802a69a:	2206      	movs	r2, #6
 802a69c:	f7d5 fe38 	bl	8000310 <memchr>
 802a6a0:	2800      	cmp	r0, #0
 802a6a2:	d036      	beq.n	802a712 <_svfiprintf_r+0x1d2>
 802a6a4:	4b21      	ldr	r3, [pc, #132]	@ (802a72c <_svfiprintf_r+0x1ec>)
 802a6a6:	bb1b      	cbnz	r3, 802a6f0 <_svfiprintf_r+0x1b0>
 802a6a8:	9b03      	ldr	r3, [sp, #12]
 802a6aa:	3307      	adds	r3, #7
 802a6ac:	f023 0307 	bic.w	r3, r3, #7
 802a6b0:	3308      	adds	r3, #8
 802a6b2:	9303      	str	r3, [sp, #12]
 802a6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a6b6:	4433      	add	r3, r6
 802a6b8:	9309      	str	r3, [sp, #36]	@ 0x24
 802a6ba:	e76a      	b.n	802a592 <_svfiprintf_r+0x52>
 802a6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 802a6c0:	460c      	mov	r4, r1
 802a6c2:	2001      	movs	r0, #1
 802a6c4:	e7a8      	b.n	802a618 <_svfiprintf_r+0xd8>
 802a6c6:	2300      	movs	r3, #0
 802a6c8:	3401      	adds	r4, #1
 802a6ca:	9305      	str	r3, [sp, #20]
 802a6cc:	4619      	mov	r1, r3
 802a6ce:	f04f 0c0a 	mov.w	ip, #10
 802a6d2:	4620      	mov	r0, r4
 802a6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a6d8:	3a30      	subs	r2, #48	@ 0x30
 802a6da:	2a09      	cmp	r2, #9
 802a6dc:	d903      	bls.n	802a6e6 <_svfiprintf_r+0x1a6>
 802a6de:	2b00      	cmp	r3, #0
 802a6e0:	d0c6      	beq.n	802a670 <_svfiprintf_r+0x130>
 802a6e2:	9105      	str	r1, [sp, #20]
 802a6e4:	e7c4      	b.n	802a670 <_svfiprintf_r+0x130>
 802a6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 802a6ea:	4604      	mov	r4, r0
 802a6ec:	2301      	movs	r3, #1
 802a6ee:	e7f0      	b.n	802a6d2 <_svfiprintf_r+0x192>
 802a6f0:	ab03      	add	r3, sp, #12
 802a6f2:	9300      	str	r3, [sp, #0]
 802a6f4:	462a      	mov	r2, r5
 802a6f6:	4b0e      	ldr	r3, [pc, #56]	@ (802a730 <_svfiprintf_r+0x1f0>)
 802a6f8:	a904      	add	r1, sp, #16
 802a6fa:	4638      	mov	r0, r7
 802a6fc:	f3af 8000 	nop.w
 802a700:	1c42      	adds	r2, r0, #1
 802a702:	4606      	mov	r6, r0
 802a704:	d1d6      	bne.n	802a6b4 <_svfiprintf_r+0x174>
 802a706:	89ab      	ldrh	r3, [r5, #12]
 802a708:	065b      	lsls	r3, r3, #25
 802a70a:	f53f af2d 	bmi.w	802a568 <_svfiprintf_r+0x28>
 802a70e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a710:	e72c      	b.n	802a56c <_svfiprintf_r+0x2c>
 802a712:	ab03      	add	r3, sp, #12
 802a714:	9300      	str	r3, [sp, #0]
 802a716:	462a      	mov	r2, r5
 802a718:	4b05      	ldr	r3, [pc, #20]	@ (802a730 <_svfiprintf_r+0x1f0>)
 802a71a:	a904      	add	r1, sp, #16
 802a71c:	4638      	mov	r0, r7
 802a71e:	f000 f9bb 	bl	802aa98 <_printf_i>
 802a722:	e7ed      	b.n	802a700 <_svfiprintf_r+0x1c0>
 802a724:	0802fc90 	.word	0x0802fc90
 802a728:	0802fc9a 	.word	0x0802fc9a
 802a72c:	00000000 	.word	0x00000000
 802a730:	0802a489 	.word	0x0802a489
 802a734:	0802fc96 	.word	0x0802fc96

0802a738 <__sfputc_r>:
 802a738:	6893      	ldr	r3, [r2, #8]
 802a73a:	3b01      	subs	r3, #1
 802a73c:	2b00      	cmp	r3, #0
 802a73e:	b410      	push	{r4}
 802a740:	6093      	str	r3, [r2, #8]
 802a742:	da08      	bge.n	802a756 <__sfputc_r+0x1e>
 802a744:	6994      	ldr	r4, [r2, #24]
 802a746:	42a3      	cmp	r3, r4
 802a748:	db01      	blt.n	802a74e <__sfputc_r+0x16>
 802a74a:	290a      	cmp	r1, #10
 802a74c:	d103      	bne.n	802a756 <__sfputc_r+0x1e>
 802a74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a752:	f7ff bc18 	b.w	8029f86 <__swbuf_r>
 802a756:	6813      	ldr	r3, [r2, #0]
 802a758:	1c58      	adds	r0, r3, #1
 802a75a:	6010      	str	r0, [r2, #0]
 802a75c:	7019      	strb	r1, [r3, #0]
 802a75e:	4608      	mov	r0, r1
 802a760:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a764:	4770      	bx	lr

0802a766 <__sfputs_r>:
 802a766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a768:	4606      	mov	r6, r0
 802a76a:	460f      	mov	r7, r1
 802a76c:	4614      	mov	r4, r2
 802a76e:	18d5      	adds	r5, r2, r3
 802a770:	42ac      	cmp	r4, r5
 802a772:	d101      	bne.n	802a778 <__sfputs_r+0x12>
 802a774:	2000      	movs	r0, #0
 802a776:	e007      	b.n	802a788 <__sfputs_r+0x22>
 802a778:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a77c:	463a      	mov	r2, r7
 802a77e:	4630      	mov	r0, r6
 802a780:	f7ff ffda 	bl	802a738 <__sfputc_r>
 802a784:	1c43      	adds	r3, r0, #1
 802a786:	d1f3      	bne.n	802a770 <__sfputs_r+0xa>
 802a788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a78c <_vfiprintf_r>:
 802a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a790:	460d      	mov	r5, r1
 802a792:	b09d      	sub	sp, #116	@ 0x74
 802a794:	4614      	mov	r4, r2
 802a796:	4698      	mov	r8, r3
 802a798:	4606      	mov	r6, r0
 802a79a:	b118      	cbz	r0, 802a7a4 <_vfiprintf_r+0x18>
 802a79c:	6a03      	ldr	r3, [r0, #32]
 802a79e:	b90b      	cbnz	r3, 802a7a4 <_vfiprintf_r+0x18>
 802a7a0:	f7ff fb46 	bl	8029e30 <__sinit>
 802a7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a7a6:	07d9      	lsls	r1, r3, #31
 802a7a8:	d405      	bmi.n	802a7b6 <_vfiprintf_r+0x2a>
 802a7aa:	89ab      	ldrh	r3, [r5, #12]
 802a7ac:	059a      	lsls	r2, r3, #22
 802a7ae:	d402      	bmi.n	802a7b6 <_vfiprintf_r+0x2a>
 802a7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a7b2:	f7ff fdb2 	bl	802a31a <__retarget_lock_acquire_recursive>
 802a7b6:	89ab      	ldrh	r3, [r5, #12]
 802a7b8:	071b      	lsls	r3, r3, #28
 802a7ba:	d501      	bpl.n	802a7c0 <_vfiprintf_r+0x34>
 802a7bc:	692b      	ldr	r3, [r5, #16]
 802a7be:	b99b      	cbnz	r3, 802a7e8 <_vfiprintf_r+0x5c>
 802a7c0:	4629      	mov	r1, r5
 802a7c2:	4630      	mov	r0, r6
 802a7c4:	f7ff fc1e 	bl	802a004 <__swsetup_r>
 802a7c8:	b170      	cbz	r0, 802a7e8 <_vfiprintf_r+0x5c>
 802a7ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a7cc:	07dc      	lsls	r4, r3, #31
 802a7ce:	d504      	bpl.n	802a7da <_vfiprintf_r+0x4e>
 802a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 802a7d4:	b01d      	add	sp, #116	@ 0x74
 802a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7da:	89ab      	ldrh	r3, [r5, #12]
 802a7dc:	0598      	lsls	r0, r3, #22
 802a7de:	d4f7      	bmi.n	802a7d0 <_vfiprintf_r+0x44>
 802a7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a7e2:	f7ff fd9b 	bl	802a31c <__retarget_lock_release_recursive>
 802a7e6:	e7f3      	b.n	802a7d0 <_vfiprintf_r+0x44>
 802a7e8:	2300      	movs	r3, #0
 802a7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 802a7ec:	2320      	movs	r3, #32
 802a7ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802a7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 802a7f6:	2330      	movs	r3, #48	@ 0x30
 802a7f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802a9a8 <_vfiprintf_r+0x21c>
 802a7fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802a800:	f04f 0901 	mov.w	r9, #1
 802a804:	4623      	mov	r3, r4
 802a806:	469a      	mov	sl, r3
 802a808:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a80c:	b10a      	cbz	r2, 802a812 <_vfiprintf_r+0x86>
 802a80e:	2a25      	cmp	r2, #37	@ 0x25
 802a810:	d1f9      	bne.n	802a806 <_vfiprintf_r+0x7a>
 802a812:	ebba 0b04 	subs.w	fp, sl, r4
 802a816:	d00b      	beq.n	802a830 <_vfiprintf_r+0xa4>
 802a818:	465b      	mov	r3, fp
 802a81a:	4622      	mov	r2, r4
 802a81c:	4629      	mov	r1, r5
 802a81e:	4630      	mov	r0, r6
 802a820:	f7ff ffa1 	bl	802a766 <__sfputs_r>
 802a824:	3001      	adds	r0, #1
 802a826:	f000 80a7 	beq.w	802a978 <_vfiprintf_r+0x1ec>
 802a82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a82c:	445a      	add	r2, fp
 802a82e:	9209      	str	r2, [sp, #36]	@ 0x24
 802a830:	f89a 3000 	ldrb.w	r3, [sl]
 802a834:	2b00      	cmp	r3, #0
 802a836:	f000 809f 	beq.w	802a978 <_vfiprintf_r+0x1ec>
 802a83a:	2300      	movs	r3, #0
 802a83c:	f04f 32ff 	mov.w	r2, #4294967295
 802a840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a844:	f10a 0a01 	add.w	sl, sl, #1
 802a848:	9304      	str	r3, [sp, #16]
 802a84a:	9307      	str	r3, [sp, #28]
 802a84c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802a850:	931a      	str	r3, [sp, #104]	@ 0x68
 802a852:	4654      	mov	r4, sl
 802a854:	2205      	movs	r2, #5
 802a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a85a:	4853      	ldr	r0, [pc, #332]	@ (802a9a8 <_vfiprintf_r+0x21c>)
 802a85c:	f7d5 fd58 	bl	8000310 <memchr>
 802a860:	9a04      	ldr	r2, [sp, #16]
 802a862:	b9d8      	cbnz	r0, 802a89c <_vfiprintf_r+0x110>
 802a864:	06d1      	lsls	r1, r2, #27
 802a866:	bf44      	itt	mi
 802a868:	2320      	movmi	r3, #32
 802a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a86e:	0713      	lsls	r3, r2, #28
 802a870:	bf44      	itt	mi
 802a872:	232b      	movmi	r3, #43	@ 0x2b
 802a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a878:	f89a 3000 	ldrb.w	r3, [sl]
 802a87c:	2b2a      	cmp	r3, #42	@ 0x2a
 802a87e:	d015      	beq.n	802a8ac <_vfiprintf_r+0x120>
 802a880:	9a07      	ldr	r2, [sp, #28]
 802a882:	4654      	mov	r4, sl
 802a884:	2000      	movs	r0, #0
 802a886:	f04f 0c0a 	mov.w	ip, #10
 802a88a:	4621      	mov	r1, r4
 802a88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a890:	3b30      	subs	r3, #48	@ 0x30
 802a892:	2b09      	cmp	r3, #9
 802a894:	d94b      	bls.n	802a92e <_vfiprintf_r+0x1a2>
 802a896:	b1b0      	cbz	r0, 802a8c6 <_vfiprintf_r+0x13a>
 802a898:	9207      	str	r2, [sp, #28]
 802a89a:	e014      	b.n	802a8c6 <_vfiprintf_r+0x13a>
 802a89c:	eba0 0308 	sub.w	r3, r0, r8
 802a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 802a8a4:	4313      	orrs	r3, r2
 802a8a6:	9304      	str	r3, [sp, #16]
 802a8a8:	46a2      	mov	sl, r4
 802a8aa:	e7d2      	b.n	802a852 <_vfiprintf_r+0xc6>
 802a8ac:	9b03      	ldr	r3, [sp, #12]
 802a8ae:	1d19      	adds	r1, r3, #4
 802a8b0:	681b      	ldr	r3, [r3, #0]
 802a8b2:	9103      	str	r1, [sp, #12]
 802a8b4:	2b00      	cmp	r3, #0
 802a8b6:	bfbb      	ittet	lt
 802a8b8:	425b      	neglt	r3, r3
 802a8ba:	f042 0202 	orrlt.w	r2, r2, #2
 802a8be:	9307      	strge	r3, [sp, #28]
 802a8c0:	9307      	strlt	r3, [sp, #28]
 802a8c2:	bfb8      	it	lt
 802a8c4:	9204      	strlt	r2, [sp, #16]
 802a8c6:	7823      	ldrb	r3, [r4, #0]
 802a8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 802a8ca:	d10a      	bne.n	802a8e2 <_vfiprintf_r+0x156>
 802a8cc:	7863      	ldrb	r3, [r4, #1]
 802a8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 802a8d0:	d132      	bne.n	802a938 <_vfiprintf_r+0x1ac>
 802a8d2:	9b03      	ldr	r3, [sp, #12]
 802a8d4:	1d1a      	adds	r2, r3, #4
 802a8d6:	681b      	ldr	r3, [r3, #0]
 802a8d8:	9203      	str	r2, [sp, #12]
 802a8da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802a8de:	3402      	adds	r4, #2
 802a8e0:	9305      	str	r3, [sp, #20]
 802a8e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802a9b8 <_vfiprintf_r+0x22c>
 802a8e6:	7821      	ldrb	r1, [r4, #0]
 802a8e8:	2203      	movs	r2, #3
 802a8ea:	4650      	mov	r0, sl
 802a8ec:	f7d5 fd10 	bl	8000310 <memchr>
 802a8f0:	b138      	cbz	r0, 802a902 <_vfiprintf_r+0x176>
 802a8f2:	9b04      	ldr	r3, [sp, #16]
 802a8f4:	eba0 000a 	sub.w	r0, r0, sl
 802a8f8:	2240      	movs	r2, #64	@ 0x40
 802a8fa:	4082      	lsls	r2, r0
 802a8fc:	4313      	orrs	r3, r2
 802a8fe:	3401      	adds	r4, #1
 802a900:	9304      	str	r3, [sp, #16]
 802a902:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a906:	4829      	ldr	r0, [pc, #164]	@ (802a9ac <_vfiprintf_r+0x220>)
 802a908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802a90c:	2206      	movs	r2, #6
 802a90e:	f7d5 fcff 	bl	8000310 <memchr>
 802a912:	2800      	cmp	r0, #0
 802a914:	d03f      	beq.n	802a996 <_vfiprintf_r+0x20a>
 802a916:	4b26      	ldr	r3, [pc, #152]	@ (802a9b0 <_vfiprintf_r+0x224>)
 802a918:	bb1b      	cbnz	r3, 802a962 <_vfiprintf_r+0x1d6>
 802a91a:	9b03      	ldr	r3, [sp, #12]
 802a91c:	3307      	adds	r3, #7
 802a91e:	f023 0307 	bic.w	r3, r3, #7
 802a922:	3308      	adds	r3, #8
 802a924:	9303      	str	r3, [sp, #12]
 802a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a928:	443b      	add	r3, r7
 802a92a:	9309      	str	r3, [sp, #36]	@ 0x24
 802a92c:	e76a      	b.n	802a804 <_vfiprintf_r+0x78>
 802a92e:	fb0c 3202 	mla	r2, ip, r2, r3
 802a932:	460c      	mov	r4, r1
 802a934:	2001      	movs	r0, #1
 802a936:	e7a8      	b.n	802a88a <_vfiprintf_r+0xfe>
 802a938:	2300      	movs	r3, #0
 802a93a:	3401      	adds	r4, #1
 802a93c:	9305      	str	r3, [sp, #20]
 802a93e:	4619      	mov	r1, r3
 802a940:	f04f 0c0a 	mov.w	ip, #10
 802a944:	4620      	mov	r0, r4
 802a946:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a94a:	3a30      	subs	r2, #48	@ 0x30
 802a94c:	2a09      	cmp	r2, #9
 802a94e:	d903      	bls.n	802a958 <_vfiprintf_r+0x1cc>
 802a950:	2b00      	cmp	r3, #0
 802a952:	d0c6      	beq.n	802a8e2 <_vfiprintf_r+0x156>
 802a954:	9105      	str	r1, [sp, #20]
 802a956:	e7c4      	b.n	802a8e2 <_vfiprintf_r+0x156>
 802a958:	fb0c 2101 	mla	r1, ip, r1, r2
 802a95c:	4604      	mov	r4, r0
 802a95e:	2301      	movs	r3, #1
 802a960:	e7f0      	b.n	802a944 <_vfiprintf_r+0x1b8>
 802a962:	ab03      	add	r3, sp, #12
 802a964:	9300      	str	r3, [sp, #0]
 802a966:	462a      	mov	r2, r5
 802a968:	4b12      	ldr	r3, [pc, #72]	@ (802a9b4 <_vfiprintf_r+0x228>)
 802a96a:	a904      	add	r1, sp, #16
 802a96c:	4630      	mov	r0, r6
 802a96e:	f3af 8000 	nop.w
 802a972:	4607      	mov	r7, r0
 802a974:	1c78      	adds	r0, r7, #1
 802a976:	d1d6      	bne.n	802a926 <_vfiprintf_r+0x19a>
 802a978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a97a:	07d9      	lsls	r1, r3, #31
 802a97c:	d405      	bmi.n	802a98a <_vfiprintf_r+0x1fe>
 802a97e:	89ab      	ldrh	r3, [r5, #12]
 802a980:	059a      	lsls	r2, r3, #22
 802a982:	d402      	bmi.n	802a98a <_vfiprintf_r+0x1fe>
 802a984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a986:	f7ff fcc9 	bl	802a31c <__retarget_lock_release_recursive>
 802a98a:	89ab      	ldrh	r3, [r5, #12]
 802a98c:	065b      	lsls	r3, r3, #25
 802a98e:	f53f af1f 	bmi.w	802a7d0 <_vfiprintf_r+0x44>
 802a992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a994:	e71e      	b.n	802a7d4 <_vfiprintf_r+0x48>
 802a996:	ab03      	add	r3, sp, #12
 802a998:	9300      	str	r3, [sp, #0]
 802a99a:	462a      	mov	r2, r5
 802a99c:	4b05      	ldr	r3, [pc, #20]	@ (802a9b4 <_vfiprintf_r+0x228>)
 802a99e:	a904      	add	r1, sp, #16
 802a9a0:	4630      	mov	r0, r6
 802a9a2:	f000 f879 	bl	802aa98 <_printf_i>
 802a9a6:	e7e4      	b.n	802a972 <_vfiprintf_r+0x1e6>
 802a9a8:	0802fc90 	.word	0x0802fc90
 802a9ac:	0802fc9a 	.word	0x0802fc9a
 802a9b0:	00000000 	.word	0x00000000
 802a9b4:	0802a767 	.word	0x0802a767
 802a9b8:	0802fc96 	.word	0x0802fc96

0802a9bc <_printf_common>:
 802a9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a9c0:	4616      	mov	r6, r2
 802a9c2:	4698      	mov	r8, r3
 802a9c4:	688a      	ldr	r2, [r1, #8]
 802a9c6:	690b      	ldr	r3, [r1, #16]
 802a9c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802a9cc:	4293      	cmp	r3, r2
 802a9ce:	bfb8      	it	lt
 802a9d0:	4613      	movlt	r3, r2
 802a9d2:	6033      	str	r3, [r6, #0]
 802a9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802a9d8:	4607      	mov	r7, r0
 802a9da:	460c      	mov	r4, r1
 802a9dc:	b10a      	cbz	r2, 802a9e2 <_printf_common+0x26>
 802a9de:	3301      	adds	r3, #1
 802a9e0:	6033      	str	r3, [r6, #0]
 802a9e2:	6823      	ldr	r3, [r4, #0]
 802a9e4:	0699      	lsls	r1, r3, #26
 802a9e6:	bf42      	ittt	mi
 802a9e8:	6833      	ldrmi	r3, [r6, #0]
 802a9ea:	3302      	addmi	r3, #2
 802a9ec:	6033      	strmi	r3, [r6, #0]
 802a9ee:	6825      	ldr	r5, [r4, #0]
 802a9f0:	f015 0506 	ands.w	r5, r5, #6
 802a9f4:	d106      	bne.n	802aa04 <_printf_common+0x48>
 802a9f6:	f104 0a19 	add.w	sl, r4, #25
 802a9fa:	68e3      	ldr	r3, [r4, #12]
 802a9fc:	6832      	ldr	r2, [r6, #0]
 802a9fe:	1a9b      	subs	r3, r3, r2
 802aa00:	42ab      	cmp	r3, r5
 802aa02:	dc26      	bgt.n	802aa52 <_printf_common+0x96>
 802aa04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802aa08:	6822      	ldr	r2, [r4, #0]
 802aa0a:	3b00      	subs	r3, #0
 802aa0c:	bf18      	it	ne
 802aa0e:	2301      	movne	r3, #1
 802aa10:	0692      	lsls	r2, r2, #26
 802aa12:	d42b      	bmi.n	802aa6c <_printf_common+0xb0>
 802aa14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802aa18:	4641      	mov	r1, r8
 802aa1a:	4638      	mov	r0, r7
 802aa1c:	47c8      	blx	r9
 802aa1e:	3001      	adds	r0, #1
 802aa20:	d01e      	beq.n	802aa60 <_printf_common+0xa4>
 802aa22:	6823      	ldr	r3, [r4, #0]
 802aa24:	6922      	ldr	r2, [r4, #16]
 802aa26:	f003 0306 	and.w	r3, r3, #6
 802aa2a:	2b04      	cmp	r3, #4
 802aa2c:	bf02      	ittt	eq
 802aa2e:	68e5      	ldreq	r5, [r4, #12]
 802aa30:	6833      	ldreq	r3, [r6, #0]
 802aa32:	1aed      	subeq	r5, r5, r3
 802aa34:	68a3      	ldr	r3, [r4, #8]
 802aa36:	bf0c      	ite	eq
 802aa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802aa3c:	2500      	movne	r5, #0
 802aa3e:	4293      	cmp	r3, r2
 802aa40:	bfc4      	itt	gt
 802aa42:	1a9b      	subgt	r3, r3, r2
 802aa44:	18ed      	addgt	r5, r5, r3
 802aa46:	2600      	movs	r6, #0
 802aa48:	341a      	adds	r4, #26
 802aa4a:	42b5      	cmp	r5, r6
 802aa4c:	d11a      	bne.n	802aa84 <_printf_common+0xc8>
 802aa4e:	2000      	movs	r0, #0
 802aa50:	e008      	b.n	802aa64 <_printf_common+0xa8>
 802aa52:	2301      	movs	r3, #1
 802aa54:	4652      	mov	r2, sl
 802aa56:	4641      	mov	r1, r8
 802aa58:	4638      	mov	r0, r7
 802aa5a:	47c8      	blx	r9
 802aa5c:	3001      	adds	r0, #1
 802aa5e:	d103      	bne.n	802aa68 <_printf_common+0xac>
 802aa60:	f04f 30ff 	mov.w	r0, #4294967295
 802aa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aa68:	3501      	adds	r5, #1
 802aa6a:	e7c6      	b.n	802a9fa <_printf_common+0x3e>
 802aa6c:	18e1      	adds	r1, r4, r3
 802aa6e:	1c5a      	adds	r2, r3, #1
 802aa70:	2030      	movs	r0, #48	@ 0x30
 802aa72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802aa76:	4422      	add	r2, r4
 802aa78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802aa7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802aa80:	3302      	adds	r3, #2
 802aa82:	e7c7      	b.n	802aa14 <_printf_common+0x58>
 802aa84:	2301      	movs	r3, #1
 802aa86:	4622      	mov	r2, r4
 802aa88:	4641      	mov	r1, r8
 802aa8a:	4638      	mov	r0, r7
 802aa8c:	47c8      	blx	r9
 802aa8e:	3001      	adds	r0, #1
 802aa90:	d0e6      	beq.n	802aa60 <_printf_common+0xa4>
 802aa92:	3601      	adds	r6, #1
 802aa94:	e7d9      	b.n	802aa4a <_printf_common+0x8e>
	...

0802aa98 <_printf_i>:
 802aa98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802aa9c:	7e0f      	ldrb	r7, [r1, #24]
 802aa9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802aaa0:	2f78      	cmp	r7, #120	@ 0x78
 802aaa2:	4691      	mov	r9, r2
 802aaa4:	4680      	mov	r8, r0
 802aaa6:	460c      	mov	r4, r1
 802aaa8:	469a      	mov	sl, r3
 802aaaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802aaae:	d807      	bhi.n	802aac0 <_printf_i+0x28>
 802aab0:	2f62      	cmp	r7, #98	@ 0x62
 802aab2:	d80a      	bhi.n	802aaca <_printf_i+0x32>
 802aab4:	2f00      	cmp	r7, #0
 802aab6:	f000 80d2 	beq.w	802ac5e <_printf_i+0x1c6>
 802aaba:	2f58      	cmp	r7, #88	@ 0x58
 802aabc:	f000 80b9 	beq.w	802ac32 <_printf_i+0x19a>
 802aac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802aac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802aac8:	e03a      	b.n	802ab40 <_printf_i+0xa8>
 802aaca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802aace:	2b15      	cmp	r3, #21
 802aad0:	d8f6      	bhi.n	802aac0 <_printf_i+0x28>
 802aad2:	a101      	add	r1, pc, #4	@ (adr r1, 802aad8 <_printf_i+0x40>)
 802aad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802aad8:	0802ab31 	.word	0x0802ab31
 802aadc:	0802ab45 	.word	0x0802ab45
 802aae0:	0802aac1 	.word	0x0802aac1
 802aae4:	0802aac1 	.word	0x0802aac1
 802aae8:	0802aac1 	.word	0x0802aac1
 802aaec:	0802aac1 	.word	0x0802aac1
 802aaf0:	0802ab45 	.word	0x0802ab45
 802aaf4:	0802aac1 	.word	0x0802aac1
 802aaf8:	0802aac1 	.word	0x0802aac1
 802aafc:	0802aac1 	.word	0x0802aac1
 802ab00:	0802aac1 	.word	0x0802aac1
 802ab04:	0802ac45 	.word	0x0802ac45
 802ab08:	0802ab6f 	.word	0x0802ab6f
 802ab0c:	0802abff 	.word	0x0802abff
 802ab10:	0802aac1 	.word	0x0802aac1
 802ab14:	0802aac1 	.word	0x0802aac1
 802ab18:	0802ac67 	.word	0x0802ac67
 802ab1c:	0802aac1 	.word	0x0802aac1
 802ab20:	0802ab6f 	.word	0x0802ab6f
 802ab24:	0802aac1 	.word	0x0802aac1
 802ab28:	0802aac1 	.word	0x0802aac1
 802ab2c:	0802ac07 	.word	0x0802ac07
 802ab30:	6833      	ldr	r3, [r6, #0]
 802ab32:	1d1a      	adds	r2, r3, #4
 802ab34:	681b      	ldr	r3, [r3, #0]
 802ab36:	6032      	str	r2, [r6, #0]
 802ab38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ab3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802ab40:	2301      	movs	r3, #1
 802ab42:	e09d      	b.n	802ac80 <_printf_i+0x1e8>
 802ab44:	6833      	ldr	r3, [r6, #0]
 802ab46:	6820      	ldr	r0, [r4, #0]
 802ab48:	1d19      	adds	r1, r3, #4
 802ab4a:	6031      	str	r1, [r6, #0]
 802ab4c:	0606      	lsls	r6, r0, #24
 802ab4e:	d501      	bpl.n	802ab54 <_printf_i+0xbc>
 802ab50:	681d      	ldr	r5, [r3, #0]
 802ab52:	e003      	b.n	802ab5c <_printf_i+0xc4>
 802ab54:	0645      	lsls	r5, r0, #25
 802ab56:	d5fb      	bpl.n	802ab50 <_printf_i+0xb8>
 802ab58:	f9b3 5000 	ldrsh.w	r5, [r3]
 802ab5c:	2d00      	cmp	r5, #0
 802ab5e:	da03      	bge.n	802ab68 <_printf_i+0xd0>
 802ab60:	232d      	movs	r3, #45	@ 0x2d
 802ab62:	426d      	negs	r5, r5
 802ab64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802ab68:	4859      	ldr	r0, [pc, #356]	@ (802acd0 <_printf_i+0x238>)
 802ab6a:	230a      	movs	r3, #10
 802ab6c:	e011      	b.n	802ab92 <_printf_i+0xfa>
 802ab6e:	6821      	ldr	r1, [r4, #0]
 802ab70:	6833      	ldr	r3, [r6, #0]
 802ab72:	0608      	lsls	r0, r1, #24
 802ab74:	f853 5b04 	ldr.w	r5, [r3], #4
 802ab78:	d402      	bmi.n	802ab80 <_printf_i+0xe8>
 802ab7a:	0649      	lsls	r1, r1, #25
 802ab7c:	bf48      	it	mi
 802ab7e:	b2ad      	uxthmi	r5, r5
 802ab80:	2f6f      	cmp	r7, #111	@ 0x6f
 802ab82:	4853      	ldr	r0, [pc, #332]	@ (802acd0 <_printf_i+0x238>)
 802ab84:	6033      	str	r3, [r6, #0]
 802ab86:	bf14      	ite	ne
 802ab88:	230a      	movne	r3, #10
 802ab8a:	2308      	moveq	r3, #8
 802ab8c:	2100      	movs	r1, #0
 802ab8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802ab92:	6866      	ldr	r6, [r4, #4]
 802ab94:	60a6      	str	r6, [r4, #8]
 802ab96:	2e00      	cmp	r6, #0
 802ab98:	bfa2      	ittt	ge
 802ab9a:	6821      	ldrge	r1, [r4, #0]
 802ab9c:	f021 0104 	bicge.w	r1, r1, #4
 802aba0:	6021      	strge	r1, [r4, #0]
 802aba2:	b90d      	cbnz	r5, 802aba8 <_printf_i+0x110>
 802aba4:	2e00      	cmp	r6, #0
 802aba6:	d04b      	beq.n	802ac40 <_printf_i+0x1a8>
 802aba8:	4616      	mov	r6, r2
 802abaa:	fbb5 f1f3 	udiv	r1, r5, r3
 802abae:	fb03 5711 	mls	r7, r3, r1, r5
 802abb2:	5dc7      	ldrb	r7, [r0, r7]
 802abb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802abb8:	462f      	mov	r7, r5
 802abba:	42bb      	cmp	r3, r7
 802abbc:	460d      	mov	r5, r1
 802abbe:	d9f4      	bls.n	802abaa <_printf_i+0x112>
 802abc0:	2b08      	cmp	r3, #8
 802abc2:	d10b      	bne.n	802abdc <_printf_i+0x144>
 802abc4:	6823      	ldr	r3, [r4, #0]
 802abc6:	07df      	lsls	r7, r3, #31
 802abc8:	d508      	bpl.n	802abdc <_printf_i+0x144>
 802abca:	6923      	ldr	r3, [r4, #16]
 802abcc:	6861      	ldr	r1, [r4, #4]
 802abce:	4299      	cmp	r1, r3
 802abd0:	bfde      	ittt	le
 802abd2:	2330      	movle	r3, #48	@ 0x30
 802abd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 802abd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 802abdc:	1b92      	subs	r2, r2, r6
 802abde:	6122      	str	r2, [r4, #16]
 802abe0:	f8cd a000 	str.w	sl, [sp]
 802abe4:	464b      	mov	r3, r9
 802abe6:	aa03      	add	r2, sp, #12
 802abe8:	4621      	mov	r1, r4
 802abea:	4640      	mov	r0, r8
 802abec:	f7ff fee6 	bl	802a9bc <_printf_common>
 802abf0:	3001      	adds	r0, #1
 802abf2:	d14a      	bne.n	802ac8a <_printf_i+0x1f2>
 802abf4:	f04f 30ff 	mov.w	r0, #4294967295
 802abf8:	b004      	add	sp, #16
 802abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802abfe:	6823      	ldr	r3, [r4, #0]
 802ac00:	f043 0320 	orr.w	r3, r3, #32
 802ac04:	6023      	str	r3, [r4, #0]
 802ac06:	4833      	ldr	r0, [pc, #204]	@ (802acd4 <_printf_i+0x23c>)
 802ac08:	2778      	movs	r7, #120	@ 0x78
 802ac0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802ac0e:	6823      	ldr	r3, [r4, #0]
 802ac10:	6831      	ldr	r1, [r6, #0]
 802ac12:	061f      	lsls	r7, r3, #24
 802ac14:	f851 5b04 	ldr.w	r5, [r1], #4
 802ac18:	d402      	bmi.n	802ac20 <_printf_i+0x188>
 802ac1a:	065f      	lsls	r7, r3, #25
 802ac1c:	bf48      	it	mi
 802ac1e:	b2ad      	uxthmi	r5, r5
 802ac20:	6031      	str	r1, [r6, #0]
 802ac22:	07d9      	lsls	r1, r3, #31
 802ac24:	bf44      	itt	mi
 802ac26:	f043 0320 	orrmi.w	r3, r3, #32
 802ac2a:	6023      	strmi	r3, [r4, #0]
 802ac2c:	b11d      	cbz	r5, 802ac36 <_printf_i+0x19e>
 802ac2e:	2310      	movs	r3, #16
 802ac30:	e7ac      	b.n	802ab8c <_printf_i+0xf4>
 802ac32:	4827      	ldr	r0, [pc, #156]	@ (802acd0 <_printf_i+0x238>)
 802ac34:	e7e9      	b.n	802ac0a <_printf_i+0x172>
 802ac36:	6823      	ldr	r3, [r4, #0]
 802ac38:	f023 0320 	bic.w	r3, r3, #32
 802ac3c:	6023      	str	r3, [r4, #0]
 802ac3e:	e7f6      	b.n	802ac2e <_printf_i+0x196>
 802ac40:	4616      	mov	r6, r2
 802ac42:	e7bd      	b.n	802abc0 <_printf_i+0x128>
 802ac44:	6833      	ldr	r3, [r6, #0]
 802ac46:	6825      	ldr	r5, [r4, #0]
 802ac48:	6961      	ldr	r1, [r4, #20]
 802ac4a:	1d18      	adds	r0, r3, #4
 802ac4c:	6030      	str	r0, [r6, #0]
 802ac4e:	062e      	lsls	r6, r5, #24
 802ac50:	681b      	ldr	r3, [r3, #0]
 802ac52:	d501      	bpl.n	802ac58 <_printf_i+0x1c0>
 802ac54:	6019      	str	r1, [r3, #0]
 802ac56:	e002      	b.n	802ac5e <_printf_i+0x1c6>
 802ac58:	0668      	lsls	r0, r5, #25
 802ac5a:	d5fb      	bpl.n	802ac54 <_printf_i+0x1bc>
 802ac5c:	8019      	strh	r1, [r3, #0]
 802ac5e:	2300      	movs	r3, #0
 802ac60:	6123      	str	r3, [r4, #16]
 802ac62:	4616      	mov	r6, r2
 802ac64:	e7bc      	b.n	802abe0 <_printf_i+0x148>
 802ac66:	6833      	ldr	r3, [r6, #0]
 802ac68:	1d1a      	adds	r2, r3, #4
 802ac6a:	6032      	str	r2, [r6, #0]
 802ac6c:	681e      	ldr	r6, [r3, #0]
 802ac6e:	6862      	ldr	r2, [r4, #4]
 802ac70:	2100      	movs	r1, #0
 802ac72:	4630      	mov	r0, r6
 802ac74:	f7d5 fb4c 	bl	8000310 <memchr>
 802ac78:	b108      	cbz	r0, 802ac7e <_printf_i+0x1e6>
 802ac7a:	1b80      	subs	r0, r0, r6
 802ac7c:	6060      	str	r0, [r4, #4]
 802ac7e:	6863      	ldr	r3, [r4, #4]
 802ac80:	6123      	str	r3, [r4, #16]
 802ac82:	2300      	movs	r3, #0
 802ac84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802ac88:	e7aa      	b.n	802abe0 <_printf_i+0x148>
 802ac8a:	6923      	ldr	r3, [r4, #16]
 802ac8c:	4632      	mov	r2, r6
 802ac8e:	4649      	mov	r1, r9
 802ac90:	4640      	mov	r0, r8
 802ac92:	47d0      	blx	sl
 802ac94:	3001      	adds	r0, #1
 802ac96:	d0ad      	beq.n	802abf4 <_printf_i+0x15c>
 802ac98:	6823      	ldr	r3, [r4, #0]
 802ac9a:	079b      	lsls	r3, r3, #30
 802ac9c:	d413      	bmi.n	802acc6 <_printf_i+0x22e>
 802ac9e:	68e0      	ldr	r0, [r4, #12]
 802aca0:	9b03      	ldr	r3, [sp, #12]
 802aca2:	4298      	cmp	r0, r3
 802aca4:	bfb8      	it	lt
 802aca6:	4618      	movlt	r0, r3
 802aca8:	e7a6      	b.n	802abf8 <_printf_i+0x160>
 802acaa:	2301      	movs	r3, #1
 802acac:	4632      	mov	r2, r6
 802acae:	4649      	mov	r1, r9
 802acb0:	4640      	mov	r0, r8
 802acb2:	47d0      	blx	sl
 802acb4:	3001      	adds	r0, #1
 802acb6:	d09d      	beq.n	802abf4 <_printf_i+0x15c>
 802acb8:	3501      	adds	r5, #1
 802acba:	68e3      	ldr	r3, [r4, #12]
 802acbc:	9903      	ldr	r1, [sp, #12]
 802acbe:	1a5b      	subs	r3, r3, r1
 802acc0:	42ab      	cmp	r3, r5
 802acc2:	dcf2      	bgt.n	802acaa <_printf_i+0x212>
 802acc4:	e7eb      	b.n	802ac9e <_printf_i+0x206>
 802acc6:	2500      	movs	r5, #0
 802acc8:	f104 0619 	add.w	r6, r4, #25
 802accc:	e7f5      	b.n	802acba <_printf_i+0x222>
 802acce:	bf00      	nop
 802acd0:	0802fca1 	.word	0x0802fca1
 802acd4:	0802fcb2 	.word	0x0802fcb2

0802acd8 <__sflush_r>:
 802acd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ace0:	0716      	lsls	r6, r2, #28
 802ace2:	4605      	mov	r5, r0
 802ace4:	460c      	mov	r4, r1
 802ace6:	d454      	bmi.n	802ad92 <__sflush_r+0xba>
 802ace8:	684b      	ldr	r3, [r1, #4]
 802acea:	2b00      	cmp	r3, #0
 802acec:	dc02      	bgt.n	802acf4 <__sflush_r+0x1c>
 802acee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802acf0:	2b00      	cmp	r3, #0
 802acf2:	dd48      	ble.n	802ad86 <__sflush_r+0xae>
 802acf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802acf6:	2e00      	cmp	r6, #0
 802acf8:	d045      	beq.n	802ad86 <__sflush_r+0xae>
 802acfa:	2300      	movs	r3, #0
 802acfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802ad00:	682f      	ldr	r7, [r5, #0]
 802ad02:	6a21      	ldr	r1, [r4, #32]
 802ad04:	602b      	str	r3, [r5, #0]
 802ad06:	d030      	beq.n	802ad6a <__sflush_r+0x92>
 802ad08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802ad0a:	89a3      	ldrh	r3, [r4, #12]
 802ad0c:	0759      	lsls	r1, r3, #29
 802ad0e:	d505      	bpl.n	802ad1c <__sflush_r+0x44>
 802ad10:	6863      	ldr	r3, [r4, #4]
 802ad12:	1ad2      	subs	r2, r2, r3
 802ad14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802ad16:	b10b      	cbz	r3, 802ad1c <__sflush_r+0x44>
 802ad18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802ad1a:	1ad2      	subs	r2, r2, r3
 802ad1c:	2300      	movs	r3, #0
 802ad1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802ad20:	6a21      	ldr	r1, [r4, #32]
 802ad22:	4628      	mov	r0, r5
 802ad24:	47b0      	blx	r6
 802ad26:	1c43      	adds	r3, r0, #1
 802ad28:	89a3      	ldrh	r3, [r4, #12]
 802ad2a:	d106      	bne.n	802ad3a <__sflush_r+0x62>
 802ad2c:	6829      	ldr	r1, [r5, #0]
 802ad2e:	291d      	cmp	r1, #29
 802ad30:	d82b      	bhi.n	802ad8a <__sflush_r+0xb2>
 802ad32:	4a2a      	ldr	r2, [pc, #168]	@ (802addc <__sflush_r+0x104>)
 802ad34:	410a      	asrs	r2, r1
 802ad36:	07d6      	lsls	r6, r2, #31
 802ad38:	d427      	bmi.n	802ad8a <__sflush_r+0xb2>
 802ad3a:	2200      	movs	r2, #0
 802ad3c:	6062      	str	r2, [r4, #4]
 802ad3e:	04d9      	lsls	r1, r3, #19
 802ad40:	6922      	ldr	r2, [r4, #16]
 802ad42:	6022      	str	r2, [r4, #0]
 802ad44:	d504      	bpl.n	802ad50 <__sflush_r+0x78>
 802ad46:	1c42      	adds	r2, r0, #1
 802ad48:	d101      	bne.n	802ad4e <__sflush_r+0x76>
 802ad4a:	682b      	ldr	r3, [r5, #0]
 802ad4c:	b903      	cbnz	r3, 802ad50 <__sflush_r+0x78>
 802ad4e:	6560      	str	r0, [r4, #84]	@ 0x54
 802ad50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ad52:	602f      	str	r7, [r5, #0]
 802ad54:	b1b9      	cbz	r1, 802ad86 <__sflush_r+0xae>
 802ad56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ad5a:	4299      	cmp	r1, r3
 802ad5c:	d002      	beq.n	802ad64 <__sflush_r+0x8c>
 802ad5e:	4628      	mov	r0, r5
 802ad60:	f7ff fb48 	bl	802a3f4 <_free_r>
 802ad64:	2300      	movs	r3, #0
 802ad66:	6363      	str	r3, [r4, #52]	@ 0x34
 802ad68:	e00d      	b.n	802ad86 <__sflush_r+0xae>
 802ad6a:	2301      	movs	r3, #1
 802ad6c:	4628      	mov	r0, r5
 802ad6e:	47b0      	blx	r6
 802ad70:	4602      	mov	r2, r0
 802ad72:	1c50      	adds	r0, r2, #1
 802ad74:	d1c9      	bne.n	802ad0a <__sflush_r+0x32>
 802ad76:	682b      	ldr	r3, [r5, #0]
 802ad78:	2b00      	cmp	r3, #0
 802ad7a:	d0c6      	beq.n	802ad0a <__sflush_r+0x32>
 802ad7c:	2b1d      	cmp	r3, #29
 802ad7e:	d001      	beq.n	802ad84 <__sflush_r+0xac>
 802ad80:	2b16      	cmp	r3, #22
 802ad82:	d11e      	bne.n	802adc2 <__sflush_r+0xea>
 802ad84:	602f      	str	r7, [r5, #0]
 802ad86:	2000      	movs	r0, #0
 802ad88:	e022      	b.n	802add0 <__sflush_r+0xf8>
 802ad8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ad8e:	b21b      	sxth	r3, r3
 802ad90:	e01b      	b.n	802adca <__sflush_r+0xf2>
 802ad92:	690f      	ldr	r7, [r1, #16]
 802ad94:	2f00      	cmp	r7, #0
 802ad96:	d0f6      	beq.n	802ad86 <__sflush_r+0xae>
 802ad98:	0793      	lsls	r3, r2, #30
 802ad9a:	680e      	ldr	r6, [r1, #0]
 802ad9c:	bf08      	it	eq
 802ad9e:	694b      	ldreq	r3, [r1, #20]
 802ada0:	600f      	str	r7, [r1, #0]
 802ada2:	bf18      	it	ne
 802ada4:	2300      	movne	r3, #0
 802ada6:	eba6 0807 	sub.w	r8, r6, r7
 802adaa:	608b      	str	r3, [r1, #8]
 802adac:	f1b8 0f00 	cmp.w	r8, #0
 802adb0:	dde9      	ble.n	802ad86 <__sflush_r+0xae>
 802adb2:	6a21      	ldr	r1, [r4, #32]
 802adb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802adb6:	4643      	mov	r3, r8
 802adb8:	463a      	mov	r2, r7
 802adba:	4628      	mov	r0, r5
 802adbc:	47b0      	blx	r6
 802adbe:	2800      	cmp	r0, #0
 802adc0:	dc08      	bgt.n	802add4 <__sflush_r+0xfc>
 802adc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802adc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802adca:	81a3      	strh	r3, [r4, #12]
 802adcc:	f04f 30ff 	mov.w	r0, #4294967295
 802add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802add4:	4407      	add	r7, r0
 802add6:	eba8 0800 	sub.w	r8, r8, r0
 802adda:	e7e7      	b.n	802adac <__sflush_r+0xd4>
 802addc:	dfbffffe 	.word	0xdfbffffe

0802ade0 <_fflush_r>:
 802ade0:	b538      	push	{r3, r4, r5, lr}
 802ade2:	690b      	ldr	r3, [r1, #16]
 802ade4:	4605      	mov	r5, r0
 802ade6:	460c      	mov	r4, r1
 802ade8:	b913      	cbnz	r3, 802adf0 <_fflush_r+0x10>
 802adea:	2500      	movs	r5, #0
 802adec:	4628      	mov	r0, r5
 802adee:	bd38      	pop	{r3, r4, r5, pc}
 802adf0:	b118      	cbz	r0, 802adfa <_fflush_r+0x1a>
 802adf2:	6a03      	ldr	r3, [r0, #32]
 802adf4:	b90b      	cbnz	r3, 802adfa <_fflush_r+0x1a>
 802adf6:	f7ff f81b 	bl	8029e30 <__sinit>
 802adfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802adfe:	2b00      	cmp	r3, #0
 802ae00:	d0f3      	beq.n	802adea <_fflush_r+0xa>
 802ae02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802ae04:	07d0      	lsls	r0, r2, #31
 802ae06:	d404      	bmi.n	802ae12 <_fflush_r+0x32>
 802ae08:	0599      	lsls	r1, r3, #22
 802ae0a:	d402      	bmi.n	802ae12 <_fflush_r+0x32>
 802ae0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ae0e:	f7ff fa84 	bl	802a31a <__retarget_lock_acquire_recursive>
 802ae12:	4628      	mov	r0, r5
 802ae14:	4621      	mov	r1, r4
 802ae16:	f7ff ff5f 	bl	802acd8 <__sflush_r>
 802ae1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ae1c:	07da      	lsls	r2, r3, #31
 802ae1e:	4605      	mov	r5, r0
 802ae20:	d4e4      	bmi.n	802adec <_fflush_r+0xc>
 802ae22:	89a3      	ldrh	r3, [r4, #12]
 802ae24:	059b      	lsls	r3, r3, #22
 802ae26:	d4e1      	bmi.n	802adec <_fflush_r+0xc>
 802ae28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ae2a:	f7ff fa77 	bl	802a31c <__retarget_lock_release_recursive>
 802ae2e:	e7dd      	b.n	802adec <_fflush_r+0xc>

0802ae30 <__swhatbuf_r>:
 802ae30:	b570      	push	{r4, r5, r6, lr}
 802ae32:	460c      	mov	r4, r1
 802ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ae38:	2900      	cmp	r1, #0
 802ae3a:	b096      	sub	sp, #88	@ 0x58
 802ae3c:	4615      	mov	r5, r2
 802ae3e:	461e      	mov	r6, r3
 802ae40:	da0d      	bge.n	802ae5e <__swhatbuf_r+0x2e>
 802ae42:	89a3      	ldrh	r3, [r4, #12]
 802ae44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802ae48:	f04f 0100 	mov.w	r1, #0
 802ae4c:	bf14      	ite	ne
 802ae4e:	2340      	movne	r3, #64	@ 0x40
 802ae50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802ae54:	2000      	movs	r0, #0
 802ae56:	6031      	str	r1, [r6, #0]
 802ae58:	602b      	str	r3, [r5, #0]
 802ae5a:	b016      	add	sp, #88	@ 0x58
 802ae5c:	bd70      	pop	{r4, r5, r6, pc}
 802ae5e:	466a      	mov	r2, sp
 802ae60:	f000 f862 	bl	802af28 <_fstat_r>
 802ae64:	2800      	cmp	r0, #0
 802ae66:	dbec      	blt.n	802ae42 <__swhatbuf_r+0x12>
 802ae68:	9901      	ldr	r1, [sp, #4]
 802ae6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802ae6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802ae72:	4259      	negs	r1, r3
 802ae74:	4159      	adcs	r1, r3
 802ae76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802ae7a:	e7eb      	b.n	802ae54 <__swhatbuf_r+0x24>

0802ae7c <__smakebuf_r>:
 802ae7c:	898b      	ldrh	r3, [r1, #12]
 802ae7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ae80:	079d      	lsls	r5, r3, #30
 802ae82:	4606      	mov	r6, r0
 802ae84:	460c      	mov	r4, r1
 802ae86:	d507      	bpl.n	802ae98 <__smakebuf_r+0x1c>
 802ae88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802ae8c:	6023      	str	r3, [r4, #0]
 802ae8e:	6123      	str	r3, [r4, #16]
 802ae90:	2301      	movs	r3, #1
 802ae92:	6163      	str	r3, [r4, #20]
 802ae94:	b003      	add	sp, #12
 802ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ae98:	ab01      	add	r3, sp, #4
 802ae9a:	466a      	mov	r2, sp
 802ae9c:	f7ff ffc8 	bl	802ae30 <__swhatbuf_r>
 802aea0:	9f00      	ldr	r7, [sp, #0]
 802aea2:	4605      	mov	r5, r0
 802aea4:	4639      	mov	r1, r7
 802aea6:	4630      	mov	r0, r6
 802aea8:	f7fe fe9c 	bl	8029be4 <_malloc_r>
 802aeac:	b948      	cbnz	r0, 802aec2 <__smakebuf_r+0x46>
 802aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802aeb2:	059a      	lsls	r2, r3, #22
 802aeb4:	d4ee      	bmi.n	802ae94 <__smakebuf_r+0x18>
 802aeb6:	f023 0303 	bic.w	r3, r3, #3
 802aeba:	f043 0302 	orr.w	r3, r3, #2
 802aebe:	81a3      	strh	r3, [r4, #12]
 802aec0:	e7e2      	b.n	802ae88 <__smakebuf_r+0xc>
 802aec2:	89a3      	ldrh	r3, [r4, #12]
 802aec4:	6020      	str	r0, [r4, #0]
 802aec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802aeca:	81a3      	strh	r3, [r4, #12]
 802aecc:	9b01      	ldr	r3, [sp, #4]
 802aece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802aed2:	b15b      	cbz	r3, 802aeec <__smakebuf_r+0x70>
 802aed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802aed8:	4630      	mov	r0, r6
 802aeda:	f000 f837 	bl	802af4c <_isatty_r>
 802aede:	b128      	cbz	r0, 802aeec <__smakebuf_r+0x70>
 802aee0:	89a3      	ldrh	r3, [r4, #12]
 802aee2:	f023 0303 	bic.w	r3, r3, #3
 802aee6:	f043 0301 	orr.w	r3, r3, #1
 802aeea:	81a3      	strh	r3, [r4, #12]
 802aeec:	89a3      	ldrh	r3, [r4, #12]
 802aeee:	431d      	orrs	r5, r3
 802aef0:	81a5      	strh	r5, [r4, #12]
 802aef2:	e7cf      	b.n	802ae94 <__smakebuf_r+0x18>

0802aef4 <memmove>:
 802aef4:	4288      	cmp	r0, r1
 802aef6:	b510      	push	{r4, lr}
 802aef8:	eb01 0402 	add.w	r4, r1, r2
 802aefc:	d902      	bls.n	802af04 <memmove+0x10>
 802aefe:	4284      	cmp	r4, r0
 802af00:	4623      	mov	r3, r4
 802af02:	d807      	bhi.n	802af14 <memmove+0x20>
 802af04:	1e43      	subs	r3, r0, #1
 802af06:	42a1      	cmp	r1, r4
 802af08:	d008      	beq.n	802af1c <memmove+0x28>
 802af0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802af0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802af12:	e7f8      	b.n	802af06 <memmove+0x12>
 802af14:	4402      	add	r2, r0
 802af16:	4601      	mov	r1, r0
 802af18:	428a      	cmp	r2, r1
 802af1a:	d100      	bne.n	802af1e <memmove+0x2a>
 802af1c:	bd10      	pop	{r4, pc}
 802af1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802af22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802af26:	e7f7      	b.n	802af18 <memmove+0x24>

0802af28 <_fstat_r>:
 802af28:	b538      	push	{r3, r4, r5, lr}
 802af2a:	4d07      	ldr	r5, [pc, #28]	@ (802af48 <_fstat_r+0x20>)
 802af2c:	2300      	movs	r3, #0
 802af2e:	4604      	mov	r4, r0
 802af30:	4608      	mov	r0, r1
 802af32:	4611      	mov	r1, r2
 802af34:	602b      	str	r3, [r5, #0]
 802af36:	f7d6 fa9a 	bl	800146e <_fstat>
 802af3a:	1c43      	adds	r3, r0, #1
 802af3c:	d102      	bne.n	802af44 <_fstat_r+0x1c>
 802af3e:	682b      	ldr	r3, [r5, #0]
 802af40:	b103      	cbz	r3, 802af44 <_fstat_r+0x1c>
 802af42:	6023      	str	r3, [r4, #0]
 802af44:	bd38      	pop	{r3, r4, r5, pc}
 802af46:	bf00      	nop
 802af48:	240166c0 	.word	0x240166c0

0802af4c <_isatty_r>:
 802af4c:	b538      	push	{r3, r4, r5, lr}
 802af4e:	4d06      	ldr	r5, [pc, #24]	@ (802af68 <_isatty_r+0x1c>)
 802af50:	2300      	movs	r3, #0
 802af52:	4604      	mov	r4, r0
 802af54:	4608      	mov	r0, r1
 802af56:	602b      	str	r3, [r5, #0]
 802af58:	f7d6 fa8e 	bl	8001478 <_isatty>
 802af5c:	1c43      	adds	r3, r0, #1
 802af5e:	d102      	bne.n	802af66 <_isatty_r+0x1a>
 802af60:	682b      	ldr	r3, [r5, #0]
 802af62:	b103      	cbz	r3, 802af66 <_isatty_r+0x1a>
 802af64:	6023      	str	r3, [r4, #0]
 802af66:	bd38      	pop	{r3, r4, r5, pc}
 802af68:	240166c0 	.word	0x240166c0

0802af6c <_realloc_r>:
 802af6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802af70:	4680      	mov	r8, r0
 802af72:	4615      	mov	r5, r2
 802af74:	460c      	mov	r4, r1
 802af76:	b921      	cbnz	r1, 802af82 <_realloc_r+0x16>
 802af78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802af7c:	4611      	mov	r1, r2
 802af7e:	f7fe be31 	b.w	8029be4 <_malloc_r>
 802af82:	b92a      	cbnz	r2, 802af90 <_realloc_r+0x24>
 802af84:	f7ff fa36 	bl	802a3f4 <_free_r>
 802af88:	2400      	movs	r4, #0
 802af8a:	4620      	mov	r0, r4
 802af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802af90:	f000 f81a 	bl	802afc8 <_malloc_usable_size_r>
 802af94:	4285      	cmp	r5, r0
 802af96:	4606      	mov	r6, r0
 802af98:	d802      	bhi.n	802afa0 <_realloc_r+0x34>
 802af9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802af9e:	d8f4      	bhi.n	802af8a <_realloc_r+0x1e>
 802afa0:	4629      	mov	r1, r5
 802afa2:	4640      	mov	r0, r8
 802afa4:	f7fe fe1e 	bl	8029be4 <_malloc_r>
 802afa8:	4607      	mov	r7, r0
 802afaa:	2800      	cmp	r0, #0
 802afac:	d0ec      	beq.n	802af88 <_realloc_r+0x1c>
 802afae:	42b5      	cmp	r5, r6
 802afb0:	462a      	mov	r2, r5
 802afb2:	4621      	mov	r1, r4
 802afb4:	bf28      	it	cs
 802afb6:	4632      	movcs	r2, r6
 802afb8:	f7ff f9b1 	bl	802a31e <memcpy>
 802afbc:	4621      	mov	r1, r4
 802afbe:	4640      	mov	r0, r8
 802afc0:	f7ff fa18 	bl	802a3f4 <_free_r>
 802afc4:	463c      	mov	r4, r7
 802afc6:	e7e0      	b.n	802af8a <_realloc_r+0x1e>

0802afc8 <_malloc_usable_size_r>:
 802afc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802afcc:	1f18      	subs	r0, r3, #4
 802afce:	2b00      	cmp	r3, #0
 802afd0:	bfbc      	itt	lt
 802afd2:	580b      	ldrlt	r3, [r1, r0]
 802afd4:	18c0      	addlt	r0, r0, r3
 802afd6:	4770      	bx	lr

0802afd8 <_init>:
 802afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802afda:	bf00      	nop
 802afdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802afde:	bc08      	pop	{r3}
 802afe0:	469e      	mov	lr, r3
 802afe2:	4770      	bx	lr

0802afe4 <_fini>:
 802afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802afe6:	bf00      	nop
 802afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802afea:	bc08      	pop	{r3}
 802afec:	469e      	mov	lr, r3
 802afee:	4770      	bx	lr
